/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRetirementAssetCategories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRetirementAssetCategories::OAIIRetirementAssetCategories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRetirementAssetCategories::OAIIRetirementAssetCategories() {
    this->initializeModel();
}

OAIIRetirementAssetCategories::~OAIIRetirementAssetCategories() {}

void OAIIRetirementAssetCategories::initializeModel() {

    m_all_assets_isSet = false;
    m_all_assets_isValid = false;

    m_non_qualified_annuities_isSet = false;
    m_non_qualified_annuities_isValid = false;

    m_non_qualified_assets_isSet = false;
    m_non_qualified_assets_isValid = false;

    m_qualified_annuities_isSet = false;
    m_qualified_annuities_isValid = false;

    m_qualified_assets_isSet = false;
    m_qualified_assets_isValid = false;

    m_total_assets_isSet = false;
    m_total_assets_isValid = false;
}

void OAIIRetirementAssetCategories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRetirementAssetCategories::fromJsonObject(QJsonObject json) {

    m_all_assets_isValid = ::OpenAPI::fromJsonValue(m_all_assets, json[QString("allAssets")]);
    m_all_assets_isSet = !json[QString("allAssets")].isNull() && m_all_assets_isValid;

    m_non_qualified_annuities_isValid = ::OpenAPI::fromJsonValue(m_non_qualified_annuities, json[QString("nonQualifiedAnnuities")]);
    m_non_qualified_annuities_isSet = !json[QString("nonQualifiedAnnuities")].isNull() && m_non_qualified_annuities_isValid;

    m_non_qualified_assets_isValid = ::OpenAPI::fromJsonValue(m_non_qualified_assets, json[QString("nonQualifiedAssets")]);
    m_non_qualified_assets_isSet = !json[QString("nonQualifiedAssets")].isNull() && m_non_qualified_assets_isValid;

    m_qualified_annuities_isValid = ::OpenAPI::fromJsonValue(m_qualified_annuities, json[QString("qualifiedAnnuities")]);
    m_qualified_annuities_isSet = !json[QString("qualifiedAnnuities")].isNull() && m_qualified_annuities_isValid;

    m_qualified_assets_isValid = ::OpenAPI::fromJsonValue(m_qualified_assets, json[QString("qualifiedAssets")]);
    m_qualified_assets_isSet = !json[QString("qualifiedAssets")].isNull() && m_qualified_assets_isValid;

    m_total_assets_isValid = ::OpenAPI::fromJsonValue(m_total_assets, json[QString("totalAssets")]);
    m_total_assets_isSet = !json[QString("totalAssets")].isNull() && m_total_assets_isValid;
}

QString OAIIRetirementAssetCategories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRetirementAssetCategories::asJsonObject() const {
    QJsonObject obj;
    if (m_all_assets.size() > 0) {
        obj.insert(QString("allAssets"), ::OpenAPI::toJsonValue(m_all_assets));
    }
    if (m_non_qualified_annuities.isSet()) {
        obj.insert(QString("nonQualifiedAnnuities"), ::OpenAPI::toJsonValue(m_non_qualified_annuities));
    }
    if (m_non_qualified_assets.isSet()) {
        obj.insert(QString("nonQualifiedAssets"), ::OpenAPI::toJsonValue(m_non_qualified_assets));
    }
    if (m_qualified_annuities.isSet()) {
        obj.insert(QString("qualifiedAnnuities"), ::OpenAPI::toJsonValue(m_qualified_annuities));
    }
    if (m_qualified_assets.isSet()) {
        obj.insert(QString("qualifiedAssets"), ::OpenAPI::toJsonValue(m_qualified_assets));
    }
    if (m_total_assets.isSet()) {
        obj.insert(QString("totalAssets"), ::OpenAPI::toJsonValue(m_total_assets));
    }
    return obj;
}

QList<OAIIValueDescriptionPair_Currency> OAIIRetirementAssetCategories::getAllAssets() const {
    return m_all_assets;
}
void OAIIRetirementAssetCategories::setAllAssets(const QList<OAIIValueDescriptionPair_Currency> &all_assets) {
    m_all_assets = all_assets;
    m_all_assets_isSet = true;
}

bool OAIIRetirementAssetCategories::is_all_assets_Set() const{
    return m_all_assets_isSet;
}

bool OAIIRetirementAssetCategories::is_all_assets_Valid() const{
    return m_all_assets_isValid;
}

OAIINetWorthCategory OAIIRetirementAssetCategories::getNonQualifiedAnnuities() const {
    return m_non_qualified_annuities;
}
void OAIIRetirementAssetCategories::setNonQualifiedAnnuities(const OAIINetWorthCategory &non_qualified_annuities) {
    m_non_qualified_annuities = non_qualified_annuities;
    m_non_qualified_annuities_isSet = true;
}

bool OAIIRetirementAssetCategories::is_non_qualified_annuities_Set() const{
    return m_non_qualified_annuities_isSet;
}

bool OAIIRetirementAssetCategories::is_non_qualified_annuities_Valid() const{
    return m_non_qualified_annuities_isValid;
}

OAIINetWorthCategory OAIIRetirementAssetCategories::getNonQualifiedAssets() const {
    return m_non_qualified_assets;
}
void OAIIRetirementAssetCategories::setNonQualifiedAssets(const OAIINetWorthCategory &non_qualified_assets) {
    m_non_qualified_assets = non_qualified_assets;
    m_non_qualified_assets_isSet = true;
}

bool OAIIRetirementAssetCategories::is_non_qualified_assets_Set() const{
    return m_non_qualified_assets_isSet;
}

bool OAIIRetirementAssetCategories::is_non_qualified_assets_Valid() const{
    return m_non_qualified_assets_isValid;
}

OAIINetWorthCategory OAIIRetirementAssetCategories::getQualifiedAnnuities() const {
    return m_qualified_annuities;
}
void OAIIRetirementAssetCategories::setQualifiedAnnuities(const OAIINetWorthCategory &qualified_annuities) {
    m_qualified_annuities = qualified_annuities;
    m_qualified_annuities_isSet = true;
}

bool OAIIRetirementAssetCategories::is_qualified_annuities_Set() const{
    return m_qualified_annuities_isSet;
}

bool OAIIRetirementAssetCategories::is_qualified_annuities_Valid() const{
    return m_qualified_annuities_isValid;
}

OAIINetWorthCategory OAIIRetirementAssetCategories::getQualifiedAssets() const {
    return m_qualified_assets;
}
void OAIIRetirementAssetCategories::setQualifiedAssets(const OAIINetWorthCategory &qualified_assets) {
    m_qualified_assets = qualified_assets;
    m_qualified_assets_isSet = true;
}

bool OAIIRetirementAssetCategories::is_qualified_assets_Set() const{
    return m_qualified_assets_isSet;
}

bool OAIIRetirementAssetCategories::is_qualified_assets_Valid() const{
    return m_qualified_assets_isValid;
}

OAIINetWorthCategory OAIIRetirementAssetCategories::getTotalAssets() const {
    return m_total_assets;
}
void OAIIRetirementAssetCategories::setTotalAssets(const OAIINetWorthCategory &total_assets) {
    m_total_assets = total_assets;
    m_total_assets_isSet = true;
}

bool OAIIRetirementAssetCategories::is_total_assets_Set() const{
    return m_total_assets_isSet;
}

bool OAIIRetirementAssetCategories::is_total_assets_Valid() const{
    return m_total_assets_isValid;
}

bool OAIIRetirementAssetCategories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified_annuities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_annuities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRetirementAssetCategories::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
