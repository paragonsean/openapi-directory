/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILiabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILiabilities::OAIILiabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILiabilities::OAIILiabilities() {
    this->initializeModel();
}

OAIILiabilities::~OAIILiabilities() {}

void OAIILiabilities::initializeModel() {

    m_client_liabilities_isSet = false;
    m_client_liabilities_isValid = false;

    m_co_client_liabilities_isSet = false;
    m_co_client_liabilities_isValid = false;

    m_community_property_liabilities_isSet = false;
    m_community_property_liabilities_isValid = false;

    m_joint_liabilities_isSet = false;
    m_joint_liabilities_isValid = false;

    m_total_liabilities_isSet = false;
    m_total_liabilities_isValid = false;
}

void OAIILiabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILiabilities::fromJsonObject(QJsonObject json) {

    m_client_liabilities_isValid = ::OpenAPI::fromJsonValue(m_client_liabilities, json[QString("clientLiabilities")]);
    m_client_liabilities_isSet = !json[QString("clientLiabilities")].isNull() && m_client_liabilities_isValid;

    m_co_client_liabilities_isValid = ::OpenAPI::fromJsonValue(m_co_client_liabilities, json[QString("coClientLiabilities")]);
    m_co_client_liabilities_isSet = !json[QString("coClientLiabilities")].isNull() && m_co_client_liabilities_isValid;

    m_community_property_liabilities_isValid = ::OpenAPI::fromJsonValue(m_community_property_liabilities, json[QString("communityPropertyLiabilities")]);
    m_community_property_liabilities_isSet = !json[QString("communityPropertyLiabilities")].isNull() && m_community_property_liabilities_isValid;

    m_joint_liabilities_isValid = ::OpenAPI::fromJsonValue(m_joint_liabilities, json[QString("jointLiabilities")]);
    m_joint_liabilities_isSet = !json[QString("jointLiabilities")].isNull() && m_joint_liabilities_isValid;

    m_total_liabilities_isValid = ::OpenAPI::fromJsonValue(m_total_liabilities, json[QString("totalLiabilities")]);
    m_total_liabilities_isSet = !json[QString("totalLiabilities")].isNull() && m_total_liabilities_isValid;
}

QString OAIILiabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILiabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_client_liabilities.isSet()) {
        obj.insert(QString("clientLiabilities"), ::OpenAPI::toJsonValue(m_client_liabilities));
    }
    if (m_co_client_liabilities.isSet()) {
        obj.insert(QString("coClientLiabilities"), ::OpenAPI::toJsonValue(m_co_client_liabilities));
    }
    if (m_community_property_liabilities.isSet()) {
        obj.insert(QString("communityPropertyLiabilities"), ::OpenAPI::toJsonValue(m_community_property_liabilities));
    }
    if (m_joint_liabilities.isSet()) {
        obj.insert(QString("jointLiabilities"), ::OpenAPI::toJsonValue(m_joint_liabilities));
    }
    if (m_total_liabilities.isSet()) {
        obj.insert(QString("totalLiabilities"), ::OpenAPI::toJsonValue(m_total_liabilities));
    }
    return obj;
}

OAIINetWorthCategory OAIILiabilities::getClientLiabilities() const {
    return m_client_liabilities;
}
void OAIILiabilities::setClientLiabilities(const OAIINetWorthCategory &client_liabilities) {
    m_client_liabilities = client_liabilities;
    m_client_liabilities_isSet = true;
}

bool OAIILiabilities::is_client_liabilities_Set() const{
    return m_client_liabilities_isSet;
}

bool OAIILiabilities::is_client_liabilities_Valid() const{
    return m_client_liabilities_isValid;
}

OAIINetWorthCategory OAIILiabilities::getCoClientLiabilities() const {
    return m_co_client_liabilities;
}
void OAIILiabilities::setCoClientLiabilities(const OAIINetWorthCategory &co_client_liabilities) {
    m_co_client_liabilities = co_client_liabilities;
    m_co_client_liabilities_isSet = true;
}

bool OAIILiabilities::is_co_client_liabilities_Set() const{
    return m_co_client_liabilities_isSet;
}

bool OAIILiabilities::is_co_client_liabilities_Valid() const{
    return m_co_client_liabilities_isValid;
}

OAIINetWorthCategory OAIILiabilities::getCommunityPropertyLiabilities() const {
    return m_community_property_liabilities;
}
void OAIILiabilities::setCommunityPropertyLiabilities(const OAIINetWorthCategory &community_property_liabilities) {
    m_community_property_liabilities = community_property_liabilities;
    m_community_property_liabilities_isSet = true;
}

bool OAIILiabilities::is_community_property_liabilities_Set() const{
    return m_community_property_liabilities_isSet;
}

bool OAIILiabilities::is_community_property_liabilities_Valid() const{
    return m_community_property_liabilities_isValid;
}

OAIINetWorthCategory OAIILiabilities::getJointLiabilities() const {
    return m_joint_liabilities;
}
void OAIILiabilities::setJointLiabilities(const OAIINetWorthCategory &joint_liabilities) {
    m_joint_liabilities = joint_liabilities;
    m_joint_liabilities_isSet = true;
}

bool OAIILiabilities::is_joint_liabilities_Set() const{
    return m_joint_liabilities_isSet;
}

bool OAIILiabilities::is_joint_liabilities_Valid() const{
    return m_joint_liabilities_isValid;
}

OAIINetWorthCategory OAIILiabilities::getTotalLiabilities() const {
    return m_total_liabilities;
}
void OAIILiabilities::setTotalLiabilities(const OAIINetWorthCategory &total_liabilities) {
    m_total_liabilities = total_liabilities;
    m_total_liabilities_isSet = true;
}

bool OAIILiabilities::is_total_liabilities_Set() const{
    return m_total_liabilities_isSet;
}

bool OAIILiabilities::is_total_liabilities_Valid() const{
    return m_total_liabilities_isValid;
}

bool OAIILiabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_property_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joint_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILiabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
