/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIFamily.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIFamily::OAIIFamily(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIFamily::OAIIFamily() {
    this->initializeModel();
}

OAIIFamily::~OAIIFamily() {}

void OAIIFamily::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_co_client_isSet = false;
    m_co_client_isValid = false;

    m_dependents_isSet = false;
    m_dependents_isValid = false;

    m_head_full_names_isSet = false;
    m_head_full_names_isValid = false;
}

void OAIIFamily::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIFamily::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_co_client_isValid = ::OpenAPI::fromJsonValue(m_co_client, json[QString("coClient")]);
    m_co_client_isSet = !json[QString("coClient")].isNull() && m_co_client_isValid;

    m_dependents_isValid = ::OpenAPI::fromJsonValue(m_dependents, json[QString("dependents")]);
    m_dependents_isSet = !json[QString("dependents")].isNull() && m_dependents_isValid;

    m_head_full_names_isValid = ::OpenAPI::fromJsonValue(m_head_full_names, json[QString("headFullNames")]);
    m_head_full_names_isSet = !json[QString("headFullNames")].isNull() && m_head_full_names_isValid;
}

QString OAIIFamily::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIFamily::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_co_client.isSet()) {
        obj.insert(QString("coClient"), ::OpenAPI::toJsonValue(m_co_client));
    }
    if (m_dependents.size() > 0) {
        obj.insert(QString("dependents"), ::OpenAPI::toJsonValue(m_dependents));
    }
    if (m_head_full_names_isSet) {
        obj.insert(QString("headFullNames"), ::OpenAPI::toJsonValue(m_head_full_names));
    }
    return obj;
}

OAIIAddress OAIIFamily::getAddress() const {
    return m_address;
}
void OAIIFamily::setAddress(const OAIIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIIFamily::is_address_Set() const{
    return m_address_isSet;
}

bool OAIIFamily::is_address_Valid() const{
    return m_address_isValid;
}

OAIIFamilyMember OAIIFamily::getClient() const {
    return m_client;
}
void OAIIFamily::setClient(const OAIIFamilyMember &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIIFamily::is_client_Set() const{
    return m_client_isSet;
}

bool OAIIFamily::is_client_Valid() const{
    return m_client_isValid;
}

OAIIFamilyMember OAIIFamily::getCoClient() const {
    return m_co_client;
}
void OAIIFamily::setCoClient(const OAIIFamilyMember &co_client) {
    m_co_client = co_client;
    m_co_client_isSet = true;
}

bool OAIIFamily::is_co_client_Set() const{
    return m_co_client_isSet;
}

bool OAIIFamily::is_co_client_Valid() const{
    return m_co_client_isValid;
}

QList<OAIIDependent> OAIIFamily::getDependents() const {
    return m_dependents;
}
void OAIIFamily::setDependents(const QList<OAIIDependent> &dependents) {
    m_dependents = dependents;
    m_dependents_isSet = true;
}

bool OAIIFamily::is_dependents_Set() const{
    return m_dependents_isSet;
}

bool OAIIFamily::is_dependents_Valid() const{
    return m_dependents_isValid;
}

QString OAIIFamily::getHeadFullNames() const {
    return m_head_full_names;
}
void OAIIFamily::setHeadFullNames(const QString &head_full_names) {
    m_head_full_names = head_full_names;
    m_head_full_names_isSet = true;
}

bool OAIIFamily::is_head_full_names_Set() const{
    return m_head_full_names_isSet;
}

bool OAIIFamily::is_head_full_names_Valid() const{
    return m_head_full_names_isValid;
}

bool OAIIFamily::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_full_names_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIFamily::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
