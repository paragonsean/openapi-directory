/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::~OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel() {}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::initializeModel() {

    m_additional_monthly_savings_isSet = false;
    m_additional_monthly_savings_isValid = false;

    m_client_retirement_age_isSet = false;
    m_client_retirement_age_isValid = false;

    m_client_retirement_age_date_isSet = false;
    m_client_retirement_age_date_isValid = false;

    m_co_client_retirement_age_isSet = false;
    m_co_client_retirement_age_isValid = false;

    m_co_client_retirement_age_date_isSet = false;
    m_co_client_retirement_age_date_isValid = false;

    m_expense_coverage_dollars_isSet = false;
    m_expense_coverage_dollars_isValid = false;

    m_expense_coverage_percentage_isSet = false;
    m_expense_coverage_percentage_isValid = false;

    m_lump_sum_savings_isSet = false;
    m_lump_sum_savings_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::fromJsonObject(QJsonObject json) {

    m_additional_monthly_savings_isValid = ::OpenAPI::fromJsonValue(m_additional_monthly_savings, json[QString("additionalMonthlySavings")]);
    m_additional_monthly_savings_isSet = !json[QString("additionalMonthlySavings")].isNull() && m_additional_monthly_savings_isValid;

    m_client_retirement_age_isValid = ::OpenAPI::fromJsonValue(m_client_retirement_age, json[QString("clientRetirementAge")]);
    m_client_retirement_age_isSet = !json[QString("clientRetirementAge")].isNull() && m_client_retirement_age_isValid;

    m_client_retirement_age_date_isValid = ::OpenAPI::fromJsonValue(m_client_retirement_age_date, json[QString("clientRetirementAgeDate")]);
    m_client_retirement_age_date_isSet = !json[QString("clientRetirementAgeDate")].isNull() && m_client_retirement_age_date_isValid;

    m_co_client_retirement_age_isValid = ::OpenAPI::fromJsonValue(m_co_client_retirement_age, json[QString("coClientRetirementAge")]);
    m_co_client_retirement_age_isSet = !json[QString("coClientRetirementAge")].isNull() && m_co_client_retirement_age_isValid;

    m_co_client_retirement_age_date_isValid = ::OpenAPI::fromJsonValue(m_co_client_retirement_age_date, json[QString("coClientRetirementAgeDate")]);
    m_co_client_retirement_age_date_isSet = !json[QString("coClientRetirementAgeDate")].isNull() && m_co_client_retirement_age_date_isValid;

    m_expense_coverage_dollars_isValid = ::OpenAPI::fromJsonValue(m_expense_coverage_dollars, json[QString("expenseCoverageDollars")]);
    m_expense_coverage_dollars_isSet = !json[QString("expenseCoverageDollars")].isNull() && m_expense_coverage_dollars_isValid;

    m_expense_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_expense_coverage_percentage, json[QString("expenseCoveragePercentage")]);
    m_expense_coverage_percentage_isSet = !json[QString("expenseCoveragePercentage")].isNull() && m_expense_coverage_percentage_isValid;

    m_lump_sum_savings_isValid = ::OpenAPI::fromJsonValue(m_lump_sum_savings, json[QString("lumpSumSavings")]);
    m_lump_sum_savings_isSet = !json[QString("lumpSumSavings")].isNull() && m_lump_sum_savings_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;
}

QString OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_monthly_savings_isSet) {
        obj.insert(QString("additionalMonthlySavings"), ::OpenAPI::toJsonValue(m_additional_monthly_savings));
    }
    if (m_client_retirement_age_isSet) {
        obj.insert(QString("clientRetirementAge"), ::OpenAPI::toJsonValue(m_client_retirement_age));
    }
    if (m_client_retirement_age_date_isSet) {
        obj.insert(QString("clientRetirementAgeDate"), ::OpenAPI::toJsonValue(m_client_retirement_age_date));
    }
    if (m_co_client_retirement_age_isSet) {
        obj.insert(QString("coClientRetirementAge"), ::OpenAPI::toJsonValue(m_co_client_retirement_age));
    }
    if (m_co_client_retirement_age_date_isSet) {
        obj.insert(QString("coClientRetirementAgeDate"), ::OpenAPI::toJsonValue(m_co_client_retirement_age_date));
    }
    if (m_expense_coverage_dollars_isSet) {
        obj.insert(QString("expenseCoverageDollars"), ::OpenAPI::toJsonValue(m_expense_coverage_dollars));
    }
    if (m_expense_coverage_percentage_isSet) {
        obj.insert(QString("expenseCoveragePercentage"), ::OpenAPI::toJsonValue(m_expense_coverage_percentage));
    }
    if (m_lump_sum_savings_isSet) {
        obj.insert(QString("lumpSumSavings"), ::OpenAPI::toJsonValue(m_lump_sum_savings));
    }
    if (m_purchase_date_isSet) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    return obj;
}

double OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getAdditionalMonthlySavings() const {
    return m_additional_monthly_savings;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setAdditionalMonthlySavings(const double &additional_monthly_savings) {
    m_additional_monthly_savings = additional_monthly_savings;
    m_additional_monthly_savings_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_additional_monthly_savings_Set() const{
    return m_additional_monthly_savings_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_additional_monthly_savings_Valid() const{
    return m_additional_monthly_savings_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getClientRetirementAge() const {
    return m_client_retirement_age;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setClientRetirementAge(const qint32 &client_retirement_age) {
    m_client_retirement_age = client_retirement_age;
    m_client_retirement_age_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_client_retirement_age_Set() const{
    return m_client_retirement_age_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_client_retirement_age_Valid() const{
    return m_client_retirement_age_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getClientRetirementAgeDate() const {
    return m_client_retirement_age_date;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setClientRetirementAgeDate(const QDateTime &client_retirement_age_date) {
    m_client_retirement_age_date = client_retirement_age_date;
    m_client_retirement_age_date_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_client_retirement_age_date_Set() const{
    return m_client_retirement_age_date_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_client_retirement_age_date_Valid() const{
    return m_client_retirement_age_date_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getCoClientRetirementAge() const {
    return m_co_client_retirement_age;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setCoClientRetirementAge(const qint32 &co_client_retirement_age) {
    m_co_client_retirement_age = co_client_retirement_age;
    m_co_client_retirement_age_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_co_client_retirement_age_Set() const{
    return m_co_client_retirement_age_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_co_client_retirement_age_Valid() const{
    return m_co_client_retirement_age_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getCoClientRetirementAgeDate() const {
    return m_co_client_retirement_age_date;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setCoClientRetirementAgeDate(const QDateTime &co_client_retirement_age_date) {
    m_co_client_retirement_age_date = co_client_retirement_age_date;
    m_co_client_retirement_age_date_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_co_client_retirement_age_date_Set() const{
    return m_co_client_retirement_age_date_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_co_client_retirement_age_date_Valid() const{
    return m_co_client_retirement_age_date_isValid;
}

double OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getExpenseCoverageDollars() const {
    return m_expense_coverage_dollars;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setExpenseCoverageDollars(const double &expense_coverage_dollars) {
    m_expense_coverage_dollars = expense_coverage_dollars;
    m_expense_coverage_dollars_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_expense_coverage_dollars_Set() const{
    return m_expense_coverage_dollars_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_expense_coverage_dollars_Valid() const{
    return m_expense_coverage_dollars_isValid;
}

double OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getExpenseCoveragePercentage() const {
    return m_expense_coverage_percentage;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setExpenseCoveragePercentage(const double &expense_coverage_percentage) {
    m_expense_coverage_percentage = expense_coverage_percentage;
    m_expense_coverage_percentage_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_expense_coverage_percentage_Set() const{
    return m_expense_coverage_percentage_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_expense_coverage_percentage_Valid() const{
    return m_expense_coverage_percentage_isValid;
}

double OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getLumpSumSavings() const {
    return m_lump_sum_savings;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setLumpSumSavings(const double &lump_sum_savings) {
    m_lump_sum_savings = lump_sum_savings;
    m_lump_sum_savings_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_lump_sum_savings_Set() const{
    return m_lump_sum_savings_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_lump_sum_savings_Valid() const{
    return m_lump_sum_savings_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::setPurchaseDate(const QDateTime &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_monthly_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_retirement_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_retirement_age_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_retirement_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_retirement_age_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_coverage_dollars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lump_sum_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
