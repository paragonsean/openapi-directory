/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIINetWorthAtDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIINetWorthAtDate::OAIINetWorthAtDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIINetWorthAtDate::OAIINetWorthAtDate() {
    this->initializeModel();
}

OAIINetWorthAtDate::~OAIINetWorthAtDate() {}

void OAIINetWorthAtDate::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_assets_funding_retirement_isSet = false;
    m_assets_funding_retirement_isValid = false;

    m_client_net_worth_isSet = false;
    m_client_net_worth_isValid = false;

    m_co_client_net_worth_isSet = false;
    m_co_client_net_worth_isValid = false;

    m_community_property_net_worth_isSet = false;
    m_community_property_net_worth_isValid = false;

    m_joint_net_worth_isSet = false;
    m_joint_net_worth_isValid = false;

    m_liabilities_isSet = false;
    m_liabilities_isValid = false;

    m_total_net_worth_isSet = false;
    m_total_net_worth_isValid = false;
}

void OAIINetWorthAtDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIINetWorthAtDate::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_assets_funding_retirement_isValid = ::OpenAPI::fromJsonValue(m_assets_funding_retirement, json[QString("assetsFundingRetirement")]);
    m_assets_funding_retirement_isSet = !json[QString("assetsFundingRetirement")].isNull() && m_assets_funding_retirement_isValid;

    m_client_net_worth_isValid = ::OpenAPI::fromJsonValue(m_client_net_worth, json[QString("clientNetWorth")]);
    m_client_net_worth_isSet = !json[QString("clientNetWorth")].isNull() && m_client_net_worth_isValid;

    m_co_client_net_worth_isValid = ::OpenAPI::fromJsonValue(m_co_client_net_worth, json[QString("coClientNetWorth")]);
    m_co_client_net_worth_isSet = !json[QString("coClientNetWorth")].isNull() && m_co_client_net_worth_isValid;

    m_community_property_net_worth_isValid = ::OpenAPI::fromJsonValue(m_community_property_net_worth, json[QString("communityPropertyNetWorth")]);
    m_community_property_net_worth_isSet = !json[QString("communityPropertyNetWorth")].isNull() && m_community_property_net_worth_isValid;

    m_joint_net_worth_isValid = ::OpenAPI::fromJsonValue(m_joint_net_worth, json[QString("jointNetWorth")]);
    m_joint_net_worth_isSet = !json[QString("jointNetWorth")].isNull() && m_joint_net_worth_isValid;

    m_liabilities_isValid = ::OpenAPI::fromJsonValue(m_liabilities, json[QString("liabilities")]);
    m_liabilities_isSet = !json[QString("liabilities")].isNull() && m_liabilities_isValid;

    m_total_net_worth_isValid = ::OpenAPI::fromJsonValue(m_total_net_worth, json[QString("totalNetWorth")]);
    m_total_net_worth_isSet = !json[QString("totalNetWorth")].isNull() && m_total_net_worth_isValid;
}

QString OAIINetWorthAtDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIINetWorthAtDate::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_assets_funding_retirement.isSet()) {
        obj.insert(QString("assetsFundingRetirement"), ::OpenAPI::toJsonValue(m_assets_funding_retirement));
    }
    if (m_client_net_worth.isSet()) {
        obj.insert(QString("clientNetWorth"), ::OpenAPI::toJsonValue(m_client_net_worth));
    }
    if (m_co_client_net_worth.isSet()) {
        obj.insert(QString("coClientNetWorth"), ::OpenAPI::toJsonValue(m_co_client_net_worth));
    }
    if (m_community_property_net_worth.isSet()) {
        obj.insert(QString("communityPropertyNetWorth"), ::OpenAPI::toJsonValue(m_community_property_net_worth));
    }
    if (m_joint_net_worth.isSet()) {
        obj.insert(QString("jointNetWorth"), ::OpenAPI::toJsonValue(m_joint_net_worth));
    }
    if (m_liabilities.isSet()) {
        obj.insert(QString("liabilities"), ::OpenAPI::toJsonValue(m_liabilities));
    }
    if (m_total_net_worth.isSet()) {
        obj.insert(QString("totalNetWorth"), ::OpenAPI::toJsonValue(m_total_net_worth));
    }
    return obj;
}

OAIIAssets OAIINetWorthAtDate::getAssets() const {
    return m_assets;
}
void OAIINetWorthAtDate::setAssets(const OAIIAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIINetWorthAtDate::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIINetWorthAtDate::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIIRetirementAssets OAIINetWorthAtDate::getAssetsFundingRetirement() const {
    return m_assets_funding_retirement;
}
void OAIINetWorthAtDate::setAssetsFundingRetirement(const OAIIRetirementAssets &assets_funding_retirement) {
    m_assets_funding_retirement = assets_funding_retirement;
    m_assets_funding_retirement_isSet = true;
}

bool OAIINetWorthAtDate::is_assets_funding_retirement_Set() const{
    return m_assets_funding_retirement_isSet;
}

bool OAIINetWorthAtDate::is_assets_funding_retirement_Valid() const{
    return m_assets_funding_retirement_isValid;
}

OAICurrency OAIINetWorthAtDate::getClientNetWorth() const {
    return m_client_net_worth;
}
void OAIINetWorthAtDate::setClientNetWorth(const OAICurrency &client_net_worth) {
    m_client_net_worth = client_net_worth;
    m_client_net_worth_isSet = true;
}

bool OAIINetWorthAtDate::is_client_net_worth_Set() const{
    return m_client_net_worth_isSet;
}

bool OAIINetWorthAtDate::is_client_net_worth_Valid() const{
    return m_client_net_worth_isValid;
}

OAICurrency OAIINetWorthAtDate::getCoClientNetWorth() const {
    return m_co_client_net_worth;
}
void OAIINetWorthAtDate::setCoClientNetWorth(const OAICurrency &co_client_net_worth) {
    m_co_client_net_worth = co_client_net_worth;
    m_co_client_net_worth_isSet = true;
}

bool OAIINetWorthAtDate::is_co_client_net_worth_Set() const{
    return m_co_client_net_worth_isSet;
}

bool OAIINetWorthAtDate::is_co_client_net_worth_Valid() const{
    return m_co_client_net_worth_isValid;
}

OAICurrency OAIINetWorthAtDate::getCommunityPropertyNetWorth() const {
    return m_community_property_net_worth;
}
void OAIINetWorthAtDate::setCommunityPropertyNetWorth(const OAICurrency &community_property_net_worth) {
    m_community_property_net_worth = community_property_net_worth;
    m_community_property_net_worth_isSet = true;
}

bool OAIINetWorthAtDate::is_community_property_net_worth_Set() const{
    return m_community_property_net_worth_isSet;
}

bool OAIINetWorthAtDate::is_community_property_net_worth_Valid() const{
    return m_community_property_net_worth_isValid;
}

OAICurrency OAIINetWorthAtDate::getJointNetWorth() const {
    return m_joint_net_worth;
}
void OAIINetWorthAtDate::setJointNetWorth(const OAICurrency &joint_net_worth) {
    m_joint_net_worth = joint_net_worth;
    m_joint_net_worth_isSet = true;
}

bool OAIINetWorthAtDate::is_joint_net_worth_Set() const{
    return m_joint_net_worth_isSet;
}

bool OAIINetWorthAtDate::is_joint_net_worth_Valid() const{
    return m_joint_net_worth_isValid;
}

OAIILiabilities OAIINetWorthAtDate::getLiabilities() const {
    return m_liabilities;
}
void OAIINetWorthAtDate::setLiabilities(const OAIILiabilities &liabilities) {
    m_liabilities = liabilities;
    m_liabilities_isSet = true;
}

bool OAIINetWorthAtDate::is_liabilities_Set() const{
    return m_liabilities_isSet;
}

bool OAIINetWorthAtDate::is_liabilities_Valid() const{
    return m_liabilities_isValid;
}

OAICurrency OAIINetWorthAtDate::getTotalNetWorth() const {
    return m_total_net_worth;
}
void OAIINetWorthAtDate::setTotalNetWorth(const OAICurrency &total_net_worth) {
    m_total_net_worth = total_net_worth;
    m_total_net_worth_isSet = true;
}

bool OAIINetWorthAtDate::is_total_net_worth_Set() const{
    return m_total_net_worth_isSet;
}

bool OAIINetWorthAtDate::is_total_net_worth_Valid() const{
    return m_total_net_worth_isValid;
}

bool OAIINetWorthAtDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets_funding_retirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_net_worth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_net_worth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_property_net_worth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joint_net_worth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_liabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_worth.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIINetWorthAtDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
