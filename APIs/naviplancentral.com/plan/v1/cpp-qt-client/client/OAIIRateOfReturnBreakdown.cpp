/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRateOfReturnBreakdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRateOfReturnBreakdown::OAIIRateOfReturnBreakdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRateOfReturnBreakdown::OAIIRateOfReturnBreakdown() {
    this->initializeModel();
}

OAIIRateOfReturnBreakdown::~OAIIRateOfReturnBreakdown() {}

void OAIIRateOfReturnBreakdown::initializeModel() {

    m_capital_gain_isSet = false;
    m_capital_gain_isValid = false;

    m_deferred_growth_isSet = false;
    m_deferred_growth_isValid = false;

    m_dividend_isSet = false;
    m_dividend_isValid = false;

    m_interest_isSet = false;
    m_interest_isValid = false;

    m_tax_free_isSet = false;
    m_tax_free_isValid = false;
}

void OAIIRateOfReturnBreakdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRateOfReturnBreakdown::fromJsonObject(QJsonObject json) {

    m_capital_gain_isValid = ::OpenAPI::fromJsonValue(m_capital_gain, json[QString("capitalGain")]);
    m_capital_gain_isSet = !json[QString("capitalGain")].isNull() && m_capital_gain_isValid;

    m_deferred_growth_isValid = ::OpenAPI::fromJsonValue(m_deferred_growth, json[QString("deferredGrowth")]);
    m_deferred_growth_isSet = !json[QString("deferredGrowth")].isNull() && m_deferred_growth_isValid;

    m_dividend_isValid = ::OpenAPI::fromJsonValue(m_dividend, json[QString("dividend")]);
    m_dividend_isSet = !json[QString("dividend")].isNull() && m_dividend_isValid;

    m_interest_isValid = ::OpenAPI::fromJsonValue(m_interest, json[QString("interest")]);
    m_interest_isSet = !json[QString("interest")].isNull() && m_interest_isValid;

    m_tax_free_isValid = ::OpenAPI::fromJsonValue(m_tax_free, json[QString("taxFree")]);
    m_tax_free_isSet = !json[QString("taxFree")].isNull() && m_tax_free_isValid;
}

QString OAIIRateOfReturnBreakdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRateOfReturnBreakdown::asJsonObject() const {
    QJsonObject obj;
    if (m_capital_gain.isSet()) {
        obj.insert(QString("capitalGain"), ::OpenAPI::toJsonValue(m_capital_gain));
    }
    if (m_deferred_growth.isSet()) {
        obj.insert(QString("deferredGrowth"), ::OpenAPI::toJsonValue(m_deferred_growth));
    }
    if (m_dividend.isSet()) {
        obj.insert(QString("dividend"), ::OpenAPI::toJsonValue(m_dividend));
    }
    if (m_interest.isSet()) {
        obj.insert(QString("interest"), ::OpenAPI::toJsonValue(m_interest));
    }
    if (m_tax_free.isSet()) {
        obj.insert(QString("taxFree"), ::OpenAPI::toJsonValue(m_tax_free));
    }
    return obj;
}

OAIPercent OAIIRateOfReturnBreakdown::getCapitalGain() const {
    return m_capital_gain;
}
void OAIIRateOfReturnBreakdown::setCapitalGain(const OAIPercent &capital_gain) {
    m_capital_gain = capital_gain;
    m_capital_gain_isSet = true;
}

bool OAIIRateOfReturnBreakdown::is_capital_gain_Set() const{
    return m_capital_gain_isSet;
}

bool OAIIRateOfReturnBreakdown::is_capital_gain_Valid() const{
    return m_capital_gain_isValid;
}

OAIPercent OAIIRateOfReturnBreakdown::getDeferredGrowth() const {
    return m_deferred_growth;
}
void OAIIRateOfReturnBreakdown::setDeferredGrowth(const OAIPercent &deferred_growth) {
    m_deferred_growth = deferred_growth;
    m_deferred_growth_isSet = true;
}

bool OAIIRateOfReturnBreakdown::is_deferred_growth_Set() const{
    return m_deferred_growth_isSet;
}

bool OAIIRateOfReturnBreakdown::is_deferred_growth_Valid() const{
    return m_deferred_growth_isValid;
}

OAIPercent OAIIRateOfReturnBreakdown::getDividend() const {
    return m_dividend;
}
void OAIIRateOfReturnBreakdown::setDividend(const OAIPercent &dividend) {
    m_dividend = dividend;
    m_dividend_isSet = true;
}

bool OAIIRateOfReturnBreakdown::is_dividend_Set() const{
    return m_dividend_isSet;
}

bool OAIIRateOfReturnBreakdown::is_dividend_Valid() const{
    return m_dividend_isValid;
}

OAIPercent OAIIRateOfReturnBreakdown::getInterest() const {
    return m_interest;
}
void OAIIRateOfReturnBreakdown::setInterest(const OAIPercent &interest) {
    m_interest = interest;
    m_interest_isSet = true;
}

bool OAIIRateOfReturnBreakdown::is_interest_Set() const{
    return m_interest_isSet;
}

bool OAIIRateOfReturnBreakdown::is_interest_Valid() const{
    return m_interest_isValid;
}

OAIPercent OAIIRateOfReturnBreakdown::getTaxFree() const {
    return m_tax_free;
}
void OAIIRateOfReturnBreakdown::setTaxFree(const OAIPercent &tax_free) {
    m_tax_free = tax_free;
    m_tax_free_isSet = true;
}

bool OAIIRateOfReturnBreakdown::is_tax_free_Set() const{
    return m_tax_free_isSet;
}

bool OAIIRateOfReturnBreakdown::is_tax_free_Valid() const{
    return m_tax_free_isValid;
}

bool OAIIRateOfReturnBreakdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capital_gain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferred_growth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dividend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_free.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRateOfReturnBreakdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
