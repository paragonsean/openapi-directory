/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIRestrictedStock.h
 *
 * 
 */

#ifndef OAIIRestrictedStock_H
#define OAIIRestrictedStock_H

#include <QJsonObject>

#include "OAICurrency.h"
#include "OAIDate.h"
#include "OAIFormattedDateRange.h"
#include "OAIPercent.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrency;
class OAIFormattedDateRange;
class OAIDate;
class OAIPercent;

class OAIIRestrictedStock : public OAIObject {
public:
    OAIIRestrictedStock();
    OAIIRestrictedStock(QString json);
    ~OAIIRestrictedStock() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICurrency getAnnualDividendPerUnit() const;
    void setAnnualDividendPerUnit(const OAICurrency &annual_dividend_per_unit);
    bool is_annual_dividend_per_unit_Set() const;
    bool is_annual_dividend_per_unit_Valid() const;

    OAIFormattedDateRange getApplicableRangeRetirementLiquidatedAssets() const;
    void setApplicableRangeRetirementLiquidatedAssets(const OAIFormattedDateRange &applicable_range_retirement_liquidated_assets);
    bool is_applicable_range_retirement_liquidated_assets_Set() const;
    bool is_applicable_range_retirement_liquidated_assets_Valid() const;

    OAIDate getAwardedDate() const;
    void setAwardedDate(const OAIDate &awarded_date);
    bool is_awarded_date_Set() const;
    bool is_awarded_date_Valid() const;

    OAICurrency getCurrentUnitValue() const;
    void setCurrentUnitValue(const OAICurrency &current_unit_value);
    bool is_current_unit_value_Set() const;
    bool is_current_unit_value_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIPercent getGrowthRate() const;
    void setGrowthRate(const OAIPercent &growth_rate);
    bool is_growth_rate_Set() const;
    bool is_growth_rate_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getNumberOfUnits() const;
    void setNumberOfUnits(const qint32 &number_of_units);
    bool is_number_of_units_Set() const;
    bool is_number_of_units_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAICurrency getPricePaidForAward() const;
    void setPricePaidForAward(const OAICurrency &price_paid_for_award);
    bool is_price_paid_for_award_Set() const;
    bool is_price_paid_for_award_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICurrency m_annual_dividend_per_unit;
    bool m_annual_dividend_per_unit_isSet;
    bool m_annual_dividend_per_unit_isValid;

    OAIFormattedDateRange m_applicable_range_retirement_liquidated_assets;
    bool m_applicable_range_retirement_liquidated_assets_isSet;
    bool m_applicable_range_retirement_liquidated_assets_isValid;

    OAIDate m_awarded_date;
    bool m_awarded_date_isSet;
    bool m_awarded_date_isValid;

    OAICurrency m_current_unit_value;
    bool m_current_unit_value_isSet;
    bool m_current_unit_value_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIPercent m_growth_rate;
    bool m_growth_rate_isSet;
    bool m_growth_rate_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_number_of_units;
    bool m_number_of_units_isSet;
    bool m_number_of_units_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAICurrency m_price_paid_for_award;
    bool m_price_paid_for_award_isSet;
    bool m_price_paid_for_award_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIRestrictedStock)

#endif // OAIIRestrictedStock_H
