/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICashFlowIncomes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICashFlowIncomes::OAIICashFlowIncomes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICashFlowIncomes::OAIICashFlowIncomes() {
    this->initializeModel();
}

OAIICashFlowIncomes::~OAIICashFlowIncomes() {}

void OAIICashFlowIncomes::initializeModel() {

    m_annuity_payments_isSet = false;
    m_annuity_payments_isValid = false;

    m_disability_incomes_isSet = false;
    m_disability_incomes_isValid = false;

    m_earned_income_isSet = false;
    m_earned_income_isValid = false;

    m_insurance_benefits_isSet = false;
    m_insurance_benefits_isValid = false;

    m_investment_incomes_isSet = false;
    m_investment_incomes_isValid = false;

    m_lifestyle_asset_liquidations_isSet = false;
    m_lifestyle_asset_liquidations_isValid = false;

    m_locked_in_liquidations_isSet = false;
    m_locked_in_liquidations_isValid = false;

    m_long_term_care_benefits_isSet = false;
    m_long_term_care_benefits_isValid = false;

    m_miscellaneous_incomes_isSet = false;
    m_miscellaneous_incomes_isValid = false;

    m_non_qualified_liquidations_isSet = false;
    m_non_qualified_liquidations_isValid = false;

    m_pension_isSet = false;
    m_pension_isValid = false;

    m_private_corporations_isSet = false;
    m_private_corporations_isValid = false;

    m_qualified_liquidations_isSet = false;
    m_qualified_liquidations_isValid = false;

    m_qualified_liquidations_non_required_minimum_distributions_isSet = false;
    m_qualified_liquidations_non_required_minimum_distributions_isValid = false;

    m_required_minimum_distributions_isSet = false;
    m_required_minimum_distributions_isValid = false;

    m_retirement_income_isSet = false;
    m_retirement_income_isValid = false;

    m_roth_liquidations_isSet = false;
    m_roth_liquidations_isValid = false;

    m_social_security_isSet = false;
    m_social_security_isValid = false;

    m_tfsa_liquidations_isSet = false;
    m_tfsa_liquidations_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_withdrawals_isSet = false;
    m_withdrawals_isValid = false;
}

void OAIICashFlowIncomes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIICashFlowIncomes::fromJsonObject(QJsonObject json) {

    m_annuity_payments_isValid = ::OpenAPI::fromJsonValue(m_annuity_payments, json[QString("annuityPayments")]);
    m_annuity_payments_isSet = !json[QString("annuityPayments")].isNull() && m_annuity_payments_isValid;

    m_disability_incomes_isValid = ::OpenAPI::fromJsonValue(m_disability_incomes, json[QString("disabilityIncomes")]);
    m_disability_incomes_isSet = !json[QString("disabilityIncomes")].isNull() && m_disability_incomes_isValid;

    m_earned_income_isValid = ::OpenAPI::fromJsonValue(m_earned_income, json[QString("earnedIncome")]);
    m_earned_income_isSet = !json[QString("earnedIncome")].isNull() && m_earned_income_isValid;

    m_insurance_benefits_isValid = ::OpenAPI::fromJsonValue(m_insurance_benefits, json[QString("insuranceBenefits")]);
    m_insurance_benefits_isSet = !json[QString("insuranceBenefits")].isNull() && m_insurance_benefits_isValid;

    m_investment_incomes_isValid = ::OpenAPI::fromJsonValue(m_investment_incomes, json[QString("investmentIncomes")]);
    m_investment_incomes_isSet = !json[QString("investmentIncomes")].isNull() && m_investment_incomes_isValid;

    m_lifestyle_asset_liquidations_isValid = ::OpenAPI::fromJsonValue(m_lifestyle_asset_liquidations, json[QString("lifestyleAssetLiquidations")]);
    m_lifestyle_asset_liquidations_isSet = !json[QString("lifestyleAssetLiquidations")].isNull() && m_lifestyle_asset_liquidations_isValid;

    m_locked_in_liquidations_isValid = ::OpenAPI::fromJsonValue(m_locked_in_liquidations, json[QString("lockedInLiquidations")]);
    m_locked_in_liquidations_isSet = !json[QString("lockedInLiquidations")].isNull() && m_locked_in_liquidations_isValid;

    m_long_term_care_benefits_isValid = ::OpenAPI::fromJsonValue(m_long_term_care_benefits, json[QString("longTermCareBenefits")]);
    m_long_term_care_benefits_isSet = !json[QString("longTermCareBenefits")].isNull() && m_long_term_care_benefits_isValid;

    m_miscellaneous_incomes_isValid = ::OpenAPI::fromJsonValue(m_miscellaneous_incomes, json[QString("miscellaneousIncomes")]);
    m_miscellaneous_incomes_isSet = !json[QString("miscellaneousIncomes")].isNull() && m_miscellaneous_incomes_isValid;

    m_non_qualified_liquidations_isValid = ::OpenAPI::fromJsonValue(m_non_qualified_liquidations, json[QString("nonQualifiedLiquidations")]);
    m_non_qualified_liquidations_isSet = !json[QString("nonQualifiedLiquidations")].isNull() && m_non_qualified_liquidations_isValid;

    m_pension_isValid = ::OpenAPI::fromJsonValue(m_pension, json[QString("pension")]);
    m_pension_isSet = !json[QString("pension")].isNull() && m_pension_isValid;

    m_private_corporations_isValid = ::OpenAPI::fromJsonValue(m_private_corporations, json[QString("privateCorporations")]);
    m_private_corporations_isSet = !json[QString("privateCorporations")].isNull() && m_private_corporations_isValid;

    m_qualified_liquidations_isValid = ::OpenAPI::fromJsonValue(m_qualified_liquidations, json[QString("qualifiedLiquidations")]);
    m_qualified_liquidations_isSet = !json[QString("qualifiedLiquidations")].isNull() && m_qualified_liquidations_isValid;

    m_qualified_liquidations_non_required_minimum_distributions_isValid = ::OpenAPI::fromJsonValue(m_qualified_liquidations_non_required_minimum_distributions, json[QString("qualifiedLiquidationsNonRequiredMinimumDistributions")]);
    m_qualified_liquidations_non_required_minimum_distributions_isSet = !json[QString("qualifiedLiquidationsNonRequiredMinimumDistributions")].isNull() && m_qualified_liquidations_non_required_minimum_distributions_isValid;

    m_required_minimum_distributions_isValid = ::OpenAPI::fromJsonValue(m_required_minimum_distributions, json[QString("requiredMinimumDistributions")]);
    m_required_minimum_distributions_isSet = !json[QString("requiredMinimumDistributions")].isNull() && m_required_minimum_distributions_isValid;

    m_retirement_income_isValid = ::OpenAPI::fromJsonValue(m_retirement_income, json[QString("retirementIncome")]);
    m_retirement_income_isSet = !json[QString("retirementIncome")].isNull() && m_retirement_income_isValid;

    m_roth_liquidations_isValid = ::OpenAPI::fromJsonValue(m_roth_liquidations, json[QString("rothLiquidations")]);
    m_roth_liquidations_isSet = !json[QString("rothLiquidations")].isNull() && m_roth_liquidations_isValid;

    m_social_security_isValid = ::OpenAPI::fromJsonValue(m_social_security, json[QString("socialSecurity")]);
    m_social_security_isSet = !json[QString("socialSecurity")].isNull() && m_social_security_isValid;

    m_tfsa_liquidations_isValid = ::OpenAPI::fromJsonValue(m_tfsa_liquidations, json[QString("tfsaLiquidations")]);
    m_tfsa_liquidations_isSet = !json[QString("tfsaLiquidations")].isNull() && m_tfsa_liquidations_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_withdrawals_isValid = ::OpenAPI::fromJsonValue(m_withdrawals, json[QString("withdrawals")]);
    m_withdrawals_isSet = !json[QString("withdrawals")].isNull() && m_withdrawals_isValid;
}

QString OAIICashFlowIncomes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIICashFlowIncomes::asJsonObject() const {
    QJsonObject obj;
    if (m_annuity_payments.isSet()) {
        obj.insert(QString("annuityPayments"), ::OpenAPI::toJsonValue(m_annuity_payments));
    }
    if (m_disability_incomes.isSet()) {
        obj.insert(QString("disabilityIncomes"), ::OpenAPI::toJsonValue(m_disability_incomes));
    }
    if (m_earned_income.isSet()) {
        obj.insert(QString("earnedIncome"), ::OpenAPI::toJsonValue(m_earned_income));
    }
    if (m_insurance_benefits.isSet()) {
        obj.insert(QString("insuranceBenefits"), ::OpenAPI::toJsonValue(m_insurance_benefits));
    }
    if (m_investment_incomes.isSet()) {
        obj.insert(QString("investmentIncomes"), ::OpenAPI::toJsonValue(m_investment_incomes));
    }
    if (m_lifestyle_asset_liquidations.isSet()) {
        obj.insert(QString("lifestyleAssetLiquidations"), ::OpenAPI::toJsonValue(m_lifestyle_asset_liquidations));
    }
    if (m_locked_in_liquidations.isSet()) {
        obj.insert(QString("lockedInLiquidations"), ::OpenAPI::toJsonValue(m_locked_in_liquidations));
    }
    if (m_long_term_care_benefits.isSet()) {
        obj.insert(QString("longTermCareBenefits"), ::OpenAPI::toJsonValue(m_long_term_care_benefits));
    }
    if (m_miscellaneous_incomes.isSet()) {
        obj.insert(QString("miscellaneousIncomes"), ::OpenAPI::toJsonValue(m_miscellaneous_incomes));
    }
    if (m_non_qualified_liquidations.isSet()) {
        obj.insert(QString("nonQualifiedLiquidations"), ::OpenAPI::toJsonValue(m_non_qualified_liquidations));
    }
    if (m_pension.isSet()) {
        obj.insert(QString("pension"), ::OpenAPI::toJsonValue(m_pension));
    }
    if (m_private_corporations.isSet()) {
        obj.insert(QString("privateCorporations"), ::OpenAPI::toJsonValue(m_private_corporations));
    }
    if (m_qualified_liquidations.isSet()) {
        obj.insert(QString("qualifiedLiquidations"), ::OpenAPI::toJsonValue(m_qualified_liquidations));
    }
    if (m_qualified_liquidations_non_required_minimum_distributions.isSet()) {
        obj.insert(QString("qualifiedLiquidationsNonRequiredMinimumDistributions"), ::OpenAPI::toJsonValue(m_qualified_liquidations_non_required_minimum_distributions));
    }
    if (m_required_minimum_distributions.isSet()) {
        obj.insert(QString("requiredMinimumDistributions"), ::OpenAPI::toJsonValue(m_required_minimum_distributions));
    }
    if (m_retirement_income.isSet()) {
        obj.insert(QString("retirementIncome"), ::OpenAPI::toJsonValue(m_retirement_income));
    }
    if (m_roth_liquidations.isSet()) {
        obj.insert(QString("rothLiquidations"), ::OpenAPI::toJsonValue(m_roth_liquidations));
    }
    if (m_social_security.isSet()) {
        obj.insert(QString("socialSecurity"), ::OpenAPI::toJsonValue(m_social_security));
    }
    if (m_tfsa_liquidations.isSet()) {
        obj.insert(QString("tfsaLiquidations"), ::OpenAPI::toJsonValue(m_tfsa_liquidations));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_withdrawals.isSet()) {
        obj.insert(QString("withdrawals"), ::OpenAPI::toJsonValue(m_withdrawals));
    }
    return obj;
}

OAIICashFlowCategory OAIICashFlowIncomes::getAnnuityPayments() const {
    return m_annuity_payments;
}
void OAIICashFlowIncomes::setAnnuityPayments(const OAIICashFlowCategory &annuity_payments) {
    m_annuity_payments = annuity_payments;
    m_annuity_payments_isSet = true;
}

bool OAIICashFlowIncomes::is_annuity_payments_Set() const{
    return m_annuity_payments_isSet;
}

bool OAIICashFlowIncomes::is_annuity_payments_Valid() const{
    return m_annuity_payments_isValid;
}

OAICurrency OAIICashFlowIncomes::getDisabilityIncomes() const {
    return m_disability_incomes;
}
void OAIICashFlowIncomes::setDisabilityIncomes(const OAICurrency &disability_incomes) {
    m_disability_incomes = disability_incomes;
    m_disability_incomes_isSet = true;
}

bool OAIICashFlowIncomes::is_disability_incomes_Set() const{
    return m_disability_incomes_isSet;
}

bool OAIICashFlowIncomes::is_disability_incomes_Valid() const{
    return m_disability_incomes_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getEarnedIncome() const {
    return m_earned_income;
}
void OAIICashFlowIncomes::setEarnedIncome(const OAIICashFlowCategory &earned_income) {
    m_earned_income = earned_income;
    m_earned_income_isSet = true;
}

bool OAIICashFlowIncomes::is_earned_income_Set() const{
    return m_earned_income_isSet;
}

bool OAIICashFlowIncomes::is_earned_income_Valid() const{
    return m_earned_income_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getInsuranceBenefits() const {
    return m_insurance_benefits;
}
void OAIICashFlowIncomes::setInsuranceBenefits(const OAIICashFlowCategory &insurance_benefits) {
    m_insurance_benefits = insurance_benefits;
    m_insurance_benefits_isSet = true;
}

bool OAIICashFlowIncomes::is_insurance_benefits_Set() const{
    return m_insurance_benefits_isSet;
}

bool OAIICashFlowIncomes::is_insurance_benefits_Valid() const{
    return m_insurance_benefits_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getInvestmentIncomes() const {
    return m_investment_incomes;
}
void OAIICashFlowIncomes::setInvestmentIncomes(const OAIICashFlowCategory &investment_incomes) {
    m_investment_incomes = investment_incomes;
    m_investment_incomes_isSet = true;
}

bool OAIICashFlowIncomes::is_investment_incomes_Set() const{
    return m_investment_incomes_isSet;
}

bool OAIICashFlowIncomes::is_investment_incomes_Valid() const{
    return m_investment_incomes_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getLifestyleAssetLiquidations() const {
    return m_lifestyle_asset_liquidations;
}
void OAIICashFlowIncomes::setLifestyleAssetLiquidations(const OAIICashFlowCategory &lifestyle_asset_liquidations) {
    m_lifestyle_asset_liquidations = lifestyle_asset_liquidations;
    m_lifestyle_asset_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_lifestyle_asset_liquidations_Set() const{
    return m_lifestyle_asset_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_lifestyle_asset_liquidations_Valid() const{
    return m_lifestyle_asset_liquidations_isValid;
}

OAICurrency OAIICashFlowIncomes::getLockedInLiquidations() const {
    return m_locked_in_liquidations;
}
void OAIICashFlowIncomes::setLockedInLiquidations(const OAICurrency &locked_in_liquidations) {
    m_locked_in_liquidations = locked_in_liquidations;
    m_locked_in_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_locked_in_liquidations_Set() const{
    return m_locked_in_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_locked_in_liquidations_Valid() const{
    return m_locked_in_liquidations_isValid;
}

OAICurrency OAIICashFlowIncomes::getLongTermCareBenefits() const {
    return m_long_term_care_benefits;
}
void OAIICashFlowIncomes::setLongTermCareBenefits(const OAICurrency &long_term_care_benefits) {
    m_long_term_care_benefits = long_term_care_benefits;
    m_long_term_care_benefits_isSet = true;
}

bool OAIICashFlowIncomes::is_long_term_care_benefits_Set() const{
    return m_long_term_care_benefits_isSet;
}

bool OAIICashFlowIncomes::is_long_term_care_benefits_Valid() const{
    return m_long_term_care_benefits_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getMiscellaneousIncomes() const {
    return m_miscellaneous_incomes;
}
void OAIICashFlowIncomes::setMiscellaneousIncomes(const OAIICashFlowCategory &miscellaneous_incomes) {
    m_miscellaneous_incomes = miscellaneous_incomes;
    m_miscellaneous_incomes_isSet = true;
}

bool OAIICashFlowIncomes::is_miscellaneous_incomes_Set() const{
    return m_miscellaneous_incomes_isSet;
}

bool OAIICashFlowIncomes::is_miscellaneous_incomes_Valid() const{
    return m_miscellaneous_incomes_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getNonQualifiedLiquidations() const {
    return m_non_qualified_liquidations;
}
void OAIICashFlowIncomes::setNonQualifiedLiquidations(const OAIICashFlowCategory &non_qualified_liquidations) {
    m_non_qualified_liquidations = non_qualified_liquidations;
    m_non_qualified_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_non_qualified_liquidations_Set() const{
    return m_non_qualified_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_non_qualified_liquidations_Valid() const{
    return m_non_qualified_liquidations_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getPension() const {
    return m_pension;
}
void OAIICashFlowIncomes::setPension(const OAIICashFlowCategory &pension) {
    m_pension = pension;
    m_pension_isSet = true;
}

bool OAIICashFlowIncomes::is_pension_Set() const{
    return m_pension_isSet;
}

bool OAIICashFlowIncomes::is_pension_Valid() const{
    return m_pension_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getPrivateCorporations() const {
    return m_private_corporations;
}
void OAIICashFlowIncomes::setPrivateCorporations(const OAIICashFlowCategory &private_corporations) {
    m_private_corporations = private_corporations;
    m_private_corporations_isSet = true;
}

bool OAIICashFlowIncomes::is_private_corporations_Set() const{
    return m_private_corporations_isSet;
}

bool OAIICashFlowIncomes::is_private_corporations_Valid() const{
    return m_private_corporations_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getQualifiedLiquidations() const {
    return m_qualified_liquidations;
}
void OAIICashFlowIncomes::setQualifiedLiquidations(const OAIICashFlowCategory &qualified_liquidations) {
    m_qualified_liquidations = qualified_liquidations;
    m_qualified_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_qualified_liquidations_Set() const{
    return m_qualified_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_qualified_liquidations_Valid() const{
    return m_qualified_liquidations_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getQualifiedLiquidationsNonRequiredMinimumDistributions() const {
    return m_qualified_liquidations_non_required_minimum_distributions;
}
void OAIICashFlowIncomes::setQualifiedLiquidationsNonRequiredMinimumDistributions(const OAIICashFlowCategory &qualified_liquidations_non_required_minimum_distributions) {
    m_qualified_liquidations_non_required_minimum_distributions = qualified_liquidations_non_required_minimum_distributions;
    m_qualified_liquidations_non_required_minimum_distributions_isSet = true;
}

bool OAIICashFlowIncomes::is_qualified_liquidations_non_required_minimum_distributions_Set() const{
    return m_qualified_liquidations_non_required_minimum_distributions_isSet;
}

bool OAIICashFlowIncomes::is_qualified_liquidations_non_required_minimum_distributions_Valid() const{
    return m_qualified_liquidations_non_required_minimum_distributions_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getRequiredMinimumDistributions() const {
    return m_required_minimum_distributions;
}
void OAIICashFlowIncomes::setRequiredMinimumDistributions(const OAIICashFlowCategory &required_minimum_distributions) {
    m_required_minimum_distributions = required_minimum_distributions;
    m_required_minimum_distributions_isSet = true;
}

bool OAIICashFlowIncomes::is_required_minimum_distributions_Set() const{
    return m_required_minimum_distributions_isSet;
}

bool OAIICashFlowIncomes::is_required_minimum_distributions_Valid() const{
    return m_required_minimum_distributions_isValid;
}

OAICurrency OAIICashFlowIncomes::getRetirementIncome() const {
    return m_retirement_income;
}
void OAIICashFlowIncomes::setRetirementIncome(const OAICurrency &retirement_income) {
    m_retirement_income = retirement_income;
    m_retirement_income_isSet = true;
}

bool OAIICashFlowIncomes::is_retirement_income_Set() const{
    return m_retirement_income_isSet;
}

bool OAIICashFlowIncomes::is_retirement_income_Valid() const{
    return m_retirement_income_isValid;
}

OAICurrency OAIICashFlowIncomes::getRothLiquidations() const {
    return m_roth_liquidations;
}
void OAIICashFlowIncomes::setRothLiquidations(const OAICurrency &roth_liquidations) {
    m_roth_liquidations = roth_liquidations;
    m_roth_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_roth_liquidations_Set() const{
    return m_roth_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_roth_liquidations_Valid() const{
    return m_roth_liquidations_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getSocialSecurity() const {
    return m_social_security;
}
void OAIICashFlowIncomes::setSocialSecurity(const OAIICashFlowCategory &social_security) {
    m_social_security = social_security;
    m_social_security_isSet = true;
}

bool OAIICashFlowIncomes::is_social_security_Set() const{
    return m_social_security_isSet;
}

bool OAIICashFlowIncomes::is_social_security_Valid() const{
    return m_social_security_isValid;
}

OAICurrency OAIICashFlowIncomes::getTfsaLiquidations() const {
    return m_tfsa_liquidations;
}
void OAIICashFlowIncomes::setTfsaLiquidations(const OAICurrency &tfsa_liquidations) {
    m_tfsa_liquidations = tfsa_liquidations;
    m_tfsa_liquidations_isSet = true;
}

bool OAIICashFlowIncomes::is_tfsa_liquidations_Set() const{
    return m_tfsa_liquidations_isSet;
}

bool OAIICashFlowIncomes::is_tfsa_liquidations_Valid() const{
    return m_tfsa_liquidations_isValid;
}

OAIICashFlowCategory OAIICashFlowIncomes::getTotal() const {
    return m_total;
}
void OAIICashFlowIncomes::setTotal(const OAIICashFlowCategory &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIICashFlowIncomes::is_total_Set() const{
    return m_total_isSet;
}

bool OAIICashFlowIncomes::is_total_Valid() const{
    return m_total_isValid;
}

OAICurrency OAIICashFlowIncomes::getWithdrawals() const {
    return m_withdrawals;
}
void OAIICashFlowIncomes::setWithdrawals(const OAICurrency &withdrawals) {
    m_withdrawals = withdrawals;
    m_withdrawals_isSet = true;
}

bool OAIICashFlowIncomes::is_withdrawals_Set() const{
    return m_withdrawals_isSet;
}

bool OAIICashFlowIncomes::is_withdrawals_Valid() const{
    return m_withdrawals_isValid;
}

bool OAIICashFlowIncomes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annuity_payments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disability_incomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_earned_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_benefits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_investment_incomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifestyle_asset_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_in_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_care_benefits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miscellaneous_incomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_corporations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_liquidations_non_required_minimum_distributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_minimum_distributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roth_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfsa_liquidations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIICashFlowIncomes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
