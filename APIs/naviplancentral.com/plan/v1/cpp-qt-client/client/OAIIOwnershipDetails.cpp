/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIOwnershipDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIOwnershipDetails::OAIIOwnershipDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIOwnershipDetails::OAIIOwnershipDetails() {
    this->initializeModel();
}

OAIIOwnershipDetails::~OAIIOwnershipDetails() {}

void OAIIOwnershipDetails::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;

    m_common_shares_details_isSet = false;
    m_common_shares_details_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_preferred_shares_details_isSet = false;
    m_preferred_shares_details_isValid = false;

    m_shareholder_percent_ownership_isSet = false;
    m_shareholder_percent_ownership_isValid = false;
}

void OAIIOwnershipDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIOwnershipDetails::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_common_shares_details_isValid = ::OpenAPI::fromJsonValue(m_common_shares_details, json[QString("commonSharesDetails")]);
    m_common_shares_details_isSet = !json[QString("commonSharesDetails")].isNull() && m_common_shares_details_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_preferred_shares_details_isValid = ::OpenAPI::fromJsonValue(m_preferred_shares_details, json[QString("preferredSharesDetails")]);
    m_preferred_shares_details_isSet = !json[QString("preferredSharesDetails")].isNull() && m_preferred_shares_details_isValid;

    m_shareholder_percent_ownership_isValid = ::OpenAPI::fromJsonValue(m_shareholder_percent_ownership, json[QString("shareholderPercentOwnership")]);
    m_shareholder_percent_ownership_isSet = !json[QString("shareholderPercentOwnership")].isNull() && m_shareholder_percent_ownership_isValid;
}

QString OAIIOwnershipDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIOwnershipDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_common.size() > 0) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_common_shares_details.size() > 0) {
        obj.insert(QString("commonSharesDetails"), ::OpenAPI::toJsonValue(m_common_shares_details));
    }
    if (m_preferred.size() > 0) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_preferred_shares_details.size() > 0) {
        obj.insert(QString("preferredSharesDetails"), ::OpenAPI::toJsonValue(m_preferred_shares_details));
    }
    if (m_shareholder_percent_ownership.size() > 0) {
        obj.insert(QString("shareholderPercentOwnership"), ::OpenAPI::toJsonValue(m_shareholder_percent_ownership));
    }
    return obj;
}

QList<OAIIOwnershipData> OAIIOwnershipDetails::getCommon() const {
    return m_common;
}
void OAIIOwnershipDetails::setCommon(const QList<OAIIOwnershipData> &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIIOwnershipDetails::is_common_Set() const{
    return m_common_isSet;
}

bool OAIIOwnershipDetails::is_common_Valid() const{
    return m_common_isValid;
}

QList<OAIICommonShareClassDetails> OAIIOwnershipDetails::getCommonSharesDetails() const {
    return m_common_shares_details;
}
void OAIIOwnershipDetails::setCommonSharesDetails(const QList<OAIICommonShareClassDetails> &common_shares_details) {
    m_common_shares_details = common_shares_details;
    m_common_shares_details_isSet = true;
}

bool OAIIOwnershipDetails::is_common_shares_details_Set() const{
    return m_common_shares_details_isSet;
}

bool OAIIOwnershipDetails::is_common_shares_details_Valid() const{
    return m_common_shares_details_isValid;
}

QList<OAIIOwnershipData> OAIIOwnershipDetails::getPreferred() const {
    return m_preferred;
}
void OAIIOwnershipDetails::setPreferred(const QList<OAIIOwnershipData> &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIIOwnershipDetails::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIIOwnershipDetails::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QList<OAIIPreferredShareClassDetails> OAIIOwnershipDetails::getPreferredSharesDetails() const {
    return m_preferred_shares_details;
}
void OAIIOwnershipDetails::setPreferredSharesDetails(const QList<OAIIPreferredShareClassDetails> &preferred_shares_details) {
    m_preferred_shares_details = preferred_shares_details;
    m_preferred_shares_details_isSet = true;
}

bool OAIIOwnershipDetails::is_preferred_shares_details_Set() const{
    return m_preferred_shares_details_isSet;
}

bool OAIIOwnershipDetails::is_preferred_shares_details_Valid() const{
    return m_preferred_shares_details_isValid;
}

QList<OAIIInvestmentAccountOwnershipData> OAIIOwnershipDetails::getShareholderPercentOwnership() const {
    return m_shareholder_percent_ownership;
}
void OAIIOwnershipDetails::setShareholderPercentOwnership(const QList<OAIIInvestmentAccountOwnershipData> &shareholder_percent_ownership) {
    m_shareholder_percent_ownership = shareholder_percent_ownership;
    m_shareholder_percent_ownership_isSet = true;
}

bool OAIIOwnershipDetails::is_shareholder_percent_ownership_Set() const{
    return m_shareholder_percent_ownership_isSet;
}

bool OAIIOwnershipDetails::is_shareholder_percent_ownership_Valid() const{
    return m_shareholder_percent_ownership_isValid;
}

bool OAIIOwnershipDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_shares_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_shares_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_percent_ownership.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIOwnershipDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
