/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::~OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel() {}

void OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::initializeModel() {

    m_real_estate_assets_isSet = false;
    m_real_estate_assets_isValid = false;
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::fromJsonObject(QJsonObject json) {

    m_real_estate_assets_isValid = ::OpenAPI::fromJsonValue(m_real_estate_assets, json[QString("realEstateAssets")]);
    m_real_estate_assets_isSet = !json[QString("realEstateAssets")].isNull() && m_real_estate_assets_isValid;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_real_estate_assets.size() > 0) {
        obj.insert(QString("realEstateAssets"), ::OpenAPI::toJsonValue(m_real_estate_assets));
    }
    return obj;
}

QList<OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateModel> OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::getRealEstateAssets() const {
    return m_real_estate_assets;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::setRealEstateAssets(const QList<OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateModel> &real_estate_assets) {
    m_real_estate_assets = real_estate_assets;
    m_real_estate_assets_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::is_real_estate_assets_Set() const{
    return m_real_estate_assets_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::is_real_estate_assets_Valid() const{
    return m_real_estate_assets_isValid;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_real_estate_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
