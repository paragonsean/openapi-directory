/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestrictedStockModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestrictedStockModel::OAIRestrictedStockModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestrictedStockModel::OAIRestrictedStockModel() {
    this->initializeModel();
}

OAIRestrictedStockModel::~OAIRestrictedStockModel() {}

void OAIRestrictedStockModel::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_restricted_stock_isSet = false;
    m_restricted_stock_isValid = false;
}

void OAIRestrictedStockModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestrictedStockModel::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_restricted_stock_isValid = ::OpenAPI::fromJsonValue(m_restricted_stock, json[QString("restrictedStock")]);
    m_restricted_stock_isSet = !json[QString("restrictedStock")].isNull() && m_restricted_stock_isValid;
}

QString OAIRestrictedStockModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestrictedStockModel::asJsonObject() const {
    QJsonObject obj;
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_restricted_stock.isSet()) {
        obj.insert(QString("restrictedStock"), ::OpenAPI::toJsonValue(m_restricted_stock));
    }
    return obj;
}

QList<OAIObjectLink> OAIRestrictedStockModel::getLinks() const {
    return m_links;
}
void OAIRestrictedStockModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIRestrictedStockModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIRestrictedStockModel::is_links_Valid() const{
    return m_links_isValid;
}

OAIIRestrictedStock OAIRestrictedStockModel::getRestrictedStock() const {
    return m_restricted_stock;
}
void OAIRestrictedStockModel::setRestrictedStock(const OAIIRestrictedStock &restricted_stock) {
    m_restricted_stock = restricted_stock;
    m_restricted_stock_isSet = true;
}

bool OAIRestrictedStockModel::is_restricted_stock_Set() const{
    return m_restricted_stock_isSet;
}

bool OAIRestrictedStockModel::is_restricted_stock_Valid() const{
    return m_restricted_stock_isValid;
}

bool OAIRestrictedStockModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_stock.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestrictedStockModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
