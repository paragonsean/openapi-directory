# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formatted_enum_type_gender import FormattedEnumTypeGender
from openapi_server.models.i_address import IAddress
from openapi_server.models.i_employer import IEmployer
from openapi_server.models.i_person_name import IPersonName
from openapi_server.models.i_phone_numbers import IPhoneNumbers
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class IFamilyMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: IAddress=None, age_as_of_plan_date: int=None, birthdate: ModelDate=None, citizenship: str=None, email: str=None, employer: IEmployer=None, gender: FormattedEnumTypeGender=None, name: IPersonName=None, ownership_id: str=None, phone: IPhoneNumbers=None):
        """IFamilyMember - a model defined in OpenAPI

        :param address: The address of this IFamilyMember.
        :param age_as_of_plan_date: The age_as_of_plan_date of this IFamilyMember.
        :param birthdate: The birthdate of this IFamilyMember.
        :param citizenship: The citizenship of this IFamilyMember.
        :param email: The email of this IFamilyMember.
        :param employer: The employer of this IFamilyMember.
        :param gender: The gender of this IFamilyMember.
        :param name: The name of this IFamilyMember.
        :param ownership_id: The ownership_id of this IFamilyMember.
        :param phone: The phone of this IFamilyMember.
        """
        self.openapi_types = {
            'address': IAddress,
            'age_as_of_plan_date': int,
            'birthdate': ModelDate,
            'citizenship': str,
            'email': str,
            'employer': IEmployer,
            'gender': FormattedEnumTypeGender,
            'name': IPersonName,
            'ownership_id': str,
            'phone': IPhoneNumbers
        }

        self.attribute_map = {
            'address': 'address',
            'age_as_of_plan_date': 'ageAsOfPlanDate',
            'birthdate': 'birthdate',
            'citizenship': 'citizenship',
            'email': 'email',
            'employer': 'employer',
            'gender': 'gender',
            'name': 'name',
            'ownership_id': 'ownershipId',
            'phone': 'phone'
        }

        self._address = address
        self._age_as_of_plan_date = age_as_of_plan_date
        self._birthdate = birthdate
        self._citizenship = citizenship
        self._email = email
        self._employer = employer
        self._gender = gender
        self._name = name
        self._ownership_id = ownership_id
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IFamilyMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IFamilyMember of this IFamilyMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IFamilyMember.


        :return: The address of this IFamilyMember.
        :rtype: IAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IFamilyMember.


        :param address: The address of this IFamilyMember.
        :type address: IAddress
        """

        self._address = address

    @property
    def age_as_of_plan_date(self):
        """Gets the age_as_of_plan_date of this IFamilyMember.


        :return: The age_as_of_plan_date of this IFamilyMember.
        :rtype: int
        """
        return self._age_as_of_plan_date

    @age_as_of_plan_date.setter
    def age_as_of_plan_date(self, age_as_of_plan_date):
        """Sets the age_as_of_plan_date of this IFamilyMember.


        :param age_as_of_plan_date: The age_as_of_plan_date of this IFamilyMember.
        :type age_as_of_plan_date: int
        """

        self._age_as_of_plan_date = age_as_of_plan_date

    @property
    def birthdate(self):
        """Gets the birthdate of this IFamilyMember.


        :return: The birthdate of this IFamilyMember.
        :rtype: ModelDate
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this IFamilyMember.


        :param birthdate: The birthdate of this IFamilyMember.
        :type birthdate: ModelDate
        """

        self._birthdate = birthdate

    @property
    def citizenship(self):
        """Gets the citizenship of this IFamilyMember.


        :return: The citizenship of this IFamilyMember.
        :rtype: str
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this IFamilyMember.


        :param citizenship: The citizenship of this IFamilyMember.
        :type citizenship: str
        """

        self._citizenship = citizenship

    @property
    def email(self):
        """Gets the email of this IFamilyMember.


        :return: The email of this IFamilyMember.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IFamilyMember.


        :param email: The email of this IFamilyMember.
        :type email: str
        """

        self._email = email

    @property
    def employer(self):
        """Gets the employer of this IFamilyMember.


        :return: The employer of this IFamilyMember.
        :rtype: IEmployer
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this IFamilyMember.


        :param employer: The employer of this IFamilyMember.
        :type employer: IEmployer
        """

        self._employer = employer

    @property
    def gender(self):
        """Gets the gender of this IFamilyMember.


        :return: The gender of this IFamilyMember.
        :rtype: FormattedEnumTypeGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this IFamilyMember.


        :param gender: The gender of this IFamilyMember.
        :type gender: FormattedEnumTypeGender
        """

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this IFamilyMember.


        :return: The name of this IFamilyMember.
        :rtype: IPersonName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IFamilyMember.


        :param name: The name of this IFamilyMember.
        :type name: IPersonName
        """

        self._name = name

    @property
    def ownership_id(self):
        """Gets the ownership_id of this IFamilyMember.


        :return: The ownership_id of this IFamilyMember.
        :rtype: str
        """
        return self._ownership_id

    @ownership_id.setter
    def ownership_id(self, ownership_id):
        """Sets the ownership_id of this IFamilyMember.


        :param ownership_id: The ownership_id of this IFamilyMember.
        :type ownership_id: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if ownership_id not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_id` ({0}), must be one of {1}"
                .format(ownership_id, allowed_values)
            )

        self._ownership_id = ownership_id

    @property
    def phone(self):
        """Gets the phone of this IFamilyMember.


        :return: The phone of this IFamilyMember.
        :rtype: IPhoneNumbers
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this IFamilyMember.


        :param phone: The phone of this IFamilyMember.
        :type phone: IPhoneNumbers
        """

        self._phone = phone
