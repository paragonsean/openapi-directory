# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_optional_field_benefit_currency_with_growth import IOptionalFieldBenefitCurrencyWithGrowth
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class IDefinedBenefitPension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit: IOptionalFieldBenefitCurrencyWithGrowth=None, description: str=None, is_benefit_formula: bool=None, is_benefit_integrated_with_cpp_qpp: bool=None, is_formula_integrated_with_cpp_qpp: bool=None, owner: str=None, pension_type: str=None, percent_payable_to_survivor: Percent=None, projected_years_of_service: int=None, start_date: ModelDate=None):
        """IDefinedBenefitPension - a model defined in OpenAPI

        :param benefit: The benefit of this IDefinedBenefitPension.
        :param description: The description of this IDefinedBenefitPension.
        :param is_benefit_formula: The is_benefit_formula of this IDefinedBenefitPension.
        :param is_benefit_integrated_with_cpp_qpp: The is_benefit_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :param is_formula_integrated_with_cpp_qpp: The is_formula_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :param owner: The owner of this IDefinedBenefitPension.
        :param pension_type: The pension_type of this IDefinedBenefitPension.
        :param percent_payable_to_survivor: The percent_payable_to_survivor of this IDefinedBenefitPension.
        :param projected_years_of_service: The projected_years_of_service of this IDefinedBenefitPension.
        :param start_date: The start_date of this IDefinedBenefitPension.
        """
        self.openapi_types = {
            'benefit': IOptionalFieldBenefitCurrencyWithGrowth,
            'description': str,
            'is_benefit_formula': bool,
            'is_benefit_integrated_with_cpp_qpp': bool,
            'is_formula_integrated_with_cpp_qpp': bool,
            'owner': str,
            'pension_type': str,
            'percent_payable_to_survivor': Percent,
            'projected_years_of_service': int,
            'start_date': ModelDate
        }

        self.attribute_map = {
            'benefit': 'benefit',
            'description': 'description',
            'is_benefit_formula': 'isBenefitFormula',
            'is_benefit_integrated_with_cpp_qpp': 'isBenefitIntegratedWithCppQpp',
            'is_formula_integrated_with_cpp_qpp': 'isFormulaIntegratedWithCppQpp',
            'owner': 'owner',
            'pension_type': 'pensionType',
            'percent_payable_to_survivor': 'percentPayableToSurvivor',
            'projected_years_of_service': 'projectedYearsOfService',
            'start_date': 'startDate'
        }

        self._benefit = benefit
        self._description = description
        self._is_benefit_formula = is_benefit_formula
        self._is_benefit_integrated_with_cpp_qpp = is_benefit_integrated_with_cpp_qpp
        self._is_formula_integrated_with_cpp_qpp = is_formula_integrated_with_cpp_qpp
        self._owner = owner
        self._pension_type = pension_type
        self._percent_payable_to_survivor = percent_payable_to_survivor
        self._projected_years_of_service = projected_years_of_service
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IDefinedBenefitPension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IDefinedBenefitPension of this IDefinedBenefitPension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit(self):
        """Gets the benefit of this IDefinedBenefitPension.


        :return: The benefit of this IDefinedBenefitPension.
        :rtype: IOptionalFieldBenefitCurrencyWithGrowth
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this IDefinedBenefitPension.


        :param benefit: The benefit of this IDefinedBenefitPension.
        :type benefit: IOptionalFieldBenefitCurrencyWithGrowth
        """

        self._benefit = benefit

    @property
    def description(self):
        """Gets the description of this IDefinedBenefitPension.


        :return: The description of this IDefinedBenefitPension.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IDefinedBenefitPension.


        :param description: The description of this IDefinedBenefitPension.
        :type description: str
        """

        self._description = description

    @property
    def is_benefit_formula(self):
        """Gets the is_benefit_formula of this IDefinedBenefitPension.


        :return: The is_benefit_formula of this IDefinedBenefitPension.
        :rtype: bool
        """
        return self._is_benefit_formula

    @is_benefit_formula.setter
    def is_benefit_formula(self, is_benefit_formula):
        """Sets the is_benefit_formula of this IDefinedBenefitPension.


        :param is_benefit_formula: The is_benefit_formula of this IDefinedBenefitPension.
        :type is_benefit_formula: bool
        """

        self._is_benefit_formula = is_benefit_formula

    @property
    def is_benefit_integrated_with_cpp_qpp(self):
        """Gets the is_benefit_integrated_with_cpp_qpp of this IDefinedBenefitPension.


        :return: The is_benefit_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :rtype: bool
        """
        return self._is_benefit_integrated_with_cpp_qpp

    @is_benefit_integrated_with_cpp_qpp.setter
    def is_benefit_integrated_with_cpp_qpp(self, is_benefit_integrated_with_cpp_qpp):
        """Sets the is_benefit_integrated_with_cpp_qpp of this IDefinedBenefitPension.


        :param is_benefit_integrated_with_cpp_qpp: The is_benefit_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :type is_benefit_integrated_with_cpp_qpp: bool
        """

        self._is_benefit_integrated_with_cpp_qpp = is_benefit_integrated_with_cpp_qpp

    @property
    def is_formula_integrated_with_cpp_qpp(self):
        """Gets the is_formula_integrated_with_cpp_qpp of this IDefinedBenefitPension.


        :return: The is_formula_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :rtype: bool
        """
        return self._is_formula_integrated_with_cpp_qpp

    @is_formula_integrated_with_cpp_qpp.setter
    def is_formula_integrated_with_cpp_qpp(self, is_formula_integrated_with_cpp_qpp):
        """Sets the is_formula_integrated_with_cpp_qpp of this IDefinedBenefitPension.


        :param is_formula_integrated_with_cpp_qpp: The is_formula_integrated_with_cpp_qpp of this IDefinedBenefitPension.
        :type is_formula_integrated_with_cpp_qpp: bool
        """

        self._is_formula_integrated_with_cpp_qpp = is_formula_integrated_with_cpp_qpp

    @property
    def owner(self):
        """Gets the owner of this IDefinedBenefitPension.


        :return: The owner of this IDefinedBenefitPension.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IDefinedBenefitPension.


        :param owner: The owner of this IDefinedBenefitPension.
        :type owner: str
        """
        allowed_values = ["Client", "CoClient"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def pension_type(self):
        """Gets the pension_type of this IDefinedBenefitPension.


        :return: The pension_type of this IDefinedBenefitPension.
        :rtype: str
        """
        return self._pension_type

    @pension_type.setter
    def pension_type(self, pension_type):
        """Sets the pension_type of this IDefinedBenefitPension.


        :param pension_type: The pension_type of this IDefinedBenefitPension.
        :type pension_type: str
        """

        self._pension_type = pension_type

    @property
    def percent_payable_to_survivor(self):
        """Gets the percent_payable_to_survivor of this IDefinedBenefitPension.


        :return: The percent_payable_to_survivor of this IDefinedBenefitPension.
        :rtype: Percent
        """
        return self._percent_payable_to_survivor

    @percent_payable_to_survivor.setter
    def percent_payable_to_survivor(self, percent_payable_to_survivor):
        """Sets the percent_payable_to_survivor of this IDefinedBenefitPension.


        :param percent_payable_to_survivor: The percent_payable_to_survivor of this IDefinedBenefitPension.
        :type percent_payable_to_survivor: Percent
        """

        self._percent_payable_to_survivor = percent_payable_to_survivor

    @property
    def projected_years_of_service(self):
        """Gets the projected_years_of_service of this IDefinedBenefitPension.


        :return: The projected_years_of_service of this IDefinedBenefitPension.
        :rtype: int
        """
        return self._projected_years_of_service

    @projected_years_of_service.setter
    def projected_years_of_service(self, projected_years_of_service):
        """Sets the projected_years_of_service of this IDefinedBenefitPension.


        :param projected_years_of_service: The projected_years_of_service of this IDefinedBenefitPension.
        :type projected_years_of_service: int
        """

        self._projected_years_of_service = projected_years_of_service

    @property
    def start_date(self):
        """Gets the start_date of this IDefinedBenefitPension.


        :return: The start_date of this IDefinedBenefitPension.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this IDefinedBenefitPension.


        :param start_date: The start_date of this IDefinedBenefitPension.
        :type start_date: ModelDate
        """

        self._start_date = start_date
