# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class IAccumulationCategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_assets: Currency=None, locked_in: Currency=None, non_qualified: Currency=None, qualified: Currency=None, roth: Currency=None, tfsa: Currency=None):
        """IAccumulationCategoryData - a model defined in OpenAPI

        :param all_assets: The all_assets of this IAccumulationCategoryData.
        :param locked_in: The locked_in of this IAccumulationCategoryData.
        :param non_qualified: The non_qualified of this IAccumulationCategoryData.
        :param qualified: The qualified of this IAccumulationCategoryData.
        :param roth: The roth of this IAccumulationCategoryData.
        :param tfsa: The tfsa of this IAccumulationCategoryData.
        """
        self.openapi_types = {
            'all_assets': Currency,
            'locked_in': Currency,
            'non_qualified': Currency,
            'qualified': Currency,
            'roth': Currency,
            'tfsa': Currency
        }

        self.attribute_map = {
            'all_assets': 'allAssets',
            'locked_in': 'lockedIn',
            'non_qualified': 'nonQualified',
            'qualified': 'qualified',
            'roth': 'roth',
            'tfsa': 'tfsa'
        }

        self._all_assets = all_assets
        self._locked_in = locked_in
        self._non_qualified = non_qualified
        self._qualified = qualified
        self._roth = roth
        self._tfsa = tfsa

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAccumulationCategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAccumulationCategoryData of this IAccumulationCategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_assets(self):
        """Gets the all_assets of this IAccumulationCategoryData.


        :return: The all_assets of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._all_assets

    @all_assets.setter
    def all_assets(self, all_assets):
        """Sets the all_assets of this IAccumulationCategoryData.


        :param all_assets: The all_assets of this IAccumulationCategoryData.
        :type all_assets: Currency
        """

        self._all_assets = all_assets

    @property
    def locked_in(self):
        """Gets the locked_in of this IAccumulationCategoryData.


        :return: The locked_in of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._locked_in

    @locked_in.setter
    def locked_in(self, locked_in):
        """Sets the locked_in of this IAccumulationCategoryData.


        :param locked_in: The locked_in of this IAccumulationCategoryData.
        :type locked_in: Currency
        """

        self._locked_in = locked_in

    @property
    def non_qualified(self):
        """Gets the non_qualified of this IAccumulationCategoryData.


        :return: The non_qualified of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._non_qualified

    @non_qualified.setter
    def non_qualified(self, non_qualified):
        """Sets the non_qualified of this IAccumulationCategoryData.


        :param non_qualified: The non_qualified of this IAccumulationCategoryData.
        :type non_qualified: Currency
        """

        self._non_qualified = non_qualified

    @property
    def qualified(self):
        """Gets the qualified of this IAccumulationCategoryData.


        :return: The qualified of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._qualified

    @qualified.setter
    def qualified(self, qualified):
        """Sets the qualified of this IAccumulationCategoryData.


        :param qualified: The qualified of this IAccumulationCategoryData.
        :type qualified: Currency
        """

        self._qualified = qualified

    @property
    def roth(self):
        """Gets the roth of this IAccumulationCategoryData.


        :return: The roth of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._roth

    @roth.setter
    def roth(self, roth):
        """Sets the roth of this IAccumulationCategoryData.


        :param roth: The roth of this IAccumulationCategoryData.
        :type roth: Currency
        """

        self._roth = roth

    @property
    def tfsa(self):
        """Gets the tfsa of this IAccumulationCategoryData.


        :return: The tfsa of this IAccumulationCategoryData.
        :rtype: Currency
        """
        return self._tfsa

    @tfsa.setter
    def tfsa(self, tfsa):
        """Sets the tfsa of this IAccumulationCategoryData.


        :param tfsa: The tfsa of this IAccumulationCategoryData.
        :type tfsa: Currency
        """

        self._tfsa = tfsa
