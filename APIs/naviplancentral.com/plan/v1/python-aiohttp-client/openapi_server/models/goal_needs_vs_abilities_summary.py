# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoalNeedsVsAbilitiesSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abilities: float=None, fixed_needs: float=None, fixed_needs_with_taxes: float=None, goal_type: str=None, identifier: int=None, total_needs: float=None, total_needs_with_taxes: float=None):
        """GoalNeedsVsAbilitiesSummary - a model defined in OpenAPI

        :param abilities: The abilities of this GoalNeedsVsAbilitiesSummary.
        :param fixed_needs: The fixed_needs of this GoalNeedsVsAbilitiesSummary.
        :param fixed_needs_with_taxes: The fixed_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        :param goal_type: The goal_type of this GoalNeedsVsAbilitiesSummary.
        :param identifier: The identifier of this GoalNeedsVsAbilitiesSummary.
        :param total_needs: The total_needs of this GoalNeedsVsAbilitiesSummary.
        :param total_needs_with_taxes: The total_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        """
        self.openapi_types = {
            'abilities': float,
            'fixed_needs': float,
            'fixed_needs_with_taxes': float,
            'goal_type': str,
            'identifier': int,
            'total_needs': float,
            'total_needs_with_taxes': float
        }

        self.attribute_map = {
            'abilities': 'abilities',
            'fixed_needs': 'fixedNeeds',
            'fixed_needs_with_taxes': 'fixedNeedsWithTaxes',
            'goal_type': 'goalType',
            'identifier': 'identifier',
            'total_needs': 'totalNeeds',
            'total_needs_with_taxes': 'totalNeedsWithTaxes'
        }

        self._abilities = abilities
        self._fixed_needs = fixed_needs
        self._fixed_needs_with_taxes = fixed_needs_with_taxes
        self._goal_type = goal_type
        self._identifier = identifier
        self._total_needs = total_needs
        self._total_needs_with_taxes = total_needs_with_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoalNeedsVsAbilitiesSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoalNeedsVsAbilitiesSummary of this GoalNeedsVsAbilitiesSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abilities(self):
        """Gets the abilities of this GoalNeedsVsAbilitiesSummary.


        :return: The abilities of this GoalNeedsVsAbilitiesSummary.
        :rtype: float
        """
        return self._abilities

    @abilities.setter
    def abilities(self, abilities):
        """Sets the abilities of this GoalNeedsVsAbilitiesSummary.


        :param abilities: The abilities of this GoalNeedsVsAbilitiesSummary.
        :type abilities: float
        """

        self._abilities = abilities

    @property
    def fixed_needs(self):
        """Gets the fixed_needs of this GoalNeedsVsAbilitiesSummary.


        :return: The fixed_needs of this GoalNeedsVsAbilitiesSummary.
        :rtype: float
        """
        return self._fixed_needs

    @fixed_needs.setter
    def fixed_needs(self, fixed_needs):
        """Sets the fixed_needs of this GoalNeedsVsAbilitiesSummary.


        :param fixed_needs: The fixed_needs of this GoalNeedsVsAbilitiesSummary.
        :type fixed_needs: float
        """

        self._fixed_needs = fixed_needs

    @property
    def fixed_needs_with_taxes(self):
        """Gets the fixed_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.


        :return: The fixed_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        :rtype: float
        """
        return self._fixed_needs_with_taxes

    @fixed_needs_with_taxes.setter
    def fixed_needs_with_taxes(self, fixed_needs_with_taxes):
        """Sets the fixed_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.


        :param fixed_needs_with_taxes: The fixed_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        :type fixed_needs_with_taxes: float
        """

        self._fixed_needs_with_taxes = fixed_needs_with_taxes

    @property
    def goal_type(self):
        """Gets the goal_type of this GoalNeedsVsAbilitiesSummary.


        :return: The goal_type of this GoalNeedsVsAbilitiesSummary.
        :rtype: str
        """
        return self._goal_type

    @goal_type.setter
    def goal_type(self, goal_type):
        """Sets the goal_type of this GoalNeedsVsAbilitiesSummary.


        :param goal_type: The goal_type of this GoalNeedsVsAbilitiesSummary.
        :type goal_type: str
        """

        self._goal_type = goal_type

    @property
    def identifier(self):
        """Gets the identifier of this GoalNeedsVsAbilitiesSummary.


        :return: The identifier of this GoalNeedsVsAbilitiesSummary.
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GoalNeedsVsAbilitiesSummary.


        :param identifier: The identifier of this GoalNeedsVsAbilitiesSummary.
        :type identifier: int
        """

        self._identifier = identifier

    @property
    def total_needs(self):
        """Gets the total_needs of this GoalNeedsVsAbilitiesSummary.


        :return: The total_needs of this GoalNeedsVsAbilitiesSummary.
        :rtype: float
        """
        return self._total_needs

    @total_needs.setter
    def total_needs(self, total_needs):
        """Sets the total_needs of this GoalNeedsVsAbilitiesSummary.


        :param total_needs: The total_needs of this GoalNeedsVsAbilitiesSummary.
        :type total_needs: float
        """

        self._total_needs = total_needs

    @property
    def total_needs_with_taxes(self):
        """Gets the total_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.


        :return: The total_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        :rtype: float
        """
        return self._total_needs_with_taxes

    @total_needs_with_taxes.setter
    def total_needs_with_taxes(self, total_needs_with_taxes):
        """Sets the total_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.


        :param total_needs_with_taxes: The total_needs_with_taxes of this GoalNeedsVsAbilitiesSummary.
        :type total_needs_with_taxes: float
        """

        self._total_needs_with_taxes = total_needs_with_taxes
