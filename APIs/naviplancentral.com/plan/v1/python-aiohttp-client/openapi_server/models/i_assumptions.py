# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_bucketing import IBucketing
from openapi_server.models.i_head_assumptions import IHeadAssumptions
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server.models.year import Year
from openapi_server import util


class IAssumptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, any_head_already_retired: bool=None, both_retired: bool=None, bucketing: IBucketing=None, client: IHeadAssumptions=None, co_client: IHeadAssumptions=None, first_to_die_date: ModelDate=None, first_to_die_member: str=None, first_to_retire_date: ModelDate=None, inflation_rate: Percent=None, last_to_die_date: ModelDate=None, last_to_die_member: str=None, last_to_retire_date: ModelDate=None, retirement_year_adjusted_if_already_retired: Year=None, split_surplus_savings_strategies_enabled: bool=None, tax_method: str=None):
        """IAssumptions - a model defined in OpenAPI

        :param any_head_already_retired: The any_head_already_retired of this IAssumptions.
        :param both_retired: The both_retired of this IAssumptions.
        :param bucketing: The bucketing of this IAssumptions.
        :param client: The client of this IAssumptions.
        :param co_client: The co_client of this IAssumptions.
        :param first_to_die_date: The first_to_die_date of this IAssumptions.
        :param first_to_die_member: The first_to_die_member of this IAssumptions.
        :param first_to_retire_date: The first_to_retire_date of this IAssumptions.
        :param inflation_rate: The inflation_rate of this IAssumptions.
        :param last_to_die_date: The last_to_die_date of this IAssumptions.
        :param last_to_die_member: The last_to_die_member of this IAssumptions.
        :param last_to_retire_date: The last_to_retire_date of this IAssumptions.
        :param retirement_year_adjusted_if_already_retired: The retirement_year_adjusted_if_already_retired of this IAssumptions.
        :param split_surplus_savings_strategies_enabled: The split_surplus_savings_strategies_enabled of this IAssumptions.
        :param tax_method: The tax_method of this IAssumptions.
        """
        self.openapi_types = {
            'any_head_already_retired': bool,
            'both_retired': bool,
            'bucketing': IBucketing,
            'client': IHeadAssumptions,
            'co_client': IHeadAssumptions,
            'first_to_die_date': ModelDate,
            'first_to_die_member': str,
            'first_to_retire_date': ModelDate,
            'inflation_rate': Percent,
            'last_to_die_date': ModelDate,
            'last_to_die_member': str,
            'last_to_retire_date': ModelDate,
            'retirement_year_adjusted_if_already_retired': Year,
            'split_surplus_savings_strategies_enabled': bool,
            'tax_method': str
        }

        self.attribute_map = {
            'any_head_already_retired': 'anyHeadAlreadyRetired',
            'both_retired': 'bothRetired',
            'bucketing': 'bucketing',
            'client': 'client',
            'co_client': 'coClient',
            'first_to_die_date': 'firstToDieDate',
            'first_to_die_member': 'firstToDieMember',
            'first_to_retire_date': 'firstToRetireDate',
            'inflation_rate': 'inflationRate',
            'last_to_die_date': 'lastToDieDate',
            'last_to_die_member': 'lastToDieMember',
            'last_to_retire_date': 'lastToRetireDate',
            'retirement_year_adjusted_if_already_retired': 'retirementYearAdjustedIfAlreadyRetired',
            'split_surplus_savings_strategies_enabled': 'splitSurplusSavingsStrategiesEnabled',
            'tax_method': 'taxMethod'
        }

        self._any_head_already_retired = any_head_already_retired
        self._both_retired = both_retired
        self._bucketing = bucketing
        self._client = client
        self._co_client = co_client
        self._first_to_die_date = first_to_die_date
        self._first_to_die_member = first_to_die_member
        self._first_to_retire_date = first_to_retire_date
        self._inflation_rate = inflation_rate
        self._last_to_die_date = last_to_die_date
        self._last_to_die_member = last_to_die_member
        self._last_to_retire_date = last_to_retire_date
        self._retirement_year_adjusted_if_already_retired = retirement_year_adjusted_if_already_retired
        self._split_surplus_savings_strategies_enabled = split_surplus_savings_strategies_enabled
        self._tax_method = tax_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAssumptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAssumptions of this IAssumptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def any_head_already_retired(self):
        """Gets the any_head_already_retired of this IAssumptions.


        :return: The any_head_already_retired of this IAssumptions.
        :rtype: bool
        """
        return self._any_head_already_retired

    @any_head_already_retired.setter
    def any_head_already_retired(self, any_head_already_retired):
        """Sets the any_head_already_retired of this IAssumptions.


        :param any_head_already_retired: The any_head_already_retired of this IAssumptions.
        :type any_head_already_retired: bool
        """

        self._any_head_already_retired = any_head_already_retired

    @property
    def both_retired(self):
        """Gets the both_retired of this IAssumptions.


        :return: The both_retired of this IAssumptions.
        :rtype: bool
        """
        return self._both_retired

    @both_retired.setter
    def both_retired(self, both_retired):
        """Sets the both_retired of this IAssumptions.


        :param both_retired: The both_retired of this IAssumptions.
        :type both_retired: bool
        """

        self._both_retired = both_retired

    @property
    def bucketing(self):
        """Gets the bucketing of this IAssumptions.


        :return: The bucketing of this IAssumptions.
        :rtype: IBucketing
        """
        return self._bucketing

    @bucketing.setter
    def bucketing(self, bucketing):
        """Sets the bucketing of this IAssumptions.


        :param bucketing: The bucketing of this IAssumptions.
        :type bucketing: IBucketing
        """

        self._bucketing = bucketing

    @property
    def client(self):
        """Gets the client of this IAssumptions.


        :return: The client of this IAssumptions.
        :rtype: IHeadAssumptions
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this IAssumptions.


        :param client: The client of this IAssumptions.
        :type client: IHeadAssumptions
        """

        self._client = client

    @property
    def co_client(self):
        """Gets the co_client of this IAssumptions.


        :return: The co_client of this IAssumptions.
        :rtype: IHeadAssumptions
        """
        return self._co_client

    @co_client.setter
    def co_client(self, co_client):
        """Sets the co_client of this IAssumptions.


        :param co_client: The co_client of this IAssumptions.
        :type co_client: IHeadAssumptions
        """

        self._co_client = co_client

    @property
    def first_to_die_date(self):
        """Gets the first_to_die_date of this IAssumptions.


        :return: The first_to_die_date of this IAssumptions.
        :rtype: ModelDate
        """
        return self._first_to_die_date

    @first_to_die_date.setter
    def first_to_die_date(self, first_to_die_date):
        """Sets the first_to_die_date of this IAssumptions.


        :param first_to_die_date: The first_to_die_date of this IAssumptions.
        :type first_to_die_date: ModelDate
        """

        self._first_to_die_date = first_to_die_date

    @property
    def first_to_die_member(self):
        """Gets the first_to_die_member of this IAssumptions.


        :return: The first_to_die_member of this IAssumptions.
        :rtype: str
        """
        return self._first_to_die_member

    @first_to_die_member.setter
    def first_to_die_member(self, first_to_die_member):
        """Sets the first_to_die_member of this IAssumptions.


        :param first_to_die_member: The first_to_die_member of this IAssumptions.
        :type first_to_die_member: str
        """
        allowed_values = ["Client", "CoClient"]  # noqa: E501
        if first_to_die_member not in allowed_values:
            raise ValueError(
                "Invalid value for `first_to_die_member` ({0}), must be one of {1}"
                .format(first_to_die_member, allowed_values)
            )

        self._first_to_die_member = first_to_die_member

    @property
    def first_to_retire_date(self):
        """Gets the first_to_retire_date of this IAssumptions.


        :return: The first_to_retire_date of this IAssumptions.
        :rtype: ModelDate
        """
        return self._first_to_retire_date

    @first_to_retire_date.setter
    def first_to_retire_date(self, first_to_retire_date):
        """Sets the first_to_retire_date of this IAssumptions.


        :param first_to_retire_date: The first_to_retire_date of this IAssumptions.
        :type first_to_retire_date: ModelDate
        """

        self._first_to_retire_date = first_to_retire_date

    @property
    def inflation_rate(self):
        """Gets the inflation_rate of this IAssumptions.


        :return: The inflation_rate of this IAssumptions.
        :rtype: Percent
        """
        return self._inflation_rate

    @inflation_rate.setter
    def inflation_rate(self, inflation_rate):
        """Sets the inflation_rate of this IAssumptions.


        :param inflation_rate: The inflation_rate of this IAssumptions.
        :type inflation_rate: Percent
        """

        self._inflation_rate = inflation_rate

    @property
    def last_to_die_date(self):
        """Gets the last_to_die_date of this IAssumptions.


        :return: The last_to_die_date of this IAssumptions.
        :rtype: ModelDate
        """
        return self._last_to_die_date

    @last_to_die_date.setter
    def last_to_die_date(self, last_to_die_date):
        """Sets the last_to_die_date of this IAssumptions.


        :param last_to_die_date: The last_to_die_date of this IAssumptions.
        :type last_to_die_date: ModelDate
        """

        self._last_to_die_date = last_to_die_date

    @property
    def last_to_die_member(self):
        """Gets the last_to_die_member of this IAssumptions.


        :return: The last_to_die_member of this IAssumptions.
        :rtype: str
        """
        return self._last_to_die_member

    @last_to_die_member.setter
    def last_to_die_member(self, last_to_die_member):
        """Sets the last_to_die_member of this IAssumptions.


        :param last_to_die_member: The last_to_die_member of this IAssumptions.
        :type last_to_die_member: str
        """
        allowed_values = ["Client", "CoClient"]  # noqa: E501
        if last_to_die_member not in allowed_values:
            raise ValueError(
                "Invalid value for `last_to_die_member` ({0}), must be one of {1}"
                .format(last_to_die_member, allowed_values)
            )

        self._last_to_die_member = last_to_die_member

    @property
    def last_to_retire_date(self):
        """Gets the last_to_retire_date of this IAssumptions.


        :return: The last_to_retire_date of this IAssumptions.
        :rtype: ModelDate
        """
        return self._last_to_retire_date

    @last_to_retire_date.setter
    def last_to_retire_date(self, last_to_retire_date):
        """Sets the last_to_retire_date of this IAssumptions.


        :param last_to_retire_date: The last_to_retire_date of this IAssumptions.
        :type last_to_retire_date: ModelDate
        """

        self._last_to_retire_date = last_to_retire_date

    @property
    def retirement_year_adjusted_if_already_retired(self):
        """Gets the retirement_year_adjusted_if_already_retired of this IAssumptions.


        :return: The retirement_year_adjusted_if_already_retired of this IAssumptions.
        :rtype: Year
        """
        return self._retirement_year_adjusted_if_already_retired

    @retirement_year_adjusted_if_already_retired.setter
    def retirement_year_adjusted_if_already_retired(self, retirement_year_adjusted_if_already_retired):
        """Sets the retirement_year_adjusted_if_already_retired of this IAssumptions.


        :param retirement_year_adjusted_if_already_retired: The retirement_year_adjusted_if_already_retired of this IAssumptions.
        :type retirement_year_adjusted_if_already_retired: Year
        """

        self._retirement_year_adjusted_if_already_retired = retirement_year_adjusted_if_already_retired

    @property
    def split_surplus_savings_strategies_enabled(self):
        """Gets the split_surplus_savings_strategies_enabled of this IAssumptions.


        :return: The split_surplus_savings_strategies_enabled of this IAssumptions.
        :rtype: bool
        """
        return self._split_surplus_savings_strategies_enabled

    @split_surplus_savings_strategies_enabled.setter
    def split_surplus_savings_strategies_enabled(self, split_surplus_savings_strategies_enabled):
        """Sets the split_surplus_savings_strategies_enabled of this IAssumptions.


        :param split_surplus_savings_strategies_enabled: The split_surplus_savings_strategies_enabled of this IAssumptions.
        :type split_surplus_savings_strategies_enabled: bool
        """

        self._split_surplus_savings_strategies_enabled = split_surplus_savings_strategies_enabled

    @property
    def tax_method(self):
        """Gets the tax_method of this IAssumptions.


        :return: The tax_method of this IAssumptions.
        :rtype: str
        """
        return self._tax_method

    @tax_method.setter
    def tax_method(self, tax_method):
        """Sets the tax_method of this IAssumptions.


        :param tax_method: The tax_method of this IAssumptions.
        :type tax_method: str
        """
        allowed_values = ["Average", "Simplified", "Detailed"]  # noqa: E501
        if tax_method not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_method` ({0}), must be one of {1}"
                .format(tax_method, allowed_values)
            )

        self._tax_method = tax_method
