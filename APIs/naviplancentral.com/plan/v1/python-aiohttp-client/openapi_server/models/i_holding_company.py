# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.descriptive_boolean import DescriptiveBoolean
from openapi_server.models.i_contributions import IContributions
from openapi_server.models.i_corporation_real_estate_asset import ICorporationRealEstateAsset
from openapi_server.models.i_estate_details import IEstateDetails
from openapi_server.models.i_historical_data import IHistoricalData
from openapi_server.models.i_investment_account import IInvestmentAccount
from openapi_server.models.i_liability import ILiability
from openapi_server.models.i_life_insurance_policy import ILifeInsurancePolicy
from openapi_server.models.i_ownership_details import IOwnershipDetails
from openapi_server.models.i_real_estate_asset import IRealEstateAsset
from openapi_server.models.i_withdrawals import IWithdrawals
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class IHoldingCompany(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_dividend_yield: Percent=None, ccpc: DescriptiveBoolean=None, common_shares_outstanding: int=None, contributions: IContributions=None, corporate_year_end: ModelDate=None, description: str=None, dividend_type: str=None, dividend_type_formatted: str=None, estate_details: IEstateDetails=None, historical_data: IHistoricalData=None, id: str=None, investment_accounts: List[IInvestmentAccount]=None, liabilities: List[ILiability]=None, life_insurance_policies: List[ILifeInsurancePolicy]=None, market_value: Currency=None, num_preferred_share_classes: int=None, other_assets: List[IRealEstateAsset]=None, ownership_as_of_date: ModelDate=None, ownership_details: IOwnershipDetails=None, preferred_shares_outstanding: int=None, province_of_incorporation: str=None, province_of_taxation: str=None, real_estate_assets: List[ICorporationRealEstateAsset]=None, value_of_all_common_shares: Currency=None, value_of_all_preferred_shares: Currency=None, withdrawals: IWithdrawals=None):
        """IHoldingCompany - a model defined in OpenAPI

        :param annual_dividend_yield: The annual_dividend_yield of this IHoldingCompany.
        :param ccpc: The ccpc of this IHoldingCompany.
        :param common_shares_outstanding: The common_shares_outstanding of this IHoldingCompany.
        :param contributions: The contributions of this IHoldingCompany.
        :param corporate_year_end: The corporate_year_end of this IHoldingCompany.
        :param description: The description of this IHoldingCompany.
        :param dividend_type: The dividend_type of this IHoldingCompany.
        :param dividend_type_formatted: The dividend_type_formatted of this IHoldingCompany.
        :param estate_details: The estate_details of this IHoldingCompany.
        :param historical_data: The historical_data of this IHoldingCompany.
        :param id: The id of this IHoldingCompany.
        :param investment_accounts: The investment_accounts of this IHoldingCompany.
        :param liabilities: The liabilities of this IHoldingCompany.
        :param life_insurance_policies: The life_insurance_policies of this IHoldingCompany.
        :param market_value: The market_value of this IHoldingCompany.
        :param num_preferred_share_classes: The num_preferred_share_classes of this IHoldingCompany.
        :param other_assets: The other_assets of this IHoldingCompany.
        :param ownership_as_of_date: The ownership_as_of_date of this IHoldingCompany.
        :param ownership_details: The ownership_details of this IHoldingCompany.
        :param preferred_shares_outstanding: The preferred_shares_outstanding of this IHoldingCompany.
        :param province_of_incorporation: The province_of_incorporation of this IHoldingCompany.
        :param province_of_taxation: The province_of_taxation of this IHoldingCompany.
        :param real_estate_assets: The real_estate_assets of this IHoldingCompany.
        :param value_of_all_common_shares: The value_of_all_common_shares of this IHoldingCompany.
        :param value_of_all_preferred_shares: The value_of_all_preferred_shares of this IHoldingCompany.
        :param withdrawals: The withdrawals of this IHoldingCompany.
        """
        self.openapi_types = {
            'annual_dividend_yield': Percent,
            'ccpc': DescriptiveBoolean,
            'common_shares_outstanding': int,
            'contributions': IContributions,
            'corporate_year_end': ModelDate,
            'description': str,
            'dividend_type': str,
            'dividend_type_formatted': str,
            'estate_details': IEstateDetails,
            'historical_data': IHistoricalData,
            'id': str,
            'investment_accounts': List[IInvestmentAccount],
            'liabilities': List[ILiability],
            'life_insurance_policies': List[ILifeInsurancePolicy],
            'market_value': Currency,
            'num_preferred_share_classes': int,
            'other_assets': List[IRealEstateAsset],
            'ownership_as_of_date': ModelDate,
            'ownership_details': IOwnershipDetails,
            'preferred_shares_outstanding': int,
            'province_of_incorporation': str,
            'province_of_taxation': str,
            'real_estate_assets': List[ICorporationRealEstateAsset],
            'value_of_all_common_shares': Currency,
            'value_of_all_preferred_shares': Currency,
            'withdrawals': IWithdrawals
        }

        self.attribute_map = {
            'annual_dividend_yield': 'annualDividendYield',
            'ccpc': 'ccpc',
            'common_shares_outstanding': 'commonSharesOutstanding',
            'contributions': 'contributions',
            'corporate_year_end': 'corporateYearEnd',
            'description': 'description',
            'dividend_type': 'dividendType',
            'dividend_type_formatted': 'dividendTypeFormatted',
            'estate_details': 'estateDetails',
            'historical_data': 'historicalData',
            'id': 'id',
            'investment_accounts': 'investmentAccounts',
            'liabilities': 'liabilities',
            'life_insurance_policies': 'lifeInsurancePolicies',
            'market_value': 'marketValue',
            'num_preferred_share_classes': 'numPreferredShareClasses',
            'other_assets': 'otherAssets',
            'ownership_as_of_date': 'ownershipAsOfDate',
            'ownership_details': 'ownershipDetails',
            'preferred_shares_outstanding': 'preferredSharesOutstanding',
            'province_of_incorporation': 'provinceOfIncorporation',
            'province_of_taxation': 'provinceOfTaxation',
            'real_estate_assets': 'realEstateAssets',
            'value_of_all_common_shares': 'valueOfAllCommonShares',
            'value_of_all_preferred_shares': 'valueOfAllPreferredShares',
            'withdrawals': 'withdrawals'
        }

        self._annual_dividend_yield = annual_dividend_yield
        self._ccpc = ccpc
        self._common_shares_outstanding = common_shares_outstanding
        self._contributions = contributions
        self._corporate_year_end = corporate_year_end
        self._description = description
        self._dividend_type = dividend_type
        self._dividend_type_formatted = dividend_type_formatted
        self._estate_details = estate_details
        self._historical_data = historical_data
        self._id = id
        self._investment_accounts = investment_accounts
        self._liabilities = liabilities
        self._life_insurance_policies = life_insurance_policies
        self._market_value = market_value
        self._num_preferred_share_classes = num_preferred_share_classes
        self._other_assets = other_assets
        self._ownership_as_of_date = ownership_as_of_date
        self._ownership_details = ownership_details
        self._preferred_shares_outstanding = preferred_shares_outstanding
        self._province_of_incorporation = province_of_incorporation
        self._province_of_taxation = province_of_taxation
        self._real_estate_assets = real_estate_assets
        self._value_of_all_common_shares = value_of_all_common_shares
        self._value_of_all_preferred_shares = value_of_all_preferred_shares
        self._withdrawals = withdrawals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IHoldingCompany':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IHoldingCompany of this IHoldingCompany.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_dividend_yield(self):
        """Gets the annual_dividend_yield of this IHoldingCompany.


        :return: The annual_dividend_yield of this IHoldingCompany.
        :rtype: Percent
        """
        return self._annual_dividend_yield

    @annual_dividend_yield.setter
    def annual_dividend_yield(self, annual_dividend_yield):
        """Sets the annual_dividend_yield of this IHoldingCompany.


        :param annual_dividend_yield: The annual_dividend_yield of this IHoldingCompany.
        :type annual_dividend_yield: Percent
        """

        self._annual_dividend_yield = annual_dividend_yield

    @property
    def ccpc(self):
        """Gets the ccpc of this IHoldingCompany.


        :return: The ccpc of this IHoldingCompany.
        :rtype: DescriptiveBoolean
        """
        return self._ccpc

    @ccpc.setter
    def ccpc(self, ccpc):
        """Sets the ccpc of this IHoldingCompany.


        :param ccpc: The ccpc of this IHoldingCompany.
        :type ccpc: DescriptiveBoolean
        """

        self._ccpc = ccpc

    @property
    def common_shares_outstanding(self):
        """Gets the common_shares_outstanding of this IHoldingCompany.


        :return: The common_shares_outstanding of this IHoldingCompany.
        :rtype: int
        """
        return self._common_shares_outstanding

    @common_shares_outstanding.setter
    def common_shares_outstanding(self, common_shares_outstanding):
        """Sets the common_shares_outstanding of this IHoldingCompany.


        :param common_shares_outstanding: The common_shares_outstanding of this IHoldingCompany.
        :type common_shares_outstanding: int
        """

        self._common_shares_outstanding = common_shares_outstanding

    @property
    def contributions(self):
        """Gets the contributions of this IHoldingCompany.


        :return: The contributions of this IHoldingCompany.
        :rtype: IContributions
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this IHoldingCompany.


        :param contributions: The contributions of this IHoldingCompany.
        :type contributions: IContributions
        """

        self._contributions = contributions

    @property
    def corporate_year_end(self):
        """Gets the corporate_year_end of this IHoldingCompany.


        :return: The corporate_year_end of this IHoldingCompany.
        :rtype: ModelDate
        """
        return self._corporate_year_end

    @corporate_year_end.setter
    def corporate_year_end(self, corporate_year_end):
        """Sets the corporate_year_end of this IHoldingCompany.


        :param corporate_year_end: The corporate_year_end of this IHoldingCompany.
        :type corporate_year_end: ModelDate
        """

        self._corporate_year_end = corporate_year_end

    @property
    def description(self):
        """Gets the description of this IHoldingCompany.


        :return: The description of this IHoldingCompany.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IHoldingCompany.


        :param description: The description of this IHoldingCompany.
        :type description: str
        """

        self._description = description

    @property
    def dividend_type(self):
        """Gets the dividend_type of this IHoldingCompany.


        :return: The dividend_type of this IHoldingCompany.
        :rtype: str
        """
        return self._dividend_type

    @dividend_type.setter
    def dividend_type(self, dividend_type):
        """Sets the dividend_type of this IHoldingCompany.


        :param dividend_type: The dividend_type of this IHoldingCompany.
        :type dividend_type: str
        """
        allowed_values = ["Taxable", "NonTaxable"]  # noqa: E501
        if dividend_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dividend_type` ({0}), must be one of {1}"
                .format(dividend_type, allowed_values)
            )

        self._dividend_type = dividend_type

    @property
    def dividend_type_formatted(self):
        """Gets the dividend_type_formatted of this IHoldingCompany.


        :return: The dividend_type_formatted of this IHoldingCompany.
        :rtype: str
        """
        return self._dividend_type_formatted

    @dividend_type_formatted.setter
    def dividend_type_formatted(self, dividend_type_formatted):
        """Sets the dividend_type_formatted of this IHoldingCompany.


        :param dividend_type_formatted: The dividend_type_formatted of this IHoldingCompany.
        :type dividend_type_formatted: str
        """

        self._dividend_type_formatted = dividend_type_formatted

    @property
    def estate_details(self):
        """Gets the estate_details of this IHoldingCompany.


        :return: The estate_details of this IHoldingCompany.
        :rtype: IEstateDetails
        """
        return self._estate_details

    @estate_details.setter
    def estate_details(self, estate_details):
        """Sets the estate_details of this IHoldingCompany.


        :param estate_details: The estate_details of this IHoldingCompany.
        :type estate_details: IEstateDetails
        """

        self._estate_details = estate_details

    @property
    def historical_data(self):
        """Gets the historical_data of this IHoldingCompany.


        :return: The historical_data of this IHoldingCompany.
        :rtype: IHistoricalData
        """
        return self._historical_data

    @historical_data.setter
    def historical_data(self, historical_data):
        """Sets the historical_data of this IHoldingCompany.


        :param historical_data: The historical_data of this IHoldingCompany.
        :type historical_data: IHistoricalData
        """

        self._historical_data = historical_data

    @property
    def id(self):
        """Gets the id of this IHoldingCompany.


        :return: The id of this IHoldingCompany.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IHoldingCompany.


        :param id: The id of this IHoldingCompany.
        :type id: str
        """

        self._id = id

    @property
    def investment_accounts(self):
        """Gets the investment_accounts of this IHoldingCompany.


        :return: The investment_accounts of this IHoldingCompany.
        :rtype: List[IInvestmentAccount]
        """
        return self._investment_accounts

    @investment_accounts.setter
    def investment_accounts(self, investment_accounts):
        """Sets the investment_accounts of this IHoldingCompany.


        :param investment_accounts: The investment_accounts of this IHoldingCompany.
        :type investment_accounts: List[IInvestmentAccount]
        """

        self._investment_accounts = investment_accounts

    @property
    def liabilities(self):
        """Gets the liabilities of this IHoldingCompany.


        :return: The liabilities of this IHoldingCompany.
        :rtype: List[ILiability]
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this IHoldingCompany.


        :param liabilities: The liabilities of this IHoldingCompany.
        :type liabilities: List[ILiability]
        """

        self._liabilities = liabilities

    @property
    def life_insurance_policies(self):
        """Gets the life_insurance_policies of this IHoldingCompany.


        :return: The life_insurance_policies of this IHoldingCompany.
        :rtype: List[ILifeInsurancePolicy]
        """
        return self._life_insurance_policies

    @life_insurance_policies.setter
    def life_insurance_policies(self, life_insurance_policies):
        """Sets the life_insurance_policies of this IHoldingCompany.


        :param life_insurance_policies: The life_insurance_policies of this IHoldingCompany.
        :type life_insurance_policies: List[ILifeInsurancePolicy]
        """

        self._life_insurance_policies = life_insurance_policies

    @property
    def market_value(self):
        """Gets the market_value of this IHoldingCompany.


        :return: The market_value of this IHoldingCompany.
        :rtype: Currency
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this IHoldingCompany.


        :param market_value: The market_value of this IHoldingCompany.
        :type market_value: Currency
        """

        self._market_value = market_value

    @property
    def num_preferred_share_classes(self):
        """Gets the num_preferred_share_classes of this IHoldingCompany.


        :return: The num_preferred_share_classes of this IHoldingCompany.
        :rtype: int
        """
        return self._num_preferred_share_classes

    @num_preferred_share_classes.setter
    def num_preferred_share_classes(self, num_preferred_share_classes):
        """Sets the num_preferred_share_classes of this IHoldingCompany.


        :param num_preferred_share_classes: The num_preferred_share_classes of this IHoldingCompany.
        :type num_preferred_share_classes: int
        """

        self._num_preferred_share_classes = num_preferred_share_classes

    @property
    def other_assets(self):
        """Gets the other_assets of this IHoldingCompany.


        :return: The other_assets of this IHoldingCompany.
        :rtype: List[IRealEstateAsset]
        """
        return self._other_assets

    @other_assets.setter
    def other_assets(self, other_assets):
        """Sets the other_assets of this IHoldingCompany.


        :param other_assets: The other_assets of this IHoldingCompany.
        :type other_assets: List[IRealEstateAsset]
        """

        self._other_assets = other_assets

    @property
    def ownership_as_of_date(self):
        """Gets the ownership_as_of_date of this IHoldingCompany.


        :return: The ownership_as_of_date of this IHoldingCompany.
        :rtype: ModelDate
        """
        return self._ownership_as_of_date

    @ownership_as_of_date.setter
    def ownership_as_of_date(self, ownership_as_of_date):
        """Sets the ownership_as_of_date of this IHoldingCompany.


        :param ownership_as_of_date: The ownership_as_of_date of this IHoldingCompany.
        :type ownership_as_of_date: ModelDate
        """

        self._ownership_as_of_date = ownership_as_of_date

    @property
    def ownership_details(self):
        """Gets the ownership_details of this IHoldingCompany.


        :return: The ownership_details of this IHoldingCompany.
        :rtype: IOwnershipDetails
        """
        return self._ownership_details

    @ownership_details.setter
    def ownership_details(self, ownership_details):
        """Sets the ownership_details of this IHoldingCompany.


        :param ownership_details: The ownership_details of this IHoldingCompany.
        :type ownership_details: IOwnershipDetails
        """

        self._ownership_details = ownership_details

    @property
    def preferred_shares_outstanding(self):
        """Gets the preferred_shares_outstanding of this IHoldingCompany.


        :return: The preferred_shares_outstanding of this IHoldingCompany.
        :rtype: int
        """
        return self._preferred_shares_outstanding

    @preferred_shares_outstanding.setter
    def preferred_shares_outstanding(self, preferred_shares_outstanding):
        """Sets the preferred_shares_outstanding of this IHoldingCompany.


        :param preferred_shares_outstanding: The preferred_shares_outstanding of this IHoldingCompany.
        :type preferred_shares_outstanding: int
        """

        self._preferred_shares_outstanding = preferred_shares_outstanding

    @property
    def province_of_incorporation(self):
        """Gets the province_of_incorporation of this IHoldingCompany.


        :return: The province_of_incorporation of this IHoldingCompany.
        :rtype: str
        """
        return self._province_of_incorporation

    @province_of_incorporation.setter
    def province_of_incorporation(self, province_of_incorporation):
        """Sets the province_of_incorporation of this IHoldingCompany.


        :param province_of_incorporation: The province_of_incorporation of this IHoldingCompany.
        :type province_of_incorporation: str
        """

        self._province_of_incorporation = province_of_incorporation

    @property
    def province_of_taxation(self):
        """Gets the province_of_taxation of this IHoldingCompany.


        :return: The province_of_taxation of this IHoldingCompany.
        :rtype: str
        """
        return self._province_of_taxation

    @province_of_taxation.setter
    def province_of_taxation(self, province_of_taxation):
        """Sets the province_of_taxation of this IHoldingCompany.


        :param province_of_taxation: The province_of_taxation of this IHoldingCompany.
        :type province_of_taxation: str
        """

        self._province_of_taxation = province_of_taxation

    @property
    def real_estate_assets(self):
        """Gets the real_estate_assets of this IHoldingCompany.


        :return: The real_estate_assets of this IHoldingCompany.
        :rtype: List[ICorporationRealEstateAsset]
        """
        return self._real_estate_assets

    @real_estate_assets.setter
    def real_estate_assets(self, real_estate_assets):
        """Sets the real_estate_assets of this IHoldingCompany.


        :param real_estate_assets: The real_estate_assets of this IHoldingCompany.
        :type real_estate_assets: List[ICorporationRealEstateAsset]
        """

        self._real_estate_assets = real_estate_assets

    @property
    def value_of_all_common_shares(self):
        """Gets the value_of_all_common_shares of this IHoldingCompany.


        :return: The value_of_all_common_shares of this IHoldingCompany.
        :rtype: Currency
        """
        return self._value_of_all_common_shares

    @value_of_all_common_shares.setter
    def value_of_all_common_shares(self, value_of_all_common_shares):
        """Sets the value_of_all_common_shares of this IHoldingCompany.


        :param value_of_all_common_shares: The value_of_all_common_shares of this IHoldingCompany.
        :type value_of_all_common_shares: Currency
        """

        self._value_of_all_common_shares = value_of_all_common_shares

    @property
    def value_of_all_preferred_shares(self):
        """Gets the value_of_all_preferred_shares of this IHoldingCompany.


        :return: The value_of_all_preferred_shares of this IHoldingCompany.
        :rtype: Currency
        """
        return self._value_of_all_preferred_shares

    @value_of_all_preferred_shares.setter
    def value_of_all_preferred_shares(self, value_of_all_preferred_shares):
        """Sets the value_of_all_preferred_shares of this IHoldingCompany.


        :param value_of_all_preferred_shares: The value_of_all_preferred_shares of this IHoldingCompany.
        :type value_of_all_preferred_shares: Currency
        """

        self._value_of_all_preferred_shares = value_of_all_preferred_shares

    @property
    def withdrawals(self):
        """Gets the withdrawals of this IHoldingCompany.


        :return: The withdrawals of this IHoldingCompany.
        :rtype: IWithdrawals
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this IHoldingCompany.


        :param withdrawals: The withdrawals of this IHoldingCompany.
        :type withdrawals: IWithdrawals
        """

        self._withdrawals = withdrawals
