# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CashFlowSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, surplus_deficit: float=None, total_income: float=None, total_outflows_with_taxes: float=None, total_outflows_without_taxes: float=None, total_taxes: float=None):
        """CashFlowSummary - a model defined in OpenAPI

        :param surplus_deficit: The surplus_deficit of this CashFlowSummary.
        :param total_income: The total_income of this CashFlowSummary.
        :param total_outflows_with_taxes: The total_outflows_with_taxes of this CashFlowSummary.
        :param total_outflows_without_taxes: The total_outflows_without_taxes of this CashFlowSummary.
        :param total_taxes: The total_taxes of this CashFlowSummary.
        """
        self.openapi_types = {
            'surplus_deficit': float,
            'total_income': float,
            'total_outflows_with_taxes': float,
            'total_outflows_without_taxes': float,
            'total_taxes': float
        }

        self.attribute_map = {
            'surplus_deficit': 'surplusDeficit',
            'total_income': 'totalIncome',
            'total_outflows_with_taxes': 'totalOutflowsWithTaxes',
            'total_outflows_without_taxes': 'totalOutflowsWithoutTaxes',
            'total_taxes': 'totalTaxes'
        }

        self._surplus_deficit = surplus_deficit
        self._total_income = total_income
        self._total_outflows_with_taxes = total_outflows_with_taxes
        self._total_outflows_without_taxes = total_outflows_without_taxes
        self._total_taxes = total_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CashFlowSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CashFlowSummary of this CashFlowSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def surplus_deficit(self):
        """Gets the surplus_deficit of this CashFlowSummary.


        :return: The surplus_deficit of this CashFlowSummary.
        :rtype: float
        """
        return self._surplus_deficit

    @surplus_deficit.setter
    def surplus_deficit(self, surplus_deficit):
        """Sets the surplus_deficit of this CashFlowSummary.


        :param surplus_deficit: The surplus_deficit of this CashFlowSummary.
        :type surplus_deficit: float
        """

        self._surplus_deficit = surplus_deficit

    @property
    def total_income(self):
        """Gets the total_income of this CashFlowSummary.


        :return: The total_income of this CashFlowSummary.
        :rtype: float
        """
        return self._total_income

    @total_income.setter
    def total_income(self, total_income):
        """Sets the total_income of this CashFlowSummary.


        :param total_income: The total_income of this CashFlowSummary.
        :type total_income: float
        """

        self._total_income = total_income

    @property
    def total_outflows_with_taxes(self):
        """Gets the total_outflows_with_taxes of this CashFlowSummary.


        :return: The total_outflows_with_taxes of this CashFlowSummary.
        :rtype: float
        """
        return self._total_outflows_with_taxes

    @total_outflows_with_taxes.setter
    def total_outflows_with_taxes(self, total_outflows_with_taxes):
        """Sets the total_outflows_with_taxes of this CashFlowSummary.


        :param total_outflows_with_taxes: The total_outflows_with_taxes of this CashFlowSummary.
        :type total_outflows_with_taxes: float
        """

        self._total_outflows_with_taxes = total_outflows_with_taxes

    @property
    def total_outflows_without_taxes(self):
        """Gets the total_outflows_without_taxes of this CashFlowSummary.


        :return: The total_outflows_without_taxes of this CashFlowSummary.
        :rtype: float
        """
        return self._total_outflows_without_taxes

    @total_outflows_without_taxes.setter
    def total_outflows_without_taxes(self, total_outflows_without_taxes):
        """Sets the total_outflows_without_taxes of this CashFlowSummary.


        :param total_outflows_without_taxes: The total_outflows_without_taxes of this CashFlowSummary.
        :type total_outflows_without_taxes: float
        """

        self._total_outflows_without_taxes = total_outflows_without_taxes

    @property
    def total_taxes(self):
        """Gets the total_taxes of this CashFlowSummary.


        :return: The total_taxes of this CashFlowSummary.
        :rtype: float
        """
        return self._total_taxes

    @total_taxes.setter
    def total_taxes(self, total_taxes):
        """Sets the total_taxes of this CashFlowSummary.


        :param total_taxes: The total_taxes of this CashFlowSummary.
        :type total_taxes: float
        """

        self._total_taxes = total_taxes
