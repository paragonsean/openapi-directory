# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server.models.goal_id import GoalId
from openapi_server.models.i_rate_of_return_details import IRateOfReturnDetails
from openapi_server.models.i_redemption_strategies import IRedemptionStrategies
from openapi_server.models.i_return_income_reinvested_details import IReturnIncomeReinvestedDetails
from openapi_server import util


class IPortfolioAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_range_retirement_liquidated_assets: FormattedDateRange=None, cost_basis: Currency=None, description: str=None, goal_funding_description: str=None, goal_funding_goal_id: GoalId=None, id: str=None, income_reinvested: IReturnIncomeReinvestedDetails=None, is_system_generated: bool=None, market_value: Currency=None, parent_account_id: str=None, rate_of_return: IRateOfReturnDetails=None, redemption_strategies: IRedemptionStrategies=None):
        """IPortfolioAsset - a model defined in OpenAPI

        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IPortfolioAsset.
        :param cost_basis: The cost_basis of this IPortfolioAsset.
        :param description: The description of this IPortfolioAsset.
        :param goal_funding_description: The goal_funding_description of this IPortfolioAsset.
        :param goal_funding_goal_id: The goal_funding_goal_id of this IPortfolioAsset.
        :param id: The id of this IPortfolioAsset.
        :param income_reinvested: The income_reinvested of this IPortfolioAsset.
        :param is_system_generated: The is_system_generated of this IPortfolioAsset.
        :param market_value: The market_value of this IPortfolioAsset.
        :param parent_account_id: The parent_account_id of this IPortfolioAsset.
        :param rate_of_return: The rate_of_return of this IPortfolioAsset.
        :param redemption_strategies: The redemption_strategies of this IPortfolioAsset.
        """
        self.openapi_types = {
            'applicable_range_retirement_liquidated_assets': FormattedDateRange,
            'cost_basis': Currency,
            'description': str,
            'goal_funding_description': str,
            'goal_funding_goal_id': GoalId,
            'id': str,
            'income_reinvested': IReturnIncomeReinvestedDetails,
            'is_system_generated': bool,
            'market_value': Currency,
            'parent_account_id': str,
            'rate_of_return': IRateOfReturnDetails,
            'redemption_strategies': IRedemptionStrategies
        }

        self.attribute_map = {
            'applicable_range_retirement_liquidated_assets': 'applicableRangeRetirementLiquidatedAssets',
            'cost_basis': 'costBasis',
            'description': 'description',
            'goal_funding_description': 'goalFundingDescription',
            'goal_funding_goal_id': 'goalFundingGoalId',
            'id': 'id',
            'income_reinvested': 'incomeReinvested',
            'is_system_generated': 'isSystemGenerated',
            'market_value': 'marketValue',
            'parent_account_id': 'parentAccountId',
            'rate_of_return': 'rateOfReturn',
            'redemption_strategies': 'redemptionStrategies'
        }

        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets
        self._cost_basis = cost_basis
        self._description = description
        self._goal_funding_description = goal_funding_description
        self._goal_funding_goal_id = goal_funding_goal_id
        self._id = id
        self._income_reinvested = income_reinvested
        self._is_system_generated = is_system_generated
        self._market_value = market_value
        self._parent_account_id = parent_account_id
        self._rate_of_return = rate_of_return
        self._redemption_strategies = redemption_strategies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPortfolioAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPortfolioAsset of this IPortfolioAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_range_retirement_liquidated_assets(self):
        """Gets the applicable_range_retirement_liquidated_assets of this IPortfolioAsset.


        :return: The applicable_range_retirement_liquidated_assets of this IPortfolioAsset.
        :rtype: FormattedDateRange
        """
        return self._applicable_range_retirement_liquidated_assets

    @applicable_range_retirement_liquidated_assets.setter
    def applicable_range_retirement_liquidated_assets(self, applicable_range_retirement_liquidated_assets):
        """Sets the applicable_range_retirement_liquidated_assets of this IPortfolioAsset.


        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IPortfolioAsset.
        :type applicable_range_retirement_liquidated_assets: FormattedDateRange
        """

        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets

    @property
    def cost_basis(self):
        """Gets the cost_basis of this IPortfolioAsset.


        :return: The cost_basis of this IPortfolioAsset.
        :rtype: Currency
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this IPortfolioAsset.


        :param cost_basis: The cost_basis of this IPortfolioAsset.
        :type cost_basis: Currency
        """

        self._cost_basis = cost_basis

    @property
    def description(self):
        """Gets the description of this IPortfolioAsset.


        :return: The description of this IPortfolioAsset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IPortfolioAsset.


        :param description: The description of this IPortfolioAsset.
        :type description: str
        """

        self._description = description

    @property
    def goal_funding_description(self):
        """Gets the goal_funding_description of this IPortfolioAsset.


        :return: The goal_funding_description of this IPortfolioAsset.
        :rtype: str
        """
        return self._goal_funding_description

    @goal_funding_description.setter
    def goal_funding_description(self, goal_funding_description):
        """Sets the goal_funding_description of this IPortfolioAsset.


        :param goal_funding_description: The goal_funding_description of this IPortfolioAsset.
        :type goal_funding_description: str
        """

        self._goal_funding_description = goal_funding_description

    @property
    def goal_funding_goal_id(self):
        """Gets the goal_funding_goal_id of this IPortfolioAsset.


        :return: The goal_funding_goal_id of this IPortfolioAsset.
        :rtype: GoalId
        """
        return self._goal_funding_goal_id

    @goal_funding_goal_id.setter
    def goal_funding_goal_id(self, goal_funding_goal_id):
        """Sets the goal_funding_goal_id of this IPortfolioAsset.


        :param goal_funding_goal_id: The goal_funding_goal_id of this IPortfolioAsset.
        :type goal_funding_goal_id: GoalId
        """

        self._goal_funding_goal_id = goal_funding_goal_id

    @property
    def id(self):
        """Gets the id of this IPortfolioAsset.


        :return: The id of this IPortfolioAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPortfolioAsset.


        :param id: The id of this IPortfolioAsset.
        :type id: str
        """

        self._id = id

    @property
    def income_reinvested(self):
        """Gets the income_reinvested of this IPortfolioAsset.


        :return: The income_reinvested of this IPortfolioAsset.
        :rtype: IReturnIncomeReinvestedDetails
        """
        return self._income_reinvested

    @income_reinvested.setter
    def income_reinvested(self, income_reinvested):
        """Sets the income_reinvested of this IPortfolioAsset.


        :param income_reinvested: The income_reinvested of this IPortfolioAsset.
        :type income_reinvested: IReturnIncomeReinvestedDetails
        """

        self._income_reinvested = income_reinvested

    @property
    def is_system_generated(self):
        """Gets the is_system_generated of this IPortfolioAsset.


        :return: The is_system_generated of this IPortfolioAsset.
        :rtype: bool
        """
        return self._is_system_generated

    @is_system_generated.setter
    def is_system_generated(self, is_system_generated):
        """Sets the is_system_generated of this IPortfolioAsset.


        :param is_system_generated: The is_system_generated of this IPortfolioAsset.
        :type is_system_generated: bool
        """

        self._is_system_generated = is_system_generated

    @property
    def market_value(self):
        """Gets the market_value of this IPortfolioAsset.


        :return: The market_value of this IPortfolioAsset.
        :rtype: Currency
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this IPortfolioAsset.


        :param market_value: The market_value of this IPortfolioAsset.
        :type market_value: Currency
        """

        self._market_value = market_value

    @property
    def parent_account_id(self):
        """Gets the parent_account_id of this IPortfolioAsset.


        :return: The parent_account_id of this IPortfolioAsset.
        :rtype: str
        """
        return self._parent_account_id

    @parent_account_id.setter
    def parent_account_id(self, parent_account_id):
        """Sets the parent_account_id of this IPortfolioAsset.


        :param parent_account_id: The parent_account_id of this IPortfolioAsset.
        :type parent_account_id: str
        """

        self._parent_account_id = parent_account_id

    @property
    def rate_of_return(self):
        """Gets the rate_of_return of this IPortfolioAsset.


        :return: The rate_of_return of this IPortfolioAsset.
        :rtype: IRateOfReturnDetails
        """
        return self._rate_of_return

    @rate_of_return.setter
    def rate_of_return(self, rate_of_return):
        """Sets the rate_of_return of this IPortfolioAsset.


        :param rate_of_return: The rate_of_return of this IPortfolioAsset.
        :type rate_of_return: IRateOfReturnDetails
        """

        self._rate_of_return = rate_of_return

    @property
    def redemption_strategies(self):
        """Gets the redemption_strategies of this IPortfolioAsset.


        :return: The redemption_strategies of this IPortfolioAsset.
        :rtype: IRedemptionStrategies
        """
        return self._redemption_strategies

    @redemption_strategies.setter
    def redemption_strategies(self, redemption_strategies):
        """Sets the redemption_strategies of this IPortfolioAsset.


        :param redemption_strategies: The redemption_strategies of this IPortfolioAsset.
        :type redemption_strategies: IRedemptionStrategies
        """

        self._redemption_strategies = redemption_strategies
