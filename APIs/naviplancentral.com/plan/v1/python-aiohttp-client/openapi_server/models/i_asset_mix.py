# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_asset_class import IAssetClass
from openapi_server import util


class IAssetMix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_class_display_level: int=None, asset_class_info_for_display_level: List[int]=None, classes: List[IAssetClass]=None, super_asset_classes: List[IAssetClass]=None):
        """IAssetMix - a model defined in OpenAPI

        :param asset_class_display_level: The asset_class_display_level of this IAssetMix.
        :param asset_class_info_for_display_level: The asset_class_info_for_display_level of this IAssetMix.
        :param classes: The classes of this IAssetMix.
        :param super_asset_classes: The super_asset_classes of this IAssetMix.
        """
        self.openapi_types = {
            'asset_class_display_level': int,
            'asset_class_info_for_display_level': List[int],
            'classes': List[IAssetClass],
            'super_asset_classes': List[IAssetClass]
        }

        self.attribute_map = {
            'asset_class_display_level': 'assetClassDisplayLevel',
            'asset_class_info_for_display_level': 'assetClassInfoForDisplayLevel',
            'classes': 'classes',
            'super_asset_classes': 'superAssetClasses'
        }

        self._asset_class_display_level = asset_class_display_level
        self._asset_class_info_for_display_level = asset_class_info_for_display_level
        self._classes = classes
        self._super_asset_classes = super_asset_classes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAssetMix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAssetMix of this IAssetMix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_class_display_level(self):
        """Gets the asset_class_display_level of this IAssetMix.


        :return: The asset_class_display_level of this IAssetMix.
        :rtype: int
        """
        return self._asset_class_display_level

    @asset_class_display_level.setter
    def asset_class_display_level(self, asset_class_display_level):
        """Sets the asset_class_display_level of this IAssetMix.


        :param asset_class_display_level: The asset_class_display_level of this IAssetMix.
        :type asset_class_display_level: int
        """

        self._asset_class_display_level = asset_class_display_level

    @property
    def asset_class_info_for_display_level(self):
        """Gets the asset_class_info_for_display_level of this IAssetMix.


        :return: The asset_class_info_for_display_level of this IAssetMix.
        :rtype: List[int]
        """
        return self._asset_class_info_for_display_level

    @asset_class_info_for_display_level.setter
    def asset_class_info_for_display_level(self, asset_class_info_for_display_level):
        """Sets the asset_class_info_for_display_level of this IAssetMix.


        :param asset_class_info_for_display_level: The asset_class_info_for_display_level of this IAssetMix.
        :type asset_class_info_for_display_level: List[int]
        """

        self._asset_class_info_for_display_level = asset_class_info_for_display_level

    @property
    def classes(self):
        """Gets the classes of this IAssetMix.


        :return: The classes of this IAssetMix.
        :rtype: List[IAssetClass]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this IAssetMix.


        :param classes: The classes of this IAssetMix.
        :type classes: List[IAssetClass]
        """

        self._classes = classes

    @property
    def super_asset_classes(self):
        """Gets the super_asset_classes of this IAssetMix.


        :return: The super_asset_classes of this IAssetMix.
        :rtype: List[IAssetClass]
        """
        return self._super_asset_classes

    @super_asset_classes.setter
    def super_asset_classes(self, super_asset_classes):
        """Sets the super_asset_classes of this IAssetMix.


        :param super_asset_classes: The super_asset_classes of this IAssetMix.
        :type super_asset_classes: List[IAssetClass]
        """

        self._super_asset_classes = super_asset_classes
