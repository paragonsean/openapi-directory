# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IFormattedFrequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, every_n_periods: int=None, formatted: str=None, formatted_abbrv: str=None, value: str=None):
        """IFormattedFrequency - a model defined in OpenAPI

        :param every_n_periods: The every_n_periods of this IFormattedFrequency.
        :param formatted: The formatted of this IFormattedFrequency.
        :param formatted_abbrv: The formatted_abbrv of this IFormattedFrequency.
        :param value: The value of this IFormattedFrequency.
        """
        self.openapi_types = {
            'every_n_periods': int,
            'formatted': str,
            'formatted_abbrv': str,
            'value': str
        }

        self.attribute_map = {
            'every_n_periods': 'everyNPeriods',
            'formatted': 'formatted',
            'formatted_abbrv': 'formattedAbbrv',
            'value': 'value'
        }

        self._every_n_periods = every_n_periods
        self._formatted = formatted
        self._formatted_abbrv = formatted_abbrv
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IFormattedFrequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IFormattedFrequency of this IFormattedFrequency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def every_n_periods(self):
        """Gets the every_n_periods of this IFormattedFrequency.


        :return: The every_n_periods of this IFormattedFrequency.
        :rtype: int
        """
        return self._every_n_periods

    @every_n_periods.setter
    def every_n_periods(self, every_n_periods):
        """Sets the every_n_periods of this IFormattedFrequency.


        :param every_n_periods: The every_n_periods of this IFormattedFrequency.
        :type every_n_periods: int
        """

        self._every_n_periods = every_n_periods

    @property
    def formatted(self):
        """Gets the formatted of this IFormattedFrequency.


        :return: The formatted of this IFormattedFrequency.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this IFormattedFrequency.


        :param formatted: The formatted of this IFormattedFrequency.
        :type formatted: str
        """

        self._formatted = formatted

    @property
    def formatted_abbrv(self):
        """Gets the formatted_abbrv of this IFormattedFrequency.


        :return: The formatted_abbrv of this IFormattedFrequency.
        :rtype: str
        """
        return self._formatted_abbrv

    @formatted_abbrv.setter
    def formatted_abbrv(self, formatted_abbrv):
        """Sets the formatted_abbrv of this IFormattedFrequency.


        :param formatted_abbrv: The formatted_abbrv of this IFormattedFrequency.
        :type formatted_abbrv: str
        """

        self._formatted_abbrv = formatted_abbrv

    @property
    def value(self):
        """Gets the value of this IFormattedFrequency.


        :return: The value of this IFormattedFrequency.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IFormattedFrequency.


        :param value: The value of this IFormattedFrequency.
        :type value: str
        """
        allowed_values = ["Annual", "SemiAnnual", "Quarterly", "Bimonthly", "Monthly", "TwiceMonthly", "BiWeekly", "Weekly", "Daily", "Continuously", "Onetime", "EveryXYears"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
