# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.goal_id import GoalId
from openapi_server.models.i_optional_field_currency import IOptionalFieldCurrency
from openapi_server.models.i_optional_field_goal_coverage_percent import IOptionalFieldGoalCoveragePercent
from openapi_server.models.i_optional_field_year import IOptionalFieldYear
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class IGoal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_remaining_after_funding_goal: IOptionalFieldCurrency=None, coverage: IOptionalFieldGoalCoveragePercent=None, description: str=None, end_date: ModelDate=None, identifier: GoalId=None, start_date: ModelDate=None, type: str=None, year_assets_depleted: IOptionalFieldYear=None):
        """IGoal - a model defined in OpenAPI

        :param assets_remaining_after_funding_goal: The assets_remaining_after_funding_goal of this IGoal.
        :param coverage: The coverage of this IGoal.
        :param description: The description of this IGoal.
        :param end_date: The end_date of this IGoal.
        :param identifier: The identifier of this IGoal.
        :param start_date: The start_date of this IGoal.
        :param type: The type of this IGoal.
        :param year_assets_depleted: The year_assets_depleted of this IGoal.
        """
        self.openapi_types = {
            'assets_remaining_after_funding_goal': IOptionalFieldCurrency,
            'coverage': IOptionalFieldGoalCoveragePercent,
            'description': str,
            'end_date': ModelDate,
            'identifier': GoalId,
            'start_date': ModelDate,
            'type': str,
            'year_assets_depleted': IOptionalFieldYear
        }

        self.attribute_map = {
            'assets_remaining_after_funding_goal': 'assetsRemainingAfterFundingGoal',
            'coverage': 'coverage',
            'description': 'description',
            'end_date': 'endDate',
            'identifier': 'identifier',
            'start_date': 'startDate',
            'type': 'type',
            'year_assets_depleted': 'yearAssetsDepleted'
        }

        self._assets_remaining_after_funding_goal = assets_remaining_after_funding_goal
        self._coverage = coverage
        self._description = description
        self._end_date = end_date
        self._identifier = identifier
        self._start_date = start_date
        self._type = type
        self._year_assets_depleted = year_assets_depleted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IGoal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IGoal of this IGoal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_remaining_after_funding_goal(self):
        """Gets the assets_remaining_after_funding_goal of this IGoal.


        :return: The assets_remaining_after_funding_goal of this IGoal.
        :rtype: IOptionalFieldCurrency
        """
        return self._assets_remaining_after_funding_goal

    @assets_remaining_after_funding_goal.setter
    def assets_remaining_after_funding_goal(self, assets_remaining_after_funding_goal):
        """Sets the assets_remaining_after_funding_goal of this IGoal.


        :param assets_remaining_after_funding_goal: The assets_remaining_after_funding_goal of this IGoal.
        :type assets_remaining_after_funding_goal: IOptionalFieldCurrency
        """

        self._assets_remaining_after_funding_goal = assets_remaining_after_funding_goal

    @property
    def coverage(self):
        """Gets the coverage of this IGoal.


        :return: The coverage of this IGoal.
        :rtype: IOptionalFieldGoalCoveragePercent
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this IGoal.


        :param coverage: The coverage of this IGoal.
        :type coverage: IOptionalFieldGoalCoveragePercent
        """

        self._coverage = coverage

    @property
    def description(self):
        """Gets the description of this IGoal.


        :return: The description of this IGoal.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IGoal.


        :param description: The description of this IGoal.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this IGoal.


        :return: The end_date of this IGoal.
        :rtype: ModelDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this IGoal.


        :param end_date: The end_date of this IGoal.
        :type end_date: ModelDate
        """

        self._end_date = end_date

    @property
    def identifier(self):
        """Gets the identifier of this IGoal.


        :return: The identifier of this IGoal.
        :rtype: GoalId
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this IGoal.


        :param identifier: The identifier of this IGoal.
        :type identifier: GoalId
        """

        self._identifier = identifier

    @property
    def start_date(self):
        """Gets the start_date of this IGoal.


        :return: The start_date of this IGoal.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this IGoal.


        :param start_date: The start_date of this IGoal.
        :type start_date: ModelDate
        """

        self._start_date = start_date

    @property
    def type(self):
        """Gets the type of this IGoal.


        :return: The type of this IGoal.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IGoal.


        :param type: The type of this IGoal.
        :type type: str
        """
        allowed_values = ["Retirement", "SurvivorIncome", "CriticalIllness", "LongTermCareInsurance", "Cashflow", "DisabilityIncome", "Education", "MajorPurchase", "EmergencyFund", "Undefined", "NotSupported"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def year_assets_depleted(self):
        """Gets the year_assets_depleted of this IGoal.


        :return: The year_assets_depleted of this IGoal.
        :rtype: IOptionalFieldYear
        """
        return self._year_assets_depleted

    @year_assets_depleted.setter
    def year_assets_depleted(self, year_assets_depleted):
        """Sets the year_assets_depleted of this IGoal.


        :param year_assets_depleted: The year_assets_depleted of this IGoal.
        :type year_assets_depleted: IOptionalFieldYear
        """

        self._year_assets_depleted = year_assets_depleted
