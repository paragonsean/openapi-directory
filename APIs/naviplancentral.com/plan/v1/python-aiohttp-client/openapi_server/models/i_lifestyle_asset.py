# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.currency_with_date import CurrencyWithDate
from openapi_server.models.formatted_lifestyle_type import FormattedLifestyleType
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class ILifestyleAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_tax_proceeds_account_name: str=None, description: str=None, future_value_projected_gross_sale_value: Currency=None, id: str=None, is_major_purchase_goal: bool=None, market_value_as_of: CurrencyWithDate=None, owner: str=None, pre_tax_growth_rate: Percent=None, present_value_projected_gross_sale_value: Currency=None, projected_sale_date: ModelDate=None, purchase_amount: Currency=None, purchase_date: ModelDate=None, selling_cost_percent: Percent=None, standard_deviation: Percent=None, type: FormattedLifestyleType=None):
        """ILifestyleAsset - a model defined in OpenAPI

        :param after_tax_proceeds_account_name: The after_tax_proceeds_account_name of this ILifestyleAsset.
        :param description: The description of this ILifestyleAsset.
        :param future_value_projected_gross_sale_value: The future_value_projected_gross_sale_value of this ILifestyleAsset.
        :param id: The id of this ILifestyleAsset.
        :param is_major_purchase_goal: The is_major_purchase_goal of this ILifestyleAsset.
        :param market_value_as_of: The market_value_as_of of this ILifestyleAsset.
        :param owner: The owner of this ILifestyleAsset.
        :param pre_tax_growth_rate: The pre_tax_growth_rate of this ILifestyleAsset.
        :param present_value_projected_gross_sale_value: The present_value_projected_gross_sale_value of this ILifestyleAsset.
        :param projected_sale_date: The projected_sale_date of this ILifestyleAsset.
        :param purchase_amount: The purchase_amount of this ILifestyleAsset.
        :param purchase_date: The purchase_date of this ILifestyleAsset.
        :param selling_cost_percent: The selling_cost_percent of this ILifestyleAsset.
        :param standard_deviation: The standard_deviation of this ILifestyleAsset.
        :param type: The type of this ILifestyleAsset.
        """
        self.openapi_types = {
            'after_tax_proceeds_account_name': str,
            'description': str,
            'future_value_projected_gross_sale_value': Currency,
            'id': str,
            'is_major_purchase_goal': bool,
            'market_value_as_of': CurrencyWithDate,
            'owner': str,
            'pre_tax_growth_rate': Percent,
            'present_value_projected_gross_sale_value': Currency,
            'projected_sale_date': ModelDate,
            'purchase_amount': Currency,
            'purchase_date': ModelDate,
            'selling_cost_percent': Percent,
            'standard_deviation': Percent,
            'type': FormattedLifestyleType
        }

        self.attribute_map = {
            'after_tax_proceeds_account_name': 'afterTaxProceedsAccountName',
            'description': 'description',
            'future_value_projected_gross_sale_value': 'futureValueProjectedGrossSaleValue',
            'id': 'id',
            'is_major_purchase_goal': 'isMajorPurchaseGoal',
            'market_value_as_of': 'marketValueAsOf',
            'owner': 'owner',
            'pre_tax_growth_rate': 'preTaxGrowthRate',
            'present_value_projected_gross_sale_value': 'presentValueProjectedGrossSaleValue',
            'projected_sale_date': 'projectedSaleDate',
            'purchase_amount': 'purchaseAmount',
            'purchase_date': 'purchaseDate',
            'selling_cost_percent': 'sellingCostPercent',
            'standard_deviation': 'standardDeviation',
            'type': 'type'
        }

        self._after_tax_proceeds_account_name = after_tax_proceeds_account_name
        self._description = description
        self._future_value_projected_gross_sale_value = future_value_projected_gross_sale_value
        self._id = id
        self._is_major_purchase_goal = is_major_purchase_goal
        self._market_value_as_of = market_value_as_of
        self._owner = owner
        self._pre_tax_growth_rate = pre_tax_growth_rate
        self._present_value_projected_gross_sale_value = present_value_projected_gross_sale_value
        self._projected_sale_date = projected_sale_date
        self._purchase_amount = purchase_amount
        self._purchase_date = purchase_date
        self._selling_cost_percent = selling_cost_percent
        self._standard_deviation = standard_deviation
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ILifestyleAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ILifestyleAsset of this ILifestyleAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_tax_proceeds_account_name(self):
        """Gets the after_tax_proceeds_account_name of this ILifestyleAsset.


        :return: The after_tax_proceeds_account_name of this ILifestyleAsset.
        :rtype: str
        """
        return self._after_tax_proceeds_account_name

    @after_tax_proceeds_account_name.setter
    def after_tax_proceeds_account_name(self, after_tax_proceeds_account_name):
        """Sets the after_tax_proceeds_account_name of this ILifestyleAsset.


        :param after_tax_proceeds_account_name: The after_tax_proceeds_account_name of this ILifestyleAsset.
        :type after_tax_proceeds_account_name: str
        """

        self._after_tax_proceeds_account_name = after_tax_proceeds_account_name

    @property
    def description(self):
        """Gets the description of this ILifestyleAsset.


        :return: The description of this ILifestyleAsset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ILifestyleAsset.


        :param description: The description of this ILifestyleAsset.
        :type description: str
        """

        self._description = description

    @property
    def future_value_projected_gross_sale_value(self):
        """Gets the future_value_projected_gross_sale_value of this ILifestyleAsset.


        :return: The future_value_projected_gross_sale_value of this ILifestyleAsset.
        :rtype: Currency
        """
        return self._future_value_projected_gross_sale_value

    @future_value_projected_gross_sale_value.setter
    def future_value_projected_gross_sale_value(self, future_value_projected_gross_sale_value):
        """Sets the future_value_projected_gross_sale_value of this ILifestyleAsset.


        :param future_value_projected_gross_sale_value: The future_value_projected_gross_sale_value of this ILifestyleAsset.
        :type future_value_projected_gross_sale_value: Currency
        """

        self._future_value_projected_gross_sale_value = future_value_projected_gross_sale_value

    @property
    def id(self):
        """Gets the id of this ILifestyleAsset.


        :return: The id of this ILifestyleAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ILifestyleAsset.


        :param id: The id of this ILifestyleAsset.
        :type id: str
        """

        self._id = id

    @property
    def is_major_purchase_goal(self):
        """Gets the is_major_purchase_goal of this ILifestyleAsset.


        :return: The is_major_purchase_goal of this ILifestyleAsset.
        :rtype: bool
        """
        return self._is_major_purchase_goal

    @is_major_purchase_goal.setter
    def is_major_purchase_goal(self, is_major_purchase_goal):
        """Sets the is_major_purchase_goal of this ILifestyleAsset.


        :param is_major_purchase_goal: The is_major_purchase_goal of this ILifestyleAsset.
        :type is_major_purchase_goal: bool
        """

        self._is_major_purchase_goal = is_major_purchase_goal

    @property
    def market_value_as_of(self):
        """Gets the market_value_as_of of this ILifestyleAsset.


        :return: The market_value_as_of of this ILifestyleAsset.
        :rtype: CurrencyWithDate
        """
        return self._market_value_as_of

    @market_value_as_of.setter
    def market_value_as_of(self, market_value_as_of):
        """Sets the market_value_as_of of this ILifestyleAsset.


        :param market_value_as_of: The market_value_as_of of this ILifestyleAsset.
        :type market_value_as_of: CurrencyWithDate
        """

        self._market_value_as_of = market_value_as_of

    @property
    def owner(self):
        """Gets the owner of this ILifestyleAsset.


        :return: The owner of this ILifestyleAsset.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ILifestyleAsset.


        :param owner: The owner of this ILifestyleAsset.
        :type owner: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def pre_tax_growth_rate(self):
        """Gets the pre_tax_growth_rate of this ILifestyleAsset.


        :return: The pre_tax_growth_rate of this ILifestyleAsset.
        :rtype: Percent
        """
        return self._pre_tax_growth_rate

    @pre_tax_growth_rate.setter
    def pre_tax_growth_rate(self, pre_tax_growth_rate):
        """Sets the pre_tax_growth_rate of this ILifestyleAsset.


        :param pre_tax_growth_rate: The pre_tax_growth_rate of this ILifestyleAsset.
        :type pre_tax_growth_rate: Percent
        """

        self._pre_tax_growth_rate = pre_tax_growth_rate

    @property
    def present_value_projected_gross_sale_value(self):
        """Gets the present_value_projected_gross_sale_value of this ILifestyleAsset.


        :return: The present_value_projected_gross_sale_value of this ILifestyleAsset.
        :rtype: Currency
        """
        return self._present_value_projected_gross_sale_value

    @present_value_projected_gross_sale_value.setter
    def present_value_projected_gross_sale_value(self, present_value_projected_gross_sale_value):
        """Sets the present_value_projected_gross_sale_value of this ILifestyleAsset.


        :param present_value_projected_gross_sale_value: The present_value_projected_gross_sale_value of this ILifestyleAsset.
        :type present_value_projected_gross_sale_value: Currency
        """

        self._present_value_projected_gross_sale_value = present_value_projected_gross_sale_value

    @property
    def projected_sale_date(self):
        """Gets the projected_sale_date of this ILifestyleAsset.


        :return: The projected_sale_date of this ILifestyleAsset.
        :rtype: ModelDate
        """
        return self._projected_sale_date

    @projected_sale_date.setter
    def projected_sale_date(self, projected_sale_date):
        """Sets the projected_sale_date of this ILifestyleAsset.


        :param projected_sale_date: The projected_sale_date of this ILifestyleAsset.
        :type projected_sale_date: ModelDate
        """

        self._projected_sale_date = projected_sale_date

    @property
    def purchase_amount(self):
        """Gets the purchase_amount of this ILifestyleAsset.


        :return: The purchase_amount of this ILifestyleAsset.
        :rtype: Currency
        """
        return self._purchase_amount

    @purchase_amount.setter
    def purchase_amount(self, purchase_amount):
        """Sets the purchase_amount of this ILifestyleAsset.


        :param purchase_amount: The purchase_amount of this ILifestyleAsset.
        :type purchase_amount: Currency
        """

        self._purchase_amount = purchase_amount

    @property
    def purchase_date(self):
        """Gets the purchase_date of this ILifestyleAsset.


        :return: The purchase_date of this ILifestyleAsset.
        :rtype: ModelDate
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this ILifestyleAsset.


        :param purchase_date: The purchase_date of this ILifestyleAsset.
        :type purchase_date: ModelDate
        """

        self._purchase_date = purchase_date

    @property
    def selling_cost_percent(self):
        """Gets the selling_cost_percent of this ILifestyleAsset.


        :return: The selling_cost_percent of this ILifestyleAsset.
        :rtype: Percent
        """
        return self._selling_cost_percent

    @selling_cost_percent.setter
    def selling_cost_percent(self, selling_cost_percent):
        """Sets the selling_cost_percent of this ILifestyleAsset.


        :param selling_cost_percent: The selling_cost_percent of this ILifestyleAsset.
        :type selling_cost_percent: Percent
        """

        self._selling_cost_percent = selling_cost_percent

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this ILifestyleAsset.


        :return: The standard_deviation of this ILifestyleAsset.
        :rtype: Percent
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this ILifestyleAsset.


        :param standard_deviation: The standard_deviation of this ILifestyleAsset.
        :type standard_deviation: Percent
        """

        self._standard_deviation = standard_deviation

    @property
    def type(self):
        """Gets the type of this ILifestyleAsset.


        :return: The type of this ILifestyleAsset.
        :rtype: FormattedLifestyleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ILifestyleAsset.


        :param type: The type of this ILifestyleAsset.
        :type type: FormattedLifestyleType
        """

        self._type = type
