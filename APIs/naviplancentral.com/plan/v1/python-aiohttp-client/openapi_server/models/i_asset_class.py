# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_asset_class_weight import IAssetClassWeight
from openapi_server.models.percent import Percent
from openapi_server import util


class IAssetClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, max_constraint: Percent=None, min_constraint: Percent=None, name: str=None, parent_super_asset_class_index: int=None, weight: IAssetClassWeight=None):
        """IAssetClass - a model defined in OpenAPI

        :param index: The index of this IAssetClass.
        :param max_constraint: The max_constraint of this IAssetClass.
        :param min_constraint: The min_constraint of this IAssetClass.
        :param name: The name of this IAssetClass.
        :param parent_super_asset_class_index: The parent_super_asset_class_index of this IAssetClass.
        :param weight: The weight of this IAssetClass.
        """
        self.openapi_types = {
            'index': int,
            'max_constraint': Percent,
            'min_constraint': Percent,
            'name': str,
            'parent_super_asset_class_index': int,
            'weight': IAssetClassWeight
        }

        self.attribute_map = {
            'index': 'index',
            'max_constraint': 'maxConstraint',
            'min_constraint': 'minConstraint',
            'name': 'name',
            'parent_super_asset_class_index': 'parentSuperAssetClassIndex',
            'weight': 'weight'
        }

        self._index = index
        self._max_constraint = max_constraint
        self._min_constraint = min_constraint
        self._name = name
        self._parent_super_asset_class_index = parent_super_asset_class_index
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAssetClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAssetClass of this IAssetClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this IAssetClass.


        :return: The index of this IAssetClass.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this IAssetClass.


        :param index: The index of this IAssetClass.
        :type index: int
        """

        self._index = index

    @property
    def max_constraint(self):
        """Gets the max_constraint of this IAssetClass.


        :return: The max_constraint of this IAssetClass.
        :rtype: Percent
        """
        return self._max_constraint

    @max_constraint.setter
    def max_constraint(self, max_constraint):
        """Sets the max_constraint of this IAssetClass.


        :param max_constraint: The max_constraint of this IAssetClass.
        :type max_constraint: Percent
        """

        self._max_constraint = max_constraint

    @property
    def min_constraint(self):
        """Gets the min_constraint of this IAssetClass.


        :return: The min_constraint of this IAssetClass.
        :rtype: Percent
        """
        return self._min_constraint

    @min_constraint.setter
    def min_constraint(self, min_constraint):
        """Sets the min_constraint of this IAssetClass.


        :param min_constraint: The min_constraint of this IAssetClass.
        :type min_constraint: Percent
        """

        self._min_constraint = min_constraint

    @property
    def name(self):
        """Gets the name of this IAssetClass.


        :return: The name of this IAssetClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IAssetClass.


        :param name: The name of this IAssetClass.
        :type name: str
        """

        self._name = name

    @property
    def parent_super_asset_class_index(self):
        """Gets the parent_super_asset_class_index of this IAssetClass.


        :return: The parent_super_asset_class_index of this IAssetClass.
        :rtype: int
        """
        return self._parent_super_asset_class_index

    @parent_super_asset_class_index.setter
    def parent_super_asset_class_index(self, parent_super_asset_class_index):
        """Sets the parent_super_asset_class_index of this IAssetClass.


        :param parent_super_asset_class_index: The parent_super_asset_class_index of this IAssetClass.
        :type parent_super_asset_class_index: int
        """

        self._parent_super_asset_class_index = parent_super_asset_class_index

    @property
    def weight(self):
        """Gets the weight of this IAssetClass.


        :return: The weight of this IAssetClass.
        :rtype: IAssetClassWeight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this IAssetClass.


        :param weight: The weight of this IAssetClass.
        :type weight: IAssetClassWeight
        """

        self._weight = weight
