# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.currency_with_date import CurrencyWithDate
from openapi_server.models.descriptive_boolean import DescriptiveBoolean
from openapi_server.models.formatted_enum_type_frequency import FormattedEnumTypeFrequency
from openapi_server.models.formatted_enum_type_liability_type import FormattedEnumTypeLiabilityType
from openapi_server.models.formatted_enum_type_pay_off_options_type import FormattedEnumTypePayOffOptionsType
from openapi_server.models.formatted_enum_type_payment_type import FormattedEnumTypePaymentType
from openapi_server.models.i_debt_mod_strategies import IDebtModStrategies
from openapi_server.models.i_optional_field_currency import IOptionalFieldCurrency
from openapi_server.models.i_optional_field_date import IOptionalFieldDate
from openapi_server.models.i_optional_field_descriptive_boolean import IOptionalFieldDescriptiveBoolean
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class ILiability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_payment_amount: Currency=None, balance_as_of: CurrencyWithDate=None, balance_as_of_plan_date: Currency=None, debt_mod_strategies: IDebtModStrategies=None, description: str=None, id: str=None, insured_for_disability: DescriptiveBoolean=None, insured_for_life: DescriptiveBoolean=None, interest_rate: Percent=None, is_interest_rate_variable: DescriptiveBoolean=None, is_payment_variable: DescriptiveBoolean=None, linked_asset_id: str=None, linked_asset_name: str=None, loan_date: ModelDate=None, original_balance: Currency=None, owner: str=None, paid_off_by_retirement: IOptionalFieldDescriptiveBoolean=None, pay_off_date: IOptionalFieldDate=None, pay_off_option_type: FormattedEnumTypePayOffOptionsType=None, payment_amount: IOptionalFieldCurrency=None, payment_frequency: FormattedEnumTypeFrequency=None, payment_type: FormattedEnumTypePaymentType=None, type: FormattedEnumTypeLiabilityType=None):
        """ILiability - a model defined in OpenAPI

        :param annual_payment_amount: The annual_payment_amount of this ILiability.
        :param balance_as_of: The balance_as_of of this ILiability.
        :param balance_as_of_plan_date: The balance_as_of_plan_date of this ILiability.
        :param debt_mod_strategies: The debt_mod_strategies of this ILiability.
        :param description: The description of this ILiability.
        :param id: The id of this ILiability.
        :param insured_for_disability: The insured_for_disability of this ILiability.
        :param insured_for_life: The insured_for_life of this ILiability.
        :param interest_rate: The interest_rate of this ILiability.
        :param is_interest_rate_variable: The is_interest_rate_variable of this ILiability.
        :param is_payment_variable: The is_payment_variable of this ILiability.
        :param linked_asset_id: The linked_asset_id of this ILiability.
        :param linked_asset_name: The linked_asset_name of this ILiability.
        :param loan_date: The loan_date of this ILiability.
        :param original_balance: The original_balance of this ILiability.
        :param owner: The owner of this ILiability.
        :param paid_off_by_retirement: The paid_off_by_retirement of this ILiability.
        :param pay_off_date: The pay_off_date of this ILiability.
        :param pay_off_option_type: The pay_off_option_type of this ILiability.
        :param payment_amount: The payment_amount of this ILiability.
        :param payment_frequency: The payment_frequency of this ILiability.
        :param payment_type: The payment_type of this ILiability.
        :param type: The type of this ILiability.
        """
        self.openapi_types = {
            'annual_payment_amount': Currency,
            'balance_as_of': CurrencyWithDate,
            'balance_as_of_plan_date': Currency,
            'debt_mod_strategies': IDebtModStrategies,
            'description': str,
            'id': str,
            'insured_for_disability': DescriptiveBoolean,
            'insured_for_life': DescriptiveBoolean,
            'interest_rate': Percent,
            'is_interest_rate_variable': DescriptiveBoolean,
            'is_payment_variable': DescriptiveBoolean,
            'linked_asset_id': str,
            'linked_asset_name': str,
            'loan_date': ModelDate,
            'original_balance': Currency,
            'owner': str,
            'paid_off_by_retirement': IOptionalFieldDescriptiveBoolean,
            'pay_off_date': IOptionalFieldDate,
            'pay_off_option_type': FormattedEnumTypePayOffOptionsType,
            'payment_amount': IOptionalFieldCurrency,
            'payment_frequency': FormattedEnumTypeFrequency,
            'payment_type': FormattedEnumTypePaymentType,
            'type': FormattedEnumTypeLiabilityType
        }

        self.attribute_map = {
            'annual_payment_amount': 'annualPaymentAmount',
            'balance_as_of': 'balanceAsOf',
            'balance_as_of_plan_date': 'balanceAsOfPlanDate',
            'debt_mod_strategies': 'debtModStrategies',
            'description': 'description',
            'id': 'id',
            'insured_for_disability': 'insuredForDisability',
            'insured_for_life': 'insuredForLife',
            'interest_rate': 'interestRate',
            'is_interest_rate_variable': 'isInterestRateVariable',
            'is_payment_variable': 'isPaymentVariable',
            'linked_asset_id': 'linkedAssetId',
            'linked_asset_name': 'linkedAssetName',
            'loan_date': 'loanDate',
            'original_balance': 'originalBalance',
            'owner': 'owner',
            'paid_off_by_retirement': 'paidOffByRetirement',
            'pay_off_date': 'payOffDate',
            'pay_off_option_type': 'payOffOptionType',
            'payment_amount': 'paymentAmount',
            'payment_frequency': 'paymentFrequency',
            'payment_type': 'paymentType',
            'type': 'type'
        }

        self._annual_payment_amount = annual_payment_amount
        self._balance_as_of = balance_as_of
        self._balance_as_of_plan_date = balance_as_of_plan_date
        self._debt_mod_strategies = debt_mod_strategies
        self._description = description
        self._id = id
        self._insured_for_disability = insured_for_disability
        self._insured_for_life = insured_for_life
        self._interest_rate = interest_rate
        self._is_interest_rate_variable = is_interest_rate_variable
        self._is_payment_variable = is_payment_variable
        self._linked_asset_id = linked_asset_id
        self._linked_asset_name = linked_asset_name
        self._loan_date = loan_date
        self._original_balance = original_balance
        self._owner = owner
        self._paid_off_by_retirement = paid_off_by_retirement
        self._pay_off_date = pay_off_date
        self._pay_off_option_type = pay_off_option_type
        self._payment_amount = payment_amount
        self._payment_frequency = payment_frequency
        self._payment_type = payment_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ILiability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ILiability of this ILiability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_payment_amount(self):
        """Gets the annual_payment_amount of this ILiability.


        :return: The annual_payment_amount of this ILiability.
        :rtype: Currency
        """
        return self._annual_payment_amount

    @annual_payment_amount.setter
    def annual_payment_amount(self, annual_payment_amount):
        """Sets the annual_payment_amount of this ILiability.


        :param annual_payment_amount: The annual_payment_amount of this ILiability.
        :type annual_payment_amount: Currency
        """

        self._annual_payment_amount = annual_payment_amount

    @property
    def balance_as_of(self):
        """Gets the balance_as_of of this ILiability.


        :return: The balance_as_of of this ILiability.
        :rtype: CurrencyWithDate
        """
        return self._balance_as_of

    @balance_as_of.setter
    def balance_as_of(self, balance_as_of):
        """Sets the balance_as_of of this ILiability.


        :param balance_as_of: The balance_as_of of this ILiability.
        :type balance_as_of: CurrencyWithDate
        """

        self._balance_as_of = balance_as_of

    @property
    def balance_as_of_plan_date(self):
        """Gets the balance_as_of_plan_date of this ILiability.


        :return: The balance_as_of_plan_date of this ILiability.
        :rtype: Currency
        """
        return self._balance_as_of_plan_date

    @balance_as_of_plan_date.setter
    def balance_as_of_plan_date(self, balance_as_of_plan_date):
        """Sets the balance_as_of_plan_date of this ILiability.


        :param balance_as_of_plan_date: The balance_as_of_plan_date of this ILiability.
        :type balance_as_of_plan_date: Currency
        """

        self._balance_as_of_plan_date = balance_as_of_plan_date

    @property
    def debt_mod_strategies(self):
        """Gets the debt_mod_strategies of this ILiability.


        :return: The debt_mod_strategies of this ILiability.
        :rtype: IDebtModStrategies
        """
        return self._debt_mod_strategies

    @debt_mod_strategies.setter
    def debt_mod_strategies(self, debt_mod_strategies):
        """Sets the debt_mod_strategies of this ILiability.


        :param debt_mod_strategies: The debt_mod_strategies of this ILiability.
        :type debt_mod_strategies: IDebtModStrategies
        """

        self._debt_mod_strategies = debt_mod_strategies

    @property
    def description(self):
        """Gets the description of this ILiability.


        :return: The description of this ILiability.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ILiability.


        :param description: The description of this ILiability.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ILiability.


        :return: The id of this ILiability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ILiability.


        :param id: The id of this ILiability.
        :type id: str
        """

        self._id = id

    @property
    def insured_for_disability(self):
        """Gets the insured_for_disability of this ILiability.


        :return: The insured_for_disability of this ILiability.
        :rtype: DescriptiveBoolean
        """
        return self._insured_for_disability

    @insured_for_disability.setter
    def insured_for_disability(self, insured_for_disability):
        """Sets the insured_for_disability of this ILiability.


        :param insured_for_disability: The insured_for_disability of this ILiability.
        :type insured_for_disability: DescriptiveBoolean
        """

        self._insured_for_disability = insured_for_disability

    @property
    def insured_for_life(self):
        """Gets the insured_for_life of this ILiability.


        :return: The insured_for_life of this ILiability.
        :rtype: DescriptiveBoolean
        """
        return self._insured_for_life

    @insured_for_life.setter
    def insured_for_life(self, insured_for_life):
        """Sets the insured_for_life of this ILiability.


        :param insured_for_life: The insured_for_life of this ILiability.
        :type insured_for_life: DescriptiveBoolean
        """

        self._insured_for_life = insured_for_life

    @property
    def interest_rate(self):
        """Gets the interest_rate of this ILiability.


        :return: The interest_rate of this ILiability.
        :rtype: Percent
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this ILiability.


        :param interest_rate: The interest_rate of this ILiability.
        :type interest_rate: Percent
        """

        self._interest_rate = interest_rate

    @property
    def is_interest_rate_variable(self):
        """Gets the is_interest_rate_variable of this ILiability.


        :return: The is_interest_rate_variable of this ILiability.
        :rtype: DescriptiveBoolean
        """
        return self._is_interest_rate_variable

    @is_interest_rate_variable.setter
    def is_interest_rate_variable(self, is_interest_rate_variable):
        """Sets the is_interest_rate_variable of this ILiability.


        :param is_interest_rate_variable: The is_interest_rate_variable of this ILiability.
        :type is_interest_rate_variable: DescriptiveBoolean
        """

        self._is_interest_rate_variable = is_interest_rate_variable

    @property
    def is_payment_variable(self):
        """Gets the is_payment_variable of this ILiability.


        :return: The is_payment_variable of this ILiability.
        :rtype: DescriptiveBoolean
        """
        return self._is_payment_variable

    @is_payment_variable.setter
    def is_payment_variable(self, is_payment_variable):
        """Sets the is_payment_variable of this ILiability.


        :param is_payment_variable: The is_payment_variable of this ILiability.
        :type is_payment_variable: DescriptiveBoolean
        """

        self._is_payment_variable = is_payment_variable

    @property
    def linked_asset_id(self):
        """Gets the linked_asset_id of this ILiability.


        :return: The linked_asset_id of this ILiability.
        :rtype: str
        """
        return self._linked_asset_id

    @linked_asset_id.setter
    def linked_asset_id(self, linked_asset_id):
        """Sets the linked_asset_id of this ILiability.


        :param linked_asset_id: The linked_asset_id of this ILiability.
        :type linked_asset_id: str
        """

        self._linked_asset_id = linked_asset_id

    @property
    def linked_asset_name(self):
        """Gets the linked_asset_name of this ILiability.


        :return: The linked_asset_name of this ILiability.
        :rtype: str
        """
        return self._linked_asset_name

    @linked_asset_name.setter
    def linked_asset_name(self, linked_asset_name):
        """Sets the linked_asset_name of this ILiability.


        :param linked_asset_name: The linked_asset_name of this ILiability.
        :type linked_asset_name: str
        """

        self._linked_asset_name = linked_asset_name

    @property
    def loan_date(self):
        """Gets the loan_date of this ILiability.


        :return: The loan_date of this ILiability.
        :rtype: ModelDate
        """
        return self._loan_date

    @loan_date.setter
    def loan_date(self, loan_date):
        """Sets the loan_date of this ILiability.


        :param loan_date: The loan_date of this ILiability.
        :type loan_date: ModelDate
        """

        self._loan_date = loan_date

    @property
    def original_balance(self):
        """Gets the original_balance of this ILiability.


        :return: The original_balance of this ILiability.
        :rtype: Currency
        """
        return self._original_balance

    @original_balance.setter
    def original_balance(self, original_balance):
        """Sets the original_balance of this ILiability.


        :param original_balance: The original_balance of this ILiability.
        :type original_balance: Currency
        """

        self._original_balance = original_balance

    @property
    def owner(self):
        """Gets the owner of this ILiability.


        :return: The owner of this ILiability.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ILiability.


        :param owner: The owner of this ILiability.
        :type owner: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def paid_off_by_retirement(self):
        """Gets the paid_off_by_retirement of this ILiability.


        :return: The paid_off_by_retirement of this ILiability.
        :rtype: IOptionalFieldDescriptiveBoolean
        """
        return self._paid_off_by_retirement

    @paid_off_by_retirement.setter
    def paid_off_by_retirement(self, paid_off_by_retirement):
        """Sets the paid_off_by_retirement of this ILiability.


        :param paid_off_by_retirement: The paid_off_by_retirement of this ILiability.
        :type paid_off_by_retirement: IOptionalFieldDescriptiveBoolean
        """

        self._paid_off_by_retirement = paid_off_by_retirement

    @property
    def pay_off_date(self):
        """Gets the pay_off_date of this ILiability.


        :return: The pay_off_date of this ILiability.
        :rtype: IOptionalFieldDate
        """
        return self._pay_off_date

    @pay_off_date.setter
    def pay_off_date(self, pay_off_date):
        """Sets the pay_off_date of this ILiability.


        :param pay_off_date: The pay_off_date of this ILiability.
        :type pay_off_date: IOptionalFieldDate
        """

        self._pay_off_date = pay_off_date

    @property
    def pay_off_option_type(self):
        """Gets the pay_off_option_type of this ILiability.


        :return: The pay_off_option_type of this ILiability.
        :rtype: FormattedEnumTypePayOffOptionsType
        """
        return self._pay_off_option_type

    @pay_off_option_type.setter
    def pay_off_option_type(self, pay_off_option_type):
        """Sets the pay_off_option_type of this ILiability.


        :param pay_off_option_type: The pay_off_option_type of this ILiability.
        :type pay_off_option_type: FormattedEnumTypePayOffOptionsType
        """

        self._pay_off_option_type = pay_off_option_type

    @property
    def payment_amount(self):
        """Gets the payment_amount of this ILiability.


        :return: The payment_amount of this ILiability.
        :rtype: IOptionalFieldCurrency
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this ILiability.


        :param payment_amount: The payment_amount of this ILiability.
        :type payment_amount: IOptionalFieldCurrency
        """

        self._payment_amount = payment_amount

    @property
    def payment_frequency(self):
        """Gets the payment_frequency of this ILiability.


        :return: The payment_frequency of this ILiability.
        :rtype: FormattedEnumTypeFrequency
        """
        return self._payment_frequency

    @payment_frequency.setter
    def payment_frequency(self, payment_frequency):
        """Sets the payment_frequency of this ILiability.


        :param payment_frequency: The payment_frequency of this ILiability.
        :type payment_frequency: FormattedEnumTypeFrequency
        """

        self._payment_frequency = payment_frequency

    @property
    def payment_type(self):
        """Gets the payment_type of this ILiability.


        :return: The payment_type of this ILiability.
        :rtype: FormattedEnumTypePaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ILiability.


        :param payment_type: The payment_type of this ILiability.
        :type payment_type: FormattedEnumTypePaymentType
        """

        self._payment_type = payment_type

    @property
    def type(self):
        """Gets the type of this ILiability.


        :return: The type of this ILiability.
        :rtype: FormattedEnumTypeLiabilityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ILiability.


        :param type: The type of this ILiability.
        :type type: FormattedEnumTypeLiabilityType
        """

        self._type = type
