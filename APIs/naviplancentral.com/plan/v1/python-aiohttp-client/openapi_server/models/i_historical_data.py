# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_general_setups import IGeneralSetups
from openapi_server.models.i_notional_accounts import INotionalAccounts
from openapi_server.models.i_outstanding_shareholder_loans import IOutstandingShareholderLoans
from openapi_server import util


class IHistoricalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, general_setups: IGeneralSetups=None, notional_accounts: INotionalAccounts=None, outstanding_shareholder_loans: IOutstandingShareholderLoans=None):
        """IHistoricalData - a model defined in OpenAPI

        :param general_setups: The general_setups of this IHistoricalData.
        :param notional_accounts: The notional_accounts of this IHistoricalData.
        :param outstanding_shareholder_loans: The outstanding_shareholder_loans of this IHistoricalData.
        """
        self.openapi_types = {
            'general_setups': IGeneralSetups,
            'notional_accounts': INotionalAccounts,
            'outstanding_shareholder_loans': IOutstandingShareholderLoans
        }

        self.attribute_map = {
            'general_setups': 'generalSetups',
            'notional_accounts': 'notionalAccounts',
            'outstanding_shareholder_loans': 'outstandingShareholderLoans'
        }

        self._general_setups = general_setups
        self._notional_accounts = notional_accounts
        self._outstanding_shareholder_loans = outstanding_shareholder_loans

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IHistoricalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IHistoricalData of this IHistoricalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def general_setups(self):
        """Gets the general_setups of this IHistoricalData.


        :return: The general_setups of this IHistoricalData.
        :rtype: IGeneralSetups
        """
        return self._general_setups

    @general_setups.setter
    def general_setups(self, general_setups):
        """Sets the general_setups of this IHistoricalData.


        :param general_setups: The general_setups of this IHistoricalData.
        :type general_setups: IGeneralSetups
        """

        self._general_setups = general_setups

    @property
    def notional_accounts(self):
        """Gets the notional_accounts of this IHistoricalData.


        :return: The notional_accounts of this IHistoricalData.
        :rtype: INotionalAccounts
        """
        return self._notional_accounts

    @notional_accounts.setter
    def notional_accounts(self, notional_accounts):
        """Sets the notional_accounts of this IHistoricalData.


        :param notional_accounts: The notional_accounts of this IHistoricalData.
        :type notional_accounts: INotionalAccounts
        """

        self._notional_accounts = notional_accounts

    @property
    def outstanding_shareholder_loans(self):
        """Gets the outstanding_shareholder_loans of this IHistoricalData.


        :return: The outstanding_shareholder_loans of this IHistoricalData.
        :rtype: IOutstandingShareholderLoans
        """
        return self._outstanding_shareholder_loans

    @outstanding_shareholder_loans.setter
    def outstanding_shareholder_loans(self, outstanding_shareholder_loans):
        """Sets the outstanding_shareholder_loans of this IHistoricalData.


        :param outstanding_shareholder_loans: The outstanding_shareholder_loans of this IHistoricalData.
        :type outstanding_shareholder_loans: IOutstandingShareholderLoans
        """

        self._outstanding_shareholder_loans = outstanding_shareholder_loans
