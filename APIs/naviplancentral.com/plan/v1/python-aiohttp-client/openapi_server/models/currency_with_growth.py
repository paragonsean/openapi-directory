# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.growth_rate_values import GrowthRateValues
from openapi_server import util


class CurrencyWithGrowth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formatted_decimal: str=None, formatted_no_decimal: str=None, growth: GrowthRateValues=None, raw: float=None):
        """CurrencyWithGrowth - a model defined in OpenAPI

        :param formatted_decimal: The formatted_decimal of this CurrencyWithGrowth.
        :param formatted_no_decimal: The formatted_no_decimal of this CurrencyWithGrowth.
        :param growth: The growth of this CurrencyWithGrowth.
        :param raw: The raw of this CurrencyWithGrowth.
        """
        self.openapi_types = {
            'formatted_decimal': str,
            'formatted_no_decimal': str,
            'growth': GrowthRateValues,
            'raw': float
        }

        self.attribute_map = {
            'formatted_decimal': 'formattedDecimal',
            'formatted_no_decimal': 'formattedNoDecimal',
            'growth': 'growth',
            'raw': 'raw'
        }

        self._formatted_decimal = formatted_decimal
        self._formatted_no_decimal = formatted_no_decimal
        self._growth = growth
        self._raw = raw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyWithGrowth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrencyWithGrowth of this CurrencyWithGrowth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formatted_decimal(self):
        """Gets the formatted_decimal of this CurrencyWithGrowth.


        :return: The formatted_decimal of this CurrencyWithGrowth.
        :rtype: str
        """
        return self._formatted_decimal

    @formatted_decimal.setter
    def formatted_decimal(self, formatted_decimal):
        """Sets the formatted_decimal of this CurrencyWithGrowth.


        :param formatted_decimal: The formatted_decimal of this CurrencyWithGrowth.
        :type formatted_decimal: str
        """

        self._formatted_decimal = formatted_decimal

    @property
    def formatted_no_decimal(self):
        """Gets the formatted_no_decimal of this CurrencyWithGrowth.


        :return: The formatted_no_decimal of this CurrencyWithGrowth.
        :rtype: str
        """
        return self._formatted_no_decimal

    @formatted_no_decimal.setter
    def formatted_no_decimal(self, formatted_no_decimal):
        """Sets the formatted_no_decimal of this CurrencyWithGrowth.


        :param formatted_no_decimal: The formatted_no_decimal of this CurrencyWithGrowth.
        :type formatted_no_decimal: str
        """

        self._formatted_no_decimal = formatted_no_decimal

    @property
    def growth(self):
        """Gets the growth of this CurrencyWithGrowth.


        :return: The growth of this CurrencyWithGrowth.
        :rtype: GrowthRateValues
        """
        return self._growth

    @growth.setter
    def growth(self, growth):
        """Sets the growth of this CurrencyWithGrowth.


        :param growth: The growth of this CurrencyWithGrowth.
        :type growth: GrowthRateValues
        """

        self._growth = growth

    @property
    def raw(self):
        """Gets the raw of this CurrencyWithGrowth.


        :return: The raw of this CurrencyWithGrowth.
        :rtype: float
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this CurrencyWithGrowth.


        :param raw: The raw of this CurrencyWithGrowth.
        :type raw: float
        """

        self._raw = raw
