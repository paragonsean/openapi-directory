# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_asset_mix import IAssetMix
from openapi_server.models.i_asset_valuation import IAssetValuation
from openapi_server.models.i_period_rate_of_return_details import IPeriodRateOfReturnDetails
from openapi_server.models.percent_or_currency import PercentOrCurrency
from openapi_server import util


class IHolding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_mix: IAssetMix=None, description: str=None, hold_amount: PercentOrCurrency=None, id: str=None, is_classified: bool=None, pre_retirement_return_rates: IPeriodRateOfReturnDetails=None, retirement_return_rates: IPeriodRateOfReturnDetails=None, symbol: str=None, valuation: IAssetValuation=None):
        """IHolding - a model defined in OpenAPI

        :param asset_mix: The asset_mix of this IHolding.
        :param description: The description of this IHolding.
        :param hold_amount: The hold_amount of this IHolding.
        :param id: The id of this IHolding.
        :param is_classified: The is_classified of this IHolding.
        :param pre_retirement_return_rates: The pre_retirement_return_rates of this IHolding.
        :param retirement_return_rates: The retirement_return_rates of this IHolding.
        :param symbol: The symbol of this IHolding.
        :param valuation: The valuation of this IHolding.
        """
        self.openapi_types = {
            'asset_mix': IAssetMix,
            'description': str,
            'hold_amount': PercentOrCurrency,
            'id': str,
            'is_classified': bool,
            'pre_retirement_return_rates': IPeriodRateOfReturnDetails,
            'retirement_return_rates': IPeriodRateOfReturnDetails,
            'symbol': str,
            'valuation': IAssetValuation
        }

        self.attribute_map = {
            'asset_mix': 'assetMix',
            'description': 'description',
            'hold_amount': 'holdAmount',
            'id': 'id',
            'is_classified': 'isClassified',
            'pre_retirement_return_rates': 'preRetirementReturnRates',
            'retirement_return_rates': 'retirementReturnRates',
            'symbol': 'symbol',
            'valuation': 'valuation'
        }

        self._asset_mix = asset_mix
        self._description = description
        self._hold_amount = hold_amount
        self._id = id
        self._is_classified = is_classified
        self._pre_retirement_return_rates = pre_retirement_return_rates
        self._retirement_return_rates = retirement_return_rates
        self._symbol = symbol
        self._valuation = valuation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IHolding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IHolding of this IHolding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_mix(self):
        """Gets the asset_mix of this IHolding.


        :return: The asset_mix of this IHolding.
        :rtype: IAssetMix
        """
        return self._asset_mix

    @asset_mix.setter
    def asset_mix(self, asset_mix):
        """Sets the asset_mix of this IHolding.


        :param asset_mix: The asset_mix of this IHolding.
        :type asset_mix: IAssetMix
        """

        self._asset_mix = asset_mix

    @property
    def description(self):
        """Gets the description of this IHolding.


        :return: The description of this IHolding.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IHolding.


        :param description: The description of this IHolding.
        :type description: str
        """

        self._description = description

    @property
    def hold_amount(self):
        """Gets the hold_amount of this IHolding.


        :return: The hold_amount of this IHolding.
        :rtype: PercentOrCurrency
        """
        return self._hold_amount

    @hold_amount.setter
    def hold_amount(self, hold_amount):
        """Sets the hold_amount of this IHolding.


        :param hold_amount: The hold_amount of this IHolding.
        :type hold_amount: PercentOrCurrency
        """

        self._hold_amount = hold_amount

    @property
    def id(self):
        """Gets the id of this IHolding.


        :return: The id of this IHolding.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IHolding.


        :param id: The id of this IHolding.
        :type id: str
        """

        self._id = id

    @property
    def is_classified(self):
        """Gets the is_classified of this IHolding.


        :return: The is_classified of this IHolding.
        :rtype: bool
        """
        return self._is_classified

    @is_classified.setter
    def is_classified(self, is_classified):
        """Sets the is_classified of this IHolding.


        :param is_classified: The is_classified of this IHolding.
        :type is_classified: bool
        """

        self._is_classified = is_classified

    @property
    def pre_retirement_return_rates(self):
        """Gets the pre_retirement_return_rates of this IHolding.


        :return: The pre_retirement_return_rates of this IHolding.
        :rtype: IPeriodRateOfReturnDetails
        """
        return self._pre_retirement_return_rates

    @pre_retirement_return_rates.setter
    def pre_retirement_return_rates(self, pre_retirement_return_rates):
        """Sets the pre_retirement_return_rates of this IHolding.


        :param pre_retirement_return_rates: The pre_retirement_return_rates of this IHolding.
        :type pre_retirement_return_rates: IPeriodRateOfReturnDetails
        """

        self._pre_retirement_return_rates = pre_retirement_return_rates

    @property
    def retirement_return_rates(self):
        """Gets the retirement_return_rates of this IHolding.


        :return: The retirement_return_rates of this IHolding.
        :rtype: IPeriodRateOfReturnDetails
        """
        return self._retirement_return_rates

    @retirement_return_rates.setter
    def retirement_return_rates(self, retirement_return_rates):
        """Sets the retirement_return_rates of this IHolding.


        :param retirement_return_rates: The retirement_return_rates of this IHolding.
        :type retirement_return_rates: IPeriodRateOfReturnDetails
        """

        self._retirement_return_rates = retirement_return_rates

    @property
    def symbol(self):
        """Gets the symbol of this IHolding.


        :return: The symbol of this IHolding.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IHolding.


        :param symbol: The symbol of this IHolding.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def valuation(self):
        """Gets the valuation of this IHolding.


        :return: The valuation of this IHolding.
        :rtype: IAssetValuation
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this IHolding.


        :param valuation: The valuation of this IHolding.
        :type valuation: IAssetValuation
        """

        self._valuation = valuation
