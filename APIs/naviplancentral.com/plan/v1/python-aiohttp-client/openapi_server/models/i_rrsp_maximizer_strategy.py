# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.descriptive_boolean import DescriptiveBoolean
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server import util


class IRrspMaximizerStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable: str=None, applicable_range: FormattedDateRange=None, asset_name: str=None, constrained_by_cashflow: DescriptiveBoolean=None, month: str=None):
        """IRrspMaximizerStrategy - a model defined in OpenAPI

        :param applicable: The applicable of this IRrspMaximizerStrategy.
        :param applicable_range: The applicable_range of this IRrspMaximizerStrategy.
        :param asset_name: The asset_name of this IRrspMaximizerStrategy.
        :param constrained_by_cashflow: The constrained_by_cashflow of this IRrspMaximizerStrategy.
        :param month: The month of this IRrspMaximizerStrategy.
        """
        self.openapi_types = {
            'applicable': str,
            'applicable_range': FormattedDateRange,
            'asset_name': str,
            'constrained_by_cashflow': DescriptiveBoolean,
            'month': str
        }

        self.attribute_map = {
            'applicable': 'applicable',
            'applicable_range': 'applicableRange',
            'asset_name': 'assetName',
            'constrained_by_cashflow': 'constrainedByCashflow',
            'month': 'month'
        }

        self._applicable = applicable
        self._applicable_range = applicable_range
        self._asset_name = asset_name
        self._constrained_by_cashflow = constrained_by_cashflow
        self._month = month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IRrspMaximizerStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IRrspMaximizerStrategy of this IRrspMaximizerStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable(self):
        """Gets the applicable of this IRrspMaximizerStrategy.


        :return: The applicable of this IRrspMaximizerStrategy.
        :rtype: str
        """
        return self._applicable

    @applicable.setter
    def applicable(self, applicable):
        """Sets the applicable of this IRrspMaximizerStrategy.


        :param applicable: The applicable of this IRrspMaximizerStrategy.
        :type applicable: str
        """

        self._applicable = applicable

    @property
    def applicable_range(self):
        """Gets the applicable_range of this IRrspMaximizerStrategy.


        :return: The applicable_range of this IRrspMaximizerStrategy.
        :rtype: FormattedDateRange
        """
        return self._applicable_range

    @applicable_range.setter
    def applicable_range(self, applicable_range):
        """Sets the applicable_range of this IRrspMaximizerStrategy.


        :param applicable_range: The applicable_range of this IRrspMaximizerStrategy.
        :type applicable_range: FormattedDateRange
        """

        self._applicable_range = applicable_range

    @property
    def asset_name(self):
        """Gets the asset_name of this IRrspMaximizerStrategy.


        :return: The asset_name of this IRrspMaximizerStrategy.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this IRrspMaximizerStrategy.


        :param asset_name: The asset_name of this IRrspMaximizerStrategy.
        :type asset_name: str
        """

        self._asset_name = asset_name

    @property
    def constrained_by_cashflow(self):
        """Gets the constrained_by_cashflow of this IRrspMaximizerStrategy.


        :return: The constrained_by_cashflow of this IRrspMaximizerStrategy.
        :rtype: DescriptiveBoolean
        """
        return self._constrained_by_cashflow

    @constrained_by_cashflow.setter
    def constrained_by_cashflow(self, constrained_by_cashflow):
        """Sets the constrained_by_cashflow of this IRrspMaximizerStrategy.


        :param constrained_by_cashflow: The constrained_by_cashflow of this IRrspMaximizerStrategy.
        :type constrained_by_cashflow: DescriptiveBoolean
        """

        self._constrained_by_cashflow = constrained_by_cashflow

    @property
    def month(self):
        """Gets the month of this IRrspMaximizerStrategy.


        :return: The month of this IRrspMaximizerStrategy.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this IRrspMaximizerStrategy.


        :param month: The month of this IRrspMaximizerStrategy.
        :type month: str
        """

        self._month = month
