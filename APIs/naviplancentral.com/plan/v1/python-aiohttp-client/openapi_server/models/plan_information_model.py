# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_plan_modules import IPlanModules
from openapi_server.models.model_date import ModelDate
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class PlanInformationModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, description: str=None, is_joint_analysis: bool=None, links: List[ObjectLink]=None, locale: str=None, plan_date: ModelDate=None, plan_description: str=None, plan_id: str=None, plan_level: str=None, plan_modules: IPlanModules=None, plan_type: str=None, publish_date: ModelDate=None):
        """PlanInformationModel - a model defined in OpenAPI

        :param country: The country of this PlanInformationModel.
        :param description: The description of this PlanInformationModel.
        :param is_joint_analysis: The is_joint_analysis of this PlanInformationModel.
        :param links: The links of this PlanInformationModel.
        :param locale: The locale of this PlanInformationModel.
        :param plan_date: The plan_date of this PlanInformationModel.
        :param plan_description: The plan_description of this PlanInformationModel.
        :param plan_id: The plan_id of this PlanInformationModel.
        :param plan_level: The plan_level of this PlanInformationModel.
        :param plan_modules: The plan_modules of this PlanInformationModel.
        :param plan_type: The plan_type of this PlanInformationModel.
        :param publish_date: The publish_date of this PlanInformationModel.
        """
        self.openapi_types = {
            'country': str,
            'description': str,
            'is_joint_analysis': bool,
            'links': List[ObjectLink],
            'locale': str,
            'plan_date': ModelDate,
            'plan_description': str,
            'plan_id': str,
            'plan_level': str,
            'plan_modules': IPlanModules,
            'plan_type': str,
            'publish_date': ModelDate
        }

        self.attribute_map = {
            'country': 'country',
            'description': 'description',
            'is_joint_analysis': 'isJointAnalysis',
            'links': 'links',
            'locale': 'locale',
            'plan_date': 'planDate',
            'plan_description': 'planDescription',
            'plan_id': 'planId',
            'plan_level': 'planLevel',
            'plan_modules': 'planModules',
            'plan_type': 'planType',
            'publish_date': 'publishDate'
        }

        self._country = country
        self._description = description
        self._is_joint_analysis = is_joint_analysis
        self._links = links
        self._locale = locale
        self._plan_date = plan_date
        self._plan_description = plan_description
        self._plan_id = plan_id
        self._plan_level = plan_level
        self._plan_modules = plan_modules
        self._plan_type = plan_type
        self._publish_date = publish_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanInformationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanInformationModel of this PlanInformationModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this PlanInformationModel.


        :return: The country of this PlanInformationModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PlanInformationModel.


        :param country: The country of this PlanInformationModel.
        :type country: str
        """

        self._country = country

    @property
    def description(self):
        """Gets the description of this PlanInformationModel.


        :return: The description of this PlanInformationModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlanInformationModel.


        :param description: The description of this PlanInformationModel.
        :type description: str
        """

        self._description = description

    @property
    def is_joint_analysis(self):
        """Gets the is_joint_analysis of this PlanInformationModel.


        :return: The is_joint_analysis of this PlanInformationModel.
        :rtype: bool
        """
        return self._is_joint_analysis

    @is_joint_analysis.setter
    def is_joint_analysis(self, is_joint_analysis):
        """Sets the is_joint_analysis of this PlanInformationModel.


        :param is_joint_analysis: The is_joint_analysis of this PlanInformationModel.
        :type is_joint_analysis: bool
        """

        self._is_joint_analysis = is_joint_analysis

    @property
    def links(self):
        """Gets the links of this PlanInformationModel.


        :return: The links of this PlanInformationModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PlanInformationModel.


        :param links: The links of this PlanInformationModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def locale(self):
        """Gets the locale of this PlanInformationModel.


        :return: The locale of this PlanInformationModel.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PlanInformationModel.


        :param locale: The locale of this PlanInformationModel.
        :type locale: str
        """

        self._locale = locale

    @property
    def plan_date(self):
        """Gets the plan_date of this PlanInformationModel.


        :return: The plan_date of this PlanInformationModel.
        :rtype: ModelDate
        """
        return self._plan_date

    @plan_date.setter
    def plan_date(self, plan_date):
        """Sets the plan_date of this PlanInformationModel.


        :param plan_date: The plan_date of this PlanInformationModel.
        :type plan_date: ModelDate
        """

        self._plan_date = plan_date

    @property
    def plan_description(self):
        """Gets the plan_description of this PlanInformationModel.


        :return: The plan_description of this PlanInformationModel.
        :rtype: str
        """
        return self._plan_description

    @plan_description.setter
    def plan_description(self, plan_description):
        """Sets the plan_description of this PlanInformationModel.


        :param plan_description: The plan_description of this PlanInformationModel.
        :type plan_description: str
        """

        self._plan_description = plan_description

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanInformationModel.


        :return: The plan_id of this PlanInformationModel.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanInformationModel.


        :param plan_id: The plan_id of this PlanInformationModel.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def plan_level(self):
        """Gets the plan_level of this PlanInformationModel.


        :return: The plan_level of this PlanInformationModel.
        :rtype: str
        """
        return self._plan_level

    @plan_level.setter
    def plan_level(self, plan_level):
        """Sets the plan_level of this PlanInformationModel.


        :param plan_level: The plan_level of this PlanInformationModel.
        :type plan_level: str
        """
        allowed_values = ["Calculator", "FinancialAssessment", "AssetAllocation", "Level1", "Level2", "Level3", "Undefined"]  # noqa: E501
        if plan_level not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_level` ({0}), must be one of {1}"
                .format(plan_level, allowed_values)
            )

        self._plan_level = plan_level

    @property
    def plan_modules(self):
        """Gets the plan_modules of this PlanInformationModel.


        :return: The plan_modules of this PlanInformationModel.
        :rtype: IPlanModules
        """
        return self._plan_modules

    @plan_modules.setter
    def plan_modules(self, plan_modules):
        """Sets the plan_modules of this PlanInformationModel.


        :param plan_modules: The plan_modules of this PlanInformationModel.
        :type plan_modules: IPlanModules
        """

        self._plan_modules = plan_modules

    @property
    def plan_type(self):
        """Gets the plan_type of this PlanInformationModel.


        :return: The plan_type of this PlanInformationModel.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this PlanInformationModel.


        :param plan_type: The plan_type of this PlanInformationModel.
        :type plan_type: str
        """

        self._plan_type = plan_type

    @property
    def publish_date(self):
        """Gets the publish_date of this PlanInformationModel.


        :return: The publish_date of this PlanInformationModel.
        :rtype: ModelDate
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this PlanInformationModel.


        :param publish_date: The publish_date of this PlanInformationModel.
        :type publish_date: ModelDate
        """

        self._publish_date = publish_date
