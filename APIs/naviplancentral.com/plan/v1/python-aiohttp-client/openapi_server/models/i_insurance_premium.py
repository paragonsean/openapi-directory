# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.currency_with_growth import CurrencyWithGrowth
from openapi_server.models.i_formatted_frequency import IFormattedFrequency
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class IInsurancePremium(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: CurrencyWithGrowth=None, annual_amount: Currency=None, cease_date: ModelDate=None, formatted_paying_member: str=None, frequency: IFormattedFrequency=None, paying_member: str=None, premium_refund_amount: Percent=None, start_date: ModelDate=None):
        """IInsurancePremium - a model defined in OpenAPI

        :param amount: The amount of this IInsurancePremium.
        :param annual_amount: The annual_amount of this IInsurancePremium.
        :param cease_date: The cease_date of this IInsurancePremium.
        :param formatted_paying_member: The formatted_paying_member of this IInsurancePremium.
        :param frequency: The frequency of this IInsurancePremium.
        :param paying_member: The paying_member of this IInsurancePremium.
        :param premium_refund_amount: The premium_refund_amount of this IInsurancePremium.
        :param start_date: The start_date of this IInsurancePremium.
        """
        self.openapi_types = {
            'amount': CurrencyWithGrowth,
            'annual_amount': Currency,
            'cease_date': ModelDate,
            'formatted_paying_member': str,
            'frequency': IFormattedFrequency,
            'paying_member': str,
            'premium_refund_amount': Percent,
            'start_date': ModelDate
        }

        self.attribute_map = {
            'amount': 'amount',
            'annual_amount': 'annualAmount',
            'cease_date': 'ceaseDate',
            'formatted_paying_member': 'formattedPayingMember',
            'frequency': 'frequency',
            'paying_member': 'payingMember',
            'premium_refund_amount': 'premiumRefundAmount',
            'start_date': 'startDate'
        }

        self._amount = amount
        self._annual_amount = annual_amount
        self._cease_date = cease_date
        self._formatted_paying_member = formatted_paying_member
        self._frequency = frequency
        self._paying_member = paying_member
        self._premium_refund_amount = premium_refund_amount
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IInsurancePremium':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IInsurancePremium of this IInsurancePremium.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this IInsurancePremium.


        :return: The amount of this IInsurancePremium.
        :rtype: CurrencyWithGrowth
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IInsurancePremium.


        :param amount: The amount of this IInsurancePremium.
        :type amount: CurrencyWithGrowth
        """

        self._amount = amount

    @property
    def annual_amount(self):
        """Gets the annual_amount of this IInsurancePremium.


        :return: The annual_amount of this IInsurancePremium.
        :rtype: Currency
        """
        return self._annual_amount

    @annual_amount.setter
    def annual_amount(self, annual_amount):
        """Sets the annual_amount of this IInsurancePremium.


        :param annual_amount: The annual_amount of this IInsurancePremium.
        :type annual_amount: Currency
        """

        self._annual_amount = annual_amount

    @property
    def cease_date(self):
        """Gets the cease_date of this IInsurancePremium.


        :return: The cease_date of this IInsurancePremium.
        :rtype: ModelDate
        """
        return self._cease_date

    @cease_date.setter
    def cease_date(self, cease_date):
        """Sets the cease_date of this IInsurancePremium.


        :param cease_date: The cease_date of this IInsurancePremium.
        :type cease_date: ModelDate
        """

        self._cease_date = cease_date

    @property
    def formatted_paying_member(self):
        """Gets the formatted_paying_member of this IInsurancePremium.


        :return: The formatted_paying_member of this IInsurancePremium.
        :rtype: str
        """
        return self._formatted_paying_member

    @formatted_paying_member.setter
    def formatted_paying_member(self, formatted_paying_member):
        """Sets the formatted_paying_member of this IInsurancePremium.


        :param formatted_paying_member: The formatted_paying_member of this IInsurancePremium.
        :type formatted_paying_member: str
        """

        self._formatted_paying_member = formatted_paying_member

    @property
    def frequency(self):
        """Gets the frequency of this IInsurancePremium.


        :return: The frequency of this IInsurancePremium.
        :rtype: IFormattedFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this IInsurancePremium.


        :param frequency: The frequency of this IInsurancePremium.
        :type frequency: IFormattedFrequency
        """

        self._frequency = frequency

    @property
    def paying_member(self):
        """Gets the paying_member of this IInsurancePremium.


        :return: The paying_member of this IInsurancePremium.
        :rtype: str
        """
        return self._paying_member

    @paying_member.setter
    def paying_member(self, paying_member):
        """Sets the paying_member of this IInsurancePremium.


        :param paying_member: The paying_member of this IInsurancePremium.
        :type paying_member: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if paying_member not in allowed_values:
            raise ValueError(
                "Invalid value for `paying_member` ({0}), must be one of {1}"
                .format(paying_member, allowed_values)
            )

        self._paying_member = paying_member

    @property
    def premium_refund_amount(self):
        """Gets the premium_refund_amount of this IInsurancePremium.


        :return: The premium_refund_amount of this IInsurancePremium.
        :rtype: Percent
        """
        return self._premium_refund_amount

    @premium_refund_amount.setter
    def premium_refund_amount(self, premium_refund_amount):
        """Sets the premium_refund_amount of this IInsurancePremium.


        :param premium_refund_amount: The premium_refund_amount of this IInsurancePremium.
        :type premium_refund_amount: Percent
        """

        self._premium_refund_amount = premium_refund_amount

    @property
    def start_date(self):
        """Gets the start_date of this IInsurancePremium.


        :return: The start_date of this IInsurancePremium.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this IInsurancePremium.


        :param start_date: The start_date of this IInsurancePremium.
        :type start_date: ModelDate
        """

        self._start_date = start_date
