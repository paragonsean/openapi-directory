# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.percent import Percent
from openapi_server import util


class GrowthRateValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_growth_percent: Percent=None, is_inflation_adjusted: bool=None, total_growth: Percent=None):
        """GrowthRateValues - a model defined in OpenAPI

        :param additional_growth_percent: The additional_growth_percent of this GrowthRateValues.
        :param is_inflation_adjusted: The is_inflation_adjusted of this GrowthRateValues.
        :param total_growth: The total_growth of this GrowthRateValues.
        """
        self.openapi_types = {
            'additional_growth_percent': Percent,
            'is_inflation_adjusted': bool,
            'total_growth': Percent
        }

        self.attribute_map = {
            'additional_growth_percent': 'additionalGrowthPercent',
            'is_inflation_adjusted': 'isInflationAdjusted',
            'total_growth': 'totalGrowth'
        }

        self._additional_growth_percent = additional_growth_percent
        self._is_inflation_adjusted = is_inflation_adjusted
        self._total_growth = total_growth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrowthRateValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrowthRateValues of this GrowthRateValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_growth_percent(self):
        """Gets the additional_growth_percent of this GrowthRateValues.


        :return: The additional_growth_percent of this GrowthRateValues.
        :rtype: Percent
        """
        return self._additional_growth_percent

    @additional_growth_percent.setter
    def additional_growth_percent(self, additional_growth_percent):
        """Sets the additional_growth_percent of this GrowthRateValues.


        :param additional_growth_percent: The additional_growth_percent of this GrowthRateValues.
        :type additional_growth_percent: Percent
        """

        self._additional_growth_percent = additional_growth_percent

    @property
    def is_inflation_adjusted(self):
        """Gets the is_inflation_adjusted of this GrowthRateValues.


        :return: The is_inflation_adjusted of this GrowthRateValues.
        :rtype: bool
        """
        return self._is_inflation_adjusted

    @is_inflation_adjusted.setter
    def is_inflation_adjusted(self, is_inflation_adjusted):
        """Sets the is_inflation_adjusted of this GrowthRateValues.


        :param is_inflation_adjusted: The is_inflation_adjusted of this GrowthRateValues.
        :type is_inflation_adjusted: bool
        """

        self._is_inflation_adjusted = is_inflation_adjusted

    @property
    def total_growth(self):
        """Gets the total_growth of this GrowthRateValues.


        :return: The total_growth of this GrowthRateValues.
        :rtype: Percent
        """
        return self._total_growth

    @total_growth.setter
    def total_growth(self, total_growth):
        """Sets the total_growth of this GrowthRateValues.


        :param total_growth: The total_growth of this GrowthRateValues.
        :type total_growth: Percent
        """

        self._total_growth = total_growth
