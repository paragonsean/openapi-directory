# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.i_cash_flow_incomes import ICashFlowIncomes
from openapi_server.models.i_cash_flow_outflows import ICashFlowOutflows
from openapi_server.models.i_taxes import ITaxes
from openapi_server import util


class ICashFlow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incomes: ICashFlowIncomes=None, outflows: ICashFlowOutflows=None, surplus_deficit: Currency=None, taxes: ITaxes=None):
        """ICashFlow - a model defined in OpenAPI

        :param incomes: The incomes of this ICashFlow.
        :param outflows: The outflows of this ICashFlow.
        :param surplus_deficit: The surplus_deficit of this ICashFlow.
        :param taxes: The taxes of this ICashFlow.
        """
        self.openapi_types = {
            'incomes': ICashFlowIncomes,
            'outflows': ICashFlowOutflows,
            'surplus_deficit': Currency,
            'taxes': ITaxes
        }

        self.attribute_map = {
            'incomes': 'incomes',
            'outflows': 'outflows',
            'surplus_deficit': 'surplusDeficit',
            'taxes': 'taxes'
        }

        self._incomes = incomes
        self._outflows = outflows
        self._surplus_deficit = surplus_deficit
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICashFlow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ICashFlow of this ICashFlow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incomes(self):
        """Gets the incomes of this ICashFlow.


        :return: The incomes of this ICashFlow.
        :rtype: ICashFlowIncomes
        """
        return self._incomes

    @incomes.setter
    def incomes(self, incomes):
        """Sets the incomes of this ICashFlow.


        :param incomes: The incomes of this ICashFlow.
        :type incomes: ICashFlowIncomes
        """

        self._incomes = incomes

    @property
    def outflows(self):
        """Gets the outflows of this ICashFlow.


        :return: The outflows of this ICashFlow.
        :rtype: ICashFlowOutflows
        """
        return self._outflows

    @outflows.setter
    def outflows(self, outflows):
        """Sets the outflows of this ICashFlow.


        :param outflows: The outflows of this ICashFlow.
        :type outflows: ICashFlowOutflows
        """

        self._outflows = outflows

    @property
    def surplus_deficit(self):
        """Gets the surplus_deficit of this ICashFlow.


        :return: The surplus_deficit of this ICashFlow.
        :rtype: Currency
        """
        return self._surplus_deficit

    @surplus_deficit.setter
    def surplus_deficit(self, surplus_deficit):
        """Sets the surplus_deficit of this ICashFlow.


        :param surplus_deficit: The surplus_deficit of this ICashFlow.
        :type surplus_deficit: Currency
        """

        self._surplus_deficit = surplus_deficit

    @property
    def taxes(self):
        """Gets the taxes of this ICashFlow.


        :return: The taxes of this ICashFlow.
        :rtype: ITaxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ICashFlow.


        :param taxes: The taxes of this ICashFlow.
        :type taxes: ITaxes
        """

        self._taxes = taxes
