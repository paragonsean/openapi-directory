# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.percent import Percent
from openapi_server import util


class IRateOfReturnBreakdown(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capital_gain: Percent=None, deferred_growth: Percent=None, dividend: Percent=None, interest: Percent=None, tax_free: Percent=None):
        """IRateOfReturnBreakdown - a model defined in OpenAPI

        :param capital_gain: The capital_gain of this IRateOfReturnBreakdown.
        :param deferred_growth: The deferred_growth of this IRateOfReturnBreakdown.
        :param dividend: The dividend of this IRateOfReturnBreakdown.
        :param interest: The interest of this IRateOfReturnBreakdown.
        :param tax_free: The tax_free of this IRateOfReturnBreakdown.
        """
        self.openapi_types = {
            'capital_gain': Percent,
            'deferred_growth': Percent,
            'dividend': Percent,
            'interest': Percent,
            'tax_free': Percent
        }

        self.attribute_map = {
            'capital_gain': 'capitalGain',
            'deferred_growth': 'deferredGrowth',
            'dividend': 'dividend',
            'interest': 'interest',
            'tax_free': 'taxFree'
        }

        self._capital_gain = capital_gain
        self._deferred_growth = deferred_growth
        self._dividend = dividend
        self._interest = interest
        self._tax_free = tax_free

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IRateOfReturnBreakdown':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IRateOfReturnBreakdown of this IRateOfReturnBreakdown.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capital_gain(self):
        """Gets the capital_gain of this IRateOfReturnBreakdown.


        :return: The capital_gain of this IRateOfReturnBreakdown.
        :rtype: Percent
        """
        return self._capital_gain

    @capital_gain.setter
    def capital_gain(self, capital_gain):
        """Sets the capital_gain of this IRateOfReturnBreakdown.


        :param capital_gain: The capital_gain of this IRateOfReturnBreakdown.
        :type capital_gain: Percent
        """

        self._capital_gain = capital_gain

    @property
    def deferred_growth(self):
        """Gets the deferred_growth of this IRateOfReturnBreakdown.


        :return: The deferred_growth of this IRateOfReturnBreakdown.
        :rtype: Percent
        """
        return self._deferred_growth

    @deferred_growth.setter
    def deferred_growth(self, deferred_growth):
        """Sets the deferred_growth of this IRateOfReturnBreakdown.


        :param deferred_growth: The deferred_growth of this IRateOfReturnBreakdown.
        :type deferred_growth: Percent
        """

        self._deferred_growth = deferred_growth

    @property
    def dividend(self):
        """Gets the dividend of this IRateOfReturnBreakdown.


        :return: The dividend of this IRateOfReturnBreakdown.
        :rtype: Percent
        """
        return self._dividend

    @dividend.setter
    def dividend(self, dividend):
        """Sets the dividend of this IRateOfReturnBreakdown.


        :param dividend: The dividend of this IRateOfReturnBreakdown.
        :type dividend: Percent
        """

        self._dividend = dividend

    @property
    def interest(self):
        """Gets the interest of this IRateOfReturnBreakdown.


        :return: The interest of this IRateOfReturnBreakdown.
        :rtype: Percent
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this IRateOfReturnBreakdown.


        :param interest: The interest of this IRateOfReturnBreakdown.
        :type interest: Percent
        """

        self._interest = interest

    @property
    def tax_free(self):
        """Gets the tax_free of this IRateOfReturnBreakdown.


        :return: The tax_free of this IRateOfReturnBreakdown.
        :rtype: Percent
        """
        return self._tax_free

    @tax_free.setter
    def tax_free(self, tax_free):
        """Sets the tax_free of this IRateOfReturnBreakdown.


        :param tax_free: The tax_free of this IRateOfReturnBreakdown.
        :type tax_free: Percent
        """

        self._tax_free = tax_free
