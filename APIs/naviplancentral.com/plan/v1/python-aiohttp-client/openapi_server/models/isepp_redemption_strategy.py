# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server.models.formatted_enum_type_frequency import FormattedEnumTypeFrequency
from openapi_server.models.formatted_enum_type_sepp_distribution_method import FormattedEnumTypeSEPPDistributionMethod
from openapi_server.models.formatted_enum_type_sepp_life_expectancy_table import FormattedEnumTypeSEPPLifeExpectancyTable
from openapi_server import util


class ISEPPRedemptionStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_date_range: FormattedDateRange=None, distribution_method: FormattedEnumTypeSEPPDistributionMethod=None, life_expectancy_table: FormattedEnumTypeSEPPLifeExpectancyTable=None, redemption_frequency: FormattedEnumTypeFrequency=None):
        """ISEPPRedemptionStrategy - a model defined in OpenAPI

        :param applicable_date_range: The applicable_date_range of this ISEPPRedemptionStrategy.
        :param distribution_method: The distribution_method of this ISEPPRedemptionStrategy.
        :param life_expectancy_table: The life_expectancy_table of this ISEPPRedemptionStrategy.
        :param redemption_frequency: The redemption_frequency of this ISEPPRedemptionStrategy.
        """
        self.openapi_types = {
            'applicable_date_range': FormattedDateRange,
            'distribution_method': FormattedEnumTypeSEPPDistributionMethod,
            'life_expectancy_table': FormattedEnumTypeSEPPLifeExpectancyTable,
            'redemption_frequency': FormattedEnumTypeFrequency
        }

        self.attribute_map = {
            'applicable_date_range': 'applicableDateRange',
            'distribution_method': 'distributionMethod',
            'life_expectancy_table': 'lifeExpectancyTable',
            'redemption_frequency': 'redemptionFrequency'
        }

        self._applicable_date_range = applicable_date_range
        self._distribution_method = distribution_method
        self._life_expectancy_table = life_expectancy_table
        self._redemption_frequency = redemption_frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ISEPPRedemptionStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ISEPPRedemptionStrategy of this ISEPPRedemptionStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_date_range(self):
        """Gets the applicable_date_range of this ISEPPRedemptionStrategy.


        :return: The applicable_date_range of this ISEPPRedemptionStrategy.
        :rtype: FormattedDateRange
        """
        return self._applicable_date_range

    @applicable_date_range.setter
    def applicable_date_range(self, applicable_date_range):
        """Sets the applicable_date_range of this ISEPPRedemptionStrategy.


        :param applicable_date_range: The applicable_date_range of this ISEPPRedemptionStrategy.
        :type applicable_date_range: FormattedDateRange
        """

        self._applicable_date_range = applicable_date_range

    @property
    def distribution_method(self):
        """Gets the distribution_method of this ISEPPRedemptionStrategy.


        :return: The distribution_method of this ISEPPRedemptionStrategy.
        :rtype: FormattedEnumTypeSEPPDistributionMethod
        """
        return self._distribution_method

    @distribution_method.setter
    def distribution_method(self, distribution_method):
        """Sets the distribution_method of this ISEPPRedemptionStrategy.


        :param distribution_method: The distribution_method of this ISEPPRedemptionStrategy.
        :type distribution_method: FormattedEnumTypeSEPPDistributionMethod
        """

        self._distribution_method = distribution_method

    @property
    def life_expectancy_table(self):
        """Gets the life_expectancy_table of this ISEPPRedemptionStrategy.


        :return: The life_expectancy_table of this ISEPPRedemptionStrategy.
        :rtype: FormattedEnumTypeSEPPLifeExpectancyTable
        """
        return self._life_expectancy_table

    @life_expectancy_table.setter
    def life_expectancy_table(self, life_expectancy_table):
        """Sets the life_expectancy_table of this ISEPPRedemptionStrategy.


        :param life_expectancy_table: The life_expectancy_table of this ISEPPRedemptionStrategy.
        :type life_expectancy_table: FormattedEnumTypeSEPPLifeExpectancyTable
        """

        self._life_expectancy_table = life_expectancy_table

    @property
    def redemption_frequency(self):
        """Gets the redemption_frequency of this ISEPPRedemptionStrategy.


        :return: The redemption_frequency of this ISEPPRedemptionStrategy.
        :rtype: FormattedEnumTypeFrequency
        """
        return self._redemption_frequency

    @redemption_frequency.setter
    def redemption_frequency(self, redemption_frequency):
        """Sets the redemption_frequency of this ISEPPRedemptionStrategy.


        :param redemption_frequency: The redemption_frequency of this ISEPPRedemptionStrategy.
        :type redemption_frequency: FormattedEnumTypeFrequency
        """

        self._redemption_frequency = redemption_frequency
