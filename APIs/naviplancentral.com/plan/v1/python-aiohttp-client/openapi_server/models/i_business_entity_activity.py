# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server.models.formatted_enum_type_frequency import FormattedEnumTypeFrequency
from openapi_server.models.growth_rate_values import GrowthRateValues
from openapi_server import util


class IBusinessEntityActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_date_range: FormattedDateRange=None, distributions: Currency=None, expense: Currency=None, frequency: FormattedEnumTypeFrequency=None, income: Currency=None, index_rate: GrowthRateValues=None):
        """IBusinessEntityActivity - a model defined in OpenAPI

        :param applicable_date_range: The applicable_date_range of this IBusinessEntityActivity.
        :param distributions: The distributions of this IBusinessEntityActivity.
        :param expense: The expense of this IBusinessEntityActivity.
        :param frequency: The frequency of this IBusinessEntityActivity.
        :param income: The income of this IBusinessEntityActivity.
        :param index_rate: The index_rate of this IBusinessEntityActivity.
        """
        self.openapi_types = {
            'applicable_date_range': FormattedDateRange,
            'distributions': Currency,
            'expense': Currency,
            'frequency': FormattedEnumTypeFrequency,
            'income': Currency,
            'index_rate': GrowthRateValues
        }

        self.attribute_map = {
            'applicable_date_range': 'applicableDateRange',
            'distributions': 'distributions',
            'expense': 'expense',
            'frequency': 'frequency',
            'income': 'income',
            'index_rate': 'indexRate'
        }

        self._applicable_date_range = applicable_date_range
        self._distributions = distributions
        self._expense = expense
        self._frequency = frequency
        self._income = income
        self._index_rate = index_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IBusinessEntityActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IBusinessEntityActivity of this IBusinessEntityActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_date_range(self):
        """Gets the applicable_date_range of this IBusinessEntityActivity.


        :return: The applicable_date_range of this IBusinessEntityActivity.
        :rtype: FormattedDateRange
        """
        return self._applicable_date_range

    @applicable_date_range.setter
    def applicable_date_range(self, applicable_date_range):
        """Sets the applicable_date_range of this IBusinessEntityActivity.


        :param applicable_date_range: The applicable_date_range of this IBusinessEntityActivity.
        :type applicable_date_range: FormattedDateRange
        """

        self._applicable_date_range = applicable_date_range

    @property
    def distributions(self):
        """Gets the distributions of this IBusinessEntityActivity.


        :return: The distributions of this IBusinessEntityActivity.
        :rtype: Currency
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this IBusinessEntityActivity.


        :param distributions: The distributions of this IBusinessEntityActivity.
        :type distributions: Currency
        """

        self._distributions = distributions

    @property
    def expense(self):
        """Gets the expense of this IBusinessEntityActivity.


        :return: The expense of this IBusinessEntityActivity.
        :rtype: Currency
        """
        return self._expense

    @expense.setter
    def expense(self, expense):
        """Sets the expense of this IBusinessEntityActivity.


        :param expense: The expense of this IBusinessEntityActivity.
        :type expense: Currency
        """

        self._expense = expense

    @property
    def frequency(self):
        """Gets the frequency of this IBusinessEntityActivity.


        :return: The frequency of this IBusinessEntityActivity.
        :rtype: FormattedEnumTypeFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this IBusinessEntityActivity.


        :param frequency: The frequency of this IBusinessEntityActivity.
        :type frequency: FormattedEnumTypeFrequency
        """

        self._frequency = frequency

    @property
    def income(self):
        """Gets the income of this IBusinessEntityActivity.


        :return: The income of this IBusinessEntityActivity.
        :rtype: Currency
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this IBusinessEntityActivity.


        :param income: The income of this IBusinessEntityActivity.
        :type income: Currency
        """

        self._income = income

    @property
    def index_rate(self):
        """Gets the index_rate of this IBusinessEntityActivity.


        :return: The index_rate of this IBusinessEntityActivity.
        :rtype: GrowthRateValues
        """
        return self._index_rate

    @index_rate.setter
    def index_rate(self, index_rate):
        """Sets the index_rate of this IBusinessEntityActivity.


        :param index_rate: The index_rate of this IBusinessEntityActivity.
        :type index_rate: GrowthRateValues
        """

        self._index_rate = index_rate
