# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server.models.i_holding import IHolding
from openapi_server.models.i_portfolio_asset import IPortfolioAsset
from openapi_server.models.i_rate_of_return_details import IRateOfReturnDetails
from openapi_server.models.isepp_redemption_strategy import ISEPPRedemptionStrategy
from openapi_server.models.i_savings_strategies import ISavingsStrategies
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class IPortfolioAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm: bool=None, annual_fee: Percent=None, applicable_range_retirement_liquidated_assets: FormattedDateRange=None, cost_basis: Currency=None, description: str=None, description_with_owner: str=None, exclude_in_aa: bool=None, holdings: List[IHolding]=None, id: str=None, is_system_generated: bool=None, market_value: Currency=None, owner: str=None, portfolio_assets: List[IPortfolioAsset]=None, rate_of_return: IRateOfReturnDetails=None, savings_strategies: ISavingsStrategies=None, sepp_redemption_strategy: ISEPPRedemptionStrategy=None, type: str=None, valuation_date: ModelDate=None):
        """IPortfolioAccount - a model defined in OpenAPI

        :param account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm: The account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm of this IPortfolioAccount.
        :param annual_fee: The annual_fee of this IPortfolioAccount.
        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IPortfolioAccount.
        :param cost_basis: The cost_basis of this IPortfolioAccount.
        :param description: The description of this IPortfolioAccount.
        :param description_with_owner: The description_with_owner of this IPortfolioAccount.
        :param exclude_in_aa: The exclude_in_aa of this IPortfolioAccount.
        :param holdings: The holdings of this IPortfolioAccount.
        :param id: The id of this IPortfolioAccount.
        :param is_system_generated: The is_system_generated of this IPortfolioAccount.
        :param market_value: The market_value of this IPortfolioAccount.
        :param owner: The owner of this IPortfolioAccount.
        :param portfolio_assets: The portfolio_assets of this IPortfolioAccount.
        :param rate_of_return: The rate_of_return of this IPortfolioAccount.
        :param savings_strategies: The savings_strategies of this IPortfolioAccount.
        :param sepp_redemption_strategy: The sepp_redemption_strategy of this IPortfolioAccount.
        :param type: The type of this IPortfolioAccount.
        :param valuation_date: The valuation_date of this IPortfolioAccount.
        """
        self.openapi_types = {
            'account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm': bool,
            'annual_fee': Percent,
            'applicable_range_retirement_liquidated_assets': FormattedDateRange,
            'cost_basis': Currency,
            'description': str,
            'description_with_owner': str,
            'exclude_in_aa': bool,
            'holdings': List[IHolding],
            'id': str,
            'is_system_generated': bool,
            'market_value': Currency,
            'owner': str,
            'portfolio_assets': List[IPortfolioAsset],
            'rate_of_return': IRateOfReturnDetails,
            'savings_strategies': ISavingsStrategies,
            'sepp_redemption_strategy': ISEPPRedemptionStrategy,
            'type': str,
            'valuation_date': ModelDate
        }

        self.attribute_map = {
            'account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm': 'accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm',
            'annual_fee': 'annualFee',
            'applicable_range_retirement_liquidated_assets': 'applicableRangeRetirementLiquidatedAssets',
            'cost_basis': 'costBasis',
            'description': 'description',
            'description_with_owner': 'descriptionWithOwner',
            'exclude_in_aa': 'excludeInAA',
            'holdings': 'holdings',
            'id': 'id',
            'is_system_generated': 'isSystemGenerated',
            'market_value': 'marketValue',
            'owner': 'owner',
            'portfolio_assets': 'portfolioAssets',
            'rate_of_return': 'rateOfReturn',
            'savings_strategies': 'savingsStrategies',
            'sepp_redemption_strategy': 'seppRedemptionStrategy',
            'type': 'type',
            'valuation_date': 'valuationDate'
        }

        self._account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm = account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm
        self._annual_fee = annual_fee
        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets
        self._cost_basis = cost_basis
        self._description = description
        self._description_with_owner = description_with_owner
        self._exclude_in_aa = exclude_in_aa
        self._holdings = holdings
        self._id = id
        self._is_system_generated = is_system_generated
        self._market_value = market_value
        self._owner = owner
        self._portfolio_assets = portfolio_assets
        self._rate_of_return = rate_of_return
        self._savings_strategies = savings_strategies
        self._sepp_redemption_strategy = sepp_redemption_strategy
        self._type = type
        self._valuation_date = valuation_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPortfolioAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPortfolioAccount of this IPortfolioAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm(self):
        """Gets the account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm of this IPortfolioAccount.


        :return: The account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm of this IPortfolioAccount.
        :rtype: bool
        """
        return self._account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm

    @account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm.setter
    def account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm(self, account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm):
        """Sets the account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm of this IPortfolioAccount.


        :param account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm: The account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm of this IPortfolioAccount.
        :type account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm: bool
        """

        self._account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm = account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm

    @property
    def annual_fee(self):
        """Gets the annual_fee of this IPortfolioAccount.


        :return: The annual_fee of this IPortfolioAccount.
        :rtype: Percent
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this IPortfolioAccount.


        :param annual_fee: The annual_fee of this IPortfolioAccount.
        :type annual_fee: Percent
        """

        self._annual_fee = annual_fee

    @property
    def applicable_range_retirement_liquidated_assets(self):
        """Gets the applicable_range_retirement_liquidated_assets of this IPortfolioAccount.


        :return: The applicable_range_retirement_liquidated_assets of this IPortfolioAccount.
        :rtype: FormattedDateRange
        """
        return self._applicable_range_retirement_liquidated_assets

    @applicable_range_retirement_liquidated_assets.setter
    def applicable_range_retirement_liquidated_assets(self, applicable_range_retirement_liquidated_assets):
        """Sets the applicable_range_retirement_liquidated_assets of this IPortfolioAccount.


        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IPortfolioAccount.
        :type applicable_range_retirement_liquidated_assets: FormattedDateRange
        """

        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets

    @property
    def cost_basis(self):
        """Gets the cost_basis of this IPortfolioAccount.


        :return: The cost_basis of this IPortfolioAccount.
        :rtype: Currency
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this IPortfolioAccount.


        :param cost_basis: The cost_basis of this IPortfolioAccount.
        :type cost_basis: Currency
        """

        self._cost_basis = cost_basis

    @property
    def description(self):
        """Gets the description of this IPortfolioAccount.


        :return: The description of this IPortfolioAccount.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IPortfolioAccount.


        :param description: The description of this IPortfolioAccount.
        :type description: str
        """

        self._description = description

    @property
    def description_with_owner(self):
        """Gets the description_with_owner of this IPortfolioAccount.


        :return: The description_with_owner of this IPortfolioAccount.
        :rtype: str
        """
        return self._description_with_owner

    @description_with_owner.setter
    def description_with_owner(self, description_with_owner):
        """Sets the description_with_owner of this IPortfolioAccount.


        :param description_with_owner: The description_with_owner of this IPortfolioAccount.
        :type description_with_owner: str
        """

        self._description_with_owner = description_with_owner

    @property
    def exclude_in_aa(self):
        """Gets the exclude_in_aa of this IPortfolioAccount.


        :return: The exclude_in_aa of this IPortfolioAccount.
        :rtype: bool
        """
        return self._exclude_in_aa

    @exclude_in_aa.setter
    def exclude_in_aa(self, exclude_in_aa):
        """Sets the exclude_in_aa of this IPortfolioAccount.


        :param exclude_in_aa: The exclude_in_aa of this IPortfolioAccount.
        :type exclude_in_aa: bool
        """

        self._exclude_in_aa = exclude_in_aa

    @property
    def holdings(self):
        """Gets the holdings of this IPortfolioAccount.


        :return: The holdings of this IPortfolioAccount.
        :rtype: List[IHolding]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this IPortfolioAccount.


        :param holdings: The holdings of this IPortfolioAccount.
        :type holdings: List[IHolding]
        """

        self._holdings = holdings

    @property
    def id(self):
        """Gets the id of this IPortfolioAccount.


        :return: The id of this IPortfolioAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPortfolioAccount.


        :param id: The id of this IPortfolioAccount.
        :type id: str
        """

        self._id = id

    @property
    def is_system_generated(self):
        """Gets the is_system_generated of this IPortfolioAccount.


        :return: The is_system_generated of this IPortfolioAccount.
        :rtype: bool
        """
        return self._is_system_generated

    @is_system_generated.setter
    def is_system_generated(self, is_system_generated):
        """Sets the is_system_generated of this IPortfolioAccount.


        :param is_system_generated: The is_system_generated of this IPortfolioAccount.
        :type is_system_generated: bool
        """

        self._is_system_generated = is_system_generated

    @property
    def market_value(self):
        """Gets the market_value of this IPortfolioAccount.


        :return: The market_value of this IPortfolioAccount.
        :rtype: Currency
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this IPortfolioAccount.


        :param market_value: The market_value of this IPortfolioAccount.
        :type market_value: Currency
        """

        self._market_value = market_value

    @property
    def owner(self):
        """Gets the owner of this IPortfolioAccount.


        :return: The owner of this IPortfolioAccount.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IPortfolioAccount.


        :param owner: The owner of this IPortfolioAccount.
        :type owner: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def portfolio_assets(self):
        """Gets the portfolio_assets of this IPortfolioAccount.


        :return: The portfolio_assets of this IPortfolioAccount.
        :rtype: List[IPortfolioAsset]
        """
        return self._portfolio_assets

    @portfolio_assets.setter
    def portfolio_assets(self, portfolio_assets):
        """Sets the portfolio_assets of this IPortfolioAccount.


        :param portfolio_assets: The portfolio_assets of this IPortfolioAccount.
        :type portfolio_assets: List[IPortfolioAsset]
        """

        self._portfolio_assets = portfolio_assets

    @property
    def rate_of_return(self):
        """Gets the rate_of_return of this IPortfolioAccount.


        :return: The rate_of_return of this IPortfolioAccount.
        :rtype: IRateOfReturnDetails
        """
        return self._rate_of_return

    @rate_of_return.setter
    def rate_of_return(self, rate_of_return):
        """Sets the rate_of_return of this IPortfolioAccount.


        :param rate_of_return: The rate_of_return of this IPortfolioAccount.
        :type rate_of_return: IRateOfReturnDetails
        """

        self._rate_of_return = rate_of_return

    @property
    def savings_strategies(self):
        """Gets the savings_strategies of this IPortfolioAccount.


        :return: The savings_strategies of this IPortfolioAccount.
        :rtype: ISavingsStrategies
        """
        return self._savings_strategies

    @savings_strategies.setter
    def savings_strategies(self, savings_strategies):
        """Sets the savings_strategies of this IPortfolioAccount.


        :param savings_strategies: The savings_strategies of this IPortfolioAccount.
        :type savings_strategies: ISavingsStrategies
        """

        self._savings_strategies = savings_strategies

    @property
    def sepp_redemption_strategy(self):
        """Gets the sepp_redemption_strategy of this IPortfolioAccount.


        :return: The sepp_redemption_strategy of this IPortfolioAccount.
        :rtype: ISEPPRedemptionStrategy
        """
        return self._sepp_redemption_strategy

    @sepp_redemption_strategy.setter
    def sepp_redemption_strategy(self, sepp_redemption_strategy):
        """Sets the sepp_redemption_strategy of this IPortfolioAccount.


        :param sepp_redemption_strategy: The sepp_redemption_strategy of this IPortfolioAccount.
        :type sepp_redemption_strategy: ISEPPRedemptionStrategy
        """

        self._sepp_redemption_strategy = sepp_redemption_strategy

    @property
    def type(self):
        """Gets the type of this IPortfolioAccount.


        :return: The type of this IPortfolioAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IPortfolioAccount.


        :param type: The type of this IPortfolioAccount.
        :type type: str
        """

        self._type = type

    @property
    def valuation_date(self):
        """Gets the valuation_date of this IPortfolioAccount.


        :return: The valuation_date of this IPortfolioAccount.
        :rtype: ModelDate
        """
        return self._valuation_date

    @valuation_date.setter
    def valuation_date(self, valuation_date):
        """Sets the valuation_date of this IPortfolioAccount.


        :param valuation_date: The valuation_date of this IPortfolioAccount.
        :type valuation_date: ModelDate
        """

        self._valuation_date = valuation_date
