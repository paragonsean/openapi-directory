# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.i_net_worth_item import INetWorthItem
from openapi_server import util


class INetWorthCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, itemized: List[INetWorthItem]=None, total: Currency=None):
        """INetWorthCategory - a model defined in OpenAPI

        :param description: The description of this INetWorthCategory.
        :param itemized: The itemized of this INetWorthCategory.
        :param total: The total of this INetWorthCategory.
        """
        self.openapi_types = {
            'description': str,
            'itemized': List[INetWorthItem],
            'total': Currency
        }

        self.attribute_map = {
            'description': 'description',
            'itemized': 'itemized',
            'total': 'total'
        }

        self._description = description
        self._itemized = itemized
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'INetWorthCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The INetWorthCategory of this INetWorthCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this INetWorthCategory.


        :return: The description of this INetWorthCategory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this INetWorthCategory.


        :param description: The description of this INetWorthCategory.
        :type description: str
        """

        self._description = description

    @property
    def itemized(self):
        """Gets the itemized of this INetWorthCategory.


        :return: The itemized of this INetWorthCategory.
        :rtype: List[INetWorthItem]
        """
        return self._itemized

    @itemized.setter
    def itemized(self, itemized):
        """Sets the itemized of this INetWorthCategory.


        :param itemized: The itemized of this INetWorthCategory.
        :type itemized: List[INetWorthItem]
        """

        self._itemized = itemized

    @property
    def total(self):
        """Gets the total of this INetWorthCategory.


        :return: The total of this INetWorthCategory.
        :rtype: Currency
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this INetWorthCategory.


        :param total: The total of this INetWorthCategory.
        :type total: Currency
        """

        self._total = total
