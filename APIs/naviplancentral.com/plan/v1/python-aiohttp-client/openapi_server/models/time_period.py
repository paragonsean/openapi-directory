# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimePeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, duration: str=None):
        """TimePeriod - a model defined in OpenAPI

        :param count: The count of this TimePeriod.
        :param duration: The duration of this TimePeriod.
        """
        self.openapi_types = {
            'count': int,
            'duration': str
        }

        self.attribute_map = {
            'count': 'count',
            'duration': 'duration'
        }

        self._count = count
        self._duration = duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimePeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimePeriod of this TimePeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TimePeriod.


        :return: The count of this TimePeriod.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TimePeriod.


        :param count: The count of this TimePeriod.
        :type count: int
        """

        self._count = count

    @property
    def duration(self):
        """Gets the duration of this TimePeriod.


        :return: The duration of this TimePeriod.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimePeriod.


        :param duration: The duration of this TimePeriod.
        :type duration: str
        """
        allowed_values = ["Days", "Weeks", "Months", "Years", "YearsOfAge"]  # noqa: E501
        if duration not in allowed_values:
            raise ValueError(
                "Invalid value for `duration` ({0}), must be one of {1}"
                .format(duration, allowed_values)
            )

        self._duration = duration
