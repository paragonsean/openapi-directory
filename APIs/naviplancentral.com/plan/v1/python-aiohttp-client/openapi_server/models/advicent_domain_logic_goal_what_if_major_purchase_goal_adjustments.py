# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lump_sum_contribution: float=None, lump_sum_date: datetime=None, monthly_savings_contribution: float=None, target_date: datetime=None, total_need: float=None):
        """AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments - a model defined in OpenAPI

        :param lump_sum_contribution: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :param lump_sum_date: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :param monthly_savings_contribution: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :param target_date: The target_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :param total_need: The total_need of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        """
        self.openapi_types = {
            'lump_sum_contribution': float,
            'lump_sum_date': datetime,
            'monthly_savings_contribution': float,
            'target_date': datetime,
            'total_need': float
        }

        self.attribute_map = {
            'lump_sum_contribution': 'lumpSumContribution',
            'lump_sum_date': 'lumpSumDate',
            'monthly_savings_contribution': 'monthlySavingsContribution',
            'target_date': 'targetDate',
            'total_need': 'totalNeed'
        }

        self._lump_sum_contribution = lump_sum_contribution
        self._lump_sum_date = lump_sum_date
        self._monthly_savings_contribution = monthly_savings_contribution
        self._target_date = target_date
        self._total_need = total_need

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lump_sum_contribution(self):
        """Gets the lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :return: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :rtype: float
        """
        return self._lump_sum_contribution

    @lump_sum_contribution.setter
    def lump_sum_contribution(self, lump_sum_contribution):
        """Sets the lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :param lump_sum_contribution: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :type lump_sum_contribution: float
        """

        self._lump_sum_contribution = lump_sum_contribution

    @property
    def lump_sum_date(self):
        """Gets the lump_sum_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :return: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :rtype: datetime
        """
        return self._lump_sum_date

    @lump_sum_date.setter
    def lump_sum_date(self, lump_sum_date):
        """Sets the lump_sum_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :param lump_sum_date: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :type lump_sum_date: datetime
        """

        self._lump_sum_date = lump_sum_date

    @property
    def monthly_savings_contribution(self):
        """Gets the monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :return: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :rtype: float
        """
        return self._monthly_savings_contribution

    @monthly_savings_contribution.setter
    def monthly_savings_contribution(self, monthly_savings_contribution):
        """Sets the monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :param monthly_savings_contribution: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :type monthly_savings_contribution: float
        """

        self._monthly_savings_contribution = monthly_savings_contribution

    @property
    def target_date(self):
        """Gets the target_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :return: The target_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :rtype: datetime
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :param target_date: The target_date of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :type target_date: datetime
        """

        self._target_date = target_date

    @property
    def total_need(self):
        """Gets the total_need of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :return: The total_need of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :rtype: float
        """
        return self._total_need

    @total_need.setter
    def total_need(self, total_need):
        """Sets the total_need of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.


        :param total_need: The total_need of this AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.
        :type total_need: float
        """

        self._total_need = total_need
