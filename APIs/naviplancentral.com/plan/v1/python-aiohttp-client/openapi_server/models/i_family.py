# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_address import IAddress
from openapi_server.models.i_dependent import IDependent
from openapi_server.models.i_family_member import IFamilyMember
from openapi_server import util


class IFamily(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: IAddress=None, client: IFamilyMember=None, co_client: IFamilyMember=None, dependents: List[IDependent]=None, head_full_names: str=None):
        """IFamily - a model defined in OpenAPI

        :param address: The address of this IFamily.
        :param client: The client of this IFamily.
        :param co_client: The co_client of this IFamily.
        :param dependents: The dependents of this IFamily.
        :param head_full_names: The head_full_names of this IFamily.
        """
        self.openapi_types = {
            'address': IAddress,
            'client': IFamilyMember,
            'co_client': IFamilyMember,
            'dependents': List[IDependent],
            'head_full_names': str
        }

        self.attribute_map = {
            'address': 'address',
            'client': 'client',
            'co_client': 'coClient',
            'dependents': 'dependents',
            'head_full_names': 'headFullNames'
        }

        self._address = address
        self._client = client
        self._co_client = co_client
        self._dependents = dependents
        self._head_full_names = head_full_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IFamily':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IFamily of this IFamily.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IFamily.


        :return: The address of this IFamily.
        :rtype: IAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IFamily.


        :param address: The address of this IFamily.
        :type address: IAddress
        """

        self._address = address

    @property
    def client(self):
        """Gets the client of this IFamily.


        :return: The client of this IFamily.
        :rtype: IFamilyMember
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this IFamily.


        :param client: The client of this IFamily.
        :type client: IFamilyMember
        """

        self._client = client

    @property
    def co_client(self):
        """Gets the co_client of this IFamily.


        :return: The co_client of this IFamily.
        :rtype: IFamilyMember
        """
        return self._co_client

    @co_client.setter
    def co_client(self, co_client):
        """Sets the co_client of this IFamily.


        :param co_client: The co_client of this IFamily.
        :type co_client: IFamilyMember
        """

        self._co_client = co_client

    @property
    def dependents(self):
        """Gets the dependents of this IFamily.


        :return: The dependents of this IFamily.
        :rtype: List[IDependent]
        """
        return self._dependents

    @dependents.setter
    def dependents(self, dependents):
        """Sets the dependents of this IFamily.


        :param dependents: The dependents of this IFamily.
        :type dependents: List[IDependent]
        """

        self._dependents = dependents

    @property
    def head_full_names(self):
        """Gets the head_full_names of this IFamily.


        :return: The head_full_names of this IFamily.
        :rtype: str
        """
        return self._head_full_names

    @head_full_names.setter
    def head_full_names(self, head_full_names):
        """Sets the head_full_names of this IFamily.


        :param head_full_names: The head_full_names of this IFamily.
        :type head_full_names: str
        """

        self._head_full_names = head_full_names
