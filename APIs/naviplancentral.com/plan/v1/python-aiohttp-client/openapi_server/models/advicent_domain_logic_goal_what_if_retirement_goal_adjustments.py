# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_retirement_age: float=None, co_client_retirement_age: float=None, discretionary_expense_coverage: float=None, fixed_expense_coverage: float=None, lump_sum_contribution: float=None, lump_sum_date: datetime=None, monthly_savings_contribution: float=None):
        """AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments - a model defined in OpenAPI

        :param client_retirement_age: The client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param co_client_retirement_age: The co_client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param discretionary_expense_coverage: The discretionary_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param fixed_expense_coverage: The fixed_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param lump_sum_contribution: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param lump_sum_date: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :param monthly_savings_contribution: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        """
        self.openapi_types = {
            'client_retirement_age': float,
            'co_client_retirement_age': float,
            'discretionary_expense_coverage': float,
            'fixed_expense_coverage': float,
            'lump_sum_contribution': float,
            'lump_sum_date': datetime,
            'monthly_savings_contribution': float
        }

        self.attribute_map = {
            'client_retirement_age': 'clientRetirementAge',
            'co_client_retirement_age': 'coClientRetirementAge',
            'discretionary_expense_coverage': 'discretionaryExpenseCoverage',
            'fixed_expense_coverage': 'fixedExpenseCoverage',
            'lump_sum_contribution': 'lumpSumContribution',
            'lump_sum_date': 'lumpSumDate',
            'monthly_savings_contribution': 'monthlySavingsContribution'
        }

        self._client_retirement_age = client_retirement_age
        self._co_client_retirement_age = co_client_retirement_age
        self._discretionary_expense_coverage = discretionary_expense_coverage
        self._fixed_expense_coverage = fixed_expense_coverage
        self._lump_sum_contribution = lump_sum_contribution
        self._lump_sum_date = lump_sum_date
        self._monthly_savings_contribution = monthly_savings_contribution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_retirement_age(self):
        """Gets the client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._client_retirement_age

    @client_retirement_age.setter
    def client_retirement_age(self, client_retirement_age):
        """Sets the client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param client_retirement_age: The client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type client_retirement_age: float
        """

        self._client_retirement_age = client_retirement_age

    @property
    def co_client_retirement_age(self):
        """Gets the co_client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The co_client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._co_client_retirement_age

    @co_client_retirement_age.setter
    def co_client_retirement_age(self, co_client_retirement_age):
        """Sets the co_client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param co_client_retirement_age: The co_client_retirement_age of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type co_client_retirement_age: float
        """

        self._co_client_retirement_age = co_client_retirement_age

    @property
    def discretionary_expense_coverage(self):
        """Gets the discretionary_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The discretionary_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._discretionary_expense_coverage

    @discretionary_expense_coverage.setter
    def discretionary_expense_coverage(self, discretionary_expense_coverage):
        """Sets the discretionary_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param discretionary_expense_coverage: The discretionary_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type discretionary_expense_coverage: float
        """

        self._discretionary_expense_coverage = discretionary_expense_coverage

    @property
    def fixed_expense_coverage(self):
        """Gets the fixed_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The fixed_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._fixed_expense_coverage

    @fixed_expense_coverage.setter
    def fixed_expense_coverage(self, fixed_expense_coverage):
        """Sets the fixed_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param fixed_expense_coverage: The fixed_expense_coverage of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type fixed_expense_coverage: float
        """

        self._fixed_expense_coverage = fixed_expense_coverage

    @property
    def lump_sum_contribution(self):
        """Gets the lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._lump_sum_contribution

    @lump_sum_contribution.setter
    def lump_sum_contribution(self, lump_sum_contribution):
        """Sets the lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param lump_sum_contribution: The lump_sum_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type lump_sum_contribution: float
        """

        self._lump_sum_contribution = lump_sum_contribution

    @property
    def lump_sum_date(self):
        """Gets the lump_sum_date of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: datetime
        """
        return self._lump_sum_date

    @lump_sum_date.setter
    def lump_sum_date(self, lump_sum_date):
        """Sets the lump_sum_date of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param lump_sum_date: The lump_sum_date of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type lump_sum_date: datetime
        """

        self._lump_sum_date = lump_sum_date

    @property
    def monthly_savings_contribution(self):
        """Gets the monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :return: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :rtype: float
        """
        return self._monthly_savings_contribution

    @monthly_savings_contribution.setter
    def monthly_savings_contribution(self, monthly_savings_contribution):
        """Sets the monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.


        :param monthly_savings_contribution: The monthly_savings_contribution of this AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.
        :type monthly_savings_contribution: float
        """

        self._monthly_savings_contribution = monthly_savings_contribution
