# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advicent_navi_plan_rest_api_goal_adjustments_calc_projection import AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection
from openapi_server import util


class AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, goal_id: int=None, percent_covered: float=None, projections: List[AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection]=None):
        """AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections - a model defined in OpenAPI

        :param goal_id: The goal_id of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :param percent_covered: The percent_covered of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :param projections: The projections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        """
        self.openapi_types = {
            'goal_id': int,
            'percent_covered': float,
            'projections': List[AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection]
        }

        self.attribute_map = {
            'goal_id': 'goalId',
            'percent_covered': 'percentCovered',
            'projections': 'projections'
        }

        self._goal_id = goal_id
        self._percent_covered = percent_covered
        self._projections = projections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def goal_id(self):
        """Gets the goal_id of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :return: The goal_id of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :rtype: int
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :param goal_id: The goal_id of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :type goal_id: int
        """

        self._goal_id = goal_id

    @property
    def percent_covered(self):
        """Gets the percent_covered of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :return: The percent_covered of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :rtype: float
        """
        return self._percent_covered

    @percent_covered.setter
    def percent_covered(self, percent_covered):
        """Sets the percent_covered of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :param percent_covered: The percent_covered of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :type percent_covered: float
        """

        self._percent_covered = percent_covered

    @property
    def projections(self):
        """Gets the projections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :return: The projections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :rtype: List[AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection]
        """
        return self._projections

    @projections.setter
    def projections(self, projections):
        """Sets the projections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.


        :param projections: The projections of this AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.
        :type projections: List[AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection]
        """

        self._projections = projections
