# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.formatted_date_range import FormattedDateRange
from openapi_server.models.model_date import ModelDate
from openapi_server.models.percent import Percent
from openapi_server import util


class IRestrictedStock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_dividend_per_unit: Currency=None, applicable_range_retirement_liquidated_assets: FormattedDateRange=None, awarded_date: ModelDate=None, current_unit_value: Currency=None, description: str=None, growth_rate: Percent=None, id: str=None, number_of_units: int=None, owner: str=None, price_paid_for_award: Currency=None, type: str=None):
        """IRestrictedStock - a model defined in OpenAPI

        :param annual_dividend_per_unit: The annual_dividend_per_unit of this IRestrictedStock.
        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IRestrictedStock.
        :param awarded_date: The awarded_date of this IRestrictedStock.
        :param current_unit_value: The current_unit_value of this IRestrictedStock.
        :param description: The description of this IRestrictedStock.
        :param growth_rate: The growth_rate of this IRestrictedStock.
        :param id: The id of this IRestrictedStock.
        :param number_of_units: The number_of_units of this IRestrictedStock.
        :param owner: The owner of this IRestrictedStock.
        :param price_paid_for_award: The price_paid_for_award of this IRestrictedStock.
        :param type: The type of this IRestrictedStock.
        """
        self.openapi_types = {
            'annual_dividend_per_unit': Currency,
            'applicable_range_retirement_liquidated_assets': FormattedDateRange,
            'awarded_date': ModelDate,
            'current_unit_value': Currency,
            'description': str,
            'growth_rate': Percent,
            'id': str,
            'number_of_units': int,
            'owner': str,
            'price_paid_for_award': Currency,
            'type': str
        }

        self.attribute_map = {
            'annual_dividend_per_unit': 'annualDividendPerUnit',
            'applicable_range_retirement_liquidated_assets': 'applicableRangeRetirementLiquidatedAssets',
            'awarded_date': 'awardedDate',
            'current_unit_value': 'currentUnitValue',
            'description': 'description',
            'growth_rate': 'growthRate',
            'id': 'id',
            'number_of_units': 'numberOfUnits',
            'owner': 'owner',
            'price_paid_for_award': 'pricePaidForAward',
            'type': 'type'
        }

        self._annual_dividend_per_unit = annual_dividend_per_unit
        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets
        self._awarded_date = awarded_date
        self._current_unit_value = current_unit_value
        self._description = description
        self._growth_rate = growth_rate
        self._id = id
        self._number_of_units = number_of_units
        self._owner = owner
        self._price_paid_for_award = price_paid_for_award
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IRestrictedStock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IRestrictedStock of this IRestrictedStock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_dividend_per_unit(self):
        """Gets the annual_dividend_per_unit of this IRestrictedStock.


        :return: The annual_dividend_per_unit of this IRestrictedStock.
        :rtype: Currency
        """
        return self._annual_dividend_per_unit

    @annual_dividend_per_unit.setter
    def annual_dividend_per_unit(self, annual_dividend_per_unit):
        """Sets the annual_dividend_per_unit of this IRestrictedStock.


        :param annual_dividend_per_unit: The annual_dividend_per_unit of this IRestrictedStock.
        :type annual_dividend_per_unit: Currency
        """

        self._annual_dividend_per_unit = annual_dividend_per_unit

    @property
    def applicable_range_retirement_liquidated_assets(self):
        """Gets the applicable_range_retirement_liquidated_assets of this IRestrictedStock.


        :return: The applicable_range_retirement_liquidated_assets of this IRestrictedStock.
        :rtype: FormattedDateRange
        """
        return self._applicable_range_retirement_liquidated_assets

    @applicable_range_retirement_liquidated_assets.setter
    def applicable_range_retirement_liquidated_assets(self, applicable_range_retirement_liquidated_assets):
        """Sets the applicable_range_retirement_liquidated_assets of this IRestrictedStock.


        :param applicable_range_retirement_liquidated_assets: The applicable_range_retirement_liquidated_assets of this IRestrictedStock.
        :type applicable_range_retirement_liquidated_assets: FormattedDateRange
        """

        self._applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets

    @property
    def awarded_date(self):
        """Gets the awarded_date of this IRestrictedStock.


        :return: The awarded_date of this IRestrictedStock.
        :rtype: ModelDate
        """
        return self._awarded_date

    @awarded_date.setter
    def awarded_date(self, awarded_date):
        """Sets the awarded_date of this IRestrictedStock.


        :param awarded_date: The awarded_date of this IRestrictedStock.
        :type awarded_date: ModelDate
        """

        self._awarded_date = awarded_date

    @property
    def current_unit_value(self):
        """Gets the current_unit_value of this IRestrictedStock.


        :return: The current_unit_value of this IRestrictedStock.
        :rtype: Currency
        """
        return self._current_unit_value

    @current_unit_value.setter
    def current_unit_value(self, current_unit_value):
        """Sets the current_unit_value of this IRestrictedStock.


        :param current_unit_value: The current_unit_value of this IRestrictedStock.
        :type current_unit_value: Currency
        """

        self._current_unit_value = current_unit_value

    @property
    def description(self):
        """Gets the description of this IRestrictedStock.


        :return: The description of this IRestrictedStock.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IRestrictedStock.


        :param description: The description of this IRestrictedStock.
        :type description: str
        """

        self._description = description

    @property
    def growth_rate(self):
        """Gets the growth_rate of this IRestrictedStock.


        :return: The growth_rate of this IRestrictedStock.
        :rtype: Percent
        """
        return self._growth_rate

    @growth_rate.setter
    def growth_rate(self, growth_rate):
        """Sets the growth_rate of this IRestrictedStock.


        :param growth_rate: The growth_rate of this IRestrictedStock.
        :type growth_rate: Percent
        """

        self._growth_rate = growth_rate

    @property
    def id(self):
        """Gets the id of this IRestrictedStock.


        :return: The id of this IRestrictedStock.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IRestrictedStock.


        :param id: The id of this IRestrictedStock.
        :type id: str
        """

        self._id = id

    @property
    def number_of_units(self):
        """Gets the number_of_units of this IRestrictedStock.


        :return: The number_of_units of this IRestrictedStock.
        :rtype: int
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this IRestrictedStock.


        :param number_of_units: The number_of_units of this IRestrictedStock.
        :type number_of_units: int
        """

        self._number_of_units = number_of_units

    @property
    def owner(self):
        """Gets the owner of this IRestrictedStock.


        :return: The owner of this IRestrictedStock.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IRestrictedStock.


        :param owner: The owner of this IRestrictedStock.
        :type owner: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def price_paid_for_award(self):
        """Gets the price_paid_for_award of this IRestrictedStock.


        :return: The price_paid_for_award of this IRestrictedStock.
        :rtype: Currency
        """
        return self._price_paid_for_award

    @price_paid_for_award.setter
    def price_paid_for_award(self, price_paid_for_award):
        """Sets the price_paid_for_award of this IRestrictedStock.


        :param price_paid_for_award: The price_paid_for_award of this IRestrictedStock.
        :type price_paid_for_award: Currency
        """

        self._price_paid_for_award = price_paid_for_award

    @property
    def type(self):
        """Gets the type of this IRestrictedStock.


        :return: The type of this IRestrictedStock.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IRestrictedStock.


        :param type: The type of this IRestrictedStock.
        :type type: str
        """

        self._type = type
