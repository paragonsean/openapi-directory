# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formatted_marital_or_tax_filing_status import FormattedMaritalOrTaxFilingStatus
from openapi_server.models.i_government_pensions import IGovernmentPensions
from openapi_server.models.i_income_taxes import IIncomeTaxes
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class IHeadAssumptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, already_retired: bool=None, deceased_age: int=None, deceased_date: ModelDate=None, estate_income_taxes: IIncomeTaxes=None, government_pensions: IGovernmentPensions=None, marital_or_tax_filing_status: FormattedMaritalOrTaxFilingStatus=None, pre_retirement_income_taxes: IIncomeTaxes=None, retirement_age: int=None, retirement_date: ModelDate=None, retirement_income_taxes: IIncomeTaxes=None):
        """IHeadAssumptions - a model defined in OpenAPI

        :param already_retired: The already_retired of this IHeadAssumptions.
        :param deceased_age: The deceased_age of this IHeadAssumptions.
        :param deceased_date: The deceased_date of this IHeadAssumptions.
        :param estate_income_taxes: The estate_income_taxes of this IHeadAssumptions.
        :param government_pensions: The government_pensions of this IHeadAssumptions.
        :param marital_or_tax_filing_status: The marital_or_tax_filing_status of this IHeadAssumptions.
        :param pre_retirement_income_taxes: The pre_retirement_income_taxes of this IHeadAssumptions.
        :param retirement_age: The retirement_age of this IHeadAssumptions.
        :param retirement_date: The retirement_date of this IHeadAssumptions.
        :param retirement_income_taxes: The retirement_income_taxes of this IHeadAssumptions.
        """
        self.openapi_types = {
            'already_retired': bool,
            'deceased_age': int,
            'deceased_date': ModelDate,
            'estate_income_taxes': IIncomeTaxes,
            'government_pensions': IGovernmentPensions,
            'marital_or_tax_filing_status': FormattedMaritalOrTaxFilingStatus,
            'pre_retirement_income_taxes': IIncomeTaxes,
            'retirement_age': int,
            'retirement_date': ModelDate,
            'retirement_income_taxes': IIncomeTaxes
        }

        self.attribute_map = {
            'already_retired': 'alreadyRetired',
            'deceased_age': 'deceasedAge',
            'deceased_date': 'deceasedDate',
            'estate_income_taxes': 'estateIncomeTaxes',
            'government_pensions': 'governmentPensions',
            'marital_or_tax_filing_status': 'maritalOrTaxFilingStatus',
            'pre_retirement_income_taxes': 'preRetirementIncomeTaxes',
            'retirement_age': 'retirementAge',
            'retirement_date': 'retirementDate',
            'retirement_income_taxes': 'retirementIncomeTaxes'
        }

        self._already_retired = already_retired
        self._deceased_age = deceased_age
        self._deceased_date = deceased_date
        self._estate_income_taxes = estate_income_taxes
        self._government_pensions = government_pensions
        self._marital_or_tax_filing_status = marital_or_tax_filing_status
        self._pre_retirement_income_taxes = pre_retirement_income_taxes
        self._retirement_age = retirement_age
        self._retirement_date = retirement_date
        self._retirement_income_taxes = retirement_income_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IHeadAssumptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IHeadAssumptions of this IHeadAssumptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def already_retired(self):
        """Gets the already_retired of this IHeadAssumptions.


        :return: The already_retired of this IHeadAssumptions.
        :rtype: bool
        """
        return self._already_retired

    @already_retired.setter
    def already_retired(self, already_retired):
        """Sets the already_retired of this IHeadAssumptions.


        :param already_retired: The already_retired of this IHeadAssumptions.
        :type already_retired: bool
        """

        self._already_retired = already_retired

    @property
    def deceased_age(self):
        """Gets the deceased_age of this IHeadAssumptions.


        :return: The deceased_age of this IHeadAssumptions.
        :rtype: int
        """
        return self._deceased_age

    @deceased_age.setter
    def deceased_age(self, deceased_age):
        """Sets the deceased_age of this IHeadAssumptions.


        :param deceased_age: The deceased_age of this IHeadAssumptions.
        :type deceased_age: int
        """

        self._deceased_age = deceased_age

    @property
    def deceased_date(self):
        """Gets the deceased_date of this IHeadAssumptions.


        :return: The deceased_date of this IHeadAssumptions.
        :rtype: ModelDate
        """
        return self._deceased_date

    @deceased_date.setter
    def deceased_date(self, deceased_date):
        """Sets the deceased_date of this IHeadAssumptions.


        :param deceased_date: The deceased_date of this IHeadAssumptions.
        :type deceased_date: ModelDate
        """

        self._deceased_date = deceased_date

    @property
    def estate_income_taxes(self):
        """Gets the estate_income_taxes of this IHeadAssumptions.


        :return: The estate_income_taxes of this IHeadAssumptions.
        :rtype: IIncomeTaxes
        """
        return self._estate_income_taxes

    @estate_income_taxes.setter
    def estate_income_taxes(self, estate_income_taxes):
        """Sets the estate_income_taxes of this IHeadAssumptions.


        :param estate_income_taxes: The estate_income_taxes of this IHeadAssumptions.
        :type estate_income_taxes: IIncomeTaxes
        """

        self._estate_income_taxes = estate_income_taxes

    @property
    def government_pensions(self):
        """Gets the government_pensions of this IHeadAssumptions.


        :return: The government_pensions of this IHeadAssumptions.
        :rtype: IGovernmentPensions
        """
        return self._government_pensions

    @government_pensions.setter
    def government_pensions(self, government_pensions):
        """Sets the government_pensions of this IHeadAssumptions.


        :param government_pensions: The government_pensions of this IHeadAssumptions.
        :type government_pensions: IGovernmentPensions
        """

        self._government_pensions = government_pensions

    @property
    def marital_or_tax_filing_status(self):
        """Gets the marital_or_tax_filing_status of this IHeadAssumptions.


        :return: The marital_or_tax_filing_status of this IHeadAssumptions.
        :rtype: FormattedMaritalOrTaxFilingStatus
        """
        return self._marital_or_tax_filing_status

    @marital_or_tax_filing_status.setter
    def marital_or_tax_filing_status(self, marital_or_tax_filing_status):
        """Sets the marital_or_tax_filing_status of this IHeadAssumptions.


        :param marital_or_tax_filing_status: The marital_or_tax_filing_status of this IHeadAssumptions.
        :type marital_or_tax_filing_status: FormattedMaritalOrTaxFilingStatus
        """

        self._marital_or_tax_filing_status = marital_or_tax_filing_status

    @property
    def pre_retirement_income_taxes(self):
        """Gets the pre_retirement_income_taxes of this IHeadAssumptions.


        :return: The pre_retirement_income_taxes of this IHeadAssumptions.
        :rtype: IIncomeTaxes
        """
        return self._pre_retirement_income_taxes

    @pre_retirement_income_taxes.setter
    def pre_retirement_income_taxes(self, pre_retirement_income_taxes):
        """Sets the pre_retirement_income_taxes of this IHeadAssumptions.


        :param pre_retirement_income_taxes: The pre_retirement_income_taxes of this IHeadAssumptions.
        :type pre_retirement_income_taxes: IIncomeTaxes
        """

        self._pre_retirement_income_taxes = pre_retirement_income_taxes

    @property
    def retirement_age(self):
        """Gets the retirement_age of this IHeadAssumptions.


        :return: The retirement_age of this IHeadAssumptions.
        :rtype: int
        """
        return self._retirement_age

    @retirement_age.setter
    def retirement_age(self, retirement_age):
        """Sets the retirement_age of this IHeadAssumptions.


        :param retirement_age: The retirement_age of this IHeadAssumptions.
        :type retirement_age: int
        """

        self._retirement_age = retirement_age

    @property
    def retirement_date(self):
        """Gets the retirement_date of this IHeadAssumptions.


        :return: The retirement_date of this IHeadAssumptions.
        :rtype: ModelDate
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this IHeadAssumptions.


        :param retirement_date: The retirement_date of this IHeadAssumptions.
        :type retirement_date: ModelDate
        """

        self._retirement_date = retirement_date

    @property
    def retirement_income_taxes(self):
        """Gets the retirement_income_taxes of this IHeadAssumptions.


        :return: The retirement_income_taxes of this IHeadAssumptions.
        :rtype: IIncomeTaxes
        """
        return self._retirement_income_taxes

    @retirement_income_taxes.setter
    def retirement_income_taxes(self, retirement_income_taxes):
        """Sets the retirement_income_taxes of this IHeadAssumptions.


        :param retirement_income_taxes: The retirement_income_taxes of this IHeadAssumptions.
        :type retirement_income_taxes: IIncomeTaxes
        """

        self._retirement_income_taxes = retirement_income_taxes
