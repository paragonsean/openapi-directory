# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class PlanStatusesModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_integrated_accounts: str=None, links: List[ObjectLink]=None, plan_data_status: str=None, serialized_data_status: str=None):
        """PlanStatusesModel - a model defined in OpenAPI

        :param has_integrated_accounts: The has_integrated_accounts of this PlanStatusesModel.
        :param links: The links of this PlanStatusesModel.
        :param plan_data_status: The plan_data_status of this PlanStatusesModel.
        :param serialized_data_status: The serialized_data_status of this PlanStatusesModel.
        """
        self.openapi_types = {
            'has_integrated_accounts': str,
            'links': List[ObjectLink],
            'plan_data_status': str,
            'serialized_data_status': str
        }

        self.attribute_map = {
            'has_integrated_accounts': 'hasIntegratedAccounts',
            'links': 'links',
            'plan_data_status': 'planDataStatus',
            'serialized_data_status': 'serializedDataStatus'
        }

        self._has_integrated_accounts = has_integrated_accounts
        self._links = links
        self._plan_data_status = plan_data_status
        self._serialized_data_status = serialized_data_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanStatusesModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanStatusesModel of this PlanStatusesModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_integrated_accounts(self):
        """Gets the has_integrated_accounts of this PlanStatusesModel.


        :return: The has_integrated_accounts of this PlanStatusesModel.
        :rtype: str
        """
        return self._has_integrated_accounts

    @has_integrated_accounts.setter
    def has_integrated_accounts(self, has_integrated_accounts):
        """Sets the has_integrated_accounts of this PlanStatusesModel.


        :param has_integrated_accounts: The has_integrated_accounts of this PlanStatusesModel.
        :type has_integrated_accounts: str
        """
        allowed_values = ["Unknown"]  # noqa: E501
        if has_integrated_accounts not in allowed_values:
            raise ValueError(
                "Invalid value for `has_integrated_accounts` ({0}), must be one of {1}"
                .format(has_integrated_accounts, allowed_values)
            )

        self._has_integrated_accounts = has_integrated_accounts

    @property
    def links(self):
        """Gets the links of this PlanStatusesModel.


        :return: The links of this PlanStatusesModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PlanStatusesModel.


        :param links: The links of this PlanStatusesModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def plan_data_status(self):
        """Gets the plan_data_status of this PlanStatusesModel.


        :return: The plan_data_status of this PlanStatusesModel.
        :rtype: str
        """
        return self._plan_data_status

    @plan_data_status.setter
    def plan_data_status(self, plan_data_status):
        """Sets the plan_data_status of this PlanStatusesModel.


        :param plan_data_status: The plan_data_status of this PlanStatusesModel.
        :type plan_data_status: str
        """
        allowed_values = ["UpdateNotRequired", "UpdateRequired", "UpdateInProgress", "UpdateFailed", "NoSuchPlan"]  # noqa: E501
        if plan_data_status not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_data_status` ({0}), must be one of {1}"
                .format(plan_data_status, allowed_values)
            )

        self._plan_data_status = plan_data_status

    @property
    def serialized_data_status(self):
        """Gets the serialized_data_status of this PlanStatusesModel.


        :return: The serialized_data_status of this PlanStatusesModel.
        :rtype: str
        """
        return self._serialized_data_status

    @serialized_data_status.setter
    def serialized_data_status(self, serialized_data_status):
        """Sets the serialized_data_status of this PlanStatusesModel.


        :param serialized_data_status: The serialized_data_status of this PlanStatusesModel.
        :type serialized_data_status: str
        """
        allowed_values = ["UpdateNotRequired", "UpdateRequired", "UpdateInProgress", "UpdateFailed", "NoSuchPlan"]  # noqa: E501
        if serialized_data_status not in allowed_values:
            raise ValueError(
                "Invalid value for `serialized_data_status` ({0}), must be one of {1}"
                .format(serialized_data_status, allowed_values)
            )

        self._serialized_data_status = serialized_data_status
