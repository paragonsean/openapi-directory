# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, combined_city_state_province: str=None, country: str=None, state_or_province: str=None, state_or_province_abbrev: str=None, street1: str=None, street2: str=None, zip_or_postal_code: str=None):
        """IAddress - a model defined in OpenAPI

        :param city: The city of this IAddress.
        :param combined_city_state_province: The combined_city_state_province of this IAddress.
        :param country: The country of this IAddress.
        :param state_or_province: The state_or_province of this IAddress.
        :param state_or_province_abbrev: The state_or_province_abbrev of this IAddress.
        :param street1: The street1 of this IAddress.
        :param street2: The street2 of this IAddress.
        :param zip_or_postal_code: The zip_or_postal_code of this IAddress.
        """
        self.openapi_types = {
            'city': str,
            'combined_city_state_province': str,
            'country': str,
            'state_or_province': str,
            'state_or_province_abbrev': str,
            'street1': str,
            'street2': str,
            'zip_or_postal_code': str
        }

        self.attribute_map = {
            'city': 'city',
            'combined_city_state_province': 'combinedCityStateProvince',
            'country': 'country',
            'state_or_province': 'stateOrProvince',
            'state_or_province_abbrev': 'stateOrProvinceAbbrev',
            'street1': 'street1',
            'street2': 'street2',
            'zip_or_postal_code': 'zipOrPostalCode'
        }

        self._city = city
        self._combined_city_state_province = combined_city_state_province
        self._country = country
        self._state_or_province = state_or_province
        self._state_or_province_abbrev = state_or_province_abbrev
        self._street1 = street1
        self._street2 = street2
        self._zip_or_postal_code = zip_or_postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAddress of this IAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this IAddress.


        :return: The city of this IAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IAddress.


        :param city: The city of this IAddress.
        :type city: str
        """

        self._city = city

    @property
    def combined_city_state_province(self):
        """Gets the combined_city_state_province of this IAddress.


        :return: The combined_city_state_province of this IAddress.
        :rtype: str
        """
        return self._combined_city_state_province

    @combined_city_state_province.setter
    def combined_city_state_province(self, combined_city_state_province):
        """Sets the combined_city_state_province of this IAddress.


        :param combined_city_state_province: The combined_city_state_province of this IAddress.
        :type combined_city_state_province: str
        """

        self._combined_city_state_province = combined_city_state_province

    @property
    def country(self):
        """Gets the country of this IAddress.


        :return: The country of this IAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IAddress.


        :param country: The country of this IAddress.
        :type country: str
        """

        self._country = country

    @property
    def state_or_province(self):
        """Gets the state_or_province of this IAddress.


        :return: The state_or_province of this IAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this IAddress.


        :param state_or_province: The state_or_province of this IAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def state_or_province_abbrev(self):
        """Gets the state_or_province_abbrev of this IAddress.


        :return: The state_or_province_abbrev of this IAddress.
        :rtype: str
        """
        return self._state_or_province_abbrev

    @state_or_province_abbrev.setter
    def state_or_province_abbrev(self, state_or_province_abbrev):
        """Sets the state_or_province_abbrev of this IAddress.


        :param state_or_province_abbrev: The state_or_province_abbrev of this IAddress.
        :type state_or_province_abbrev: str
        """

        self._state_or_province_abbrev = state_or_province_abbrev

    @property
    def street1(self):
        """Gets the street1 of this IAddress.


        :return: The street1 of this IAddress.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this IAddress.


        :param street1: The street1 of this IAddress.
        :type street1: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this IAddress.


        :return: The street2 of this IAddress.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this IAddress.


        :param street2: The street2 of this IAddress.
        :type street2: str
        """

        self._street2 = street2

    @property
    def zip_or_postal_code(self):
        """Gets the zip_or_postal_code of this IAddress.


        :return: The zip_or_postal_code of this IAddress.
        :rtype: str
        """
        return self._zip_or_postal_code

    @zip_or_postal_code.setter
    def zip_or_postal_code(self, zip_or_postal_code):
        """Sets the zip_or_postal_code of this IAddress.


        :param zip_or_postal_code: The zip_or_postal_code of this IAddress.
        :type zip_or_postal_code: str
        """

        self._zip_or_postal_code = zip_or_postal_code
