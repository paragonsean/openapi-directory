# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_of_year_retirement_assets: float=None, end_of_year_total_assets: float=None, year: int=None):
        """AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel - a model defined in OpenAPI

        :param end_of_year_retirement_assets: The end_of_year_retirement_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :param end_of_year_total_assets: The end_of_year_total_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :param year: The year of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        """
        self.openapi_types = {
            'end_of_year_retirement_assets': float,
            'end_of_year_total_assets': float,
            'year': int
        }

        self.attribute_map = {
            'end_of_year_retirement_assets': 'endOfYearRetirementAssets',
            'end_of_year_total_assets': 'endOfYearTotalAssets',
            'year': 'year'
        }

        self._end_of_year_retirement_assets = end_of_year_retirement_assets
        self._end_of_year_total_assets = end_of_year_total_assets
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_of_year_retirement_assets(self):
        """Gets the end_of_year_retirement_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :return: The end_of_year_retirement_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :rtype: float
        """
        return self._end_of_year_retirement_assets

    @end_of_year_retirement_assets.setter
    def end_of_year_retirement_assets(self, end_of_year_retirement_assets):
        """Sets the end_of_year_retirement_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :param end_of_year_retirement_assets: The end_of_year_retirement_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :type end_of_year_retirement_assets: float
        """

        self._end_of_year_retirement_assets = end_of_year_retirement_assets

    @property
    def end_of_year_total_assets(self):
        """Gets the end_of_year_total_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :return: The end_of_year_total_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :rtype: float
        """
        return self._end_of_year_total_assets

    @end_of_year_total_assets.setter
    def end_of_year_total_assets(self, end_of_year_total_assets):
        """Sets the end_of_year_total_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :param end_of_year_total_assets: The end_of_year_total_assets of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :type end_of_year_total_assets: float
        """

        self._end_of_year_total_assets = end_of_year_total_assets

    @property
    def year(self):
        """Gets the year of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :return: The year of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.


        :param year: The year of this AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.
        :type year: int
        """

        self._year = year
