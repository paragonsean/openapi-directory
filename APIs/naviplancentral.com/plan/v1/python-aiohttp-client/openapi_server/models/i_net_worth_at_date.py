# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.i_assets import IAssets
from openapi_server.models.i_liabilities import ILiabilities
from openapi_server.models.i_retirement_assets import IRetirementAssets
from openapi_server import util


class INetWorthAtDate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: IAssets=None, assets_funding_retirement: IRetirementAssets=None, client_net_worth: Currency=None, co_client_net_worth: Currency=None, community_property_net_worth: Currency=None, joint_net_worth: Currency=None, liabilities: ILiabilities=None, total_net_worth: Currency=None):
        """INetWorthAtDate - a model defined in OpenAPI

        :param assets: The assets of this INetWorthAtDate.
        :param assets_funding_retirement: The assets_funding_retirement of this INetWorthAtDate.
        :param client_net_worth: The client_net_worth of this INetWorthAtDate.
        :param co_client_net_worth: The co_client_net_worth of this INetWorthAtDate.
        :param community_property_net_worth: The community_property_net_worth of this INetWorthAtDate.
        :param joint_net_worth: The joint_net_worth of this INetWorthAtDate.
        :param liabilities: The liabilities of this INetWorthAtDate.
        :param total_net_worth: The total_net_worth of this INetWorthAtDate.
        """
        self.openapi_types = {
            'assets': IAssets,
            'assets_funding_retirement': IRetirementAssets,
            'client_net_worth': Currency,
            'co_client_net_worth': Currency,
            'community_property_net_worth': Currency,
            'joint_net_worth': Currency,
            'liabilities': ILiabilities,
            'total_net_worth': Currency
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_funding_retirement': 'assetsFundingRetirement',
            'client_net_worth': 'clientNetWorth',
            'co_client_net_worth': 'coClientNetWorth',
            'community_property_net_worth': 'communityPropertyNetWorth',
            'joint_net_worth': 'jointNetWorth',
            'liabilities': 'liabilities',
            'total_net_worth': 'totalNetWorth'
        }

        self._assets = assets
        self._assets_funding_retirement = assets_funding_retirement
        self._client_net_worth = client_net_worth
        self._co_client_net_worth = co_client_net_worth
        self._community_property_net_worth = community_property_net_worth
        self._joint_net_worth = joint_net_worth
        self._liabilities = liabilities
        self._total_net_worth = total_net_worth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'INetWorthAtDate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The INetWorthAtDate of this INetWorthAtDate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this INetWorthAtDate.


        :return: The assets of this INetWorthAtDate.
        :rtype: IAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this INetWorthAtDate.


        :param assets: The assets of this INetWorthAtDate.
        :type assets: IAssets
        """

        self._assets = assets

    @property
    def assets_funding_retirement(self):
        """Gets the assets_funding_retirement of this INetWorthAtDate.


        :return: The assets_funding_retirement of this INetWorthAtDate.
        :rtype: IRetirementAssets
        """
        return self._assets_funding_retirement

    @assets_funding_retirement.setter
    def assets_funding_retirement(self, assets_funding_retirement):
        """Sets the assets_funding_retirement of this INetWorthAtDate.


        :param assets_funding_retirement: The assets_funding_retirement of this INetWorthAtDate.
        :type assets_funding_retirement: IRetirementAssets
        """

        self._assets_funding_retirement = assets_funding_retirement

    @property
    def client_net_worth(self):
        """Gets the client_net_worth of this INetWorthAtDate.


        :return: The client_net_worth of this INetWorthAtDate.
        :rtype: Currency
        """
        return self._client_net_worth

    @client_net_worth.setter
    def client_net_worth(self, client_net_worth):
        """Sets the client_net_worth of this INetWorthAtDate.


        :param client_net_worth: The client_net_worth of this INetWorthAtDate.
        :type client_net_worth: Currency
        """

        self._client_net_worth = client_net_worth

    @property
    def co_client_net_worth(self):
        """Gets the co_client_net_worth of this INetWorthAtDate.


        :return: The co_client_net_worth of this INetWorthAtDate.
        :rtype: Currency
        """
        return self._co_client_net_worth

    @co_client_net_worth.setter
    def co_client_net_worth(self, co_client_net_worth):
        """Sets the co_client_net_worth of this INetWorthAtDate.


        :param co_client_net_worth: The co_client_net_worth of this INetWorthAtDate.
        :type co_client_net_worth: Currency
        """

        self._co_client_net_worth = co_client_net_worth

    @property
    def community_property_net_worth(self):
        """Gets the community_property_net_worth of this INetWorthAtDate.


        :return: The community_property_net_worth of this INetWorthAtDate.
        :rtype: Currency
        """
        return self._community_property_net_worth

    @community_property_net_worth.setter
    def community_property_net_worth(self, community_property_net_worth):
        """Sets the community_property_net_worth of this INetWorthAtDate.


        :param community_property_net_worth: The community_property_net_worth of this INetWorthAtDate.
        :type community_property_net_worth: Currency
        """

        self._community_property_net_worth = community_property_net_worth

    @property
    def joint_net_worth(self):
        """Gets the joint_net_worth of this INetWorthAtDate.


        :return: The joint_net_worth of this INetWorthAtDate.
        :rtype: Currency
        """
        return self._joint_net_worth

    @joint_net_worth.setter
    def joint_net_worth(self, joint_net_worth):
        """Sets the joint_net_worth of this INetWorthAtDate.


        :param joint_net_worth: The joint_net_worth of this INetWorthAtDate.
        :type joint_net_worth: Currency
        """

        self._joint_net_worth = joint_net_worth

    @property
    def liabilities(self):
        """Gets the liabilities of this INetWorthAtDate.


        :return: The liabilities of this INetWorthAtDate.
        :rtype: ILiabilities
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this INetWorthAtDate.


        :param liabilities: The liabilities of this INetWorthAtDate.
        :type liabilities: ILiabilities
        """

        self._liabilities = liabilities

    @property
    def total_net_worth(self):
        """Gets the total_net_worth of this INetWorthAtDate.


        :return: The total_net_worth of this INetWorthAtDate.
        :rtype: Currency
        """
        return self._total_net_worth

    @total_net_worth.setter
    def total_net_worth(self, total_net_worth):
        """Sets the total_net_worth of this INetWorthAtDate.


        :param total_net_worth: The total_net_worth of this INetWorthAtDate.
        :type total_net_worth: Currency
        """

        self._total_net_worth = total_net_worth
