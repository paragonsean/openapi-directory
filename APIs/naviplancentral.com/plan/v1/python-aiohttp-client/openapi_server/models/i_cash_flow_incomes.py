# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.i_cash_flow_category import ICashFlowCategory
from openapi_server import util


class ICashFlowIncomes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annuity_payments: ICashFlowCategory=None, disability_incomes: Currency=None, earned_income: ICashFlowCategory=None, insurance_benefits: ICashFlowCategory=None, investment_incomes: ICashFlowCategory=None, lifestyle_asset_liquidations: ICashFlowCategory=None, locked_in_liquidations: Currency=None, long_term_care_benefits: Currency=None, miscellaneous_incomes: ICashFlowCategory=None, non_qualified_liquidations: ICashFlowCategory=None, pension: ICashFlowCategory=None, private_corporations: ICashFlowCategory=None, qualified_liquidations: ICashFlowCategory=None, qualified_liquidations_non_required_minimum_distributions: ICashFlowCategory=None, required_minimum_distributions: ICashFlowCategory=None, retirement_income: Currency=None, roth_liquidations: Currency=None, social_security: ICashFlowCategory=None, tfsa_liquidations: Currency=None, total: ICashFlowCategory=None, withdrawals: Currency=None):
        """ICashFlowIncomes - a model defined in OpenAPI

        :param annuity_payments: The annuity_payments of this ICashFlowIncomes.
        :param disability_incomes: The disability_incomes of this ICashFlowIncomes.
        :param earned_income: The earned_income of this ICashFlowIncomes.
        :param insurance_benefits: The insurance_benefits of this ICashFlowIncomes.
        :param investment_incomes: The investment_incomes of this ICashFlowIncomes.
        :param lifestyle_asset_liquidations: The lifestyle_asset_liquidations of this ICashFlowIncomes.
        :param locked_in_liquidations: The locked_in_liquidations of this ICashFlowIncomes.
        :param long_term_care_benefits: The long_term_care_benefits of this ICashFlowIncomes.
        :param miscellaneous_incomes: The miscellaneous_incomes of this ICashFlowIncomes.
        :param non_qualified_liquidations: The non_qualified_liquidations of this ICashFlowIncomes.
        :param pension: The pension of this ICashFlowIncomes.
        :param private_corporations: The private_corporations of this ICashFlowIncomes.
        :param qualified_liquidations: The qualified_liquidations of this ICashFlowIncomes.
        :param qualified_liquidations_non_required_minimum_distributions: The qualified_liquidations_non_required_minimum_distributions of this ICashFlowIncomes.
        :param required_minimum_distributions: The required_minimum_distributions of this ICashFlowIncomes.
        :param retirement_income: The retirement_income of this ICashFlowIncomes.
        :param roth_liquidations: The roth_liquidations of this ICashFlowIncomes.
        :param social_security: The social_security of this ICashFlowIncomes.
        :param tfsa_liquidations: The tfsa_liquidations of this ICashFlowIncomes.
        :param total: The total of this ICashFlowIncomes.
        :param withdrawals: The withdrawals of this ICashFlowIncomes.
        """
        self.openapi_types = {
            'annuity_payments': ICashFlowCategory,
            'disability_incomes': Currency,
            'earned_income': ICashFlowCategory,
            'insurance_benefits': ICashFlowCategory,
            'investment_incomes': ICashFlowCategory,
            'lifestyle_asset_liquidations': ICashFlowCategory,
            'locked_in_liquidations': Currency,
            'long_term_care_benefits': Currency,
            'miscellaneous_incomes': ICashFlowCategory,
            'non_qualified_liquidations': ICashFlowCategory,
            'pension': ICashFlowCategory,
            'private_corporations': ICashFlowCategory,
            'qualified_liquidations': ICashFlowCategory,
            'qualified_liquidations_non_required_minimum_distributions': ICashFlowCategory,
            'required_minimum_distributions': ICashFlowCategory,
            'retirement_income': Currency,
            'roth_liquidations': Currency,
            'social_security': ICashFlowCategory,
            'tfsa_liquidations': Currency,
            'total': ICashFlowCategory,
            'withdrawals': Currency
        }

        self.attribute_map = {
            'annuity_payments': 'annuityPayments',
            'disability_incomes': 'disabilityIncomes',
            'earned_income': 'earnedIncome',
            'insurance_benefits': 'insuranceBenefits',
            'investment_incomes': 'investmentIncomes',
            'lifestyle_asset_liquidations': 'lifestyleAssetLiquidations',
            'locked_in_liquidations': 'lockedInLiquidations',
            'long_term_care_benefits': 'longTermCareBenefits',
            'miscellaneous_incomes': 'miscellaneousIncomes',
            'non_qualified_liquidations': 'nonQualifiedLiquidations',
            'pension': 'pension',
            'private_corporations': 'privateCorporations',
            'qualified_liquidations': 'qualifiedLiquidations',
            'qualified_liquidations_non_required_minimum_distributions': 'qualifiedLiquidationsNonRequiredMinimumDistributions',
            'required_minimum_distributions': 'requiredMinimumDistributions',
            'retirement_income': 'retirementIncome',
            'roth_liquidations': 'rothLiquidations',
            'social_security': 'socialSecurity',
            'tfsa_liquidations': 'tfsaLiquidations',
            'total': 'total',
            'withdrawals': 'withdrawals'
        }

        self._annuity_payments = annuity_payments
        self._disability_incomes = disability_incomes
        self._earned_income = earned_income
        self._insurance_benefits = insurance_benefits
        self._investment_incomes = investment_incomes
        self._lifestyle_asset_liquidations = lifestyle_asset_liquidations
        self._locked_in_liquidations = locked_in_liquidations
        self._long_term_care_benefits = long_term_care_benefits
        self._miscellaneous_incomes = miscellaneous_incomes
        self._non_qualified_liquidations = non_qualified_liquidations
        self._pension = pension
        self._private_corporations = private_corporations
        self._qualified_liquidations = qualified_liquidations
        self._qualified_liquidations_non_required_minimum_distributions = qualified_liquidations_non_required_minimum_distributions
        self._required_minimum_distributions = required_minimum_distributions
        self._retirement_income = retirement_income
        self._roth_liquidations = roth_liquidations
        self._social_security = social_security
        self._tfsa_liquidations = tfsa_liquidations
        self._total = total
        self._withdrawals = withdrawals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICashFlowIncomes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ICashFlowIncomes of this ICashFlowIncomes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annuity_payments(self):
        """Gets the annuity_payments of this ICashFlowIncomes.


        :return: The annuity_payments of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._annuity_payments

    @annuity_payments.setter
    def annuity_payments(self, annuity_payments):
        """Sets the annuity_payments of this ICashFlowIncomes.


        :param annuity_payments: The annuity_payments of this ICashFlowIncomes.
        :type annuity_payments: ICashFlowCategory
        """

        self._annuity_payments = annuity_payments

    @property
    def disability_incomes(self):
        """Gets the disability_incomes of this ICashFlowIncomes.


        :return: The disability_incomes of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._disability_incomes

    @disability_incomes.setter
    def disability_incomes(self, disability_incomes):
        """Sets the disability_incomes of this ICashFlowIncomes.


        :param disability_incomes: The disability_incomes of this ICashFlowIncomes.
        :type disability_incomes: Currency
        """

        self._disability_incomes = disability_incomes

    @property
    def earned_income(self):
        """Gets the earned_income of this ICashFlowIncomes.


        :return: The earned_income of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._earned_income

    @earned_income.setter
    def earned_income(self, earned_income):
        """Sets the earned_income of this ICashFlowIncomes.


        :param earned_income: The earned_income of this ICashFlowIncomes.
        :type earned_income: ICashFlowCategory
        """

        self._earned_income = earned_income

    @property
    def insurance_benefits(self):
        """Gets the insurance_benefits of this ICashFlowIncomes.


        :return: The insurance_benefits of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._insurance_benefits

    @insurance_benefits.setter
    def insurance_benefits(self, insurance_benefits):
        """Sets the insurance_benefits of this ICashFlowIncomes.


        :param insurance_benefits: The insurance_benefits of this ICashFlowIncomes.
        :type insurance_benefits: ICashFlowCategory
        """

        self._insurance_benefits = insurance_benefits

    @property
    def investment_incomes(self):
        """Gets the investment_incomes of this ICashFlowIncomes.


        :return: The investment_incomes of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._investment_incomes

    @investment_incomes.setter
    def investment_incomes(self, investment_incomes):
        """Sets the investment_incomes of this ICashFlowIncomes.


        :param investment_incomes: The investment_incomes of this ICashFlowIncomes.
        :type investment_incomes: ICashFlowCategory
        """

        self._investment_incomes = investment_incomes

    @property
    def lifestyle_asset_liquidations(self):
        """Gets the lifestyle_asset_liquidations of this ICashFlowIncomes.


        :return: The lifestyle_asset_liquidations of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._lifestyle_asset_liquidations

    @lifestyle_asset_liquidations.setter
    def lifestyle_asset_liquidations(self, lifestyle_asset_liquidations):
        """Sets the lifestyle_asset_liquidations of this ICashFlowIncomes.


        :param lifestyle_asset_liquidations: The lifestyle_asset_liquidations of this ICashFlowIncomes.
        :type lifestyle_asset_liquidations: ICashFlowCategory
        """

        self._lifestyle_asset_liquidations = lifestyle_asset_liquidations

    @property
    def locked_in_liquidations(self):
        """Gets the locked_in_liquidations of this ICashFlowIncomes.


        :return: The locked_in_liquidations of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._locked_in_liquidations

    @locked_in_liquidations.setter
    def locked_in_liquidations(self, locked_in_liquidations):
        """Sets the locked_in_liquidations of this ICashFlowIncomes.


        :param locked_in_liquidations: The locked_in_liquidations of this ICashFlowIncomes.
        :type locked_in_liquidations: Currency
        """

        self._locked_in_liquidations = locked_in_liquidations

    @property
    def long_term_care_benefits(self):
        """Gets the long_term_care_benefits of this ICashFlowIncomes.


        :return: The long_term_care_benefits of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._long_term_care_benefits

    @long_term_care_benefits.setter
    def long_term_care_benefits(self, long_term_care_benefits):
        """Sets the long_term_care_benefits of this ICashFlowIncomes.


        :param long_term_care_benefits: The long_term_care_benefits of this ICashFlowIncomes.
        :type long_term_care_benefits: Currency
        """

        self._long_term_care_benefits = long_term_care_benefits

    @property
    def miscellaneous_incomes(self):
        """Gets the miscellaneous_incomes of this ICashFlowIncomes.


        :return: The miscellaneous_incomes of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._miscellaneous_incomes

    @miscellaneous_incomes.setter
    def miscellaneous_incomes(self, miscellaneous_incomes):
        """Sets the miscellaneous_incomes of this ICashFlowIncomes.


        :param miscellaneous_incomes: The miscellaneous_incomes of this ICashFlowIncomes.
        :type miscellaneous_incomes: ICashFlowCategory
        """

        self._miscellaneous_incomes = miscellaneous_incomes

    @property
    def non_qualified_liquidations(self):
        """Gets the non_qualified_liquidations of this ICashFlowIncomes.


        :return: The non_qualified_liquidations of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._non_qualified_liquidations

    @non_qualified_liquidations.setter
    def non_qualified_liquidations(self, non_qualified_liquidations):
        """Sets the non_qualified_liquidations of this ICashFlowIncomes.


        :param non_qualified_liquidations: The non_qualified_liquidations of this ICashFlowIncomes.
        :type non_qualified_liquidations: ICashFlowCategory
        """

        self._non_qualified_liquidations = non_qualified_liquidations

    @property
    def pension(self):
        """Gets the pension of this ICashFlowIncomes.


        :return: The pension of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._pension

    @pension.setter
    def pension(self, pension):
        """Sets the pension of this ICashFlowIncomes.


        :param pension: The pension of this ICashFlowIncomes.
        :type pension: ICashFlowCategory
        """

        self._pension = pension

    @property
    def private_corporations(self):
        """Gets the private_corporations of this ICashFlowIncomes.


        :return: The private_corporations of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._private_corporations

    @private_corporations.setter
    def private_corporations(self, private_corporations):
        """Sets the private_corporations of this ICashFlowIncomes.


        :param private_corporations: The private_corporations of this ICashFlowIncomes.
        :type private_corporations: ICashFlowCategory
        """

        self._private_corporations = private_corporations

    @property
    def qualified_liquidations(self):
        """Gets the qualified_liquidations of this ICashFlowIncomes.


        :return: The qualified_liquidations of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._qualified_liquidations

    @qualified_liquidations.setter
    def qualified_liquidations(self, qualified_liquidations):
        """Sets the qualified_liquidations of this ICashFlowIncomes.


        :param qualified_liquidations: The qualified_liquidations of this ICashFlowIncomes.
        :type qualified_liquidations: ICashFlowCategory
        """

        self._qualified_liquidations = qualified_liquidations

    @property
    def qualified_liquidations_non_required_minimum_distributions(self):
        """Gets the qualified_liquidations_non_required_minimum_distributions of this ICashFlowIncomes.


        :return: The qualified_liquidations_non_required_minimum_distributions of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._qualified_liquidations_non_required_minimum_distributions

    @qualified_liquidations_non_required_minimum_distributions.setter
    def qualified_liquidations_non_required_minimum_distributions(self, qualified_liquidations_non_required_minimum_distributions):
        """Sets the qualified_liquidations_non_required_minimum_distributions of this ICashFlowIncomes.


        :param qualified_liquidations_non_required_minimum_distributions: The qualified_liquidations_non_required_minimum_distributions of this ICashFlowIncomes.
        :type qualified_liquidations_non_required_minimum_distributions: ICashFlowCategory
        """

        self._qualified_liquidations_non_required_minimum_distributions = qualified_liquidations_non_required_minimum_distributions

    @property
    def required_minimum_distributions(self):
        """Gets the required_minimum_distributions of this ICashFlowIncomes.


        :return: The required_minimum_distributions of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._required_minimum_distributions

    @required_minimum_distributions.setter
    def required_minimum_distributions(self, required_minimum_distributions):
        """Sets the required_minimum_distributions of this ICashFlowIncomes.


        :param required_minimum_distributions: The required_minimum_distributions of this ICashFlowIncomes.
        :type required_minimum_distributions: ICashFlowCategory
        """

        self._required_minimum_distributions = required_minimum_distributions

    @property
    def retirement_income(self):
        """Gets the retirement_income of this ICashFlowIncomes.


        :return: The retirement_income of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._retirement_income

    @retirement_income.setter
    def retirement_income(self, retirement_income):
        """Sets the retirement_income of this ICashFlowIncomes.


        :param retirement_income: The retirement_income of this ICashFlowIncomes.
        :type retirement_income: Currency
        """

        self._retirement_income = retirement_income

    @property
    def roth_liquidations(self):
        """Gets the roth_liquidations of this ICashFlowIncomes.


        :return: The roth_liquidations of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._roth_liquidations

    @roth_liquidations.setter
    def roth_liquidations(self, roth_liquidations):
        """Sets the roth_liquidations of this ICashFlowIncomes.


        :param roth_liquidations: The roth_liquidations of this ICashFlowIncomes.
        :type roth_liquidations: Currency
        """

        self._roth_liquidations = roth_liquidations

    @property
    def social_security(self):
        """Gets the social_security of this ICashFlowIncomes.


        :return: The social_security of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._social_security

    @social_security.setter
    def social_security(self, social_security):
        """Sets the social_security of this ICashFlowIncomes.


        :param social_security: The social_security of this ICashFlowIncomes.
        :type social_security: ICashFlowCategory
        """

        self._social_security = social_security

    @property
    def tfsa_liquidations(self):
        """Gets the tfsa_liquidations of this ICashFlowIncomes.


        :return: The tfsa_liquidations of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._tfsa_liquidations

    @tfsa_liquidations.setter
    def tfsa_liquidations(self, tfsa_liquidations):
        """Sets the tfsa_liquidations of this ICashFlowIncomes.


        :param tfsa_liquidations: The tfsa_liquidations of this ICashFlowIncomes.
        :type tfsa_liquidations: Currency
        """

        self._tfsa_liquidations = tfsa_liquidations

    @property
    def total(self):
        """Gets the total of this ICashFlowIncomes.


        :return: The total of this ICashFlowIncomes.
        :rtype: ICashFlowCategory
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ICashFlowIncomes.


        :param total: The total of this ICashFlowIncomes.
        :type total: ICashFlowCategory
        """

        self._total = total

    @property
    def withdrawals(self):
        """Gets the withdrawals of this ICashFlowIncomes.


        :return: The withdrawals of this ICashFlowIncomes.
        :rtype: Currency
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this ICashFlowIncomes.


        :param withdrawals: The withdrawals of this ICashFlowIncomes.
        :type withdrawals: Currency
        """

        self._withdrawals = withdrawals
