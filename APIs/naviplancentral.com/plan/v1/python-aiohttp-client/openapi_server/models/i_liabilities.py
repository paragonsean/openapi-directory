# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_net_worth_category import INetWorthCategory
from openapi_server import util


class ILiabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_liabilities: INetWorthCategory=None, co_client_liabilities: INetWorthCategory=None, community_property_liabilities: INetWorthCategory=None, joint_liabilities: INetWorthCategory=None, total_liabilities: INetWorthCategory=None):
        """ILiabilities - a model defined in OpenAPI

        :param client_liabilities: The client_liabilities of this ILiabilities.
        :param co_client_liabilities: The co_client_liabilities of this ILiabilities.
        :param community_property_liabilities: The community_property_liabilities of this ILiabilities.
        :param joint_liabilities: The joint_liabilities of this ILiabilities.
        :param total_liabilities: The total_liabilities of this ILiabilities.
        """
        self.openapi_types = {
            'client_liabilities': INetWorthCategory,
            'co_client_liabilities': INetWorthCategory,
            'community_property_liabilities': INetWorthCategory,
            'joint_liabilities': INetWorthCategory,
            'total_liabilities': INetWorthCategory
        }

        self.attribute_map = {
            'client_liabilities': 'clientLiabilities',
            'co_client_liabilities': 'coClientLiabilities',
            'community_property_liabilities': 'communityPropertyLiabilities',
            'joint_liabilities': 'jointLiabilities',
            'total_liabilities': 'totalLiabilities'
        }

        self._client_liabilities = client_liabilities
        self._co_client_liabilities = co_client_liabilities
        self._community_property_liabilities = community_property_liabilities
        self._joint_liabilities = joint_liabilities
        self._total_liabilities = total_liabilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ILiabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ILiabilities of this ILiabilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_liabilities(self):
        """Gets the client_liabilities of this ILiabilities.


        :return: The client_liabilities of this ILiabilities.
        :rtype: INetWorthCategory
        """
        return self._client_liabilities

    @client_liabilities.setter
    def client_liabilities(self, client_liabilities):
        """Sets the client_liabilities of this ILiabilities.


        :param client_liabilities: The client_liabilities of this ILiabilities.
        :type client_liabilities: INetWorthCategory
        """

        self._client_liabilities = client_liabilities

    @property
    def co_client_liabilities(self):
        """Gets the co_client_liabilities of this ILiabilities.


        :return: The co_client_liabilities of this ILiabilities.
        :rtype: INetWorthCategory
        """
        return self._co_client_liabilities

    @co_client_liabilities.setter
    def co_client_liabilities(self, co_client_liabilities):
        """Sets the co_client_liabilities of this ILiabilities.


        :param co_client_liabilities: The co_client_liabilities of this ILiabilities.
        :type co_client_liabilities: INetWorthCategory
        """

        self._co_client_liabilities = co_client_liabilities

    @property
    def community_property_liabilities(self):
        """Gets the community_property_liabilities of this ILiabilities.


        :return: The community_property_liabilities of this ILiabilities.
        :rtype: INetWorthCategory
        """
        return self._community_property_liabilities

    @community_property_liabilities.setter
    def community_property_liabilities(self, community_property_liabilities):
        """Sets the community_property_liabilities of this ILiabilities.


        :param community_property_liabilities: The community_property_liabilities of this ILiabilities.
        :type community_property_liabilities: INetWorthCategory
        """

        self._community_property_liabilities = community_property_liabilities

    @property
    def joint_liabilities(self):
        """Gets the joint_liabilities of this ILiabilities.


        :return: The joint_liabilities of this ILiabilities.
        :rtype: INetWorthCategory
        """
        return self._joint_liabilities

    @joint_liabilities.setter
    def joint_liabilities(self, joint_liabilities):
        """Sets the joint_liabilities of this ILiabilities.


        :param joint_liabilities: The joint_liabilities of this ILiabilities.
        :type joint_liabilities: INetWorthCategory
        """

        self._joint_liabilities = joint_liabilities

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this ILiabilities.


        :return: The total_liabilities of this ILiabilities.
        :rtype: INetWorthCategory
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this ILiabilities.


        :param total_liabilities: The total_liabilities of this ILiabilities.
        :type total_liabilities: INetWorthCategory
        """

        self._total_liabilities = total_liabilities
