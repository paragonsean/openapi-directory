# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_accumulation_category_data import IAccumulationCategoryData
from openapi_server import util


class AssetsFundingGoalSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributions: IAccumulationCategoryData=None, end_of_year_assets: IAccumulationCategoryData=None, goal_type: str=None, growth_and_reinvestments: IAccumulationCategoryData=None, identifier: int=None, net_withdrawals: float=None, withdrawals: IAccumulationCategoryData=None):
        """AssetsFundingGoalSummary - a model defined in OpenAPI

        :param contributions: The contributions of this AssetsFundingGoalSummary.
        :param end_of_year_assets: The end_of_year_assets of this AssetsFundingGoalSummary.
        :param goal_type: The goal_type of this AssetsFundingGoalSummary.
        :param growth_and_reinvestments: The growth_and_reinvestments of this AssetsFundingGoalSummary.
        :param identifier: The identifier of this AssetsFundingGoalSummary.
        :param net_withdrawals: The net_withdrawals of this AssetsFundingGoalSummary.
        :param withdrawals: The withdrawals of this AssetsFundingGoalSummary.
        """
        self.openapi_types = {
            'contributions': IAccumulationCategoryData,
            'end_of_year_assets': IAccumulationCategoryData,
            'goal_type': str,
            'growth_and_reinvestments': IAccumulationCategoryData,
            'identifier': int,
            'net_withdrawals': float,
            'withdrawals': IAccumulationCategoryData
        }

        self.attribute_map = {
            'contributions': 'contributions',
            'end_of_year_assets': 'endOfYearAssets',
            'goal_type': 'goalType',
            'growth_and_reinvestments': 'growthAndReinvestments',
            'identifier': 'identifier',
            'net_withdrawals': 'netWithdrawals',
            'withdrawals': 'withdrawals'
        }

        self._contributions = contributions
        self._end_of_year_assets = end_of_year_assets
        self._goal_type = goal_type
        self._growth_and_reinvestments = growth_and_reinvestments
        self._identifier = identifier
        self._net_withdrawals = net_withdrawals
        self._withdrawals = withdrawals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsFundingGoalSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetsFundingGoalSummary of this AssetsFundingGoalSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributions(self):
        """Gets the contributions of this AssetsFundingGoalSummary.


        :return: The contributions of this AssetsFundingGoalSummary.
        :rtype: IAccumulationCategoryData
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this AssetsFundingGoalSummary.


        :param contributions: The contributions of this AssetsFundingGoalSummary.
        :type contributions: IAccumulationCategoryData
        """

        self._contributions = contributions

    @property
    def end_of_year_assets(self):
        """Gets the end_of_year_assets of this AssetsFundingGoalSummary.


        :return: The end_of_year_assets of this AssetsFundingGoalSummary.
        :rtype: IAccumulationCategoryData
        """
        return self._end_of_year_assets

    @end_of_year_assets.setter
    def end_of_year_assets(self, end_of_year_assets):
        """Sets the end_of_year_assets of this AssetsFundingGoalSummary.


        :param end_of_year_assets: The end_of_year_assets of this AssetsFundingGoalSummary.
        :type end_of_year_assets: IAccumulationCategoryData
        """

        self._end_of_year_assets = end_of_year_assets

    @property
    def goal_type(self):
        """Gets the goal_type of this AssetsFundingGoalSummary.


        :return: The goal_type of this AssetsFundingGoalSummary.
        :rtype: str
        """
        return self._goal_type

    @goal_type.setter
    def goal_type(self, goal_type):
        """Sets the goal_type of this AssetsFundingGoalSummary.


        :param goal_type: The goal_type of this AssetsFundingGoalSummary.
        :type goal_type: str
        """

        self._goal_type = goal_type

    @property
    def growth_and_reinvestments(self):
        """Gets the growth_and_reinvestments of this AssetsFundingGoalSummary.


        :return: The growth_and_reinvestments of this AssetsFundingGoalSummary.
        :rtype: IAccumulationCategoryData
        """
        return self._growth_and_reinvestments

    @growth_and_reinvestments.setter
    def growth_and_reinvestments(self, growth_and_reinvestments):
        """Sets the growth_and_reinvestments of this AssetsFundingGoalSummary.


        :param growth_and_reinvestments: The growth_and_reinvestments of this AssetsFundingGoalSummary.
        :type growth_and_reinvestments: IAccumulationCategoryData
        """

        self._growth_and_reinvestments = growth_and_reinvestments

    @property
    def identifier(self):
        """Gets the identifier of this AssetsFundingGoalSummary.


        :return: The identifier of this AssetsFundingGoalSummary.
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AssetsFundingGoalSummary.


        :param identifier: The identifier of this AssetsFundingGoalSummary.
        :type identifier: int
        """

        self._identifier = identifier

    @property
    def net_withdrawals(self):
        """Gets the net_withdrawals of this AssetsFundingGoalSummary.


        :return: The net_withdrawals of this AssetsFundingGoalSummary.
        :rtype: float
        """
        return self._net_withdrawals

    @net_withdrawals.setter
    def net_withdrawals(self, net_withdrawals):
        """Sets the net_withdrawals of this AssetsFundingGoalSummary.


        :param net_withdrawals: The net_withdrawals of this AssetsFundingGoalSummary.
        :type net_withdrawals: float
        """

        self._net_withdrawals = net_withdrawals

    @property
    def withdrawals(self):
        """Gets the withdrawals of this AssetsFundingGoalSummary.


        :return: The withdrawals of this AssetsFundingGoalSummary.
        :rtype: IAccumulationCategoryData
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this AssetsFundingGoalSummary.


        :param withdrawals: The withdrawals of this AssetsFundingGoalSummary.
        :type withdrawals: IAccumulationCategoryData
        """

        self._withdrawals = withdrawals
