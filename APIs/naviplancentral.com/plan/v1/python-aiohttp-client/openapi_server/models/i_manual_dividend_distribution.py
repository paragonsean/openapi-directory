# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formatted_enum_type_distribution_dividend_type import FormattedEnumTypeDistributionDividendType
from openapi_server.models.formatted_enum_type_private_corporation_share_type import FormattedEnumTypePrivateCorporationShareType
from openapi_server.models.i_activity_data import IActivityData
from openapi_server import util


class IManualDividendDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_data: IActivityData=None, direct_co_client_after_tax_proceeds_to: str=None, dividend_type: FormattedEnumTypeDistributionDividendType=None, share_id: int=None, share_type: FormattedEnumTypePrivateCorporationShareType=None):
        """IManualDividendDistribution - a model defined in OpenAPI

        :param activity_data: The activity_data of this IManualDividendDistribution.
        :param direct_co_client_after_tax_proceeds_to: The direct_co_client_after_tax_proceeds_to of this IManualDividendDistribution.
        :param dividend_type: The dividend_type of this IManualDividendDistribution.
        :param share_id: The share_id of this IManualDividendDistribution.
        :param share_type: The share_type of this IManualDividendDistribution.
        """
        self.openapi_types = {
            'activity_data': IActivityData,
            'direct_co_client_after_tax_proceeds_to': str,
            'dividend_type': FormattedEnumTypeDistributionDividendType,
            'share_id': int,
            'share_type': FormattedEnumTypePrivateCorporationShareType
        }

        self.attribute_map = {
            'activity_data': 'activityData',
            'direct_co_client_after_tax_proceeds_to': 'directCoClientAfterTaxProceedsTo',
            'dividend_type': 'dividendType',
            'share_id': 'shareId',
            'share_type': 'shareType'
        }

        self._activity_data = activity_data
        self._direct_co_client_after_tax_proceeds_to = direct_co_client_after_tax_proceeds_to
        self._dividend_type = dividend_type
        self._share_id = share_id
        self._share_type = share_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IManualDividendDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IManualDividendDistribution of this IManualDividendDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_data(self):
        """Gets the activity_data of this IManualDividendDistribution.


        :return: The activity_data of this IManualDividendDistribution.
        :rtype: IActivityData
        """
        return self._activity_data

    @activity_data.setter
    def activity_data(self, activity_data):
        """Sets the activity_data of this IManualDividendDistribution.


        :param activity_data: The activity_data of this IManualDividendDistribution.
        :type activity_data: IActivityData
        """

        self._activity_data = activity_data

    @property
    def direct_co_client_after_tax_proceeds_to(self):
        """Gets the direct_co_client_after_tax_proceeds_to of this IManualDividendDistribution.


        :return: The direct_co_client_after_tax_proceeds_to of this IManualDividendDistribution.
        :rtype: str
        """
        return self._direct_co_client_after_tax_proceeds_to

    @direct_co_client_after_tax_proceeds_to.setter
    def direct_co_client_after_tax_proceeds_to(self, direct_co_client_after_tax_proceeds_to):
        """Sets the direct_co_client_after_tax_proceeds_to of this IManualDividendDistribution.


        :param direct_co_client_after_tax_proceeds_to: The direct_co_client_after_tax_proceeds_to of this IManualDividendDistribution.
        :type direct_co_client_after_tax_proceeds_to: str
        """

        self._direct_co_client_after_tax_proceeds_to = direct_co_client_after_tax_proceeds_to

    @property
    def dividend_type(self):
        """Gets the dividend_type of this IManualDividendDistribution.


        :return: The dividend_type of this IManualDividendDistribution.
        :rtype: FormattedEnumTypeDistributionDividendType
        """
        return self._dividend_type

    @dividend_type.setter
    def dividend_type(self, dividend_type):
        """Sets the dividend_type of this IManualDividendDistribution.


        :param dividend_type: The dividend_type of this IManualDividendDistribution.
        :type dividend_type: FormattedEnumTypeDistributionDividendType
        """

        self._dividend_type = dividend_type

    @property
    def share_id(self):
        """Gets the share_id of this IManualDividendDistribution.


        :return: The share_id of this IManualDividendDistribution.
        :rtype: int
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this IManualDividendDistribution.


        :param share_id: The share_id of this IManualDividendDistribution.
        :type share_id: int
        """

        self._share_id = share_id

    @property
    def share_type(self):
        """Gets the share_type of this IManualDividendDistribution.


        :return: The share_type of this IManualDividendDistribution.
        :rtype: FormattedEnumTypePrivateCorporationShareType
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this IManualDividendDistribution.


        :param share_type: The share_type of this IManualDividendDistribution.
        :type share_type: FormattedEnumTypePrivateCorporationShareType
        """

        self._share_type = share_type
