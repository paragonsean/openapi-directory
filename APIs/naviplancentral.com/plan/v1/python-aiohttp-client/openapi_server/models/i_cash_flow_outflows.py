# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.i_cash_flow_category import ICashFlowCategory
from openapi_server import util


class ICashFlowOutflows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributions: Currency=None, education_expenses: ICashFlowCategory=None, employer_expenses: ICashFlowCategory=None, employment_business_expenses: ICashFlowCategory=None, investment_expenses: ICashFlowCategory=None, lifestyle_expenses: ICashFlowCategory=None, lifestyle_expenses_discretionary: ICashFlowCategory=None, lifestyle_expenses_fixed: ICashFlowCategory=None, locked_in_contributions: Currency=None, medical_expenses: ICashFlowCategory=None, miscellaneous_expenses: ICashFlowCategory=None, miscellaneous_expenses_discretionary: ICashFlowCategory=None, miscellaneous_expenses_fixed: ICashFlowCategory=None, non_qualified_contributions: ICashFlowCategory=None, non_qualified_reinvestments: ICashFlowCategory=None, private_corporation_outflows: ICashFlowCategory=None, qualified_contributions: ICashFlowCategory=None, roth_contributions: Currency=None, surplus_outflows: ICashFlowCategory=None, surplus_savings: Currency=None, tfsa_contributions: Currency=None, total_needs: Currency=None, total_with_taxes: Currency=None, total_without_taxes: Currency=None):
        """ICashFlowOutflows - a model defined in OpenAPI

        :param contributions: The contributions of this ICashFlowOutflows.
        :param education_expenses: The education_expenses of this ICashFlowOutflows.
        :param employer_expenses: The employer_expenses of this ICashFlowOutflows.
        :param employment_business_expenses: The employment_business_expenses of this ICashFlowOutflows.
        :param investment_expenses: The investment_expenses of this ICashFlowOutflows.
        :param lifestyle_expenses: The lifestyle_expenses of this ICashFlowOutflows.
        :param lifestyle_expenses_discretionary: The lifestyle_expenses_discretionary of this ICashFlowOutflows.
        :param lifestyle_expenses_fixed: The lifestyle_expenses_fixed of this ICashFlowOutflows.
        :param locked_in_contributions: The locked_in_contributions of this ICashFlowOutflows.
        :param medical_expenses: The medical_expenses of this ICashFlowOutflows.
        :param miscellaneous_expenses: The miscellaneous_expenses of this ICashFlowOutflows.
        :param miscellaneous_expenses_discretionary: The miscellaneous_expenses_discretionary of this ICashFlowOutflows.
        :param miscellaneous_expenses_fixed: The miscellaneous_expenses_fixed of this ICashFlowOutflows.
        :param non_qualified_contributions: The non_qualified_contributions of this ICashFlowOutflows.
        :param non_qualified_reinvestments: The non_qualified_reinvestments of this ICashFlowOutflows.
        :param private_corporation_outflows: The private_corporation_outflows of this ICashFlowOutflows.
        :param qualified_contributions: The qualified_contributions of this ICashFlowOutflows.
        :param roth_contributions: The roth_contributions of this ICashFlowOutflows.
        :param surplus_outflows: The surplus_outflows of this ICashFlowOutflows.
        :param surplus_savings: The surplus_savings of this ICashFlowOutflows.
        :param tfsa_contributions: The tfsa_contributions of this ICashFlowOutflows.
        :param total_needs: The total_needs of this ICashFlowOutflows.
        :param total_with_taxes: The total_with_taxes of this ICashFlowOutflows.
        :param total_without_taxes: The total_without_taxes of this ICashFlowOutflows.
        """
        self.openapi_types = {
            'contributions': Currency,
            'education_expenses': ICashFlowCategory,
            'employer_expenses': ICashFlowCategory,
            'employment_business_expenses': ICashFlowCategory,
            'investment_expenses': ICashFlowCategory,
            'lifestyle_expenses': ICashFlowCategory,
            'lifestyle_expenses_discretionary': ICashFlowCategory,
            'lifestyle_expenses_fixed': ICashFlowCategory,
            'locked_in_contributions': Currency,
            'medical_expenses': ICashFlowCategory,
            'miscellaneous_expenses': ICashFlowCategory,
            'miscellaneous_expenses_discretionary': ICashFlowCategory,
            'miscellaneous_expenses_fixed': ICashFlowCategory,
            'non_qualified_contributions': ICashFlowCategory,
            'non_qualified_reinvestments': ICashFlowCategory,
            'private_corporation_outflows': ICashFlowCategory,
            'qualified_contributions': ICashFlowCategory,
            'roth_contributions': Currency,
            'surplus_outflows': ICashFlowCategory,
            'surplus_savings': Currency,
            'tfsa_contributions': Currency,
            'total_needs': Currency,
            'total_with_taxes': Currency,
            'total_without_taxes': Currency
        }

        self.attribute_map = {
            'contributions': 'contributions',
            'education_expenses': 'educationExpenses',
            'employer_expenses': 'employerExpenses',
            'employment_business_expenses': 'employmentBusinessExpenses',
            'investment_expenses': 'investmentExpenses',
            'lifestyle_expenses': 'lifestyleExpenses',
            'lifestyle_expenses_discretionary': 'lifestyleExpensesDiscretionary',
            'lifestyle_expenses_fixed': 'lifestyleExpensesFixed',
            'locked_in_contributions': 'lockedInContributions',
            'medical_expenses': 'medicalExpenses',
            'miscellaneous_expenses': 'miscellaneousExpenses',
            'miscellaneous_expenses_discretionary': 'miscellaneousExpensesDiscretionary',
            'miscellaneous_expenses_fixed': 'miscellaneousExpensesFixed',
            'non_qualified_contributions': 'nonQualifiedContributions',
            'non_qualified_reinvestments': 'nonQualifiedReinvestments',
            'private_corporation_outflows': 'privateCorporationOutflows',
            'qualified_contributions': 'qualifiedContributions',
            'roth_contributions': 'rothContributions',
            'surplus_outflows': 'surplusOutflows',
            'surplus_savings': 'surplusSavings',
            'tfsa_contributions': 'tfsaContributions',
            'total_needs': 'totalNeeds',
            'total_with_taxes': 'totalWithTaxes',
            'total_without_taxes': 'totalWithoutTaxes'
        }

        self._contributions = contributions
        self._education_expenses = education_expenses
        self._employer_expenses = employer_expenses
        self._employment_business_expenses = employment_business_expenses
        self._investment_expenses = investment_expenses
        self._lifestyle_expenses = lifestyle_expenses
        self._lifestyle_expenses_discretionary = lifestyle_expenses_discretionary
        self._lifestyle_expenses_fixed = lifestyle_expenses_fixed
        self._locked_in_contributions = locked_in_contributions
        self._medical_expenses = medical_expenses
        self._miscellaneous_expenses = miscellaneous_expenses
        self._miscellaneous_expenses_discretionary = miscellaneous_expenses_discretionary
        self._miscellaneous_expenses_fixed = miscellaneous_expenses_fixed
        self._non_qualified_contributions = non_qualified_contributions
        self._non_qualified_reinvestments = non_qualified_reinvestments
        self._private_corporation_outflows = private_corporation_outflows
        self._qualified_contributions = qualified_contributions
        self._roth_contributions = roth_contributions
        self._surplus_outflows = surplus_outflows
        self._surplus_savings = surplus_savings
        self._tfsa_contributions = tfsa_contributions
        self._total_needs = total_needs
        self._total_with_taxes = total_with_taxes
        self._total_without_taxes = total_without_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICashFlowOutflows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ICashFlowOutflows of this ICashFlowOutflows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributions(self):
        """Gets the contributions of this ICashFlowOutflows.


        :return: The contributions of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this ICashFlowOutflows.


        :param contributions: The contributions of this ICashFlowOutflows.
        :type contributions: Currency
        """

        self._contributions = contributions

    @property
    def education_expenses(self):
        """Gets the education_expenses of this ICashFlowOutflows.


        :return: The education_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._education_expenses

    @education_expenses.setter
    def education_expenses(self, education_expenses):
        """Sets the education_expenses of this ICashFlowOutflows.


        :param education_expenses: The education_expenses of this ICashFlowOutflows.
        :type education_expenses: ICashFlowCategory
        """

        self._education_expenses = education_expenses

    @property
    def employer_expenses(self):
        """Gets the employer_expenses of this ICashFlowOutflows.


        :return: The employer_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._employer_expenses

    @employer_expenses.setter
    def employer_expenses(self, employer_expenses):
        """Sets the employer_expenses of this ICashFlowOutflows.


        :param employer_expenses: The employer_expenses of this ICashFlowOutflows.
        :type employer_expenses: ICashFlowCategory
        """

        self._employer_expenses = employer_expenses

    @property
    def employment_business_expenses(self):
        """Gets the employment_business_expenses of this ICashFlowOutflows.


        :return: The employment_business_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._employment_business_expenses

    @employment_business_expenses.setter
    def employment_business_expenses(self, employment_business_expenses):
        """Sets the employment_business_expenses of this ICashFlowOutflows.


        :param employment_business_expenses: The employment_business_expenses of this ICashFlowOutflows.
        :type employment_business_expenses: ICashFlowCategory
        """

        self._employment_business_expenses = employment_business_expenses

    @property
    def investment_expenses(self):
        """Gets the investment_expenses of this ICashFlowOutflows.


        :return: The investment_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._investment_expenses

    @investment_expenses.setter
    def investment_expenses(self, investment_expenses):
        """Sets the investment_expenses of this ICashFlowOutflows.


        :param investment_expenses: The investment_expenses of this ICashFlowOutflows.
        :type investment_expenses: ICashFlowCategory
        """

        self._investment_expenses = investment_expenses

    @property
    def lifestyle_expenses(self):
        """Gets the lifestyle_expenses of this ICashFlowOutflows.


        :return: The lifestyle_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._lifestyle_expenses

    @lifestyle_expenses.setter
    def lifestyle_expenses(self, lifestyle_expenses):
        """Sets the lifestyle_expenses of this ICashFlowOutflows.


        :param lifestyle_expenses: The lifestyle_expenses of this ICashFlowOutflows.
        :type lifestyle_expenses: ICashFlowCategory
        """

        self._lifestyle_expenses = lifestyle_expenses

    @property
    def lifestyle_expenses_discretionary(self):
        """Gets the lifestyle_expenses_discretionary of this ICashFlowOutflows.


        :return: The lifestyle_expenses_discretionary of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._lifestyle_expenses_discretionary

    @lifestyle_expenses_discretionary.setter
    def lifestyle_expenses_discretionary(self, lifestyle_expenses_discretionary):
        """Sets the lifestyle_expenses_discretionary of this ICashFlowOutflows.


        :param lifestyle_expenses_discretionary: The lifestyle_expenses_discretionary of this ICashFlowOutflows.
        :type lifestyle_expenses_discretionary: ICashFlowCategory
        """

        self._lifestyle_expenses_discretionary = lifestyle_expenses_discretionary

    @property
    def lifestyle_expenses_fixed(self):
        """Gets the lifestyle_expenses_fixed of this ICashFlowOutflows.


        :return: The lifestyle_expenses_fixed of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._lifestyle_expenses_fixed

    @lifestyle_expenses_fixed.setter
    def lifestyle_expenses_fixed(self, lifestyle_expenses_fixed):
        """Sets the lifestyle_expenses_fixed of this ICashFlowOutflows.


        :param lifestyle_expenses_fixed: The lifestyle_expenses_fixed of this ICashFlowOutflows.
        :type lifestyle_expenses_fixed: ICashFlowCategory
        """

        self._lifestyle_expenses_fixed = lifestyle_expenses_fixed

    @property
    def locked_in_contributions(self):
        """Gets the locked_in_contributions of this ICashFlowOutflows.


        :return: The locked_in_contributions of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._locked_in_contributions

    @locked_in_contributions.setter
    def locked_in_contributions(self, locked_in_contributions):
        """Sets the locked_in_contributions of this ICashFlowOutflows.


        :param locked_in_contributions: The locked_in_contributions of this ICashFlowOutflows.
        :type locked_in_contributions: Currency
        """

        self._locked_in_contributions = locked_in_contributions

    @property
    def medical_expenses(self):
        """Gets the medical_expenses of this ICashFlowOutflows.


        :return: The medical_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._medical_expenses

    @medical_expenses.setter
    def medical_expenses(self, medical_expenses):
        """Sets the medical_expenses of this ICashFlowOutflows.


        :param medical_expenses: The medical_expenses of this ICashFlowOutflows.
        :type medical_expenses: ICashFlowCategory
        """

        self._medical_expenses = medical_expenses

    @property
    def miscellaneous_expenses(self):
        """Gets the miscellaneous_expenses of this ICashFlowOutflows.


        :return: The miscellaneous_expenses of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._miscellaneous_expenses

    @miscellaneous_expenses.setter
    def miscellaneous_expenses(self, miscellaneous_expenses):
        """Sets the miscellaneous_expenses of this ICashFlowOutflows.


        :param miscellaneous_expenses: The miscellaneous_expenses of this ICashFlowOutflows.
        :type miscellaneous_expenses: ICashFlowCategory
        """

        self._miscellaneous_expenses = miscellaneous_expenses

    @property
    def miscellaneous_expenses_discretionary(self):
        """Gets the miscellaneous_expenses_discretionary of this ICashFlowOutflows.


        :return: The miscellaneous_expenses_discretionary of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._miscellaneous_expenses_discretionary

    @miscellaneous_expenses_discretionary.setter
    def miscellaneous_expenses_discretionary(self, miscellaneous_expenses_discretionary):
        """Sets the miscellaneous_expenses_discretionary of this ICashFlowOutflows.


        :param miscellaneous_expenses_discretionary: The miscellaneous_expenses_discretionary of this ICashFlowOutflows.
        :type miscellaneous_expenses_discretionary: ICashFlowCategory
        """

        self._miscellaneous_expenses_discretionary = miscellaneous_expenses_discretionary

    @property
    def miscellaneous_expenses_fixed(self):
        """Gets the miscellaneous_expenses_fixed of this ICashFlowOutflows.


        :return: The miscellaneous_expenses_fixed of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._miscellaneous_expenses_fixed

    @miscellaneous_expenses_fixed.setter
    def miscellaneous_expenses_fixed(self, miscellaneous_expenses_fixed):
        """Sets the miscellaneous_expenses_fixed of this ICashFlowOutflows.


        :param miscellaneous_expenses_fixed: The miscellaneous_expenses_fixed of this ICashFlowOutflows.
        :type miscellaneous_expenses_fixed: ICashFlowCategory
        """

        self._miscellaneous_expenses_fixed = miscellaneous_expenses_fixed

    @property
    def non_qualified_contributions(self):
        """Gets the non_qualified_contributions of this ICashFlowOutflows.


        :return: The non_qualified_contributions of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._non_qualified_contributions

    @non_qualified_contributions.setter
    def non_qualified_contributions(self, non_qualified_contributions):
        """Sets the non_qualified_contributions of this ICashFlowOutflows.


        :param non_qualified_contributions: The non_qualified_contributions of this ICashFlowOutflows.
        :type non_qualified_contributions: ICashFlowCategory
        """

        self._non_qualified_contributions = non_qualified_contributions

    @property
    def non_qualified_reinvestments(self):
        """Gets the non_qualified_reinvestments of this ICashFlowOutflows.


        :return: The non_qualified_reinvestments of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._non_qualified_reinvestments

    @non_qualified_reinvestments.setter
    def non_qualified_reinvestments(self, non_qualified_reinvestments):
        """Sets the non_qualified_reinvestments of this ICashFlowOutflows.


        :param non_qualified_reinvestments: The non_qualified_reinvestments of this ICashFlowOutflows.
        :type non_qualified_reinvestments: ICashFlowCategory
        """

        self._non_qualified_reinvestments = non_qualified_reinvestments

    @property
    def private_corporation_outflows(self):
        """Gets the private_corporation_outflows of this ICashFlowOutflows.


        :return: The private_corporation_outflows of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._private_corporation_outflows

    @private_corporation_outflows.setter
    def private_corporation_outflows(self, private_corporation_outflows):
        """Sets the private_corporation_outflows of this ICashFlowOutflows.


        :param private_corporation_outflows: The private_corporation_outflows of this ICashFlowOutflows.
        :type private_corporation_outflows: ICashFlowCategory
        """

        self._private_corporation_outflows = private_corporation_outflows

    @property
    def qualified_contributions(self):
        """Gets the qualified_contributions of this ICashFlowOutflows.


        :return: The qualified_contributions of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._qualified_contributions

    @qualified_contributions.setter
    def qualified_contributions(self, qualified_contributions):
        """Sets the qualified_contributions of this ICashFlowOutflows.


        :param qualified_contributions: The qualified_contributions of this ICashFlowOutflows.
        :type qualified_contributions: ICashFlowCategory
        """

        self._qualified_contributions = qualified_contributions

    @property
    def roth_contributions(self):
        """Gets the roth_contributions of this ICashFlowOutflows.


        :return: The roth_contributions of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._roth_contributions

    @roth_contributions.setter
    def roth_contributions(self, roth_contributions):
        """Sets the roth_contributions of this ICashFlowOutflows.


        :param roth_contributions: The roth_contributions of this ICashFlowOutflows.
        :type roth_contributions: Currency
        """

        self._roth_contributions = roth_contributions

    @property
    def surplus_outflows(self):
        """Gets the surplus_outflows of this ICashFlowOutflows.


        :return: The surplus_outflows of this ICashFlowOutflows.
        :rtype: ICashFlowCategory
        """
        return self._surplus_outflows

    @surplus_outflows.setter
    def surplus_outflows(self, surplus_outflows):
        """Sets the surplus_outflows of this ICashFlowOutflows.


        :param surplus_outflows: The surplus_outflows of this ICashFlowOutflows.
        :type surplus_outflows: ICashFlowCategory
        """

        self._surplus_outflows = surplus_outflows

    @property
    def surplus_savings(self):
        """Gets the surplus_savings of this ICashFlowOutflows.


        :return: The surplus_savings of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._surplus_savings

    @surplus_savings.setter
    def surplus_savings(self, surplus_savings):
        """Sets the surplus_savings of this ICashFlowOutflows.


        :param surplus_savings: The surplus_savings of this ICashFlowOutflows.
        :type surplus_savings: Currency
        """

        self._surplus_savings = surplus_savings

    @property
    def tfsa_contributions(self):
        """Gets the tfsa_contributions of this ICashFlowOutflows.


        :return: The tfsa_contributions of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._tfsa_contributions

    @tfsa_contributions.setter
    def tfsa_contributions(self, tfsa_contributions):
        """Sets the tfsa_contributions of this ICashFlowOutflows.


        :param tfsa_contributions: The tfsa_contributions of this ICashFlowOutflows.
        :type tfsa_contributions: Currency
        """

        self._tfsa_contributions = tfsa_contributions

    @property
    def total_needs(self):
        """Gets the total_needs of this ICashFlowOutflows.


        :return: The total_needs of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._total_needs

    @total_needs.setter
    def total_needs(self, total_needs):
        """Sets the total_needs of this ICashFlowOutflows.


        :param total_needs: The total_needs of this ICashFlowOutflows.
        :type total_needs: Currency
        """

        self._total_needs = total_needs

    @property
    def total_with_taxes(self):
        """Gets the total_with_taxes of this ICashFlowOutflows.


        :return: The total_with_taxes of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._total_with_taxes

    @total_with_taxes.setter
    def total_with_taxes(self, total_with_taxes):
        """Sets the total_with_taxes of this ICashFlowOutflows.


        :param total_with_taxes: The total_with_taxes of this ICashFlowOutflows.
        :type total_with_taxes: Currency
        """

        self._total_with_taxes = total_with_taxes

    @property
    def total_without_taxes(self):
        """Gets the total_without_taxes of this ICashFlowOutflows.


        :return: The total_without_taxes of this ICashFlowOutflows.
        :rtype: Currency
        """
        return self._total_without_taxes

    @total_without_taxes.setter
    def total_without_taxes(self, total_without_taxes):
        """Sets the total_without_taxes of this ICashFlowOutflows.


        :param total_without_taxes: The total_without_taxes of this ICashFlowOutflows.
        :type total_without_taxes: Currency
        """

        self._total_without_taxes = total_without_taxes
