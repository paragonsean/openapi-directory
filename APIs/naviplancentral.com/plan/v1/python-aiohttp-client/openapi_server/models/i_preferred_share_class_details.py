# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.formatted_enum_type_distribution_dividend_type import FormattedEnumTypeDistributionDividendType
from openapi_server.models.i_share_class_structure import IShareClassStructure
from openapi_server.models.percent import Percent
from openapi_server import util


class IPreferredShareClassDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_dividend_yield: Percent=None, dividend_type: FormattedEnumTypeDistributionDividendType=None, redemption_value_per_share: Currency=None, share_class_structure: IShareClassStructure=None):
        """IPreferredShareClassDetails - a model defined in OpenAPI

        :param annual_dividend_yield: The annual_dividend_yield of this IPreferredShareClassDetails.
        :param dividend_type: The dividend_type of this IPreferredShareClassDetails.
        :param redemption_value_per_share: The redemption_value_per_share of this IPreferredShareClassDetails.
        :param share_class_structure: The share_class_structure of this IPreferredShareClassDetails.
        """
        self.openapi_types = {
            'annual_dividend_yield': Percent,
            'dividend_type': FormattedEnumTypeDistributionDividendType,
            'redemption_value_per_share': Currency,
            'share_class_structure': IShareClassStructure
        }

        self.attribute_map = {
            'annual_dividend_yield': 'annualDividendYield',
            'dividend_type': 'dividendType',
            'redemption_value_per_share': 'redemptionValuePerShare',
            'share_class_structure': 'shareClassStructure'
        }

        self._annual_dividend_yield = annual_dividend_yield
        self._dividend_type = dividend_type
        self._redemption_value_per_share = redemption_value_per_share
        self._share_class_structure = share_class_structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPreferredShareClassDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPreferredShareClassDetails of this IPreferredShareClassDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_dividend_yield(self):
        """Gets the annual_dividend_yield of this IPreferredShareClassDetails.


        :return: The annual_dividend_yield of this IPreferredShareClassDetails.
        :rtype: Percent
        """
        return self._annual_dividend_yield

    @annual_dividend_yield.setter
    def annual_dividend_yield(self, annual_dividend_yield):
        """Sets the annual_dividend_yield of this IPreferredShareClassDetails.


        :param annual_dividend_yield: The annual_dividend_yield of this IPreferredShareClassDetails.
        :type annual_dividend_yield: Percent
        """

        self._annual_dividend_yield = annual_dividend_yield

    @property
    def dividend_type(self):
        """Gets the dividend_type of this IPreferredShareClassDetails.


        :return: The dividend_type of this IPreferredShareClassDetails.
        :rtype: FormattedEnumTypeDistributionDividendType
        """
        return self._dividend_type

    @dividend_type.setter
    def dividend_type(self, dividend_type):
        """Sets the dividend_type of this IPreferredShareClassDetails.


        :param dividend_type: The dividend_type of this IPreferredShareClassDetails.
        :type dividend_type: FormattedEnumTypeDistributionDividendType
        """

        self._dividend_type = dividend_type

    @property
    def redemption_value_per_share(self):
        """Gets the redemption_value_per_share of this IPreferredShareClassDetails.


        :return: The redemption_value_per_share of this IPreferredShareClassDetails.
        :rtype: Currency
        """
        return self._redemption_value_per_share

    @redemption_value_per_share.setter
    def redemption_value_per_share(self, redemption_value_per_share):
        """Sets the redemption_value_per_share of this IPreferredShareClassDetails.


        :param redemption_value_per_share: The redemption_value_per_share of this IPreferredShareClassDetails.
        :type redemption_value_per_share: Currency
        """

        self._redemption_value_per_share = redemption_value_per_share

    @property
    def share_class_structure(self):
        """Gets the share_class_structure of this IPreferredShareClassDetails.


        :return: The share_class_structure of this IPreferredShareClassDetails.
        :rtype: IShareClassStructure
        """
        return self._share_class_structure

    @share_class_structure.setter
    def share_class_structure(self, share_class_structure):
        """Sets the share_class_structure of this IPreferredShareClassDetails.


        :param share_class_structure: The share_class_structure of this IPreferredShareClassDetails.
        :type share_class_structure: IShareClassStructure
        """

        self._share_class_structure = share_class_structure
