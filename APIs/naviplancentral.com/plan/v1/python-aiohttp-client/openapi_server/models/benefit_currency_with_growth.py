# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_with_growth import CurrencyWithGrowth
from openapi_server import util


class BenefitCurrencyWithGrowth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit_type: str=None, value: CurrencyWithGrowth=None):
        """BenefitCurrencyWithGrowth - a model defined in OpenAPI

        :param benefit_type: The benefit_type of this BenefitCurrencyWithGrowth.
        :param value: The value of this BenefitCurrencyWithGrowth.
        """
        self.openapi_types = {
            'benefit_type': str,
            'value': CurrencyWithGrowth
        }

        self.attribute_map = {
            'benefit_type': 'benefitType',
            'value': 'value'
        }

        self._benefit_type = benefit_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BenefitCurrencyWithGrowth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Benefit[CurrencyWithGrowth] of this BenefitCurrencyWithGrowth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit_type(self):
        """Gets the benefit_type of this BenefitCurrencyWithGrowth.


        :return: The benefit_type of this BenefitCurrencyWithGrowth.
        :rtype: str
        """
        return self._benefit_type

    @benefit_type.setter
    def benefit_type(self, benefit_type):
        """Sets the benefit_type of this BenefitCurrencyWithGrowth.


        :param benefit_type: The benefit_type of this BenefitCurrencyWithGrowth.
        :type benefit_type: str
        """
        allowed_values = ["DeathBenefit", "MonthlyBenefit", "DailyBenefit", "MaximumBenefit", "WeeklyBenefit", "AnnualBenefit", "LumpSum"]  # noqa: E501
        if benefit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `benefit_type` ({0}), must be one of {1}"
                .format(benefit_type, allowed_values)
            )

        self._benefit_type = benefit_type

    @property
    def value(self):
        """Gets the value of this BenefitCurrencyWithGrowth.


        :return: The value of this BenefitCurrencyWithGrowth.
        :rtype: CurrencyWithGrowth
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BenefitCurrencyWithGrowth.


        :param value: The value of this BenefitCurrencyWithGrowth.
        :type value: CurrencyWithGrowth
        """

        self._value = value
