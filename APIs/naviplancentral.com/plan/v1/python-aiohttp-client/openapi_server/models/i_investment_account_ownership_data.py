# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.percent import Percent
from openapi_server import util


class IInvestmentAccountOwnershipData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner: str=None, owners_name: str=None, ownership_percent: Percent=None):
        """IInvestmentAccountOwnershipData - a model defined in OpenAPI

        :param owner: The owner of this IInvestmentAccountOwnershipData.
        :param owners_name: The owners_name of this IInvestmentAccountOwnershipData.
        :param ownership_percent: The ownership_percent of this IInvestmentAccountOwnershipData.
        """
        self.openapi_types = {
            'owner': str,
            'owners_name': str,
            'ownership_percent': Percent
        }

        self.attribute_map = {
            'owner': 'owner',
            'owners_name': 'ownersName',
            'ownership_percent': 'ownershipPercent'
        }

        self._owner = owner
        self._owners_name = owners_name
        self._ownership_percent = ownership_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IInvestmentAccountOwnershipData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IInvestmentAccountOwnershipData of this IInvestmentAccountOwnershipData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner(self):
        """Gets the owner of this IInvestmentAccountOwnershipData.


        :return: The owner of this IInvestmentAccountOwnershipData.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IInvestmentAccountOwnershipData.


        :param owner: The owner of this IInvestmentAccountOwnershipData.
        :type owner: str
        """
        allowed_values = ["All", "Head1", "Head2", "NonHead1", "NonHead2", "NonHead3", "NonHead4", "NonHead5", "NonHead6", "NonHead7", "NonHead8", "NonHead9", "CommunityProperty", "Joint", "Other", "AllDependents", "AllFamilyMembers", "Corporation"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def owners_name(self):
        """Gets the owners_name of this IInvestmentAccountOwnershipData.


        :return: The owners_name of this IInvestmentAccountOwnershipData.
        :rtype: str
        """
        return self._owners_name

    @owners_name.setter
    def owners_name(self, owners_name):
        """Sets the owners_name of this IInvestmentAccountOwnershipData.


        :param owners_name: The owners_name of this IInvestmentAccountOwnershipData.
        :type owners_name: str
        """

        self._owners_name = owners_name

    @property
    def ownership_percent(self):
        """Gets the ownership_percent of this IInvestmentAccountOwnershipData.


        :return: The ownership_percent of this IInvestmentAccountOwnershipData.
        :rtype: Percent
        """
        return self._ownership_percent

    @ownership_percent.setter
    def ownership_percent(self, ownership_percent):
        """Sets the ownership_percent of this IInvestmentAccountOwnershipData.


        :param ownership_percent: The ownership_percent of this IInvestmentAccountOwnershipData.
        :type ownership_percent: Percent
        """

        self._ownership_percent = ownership_percent
