# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formatted_enum_type_private_corporation_share_type import FormattedEnumTypePrivateCorporationShareType
from openapi_server.models.i_activity_data import IActivityData
from openapi_server import util


class IShareRedemption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_data: IActivityData=None, share_id: int=None, share_type: FormattedEnumTypePrivateCorporationShareType=None, shareholder: str=None):
        """IShareRedemption - a model defined in OpenAPI

        :param activity_data: The activity_data of this IShareRedemption.
        :param share_id: The share_id of this IShareRedemption.
        :param share_type: The share_type of this IShareRedemption.
        :param shareholder: The shareholder of this IShareRedemption.
        """
        self.openapi_types = {
            'activity_data': IActivityData,
            'share_id': int,
            'share_type': FormattedEnumTypePrivateCorporationShareType,
            'shareholder': str
        }

        self.attribute_map = {
            'activity_data': 'activityData',
            'share_id': 'shareId',
            'share_type': 'shareType',
            'shareholder': 'shareholder'
        }

        self._activity_data = activity_data
        self._share_id = share_id
        self._share_type = share_type
        self._shareholder = shareholder

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IShareRedemption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IShareRedemption of this IShareRedemption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_data(self):
        """Gets the activity_data of this IShareRedemption.


        :return: The activity_data of this IShareRedemption.
        :rtype: IActivityData
        """
        return self._activity_data

    @activity_data.setter
    def activity_data(self, activity_data):
        """Sets the activity_data of this IShareRedemption.


        :param activity_data: The activity_data of this IShareRedemption.
        :type activity_data: IActivityData
        """

        self._activity_data = activity_data

    @property
    def share_id(self):
        """Gets the share_id of this IShareRedemption.


        :return: The share_id of this IShareRedemption.
        :rtype: int
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this IShareRedemption.


        :param share_id: The share_id of this IShareRedemption.
        :type share_id: int
        """

        self._share_id = share_id

    @property
    def share_type(self):
        """Gets the share_type of this IShareRedemption.


        :return: The share_type of this IShareRedemption.
        :rtype: FormattedEnumTypePrivateCorporationShareType
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this IShareRedemption.


        :param share_type: The share_type of this IShareRedemption.
        :type share_type: FormattedEnumTypePrivateCorporationShareType
        """

        self._share_type = share_type

    @property
    def shareholder(self):
        """Gets the shareholder of this IShareRedemption.


        :return: The shareholder of this IShareRedemption.
        :rtype: str
        """
        return self._shareholder

    @shareholder.setter
    def shareholder(self, shareholder):
        """Sets the shareholder of this IShareRedemption.


        :param shareholder: The shareholder of this IShareRedemption.
        :type shareholder: str
        """
        allowed_values = ["Undefined", "Head1", "Head2", "Other"]  # noqa: E501
        if shareholder not in allowed_values:
            raise ValueError(
                "Invalid value for `shareholder` ({0}), must be one of {1}"
                .format(shareholder, allowed_values)
            )

        self._shareholder = shareholder
