# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, projected_abilities: float=None, projected_need: float=None, projected_retirement_asset_values: float=None, year: int=None):
        """AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection - a model defined in OpenAPI

        :param projected_abilities: The projected_abilities of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :param projected_need: The projected_need of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :param projected_retirement_asset_values: The projected_retirement_asset_values of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :param year: The year of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        """
        self.openapi_types = {
            'projected_abilities': float,
            'projected_need': float,
            'projected_retirement_asset_values': float,
            'year': int
        }

        self.attribute_map = {
            'projected_abilities': 'projectedAbilities',
            'projected_need': 'projectedNeed',
            'projected_retirement_asset_values': 'projectedRetirementAssetValues',
            'year': 'year'
        }

        self._projected_abilities = projected_abilities
        self._projected_need = projected_need
        self._projected_retirement_asset_values = projected_retirement_asset_values
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def projected_abilities(self):
        """Gets the projected_abilities of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :return: The projected_abilities of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :rtype: float
        """
        return self._projected_abilities

    @projected_abilities.setter
    def projected_abilities(self, projected_abilities):
        """Sets the projected_abilities of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :param projected_abilities: The projected_abilities of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :type projected_abilities: float
        """

        self._projected_abilities = projected_abilities

    @property
    def projected_need(self):
        """Gets the projected_need of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :return: The projected_need of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :rtype: float
        """
        return self._projected_need

    @projected_need.setter
    def projected_need(self, projected_need):
        """Sets the projected_need of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :param projected_need: The projected_need of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :type projected_need: float
        """

        self._projected_need = projected_need

    @property
    def projected_retirement_asset_values(self):
        """Gets the projected_retirement_asset_values of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :return: The projected_retirement_asset_values of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :rtype: float
        """
        return self._projected_retirement_asset_values

    @projected_retirement_asset_values.setter
    def projected_retirement_asset_values(self, projected_retirement_asset_values):
        """Sets the projected_retirement_asset_values of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :param projected_retirement_asset_values: The projected_retirement_asset_values of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :type projected_retirement_asset_values: float
        """

        self._projected_retirement_asset_values = projected_retirement_asset_values

    @property
    def year(self):
        """Gets the year of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :return: The year of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.


        :param year: The year of this AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection.
        :type year: int
        """

        self._year = year
