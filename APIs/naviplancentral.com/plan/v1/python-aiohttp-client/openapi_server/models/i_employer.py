# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_address import IAddress
from openapi_server.models.i_business_phone_numbers import IBusinessPhoneNumbers
from openapi_server import util


class IEmployer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: IAddress=None, name: str=None, phone: IBusinessPhoneNumbers=None):
        """IEmployer - a model defined in OpenAPI

        :param address: The address of this IEmployer.
        :param name: The name of this IEmployer.
        :param phone: The phone of this IEmployer.
        """
        self.openapi_types = {
            'address': IAddress,
            'name': str,
            'phone': IBusinessPhoneNumbers
        }

        self.attribute_map = {
            'address': 'address',
            'name': 'name',
            'phone': 'phone'
        }

        self._address = address
        self._name = name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEmployer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEmployer of this IEmployer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IEmployer.


        :return: The address of this IEmployer.
        :rtype: IAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IEmployer.


        :param address: The address of this IEmployer.
        :type address: IAddress
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this IEmployer.


        :return: The name of this IEmployer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEmployer.


        :param name: The name of this IEmployer.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this IEmployer.


        :return: The phone of this IEmployer.
        :rtype: IBusinessPhoneNumbers
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this IEmployer.


        :param phone: The phone of this IEmployer.
        :type phone: IBusinessPhoneNumbers
        """

        self._phone = phone
