/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NaviPlanApi);
  }
}(this, function(expect, NaviPlanApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NaviPlanApi.IAssumptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IAssumptions', function() {
    it('should create an instance of IAssumptions', function() {
      // uncomment below and update the code to test IAssumptions
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be.a(NaviPlanApi.IAssumptions);
    });

    it('should have the property anyHeadAlreadyRetired (base name: "anyHeadAlreadyRetired")', function() {
      // uncomment below and update the code to test the property anyHeadAlreadyRetired
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property bothRetired (base name: "bothRetired")', function() {
      // uncomment below and update the code to test the property bothRetired
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property bucketing (base name: "bucketing")', function() {
      // uncomment below and update the code to test the property bucketing
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property client (base name: "client")', function() {
      // uncomment below and update the code to test the property client
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property coClient (base name: "coClient")', function() {
      // uncomment below and update the code to test the property coClient
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property firstToDieDate (base name: "firstToDieDate")', function() {
      // uncomment below and update the code to test the property firstToDieDate
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property firstToDieMember (base name: "firstToDieMember")', function() {
      // uncomment below and update the code to test the property firstToDieMember
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property firstToRetireDate (base name: "firstToRetireDate")', function() {
      // uncomment below and update the code to test the property firstToRetireDate
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property inflationRate (base name: "inflationRate")', function() {
      // uncomment below and update the code to test the property inflationRate
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property lastToDieDate (base name: "lastToDieDate")', function() {
      // uncomment below and update the code to test the property lastToDieDate
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property lastToDieMember (base name: "lastToDieMember")', function() {
      // uncomment below and update the code to test the property lastToDieMember
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property lastToRetireDate (base name: "lastToRetireDate")', function() {
      // uncomment below and update the code to test the property lastToRetireDate
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property retirementYearAdjustedIfAlreadyRetired (base name: "retirementYearAdjustedIfAlreadyRetired")', function() {
      // uncomment below and update the code to test the property retirementYearAdjustedIfAlreadyRetired
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property splitSurplusSavingsStrategiesEnabled (base name: "splitSurplusSavingsStrategiesEnabled")', function() {
      // uncomment below and update the code to test the property splitSurplusSavingsStrategiesEnabled
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

    it('should have the property taxMethod (base name: "taxMethod")', function() {
      // uncomment below and update the code to test the property taxMethod
      //var instance = new NaviPlanApi.IAssumptions();
      //expect(instance).to.be();
    });

  });

}));
