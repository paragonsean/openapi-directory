/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IAccumulationCategoryData from './IAccumulationCategoryData';

/**
 * The AssetsFundingGoalSummary model module.
 * @module model/AssetsFundingGoalSummary
 * @version v1
 */
class AssetsFundingGoalSummary {
    /**
     * Constructs a new <code>AssetsFundingGoalSummary</code>.
     * @alias module:model/AssetsFundingGoalSummary
     */
    constructor() { 
        
        AssetsFundingGoalSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetsFundingGoalSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetsFundingGoalSummary} obj Optional instance to populate.
     * @return {module:model/AssetsFundingGoalSummary} The populated <code>AssetsFundingGoalSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetsFundingGoalSummary();

            if (data.hasOwnProperty('contributions')) {
                obj['contributions'] = IAccumulationCategoryData.constructFromObject(data['contributions']);
            }
            if (data.hasOwnProperty('endOfYearAssets')) {
                obj['endOfYearAssets'] = IAccumulationCategoryData.constructFromObject(data['endOfYearAssets']);
            }
            if (data.hasOwnProperty('goalType')) {
                obj['goalType'] = ApiClient.convertToType(data['goalType'], 'String');
            }
            if (data.hasOwnProperty('growthAndReinvestments')) {
                obj['growthAndReinvestments'] = IAccumulationCategoryData.constructFromObject(data['growthAndReinvestments']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'Number');
            }
            if (data.hasOwnProperty('netWithdrawals')) {
                obj['netWithdrawals'] = ApiClient.convertToType(data['netWithdrawals'], 'Number');
            }
            if (data.hasOwnProperty('withdrawals')) {
                obj['withdrawals'] = IAccumulationCategoryData.constructFromObject(data['withdrawals']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetsFundingGoalSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetsFundingGoalSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contributions`
        if (data['contributions']) { // data not null
          IAccumulationCategoryData.validateJSON(data['contributions']);
        }
        // validate the optional field `endOfYearAssets`
        if (data['endOfYearAssets']) { // data not null
          IAccumulationCategoryData.validateJSON(data['endOfYearAssets']);
        }
        // ensure the json data is a string
        if (data['goalType'] && !(typeof data['goalType'] === 'string' || data['goalType'] instanceof String)) {
            throw new Error("Expected the field `goalType` to be a primitive type in the JSON string but got " + data['goalType']);
        }
        // validate the optional field `growthAndReinvestments`
        if (data['growthAndReinvestments']) { // data not null
          IAccumulationCategoryData.validateJSON(data['growthAndReinvestments']);
        }
        // validate the optional field `withdrawals`
        if (data['withdrawals']) { // data not null
          IAccumulationCategoryData.validateJSON(data['withdrawals']);
        }

        return true;
    }


}



/**
 * @member {module:model/IAccumulationCategoryData} contributions
 */
AssetsFundingGoalSummary.prototype['contributions'] = undefined;

/**
 * @member {module:model/IAccumulationCategoryData} endOfYearAssets
 */
AssetsFundingGoalSummary.prototype['endOfYearAssets'] = undefined;

/**
 * @member {String} goalType
 */
AssetsFundingGoalSummary.prototype['goalType'] = undefined;

/**
 * @member {module:model/IAccumulationCategoryData} growthAndReinvestments
 */
AssetsFundingGoalSummary.prototype['growthAndReinvestments'] = undefined;

/**
 * @member {Number} identifier
 */
AssetsFundingGoalSummary.prototype['identifier'] = undefined;

/**
 * @member {Number} netWithdrawals
 */
AssetsFundingGoalSummary.prototype['netWithdrawals'] = undefined;

/**
 * @member {module:model/IAccumulationCategoryData} withdrawals
 */
AssetsFundingGoalSummary.prototype['withdrawals'] = undefined;






export default AssetsFundingGoalSummary;

