/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import CurrencyWithGrowth from './CurrencyWithGrowth';
import IFormattedFrequency from './IFormattedFrequency';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IInsurancePremium model module.
 * @module model/IInsurancePremium
 * @version v1
 */
class IInsurancePremium {
    /**
     * Constructs a new <code>IInsurancePremium</code>.
     * @alias module:model/IInsurancePremium
     */
    constructor() { 
        
        IInsurancePremium.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IInsurancePremium</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IInsurancePremium} obj Optional instance to populate.
     * @return {module:model/IInsurancePremium} The populated <code>IInsurancePremium</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IInsurancePremium();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = CurrencyWithGrowth.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('annualAmount')) {
                obj['annualAmount'] = Currency.constructFromObject(data['annualAmount']);
            }
            if (data.hasOwnProperty('ceaseDate')) {
                obj['ceaseDate'] = ModelDate.constructFromObject(data['ceaseDate']);
            }
            if (data.hasOwnProperty('formattedPayingMember')) {
                obj['formattedPayingMember'] = ApiClient.convertToType(data['formattedPayingMember'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = IFormattedFrequency.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('payingMember')) {
                obj['payingMember'] = ApiClient.convertToType(data['payingMember'], 'String');
            }
            if (data.hasOwnProperty('premiumRefundAmount')) {
                obj['premiumRefundAmount'] = Percent.constructFromObject(data['premiumRefundAmount']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ModelDate.constructFromObject(data['startDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IInsurancePremium</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IInsurancePremium</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          CurrencyWithGrowth.validateJSON(data['amount']);
        }
        // validate the optional field `annualAmount`
        if (data['annualAmount']) { // data not null
          Currency.validateJSON(data['annualAmount']);
        }
        // validate the optional field `ceaseDate`
        if (data['ceaseDate']) { // data not null
          ModelDate.validateJSON(data['ceaseDate']);
        }
        // ensure the json data is a string
        if (data['formattedPayingMember'] && !(typeof data['formattedPayingMember'] === 'string' || data['formattedPayingMember'] instanceof String)) {
            throw new Error("Expected the field `formattedPayingMember` to be a primitive type in the JSON string but got " + data['formattedPayingMember']);
        }
        // validate the optional field `frequency`
        if (data['frequency']) { // data not null
          IFormattedFrequency.validateJSON(data['frequency']);
        }
        // ensure the json data is a string
        if (data['payingMember'] && !(typeof data['payingMember'] === 'string' || data['payingMember'] instanceof String)) {
            throw new Error("Expected the field `payingMember` to be a primitive type in the JSON string but got " + data['payingMember']);
        }
        // validate the optional field `premiumRefundAmount`
        if (data['premiumRefundAmount']) { // data not null
          Percent.validateJSON(data['premiumRefundAmount']);
        }
        // validate the optional field `startDate`
        if (data['startDate']) { // data not null
          ModelDate.validateJSON(data['startDate']);
        }

        return true;
    }


}



/**
 * @member {module:model/CurrencyWithGrowth} amount
 */
IInsurancePremium.prototype['amount'] = undefined;

/**
 * @member {module:model/Currency} annualAmount
 */
IInsurancePremium.prototype['annualAmount'] = undefined;

/**
 * @member {module:model/ModelDate} ceaseDate
 */
IInsurancePremium.prototype['ceaseDate'] = undefined;

/**
 * @member {String} formattedPayingMember
 */
IInsurancePremium.prototype['formattedPayingMember'] = undefined;

/**
 * @member {module:model/IFormattedFrequency} frequency
 */
IInsurancePremium.prototype['frequency'] = undefined;

/**
 * @member {module:model/IInsurancePremium.PayingMemberEnum} payingMember
 */
IInsurancePremium.prototype['payingMember'] = undefined;

/**
 * @member {module:model/Percent} premiumRefundAmount
 */
IInsurancePremium.prototype['premiumRefundAmount'] = undefined;

/**
 * @member {module:model/ModelDate} startDate
 */
IInsurancePremium.prototype['startDate'] = undefined;





/**
 * Allowed values for the <code>payingMember</code> property.
 * @enum {String}
 * @readonly
 */
IInsurancePremium['PayingMemberEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "NonHead1"
     * @const
     */
    "NonHead1": "NonHead1",

    /**
     * value: "NonHead2"
     * @const
     */
    "NonHead2": "NonHead2",

    /**
     * value: "NonHead3"
     * @const
     */
    "NonHead3": "NonHead3",

    /**
     * value: "NonHead4"
     * @const
     */
    "NonHead4": "NonHead4",

    /**
     * value: "NonHead5"
     * @const
     */
    "NonHead5": "NonHead5",

    /**
     * value: "NonHead6"
     * @const
     */
    "NonHead6": "NonHead6",

    /**
     * value: "NonHead7"
     * @const
     */
    "NonHead7": "NonHead7",

    /**
     * value: "NonHead8"
     * @const
     */
    "NonHead8": "NonHead8",

    /**
     * value: "NonHead9"
     * @const
     */
    "NonHead9": "NonHead9",

    /**
     * value: "CommunityProperty"
     * @const
     */
    "CommunityProperty": "CommunityProperty",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "AllDependents"
     * @const
     */
    "AllDependents": "AllDependents",

    /**
     * value: "AllFamilyMembers"
     * @const
     */
    "AllFamilyMembers": "AllFamilyMembers",

    /**
     * value: "Corporation"
     * @const
     */
    "Corporation": "Corporation"
};



export default IInsurancePremium;

