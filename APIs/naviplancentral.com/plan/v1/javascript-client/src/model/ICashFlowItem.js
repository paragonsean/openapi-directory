/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';

/**
 * The ICashFlowItem model module.
 * @module model/ICashFlowItem
 * @version v1
 */
class ICashFlowItem {
    /**
     * Constructs a new <code>ICashFlowItem</code>.
     * @alias module:model/ICashFlowItem
     */
    constructor() { 
        
        ICashFlowItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ICashFlowItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ICashFlowItem} obj Optional instance to populate.
     * @return {module:model/ICashFlowItem} The populated <code>ICashFlowItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ICashFlowItem();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('descriptionWithOwner')) {
                obj['descriptionWithOwner'] = ApiClient.convertToType(data['descriptionWithOwner'], 'String');
            }
            if (data.hasOwnProperty('isCPP')) {
                obj['isCPP'] = ApiClient.convertToType(data['isCPP'], 'Boolean');
            }
            if (data.hasOwnProperty('isOAS')) {
                obj['isOAS'] = ApiClient.convertToType(data['isOAS'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceId')) {
                obj['sourceId'] = ApiClient.convertToType(data['sourceId'], 'String');
            }
            if (data.hasOwnProperty('typeDescription')) {
                obj['typeDescription'] = ApiClient.convertToType(data['typeDescription'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = Currency.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ICashFlowItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ICashFlowItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['descriptionWithOwner'] && !(typeof data['descriptionWithOwner'] === 'string' || data['descriptionWithOwner'] instanceof String)) {
            throw new Error("Expected the field `descriptionWithOwner` to be a primitive type in the JSON string but got " + data['descriptionWithOwner']);
        }
        // ensure the json data is a string
        if (data['sourceId'] && !(typeof data['sourceId'] === 'string' || data['sourceId'] instanceof String)) {
            throw new Error("Expected the field `sourceId` to be a primitive type in the JSON string but got " + data['sourceId']);
        }
        // ensure the json data is a string
        if (data['typeDescription'] && !(typeof data['typeDescription'] === 'string' || data['typeDescription'] instanceof String)) {
            throw new Error("Expected the field `typeDescription` to be a primitive type in the JSON string but got " + data['typeDescription']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          Currency.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
ICashFlowItem.prototype['description'] = undefined;

/**
 * @member {String} descriptionWithOwner
 */
ICashFlowItem.prototype['descriptionWithOwner'] = undefined;

/**
 * @member {Boolean} isCPP
 */
ICashFlowItem.prototype['isCPP'] = undefined;

/**
 * @member {Boolean} isOAS
 */
ICashFlowItem.prototype['isOAS'] = undefined;

/**
 * @member {String} sourceId
 */
ICashFlowItem.prototype['sourceId'] = undefined;

/**
 * @member {String} typeDescription
 */
ICashFlowItem.prototype['typeDescription'] = undefined;

/**
 * @member {module:model/Currency} value
 */
ICashFlowItem.prototype['value'] = undefined;






export default ICashFlowItem;

