/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import IHolding from './IHolding';
import IRateOfReturnDetails from './IRateOfReturnDetails';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IInvestmentAccount model module.
 * @module model/IInvestmentAccount
 * @version v1
 */
class IInvestmentAccount {
    /**
     * Constructs a new <code>IInvestmentAccount</code>.
     * @alias module:model/IInvestmentAccount
     */
    constructor() { 
        
        IInvestmentAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IInvestmentAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IInvestmentAccount} obj Optional instance to populate.
     * @return {module:model/IInvestmentAccount} The populated <code>IInvestmentAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IInvestmentAccount();

            if (data.hasOwnProperty('annualFee')) {
                obj['annualFee'] = Percent.constructFromObject(data['annualFee']);
            }
            if (data.hasOwnProperty('costBasis')) {
                obj['costBasis'] = Currency.constructFromObject(data['costBasis']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('excludeInAA')) {
                obj['excludeInAA'] = ApiClient.convertToType(data['excludeInAA'], 'Boolean');
            }
            if (data.hasOwnProperty('holdings')) {
                obj['holdings'] = ApiClient.convertToType(data['holdings'], [IHolding]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('marketValue')) {
                obj['marketValue'] = Currency.constructFromObject(data['marketValue']);
            }
            if (data.hasOwnProperty('rateOfReturn')) {
                obj['rateOfReturn'] = IRateOfReturnDetails.constructFromObject(data['rateOfReturn']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valuationDate')) {
                obj['valuationDate'] = ModelDate.constructFromObject(data['valuationDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IInvestmentAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IInvestmentAccount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualFee`
        if (data['annualFee']) { // data not null
          Percent.validateJSON(data['annualFee']);
        }
        // validate the optional field `costBasis`
        if (data['costBasis']) { // data not null
          Currency.validateJSON(data['costBasis']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['holdings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['holdings'])) {
                throw new Error("Expected the field `holdings` to be an array in the JSON data but got " + data['holdings']);
            }
            // validate the optional field `holdings` (array)
            for (const item of data['holdings']) {
                IHolding.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `marketValue`
        if (data['marketValue']) { // data not null
          Currency.validateJSON(data['marketValue']);
        }
        // validate the optional field `rateOfReturn`
        if (data['rateOfReturn']) { // data not null
          IRateOfReturnDetails.validateJSON(data['rateOfReturn']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `valuationDate`
        if (data['valuationDate']) { // data not null
          ModelDate.validateJSON(data['valuationDate']);
        }

        return true;
    }


}



/**
 * @member {module:model/Percent} annualFee
 */
IInvestmentAccount.prototype['annualFee'] = undefined;

/**
 * @member {module:model/Currency} costBasis
 */
IInvestmentAccount.prototype['costBasis'] = undefined;

/**
 * @member {String} description
 */
IInvestmentAccount.prototype['description'] = undefined;

/**
 * @member {Boolean} excludeInAA
 */
IInvestmentAccount.prototype['excludeInAA'] = undefined;

/**
 * @member {Array.<module:model/IHolding>} holdings
 */
IInvestmentAccount.prototype['holdings'] = undefined;

/**
 * @member {String} id
 */
IInvestmentAccount.prototype['id'] = undefined;

/**
 * @member {module:model/Currency} marketValue
 */
IInvestmentAccount.prototype['marketValue'] = undefined;

/**
 * @member {module:model/IRateOfReturnDetails} rateOfReturn
 */
IInvestmentAccount.prototype['rateOfReturn'] = undefined;

/**
 * @member {String} type
 */
IInvestmentAccount.prototype['type'] = undefined;

/**
 * @member {module:model/ModelDate} valuationDate
 */
IInvestmentAccount.prototype['valuationDate'] = undefined;






export default IInvestmentAccount;

