/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import IAssetId from './IAssetId';
import IBusinessEntityActivity from './IBusinessEntityActivity';
import ILiquidationEvent from './ILiquidationEvent';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IBusinessEntity model module.
 * @module model/IBusinessEntity
 * @version v1
 */
class IBusinessEntity {
    /**
     * Constructs a new <code>IBusinessEntity</code>.
     * @alias module:model/IBusinessEntity
     */
    constructor() { 
        
        IBusinessEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IBusinessEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IBusinessEntity} obj Optional instance to populate.
     * @return {module:model/IBusinessEntity} The populated <code>IBusinessEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IBusinessEntity();

            if (data.hasOwnProperty('activities')) {
                obj['activities'] = ApiClient.convertToType(data['activities'], [IBusinessEntityActivity]);
            }
            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = IAssetId.constructFromObject(data['assetId']);
            }
            if (data.hasOwnProperty('businessType')) {
                obj['businessType'] = ApiClient.convertToType(data['businessType'], 'String');
            }
            if (data.hasOwnProperty('businessTypeFormatted')) {
                obj['businessTypeFormatted'] = ApiClient.convertToType(data['businessTypeFormatted'], 'String');
            }
            if (data.hasOwnProperty('currentAnnualDistributions')) {
                obj['currentAnnualDistributions'] = Currency.constructFromObject(data['currentAnnualDistributions']);
            }
            if (data.hasOwnProperty('currentAnnualDividends')) {
                obj['currentAnnualDividends'] = Currency.constructFromObject(data['currentAnnualDividends']);
            }
            if (data.hasOwnProperty('currentAnnualGrowthRate')) {
                obj['currentAnnualGrowthRate'] = Percent.constructFromObject(data['currentAnnualGrowthRate']);
            }
            if (data.hasOwnProperty('currentAnnualNetIncome')) {
                obj['currentAnnualNetIncome'] = Currency.constructFromObject(data['currentAnnualNetIncome']);
            }
            if (data.hasOwnProperty('entityName')) {
                obj['entityName'] = ApiClient.convertToType(data['entityName'], 'String');
            }
            if (data.hasOwnProperty('liquidationEvent')) {
                obj['liquidationEvent'] = ILiquidationEvent.constructFromObject(data['liquidationEvent']);
            }
            if (data.hasOwnProperty('marketValuationDate')) {
                obj['marketValuationDate'] = ModelDate.constructFromObject(data['marketValuationDate']);
            }
            if (data.hasOwnProperty('marketValue')) {
                obj['marketValue'] = Currency.constructFromObject(data['marketValue']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('purchaseAmount')) {
                obj['purchaseAmount'] = Currency.constructFromObject(data['purchaseAmount']);
            }
            if (data.hasOwnProperty('purchaseDate')) {
                obj['purchaseDate'] = ModelDate.constructFromObject(data['purchaseDate']);
            }
            if (data.hasOwnProperty('standardDeviation')) {
                obj['standardDeviation'] = Percent.constructFromObject(data['standardDeviation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IBusinessEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IBusinessEntity</code>.
     */
    static validateJSON(data) {
        if (data['activities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activities'])) {
                throw new Error("Expected the field `activities` to be an array in the JSON data but got " + data['activities']);
            }
            // validate the optional field `activities` (array)
            for (const item of data['activities']) {
                IBusinessEntityActivity.validateJSON(item);
            };
        }
        // validate the optional field `assetId`
        if (data['assetId']) { // data not null
          IAssetId.validateJSON(data['assetId']);
        }
        // ensure the json data is a string
        if (data['businessType'] && !(typeof data['businessType'] === 'string' || data['businessType'] instanceof String)) {
            throw new Error("Expected the field `businessType` to be a primitive type in the JSON string but got " + data['businessType']);
        }
        // ensure the json data is a string
        if (data['businessTypeFormatted'] && !(typeof data['businessTypeFormatted'] === 'string' || data['businessTypeFormatted'] instanceof String)) {
            throw new Error("Expected the field `businessTypeFormatted` to be a primitive type in the JSON string but got " + data['businessTypeFormatted']);
        }
        // validate the optional field `currentAnnualDistributions`
        if (data['currentAnnualDistributions']) { // data not null
          Currency.validateJSON(data['currentAnnualDistributions']);
        }
        // validate the optional field `currentAnnualDividends`
        if (data['currentAnnualDividends']) { // data not null
          Currency.validateJSON(data['currentAnnualDividends']);
        }
        // validate the optional field `currentAnnualGrowthRate`
        if (data['currentAnnualGrowthRate']) { // data not null
          Percent.validateJSON(data['currentAnnualGrowthRate']);
        }
        // validate the optional field `currentAnnualNetIncome`
        if (data['currentAnnualNetIncome']) { // data not null
          Currency.validateJSON(data['currentAnnualNetIncome']);
        }
        // ensure the json data is a string
        if (data['entityName'] && !(typeof data['entityName'] === 'string' || data['entityName'] instanceof String)) {
            throw new Error("Expected the field `entityName` to be a primitive type in the JSON string but got " + data['entityName']);
        }
        // validate the optional field `liquidationEvent`
        if (data['liquidationEvent']) { // data not null
          ILiquidationEvent.validateJSON(data['liquidationEvent']);
        }
        // validate the optional field `marketValuationDate`
        if (data['marketValuationDate']) { // data not null
          ModelDate.validateJSON(data['marketValuationDate']);
        }
        // validate the optional field `marketValue`
        if (data['marketValue']) { // data not null
          Currency.validateJSON(data['marketValue']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `purchaseAmount`
        if (data['purchaseAmount']) { // data not null
          Currency.validateJSON(data['purchaseAmount']);
        }
        // validate the optional field `purchaseDate`
        if (data['purchaseDate']) { // data not null
          ModelDate.validateJSON(data['purchaseDate']);
        }
        // validate the optional field `standardDeviation`
        if (data['standardDeviation']) { // data not null
          Percent.validateJSON(data['standardDeviation']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/IBusinessEntityActivity>} activities
 */
IBusinessEntity.prototype['activities'] = undefined;

/**
 * @member {module:model/IAssetId} assetId
 */
IBusinessEntity.prototype['assetId'] = undefined;

/**
 * @member {module:model/IBusinessEntity.BusinessTypeEnum} businessType
 */
IBusinessEntity.prototype['businessType'] = undefined;

/**
 * @member {String} businessTypeFormatted
 */
IBusinessEntity.prototype['businessTypeFormatted'] = undefined;

/**
 * @member {module:model/Currency} currentAnnualDistributions
 */
IBusinessEntity.prototype['currentAnnualDistributions'] = undefined;

/**
 * @member {module:model/Currency} currentAnnualDividends
 */
IBusinessEntity.prototype['currentAnnualDividends'] = undefined;

/**
 * @member {module:model/Percent} currentAnnualGrowthRate
 */
IBusinessEntity.prototype['currentAnnualGrowthRate'] = undefined;

/**
 * @member {module:model/Currency} currentAnnualNetIncome
 */
IBusinessEntity.prototype['currentAnnualNetIncome'] = undefined;

/**
 * @member {String} entityName
 */
IBusinessEntity.prototype['entityName'] = undefined;

/**
 * @member {module:model/ILiquidationEvent} liquidationEvent
 */
IBusinessEntity.prototype['liquidationEvent'] = undefined;

/**
 * @member {module:model/ModelDate} marketValuationDate
 */
IBusinessEntity.prototype['marketValuationDate'] = undefined;

/**
 * @member {module:model/Currency} marketValue
 */
IBusinessEntity.prototype['marketValue'] = undefined;

/**
 * @member {String} owner
 */
IBusinessEntity.prototype['owner'] = undefined;

/**
 * @member {module:model/Currency} purchaseAmount
 */
IBusinessEntity.prototype['purchaseAmount'] = undefined;

/**
 * @member {module:model/ModelDate} purchaseDate
 */
IBusinessEntity.prototype['purchaseDate'] = undefined;

/**
 * @member {module:model/Percent} standardDeviation
 */
IBusinessEntity.prototype['standardDeviation'] = undefined;





/**
 * Allowed values for the <code>businessType</code> property.
 * @enum {String}
 * @readonly
 */
IBusinessEntity['BusinessTypeEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "LLC"
     * @const
     */
    "LLC": "LLC",

    /**
     * value: "Partnership"
     * @const
     */
    "Partnership": "Partnership",

    /**
     * value: "SCorporation"
     * @const
     */
    "SCorporation": "SCorporation",

    /**
     * value: "CCorporation"
     * @const
     */
    "CCorporation": "CCorporation"
};



export default IBusinessEntity;

