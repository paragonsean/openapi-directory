/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import DescriptiveBoolean from './DescriptiveBoolean';
import IInsurancePremium from './IInsurancePremium';
import ModelDate from './ModelDate';
import TimePeriod from './TimePeriod';

/**
 * The ILifeInsurancePolicy model module.
 * @module model/ILifeInsurancePolicy
 * @version v1
 */
class ILifeInsurancePolicy {
    /**
     * Constructs a new <code>ILifeInsurancePolicy</code>.
     * @alias module:model/ILifeInsurancePolicy
     */
    constructor() { 
        
        ILifeInsurancePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ILifeInsurancePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ILifeInsurancePolicy} obj Optional instance to populate.
     * @return {module:model/ILifeInsurancePolicy} The populated <code>ILifeInsurancePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ILifeInsurancePolicy();

            if (data.hasOwnProperty('beneficiaryName')) {
                obj['beneficiaryName'] = ApiClient.convertToType(data['beneficiaryName'], 'String');
            }
            if (data.hasOwnProperty('benefitPeriod')) {
                obj['benefitPeriod'] = TimePeriod.constructFromObject(data['benefitPeriod']);
            }
            if (data.hasOwnProperty('cashSurrenderValue')) {
                obj['cashSurrenderValue'] = Currency.constructFromObject(data['cashSurrenderValue']);
            }
            if (data.hasOwnProperty('coverageCeaseDate')) {
                obj['coverageCeaseDate'] = ModelDate.constructFromObject(data['coverageCeaseDate']);
            }
            if (data.hasOwnProperty('dailyBenefitValue')) {
                obj['dailyBenefitValue'] = ApiClient.convertToType(data['dailyBenefitValue'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('effectiveDate')) {
                obj['effectiveDate'] = ModelDate.constructFromObject(data['effectiveDate']);
            }
            if (data.hasOwnProperty('formattedBenefitValue')) {
                obj['formattedBenefitValue'] = ApiClient.convertToType(data['formattedBenefitValue'], 'String');
            }
            if (data.hasOwnProperty('formattedInsuredType')) {
                obj['formattedInsuredType'] = ApiClient.convertToType(data['formattedInsuredType'], 'String');
            }
            if (data.hasOwnProperty('formattedPolicyType')) {
                obj['formattedPolicyType'] = ApiClient.convertToType(data['formattedPolicyType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insured')) {
                obj['insured'] = ApiClient.convertToType(data['insured'], 'String');
            }
            if (data.hasOwnProperty('isCSVPayableWithDeathBenefit')) {
                obj['isCSVPayableWithDeathBenefit'] = DescriptiveBoolean.constructFromObject(data['isCSVPayableWithDeathBenefit']);
            }
            if (data.hasOwnProperty('monthlyBenefitValue')) {
                obj['monthlyBenefitValue'] = ApiClient.convertToType(data['monthlyBenefitValue'], 'Number');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = ApiClient.convertToType(data['policyType'], 'String');
            }
            if (data.hasOwnProperty('premiumData')) {
                obj['premiumData'] = IInsurancePremium.constructFromObject(data['premiumData']);
            }
            if (data.hasOwnProperty('premiumsWaivedAtDisability')) {
                obj['premiumsWaivedAtDisability'] = DescriptiveBoolean.constructFromObject(data['premiumsWaivedAtDisability']);
            }
            if (data.hasOwnProperty('rawBenefitValue')) {
                obj['rawBenefitValue'] = ApiClient.convertToType(data['rawBenefitValue'], 'Number');
            }
            if (data.hasOwnProperty('waitingPeriod')) {
                obj['waitingPeriod'] = TimePeriod.constructFromObject(data['waitingPeriod']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ILifeInsurancePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ILifeInsurancePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['beneficiaryName'] && !(typeof data['beneficiaryName'] === 'string' || data['beneficiaryName'] instanceof String)) {
            throw new Error("Expected the field `beneficiaryName` to be a primitive type in the JSON string but got " + data['beneficiaryName']);
        }
        // validate the optional field `benefitPeriod`
        if (data['benefitPeriod']) { // data not null
          TimePeriod.validateJSON(data['benefitPeriod']);
        }
        // validate the optional field `cashSurrenderValue`
        if (data['cashSurrenderValue']) { // data not null
          Currency.validateJSON(data['cashSurrenderValue']);
        }
        // validate the optional field `coverageCeaseDate`
        if (data['coverageCeaseDate']) { // data not null
          ModelDate.validateJSON(data['coverageCeaseDate']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `effectiveDate`
        if (data['effectiveDate']) { // data not null
          ModelDate.validateJSON(data['effectiveDate']);
        }
        // ensure the json data is a string
        if (data['formattedBenefitValue'] && !(typeof data['formattedBenefitValue'] === 'string' || data['formattedBenefitValue'] instanceof String)) {
            throw new Error("Expected the field `formattedBenefitValue` to be a primitive type in the JSON string but got " + data['formattedBenefitValue']);
        }
        // ensure the json data is a string
        if (data['formattedInsuredType'] && !(typeof data['formattedInsuredType'] === 'string' || data['formattedInsuredType'] instanceof String)) {
            throw new Error("Expected the field `formattedInsuredType` to be a primitive type in the JSON string but got " + data['formattedInsuredType']);
        }
        // ensure the json data is a string
        if (data['formattedPolicyType'] && !(typeof data['formattedPolicyType'] === 'string' || data['formattedPolicyType'] instanceof String)) {
            throw new Error("Expected the field `formattedPolicyType` to be a primitive type in the JSON string but got " + data['formattedPolicyType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['insured'] && !(typeof data['insured'] === 'string' || data['insured'] instanceof String)) {
            throw new Error("Expected the field `insured` to be a primitive type in the JSON string but got " + data['insured']);
        }
        // validate the optional field `isCSVPayableWithDeathBenefit`
        if (data['isCSVPayableWithDeathBenefit']) { // data not null
          DescriptiveBoolean.validateJSON(data['isCSVPayableWithDeathBenefit']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['policyType'] && !(typeof data['policyType'] === 'string' || data['policyType'] instanceof String)) {
            throw new Error("Expected the field `policyType` to be a primitive type in the JSON string but got " + data['policyType']);
        }
        // validate the optional field `premiumData`
        if (data['premiumData']) { // data not null
          IInsurancePremium.validateJSON(data['premiumData']);
        }
        // validate the optional field `premiumsWaivedAtDisability`
        if (data['premiumsWaivedAtDisability']) { // data not null
          DescriptiveBoolean.validateJSON(data['premiumsWaivedAtDisability']);
        }
        // validate the optional field `waitingPeriod`
        if (data['waitingPeriod']) { // data not null
          TimePeriod.validateJSON(data['waitingPeriod']);
        }

        return true;
    }


}



/**
 * @member {String} beneficiaryName
 */
ILifeInsurancePolicy.prototype['beneficiaryName'] = undefined;

/**
 * @member {module:model/TimePeriod} benefitPeriod
 */
ILifeInsurancePolicy.prototype['benefitPeriod'] = undefined;

/**
 * @member {module:model/Currency} cashSurrenderValue
 */
ILifeInsurancePolicy.prototype['cashSurrenderValue'] = undefined;

/**
 * @member {module:model/ModelDate} coverageCeaseDate
 */
ILifeInsurancePolicy.prototype['coverageCeaseDate'] = undefined;

/**
 * @member {Number} dailyBenefitValue
 */
ILifeInsurancePolicy.prototype['dailyBenefitValue'] = undefined;

/**
 * @member {String} description
 */
ILifeInsurancePolicy.prototype['description'] = undefined;

/**
 * @member {module:model/ModelDate} effectiveDate
 */
ILifeInsurancePolicy.prototype['effectiveDate'] = undefined;

/**
 * @member {String} formattedBenefitValue
 */
ILifeInsurancePolicy.prototype['formattedBenefitValue'] = undefined;

/**
 * @member {String} formattedInsuredType
 */
ILifeInsurancePolicy.prototype['formattedInsuredType'] = undefined;

/**
 * @member {String} formattedPolicyType
 */
ILifeInsurancePolicy.prototype['formattedPolicyType'] = undefined;

/**
 * @member {String} id
 */
ILifeInsurancePolicy.prototype['id'] = undefined;

/**
 * @member {module:model/ILifeInsurancePolicy.InsuredEnum} insured
 */
ILifeInsurancePolicy.prototype['insured'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} isCSVPayableWithDeathBenefit
 */
ILifeInsurancePolicy.prototype['isCSVPayableWithDeathBenefit'] = undefined;

/**
 * @member {Number} monthlyBenefitValue
 */
ILifeInsurancePolicy.prototype['monthlyBenefitValue'] = undefined;

/**
 * @member {String} ownerName
 */
ILifeInsurancePolicy.prototype['ownerName'] = undefined;

/**
 * @member {module:model/ILifeInsurancePolicy.PolicyTypeEnum} policyType
 */
ILifeInsurancePolicy.prototype['policyType'] = undefined;

/**
 * @member {module:model/IInsurancePremium} premiumData
 */
ILifeInsurancePolicy.prototype['premiumData'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} premiumsWaivedAtDisability
 */
ILifeInsurancePolicy.prototype['premiumsWaivedAtDisability'] = undefined;

/**
 * @member {Number} rawBenefitValue
 */
ILifeInsurancePolicy.prototype['rawBenefitValue'] = undefined;

/**
 * @member {module:model/TimePeriod} waitingPeriod
 */
ILifeInsurancePolicy.prototype['waitingPeriod'] = undefined;





/**
 * Allowed values for the <code>insured</code> property.
 * @enum {String}
 * @readonly
 */
ILifeInsurancePolicy['InsuredEnum'] = {

    /**
     * value: "Client"
     * @const
     */
    "Client": "Client",

    /**
     * value: "CoClient"
     * @const
     */
    "CoClient": "CoClient",

    /**
     * value: "FirstToDie"
     * @const
     */
    "FirstToDie": "FirstToDie",

    /**
     * value: "SecondToDie"
     * @const
     */
    "SecondToDie": "SecondToDie",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>policyType</code> property.
 * @enum {String}
 * @readonly
 */
ILifeInsurancePolicy['PolicyTypeEnum'] = {

    /**
     * value: "WholeLife"
     * @const
     */
    "WholeLife": "WholeLife",

    /**
     * value: "UniversalLife"
     * @const
     */
    "UniversalLife": "UniversalLife",

    /**
     * value: "Term1Life"
     * @const
     */
    "Term1Life": "Term1Life",

    /**
     * value: "Term5Life"
     * @const
     */
    "Term5Life": "Term5Life",

    /**
     * value: "Term10Life"
     * @const
     */
    "Term10Life": "Term10Life",

    /**
     * value: "Term20Life"
     * @const
     */
    "Term20Life": "Term20Life",

    /**
     * value: "Term100Life"
     * @const
     */
    "Term100Life": "Term100Life",

    /**
     * value: "VariableLife"
     * @const
     */
    "VariableLife": "VariableLife",

    /**
     * value: "VariableUniversalLife"
     * @const
     */
    "VariableUniversalLife": "VariableUniversalLife",

    /**
     * value: "GroupLongTermDisability"
     * @const
     */
    "GroupLongTermDisability": "GroupLongTermDisability",

    /**
     * value: "GroupShortTermDisability"
     * @const
     */
    "GroupShortTermDisability": "GroupShortTermDisability",

    /**
     * value: "IndividualDisability"
     * @const
     */
    "IndividualDisability": "IndividualDisability",

    /**
     * value: "LongTermCare"
     * @const
     */
    "LongTermCare": "LongTermCare",

    /**
     * value: "CriticalIllness"
     * @const
     */
    "CriticalIllness": "CriticalIllness",

    /**
     * value: "MedicalCoveragePlan"
     * @const
     */
    "MedicalCoveragePlan": "MedicalCoveragePlan",

    /**
     * value: "CashToInsuredCoverage"
     * @const
     */
    "CashToInsuredCoverage": "CashToInsuredCoverage"
};



export default ILifeInsurancePolicy;

