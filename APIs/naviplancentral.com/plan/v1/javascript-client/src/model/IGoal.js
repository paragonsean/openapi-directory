/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoalId from './GoalId';
import IOptionalFieldCurrency from './IOptionalFieldCurrency';
import IOptionalFieldGoalCoveragePercent from './IOptionalFieldGoalCoveragePercent';
import IOptionalFieldYear from './IOptionalFieldYear';
import ModelDate from './ModelDate';

/**
 * The IGoal model module.
 * @module model/IGoal
 * @version v1
 */
class IGoal {
    /**
     * Constructs a new <code>IGoal</code>.
     * @alias module:model/IGoal
     */
    constructor() { 
        
        IGoal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IGoal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IGoal} obj Optional instance to populate.
     * @return {module:model/IGoal} The populated <code>IGoal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IGoal();

            if (data.hasOwnProperty('assetsRemainingAfterFundingGoal')) {
                obj['assetsRemainingAfterFundingGoal'] = IOptionalFieldCurrency.constructFromObject(data['assetsRemainingAfterFundingGoal']);
            }
            if (data.hasOwnProperty('coverage')) {
                obj['coverage'] = IOptionalFieldGoalCoveragePercent.constructFromObject(data['coverage']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ModelDate.constructFromObject(data['endDate']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = GoalId.constructFromObject(data['identifier']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ModelDate.constructFromObject(data['startDate']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('yearAssetsDepleted')) {
                obj['yearAssetsDepleted'] = IOptionalFieldYear.constructFromObject(data['yearAssetsDepleted']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IGoal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IGoal</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assetsRemainingAfterFundingGoal`
        if (data['assetsRemainingAfterFundingGoal']) { // data not null
          IOptionalFieldCurrency.validateJSON(data['assetsRemainingAfterFundingGoal']);
        }
        // validate the optional field `coverage`
        if (data['coverage']) { // data not null
          IOptionalFieldGoalCoveragePercent.validateJSON(data['coverage']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `endDate`
        if (data['endDate']) { // data not null
          ModelDate.validateJSON(data['endDate']);
        }
        // validate the optional field `identifier`
        if (data['identifier']) { // data not null
          GoalId.validateJSON(data['identifier']);
        }
        // validate the optional field `startDate`
        if (data['startDate']) { // data not null
          ModelDate.validateJSON(data['startDate']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `yearAssetsDepleted`
        if (data['yearAssetsDepleted']) { // data not null
          IOptionalFieldYear.validateJSON(data['yearAssetsDepleted']);
        }

        return true;
    }


}



/**
 * @member {module:model/IOptionalFieldCurrency} assetsRemainingAfterFundingGoal
 */
IGoal.prototype['assetsRemainingAfterFundingGoal'] = undefined;

/**
 * @member {module:model/IOptionalFieldGoalCoveragePercent} coverage
 */
IGoal.prototype['coverage'] = undefined;

/**
 * @member {String} description
 */
IGoal.prototype['description'] = undefined;

/**
 * @member {module:model/ModelDate} endDate
 */
IGoal.prototype['endDate'] = undefined;

/**
 * @member {module:model/GoalId} identifier
 */
IGoal.prototype['identifier'] = undefined;

/**
 * @member {module:model/ModelDate} startDate
 */
IGoal.prototype['startDate'] = undefined;

/**
 * @member {module:model/IGoal.TypeEnum} type
 */
IGoal.prototype['type'] = undefined;

/**
 * @member {module:model/IOptionalFieldYear} yearAssetsDepleted
 */
IGoal.prototype['yearAssetsDepleted'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IGoal['TypeEnum'] = {

    /**
     * value: "Retirement"
     * @const
     */
    "Retirement": "Retirement",

    /**
     * value: "SurvivorIncome"
     * @const
     */
    "SurvivorIncome": "SurvivorIncome",

    /**
     * value: "CriticalIllness"
     * @const
     */
    "CriticalIllness": "CriticalIllness",

    /**
     * value: "LongTermCareInsurance"
     * @const
     */
    "LongTermCareInsurance": "LongTermCareInsurance",

    /**
     * value: "Cashflow"
     * @const
     */
    "Cashflow": "Cashflow",

    /**
     * value: "DisabilityIncome"
     * @const
     */
    "DisabilityIncome": "DisabilityIncome",

    /**
     * value: "Education"
     * @const
     */
    "Education": "Education",

    /**
     * value: "MajorPurchase"
     * @const
     */
    "MajorPurchase": "MajorPurchase",

    /**
     * value: "EmergencyFund"
     * @const
     */
    "EmergencyFund": "EmergencyFund",

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "NotSupported"
     * @const
     */
    "NotSupported": "NotSupported"
};



export default IGoal;

