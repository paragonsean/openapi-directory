/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Percent from './Percent';

/**
 * The IRateOfReturnBreakdown model module.
 * @module model/IRateOfReturnBreakdown
 * @version v1
 */
class IRateOfReturnBreakdown {
    /**
     * Constructs a new <code>IRateOfReturnBreakdown</code>.
     * @alias module:model/IRateOfReturnBreakdown
     */
    constructor() { 
        
        IRateOfReturnBreakdown.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IRateOfReturnBreakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IRateOfReturnBreakdown} obj Optional instance to populate.
     * @return {module:model/IRateOfReturnBreakdown} The populated <code>IRateOfReturnBreakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IRateOfReturnBreakdown();

            if (data.hasOwnProperty('capitalGain')) {
                obj['capitalGain'] = Percent.constructFromObject(data['capitalGain']);
            }
            if (data.hasOwnProperty('deferredGrowth')) {
                obj['deferredGrowth'] = Percent.constructFromObject(data['deferredGrowth']);
            }
            if (data.hasOwnProperty('dividend')) {
                obj['dividend'] = Percent.constructFromObject(data['dividend']);
            }
            if (data.hasOwnProperty('interest')) {
                obj['interest'] = Percent.constructFromObject(data['interest']);
            }
            if (data.hasOwnProperty('taxFree')) {
                obj['taxFree'] = Percent.constructFromObject(data['taxFree']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IRateOfReturnBreakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IRateOfReturnBreakdown</code>.
     */
    static validateJSON(data) {
        // validate the optional field `capitalGain`
        if (data['capitalGain']) { // data not null
          Percent.validateJSON(data['capitalGain']);
        }
        // validate the optional field `deferredGrowth`
        if (data['deferredGrowth']) { // data not null
          Percent.validateJSON(data['deferredGrowth']);
        }
        // validate the optional field `dividend`
        if (data['dividend']) { // data not null
          Percent.validateJSON(data['dividend']);
        }
        // validate the optional field `interest`
        if (data['interest']) { // data not null
          Percent.validateJSON(data['interest']);
        }
        // validate the optional field `taxFree`
        if (data['taxFree']) { // data not null
          Percent.validateJSON(data['taxFree']);
        }

        return true;
    }


}



/**
 * @member {module:model/Percent} capitalGain
 */
IRateOfReturnBreakdown.prototype['capitalGain'] = undefined;

/**
 * @member {module:model/Percent} deferredGrowth
 */
IRateOfReturnBreakdown.prototype['deferredGrowth'] = undefined;

/**
 * @member {module:model/Percent} dividend
 */
IRateOfReturnBreakdown.prototype['dividend'] = undefined;

/**
 * @member {module:model/Percent} interest
 */
IRateOfReturnBreakdown.prototype['interest'] = undefined;

/**
 * @member {module:model/Percent} taxFree
 */
IRateOfReturnBreakdown.prototype['taxFree'] = undefined;






export default IRateOfReturnBreakdown;

