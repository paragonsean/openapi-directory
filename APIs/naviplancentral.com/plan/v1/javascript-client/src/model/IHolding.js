/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IAssetMix from './IAssetMix';
import IAssetValuation from './IAssetValuation';
import IPeriodRateOfReturnDetails from './IPeriodRateOfReturnDetails';
import PercentOrCurrency from './PercentOrCurrency';

/**
 * The IHolding model module.
 * @module model/IHolding
 * @version v1
 */
class IHolding {
    /**
     * Constructs a new <code>IHolding</code>.
     * @alias module:model/IHolding
     */
    constructor() { 
        
        IHolding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IHolding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IHolding} obj Optional instance to populate.
     * @return {module:model/IHolding} The populated <code>IHolding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IHolding();

            if (data.hasOwnProperty('assetMix')) {
                obj['assetMix'] = IAssetMix.constructFromObject(data['assetMix']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('holdAmount')) {
                obj['holdAmount'] = PercentOrCurrency.constructFromObject(data['holdAmount']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isClassified')) {
                obj['isClassified'] = ApiClient.convertToType(data['isClassified'], 'Boolean');
            }
            if (data.hasOwnProperty('preRetirementReturnRates')) {
                obj['preRetirementReturnRates'] = IPeriodRateOfReturnDetails.constructFromObject(data['preRetirementReturnRates']);
            }
            if (data.hasOwnProperty('retirementReturnRates')) {
                obj['retirementReturnRates'] = IPeriodRateOfReturnDetails.constructFromObject(data['retirementReturnRates']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('valuation')) {
                obj['valuation'] = IAssetValuation.constructFromObject(data['valuation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IHolding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IHolding</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assetMix`
        if (data['assetMix']) { // data not null
          IAssetMix.validateJSON(data['assetMix']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `holdAmount`
        if (data['holdAmount']) { // data not null
          PercentOrCurrency.validateJSON(data['holdAmount']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `preRetirementReturnRates`
        if (data['preRetirementReturnRates']) { // data not null
          IPeriodRateOfReturnDetails.validateJSON(data['preRetirementReturnRates']);
        }
        // validate the optional field `retirementReturnRates`
        if (data['retirementReturnRates']) { // data not null
          IPeriodRateOfReturnDetails.validateJSON(data['retirementReturnRates']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // validate the optional field `valuation`
        if (data['valuation']) { // data not null
          IAssetValuation.validateJSON(data['valuation']);
        }

        return true;
    }


}



/**
 * @member {module:model/IAssetMix} assetMix
 */
IHolding.prototype['assetMix'] = undefined;

/**
 * @member {String} description
 */
IHolding.prototype['description'] = undefined;

/**
 * @member {module:model/PercentOrCurrency} holdAmount
 */
IHolding.prototype['holdAmount'] = undefined;

/**
 * @member {String} id
 */
IHolding.prototype['id'] = undefined;

/**
 * @member {Boolean} isClassified
 */
IHolding.prototype['isClassified'] = undefined;

/**
 * @member {module:model/IPeriodRateOfReturnDetails} preRetirementReturnRates
 */
IHolding.prototype['preRetirementReturnRates'] = undefined;

/**
 * @member {module:model/IPeriodRateOfReturnDetails} retirementReturnRates
 */
IHolding.prototype['retirementReturnRates'] = undefined;

/**
 * @member {String} symbol
 */
IHolding.prototype['symbol'] = undefined;

/**
 * @member {module:model/IAssetValuation} valuation
 */
IHolding.prototype['valuation'] = undefined;






export default IHolding;

