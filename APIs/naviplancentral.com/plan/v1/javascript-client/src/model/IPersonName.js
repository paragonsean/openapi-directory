/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IPersonName model module.
 * @module model/IPersonName
 * @version v1
 */
class IPersonName {
    /**
     * Constructs a new <code>IPersonName</code>.
     * @alias module:model/IPersonName
     */
    constructor() { 
        
        IPersonName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IPersonName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPersonName} obj Optional instance to populate.
     * @return {module:model/IPersonName} The populated <code>IPersonName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPersonName();

            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('formal')) {
                obj['formal'] = ApiClient.convertToType(data['formal'], 'String');
            }
            if (data.hasOwnProperty('full')) {
                obj['full'] = ApiClient.convertToType(data['full'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('middle')) {
                obj['middle'] = ApiClient.convertToType(data['middle'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPersonName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPersonName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['formal'] && !(typeof data['formal'] === 'string' || data['formal'] instanceof String)) {
            throw new Error("Expected the field `formal` to be a primitive type in the JSON string but got " + data['formal']);
        }
        // ensure the json data is a string
        if (data['full'] && !(typeof data['full'] === 'string' || data['full'] instanceof String)) {
            throw new Error("Expected the field `full` to be a primitive type in the JSON string but got " + data['full']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['middle'] && !(typeof data['middle'] === 'string' || data['middle'] instanceof String)) {
            throw new Error("Expected the field `middle` to be a primitive type in the JSON string but got " + data['middle']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} firstName
 */
IPersonName.prototype['firstName'] = undefined;

/**
 * @member {String} formal
 */
IPersonName.prototype['formal'] = undefined;

/**
 * @member {String} full
 */
IPersonName.prototype['full'] = undefined;

/**
 * @member {String} lastName
 */
IPersonName.prototype['lastName'] = undefined;

/**
 * @member {String} middle
 */
IPersonName.prototype['middle'] = undefined;

/**
 * @member {String} title
 */
IPersonName.prototype['title'] = undefined;






export default IPersonName;

