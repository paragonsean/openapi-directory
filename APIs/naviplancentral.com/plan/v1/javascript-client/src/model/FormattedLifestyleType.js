/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormattedLifestyleType model module.
 * @module model/FormattedLifestyleType
 * @version v1
 */
class FormattedLifestyleType {
    /**
     * Constructs a new <code>FormattedLifestyleType</code>.
     * @alias module:model/FormattedLifestyleType
     */
    constructor() { 
        
        FormattedLifestyleType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormattedLifestyleType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormattedLifestyleType} obj Optional instance to populate.
     * @return {module:model/FormattedLifestyleType} The populated <code>FormattedLifestyleType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormattedLifestyleType();

            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormattedLifestyleType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormattedLifestyleType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formatted'] && !(typeof data['formatted'] === 'string' || data['formatted'] instanceof String)) {
            throw new Error("Expected the field `formatted` to be a primitive type in the JSON string but got " + data['formatted']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {String} formatted
 */
FormattedLifestyleType.prototype['formatted'] = undefined;

/**
 * @member {module:model/FormattedLifestyleType.ValueEnum} value
 */
FormattedLifestyleType.prototype['value'] = undefined;





/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
FormattedLifestyleType['ValueEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "PersonalUse"
     * @const
     */
    "PersonalUse": "PersonalUse",

    /**
     * value: "ListedPersonal"
     * @const
     */
    "ListedPersonal": "ListedPersonal",

    /**
     * value: "PrimaryResidence"
     * @const
     */
    "PrimaryResidence": "PrimaryResidence",

    /**
     * value: "SecondaryResidence"
     * @const
     */
    "SecondaryResidence": "SecondaryResidence",

    /**
     * value: "BusinessInterest"
     * @const
     */
    "BusinessInterest": "BusinessInterest",

    /**
     * value: "Automobile"
     * @const
     */
    "Automobile": "Automobile"
};



export default FormattedLifestyleType;

