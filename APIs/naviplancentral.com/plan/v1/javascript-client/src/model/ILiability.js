/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import CurrencyWithDate from './CurrencyWithDate';
import DescriptiveBoolean from './DescriptiveBoolean';
import FormattedEnumTypeFrequency from './FormattedEnumTypeFrequency';
import FormattedEnumTypeLiabilityType from './FormattedEnumTypeLiabilityType';
import FormattedEnumTypePayOffOptionsType from './FormattedEnumTypePayOffOptionsType';
import FormattedEnumTypePaymentType from './FormattedEnumTypePaymentType';
import IDebtModStrategies from './IDebtModStrategies';
import IOptionalFieldCurrency from './IOptionalFieldCurrency';
import IOptionalFieldDate from './IOptionalFieldDate';
import IOptionalFieldDescriptiveBoolean from './IOptionalFieldDescriptiveBoolean';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The ILiability model module.
 * @module model/ILiability
 * @version v1
 */
class ILiability {
    /**
     * Constructs a new <code>ILiability</code>.
     * @alias module:model/ILiability
     */
    constructor() { 
        
        ILiability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ILiability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ILiability} obj Optional instance to populate.
     * @return {module:model/ILiability} The populated <code>ILiability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ILiability();

            if (data.hasOwnProperty('annualPaymentAmount')) {
                obj['annualPaymentAmount'] = Currency.constructFromObject(data['annualPaymentAmount']);
            }
            if (data.hasOwnProperty('balanceAsOf')) {
                obj['balanceAsOf'] = CurrencyWithDate.constructFromObject(data['balanceAsOf']);
            }
            if (data.hasOwnProperty('balanceAsOfPlanDate')) {
                obj['balanceAsOfPlanDate'] = Currency.constructFromObject(data['balanceAsOfPlanDate']);
            }
            if (data.hasOwnProperty('debtModStrategies')) {
                obj['debtModStrategies'] = IDebtModStrategies.constructFromObject(data['debtModStrategies']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insuredForDisability')) {
                obj['insuredForDisability'] = DescriptiveBoolean.constructFromObject(data['insuredForDisability']);
            }
            if (data.hasOwnProperty('insuredForLife')) {
                obj['insuredForLife'] = DescriptiveBoolean.constructFromObject(data['insuredForLife']);
            }
            if (data.hasOwnProperty('interestRate')) {
                obj['interestRate'] = Percent.constructFromObject(data['interestRate']);
            }
            if (data.hasOwnProperty('isInterestRateVariable')) {
                obj['isInterestRateVariable'] = DescriptiveBoolean.constructFromObject(data['isInterestRateVariable']);
            }
            if (data.hasOwnProperty('isPaymentVariable')) {
                obj['isPaymentVariable'] = DescriptiveBoolean.constructFromObject(data['isPaymentVariable']);
            }
            if (data.hasOwnProperty('linkedAssetId')) {
                obj['linkedAssetId'] = ApiClient.convertToType(data['linkedAssetId'], 'String');
            }
            if (data.hasOwnProperty('linkedAssetName')) {
                obj['linkedAssetName'] = ApiClient.convertToType(data['linkedAssetName'], 'String');
            }
            if (data.hasOwnProperty('loanDate')) {
                obj['loanDate'] = ModelDate.constructFromObject(data['loanDate']);
            }
            if (data.hasOwnProperty('originalBalance')) {
                obj['originalBalance'] = Currency.constructFromObject(data['originalBalance']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('paidOffByRetirement')) {
                obj['paidOffByRetirement'] = IOptionalFieldDescriptiveBoolean.constructFromObject(data['paidOffByRetirement']);
            }
            if (data.hasOwnProperty('payOffDate')) {
                obj['payOffDate'] = IOptionalFieldDate.constructFromObject(data['payOffDate']);
            }
            if (data.hasOwnProperty('payOffOptionType')) {
                obj['payOffOptionType'] = FormattedEnumTypePayOffOptionsType.constructFromObject(data['payOffOptionType']);
            }
            if (data.hasOwnProperty('paymentAmount')) {
                obj['paymentAmount'] = IOptionalFieldCurrency.constructFromObject(data['paymentAmount']);
            }
            if (data.hasOwnProperty('paymentFrequency')) {
                obj['paymentFrequency'] = FormattedEnumTypeFrequency.constructFromObject(data['paymentFrequency']);
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = FormattedEnumTypePaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FormattedEnumTypeLiabilityType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ILiability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ILiability</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualPaymentAmount`
        if (data['annualPaymentAmount']) { // data not null
          Currency.validateJSON(data['annualPaymentAmount']);
        }
        // validate the optional field `balanceAsOf`
        if (data['balanceAsOf']) { // data not null
          CurrencyWithDate.validateJSON(data['balanceAsOf']);
        }
        // validate the optional field `balanceAsOfPlanDate`
        if (data['balanceAsOfPlanDate']) { // data not null
          Currency.validateJSON(data['balanceAsOfPlanDate']);
        }
        // validate the optional field `debtModStrategies`
        if (data['debtModStrategies']) { // data not null
          IDebtModStrategies.validateJSON(data['debtModStrategies']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `insuredForDisability`
        if (data['insuredForDisability']) { // data not null
          DescriptiveBoolean.validateJSON(data['insuredForDisability']);
        }
        // validate the optional field `insuredForLife`
        if (data['insuredForLife']) { // data not null
          DescriptiveBoolean.validateJSON(data['insuredForLife']);
        }
        // validate the optional field `interestRate`
        if (data['interestRate']) { // data not null
          Percent.validateJSON(data['interestRate']);
        }
        // validate the optional field `isInterestRateVariable`
        if (data['isInterestRateVariable']) { // data not null
          DescriptiveBoolean.validateJSON(data['isInterestRateVariable']);
        }
        // validate the optional field `isPaymentVariable`
        if (data['isPaymentVariable']) { // data not null
          DescriptiveBoolean.validateJSON(data['isPaymentVariable']);
        }
        // ensure the json data is a string
        if (data['linkedAssetId'] && !(typeof data['linkedAssetId'] === 'string' || data['linkedAssetId'] instanceof String)) {
            throw new Error("Expected the field `linkedAssetId` to be a primitive type in the JSON string but got " + data['linkedAssetId']);
        }
        // ensure the json data is a string
        if (data['linkedAssetName'] && !(typeof data['linkedAssetName'] === 'string' || data['linkedAssetName'] instanceof String)) {
            throw new Error("Expected the field `linkedAssetName` to be a primitive type in the JSON string but got " + data['linkedAssetName']);
        }
        // validate the optional field `loanDate`
        if (data['loanDate']) { // data not null
          ModelDate.validateJSON(data['loanDate']);
        }
        // validate the optional field `originalBalance`
        if (data['originalBalance']) { // data not null
          Currency.validateJSON(data['originalBalance']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `paidOffByRetirement`
        if (data['paidOffByRetirement']) { // data not null
          IOptionalFieldDescriptiveBoolean.validateJSON(data['paidOffByRetirement']);
        }
        // validate the optional field `payOffDate`
        if (data['payOffDate']) { // data not null
          IOptionalFieldDate.validateJSON(data['payOffDate']);
        }
        // validate the optional field `payOffOptionType`
        if (data['payOffOptionType']) { // data not null
          FormattedEnumTypePayOffOptionsType.validateJSON(data['payOffOptionType']);
        }
        // validate the optional field `paymentAmount`
        if (data['paymentAmount']) { // data not null
          IOptionalFieldCurrency.validateJSON(data['paymentAmount']);
        }
        // validate the optional field `paymentFrequency`
        if (data['paymentFrequency']) { // data not null
          FormattedEnumTypeFrequency.validateJSON(data['paymentFrequency']);
        }
        // validate the optional field `paymentType`
        if (data['paymentType']) { // data not null
          FormattedEnumTypePaymentType.validateJSON(data['paymentType']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          FormattedEnumTypeLiabilityType.validateJSON(data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Currency} annualPaymentAmount
 */
ILiability.prototype['annualPaymentAmount'] = undefined;

/**
 * @member {module:model/CurrencyWithDate} balanceAsOf
 */
ILiability.prototype['balanceAsOf'] = undefined;

/**
 * @member {module:model/Currency} balanceAsOfPlanDate
 */
ILiability.prototype['balanceAsOfPlanDate'] = undefined;

/**
 * @member {module:model/IDebtModStrategies} debtModStrategies
 */
ILiability.prototype['debtModStrategies'] = undefined;

/**
 * @member {String} description
 */
ILiability.prototype['description'] = undefined;

/**
 * @member {String} id
 */
ILiability.prototype['id'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} insuredForDisability
 */
ILiability.prototype['insuredForDisability'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} insuredForLife
 */
ILiability.prototype['insuredForLife'] = undefined;

/**
 * @member {module:model/Percent} interestRate
 */
ILiability.prototype['interestRate'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} isInterestRateVariable
 */
ILiability.prototype['isInterestRateVariable'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} isPaymentVariable
 */
ILiability.prototype['isPaymentVariable'] = undefined;

/**
 * @member {String} linkedAssetId
 */
ILiability.prototype['linkedAssetId'] = undefined;

/**
 * @member {String} linkedAssetName
 */
ILiability.prototype['linkedAssetName'] = undefined;

/**
 * @member {module:model/ModelDate} loanDate
 */
ILiability.prototype['loanDate'] = undefined;

/**
 * @member {module:model/Currency} originalBalance
 */
ILiability.prototype['originalBalance'] = undefined;

/**
 * @member {module:model/ILiability.OwnerEnum} owner
 */
ILiability.prototype['owner'] = undefined;

/**
 * @member {module:model/IOptionalFieldDescriptiveBoolean} paidOffByRetirement
 */
ILiability.prototype['paidOffByRetirement'] = undefined;

/**
 * @member {module:model/IOptionalFieldDate} payOffDate
 */
ILiability.prototype['payOffDate'] = undefined;

/**
 * @member {module:model/FormattedEnumTypePayOffOptionsType} payOffOptionType
 */
ILiability.prototype['payOffOptionType'] = undefined;

/**
 * @member {module:model/IOptionalFieldCurrency} paymentAmount
 */
ILiability.prototype['paymentAmount'] = undefined;

/**
 * @member {module:model/FormattedEnumTypeFrequency} paymentFrequency
 */
ILiability.prototype['paymentFrequency'] = undefined;

/**
 * @member {module:model/FormattedEnumTypePaymentType} paymentType
 */
ILiability.prototype['paymentType'] = undefined;

/**
 * @member {module:model/FormattedEnumTypeLiabilityType} type
 */
ILiability.prototype['type'] = undefined;





/**
 * Allowed values for the <code>owner</code> property.
 * @enum {String}
 * @readonly
 */
ILiability['OwnerEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "NonHead1"
     * @const
     */
    "NonHead1": "NonHead1",

    /**
     * value: "NonHead2"
     * @const
     */
    "NonHead2": "NonHead2",

    /**
     * value: "NonHead3"
     * @const
     */
    "NonHead3": "NonHead3",

    /**
     * value: "NonHead4"
     * @const
     */
    "NonHead4": "NonHead4",

    /**
     * value: "NonHead5"
     * @const
     */
    "NonHead5": "NonHead5",

    /**
     * value: "NonHead6"
     * @const
     */
    "NonHead6": "NonHead6",

    /**
     * value: "NonHead7"
     * @const
     */
    "NonHead7": "NonHead7",

    /**
     * value: "NonHead8"
     * @const
     */
    "NonHead8": "NonHead8",

    /**
     * value: "NonHead9"
     * @const
     */
    "NonHead9": "NonHead9",

    /**
     * value: "CommunityProperty"
     * @const
     */
    "CommunityProperty": "CommunityProperty",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "AllDependents"
     * @const
     */
    "AllDependents": "AllDependents",

    /**
     * value: "AllFamilyMembers"
     * @const
     */
    "AllFamilyMembers": "AllFamilyMembers",

    /**
     * value: "Corporation"
     * @const
     */
    "Corporation": "Corporation"
};



export default ILiability;

