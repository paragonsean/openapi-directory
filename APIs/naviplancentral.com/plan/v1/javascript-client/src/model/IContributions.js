/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IInterCompanyDividendReceived from './IInterCompanyDividendReceived';
import ISharePurchase from './ISharePurchase';
import IShareholderLoan from './IShareholderLoan';

/**
 * The IContributions model module.
 * @module model/IContributions
 * @version v1
 */
class IContributions {
    /**
     * Constructs a new <code>IContributions</code>.
     * @alias module:model/IContributions
     */
    constructor() { 
        
        IContributions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IContributions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IContributions} obj Optional instance to populate.
     * @return {module:model/IContributions} The populated <code>IContributions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IContributions();

            if (data.hasOwnProperty('interCompanyDividendsReceived')) {
                obj['interCompanyDividendsReceived'] = ApiClient.convertToType(data['interCompanyDividendsReceived'], [IInterCompanyDividendReceived]);
            }
            if (data.hasOwnProperty('sharePurchases')) {
                obj['sharePurchases'] = ApiClient.convertToType(data['sharePurchases'], [ISharePurchase]);
            }
            if (data.hasOwnProperty('shareholderLoans')) {
                obj['shareholderLoans'] = ApiClient.convertToType(data['shareholderLoans'], [IShareholderLoan]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IContributions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IContributions</code>.
     */
    static validateJSON(data) {
        if (data['interCompanyDividendsReceived']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interCompanyDividendsReceived'])) {
                throw new Error("Expected the field `interCompanyDividendsReceived` to be an array in the JSON data but got " + data['interCompanyDividendsReceived']);
            }
            // validate the optional field `interCompanyDividendsReceived` (array)
            for (const item of data['interCompanyDividendsReceived']) {
                IInterCompanyDividendReceived.validateJSON(item);
            };
        }
        if (data['sharePurchases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharePurchases'])) {
                throw new Error("Expected the field `sharePurchases` to be an array in the JSON data but got " + data['sharePurchases']);
            }
            // validate the optional field `sharePurchases` (array)
            for (const item of data['sharePurchases']) {
                ISharePurchase.validateJSON(item);
            };
        }
        if (data['shareholderLoans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shareholderLoans'])) {
                throw new Error("Expected the field `shareholderLoans` to be an array in the JSON data but got " + data['shareholderLoans']);
            }
            // validate the optional field `shareholderLoans` (array)
            for (const item of data['shareholderLoans']) {
                IShareholderLoan.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/IInterCompanyDividendReceived>} interCompanyDividendsReceived
 */
IContributions.prototype['interCompanyDividendsReceived'] = undefined;

/**
 * @member {Array.<module:model/ISharePurchase>} sharePurchases
 */
IContributions.prototype['sharePurchases'] = undefined;

/**
 * @member {Array.<module:model/IShareholderLoan>} shareholderLoans
 */
IContributions.prototype['shareholderLoans'] = undefined;






export default IContributions;

