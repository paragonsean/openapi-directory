/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectLink from './ObjectLink';

/**
 * The AdvisorModel model module.
 * @module model/AdvisorModel
 * @version v1
 */
class AdvisorModel {
    /**
     * Constructs a new <code>AdvisorModel</code>.
     * @alias module:model/AdvisorModel
     */
    constructor() { 
        
        AdvisorModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdvisorModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvisorModel} obj Optional instance to populate.
     * @return {module:model/AdvisorModel} The populated <code>AdvisorModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvisorModel();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('advisorId')) {
                obj['advisorId'] = ApiClient.convertToType(data['advisorId'], 'String');
            }
            if (data.hasOwnProperty('advisorTitle')) {
                obj['advisorTitle'] = ApiClient.convertToType(data['advisorTitle'], 'String');
            }
            if (data.hasOwnProperty('businessPhone')) {
                obj['businessPhone'] = ApiClient.convertToType(data['businessPhone'], 'String');
            }
            if (data.hasOwnProperty('cellPhone')) {
                obj['cellPhone'] = ApiClient.convertToType(data['cellPhone'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('faxPhone')) {
                obj['faxPhone'] = ApiClient.convertToType(data['faxPhone'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('homePhone')) {
                obj['homePhone'] = ApiClient.convertToType(data['homePhone'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ObjectLink]);
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('officeName')) {
                obj['officeName'] = ApiClient.convertToType(data['officeName'], 'String');
            }
            if (data.hasOwnProperty('officeWebsite')) {
                obj['officeWebsite'] = ApiClient.convertToType(data['officeWebsite'], 'String');
            }
            if (data.hasOwnProperty('pagerNumber')) {
                obj['pagerNumber'] = ApiClient.convertToType(data['pagerNumber'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('stateProvince')) {
                obj['stateProvince'] = ApiClient.convertToType(data['stateProvince'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvisorModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvisorModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        // ensure the json data is a string
        if (data['advisorId'] && !(typeof data['advisorId'] === 'string' || data['advisorId'] instanceof String)) {
            throw new Error("Expected the field `advisorId` to be a primitive type in the JSON string but got " + data['advisorId']);
        }
        // ensure the json data is a string
        if (data['advisorTitle'] && !(typeof data['advisorTitle'] === 'string' || data['advisorTitle'] instanceof String)) {
            throw new Error("Expected the field `advisorTitle` to be a primitive type in the JSON string but got " + data['advisorTitle']);
        }
        // ensure the json data is a string
        if (data['businessPhone'] && !(typeof data['businessPhone'] === 'string' || data['businessPhone'] instanceof String)) {
            throw new Error("Expected the field `businessPhone` to be a primitive type in the JSON string but got " + data['businessPhone']);
        }
        // ensure the json data is a string
        if (data['cellPhone'] && !(typeof data['cellPhone'] === 'string' || data['cellPhone'] instanceof String)) {
            throw new Error("Expected the field `cellPhone` to be a primitive type in the JSON string but got " + data['cellPhone']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['faxPhone'] && !(typeof data['faxPhone'] === 'string' || data['faxPhone'] instanceof String)) {
            throw new Error("Expected the field `faxPhone` to be a primitive type in the JSON string but got " + data['faxPhone']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['homePhone'] && !(typeof data['homePhone'] === 'string' || data['homePhone'] instanceof String)) {
            throw new Error("Expected the field `homePhone` to be a primitive type in the JSON string but got " + data['homePhone']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ObjectLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['officeName'] && !(typeof data['officeName'] === 'string' || data['officeName'] instanceof String)) {
            throw new Error("Expected the field `officeName` to be a primitive type in the JSON string but got " + data['officeName']);
        }
        // ensure the json data is a string
        if (data['officeWebsite'] && !(typeof data['officeWebsite'] === 'string' || data['officeWebsite'] instanceof String)) {
            throw new Error("Expected the field `officeWebsite` to be a primitive type in the JSON string but got " + data['officeWebsite']);
        }
        // ensure the json data is a string
        if (data['pagerNumber'] && !(typeof data['pagerNumber'] === 'string' || data['pagerNumber'] instanceof String)) {
            throw new Error("Expected the field `pagerNumber` to be a primitive type in the JSON string but got " + data['pagerNumber']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['stateProvince'] && !(typeof data['stateProvince'] === 'string' || data['stateProvince'] instanceof String)) {
            throw new Error("Expected the field `stateProvince` to be a primitive type in the JSON string but got " + data['stateProvince']);
        }

        return true;
    }


}



/**
 * @member {String} addressLine1
 */
AdvisorModel.prototype['addressLine1'] = undefined;

/**
 * @member {String} addressLine2
 */
AdvisorModel.prototype['addressLine2'] = undefined;

/**
 * @member {String} advisorId
 */
AdvisorModel.prototype['advisorId'] = undefined;

/**
 * @member {String} advisorTitle
 */
AdvisorModel.prototype['advisorTitle'] = undefined;

/**
 * @member {String} businessPhone
 */
AdvisorModel.prototype['businessPhone'] = undefined;

/**
 * @member {String} cellPhone
 */
AdvisorModel.prototype['cellPhone'] = undefined;

/**
 * @member {String} city
 */
AdvisorModel.prototype['city'] = undefined;

/**
 * @member {String} emailAddress
 */
AdvisorModel.prototype['emailAddress'] = undefined;

/**
 * @member {String} faxPhone
 */
AdvisorModel.prototype['faxPhone'] = undefined;

/**
 * @member {String} firstName
 */
AdvisorModel.prototype['firstName'] = undefined;

/**
 * @member {String} homePhone
 */
AdvisorModel.prototype['homePhone'] = undefined;

/**
 * @member {String} lastName
 */
AdvisorModel.prototype['lastName'] = undefined;

/**
 * @member {Array.<module:model/ObjectLink>} links
 */
AdvisorModel.prototype['links'] = undefined;

/**
 * @member {String} middleName
 */
AdvisorModel.prototype['middleName'] = undefined;

/**
 * @member {String} officeName
 */
AdvisorModel.prototype['officeName'] = undefined;

/**
 * @member {String} officeWebsite
 */
AdvisorModel.prototype['officeWebsite'] = undefined;

/**
 * @member {String} pagerNumber
 */
AdvisorModel.prototype['pagerNumber'] = undefined;

/**
 * @member {String} postalCode
 */
AdvisorModel.prototype['postalCode'] = undefined;

/**
 * @member {String} stateProvince
 */
AdvisorModel.prototype['stateProvince'] = undefined;






export default AdvisorModel;

