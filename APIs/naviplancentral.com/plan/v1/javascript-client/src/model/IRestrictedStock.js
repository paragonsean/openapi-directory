/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import FormattedDateRange from './FormattedDateRange';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IRestrictedStock model module.
 * @module model/IRestrictedStock
 * @version v1
 */
class IRestrictedStock {
    /**
     * Constructs a new <code>IRestrictedStock</code>.
     * @alias module:model/IRestrictedStock
     */
    constructor() { 
        
        IRestrictedStock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IRestrictedStock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IRestrictedStock} obj Optional instance to populate.
     * @return {module:model/IRestrictedStock} The populated <code>IRestrictedStock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IRestrictedStock();

            if (data.hasOwnProperty('annualDividendPerUnit')) {
                obj['annualDividendPerUnit'] = Currency.constructFromObject(data['annualDividendPerUnit']);
            }
            if (data.hasOwnProperty('applicableRangeRetirementLiquidatedAssets')) {
                obj['applicableRangeRetirementLiquidatedAssets'] = FormattedDateRange.constructFromObject(data['applicableRangeRetirementLiquidatedAssets']);
            }
            if (data.hasOwnProperty('awardedDate')) {
                obj['awardedDate'] = ModelDate.constructFromObject(data['awardedDate']);
            }
            if (data.hasOwnProperty('currentUnitValue')) {
                obj['currentUnitValue'] = Currency.constructFromObject(data['currentUnitValue']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('growthRate')) {
                obj['growthRate'] = Percent.constructFromObject(data['growthRate']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('numberOfUnits')) {
                obj['numberOfUnits'] = ApiClient.convertToType(data['numberOfUnits'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('pricePaidForAward')) {
                obj['pricePaidForAward'] = Currency.constructFromObject(data['pricePaidForAward']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IRestrictedStock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IRestrictedStock</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualDividendPerUnit`
        if (data['annualDividendPerUnit']) { // data not null
          Currency.validateJSON(data['annualDividendPerUnit']);
        }
        // validate the optional field `applicableRangeRetirementLiquidatedAssets`
        if (data['applicableRangeRetirementLiquidatedAssets']) { // data not null
          FormattedDateRange.validateJSON(data['applicableRangeRetirementLiquidatedAssets']);
        }
        // validate the optional field `awardedDate`
        if (data['awardedDate']) { // data not null
          ModelDate.validateJSON(data['awardedDate']);
        }
        // validate the optional field `currentUnitValue`
        if (data['currentUnitValue']) { // data not null
          Currency.validateJSON(data['currentUnitValue']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `growthRate`
        if (data['growthRate']) { // data not null
          Percent.validateJSON(data['growthRate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `pricePaidForAward`
        if (data['pricePaidForAward']) { // data not null
          Currency.validateJSON(data['pricePaidForAward']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Currency} annualDividendPerUnit
 */
IRestrictedStock.prototype['annualDividendPerUnit'] = undefined;

/**
 * @member {module:model/FormattedDateRange} applicableRangeRetirementLiquidatedAssets
 */
IRestrictedStock.prototype['applicableRangeRetirementLiquidatedAssets'] = undefined;

/**
 * @member {module:model/ModelDate} awardedDate
 */
IRestrictedStock.prototype['awardedDate'] = undefined;

/**
 * @member {module:model/Currency} currentUnitValue
 */
IRestrictedStock.prototype['currentUnitValue'] = undefined;

/**
 * @member {String} description
 */
IRestrictedStock.prototype['description'] = undefined;

/**
 * @member {module:model/Percent} growthRate
 */
IRestrictedStock.prototype['growthRate'] = undefined;

/**
 * @member {String} id
 */
IRestrictedStock.prototype['id'] = undefined;

/**
 * @member {Number} numberOfUnits
 */
IRestrictedStock.prototype['numberOfUnits'] = undefined;

/**
 * @member {module:model/IRestrictedStock.OwnerEnum} owner
 */
IRestrictedStock.prototype['owner'] = undefined;

/**
 * @member {module:model/Currency} pricePaidForAward
 */
IRestrictedStock.prototype['pricePaidForAward'] = undefined;

/**
 * @member {String} type
 */
IRestrictedStock.prototype['type'] = undefined;





/**
 * Allowed values for the <code>owner</code> property.
 * @enum {String}
 * @readonly
 */
IRestrictedStock['OwnerEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "NonHead1"
     * @const
     */
    "NonHead1": "NonHead1",

    /**
     * value: "NonHead2"
     * @const
     */
    "NonHead2": "NonHead2",

    /**
     * value: "NonHead3"
     * @const
     */
    "NonHead3": "NonHead3",

    /**
     * value: "NonHead4"
     * @const
     */
    "NonHead4": "NonHead4",

    /**
     * value: "NonHead5"
     * @const
     */
    "NonHead5": "NonHead5",

    /**
     * value: "NonHead6"
     * @const
     */
    "NonHead6": "NonHead6",

    /**
     * value: "NonHead7"
     * @const
     */
    "NonHead7": "NonHead7",

    /**
     * value: "NonHead8"
     * @const
     */
    "NonHead8": "NonHead8",

    /**
     * value: "NonHead9"
     * @const
     */
    "NonHead9": "NonHead9",

    /**
     * value: "CommunityProperty"
     * @const
     */
    "CommunityProperty": "CommunityProperty",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "AllDependents"
     * @const
     */
    "AllDependents": "AllDependents",

    /**
     * value: "AllFamilyMembers"
     * @const
     */
    "AllFamilyMembers": "AllFamilyMembers",

    /**
     * value: "Corporation"
     * @const
     */
    "Corporation": "Corporation"
};



export default IRestrictedStock;

