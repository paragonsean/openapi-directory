/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import DescriptiveBoolean from './DescriptiveBoolean';
import IContributions from './IContributions';
import ICorporationRealEstateAsset from './ICorporationRealEstateAsset';
import IEstateDetails from './IEstateDetails';
import IHistoricalData from './IHistoricalData';
import IInvestmentAccount from './IInvestmentAccount';
import ILiability from './ILiability';
import ILifeInsurancePolicy from './ILifeInsurancePolicy';
import IOwnershipDetails from './IOwnershipDetails';
import IRealEstateAsset from './IRealEstateAsset';
import IWithdrawals from './IWithdrawals';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IHoldingCompany model module.
 * @module model/IHoldingCompany
 * @version v1
 */
class IHoldingCompany {
    /**
     * Constructs a new <code>IHoldingCompany</code>.
     * @alias module:model/IHoldingCompany
     */
    constructor() { 
        
        IHoldingCompany.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IHoldingCompany</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IHoldingCompany} obj Optional instance to populate.
     * @return {module:model/IHoldingCompany} The populated <code>IHoldingCompany</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IHoldingCompany();

            if (data.hasOwnProperty('annualDividendYield')) {
                obj['annualDividendYield'] = Percent.constructFromObject(data['annualDividendYield']);
            }
            if (data.hasOwnProperty('ccpc')) {
                obj['ccpc'] = DescriptiveBoolean.constructFromObject(data['ccpc']);
            }
            if (data.hasOwnProperty('commonSharesOutstanding')) {
                obj['commonSharesOutstanding'] = ApiClient.convertToType(data['commonSharesOutstanding'], 'Number');
            }
            if (data.hasOwnProperty('contributions')) {
                obj['contributions'] = IContributions.constructFromObject(data['contributions']);
            }
            if (data.hasOwnProperty('corporateYearEnd')) {
                obj['corporateYearEnd'] = ModelDate.constructFromObject(data['corporateYearEnd']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dividendType')) {
                obj['dividendType'] = ApiClient.convertToType(data['dividendType'], 'String');
            }
            if (data.hasOwnProperty('dividendTypeFormatted')) {
                obj['dividendTypeFormatted'] = ApiClient.convertToType(data['dividendTypeFormatted'], 'String');
            }
            if (data.hasOwnProperty('estateDetails')) {
                obj['estateDetails'] = IEstateDetails.constructFromObject(data['estateDetails']);
            }
            if (data.hasOwnProperty('historicalData')) {
                obj['historicalData'] = IHistoricalData.constructFromObject(data['historicalData']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('investmentAccounts')) {
                obj['investmentAccounts'] = ApiClient.convertToType(data['investmentAccounts'], [IInvestmentAccount]);
            }
            if (data.hasOwnProperty('liabilities')) {
                obj['liabilities'] = ApiClient.convertToType(data['liabilities'], [ILiability]);
            }
            if (data.hasOwnProperty('lifeInsurancePolicies')) {
                obj['lifeInsurancePolicies'] = ApiClient.convertToType(data['lifeInsurancePolicies'], [ILifeInsurancePolicy]);
            }
            if (data.hasOwnProperty('marketValue')) {
                obj['marketValue'] = Currency.constructFromObject(data['marketValue']);
            }
            if (data.hasOwnProperty('numPreferredShareClasses')) {
                obj['numPreferredShareClasses'] = ApiClient.convertToType(data['numPreferredShareClasses'], 'Number');
            }
            if (data.hasOwnProperty('otherAssets')) {
                obj['otherAssets'] = ApiClient.convertToType(data['otherAssets'], [IRealEstateAsset]);
            }
            if (data.hasOwnProperty('ownershipAsOfDate')) {
                obj['ownershipAsOfDate'] = ModelDate.constructFromObject(data['ownershipAsOfDate']);
            }
            if (data.hasOwnProperty('ownershipDetails')) {
                obj['ownershipDetails'] = IOwnershipDetails.constructFromObject(data['ownershipDetails']);
            }
            if (data.hasOwnProperty('preferredSharesOutstanding')) {
                obj['preferredSharesOutstanding'] = ApiClient.convertToType(data['preferredSharesOutstanding'], 'Number');
            }
            if (data.hasOwnProperty('provinceOfIncorporation')) {
                obj['provinceOfIncorporation'] = ApiClient.convertToType(data['provinceOfIncorporation'], 'String');
            }
            if (data.hasOwnProperty('provinceOfTaxation')) {
                obj['provinceOfTaxation'] = ApiClient.convertToType(data['provinceOfTaxation'], 'String');
            }
            if (data.hasOwnProperty('realEstateAssets')) {
                obj['realEstateAssets'] = ApiClient.convertToType(data['realEstateAssets'], [ICorporationRealEstateAsset]);
            }
            if (data.hasOwnProperty('valueOfAllCommonShares')) {
                obj['valueOfAllCommonShares'] = Currency.constructFromObject(data['valueOfAllCommonShares']);
            }
            if (data.hasOwnProperty('valueOfAllPreferredShares')) {
                obj['valueOfAllPreferredShares'] = Currency.constructFromObject(data['valueOfAllPreferredShares']);
            }
            if (data.hasOwnProperty('withdrawals')) {
                obj['withdrawals'] = IWithdrawals.constructFromObject(data['withdrawals']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IHoldingCompany</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IHoldingCompany</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualDividendYield`
        if (data['annualDividendYield']) { // data not null
          Percent.validateJSON(data['annualDividendYield']);
        }
        // validate the optional field `ccpc`
        if (data['ccpc']) { // data not null
          DescriptiveBoolean.validateJSON(data['ccpc']);
        }
        // validate the optional field `contributions`
        if (data['contributions']) { // data not null
          IContributions.validateJSON(data['contributions']);
        }
        // validate the optional field `corporateYearEnd`
        if (data['corporateYearEnd']) { // data not null
          ModelDate.validateJSON(data['corporateYearEnd']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dividendType'] && !(typeof data['dividendType'] === 'string' || data['dividendType'] instanceof String)) {
            throw new Error("Expected the field `dividendType` to be a primitive type in the JSON string but got " + data['dividendType']);
        }
        // ensure the json data is a string
        if (data['dividendTypeFormatted'] && !(typeof data['dividendTypeFormatted'] === 'string' || data['dividendTypeFormatted'] instanceof String)) {
            throw new Error("Expected the field `dividendTypeFormatted` to be a primitive type in the JSON string but got " + data['dividendTypeFormatted']);
        }
        // validate the optional field `estateDetails`
        if (data['estateDetails']) { // data not null
          IEstateDetails.validateJSON(data['estateDetails']);
        }
        // validate the optional field `historicalData`
        if (data['historicalData']) { // data not null
          IHistoricalData.validateJSON(data['historicalData']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['investmentAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['investmentAccounts'])) {
                throw new Error("Expected the field `investmentAccounts` to be an array in the JSON data but got " + data['investmentAccounts']);
            }
            // validate the optional field `investmentAccounts` (array)
            for (const item of data['investmentAccounts']) {
                IInvestmentAccount.validateJSON(item);
            };
        }
        if (data['liabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['liabilities'])) {
                throw new Error("Expected the field `liabilities` to be an array in the JSON data but got " + data['liabilities']);
            }
            // validate the optional field `liabilities` (array)
            for (const item of data['liabilities']) {
                ILiability.validateJSON(item);
            };
        }
        if (data['lifeInsurancePolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lifeInsurancePolicies'])) {
                throw new Error("Expected the field `lifeInsurancePolicies` to be an array in the JSON data but got " + data['lifeInsurancePolicies']);
            }
            // validate the optional field `lifeInsurancePolicies` (array)
            for (const item of data['lifeInsurancePolicies']) {
                ILifeInsurancePolicy.validateJSON(item);
            };
        }
        // validate the optional field `marketValue`
        if (data['marketValue']) { // data not null
          Currency.validateJSON(data['marketValue']);
        }
        if (data['otherAssets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['otherAssets'])) {
                throw new Error("Expected the field `otherAssets` to be an array in the JSON data but got " + data['otherAssets']);
            }
            // validate the optional field `otherAssets` (array)
            for (const item of data['otherAssets']) {
                IRealEstateAsset.validateJSON(item);
            };
        }
        // validate the optional field `ownershipAsOfDate`
        if (data['ownershipAsOfDate']) { // data not null
          ModelDate.validateJSON(data['ownershipAsOfDate']);
        }
        // validate the optional field `ownershipDetails`
        if (data['ownershipDetails']) { // data not null
          IOwnershipDetails.validateJSON(data['ownershipDetails']);
        }
        // ensure the json data is a string
        if (data['provinceOfIncorporation'] && !(typeof data['provinceOfIncorporation'] === 'string' || data['provinceOfIncorporation'] instanceof String)) {
            throw new Error("Expected the field `provinceOfIncorporation` to be a primitive type in the JSON string but got " + data['provinceOfIncorporation']);
        }
        // ensure the json data is a string
        if (data['provinceOfTaxation'] && !(typeof data['provinceOfTaxation'] === 'string' || data['provinceOfTaxation'] instanceof String)) {
            throw new Error("Expected the field `provinceOfTaxation` to be a primitive type in the JSON string but got " + data['provinceOfTaxation']);
        }
        if (data['realEstateAssets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['realEstateAssets'])) {
                throw new Error("Expected the field `realEstateAssets` to be an array in the JSON data but got " + data['realEstateAssets']);
            }
            // validate the optional field `realEstateAssets` (array)
            for (const item of data['realEstateAssets']) {
                ICorporationRealEstateAsset.validateJSON(item);
            };
        }
        // validate the optional field `valueOfAllCommonShares`
        if (data['valueOfAllCommonShares']) { // data not null
          Currency.validateJSON(data['valueOfAllCommonShares']);
        }
        // validate the optional field `valueOfAllPreferredShares`
        if (data['valueOfAllPreferredShares']) { // data not null
          Currency.validateJSON(data['valueOfAllPreferredShares']);
        }
        // validate the optional field `withdrawals`
        if (data['withdrawals']) { // data not null
          IWithdrawals.validateJSON(data['withdrawals']);
        }

        return true;
    }


}



/**
 * @member {module:model/Percent} annualDividendYield
 */
IHoldingCompany.prototype['annualDividendYield'] = undefined;

/**
 * @member {module:model/DescriptiveBoolean} ccpc
 */
IHoldingCompany.prototype['ccpc'] = undefined;

/**
 * @member {Number} commonSharesOutstanding
 */
IHoldingCompany.prototype['commonSharesOutstanding'] = undefined;

/**
 * @member {module:model/IContributions} contributions
 */
IHoldingCompany.prototype['contributions'] = undefined;

/**
 * @member {module:model/ModelDate} corporateYearEnd
 */
IHoldingCompany.prototype['corporateYearEnd'] = undefined;

/**
 * @member {String} description
 */
IHoldingCompany.prototype['description'] = undefined;

/**
 * @member {module:model/IHoldingCompany.DividendTypeEnum} dividendType
 */
IHoldingCompany.prototype['dividendType'] = undefined;

/**
 * @member {String} dividendTypeFormatted
 */
IHoldingCompany.prototype['dividendTypeFormatted'] = undefined;

/**
 * @member {module:model/IEstateDetails} estateDetails
 */
IHoldingCompany.prototype['estateDetails'] = undefined;

/**
 * @member {module:model/IHistoricalData} historicalData
 */
IHoldingCompany.prototype['historicalData'] = undefined;

/**
 * @member {String} id
 */
IHoldingCompany.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/IInvestmentAccount>} investmentAccounts
 */
IHoldingCompany.prototype['investmentAccounts'] = undefined;

/**
 * @member {Array.<module:model/ILiability>} liabilities
 */
IHoldingCompany.prototype['liabilities'] = undefined;

/**
 * @member {Array.<module:model/ILifeInsurancePolicy>} lifeInsurancePolicies
 */
IHoldingCompany.prototype['lifeInsurancePolicies'] = undefined;

/**
 * @member {module:model/Currency} marketValue
 */
IHoldingCompany.prototype['marketValue'] = undefined;

/**
 * @member {Number} numPreferredShareClasses
 */
IHoldingCompany.prototype['numPreferredShareClasses'] = undefined;

/**
 * @member {Array.<module:model/IRealEstateAsset>} otherAssets
 */
IHoldingCompany.prototype['otherAssets'] = undefined;

/**
 * @member {module:model/ModelDate} ownershipAsOfDate
 */
IHoldingCompany.prototype['ownershipAsOfDate'] = undefined;

/**
 * @member {module:model/IOwnershipDetails} ownershipDetails
 */
IHoldingCompany.prototype['ownershipDetails'] = undefined;

/**
 * @member {Number} preferredSharesOutstanding
 */
IHoldingCompany.prototype['preferredSharesOutstanding'] = undefined;

/**
 * @member {String} provinceOfIncorporation
 */
IHoldingCompany.prototype['provinceOfIncorporation'] = undefined;

/**
 * @member {String} provinceOfTaxation
 */
IHoldingCompany.prototype['provinceOfTaxation'] = undefined;

/**
 * @member {Array.<module:model/ICorporationRealEstateAsset>} realEstateAssets
 */
IHoldingCompany.prototype['realEstateAssets'] = undefined;

/**
 * @member {module:model/Currency} valueOfAllCommonShares
 */
IHoldingCompany.prototype['valueOfAllCommonShares'] = undefined;

/**
 * @member {module:model/Currency} valueOfAllPreferredShares
 */
IHoldingCompany.prototype['valueOfAllPreferredShares'] = undefined;

/**
 * @member {module:model/IWithdrawals} withdrawals
 */
IHoldingCompany.prototype['withdrawals'] = undefined;





/**
 * Allowed values for the <code>dividendType</code> property.
 * @enum {String}
 * @readonly
 */
IHoldingCompany['DividendTypeEnum'] = {

    /**
     * value: "Taxable"
     * @const
     */
    "Taxable": "Taxable",

    /**
     * value: "NonTaxable"
     * @const
     */
    "NonTaxable": "NonTaxable"
};



export default IHoldingCompany;

