/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormattedEnumTypeFrequency model module.
 * @module model/FormattedEnumTypeFrequency
 * @version v1
 */
class FormattedEnumTypeFrequency {
    /**
     * Constructs a new <code>FormattedEnumTypeFrequency</code>.
     * @alias module:model/FormattedEnumTypeFrequency
     */
    constructor() { 
        
        FormattedEnumTypeFrequency.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormattedEnumTypeFrequency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormattedEnumTypeFrequency} obj Optional instance to populate.
     * @return {module:model/FormattedEnumTypeFrequency} The populated <code>FormattedEnumTypeFrequency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormattedEnumTypeFrequency();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormattedEnumTypeFrequency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormattedEnumTypeFrequency</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/FormattedEnumTypeFrequency.ValueEnum} value
 */
FormattedEnumTypeFrequency.prototype['value'] = undefined;





/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
FormattedEnumTypeFrequency['ValueEnum'] = {

    /**
     * value: "Annual"
     * @const
     */
    "Annual": "Annual",

    /**
     * value: "SemiAnnual"
     * @const
     */
    "SemiAnnual": "SemiAnnual",

    /**
     * value: "Quarterly"
     * @const
     */
    "Quarterly": "Quarterly",

    /**
     * value: "Bimonthly"
     * @const
     */
    "Bimonthly": "Bimonthly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "TwiceMonthly"
     * @const
     */
    "TwiceMonthly": "TwiceMonthly",

    /**
     * value: "BiWeekly"
     * @const
     */
    "BiWeekly": "BiWeekly",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Continuously"
     * @const
     */
    "Continuously": "Continuously",

    /**
     * value: "Onetime"
     * @const
     */
    "Onetime": "Onetime",

    /**
     * value: "EveryXYears"
     * @const
     */
    "EveryXYears": "EveryXYears"
};



export default FormattedEnumTypeFrequency;

