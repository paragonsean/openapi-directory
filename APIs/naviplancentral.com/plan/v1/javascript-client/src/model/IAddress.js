/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IAddress model module.
 * @module model/IAddress
 * @version v1
 */
class IAddress {
    /**
     * Constructs a new <code>IAddress</code>.
     * @alias module:model/IAddress
     */
    constructor() { 
        
        IAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IAddress} obj Optional instance to populate.
     * @return {module:model/IAddress} The populated <code>IAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IAddress();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('combinedCityStateProvince')) {
                obj['combinedCityStateProvince'] = ApiClient.convertToType(data['combinedCityStateProvince'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvinceAbbrev')) {
                obj['stateOrProvinceAbbrev'] = ApiClient.convertToType(data['stateOrProvinceAbbrev'], 'String');
            }
            if (data.hasOwnProperty('street1')) {
                obj['street1'] = ApiClient.convertToType(data['street1'], 'String');
            }
            if (data.hasOwnProperty('street2')) {
                obj['street2'] = ApiClient.convertToType(data['street2'], 'String');
            }
            if (data.hasOwnProperty('zipOrPostalCode')) {
                obj['zipOrPostalCode'] = ApiClient.convertToType(data['zipOrPostalCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['combinedCityStateProvince'] && !(typeof data['combinedCityStateProvince'] === 'string' || data['combinedCityStateProvince'] instanceof String)) {
            throw new Error("Expected the field `combinedCityStateProvince` to be a primitive type in the JSON string but got " + data['combinedCityStateProvince']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['stateOrProvinceAbbrev'] && !(typeof data['stateOrProvinceAbbrev'] === 'string' || data['stateOrProvinceAbbrev'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvinceAbbrev` to be a primitive type in the JSON string but got " + data['stateOrProvinceAbbrev']);
        }
        // ensure the json data is a string
        if (data['street1'] && !(typeof data['street1'] === 'string' || data['street1'] instanceof String)) {
            throw new Error("Expected the field `street1` to be a primitive type in the JSON string but got " + data['street1']);
        }
        // ensure the json data is a string
        if (data['street2'] && !(typeof data['street2'] === 'string' || data['street2'] instanceof String)) {
            throw new Error("Expected the field `street2` to be a primitive type in the JSON string but got " + data['street2']);
        }
        // ensure the json data is a string
        if (data['zipOrPostalCode'] && !(typeof data['zipOrPostalCode'] === 'string' || data['zipOrPostalCode'] instanceof String)) {
            throw new Error("Expected the field `zipOrPostalCode` to be a primitive type in the JSON string but got " + data['zipOrPostalCode']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
IAddress.prototype['city'] = undefined;

/**
 * @member {String} combinedCityStateProvince
 */
IAddress.prototype['combinedCityStateProvince'] = undefined;

/**
 * @member {String} country
 */
IAddress.prototype['country'] = undefined;

/**
 * @member {String} stateOrProvince
 */
IAddress.prototype['stateOrProvince'] = undefined;

/**
 * @member {String} stateOrProvinceAbbrev
 */
IAddress.prototype['stateOrProvinceAbbrev'] = undefined;

/**
 * @member {String} street1
 */
IAddress.prototype['street1'] = undefined;

/**
 * @member {String} street2
 */
IAddress.prototype['street2'] = undefined;

/**
 * @member {String} zipOrPostalCode
 */
IAddress.prototype['zipOrPostalCode'] = undefined;






export default IAddress;

