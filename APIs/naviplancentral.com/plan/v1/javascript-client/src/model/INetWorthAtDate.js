/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import IAssets from './IAssets';
import ILiabilities from './ILiabilities';
import IRetirementAssets from './IRetirementAssets';

/**
 * The INetWorthAtDate model module.
 * @module model/INetWorthAtDate
 * @version v1
 */
class INetWorthAtDate {
    /**
     * Constructs a new <code>INetWorthAtDate</code>.
     * @alias module:model/INetWorthAtDate
     */
    constructor() { 
        
        INetWorthAtDate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>INetWorthAtDate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/INetWorthAtDate} obj Optional instance to populate.
     * @return {module:model/INetWorthAtDate} The populated <code>INetWorthAtDate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new INetWorthAtDate();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = IAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('assetsFundingRetirement')) {
                obj['assetsFundingRetirement'] = IRetirementAssets.constructFromObject(data['assetsFundingRetirement']);
            }
            if (data.hasOwnProperty('clientNetWorth')) {
                obj['clientNetWorth'] = Currency.constructFromObject(data['clientNetWorth']);
            }
            if (data.hasOwnProperty('coClientNetWorth')) {
                obj['coClientNetWorth'] = Currency.constructFromObject(data['coClientNetWorth']);
            }
            if (data.hasOwnProperty('communityPropertyNetWorth')) {
                obj['communityPropertyNetWorth'] = Currency.constructFromObject(data['communityPropertyNetWorth']);
            }
            if (data.hasOwnProperty('jointNetWorth')) {
                obj['jointNetWorth'] = Currency.constructFromObject(data['jointNetWorth']);
            }
            if (data.hasOwnProperty('liabilities')) {
                obj['liabilities'] = ILiabilities.constructFromObject(data['liabilities']);
            }
            if (data.hasOwnProperty('totalNetWorth')) {
                obj['totalNetWorth'] = Currency.constructFromObject(data['totalNetWorth']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>INetWorthAtDate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>INetWorthAtDate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          IAssets.validateJSON(data['assets']);
        }
        // validate the optional field `assetsFundingRetirement`
        if (data['assetsFundingRetirement']) { // data not null
          IRetirementAssets.validateJSON(data['assetsFundingRetirement']);
        }
        // validate the optional field `clientNetWorth`
        if (data['clientNetWorth']) { // data not null
          Currency.validateJSON(data['clientNetWorth']);
        }
        // validate the optional field `coClientNetWorth`
        if (data['coClientNetWorth']) { // data not null
          Currency.validateJSON(data['coClientNetWorth']);
        }
        // validate the optional field `communityPropertyNetWorth`
        if (data['communityPropertyNetWorth']) { // data not null
          Currency.validateJSON(data['communityPropertyNetWorth']);
        }
        // validate the optional field `jointNetWorth`
        if (data['jointNetWorth']) { // data not null
          Currency.validateJSON(data['jointNetWorth']);
        }
        // validate the optional field `liabilities`
        if (data['liabilities']) { // data not null
          ILiabilities.validateJSON(data['liabilities']);
        }
        // validate the optional field `totalNetWorth`
        if (data['totalNetWorth']) { // data not null
          Currency.validateJSON(data['totalNetWorth']);
        }

        return true;
    }


}



/**
 * @member {module:model/IAssets} assets
 */
INetWorthAtDate.prototype['assets'] = undefined;

/**
 * @member {module:model/IRetirementAssets} assetsFundingRetirement
 */
INetWorthAtDate.prototype['assetsFundingRetirement'] = undefined;

/**
 * @member {module:model/Currency} clientNetWorth
 */
INetWorthAtDate.prototype['clientNetWorth'] = undefined;

/**
 * @member {module:model/Currency} coClientNetWorth
 */
INetWorthAtDate.prototype['coClientNetWorth'] = undefined;

/**
 * @member {module:model/Currency} communityPropertyNetWorth
 */
INetWorthAtDate.prototype['communityPropertyNetWorth'] = undefined;

/**
 * @member {module:model/Currency} jointNetWorth
 */
INetWorthAtDate.prototype['jointNetWorth'] = undefined;

/**
 * @member {module:model/ILiabilities} liabilities
 */
INetWorthAtDate.prototype['liabilities'] = undefined;

/**
 * @member {module:model/Currency} totalNetWorth
 */
INetWorthAtDate.prototype['totalNetWorth'] = undefined;






export default INetWorthAtDate;

