/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IAddress from './IAddress';
import IDependent from './IDependent';
import IFamilyMember from './IFamilyMember';

/**
 * The IFamily model module.
 * @module model/IFamily
 * @version v1
 */
class IFamily {
    /**
     * Constructs a new <code>IFamily</code>.
     * @alias module:model/IFamily
     */
    constructor() { 
        
        IFamily.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IFamily</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IFamily} obj Optional instance to populate.
     * @return {module:model/IFamily} The populated <code>IFamily</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IFamily();

            if (data.hasOwnProperty('address')) {
                obj['address'] = IAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = IFamilyMember.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('coClient')) {
                obj['coClient'] = IFamilyMember.constructFromObject(data['coClient']);
            }
            if (data.hasOwnProperty('dependents')) {
                obj['dependents'] = ApiClient.convertToType(data['dependents'], [IDependent]);
            }
            if (data.hasOwnProperty('headFullNames')) {
                obj['headFullNames'] = ApiClient.convertToType(data['headFullNames'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IFamily</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IFamily</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          IAddress.validateJSON(data['address']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          IFamilyMember.validateJSON(data['client']);
        }
        // validate the optional field `coClient`
        if (data['coClient']) { // data not null
          IFamilyMember.validateJSON(data['coClient']);
        }
        if (data['dependents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependents'])) {
                throw new Error("Expected the field `dependents` to be an array in the JSON data but got " + data['dependents']);
            }
            // validate the optional field `dependents` (array)
            for (const item of data['dependents']) {
                IDependent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['headFullNames'] && !(typeof data['headFullNames'] === 'string' || data['headFullNames'] instanceof String)) {
            throw new Error("Expected the field `headFullNames` to be a primitive type in the JSON string but got " + data['headFullNames']);
        }

        return true;
    }


}



/**
 * @member {module:model/IAddress} address
 */
IFamily.prototype['address'] = undefined;

/**
 * @member {module:model/IFamilyMember} client
 */
IFamily.prototype['client'] = undefined;

/**
 * @member {module:model/IFamilyMember} coClient
 */
IFamily.prototype['coClient'] = undefined;

/**
 * @member {Array.<module:model/IDependent>} dependents
 */
IFamily.prototype['dependents'] = undefined;

/**
 * @member {String} headFullNames
 */
IFamily.prototype['headFullNames'] = undefined;






export default IFamily;

