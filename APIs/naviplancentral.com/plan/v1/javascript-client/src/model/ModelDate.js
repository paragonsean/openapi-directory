/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelDate model module.
 * @module model/ModelDate
 * @version v1
 */
class ModelDate {
    /**
     * Constructs a new <code>ModelDate</code>.
     * @alias module:model/ModelDate
     */
    constructor() { 
        
        ModelDate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelDate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelDate} obj Optional instance to populate.
     * @return {module:model/ModelDate} The populated <code>ModelDate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelDate();

            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Number');
            }
            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('formattedMMMMddyyyy')) {
                obj['formattedMMMMddyyyy'] = ApiClient.convertToType(data['formattedMMMMddyyyy'], 'String');
            }
            if (data.hasOwnProperty('formattedMMMdd')) {
                obj['formattedMMMdd'] = ApiClient.convertToType(data['formattedMMMdd'], 'String');
            }
            if (data.hasOwnProperty('formattedMMMddyyyy')) {
                obj['formattedMMMddyyyy'] = ApiClient.convertToType(data['formattedMMMddyyyy'], 'String');
            }
            if (data.hasOwnProperty('formattedMMMyyyy')) {
                obj['formattedMMMyyyy'] = ApiClient.convertToType(data['formattedMMMyyyy'], 'String');
            }
            if (data.hasOwnProperty('formattedNA')) {
                obj['formattedNA'] = ApiClient.convertToType(data['formattedNA'], 'String');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('toDateTime')) {
                obj['toDateTime'] = ApiClient.convertToType(data['toDateTime'], 'Date');
            }
            if (data.hasOwnProperty('urlEncoded')) {
                obj['urlEncoded'] = ApiClient.convertToType(data['urlEncoded'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelDate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelDate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formatted'] && !(typeof data['formatted'] === 'string' || data['formatted'] instanceof String)) {
            throw new Error("Expected the field `formatted` to be a primitive type in the JSON string but got " + data['formatted']);
        }
        // ensure the json data is a string
        if (data['formattedMMMMddyyyy'] && !(typeof data['formattedMMMMddyyyy'] === 'string' || data['formattedMMMMddyyyy'] instanceof String)) {
            throw new Error("Expected the field `formattedMMMMddyyyy` to be a primitive type in the JSON string but got " + data['formattedMMMMddyyyy']);
        }
        // ensure the json data is a string
        if (data['formattedMMMdd'] && !(typeof data['formattedMMMdd'] === 'string' || data['formattedMMMdd'] instanceof String)) {
            throw new Error("Expected the field `formattedMMMdd` to be a primitive type in the JSON string but got " + data['formattedMMMdd']);
        }
        // ensure the json data is a string
        if (data['formattedMMMddyyyy'] && !(typeof data['formattedMMMddyyyy'] === 'string' || data['formattedMMMddyyyy'] instanceof String)) {
            throw new Error("Expected the field `formattedMMMddyyyy` to be a primitive type in the JSON string but got " + data['formattedMMMddyyyy']);
        }
        // ensure the json data is a string
        if (data['formattedMMMyyyy'] && !(typeof data['formattedMMMyyyy'] === 'string' || data['formattedMMMyyyy'] instanceof String)) {
            throw new Error("Expected the field `formattedMMMyyyy` to be a primitive type in the JSON string but got " + data['formattedMMMyyyy']);
        }
        // ensure the json data is a string
        if (data['formattedNA'] && !(typeof data['formattedNA'] === 'string' || data['formattedNA'] instanceof String)) {
            throw new Error("Expected the field `formattedNA` to be a primitive type in the JSON string but got " + data['formattedNA']);
        }
        // ensure the json data is a string
        if (data['urlEncoded'] && !(typeof data['urlEncoded'] === 'string' || data['urlEncoded'] instanceof String)) {
            throw new Error("Expected the field `urlEncoded` to be a primitive type in the JSON string but got " + data['urlEncoded']);
        }

        return true;
    }


}



/**
 * @member {Number} day
 */
ModelDate.prototype['day'] = undefined;

/**
 * @member {String} formatted
 */
ModelDate.prototype['formatted'] = undefined;

/**
 * @member {String} formattedMMMMddyyyy
 */
ModelDate.prototype['formattedMMMMddyyyy'] = undefined;

/**
 * @member {String} formattedMMMdd
 */
ModelDate.prototype['formattedMMMdd'] = undefined;

/**
 * @member {String} formattedMMMddyyyy
 */
ModelDate.prototype['formattedMMMddyyyy'] = undefined;

/**
 * @member {String} formattedMMMyyyy
 */
ModelDate.prototype['formattedMMMyyyy'] = undefined;

/**
 * @member {String} formattedNA
 */
ModelDate.prototype['formattedNA'] = undefined;

/**
 * @member {Number} month
 */
ModelDate.prototype['month'] = undefined;

/**
 * @member {Date} toDateTime
 */
ModelDate.prototype['toDateTime'] = undefined;

/**
 * @member {String} urlEncoded
 */
ModelDate.prototype['urlEncoded'] = undefined;

/**
 * @member {Number} year
 */
ModelDate.prototype['year'] = undefined;






export default ModelDate;

