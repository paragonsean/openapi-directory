/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import INetWorthCategory from './INetWorthCategory';
import IValueDescriptionPairCurrency from './IValueDescriptionPairCurrency';

/**
 * The IAssetCategories model module.
 * @module model/IAssetCategories
 * @version v1
 */
class IAssetCategories {
    /**
     * Constructs a new <code>IAssetCategories</code>.
     * @alias module:model/IAssetCategories
     */
    constructor() { 
        
        IAssetCategories.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IAssetCategories</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IAssetCategories} obj Optional instance to populate.
     * @return {module:model/IAssetCategories} The populated <code>IAssetCategories</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IAssetCategories();

            if (data.hasOwnProperty('allAssets')) {
                obj['allAssets'] = ApiClient.convertToType(data['allAssets'], [IValueDescriptionPairCurrency]);
            }
            if (data.hasOwnProperty('businessAssets')) {
                obj['businessAssets'] = INetWorthCategory.constructFromObject(data['businessAssets']);
            }
            if (data.hasOwnProperty('lifestyleAssets')) {
                obj['lifestyleAssets'] = INetWorthCategory.constructFromObject(data['lifestyleAssets']);
            }
            if (data.hasOwnProperty('nonQualifiedAnnuities')) {
                obj['nonQualifiedAnnuities'] = INetWorthCategory.constructFromObject(data['nonQualifiedAnnuities']);
            }
            if (data.hasOwnProperty('nonQualifiedAssets')) {
                obj['nonQualifiedAssets'] = INetWorthCategory.constructFromObject(data['nonQualifiedAssets']);
            }
            if (data.hasOwnProperty('privateCorporations')) {
                obj['privateCorporations'] = INetWorthCategory.constructFromObject(data['privateCorporations']);
            }
            if (data.hasOwnProperty('qualifiedAnnuities')) {
                obj['qualifiedAnnuities'] = INetWorthCategory.constructFromObject(data['qualifiedAnnuities']);
            }
            if (data.hasOwnProperty('qualifiedAssets')) {
                obj['qualifiedAssets'] = INetWorthCategory.constructFromObject(data['qualifiedAssets']);
            }
            if (data.hasOwnProperty('realEstate')) {
                obj['realEstate'] = INetWorthCategory.constructFromObject(data['realEstate']);
            }
            if (data.hasOwnProperty('totalAssets')) {
                obj['totalAssets'] = INetWorthCategory.constructFromObject(data['totalAssets']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IAssetCategories</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IAssetCategories</code>.
     */
    static validateJSON(data) {
        if (data['allAssets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allAssets'])) {
                throw new Error("Expected the field `allAssets` to be an array in the JSON data but got " + data['allAssets']);
            }
            // validate the optional field `allAssets` (array)
            for (const item of data['allAssets']) {
                IValueDescriptionPairCurrency.validateJSON(item);
            };
        }
        // validate the optional field `businessAssets`
        if (data['businessAssets']) { // data not null
          INetWorthCategory.validateJSON(data['businessAssets']);
        }
        // validate the optional field `lifestyleAssets`
        if (data['lifestyleAssets']) { // data not null
          INetWorthCategory.validateJSON(data['lifestyleAssets']);
        }
        // validate the optional field `nonQualifiedAnnuities`
        if (data['nonQualifiedAnnuities']) { // data not null
          INetWorthCategory.validateJSON(data['nonQualifiedAnnuities']);
        }
        // validate the optional field `nonQualifiedAssets`
        if (data['nonQualifiedAssets']) { // data not null
          INetWorthCategory.validateJSON(data['nonQualifiedAssets']);
        }
        // validate the optional field `privateCorporations`
        if (data['privateCorporations']) { // data not null
          INetWorthCategory.validateJSON(data['privateCorporations']);
        }
        // validate the optional field `qualifiedAnnuities`
        if (data['qualifiedAnnuities']) { // data not null
          INetWorthCategory.validateJSON(data['qualifiedAnnuities']);
        }
        // validate the optional field `qualifiedAssets`
        if (data['qualifiedAssets']) { // data not null
          INetWorthCategory.validateJSON(data['qualifiedAssets']);
        }
        // validate the optional field `realEstate`
        if (data['realEstate']) { // data not null
          INetWorthCategory.validateJSON(data['realEstate']);
        }
        // validate the optional field `totalAssets`
        if (data['totalAssets']) { // data not null
          INetWorthCategory.validateJSON(data['totalAssets']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/IValueDescriptionPairCurrency>} allAssets
 */
IAssetCategories.prototype['allAssets'] = undefined;

/**
 * @member {module:model/INetWorthCategory} businessAssets
 */
IAssetCategories.prototype['businessAssets'] = undefined;

/**
 * @member {module:model/INetWorthCategory} lifestyleAssets
 */
IAssetCategories.prototype['lifestyleAssets'] = undefined;

/**
 * @member {module:model/INetWorthCategory} nonQualifiedAnnuities
 */
IAssetCategories.prototype['nonQualifiedAnnuities'] = undefined;

/**
 * @member {module:model/INetWorthCategory} nonQualifiedAssets
 */
IAssetCategories.prototype['nonQualifiedAssets'] = undefined;

/**
 * @member {module:model/INetWorthCategory} privateCorporations
 */
IAssetCategories.prototype['privateCorporations'] = undefined;

/**
 * @member {module:model/INetWorthCategory} qualifiedAnnuities
 */
IAssetCategories.prototype['qualifiedAnnuities'] = undefined;

/**
 * @member {module:model/INetWorthCategory} qualifiedAssets
 */
IAssetCategories.prototype['qualifiedAssets'] = undefined;

/**
 * @member {module:model/INetWorthCategory} realEstate
 */
IAssetCategories.prototype['realEstate'] = undefined;

/**
 * @member {module:model/INetWorthCategory} totalAssets
 */
IAssetCategories.prototype['totalAssets'] = undefined;






export default IAssetCategories;

