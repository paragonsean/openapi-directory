/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormattedEnumTypeGender from './FormattedEnumTypeGender';
import IAddress from './IAddress';
import IEmployer from './IEmployer';
import IPersonName from './IPersonName';
import IPhoneNumbers from './IPhoneNumbers';
import ModelDate from './ModelDate';

/**
 * The IFamilyMember model module.
 * @module model/IFamilyMember
 * @version v1
 */
class IFamilyMember {
    /**
     * Constructs a new <code>IFamilyMember</code>.
     * @alias module:model/IFamilyMember
     */
    constructor() { 
        
        IFamilyMember.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IFamilyMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IFamilyMember} obj Optional instance to populate.
     * @return {module:model/IFamilyMember} The populated <code>IFamilyMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IFamilyMember();

            if (data.hasOwnProperty('address')) {
                obj['address'] = IAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('ageAsOfPlanDate')) {
                obj['ageAsOfPlanDate'] = ApiClient.convertToType(data['ageAsOfPlanDate'], 'Number');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ModelDate.constructFromObject(data['birthdate']);
            }
            if (data.hasOwnProperty('citizenship')) {
                obj['citizenship'] = ApiClient.convertToType(data['citizenship'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('employer')) {
                obj['employer'] = IEmployer.constructFromObject(data['employer']);
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = FormattedEnumTypeGender.constructFromObject(data['gender']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = IPersonName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('ownershipId')) {
                obj['ownershipId'] = ApiClient.convertToType(data['ownershipId'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = IPhoneNumbers.constructFromObject(data['phone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IFamilyMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IFamilyMember</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          IAddress.validateJSON(data['address']);
        }
        // validate the optional field `birthdate`
        if (data['birthdate']) { // data not null
          ModelDate.validateJSON(data['birthdate']);
        }
        // ensure the json data is a string
        if (data['citizenship'] && !(typeof data['citizenship'] === 'string' || data['citizenship'] instanceof String)) {
            throw new Error("Expected the field `citizenship` to be a primitive type in the JSON string but got " + data['citizenship']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // validate the optional field `employer`
        if (data['employer']) { // data not null
          IEmployer.validateJSON(data['employer']);
        }
        // validate the optional field `gender`
        if (data['gender']) { // data not null
          FormattedEnumTypeGender.validateJSON(data['gender']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          IPersonName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['ownershipId'] && !(typeof data['ownershipId'] === 'string' || data['ownershipId'] instanceof String)) {
            throw new Error("Expected the field `ownershipId` to be a primitive type in the JSON string but got " + data['ownershipId']);
        }
        // validate the optional field `phone`
        if (data['phone']) { // data not null
          IPhoneNumbers.validateJSON(data['phone']);
        }

        return true;
    }


}



/**
 * @member {module:model/IAddress} address
 */
IFamilyMember.prototype['address'] = undefined;

/**
 * @member {Number} ageAsOfPlanDate
 */
IFamilyMember.prototype['ageAsOfPlanDate'] = undefined;

/**
 * @member {module:model/ModelDate} birthdate
 */
IFamilyMember.prototype['birthdate'] = undefined;

/**
 * @member {String} citizenship
 */
IFamilyMember.prototype['citizenship'] = undefined;

/**
 * @member {String} email
 */
IFamilyMember.prototype['email'] = undefined;

/**
 * @member {module:model/IEmployer} employer
 */
IFamilyMember.prototype['employer'] = undefined;

/**
 * @member {module:model/FormattedEnumTypeGender} gender
 */
IFamilyMember.prototype['gender'] = undefined;

/**
 * @member {module:model/IPersonName} name
 */
IFamilyMember.prototype['name'] = undefined;

/**
 * @member {module:model/IFamilyMember.OwnershipIdEnum} ownershipId
 */
IFamilyMember.prototype['ownershipId'] = undefined;

/**
 * @member {module:model/IPhoneNumbers} phone
 */
IFamilyMember.prototype['phone'] = undefined;





/**
 * Allowed values for the <code>ownershipId</code> property.
 * @enum {String}
 * @readonly
 */
IFamilyMember['OwnershipIdEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "NonHead1"
     * @const
     */
    "NonHead1": "NonHead1",

    /**
     * value: "NonHead2"
     * @const
     */
    "NonHead2": "NonHead2",

    /**
     * value: "NonHead3"
     * @const
     */
    "NonHead3": "NonHead3",

    /**
     * value: "NonHead4"
     * @const
     */
    "NonHead4": "NonHead4",

    /**
     * value: "NonHead5"
     * @const
     */
    "NonHead5": "NonHead5",

    /**
     * value: "NonHead6"
     * @const
     */
    "NonHead6": "NonHead6",

    /**
     * value: "NonHead7"
     * @const
     */
    "NonHead7": "NonHead7",

    /**
     * value: "NonHead8"
     * @const
     */
    "NonHead8": "NonHead8",

    /**
     * value: "NonHead9"
     * @const
     */
    "NonHead9": "NonHead9",

    /**
     * value: "CommunityProperty"
     * @const
     */
    "CommunityProperty": "CommunityProperty",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "AllDependents"
     * @const
     */
    "AllDependents": "AllDependents",

    /**
     * value: "AllFamilyMembers"
     * @const
     */
    "AllFamilyMembers": "AllFamilyMembers",

    /**
     * value: "Corporation"
     * @const
     */
    "Corporation": "Corporation"
};



export default IFamilyMember;

