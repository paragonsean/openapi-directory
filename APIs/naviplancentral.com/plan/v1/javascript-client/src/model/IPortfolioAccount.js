/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import FormattedDateRange from './FormattedDateRange';
import IHolding from './IHolding';
import IPortfolioAsset from './IPortfolioAsset';
import IRateOfReturnDetails from './IRateOfReturnDetails';
import ISEPPRedemptionStrategy from './ISEPPRedemptionStrategy';
import ISavingsStrategies from './ISavingsStrategies';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IPortfolioAccount model module.
 * @module model/IPortfolioAccount
 * @version v1
 */
class IPortfolioAccount {
    /**
     * Constructs a new <code>IPortfolioAccount</code>.
     * @alias module:model/IPortfolioAccount
     */
    constructor() { 
        
        IPortfolioAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IPortfolioAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPortfolioAccount} obj Optional instance to populate.
     * @return {module:model/IPortfolioAccount} The populated <code>IPortfolioAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPortfolioAccount();

            if (data.hasOwnProperty('accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm')) {
                obj['accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm'] = ApiClient.convertToType(data['accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm'], 'Boolean');
            }
            if (data.hasOwnProperty('annualFee')) {
                obj['annualFee'] = Percent.constructFromObject(data['annualFee']);
            }
            if (data.hasOwnProperty('applicableRangeRetirementLiquidatedAssets')) {
                obj['applicableRangeRetirementLiquidatedAssets'] = FormattedDateRange.constructFromObject(data['applicableRangeRetirementLiquidatedAssets']);
            }
            if (data.hasOwnProperty('costBasis')) {
                obj['costBasis'] = Currency.constructFromObject(data['costBasis']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('descriptionWithOwner')) {
                obj['descriptionWithOwner'] = ApiClient.convertToType(data['descriptionWithOwner'], 'String');
            }
            if (data.hasOwnProperty('excludeInAA')) {
                obj['excludeInAA'] = ApiClient.convertToType(data['excludeInAA'], 'Boolean');
            }
            if (data.hasOwnProperty('holdings')) {
                obj['holdings'] = ApiClient.convertToType(data['holdings'], [IHolding]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isSystemGenerated')) {
                obj['isSystemGenerated'] = ApiClient.convertToType(data['isSystemGenerated'], 'Boolean');
            }
            if (data.hasOwnProperty('marketValue')) {
                obj['marketValue'] = Currency.constructFromObject(data['marketValue']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('portfolioAssets')) {
                obj['portfolioAssets'] = ApiClient.convertToType(data['portfolioAssets'], [IPortfolioAsset]);
            }
            if (data.hasOwnProperty('rateOfReturn')) {
                obj['rateOfReturn'] = IRateOfReturnDetails.constructFromObject(data['rateOfReturn']);
            }
            if (data.hasOwnProperty('savingsStrategies')) {
                obj['savingsStrategies'] = ISavingsStrategies.constructFromObject(data['savingsStrategies']);
            }
            if (data.hasOwnProperty('seppRedemptionStrategy')) {
                obj['seppRedemptionStrategy'] = ISEPPRedemptionStrategy.constructFromObject(data['seppRedemptionStrategy']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valuationDate')) {
                obj['valuationDate'] = ModelDate.constructFromObject(data['valuationDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPortfolioAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPortfolioAccount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualFee`
        if (data['annualFee']) { // data not null
          Percent.validateJSON(data['annualFee']);
        }
        // validate the optional field `applicableRangeRetirementLiquidatedAssets`
        if (data['applicableRangeRetirementLiquidatedAssets']) { // data not null
          FormattedDateRange.validateJSON(data['applicableRangeRetirementLiquidatedAssets']);
        }
        // validate the optional field `costBasis`
        if (data['costBasis']) { // data not null
          Currency.validateJSON(data['costBasis']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['descriptionWithOwner'] && !(typeof data['descriptionWithOwner'] === 'string' || data['descriptionWithOwner'] instanceof String)) {
            throw new Error("Expected the field `descriptionWithOwner` to be a primitive type in the JSON string but got " + data['descriptionWithOwner']);
        }
        if (data['holdings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['holdings'])) {
                throw new Error("Expected the field `holdings` to be an array in the JSON data but got " + data['holdings']);
            }
            // validate the optional field `holdings` (array)
            for (const item of data['holdings']) {
                IHolding.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `marketValue`
        if (data['marketValue']) { // data not null
          Currency.validateJSON(data['marketValue']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        if (data['portfolioAssets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['portfolioAssets'])) {
                throw new Error("Expected the field `portfolioAssets` to be an array in the JSON data but got " + data['portfolioAssets']);
            }
            // validate the optional field `portfolioAssets` (array)
            for (const item of data['portfolioAssets']) {
                IPortfolioAsset.validateJSON(item);
            };
        }
        // validate the optional field `rateOfReturn`
        if (data['rateOfReturn']) { // data not null
          IRateOfReturnDetails.validateJSON(data['rateOfReturn']);
        }
        // validate the optional field `savingsStrategies`
        if (data['savingsStrategies']) { // data not null
          ISavingsStrategies.validateJSON(data['savingsStrategies']);
        }
        // validate the optional field `seppRedemptionStrategy`
        if (data['seppRedemptionStrategy']) { // data not null
          ISEPPRedemptionStrategy.validateJSON(data['seppRedemptionStrategy']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `valuationDate`
        if (data['valuationDate']) { // data not null
          ModelDate.validateJSON(data['valuationDate']);
        }

        return true;
    }


}



/**
 * @member {Boolean} accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm
 */
IPortfolioAccount.prototype['accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm'] = undefined;

/**
 * @member {module:model/Percent} annualFee
 */
IPortfolioAccount.prototype['annualFee'] = undefined;

/**
 * @member {module:model/FormattedDateRange} applicableRangeRetirementLiquidatedAssets
 */
IPortfolioAccount.prototype['applicableRangeRetirementLiquidatedAssets'] = undefined;

/**
 * @member {module:model/Currency} costBasis
 */
IPortfolioAccount.prototype['costBasis'] = undefined;

/**
 * @member {String} description
 */
IPortfolioAccount.prototype['description'] = undefined;

/**
 * @member {String} descriptionWithOwner
 */
IPortfolioAccount.prototype['descriptionWithOwner'] = undefined;

/**
 * @member {Boolean} excludeInAA
 */
IPortfolioAccount.prototype['excludeInAA'] = undefined;

/**
 * @member {Array.<module:model/IHolding>} holdings
 */
IPortfolioAccount.prototype['holdings'] = undefined;

/**
 * @member {String} id
 */
IPortfolioAccount.prototype['id'] = undefined;

/**
 * @member {Boolean} isSystemGenerated
 */
IPortfolioAccount.prototype['isSystemGenerated'] = undefined;

/**
 * @member {module:model/Currency} marketValue
 */
IPortfolioAccount.prototype['marketValue'] = undefined;

/**
 * @member {module:model/IPortfolioAccount.OwnerEnum} owner
 */
IPortfolioAccount.prototype['owner'] = undefined;

/**
 * @member {Array.<module:model/IPortfolioAsset>} portfolioAssets
 */
IPortfolioAccount.prototype['portfolioAssets'] = undefined;

/**
 * @member {module:model/IRateOfReturnDetails} rateOfReturn
 */
IPortfolioAccount.prototype['rateOfReturn'] = undefined;

/**
 * @member {module:model/ISavingsStrategies} savingsStrategies
 */
IPortfolioAccount.prototype['savingsStrategies'] = undefined;

/**
 * @member {module:model/ISEPPRedemptionStrategy} seppRedemptionStrategy
 */
IPortfolioAccount.prototype['seppRedemptionStrategy'] = undefined;

/**
 * @member {String} type
 */
IPortfolioAccount.prototype['type'] = undefined;

/**
 * @member {module:model/ModelDate} valuationDate
 */
IPortfolioAccount.prototype['valuationDate'] = undefined;





/**
 * Allowed values for the <code>owner</code> property.
 * @enum {String}
 * @readonly
 */
IPortfolioAccount['OwnerEnum'] = {

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "NonHead1"
     * @const
     */
    "NonHead1": "NonHead1",

    /**
     * value: "NonHead2"
     * @const
     */
    "NonHead2": "NonHead2",

    /**
     * value: "NonHead3"
     * @const
     */
    "NonHead3": "NonHead3",

    /**
     * value: "NonHead4"
     * @const
     */
    "NonHead4": "NonHead4",

    /**
     * value: "NonHead5"
     * @const
     */
    "NonHead5": "NonHead5",

    /**
     * value: "NonHead6"
     * @const
     */
    "NonHead6": "NonHead6",

    /**
     * value: "NonHead7"
     * @const
     */
    "NonHead7": "NonHead7",

    /**
     * value: "NonHead8"
     * @const
     */
    "NonHead8": "NonHead8",

    /**
     * value: "NonHead9"
     * @const
     */
    "NonHead9": "NonHead9",

    /**
     * value: "CommunityProperty"
     * @const
     */
    "CommunityProperty": "CommunityProperty",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "AllDependents"
     * @const
     */
    "AllDependents": "AllDependents",

    /**
     * value: "AllFamilyMembers"
     * @const
     */
    "AllFamilyMembers": "AllFamilyMembers",

    /**
     * value: "Corporation"
     * @const
     */
    "Corporation": "Corporation"
};



export default IPortfolioAccount;

