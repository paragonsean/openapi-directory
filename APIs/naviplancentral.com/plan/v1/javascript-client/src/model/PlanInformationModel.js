/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IPlanModules from './IPlanModules';
import ModelDate from './ModelDate';
import ObjectLink from './ObjectLink';

/**
 * The PlanInformationModel model module.
 * @module model/PlanInformationModel
 * @version v1
 */
class PlanInformationModel {
    /**
     * Constructs a new <code>PlanInformationModel</code>.
     * @alias module:model/PlanInformationModel
     */
    constructor() { 
        
        PlanInformationModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanInformationModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanInformationModel} obj Optional instance to populate.
     * @return {module:model/PlanInformationModel} The populated <code>PlanInformationModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanInformationModel();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isJointAnalysis')) {
                obj['isJointAnalysis'] = ApiClient.convertToType(data['isJointAnalysis'], 'Boolean');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ObjectLink]);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('planDate')) {
                obj['planDate'] = ModelDate.constructFromObject(data['planDate']);
            }
            if (data.hasOwnProperty('planDescription')) {
                obj['planDescription'] = ApiClient.convertToType(data['planDescription'], 'String');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
            if (data.hasOwnProperty('planLevel')) {
                obj['planLevel'] = ApiClient.convertToType(data['planLevel'], 'String');
            }
            if (data.hasOwnProperty('planModules')) {
                obj['planModules'] = IPlanModules.constructFromObject(data['planModules']);
            }
            if (data.hasOwnProperty('planType')) {
                obj['planType'] = ApiClient.convertToType(data['planType'], 'String');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ModelDate.constructFromObject(data['publishDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanInformationModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanInformationModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ObjectLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // validate the optional field `planDate`
        if (data['planDate']) { // data not null
          ModelDate.validateJSON(data['planDate']);
        }
        // ensure the json data is a string
        if (data['planDescription'] && !(typeof data['planDescription'] === 'string' || data['planDescription'] instanceof String)) {
            throw new Error("Expected the field `planDescription` to be a primitive type in the JSON string but got " + data['planDescription']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }
        // ensure the json data is a string
        if (data['planLevel'] && !(typeof data['planLevel'] === 'string' || data['planLevel'] instanceof String)) {
            throw new Error("Expected the field `planLevel` to be a primitive type in the JSON string but got " + data['planLevel']);
        }
        // validate the optional field `planModules`
        if (data['planModules']) { // data not null
          IPlanModules.validateJSON(data['planModules']);
        }
        // ensure the json data is a string
        if (data['planType'] && !(typeof data['planType'] === 'string' || data['planType'] instanceof String)) {
            throw new Error("Expected the field `planType` to be a primitive type in the JSON string but got " + data['planType']);
        }
        // validate the optional field `publishDate`
        if (data['publishDate']) { // data not null
          ModelDate.validateJSON(data['publishDate']);
        }

        return true;
    }


}



/**
 * @member {String} country
 */
PlanInformationModel.prototype['country'] = undefined;

/**
 * @member {String} description
 */
PlanInformationModel.prototype['description'] = undefined;

/**
 * @member {Boolean} isJointAnalysis
 */
PlanInformationModel.prototype['isJointAnalysis'] = undefined;

/**
 * @member {Array.<module:model/ObjectLink>} links
 */
PlanInformationModel.prototype['links'] = undefined;

/**
 * @member {String} locale
 */
PlanInformationModel.prototype['locale'] = undefined;

/**
 * @member {module:model/ModelDate} planDate
 */
PlanInformationModel.prototype['planDate'] = undefined;

/**
 * @member {String} planDescription
 */
PlanInformationModel.prototype['planDescription'] = undefined;

/**
 * @member {String} planId
 */
PlanInformationModel.prototype['planId'] = undefined;

/**
 * @member {module:model/PlanInformationModel.PlanLevelEnum} planLevel
 */
PlanInformationModel.prototype['planLevel'] = undefined;

/**
 * @member {module:model/IPlanModules} planModules
 */
PlanInformationModel.prototype['planModules'] = undefined;

/**
 * @member {String} planType
 */
PlanInformationModel.prototype['planType'] = undefined;

/**
 * @member {module:model/ModelDate} publishDate
 */
PlanInformationModel.prototype['publishDate'] = undefined;





/**
 * Allowed values for the <code>planLevel</code> property.
 * @enum {String}
 * @readonly
 */
PlanInformationModel['PlanLevelEnum'] = {

    /**
     * value: "Calculator"
     * @const
     */
    "Calculator": "Calculator",

    /**
     * value: "FinancialAssessment"
     * @const
     */
    "FinancialAssessment": "FinancialAssessment",

    /**
     * value: "AssetAllocation"
     * @const
     */
    "AssetAllocation": "AssetAllocation",

    /**
     * value: "Level1"
     * @const
     */
    "Level1": "Level1",

    /**
     * value: "Level2"
     * @const
     */
    "Level2": "Level2",

    /**
     * value: "Level3"
     * @const
     */
    "Level3": "Level3",

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined"
};



export default PlanInformationModel;

