/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import INetWorthItem from './INetWorthItem';

/**
 * The INetWorthCategory model module.
 * @module model/INetWorthCategory
 * @version v1
 */
class INetWorthCategory {
    /**
     * Constructs a new <code>INetWorthCategory</code>.
     * @alias module:model/INetWorthCategory
     */
    constructor() { 
        
        INetWorthCategory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>INetWorthCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/INetWorthCategory} obj Optional instance to populate.
     * @return {module:model/INetWorthCategory} The populated <code>INetWorthCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new INetWorthCategory();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('itemized')) {
                obj['itemized'] = ApiClient.convertToType(data['itemized'], [INetWorthItem]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = Currency.constructFromObject(data['total']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>INetWorthCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>INetWorthCategory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['itemized']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemized'])) {
                throw new Error("Expected the field `itemized` to be an array in the JSON data but got " + data['itemized']);
            }
            // validate the optional field `itemized` (array)
            for (const item of data['itemized']) {
                INetWorthItem.validateJSON(item);
            };
        }
        // validate the optional field `total`
        if (data['total']) { // data not null
          Currency.validateJSON(data['total']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
INetWorthCategory.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/INetWorthItem>} itemized
 */
INetWorthCategory.prototype['itemized'] = undefined;

/**
 * @member {module:model/Currency} total
 */
INetWorthCategory.prototype['total'] = undefined;






export default INetWorthCategory;

