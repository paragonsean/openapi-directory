/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import FormattedDateRange from './FormattedDateRange';
import IVestingData from './IVestingData';
import ModelDate from './ModelDate';
import Percent from './Percent';

/**
 * The IStockOption model module.
 * @module model/IStockOption
 * @version v1
 */
class IStockOption {
    /**
     * Constructs a new <code>IStockOption</code>.
     * @alias module:model/IStockOption
     */
    constructor() { 
        
        IStockOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IStockOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IStockOption} obj Optional instance to populate.
     * @return {module:model/IStockOption} The populated <code>IStockOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IStockOption();

            if (data.hasOwnProperty('annualDividendPerUnit')) {
                obj['annualDividendPerUnit'] = Currency.constructFromObject(data['annualDividendPerUnit']);
            }
            if (data.hasOwnProperty('applicableRangeRetirementLiquidatedAssets')) {
                obj['applicableRangeRetirementLiquidatedAssets'] = FormattedDateRange.constructFromObject(data['applicableRangeRetirementLiquidatedAssets']);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('currentUnitPrice')) {
                obj['currentUnitPrice'] = Currency.constructFromObject(data['currentUnitPrice']);
            }
            if (data.hasOwnProperty('currentUnitPriceDate')) {
                obj['currentUnitPriceDate'] = ModelDate.constructFromObject(data['currentUnitPriceDate']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endOfPlanYearExercisableGrossValue')) {
                obj['endOfPlanYearExercisableGrossValue'] = Currency.constructFromObject(data['endOfPlanYearExercisableGrossValue']);
            }
            if (data.hasOwnProperty('exerciseCost')) {
                obj['exerciseCost'] = Currency.constructFromObject(data['exerciseCost']);
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ModelDate.constructFromObject(data['expirationDate']);
            }
            if (data.hasOwnProperty('grantDate')) {
                obj['grantDate'] = ModelDate.constructFromObject(data['grantDate']);
            }
            if (data.hasOwnProperty('grantedOptions')) {
                obj['grantedOptions'] = ApiClient.convertToType(data['grantedOptions'], 'Number');
            }
            if (data.hasOwnProperty('growthRate')) {
                obj['growthRate'] = Percent.constructFromObject(data['growthRate']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('optionsExercisable')) {
                obj['optionsExercisable'] = ApiClient.convertToType(data['optionsExercisable'], 'Number');
            }
            if (data.hasOwnProperty('optionsExercised')) {
                obj['optionsExercised'] = ApiClient.convertToType(data['optionsExercised'], 'Number');
            }
            if (data.hasOwnProperty('optionsVested')) {
                obj['optionsVested'] = ApiClient.convertToType(data['optionsVested'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('preTaxProfit')) {
                obj['preTaxProfit'] = Currency.constructFromObject(data['preTaxProfit']);
            }
            if (data.hasOwnProperty('startOfYearAMTBasis')) {
                obj['startOfYearAMTBasis'] = Currency.constructFromObject(data['startOfYearAMTBasis']);
            }
            if (data.hasOwnProperty('startOfYearCostBasis')) {
                obj['startOfYearCostBasis'] = Currency.constructFromObject(data['startOfYearCostBasis']);
            }
            if (data.hasOwnProperty('startOfYearUnitPrice')) {
                obj['startOfYearUnitPrice'] = Currency.constructFromObject(data['startOfYearUnitPrice']);
            }
            if (data.hasOwnProperty('strikePrice')) {
                obj['strikePrice'] = Currency.constructFromObject(data['strikePrice']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeFormatted')) {
                obj['typeFormatted'] = ApiClient.convertToType(data['typeFormatted'], 'String');
            }
            if (data.hasOwnProperty('vestingSchedule')) {
                obj['vestingSchedule'] = ApiClient.convertToType(data['vestingSchedule'], [IVestingData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IStockOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IStockOption</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualDividendPerUnit`
        if (data['annualDividendPerUnit']) { // data not null
          Currency.validateJSON(data['annualDividendPerUnit']);
        }
        // validate the optional field `applicableRangeRetirementLiquidatedAssets`
        if (data['applicableRangeRetirementLiquidatedAssets']) { // data not null
          FormattedDateRange.validateJSON(data['applicableRangeRetirementLiquidatedAssets']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // validate the optional field `currentUnitPrice`
        if (data['currentUnitPrice']) { // data not null
          Currency.validateJSON(data['currentUnitPrice']);
        }
        // validate the optional field `currentUnitPriceDate`
        if (data['currentUnitPriceDate']) { // data not null
          ModelDate.validateJSON(data['currentUnitPriceDate']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `endOfPlanYearExercisableGrossValue`
        if (data['endOfPlanYearExercisableGrossValue']) { // data not null
          Currency.validateJSON(data['endOfPlanYearExercisableGrossValue']);
        }
        // validate the optional field `exerciseCost`
        if (data['exerciseCost']) { // data not null
          Currency.validateJSON(data['exerciseCost']);
        }
        // validate the optional field `expirationDate`
        if (data['expirationDate']) { // data not null
          ModelDate.validateJSON(data['expirationDate']);
        }
        // validate the optional field `grantDate`
        if (data['grantDate']) { // data not null
          ModelDate.validateJSON(data['grantDate']);
        }
        // validate the optional field `growthRate`
        if (data['growthRate']) { // data not null
          Percent.validateJSON(data['growthRate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `preTaxProfit`
        if (data['preTaxProfit']) { // data not null
          Currency.validateJSON(data['preTaxProfit']);
        }
        // validate the optional field `startOfYearAMTBasis`
        if (data['startOfYearAMTBasis']) { // data not null
          Currency.validateJSON(data['startOfYearAMTBasis']);
        }
        // validate the optional field `startOfYearCostBasis`
        if (data['startOfYearCostBasis']) { // data not null
          Currency.validateJSON(data['startOfYearCostBasis']);
        }
        // validate the optional field `startOfYearUnitPrice`
        if (data['startOfYearUnitPrice']) { // data not null
          Currency.validateJSON(data['startOfYearUnitPrice']);
        }
        // validate the optional field `strikePrice`
        if (data['strikePrice']) { // data not null
          Currency.validateJSON(data['strikePrice']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeFormatted'] && !(typeof data['typeFormatted'] === 'string' || data['typeFormatted'] instanceof String)) {
            throw new Error("Expected the field `typeFormatted` to be a primitive type in the JSON string but got " + data['typeFormatted']);
        }
        if (data['vestingSchedule']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vestingSchedule'])) {
                throw new Error("Expected the field `vestingSchedule` to be an array in the JSON data but got " + data['vestingSchedule']);
            }
            // validate the optional field `vestingSchedule` (array)
            for (const item of data['vestingSchedule']) {
                IVestingData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Currency} annualDividendPerUnit
 */
IStockOption.prototype['annualDividendPerUnit'] = undefined;

/**
 * @member {module:model/FormattedDateRange} applicableRangeRetirementLiquidatedAssets
 */
IStockOption.prototype['applicableRangeRetirementLiquidatedAssets'] = undefined;

/**
 * @member {String} company
 */
IStockOption.prototype['company'] = undefined;

/**
 * @member {module:model/Currency} currentUnitPrice
 */
IStockOption.prototype['currentUnitPrice'] = undefined;

/**
 * @member {module:model/ModelDate} currentUnitPriceDate
 */
IStockOption.prototype['currentUnitPriceDate'] = undefined;

/**
 * @member {String} description
 */
IStockOption.prototype['description'] = undefined;

/**
 * @member {module:model/Currency} endOfPlanYearExercisableGrossValue
 */
IStockOption.prototype['endOfPlanYearExercisableGrossValue'] = undefined;

/**
 * @member {module:model/Currency} exerciseCost
 */
IStockOption.prototype['exerciseCost'] = undefined;

/**
 * @member {module:model/ModelDate} expirationDate
 */
IStockOption.prototype['expirationDate'] = undefined;

/**
 * @member {module:model/ModelDate} grantDate
 */
IStockOption.prototype['grantDate'] = undefined;

/**
 * @member {Number} grantedOptions
 */
IStockOption.prototype['grantedOptions'] = undefined;

/**
 * @member {module:model/Percent} growthRate
 */
IStockOption.prototype['growthRate'] = undefined;

/**
 * @member {String} id
 */
IStockOption.prototype['id'] = undefined;

/**
 * @member {Number} optionsExercisable
 */
IStockOption.prototype['optionsExercisable'] = undefined;

/**
 * @member {Number} optionsExercised
 */
IStockOption.prototype['optionsExercised'] = undefined;

/**
 * @member {Number} optionsVested
 */
IStockOption.prototype['optionsVested'] = undefined;

/**
 * @member {String} owner
 */
IStockOption.prototype['owner'] = undefined;

/**
 * @member {module:model/Currency} preTaxProfit
 */
IStockOption.prototype['preTaxProfit'] = undefined;

/**
 * @member {module:model/Currency} startOfYearAMTBasis
 */
IStockOption.prototype['startOfYearAMTBasis'] = undefined;

/**
 * @member {module:model/Currency} startOfYearCostBasis
 */
IStockOption.prototype['startOfYearCostBasis'] = undefined;

/**
 * @member {module:model/Currency} startOfYearUnitPrice
 */
IStockOption.prototype['startOfYearUnitPrice'] = undefined;

/**
 * @member {module:model/Currency} strikePrice
 */
IStockOption.prototype['strikePrice'] = undefined;

/**
 * @member {String} symbol
 */
IStockOption.prototype['symbol'] = undefined;

/**
 * @member {module:model/IStockOption.TypeEnum} type
 */
IStockOption.prototype['type'] = undefined;

/**
 * @member {String} typeFormatted
 */
IStockOption.prototype['typeFormatted'] = undefined;

/**
 * @member {Array.<module:model/IVestingData>} vestingSchedule
 */
IStockOption.prototype['vestingSchedule'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IStockOption['TypeEnum'] = {

    /**
     * value: "NonQualifiedStockOption"
     * @const
     */
    "NonQualifiedStockOption": "NonQualifiedStockOption",

    /**
     * value: "IncentiveStockOption"
     * @const
     */
    "IncentiveStockOption": "IncentiveStockOption"
};



export default IStockOption;

