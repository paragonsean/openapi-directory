/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyWithGrowth from './CurrencyWithGrowth';

/**
 * The BenefitCurrencyWithGrowth model module.
 * @module model/BenefitCurrencyWithGrowth
 * @version v1
 */
class BenefitCurrencyWithGrowth {
    /**
     * Constructs a new <code>BenefitCurrencyWithGrowth</code>.
     * @alias module:model/BenefitCurrencyWithGrowth
     */
    constructor() { 
        
        BenefitCurrencyWithGrowth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BenefitCurrencyWithGrowth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BenefitCurrencyWithGrowth} obj Optional instance to populate.
     * @return {module:model/BenefitCurrencyWithGrowth} The populated <code>BenefitCurrencyWithGrowth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BenefitCurrencyWithGrowth();

            if (data.hasOwnProperty('benefitType')) {
                obj['benefitType'] = ApiClient.convertToType(data['benefitType'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = CurrencyWithGrowth.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BenefitCurrencyWithGrowth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BenefitCurrencyWithGrowth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['benefitType'] && !(typeof data['benefitType'] === 'string' || data['benefitType'] instanceof String)) {
            throw new Error("Expected the field `benefitType` to be a primitive type in the JSON string but got " + data['benefitType']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          CurrencyWithGrowth.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/BenefitCurrencyWithGrowth.BenefitTypeEnum} benefitType
 */
BenefitCurrencyWithGrowth.prototype['benefitType'] = undefined;

/**
 * @member {module:model/CurrencyWithGrowth} value
 */
BenefitCurrencyWithGrowth.prototype['value'] = undefined;





/**
 * Allowed values for the <code>benefitType</code> property.
 * @enum {String}
 * @readonly
 */
BenefitCurrencyWithGrowth['BenefitTypeEnum'] = {

    /**
     * value: "DeathBenefit"
     * @const
     */
    "DeathBenefit": "DeathBenefit",

    /**
     * value: "MonthlyBenefit"
     * @const
     */
    "MonthlyBenefit": "MonthlyBenefit",

    /**
     * value: "DailyBenefit"
     * @const
     */
    "DailyBenefit": "DailyBenefit",

    /**
     * value: "MaximumBenefit"
     * @const
     */
    "MaximumBenefit": "MaximumBenefit",

    /**
     * value: "WeeklyBenefit"
     * @const
     */
    "WeeklyBenefit": "WeeklyBenefit",

    /**
     * value: "AnnualBenefit"
     * @const
     */
    "AnnualBenefit": "AnnualBenefit",

    /**
     * value: "LumpSum"
     * @const
     */
    "LumpSum": "LumpSum"
};



export default BenefitCurrencyWithGrowth;

