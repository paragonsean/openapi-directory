/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IActivityData from './IActivityData';

/**
 * The ILoanRepaymentToShareholder model module.
 * @module model/ILoanRepaymentToShareholder
 * @version v1
 */
class ILoanRepaymentToShareholder {
    /**
     * Constructs a new <code>ILoanRepaymentToShareholder</code>.
     * @alias module:model/ILoanRepaymentToShareholder
     */
    constructor() { 
        
        ILoanRepaymentToShareholder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ILoanRepaymentToShareholder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ILoanRepaymentToShareholder} obj Optional instance to populate.
     * @return {module:model/ILoanRepaymentToShareholder} The populated <code>ILoanRepaymentToShareholder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ILoanRepaymentToShareholder();

            if (data.hasOwnProperty('activityData')) {
                obj['activityData'] = IActivityData.constructFromObject(data['activityData']);
            }
            if (data.hasOwnProperty('shareholder')) {
                obj['shareholder'] = ApiClient.convertToType(data['shareholder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ILoanRepaymentToShareholder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ILoanRepaymentToShareholder</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activityData`
        if (data['activityData']) { // data not null
          IActivityData.validateJSON(data['activityData']);
        }
        // ensure the json data is a string
        if (data['shareholder'] && !(typeof data['shareholder'] === 'string' || data['shareholder'] instanceof String)) {
            throw new Error("Expected the field `shareholder` to be a primitive type in the JSON string but got " + data['shareholder']);
        }

        return true;
    }


}



/**
 * @member {module:model/IActivityData} activityData
 */
ILoanRepaymentToShareholder.prototype['activityData'] = undefined;

/**
 * @member {module:model/ILoanRepaymentToShareholder.ShareholderEnum} shareholder
 */
ILoanRepaymentToShareholder.prototype['shareholder'] = undefined;





/**
 * Allowed values for the <code>shareholder</code> property.
 * @enum {String}
 * @readonly
 */
ILoanRepaymentToShareholder['ShareholderEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Head1"
     * @const
     */
    "Head1": "Head1",

    /**
     * value: "Head2"
     * @const
     */
    "Head2": "Head2",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default ILoanRepaymentToShareholder;

