/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel';
import AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel from '../model/AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel';
import AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel from '../model/AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel';
import AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel from '../model/AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel';
import AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel from '../model/AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel';
import AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel from '../model/AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel';
import AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel from '../model/AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel';
import AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel from '../model/AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel';
import AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel from '../model/AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel';

/**
* LivePlan service.
* @module api/LivePlanApi
* @version v1
*/
export default class LivePlanApi {

    /**
    * Constructs a new LivePlanApi. 
    * @alias module:api/LivePlanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the livePlanGetAccountsByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetAccountsByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves accounts for a given plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetAccountsByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel}
     */
    livePlanGetAccountsByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetAccountsByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel;
      return this.apiClient.callApi(
        '/api/LivePlan/NetWorth/Accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetGoalFundingListByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetGoalFundingListByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of funding accounts
     * This function retrieves a list of funding accounts for the goals in the plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetGoalFundingListByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel}
     */
    livePlanGetGoalFundingListByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetGoalFundingListByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel;
      return this.apiClient.callApi(
        '/api/LivePlan/Goals/Funding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetGoalsByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetGoalsByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all goals from the live plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetGoalsByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel}
     */
    livePlanGetGoalsByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetGoalsByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel;
      return this.apiClient.callApi(
        '/api/LivePlan/Goals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetLiabilitiesByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetLiabilitiesByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves liabilities for a given plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetLiabilitiesByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel}
     */
    livePlanGetLiabilitiesByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetLiabilitiesByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel;
      return this.apiClient.callApi(
        '/api/LivePlan/NetWorth/Liabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetLifestyleAssetsByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetLifestyleAssetsByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves lifestyle assets for a given plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetLifestyleAssetsByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel}
     */
    livePlanGetLifestyleAssetsByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetLifestyleAssetsByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel;
      return this.apiClient.callApi(
        '/api/LivePlan/NetWorth/LifestyleAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves needs vs abilities projections
     * @param {Number} id 
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel}
     */
    livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(id, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel;
      return this.apiClient.callApi(
        '/api/LivePlan/Projections/{id}/NeedsVsAbilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetProjectedNetWorthByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetProjectedNetWorthByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves net worth projections
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetProjectedNetWorthByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel}
     */
    livePlanGetProjectedNetWorthByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetProjectedNetWorthByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel;
      return this.apiClient.callApi(
        '/api/LivePlan/Projections/NetWorth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetRealEstateAssetsByClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetRealEstateAssetsByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves real estate accounts for a given plan
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetRealEstateAssetsByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel}
     */
    livePlanGetRealEstateAssetsByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetRealEstateAssetsByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel;
      return this.apiClient.callApi(
        '/api/LivePlan/NetWorth/RealEstate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the livePlanGetWhatAreMyOptionsByIdClientidPlanid operation.
     * @callback module:api/LivePlanApi~livePlanGetWhatAreMyOptionsByIdClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve WAMO values for a given goal
     * This function retrieves the WAMO values for the specified goal
     * @param {Number} id The id of the goal
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/LivePlanApi~livePlanGetWhatAreMyOptionsByIdClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel}
     */
    livePlanGetWhatAreMyOptionsByIdClientidPlanid(id, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling livePlanGetWhatAreMyOptionsByIdClientidPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling livePlanGetWhatAreMyOptionsByIdClientidPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel;
      return this.apiClient.callApi(
        '/api/LivePlan/Goals/{id}/WhatAreMyOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
