/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResetPasswordModel from '../model/ResetPasswordModel';
import SetPasswordModel from '../model/SetPasswordModel';

/**
* Password service.
* @module api/PasswordApi
* @version v1
*/
export default class PasswordApi {

    /**
    * Constructs a new PasswordApi. 
    * @alias module:api/PasswordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the passwordHasUserSetPassword operation.
     * @callback module:api/PasswordApi~passwordHasUserSetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Determines if the currently logged in user has set their own password
     * @param {module:api/PasswordApi~passwordHasUserSetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    passwordHasUserSetPassword(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Password/HasUserSetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordPasswordRequirements operation.
     * @callback module:api/PasswordApi~passwordPasswordRequirementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the password complexity requirements
     * @param {module:api/PasswordApi~passwordPasswordRequirementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    passwordPasswordRequirements(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Password/PasswordRequirements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetByModel operation.
     * @callback module:api/PasswordApi~passwordResetByModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the password for the supplied user name
     * @param {module:model/ResetPasswordModel} model 
     * @param {module:api/PasswordApi~passwordResetByModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    passwordResetByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling passwordResetByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Password/Reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordSetByModel operation.
     * @callback module:api/PasswordApi~passwordSetByModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the password for the currently logged in user
     * @param {module:model/SetPasswordModel} model 
     * @param {module:api/PasswordApi~passwordSetByModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    passwordSetByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling passwordSetByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Password/Set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
