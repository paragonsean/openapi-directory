/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel';
import AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel from '../model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel';

/**
* GoalAdjustments service.
* @module api/GoalAdjustmentsApi
* @version v1
*/
export default class GoalAdjustmentsApi {

    /**
    * Constructs a new GoalAdjustmentsApi. 
    * @alias module:api/GoalAdjustmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the goalAdjustmentsGetEducationByIdClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetEducationByIdClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param {Number} id The id of the goal to retrieve adjustments for.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetEducationByIdClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel}
     */
    goalAdjustmentsGetEducationByIdClientidPlanid(id, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalAdjustmentsGetEducationByIdClientidPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetEducationByIdClientidPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/Education/{id}/Adjustments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of goal adjustment restrictions.
     * This function returns a list of adjustment restrictions for all goals.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel}
     */
    goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/Restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsGetGoalSuccessRatesByClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of goals with their relevant success rates.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel}
     */
    goalAdjustmentsGetGoalSuccessRatesByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetGoalSuccessRatesByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/GoalSuccessRates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsGetMajorPurchaseByIdClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param {Number} id The id of the goal to retrieve adjustments for.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel}
     */
    goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(id, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalAdjustmentsGetMajorPurchaseByIdClientidPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetMajorPurchaseByIdClientidPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/MajorPurchase/{id}/Adjustments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsGetRetirementByClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetRetirementByClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it for a particular client
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetRetirementByClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel}
     */
    goalAdjustmentsGetRetirementByClientidPlanid(planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetRetirementByClientidPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/Retirement/Adjustments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns WAMO values for current goal
     * @param {Number} id The id of the goal to retrieve WAMO values for.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions.
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel}
     */
    goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(id, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'clientId': opts['clientId'],
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/{id}/WhatAreMyOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param {Number} id The id of the goal to retrieve adjustments for.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments} goalAdjustments The adjusted values for this goal
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments}
     */
    goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(id, planId, goalAdjustments, callback) {
      let postBody = goalAdjustments;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid");
      }
      // verify the required parameter 'goalAdjustments' is set
      if (goalAdjustments === undefined || goalAdjustments === null) {
        throw new Error("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/Education/{id}/Calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param {Number} id The id of the goal to retrieve adjustments for.
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments} goalAdjustments The adjusted values for this goal
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments}
     */
    goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(id, planId, goalAdjustments, callback) {
      let postBody = goalAdjustments;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid");
      }
      // verify the required parameter 'goalAdjustments' is set
      if (goalAdjustments === undefined || goalAdjustments === null) {
        throw new Error("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/MajorPurchase/{id}/Calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAdjustmentsPostRetirementByGoaladjustmentsPlanid operation.
     * @callback module:api/GoalAdjustmentsApi~goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param {String} planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
     * @param {module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments} goalAdjustments The adjusted values for this goal
     * @param {module:api/GoalAdjustmentsApi~goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments}
     */
    goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(planId, goalAdjustments, callback) {
      let postBody = goalAdjustments;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalAdjustmentsPostRetirementByGoaladjustmentsPlanid");
      }
      // verify the required parameter 'goalAdjustments' is set
      if (goalAdjustments === undefined || goalAdjustments === null) {
        throw new Error("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostRetirementByGoaladjustmentsPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments;
      return this.apiClient.callApi(
        '/api/GoalAdjustments/Retirement/Calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
