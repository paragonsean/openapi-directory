/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginModel from '../model/LoginModel';
import PublicSessionInfoModel from '../model/PublicSessionInfoModel';

/**
* Auth service.
* @module api/AuthApi
* @version v1
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authLoginByModel operation.
     * @callback module:api/AuthApi~authLoginByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicSessionInfoModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a session with the DomainProviders user store
     * @param {module:model/LoginModel} model DomainProvider username and password
     * @param {module:api/AuthApi~authLoginByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicSessionInfoModel}
     */
    authLoginByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling authLoginByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = PublicSessionInfoModel;
      return this.apiClient.callApi(
        '/api/auth/Login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authLogout operation.
     * @callback module:api/AuthApi~authLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authLogout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth/Logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authPasswordRequirements operation.
     * @callback module:api/AuthApi~authPasswordRequirementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the login rules
     * @param {module:api/AuthApi~authPasswordRequirementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authPasswordRequirements(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/auth/LoginConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authResumeSession operation.
     * @callback module:api/AuthApi~authResumeSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicSessionInfoModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate and extend the duration of a session
     * @param {module:api/AuthApi~authResumeSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicSessionInfoModel}
     */
    authResumeSession(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = PublicSessionInfoModel;
      return this.apiClient.callApi(
        '/api/auth/ResumeSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
