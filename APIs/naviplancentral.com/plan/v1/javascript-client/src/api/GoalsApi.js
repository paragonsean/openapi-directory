/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoalModel from '../model/GoalModel';
import GoalsModel from '../model/GoalsModel';

/**
* Goals service.
* @module api/GoalsApi
* @version v1
*/
export default class GoalsApi {

    /**
    * Constructs a new GoalsApi. 
    * @alias module:api/GoalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the goalsGetByIdPlanid operation.
     * @callback module:api/GoalsApi~goalsGetByIdPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve goals
     * This operation retrieves a goal from the plan.
     * @param {Number} id ID of goal to retrieve
     * @param {String} planId Id of the plan to retrieve data from (e.g. 1001-11-3).
     * @param {module:api/GoalsApi~goalsGetByIdPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalModel}
     */
    goalsGetByIdPlanid(id, planId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling goalsGetByIdPlanid");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalsGetByIdPlanid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = GoalModel;
      return this.apiClient.callApi(
        '/api/Goals/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the goalsGetByPlanid operation.
     * @callback module:api/GoalsApi~goalsGetByPlanidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve goals
     * This operation retrieves a list of all of the goals in the plan.
     * @param {String} planId Id of the plan to retrieve data from (e.g. 1001-11-3).
     * @param {module:api/GoalsApi~goalsGetByPlanidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalsModel}
     */
    goalsGetByPlanid(planId, callback) {
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling goalsGetByPlanid");
      }

      let pathParams = {
      };
      let queryParams = {
        'planId': planId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = GoalsModel;
      return this.apiClient.callApi(
        '/api/Goals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
