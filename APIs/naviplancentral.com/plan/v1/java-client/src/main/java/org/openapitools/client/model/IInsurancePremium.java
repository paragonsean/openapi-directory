/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.CurrencyWithGrowth;
import org.openapitools.client.model.IFormattedFrequency;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IInsurancePremium
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IInsurancePremium {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private CurrencyWithGrowth amount;

  public static final String SERIALIZED_NAME_ANNUAL_AMOUNT = "annualAmount";
  @SerializedName(SERIALIZED_NAME_ANNUAL_AMOUNT)
  private Currency annualAmount;

  public static final String SERIALIZED_NAME_CEASE_DATE = "ceaseDate";
  @SerializedName(SERIALIZED_NAME_CEASE_DATE)
  private Date ceaseDate;

  public static final String SERIALIZED_NAME_FORMATTED_PAYING_MEMBER = "formattedPayingMember";
  @SerializedName(SERIALIZED_NAME_FORMATTED_PAYING_MEMBER)
  private String formattedPayingMember;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private IFormattedFrequency frequency;

  /**
   * Gets or Sets payingMember
   */
  @JsonAdapter(PayingMemberEnum.Adapter.class)
  public enum PayingMemberEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    PayingMemberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayingMemberEnum fromValue(String value) {
      for (PayingMemberEnum b : PayingMemberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayingMemberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayingMemberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayingMemberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayingMemberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayingMemberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYING_MEMBER = "payingMember";
  @SerializedName(SERIALIZED_NAME_PAYING_MEMBER)
  private PayingMemberEnum payingMember;

  public static final String SERIALIZED_NAME_PREMIUM_REFUND_AMOUNT = "premiumRefundAmount";
  @SerializedName(SERIALIZED_NAME_PREMIUM_REFUND_AMOUNT)
  private Percent premiumRefundAmount;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Date startDate;

  public IInsurancePremium() {
  }

  public IInsurancePremium(
     String formattedPayingMember, 
     PayingMemberEnum payingMember
  ) {
    this();
    this.formattedPayingMember = formattedPayingMember;
    this.payingMember = payingMember;
  }

  public IInsurancePremium amount(CurrencyWithGrowth amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public CurrencyWithGrowth getAmount() {
    return amount;
  }

  public void setAmount(CurrencyWithGrowth amount) {
    this.amount = amount;
  }


  public IInsurancePremium annualAmount(Currency annualAmount) {
    this.annualAmount = annualAmount;
    return this;
  }

  /**
   * Get annualAmount
   * @return annualAmount
   */
  @javax.annotation.Nullable
  public Currency getAnnualAmount() {
    return annualAmount;
  }

  public void setAnnualAmount(Currency annualAmount) {
    this.annualAmount = annualAmount;
  }


  public IInsurancePremium ceaseDate(Date ceaseDate) {
    this.ceaseDate = ceaseDate;
    return this;
  }

  /**
   * Get ceaseDate
   * @return ceaseDate
   */
  @javax.annotation.Nullable
  public Date getCeaseDate() {
    return ceaseDate;
  }

  public void setCeaseDate(Date ceaseDate) {
    this.ceaseDate = ceaseDate;
  }


  /**
   * Get formattedPayingMember
   * @return formattedPayingMember
   */
  @javax.annotation.Nullable
  public String getFormattedPayingMember() {
    return formattedPayingMember;
  }



  public IInsurancePremium frequency(IFormattedFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public IFormattedFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(IFormattedFrequency frequency) {
    this.frequency = frequency;
  }


  /**
   * Get payingMember
   * @return payingMember
   */
  @javax.annotation.Nullable
  public PayingMemberEnum getPayingMember() {
    return payingMember;
  }



  public IInsurancePremium premiumRefundAmount(Percent premiumRefundAmount) {
    this.premiumRefundAmount = premiumRefundAmount;
    return this;
  }

  /**
   * Get premiumRefundAmount
   * @return premiumRefundAmount
   */
  @javax.annotation.Nullable
  public Percent getPremiumRefundAmount() {
    return premiumRefundAmount;
  }

  public void setPremiumRefundAmount(Percent premiumRefundAmount) {
    this.premiumRefundAmount = premiumRefundAmount;
  }


  public IInsurancePremium startDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public Date getStartDate() {
    return startDate;
  }

  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IInsurancePremium iinsurancePremium = (IInsurancePremium) o;
    return Objects.equals(this.amount, iinsurancePremium.amount) &&
        Objects.equals(this.annualAmount, iinsurancePremium.annualAmount) &&
        Objects.equals(this.ceaseDate, iinsurancePremium.ceaseDate) &&
        Objects.equals(this.formattedPayingMember, iinsurancePremium.formattedPayingMember) &&
        Objects.equals(this.frequency, iinsurancePremium.frequency) &&
        Objects.equals(this.payingMember, iinsurancePremium.payingMember) &&
        Objects.equals(this.premiumRefundAmount, iinsurancePremium.premiumRefundAmount) &&
        Objects.equals(this.startDate, iinsurancePremium.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, annualAmount, ceaseDate, formattedPayingMember, frequency, payingMember, premiumRefundAmount, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IInsurancePremium {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    annualAmount: ").append(toIndentedString(annualAmount)).append("\n");
    sb.append("    ceaseDate: ").append(toIndentedString(ceaseDate)).append("\n");
    sb.append("    formattedPayingMember: ").append(toIndentedString(formattedPayingMember)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    payingMember: ").append(toIndentedString(payingMember)).append("\n");
    sb.append("    premiumRefundAmount: ").append(toIndentedString(premiumRefundAmount)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("annualAmount");
    openapiFields.add("ceaseDate");
    openapiFields.add("formattedPayingMember");
    openapiFields.add("frequency");
    openapiFields.add("payingMember");
    openapiFields.add("premiumRefundAmount");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IInsurancePremium
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IInsurancePremium.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IInsurancePremium is not found in the empty JSON string", IInsurancePremium.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IInsurancePremium.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IInsurancePremium` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        CurrencyWithGrowth.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `annualAmount`
      if (jsonObj.get("annualAmount") != null && !jsonObj.get("annualAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("annualAmount"));
      }
      // validate the optional field `ceaseDate`
      if (jsonObj.get("ceaseDate") != null && !jsonObj.get("ceaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("ceaseDate"));
      }
      if ((jsonObj.get("formattedPayingMember") != null && !jsonObj.get("formattedPayingMember").isJsonNull()) && !jsonObj.get("formattedPayingMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedPayingMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedPayingMember").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        IFormattedFrequency.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("payingMember") != null && !jsonObj.get("payingMember").isJsonNull()) && !jsonObj.get("payingMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payingMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payingMember").toString()));
      }
      // validate the optional field `payingMember`
      if (jsonObj.get("payingMember") != null && !jsonObj.get("payingMember").isJsonNull()) {
        PayingMemberEnum.validateJsonElement(jsonObj.get("payingMember"));
      }
      // validate the optional field `premiumRefundAmount`
      if (jsonObj.get("premiumRefundAmount") != null && !jsonObj.get("premiumRefundAmount").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("premiumRefundAmount"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IInsurancePremium.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IInsurancePremium' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IInsurancePremium> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IInsurancePremium.class));

       return (TypeAdapter<T>) new TypeAdapter<IInsurancePremium>() {
           @Override
           public void write(JsonWriter out, IInsurancePremium value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IInsurancePremium read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IInsurancePremium given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IInsurancePremium
   * @throws IOException if the JSON string is invalid with respect to IInsurancePremium
   */
  public static IInsurancePremium fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IInsurancePremium.class);
  }

  /**
   * Convert an instance of IInsurancePremium to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

