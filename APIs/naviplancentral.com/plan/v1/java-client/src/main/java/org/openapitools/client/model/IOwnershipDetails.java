/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ICommonShareClassDetails;
import org.openapitools.client.model.IInvestmentAccountOwnershipData;
import org.openapitools.client.model.IOwnershipData;
import org.openapitools.client.model.IPreferredShareClassDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IOwnershipDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IOwnershipDetails {
  public static final String SERIALIZED_NAME_COMMON = "common";
  @SerializedName(SERIALIZED_NAME_COMMON)
  private List<IOwnershipData> common = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMON_SHARES_DETAILS = "commonSharesDetails";
  @SerializedName(SERIALIZED_NAME_COMMON_SHARES_DETAILS)
  private List<ICommonShareClassDetails> commonSharesDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private List<IOwnershipData> preferred = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_SHARES_DETAILS = "preferredSharesDetails";
  @SerializedName(SERIALIZED_NAME_PREFERRED_SHARES_DETAILS)
  private List<IPreferredShareClassDetails> preferredSharesDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHAREHOLDER_PERCENT_OWNERSHIP = "shareholderPercentOwnership";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_PERCENT_OWNERSHIP)
  private List<IInvestmentAccountOwnershipData> shareholderPercentOwnership = new ArrayList<>();

  public IOwnershipDetails() {
  }

  public IOwnershipDetails(
     List<IOwnershipData> common, 
     List<ICommonShareClassDetails> commonSharesDetails, 
     List<IOwnershipData> preferred, 
     List<IPreferredShareClassDetails> preferredSharesDetails, 
     List<IInvestmentAccountOwnershipData> shareholderPercentOwnership
  ) {
    this();
    this.common = common;
    this.commonSharesDetails = commonSharesDetails;
    this.preferred = preferred;
    this.preferredSharesDetails = preferredSharesDetails;
    this.shareholderPercentOwnership = shareholderPercentOwnership;
  }

  /**
   * Get common
   * @return common
   */
  @javax.annotation.Nullable
  public List<IOwnershipData> getCommon() {
    return common;
  }



  /**
   * Get commonSharesDetails
   * @return commonSharesDetails
   */
  @javax.annotation.Nullable
  public List<ICommonShareClassDetails> getCommonSharesDetails() {
    return commonSharesDetails;
  }



  /**
   * Get preferred
   * @return preferred
   */
  @javax.annotation.Nullable
  public List<IOwnershipData> getPreferred() {
    return preferred;
  }



  /**
   * Get preferredSharesDetails
   * @return preferredSharesDetails
   */
  @javax.annotation.Nullable
  public List<IPreferredShareClassDetails> getPreferredSharesDetails() {
    return preferredSharesDetails;
  }



  /**
   * Get shareholderPercentOwnership
   * @return shareholderPercentOwnership
   */
  @javax.annotation.Nullable
  public List<IInvestmentAccountOwnershipData> getShareholderPercentOwnership() {
    return shareholderPercentOwnership;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IOwnershipDetails iownershipDetails = (IOwnershipDetails) o;
    return Objects.equals(this.common, iownershipDetails.common) &&
        Objects.equals(this.commonSharesDetails, iownershipDetails.commonSharesDetails) &&
        Objects.equals(this.preferred, iownershipDetails.preferred) &&
        Objects.equals(this.preferredSharesDetails, iownershipDetails.preferredSharesDetails) &&
        Objects.equals(this.shareholderPercentOwnership, iownershipDetails.shareholderPercentOwnership);
  }

  @Override
  public int hashCode() {
    return Objects.hash(common, commonSharesDetails, preferred, preferredSharesDetails, shareholderPercentOwnership);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IOwnershipDetails {\n");
    sb.append("    common: ").append(toIndentedString(common)).append("\n");
    sb.append("    commonSharesDetails: ").append(toIndentedString(commonSharesDetails)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    preferredSharesDetails: ").append(toIndentedString(preferredSharesDetails)).append("\n");
    sb.append("    shareholderPercentOwnership: ").append(toIndentedString(shareholderPercentOwnership)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("common");
    openapiFields.add("commonSharesDetails");
    openapiFields.add("preferred");
    openapiFields.add("preferredSharesDetails");
    openapiFields.add("shareholderPercentOwnership");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IOwnershipDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IOwnershipDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IOwnershipDetails is not found in the empty JSON string", IOwnershipDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IOwnershipDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IOwnershipDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("common") != null && !jsonObj.get("common").isJsonNull()) {
        JsonArray jsonArraycommon = jsonObj.getAsJsonArray("common");
        if (jsonArraycommon != null) {
          // ensure the json data is an array
          if (!jsonObj.get("common").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `common` to be an array in the JSON string but got `%s`", jsonObj.get("common").toString()));
          }

          // validate the optional field `common` (array)
          for (int i = 0; i < jsonArraycommon.size(); i++) {
            IOwnershipData.validateJsonElement(jsonArraycommon.get(i));
          };
        }
      }
      if (jsonObj.get("commonSharesDetails") != null && !jsonObj.get("commonSharesDetails").isJsonNull()) {
        JsonArray jsonArraycommonSharesDetails = jsonObj.getAsJsonArray("commonSharesDetails");
        if (jsonArraycommonSharesDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonSharesDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonSharesDetails` to be an array in the JSON string but got `%s`", jsonObj.get("commonSharesDetails").toString()));
          }

          // validate the optional field `commonSharesDetails` (array)
          for (int i = 0; i < jsonArraycommonSharesDetails.size(); i++) {
            ICommonShareClassDetails.validateJsonElement(jsonArraycommonSharesDetails.get(i));
          };
        }
      }
      if (jsonObj.get("preferred") != null && !jsonObj.get("preferred").isJsonNull()) {
        JsonArray jsonArraypreferred = jsonObj.getAsJsonArray("preferred");
        if (jsonArraypreferred != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferred").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferred` to be an array in the JSON string but got `%s`", jsonObj.get("preferred").toString()));
          }

          // validate the optional field `preferred` (array)
          for (int i = 0; i < jsonArraypreferred.size(); i++) {
            IOwnershipData.validateJsonElement(jsonArraypreferred.get(i));
          };
        }
      }
      if (jsonObj.get("preferredSharesDetails") != null && !jsonObj.get("preferredSharesDetails").isJsonNull()) {
        JsonArray jsonArraypreferredSharesDetails = jsonObj.getAsJsonArray("preferredSharesDetails");
        if (jsonArraypreferredSharesDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferredSharesDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferredSharesDetails` to be an array in the JSON string but got `%s`", jsonObj.get("preferredSharesDetails").toString()));
          }

          // validate the optional field `preferredSharesDetails` (array)
          for (int i = 0; i < jsonArraypreferredSharesDetails.size(); i++) {
            IPreferredShareClassDetails.validateJsonElement(jsonArraypreferredSharesDetails.get(i));
          };
        }
      }
      if (jsonObj.get("shareholderPercentOwnership") != null && !jsonObj.get("shareholderPercentOwnership").isJsonNull()) {
        JsonArray jsonArrayshareholderPercentOwnership = jsonObj.getAsJsonArray("shareholderPercentOwnership");
        if (jsonArrayshareholderPercentOwnership != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareholderPercentOwnership").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareholderPercentOwnership` to be an array in the JSON string but got `%s`", jsonObj.get("shareholderPercentOwnership").toString()));
          }

          // validate the optional field `shareholderPercentOwnership` (array)
          for (int i = 0; i < jsonArrayshareholderPercentOwnership.size(); i++) {
            IInvestmentAccountOwnershipData.validateJsonElement(jsonArrayshareholderPercentOwnership.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IOwnershipDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IOwnershipDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IOwnershipDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IOwnershipDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<IOwnershipDetails>() {
           @Override
           public void write(JsonWriter out, IOwnershipDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IOwnershipDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IOwnershipDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IOwnershipDetails
   * @throws IOException if the JSON string is invalid with respect to IOwnershipDetails
   */
  public static IOwnershipDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IOwnershipDetails.class);
  }

  /**
   * Convert an instance of IOwnershipDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

