/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IAddress {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMBINED_CITY_STATE_PROVINCE = "combinedCityStateProvince";
  @SerializedName(SERIALIZED_NAME_COMBINED_CITY_STATE_PROVINCE)
  private String combinedCityStateProvince;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_STATE_OR_PROVINCE = "stateOrProvince";
  @SerializedName(SERIALIZED_NAME_STATE_OR_PROVINCE)
  private String stateOrProvince;

  public static final String SERIALIZED_NAME_STATE_OR_PROVINCE_ABBREV = "stateOrProvinceAbbrev";
  @SerializedName(SERIALIZED_NAME_STATE_OR_PROVINCE_ABBREV)
  private String stateOrProvinceAbbrev;

  public static final String SERIALIZED_NAME_STREET1 = "street1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_ZIP_OR_POSTAL_CODE = "zipOrPostalCode";
  @SerializedName(SERIALIZED_NAME_ZIP_OR_POSTAL_CODE)
  private String zipOrPostalCode;

  public IAddress() {
  }

  public IAddress(
     String city, 
     String combinedCityStateProvince, 
     String country, 
     String stateOrProvince, 
     String stateOrProvinceAbbrev, 
     String street1, 
     String street2, 
     String zipOrPostalCode
  ) {
    this();
    this.city = city;
    this.combinedCityStateProvince = combinedCityStateProvince;
    this.country = country;
    this.stateOrProvince = stateOrProvince;
    this.stateOrProvinceAbbrev = stateOrProvinceAbbrev;
    this.street1 = street1;
    this.street2 = street2;
    this.zipOrPostalCode = zipOrPostalCode;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }



  /**
   * Get combinedCityStateProvince
   * @return combinedCityStateProvince
   */
  @javax.annotation.Nullable
  public String getCombinedCityStateProvince() {
    return combinedCityStateProvince;
  }



  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  /**
   * Get stateOrProvince
   * @return stateOrProvince
   */
  @javax.annotation.Nullable
  public String getStateOrProvince() {
    return stateOrProvince;
  }



  /**
   * Get stateOrProvinceAbbrev
   * @return stateOrProvinceAbbrev
   */
  @javax.annotation.Nullable
  public String getStateOrProvinceAbbrev() {
    return stateOrProvinceAbbrev;
  }



  /**
   * Get street1
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }



  /**
   * Get street2
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }



  /**
   * Get zipOrPostalCode
   * @return zipOrPostalCode
   */
  @javax.annotation.Nullable
  public String getZipOrPostalCode() {
    return zipOrPostalCode;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAddress iaddress = (IAddress) o;
    return Objects.equals(this.city, iaddress.city) &&
        Objects.equals(this.combinedCityStateProvince, iaddress.combinedCityStateProvince) &&
        Objects.equals(this.country, iaddress.country) &&
        Objects.equals(this.stateOrProvince, iaddress.stateOrProvince) &&
        Objects.equals(this.stateOrProvinceAbbrev, iaddress.stateOrProvinceAbbrev) &&
        Objects.equals(this.street1, iaddress.street1) &&
        Objects.equals(this.street2, iaddress.street2) &&
        Objects.equals(this.zipOrPostalCode, iaddress.zipOrPostalCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, combinedCityStateProvince, country, stateOrProvince, stateOrProvinceAbbrev, street1, street2, zipOrPostalCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAddress {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    combinedCityStateProvince: ").append(toIndentedString(combinedCityStateProvince)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    stateOrProvince: ").append(toIndentedString(stateOrProvince)).append("\n");
    sb.append("    stateOrProvinceAbbrev: ").append(toIndentedString(stateOrProvinceAbbrev)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    zipOrPostalCode: ").append(toIndentedString(zipOrPostalCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("combinedCityStateProvince");
    openapiFields.add("country");
    openapiFields.add("stateOrProvince");
    openapiFields.add("stateOrProvinceAbbrev");
    openapiFields.add("street1");
    openapiFields.add("street2");
    openapiFields.add("zipOrPostalCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IAddress is not found in the empty JSON string", IAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("combinedCityStateProvince") != null && !jsonObj.get("combinedCityStateProvince").isJsonNull()) && !jsonObj.get("combinedCityStateProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combinedCityStateProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combinedCityStateProvince").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("stateOrProvince") != null && !jsonObj.get("stateOrProvince").isJsonNull()) && !jsonObj.get("stateOrProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOrProvince").toString()));
      }
      if ((jsonObj.get("stateOrProvinceAbbrev") != null && !jsonObj.get("stateOrProvinceAbbrev").isJsonNull()) && !jsonObj.get("stateOrProvinceAbbrev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOrProvinceAbbrev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOrProvinceAbbrev").toString()));
      }
      if ((jsonObj.get("street1") != null && !jsonObj.get("street1").isJsonNull()) && !jsonObj.get("street1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street1").toString()));
      }
      if ((jsonObj.get("street2") != null && !jsonObj.get("street2").isJsonNull()) && !jsonObj.get("street2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street2").toString()));
      }
      if ((jsonObj.get("zipOrPostalCode") != null && !jsonObj.get("zipOrPostalCode").isJsonNull()) && !jsonObj.get("zipOrPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipOrPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipOrPostalCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<IAddress>() {
           @Override
           public void write(JsonWriter out, IAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IAddress
   * @throws IOException if the JSON string is invalid with respect to IAddress
   */
  public static IAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IAddress.class);
  }

  /**
   * Convert an instance of IAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

