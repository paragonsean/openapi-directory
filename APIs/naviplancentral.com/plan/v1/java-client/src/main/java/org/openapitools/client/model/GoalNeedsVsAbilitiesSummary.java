/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoalNeedsVsAbilitiesSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalNeedsVsAbilitiesSummary {
  public static final String SERIALIZED_NAME_ABILITIES = "abilities";
  @SerializedName(SERIALIZED_NAME_ABILITIES)
  private Double abilities;

  public static final String SERIALIZED_NAME_FIXED_NEEDS = "fixedNeeds";
  @SerializedName(SERIALIZED_NAME_FIXED_NEEDS)
  private Double fixedNeeds;

  public static final String SERIALIZED_NAME_FIXED_NEEDS_WITH_TAXES = "fixedNeedsWithTaxes";
  @SerializedName(SERIALIZED_NAME_FIXED_NEEDS_WITH_TAXES)
  private Double fixedNeedsWithTaxes;

  public static final String SERIALIZED_NAME_GOAL_TYPE = "goalType";
  @SerializedName(SERIALIZED_NAME_GOAL_TYPE)
  private String goalType;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private Integer identifier;

  public static final String SERIALIZED_NAME_TOTAL_NEEDS = "totalNeeds";
  @SerializedName(SERIALIZED_NAME_TOTAL_NEEDS)
  private Double totalNeeds;

  public static final String SERIALIZED_NAME_TOTAL_NEEDS_WITH_TAXES = "totalNeedsWithTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_NEEDS_WITH_TAXES)
  private Double totalNeedsWithTaxes;

  public GoalNeedsVsAbilitiesSummary() {
  }

  public GoalNeedsVsAbilitiesSummary abilities(Double abilities) {
    this.abilities = abilities;
    return this;
  }

  /**
   * Get abilities
   * @return abilities
   */
  @javax.annotation.Nullable
  public Double getAbilities() {
    return abilities;
  }

  public void setAbilities(Double abilities) {
    this.abilities = abilities;
  }


  public GoalNeedsVsAbilitiesSummary fixedNeeds(Double fixedNeeds) {
    this.fixedNeeds = fixedNeeds;
    return this;
  }

  /**
   * Get fixedNeeds
   * @return fixedNeeds
   */
  @javax.annotation.Nullable
  public Double getFixedNeeds() {
    return fixedNeeds;
  }

  public void setFixedNeeds(Double fixedNeeds) {
    this.fixedNeeds = fixedNeeds;
  }


  public GoalNeedsVsAbilitiesSummary fixedNeedsWithTaxes(Double fixedNeedsWithTaxes) {
    this.fixedNeedsWithTaxes = fixedNeedsWithTaxes;
    return this;
  }

  /**
   * Get fixedNeedsWithTaxes
   * @return fixedNeedsWithTaxes
   */
  @javax.annotation.Nullable
  public Double getFixedNeedsWithTaxes() {
    return fixedNeedsWithTaxes;
  }

  public void setFixedNeedsWithTaxes(Double fixedNeedsWithTaxes) {
    this.fixedNeedsWithTaxes = fixedNeedsWithTaxes;
  }


  public GoalNeedsVsAbilitiesSummary goalType(String goalType) {
    this.goalType = goalType;
    return this;
  }

  /**
   * Get goalType
   * @return goalType
   */
  @javax.annotation.Nullable
  public String getGoalType() {
    return goalType;
  }

  public void setGoalType(String goalType) {
    this.goalType = goalType;
  }


  public GoalNeedsVsAbilitiesSummary identifier(Integer identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public Integer getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Integer identifier) {
    this.identifier = identifier;
  }


  public GoalNeedsVsAbilitiesSummary totalNeeds(Double totalNeeds) {
    this.totalNeeds = totalNeeds;
    return this;
  }

  /**
   * Get totalNeeds
   * @return totalNeeds
   */
  @javax.annotation.Nullable
  public Double getTotalNeeds() {
    return totalNeeds;
  }

  public void setTotalNeeds(Double totalNeeds) {
    this.totalNeeds = totalNeeds;
  }


  public GoalNeedsVsAbilitiesSummary totalNeedsWithTaxes(Double totalNeedsWithTaxes) {
    this.totalNeedsWithTaxes = totalNeedsWithTaxes;
    return this;
  }

  /**
   * Get totalNeedsWithTaxes
   * @return totalNeedsWithTaxes
   */
  @javax.annotation.Nullable
  public Double getTotalNeedsWithTaxes() {
    return totalNeedsWithTaxes;
  }

  public void setTotalNeedsWithTaxes(Double totalNeedsWithTaxes) {
    this.totalNeedsWithTaxes = totalNeedsWithTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalNeedsVsAbilitiesSummary goalNeedsVsAbilitiesSummary = (GoalNeedsVsAbilitiesSummary) o;
    return Objects.equals(this.abilities, goalNeedsVsAbilitiesSummary.abilities) &&
        Objects.equals(this.fixedNeeds, goalNeedsVsAbilitiesSummary.fixedNeeds) &&
        Objects.equals(this.fixedNeedsWithTaxes, goalNeedsVsAbilitiesSummary.fixedNeedsWithTaxes) &&
        Objects.equals(this.goalType, goalNeedsVsAbilitiesSummary.goalType) &&
        Objects.equals(this.identifier, goalNeedsVsAbilitiesSummary.identifier) &&
        Objects.equals(this.totalNeeds, goalNeedsVsAbilitiesSummary.totalNeeds) &&
        Objects.equals(this.totalNeedsWithTaxes, goalNeedsVsAbilitiesSummary.totalNeedsWithTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abilities, fixedNeeds, fixedNeedsWithTaxes, goalType, identifier, totalNeeds, totalNeedsWithTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalNeedsVsAbilitiesSummary {\n");
    sb.append("    abilities: ").append(toIndentedString(abilities)).append("\n");
    sb.append("    fixedNeeds: ").append(toIndentedString(fixedNeeds)).append("\n");
    sb.append("    fixedNeedsWithTaxes: ").append(toIndentedString(fixedNeedsWithTaxes)).append("\n");
    sb.append("    goalType: ").append(toIndentedString(goalType)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    totalNeeds: ").append(toIndentedString(totalNeeds)).append("\n");
    sb.append("    totalNeedsWithTaxes: ").append(toIndentedString(totalNeedsWithTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abilities");
    openapiFields.add("fixedNeeds");
    openapiFields.add("fixedNeedsWithTaxes");
    openapiFields.add("goalType");
    openapiFields.add("identifier");
    openapiFields.add("totalNeeds");
    openapiFields.add("totalNeedsWithTaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalNeedsVsAbilitiesSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalNeedsVsAbilitiesSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalNeedsVsAbilitiesSummary is not found in the empty JSON string", GoalNeedsVsAbilitiesSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalNeedsVsAbilitiesSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalNeedsVsAbilitiesSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("goalType") != null && !jsonObj.get("goalType").isJsonNull()) && !jsonObj.get("goalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalNeedsVsAbilitiesSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalNeedsVsAbilitiesSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalNeedsVsAbilitiesSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalNeedsVsAbilitiesSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalNeedsVsAbilitiesSummary>() {
           @Override
           public void write(JsonWriter out, GoalNeedsVsAbilitiesSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalNeedsVsAbilitiesSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalNeedsVsAbilitiesSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalNeedsVsAbilitiesSummary
   * @throws IOException if the JSON string is invalid with respect to GoalNeedsVsAbilitiesSummary
   */
  public static GoalNeedsVsAbilitiesSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalNeedsVsAbilitiesSummary.class);
  }

  /**
   * Convert an instance of GoalNeedsVsAbilitiesSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

