/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRateOfReturnBreakdown
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IRateOfReturnBreakdown {
  public static final String SERIALIZED_NAME_CAPITAL_GAIN = "capitalGain";
  @SerializedName(SERIALIZED_NAME_CAPITAL_GAIN)
  private Percent capitalGain;

  public static final String SERIALIZED_NAME_DEFERRED_GROWTH = "deferredGrowth";
  @SerializedName(SERIALIZED_NAME_DEFERRED_GROWTH)
  private Percent deferredGrowth;

  public static final String SERIALIZED_NAME_DIVIDEND = "dividend";
  @SerializedName(SERIALIZED_NAME_DIVIDEND)
  private Percent dividend;

  public static final String SERIALIZED_NAME_INTEREST = "interest";
  @SerializedName(SERIALIZED_NAME_INTEREST)
  private Percent interest;

  public static final String SERIALIZED_NAME_TAX_FREE = "taxFree";
  @SerializedName(SERIALIZED_NAME_TAX_FREE)
  private Percent taxFree;

  public IRateOfReturnBreakdown() {
  }

  public IRateOfReturnBreakdown capitalGain(Percent capitalGain) {
    this.capitalGain = capitalGain;
    return this;
  }

  /**
   * Get capitalGain
   * @return capitalGain
   */
  @javax.annotation.Nullable
  public Percent getCapitalGain() {
    return capitalGain;
  }

  public void setCapitalGain(Percent capitalGain) {
    this.capitalGain = capitalGain;
  }


  public IRateOfReturnBreakdown deferredGrowth(Percent deferredGrowth) {
    this.deferredGrowth = deferredGrowth;
    return this;
  }

  /**
   * Get deferredGrowth
   * @return deferredGrowth
   */
  @javax.annotation.Nullable
  public Percent getDeferredGrowth() {
    return deferredGrowth;
  }

  public void setDeferredGrowth(Percent deferredGrowth) {
    this.deferredGrowth = deferredGrowth;
  }


  public IRateOfReturnBreakdown dividend(Percent dividend) {
    this.dividend = dividend;
    return this;
  }

  /**
   * Get dividend
   * @return dividend
   */
  @javax.annotation.Nullable
  public Percent getDividend() {
    return dividend;
  }

  public void setDividend(Percent dividend) {
    this.dividend = dividend;
  }


  public IRateOfReturnBreakdown interest(Percent interest) {
    this.interest = interest;
    return this;
  }

  /**
   * Get interest
   * @return interest
   */
  @javax.annotation.Nullable
  public Percent getInterest() {
    return interest;
  }

  public void setInterest(Percent interest) {
    this.interest = interest;
  }


  public IRateOfReturnBreakdown taxFree(Percent taxFree) {
    this.taxFree = taxFree;
    return this;
  }

  /**
   * Get taxFree
   * @return taxFree
   */
  @javax.annotation.Nullable
  public Percent getTaxFree() {
    return taxFree;
  }

  public void setTaxFree(Percent taxFree) {
    this.taxFree = taxFree;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRateOfReturnBreakdown irateOfReturnBreakdown = (IRateOfReturnBreakdown) o;
    return Objects.equals(this.capitalGain, irateOfReturnBreakdown.capitalGain) &&
        Objects.equals(this.deferredGrowth, irateOfReturnBreakdown.deferredGrowth) &&
        Objects.equals(this.dividend, irateOfReturnBreakdown.dividend) &&
        Objects.equals(this.interest, irateOfReturnBreakdown.interest) &&
        Objects.equals(this.taxFree, irateOfReturnBreakdown.taxFree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capitalGain, deferredGrowth, dividend, interest, taxFree);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRateOfReturnBreakdown {\n");
    sb.append("    capitalGain: ").append(toIndentedString(capitalGain)).append("\n");
    sb.append("    deferredGrowth: ").append(toIndentedString(deferredGrowth)).append("\n");
    sb.append("    dividend: ").append(toIndentedString(dividend)).append("\n");
    sb.append("    interest: ").append(toIndentedString(interest)).append("\n");
    sb.append("    taxFree: ").append(toIndentedString(taxFree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capitalGain");
    openapiFields.add("deferredGrowth");
    openapiFields.add("dividend");
    openapiFields.add("interest");
    openapiFields.add("taxFree");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRateOfReturnBreakdown
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRateOfReturnBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRateOfReturnBreakdown is not found in the empty JSON string", IRateOfReturnBreakdown.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRateOfReturnBreakdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRateOfReturnBreakdown` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `capitalGain`
      if (jsonObj.get("capitalGain") != null && !jsonObj.get("capitalGain").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("capitalGain"));
      }
      // validate the optional field `deferredGrowth`
      if (jsonObj.get("deferredGrowth") != null && !jsonObj.get("deferredGrowth").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("deferredGrowth"));
      }
      // validate the optional field `dividend`
      if (jsonObj.get("dividend") != null && !jsonObj.get("dividend").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("dividend"));
      }
      // validate the optional field `interest`
      if (jsonObj.get("interest") != null && !jsonObj.get("interest").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("interest"));
      }
      // validate the optional field `taxFree`
      if (jsonObj.get("taxFree") != null && !jsonObj.get("taxFree").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("taxFree"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRateOfReturnBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRateOfReturnBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRateOfReturnBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRateOfReturnBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<IRateOfReturnBreakdown>() {
           @Override
           public void write(JsonWriter out, IRateOfReturnBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRateOfReturnBreakdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRateOfReturnBreakdown given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRateOfReturnBreakdown
   * @throws IOException if the JSON string is invalid with respect to IRateOfReturnBreakdown
   */
  public static IRateOfReturnBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRateOfReturnBreakdown.class);
  }

  /**
   * Convert an instance of IRateOfReturnBreakdown to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

