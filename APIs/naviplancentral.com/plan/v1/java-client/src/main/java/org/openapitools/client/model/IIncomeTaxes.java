/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IIncomeTaxes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IIncomeTaxes {
  public static final String SERIALIZED_NAME_AVERAGE_TAX_RATE = "averageTaxRate";
  @SerializedName(SERIALIZED_NAME_AVERAGE_TAX_RATE)
  private Percent averageTaxRate;

  public static final String SERIALIZED_NAME_COMBINED_STATE_AND_AVERAGE_TAX_RATE = "combinedStateAndAverageTaxRate";
  @SerializedName(SERIALIZED_NAME_COMBINED_STATE_AND_AVERAGE_TAX_RATE)
  private Percent combinedStateAndAverageTaxRate;

  public static final String SERIALIZED_NAME_COMBINED_STATE_AND_LONG_TERM_CAPITAL_GAINS_TAX_RATE = "combinedStateAndLongTermCapitalGainsTaxRate";
  @SerializedName(SERIALIZED_NAME_COMBINED_STATE_AND_LONG_TERM_CAPITAL_GAINS_TAX_RATE)
  private Percent combinedStateAndLongTermCapitalGainsTaxRate;

  public static final String SERIALIZED_NAME_COMBINED_STATE_AND_MARGINAL_TAX_RATE = "combinedStateAndMarginalTaxRate";
  @SerializedName(SERIALIZED_NAME_COMBINED_STATE_AND_MARGINAL_TAX_RATE)
  private Percent combinedStateAndMarginalTaxRate;

  public static final String SERIALIZED_NAME_LONG_TERM_CAPITAL_GAINS_TAX_RATE = "longTermCapitalGainsTaxRate";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CAPITAL_GAINS_TAX_RATE)
  private Percent longTermCapitalGainsTaxRate;

  public static final String SERIALIZED_NAME_MARGINAL_TAX_RATE = "marginalTaxRate";
  @SerializedName(SERIALIZED_NAME_MARGINAL_TAX_RATE)
  private Percent marginalTaxRate;

  public static final String SERIALIZED_NAME_STATE_TAX_RATE = "stateTaxRate";
  @SerializedName(SERIALIZED_NAME_STATE_TAX_RATE)
  private Percent stateTaxRate;

  public IIncomeTaxes() {
  }

  public IIncomeTaxes averageTaxRate(Percent averageTaxRate) {
    this.averageTaxRate = averageTaxRate;
    return this;
  }

  /**
   * Get averageTaxRate
   * @return averageTaxRate
   */
  @javax.annotation.Nullable
  public Percent getAverageTaxRate() {
    return averageTaxRate;
  }

  public void setAverageTaxRate(Percent averageTaxRate) {
    this.averageTaxRate = averageTaxRate;
  }


  public IIncomeTaxes combinedStateAndAverageTaxRate(Percent combinedStateAndAverageTaxRate) {
    this.combinedStateAndAverageTaxRate = combinedStateAndAverageTaxRate;
    return this;
  }

  /**
   * Get combinedStateAndAverageTaxRate
   * @return combinedStateAndAverageTaxRate
   */
  @javax.annotation.Nullable
  public Percent getCombinedStateAndAverageTaxRate() {
    return combinedStateAndAverageTaxRate;
  }

  public void setCombinedStateAndAverageTaxRate(Percent combinedStateAndAverageTaxRate) {
    this.combinedStateAndAverageTaxRate = combinedStateAndAverageTaxRate;
  }


  public IIncomeTaxes combinedStateAndLongTermCapitalGainsTaxRate(Percent combinedStateAndLongTermCapitalGainsTaxRate) {
    this.combinedStateAndLongTermCapitalGainsTaxRate = combinedStateAndLongTermCapitalGainsTaxRate;
    return this;
  }

  /**
   * Get combinedStateAndLongTermCapitalGainsTaxRate
   * @return combinedStateAndLongTermCapitalGainsTaxRate
   */
  @javax.annotation.Nullable
  public Percent getCombinedStateAndLongTermCapitalGainsTaxRate() {
    return combinedStateAndLongTermCapitalGainsTaxRate;
  }

  public void setCombinedStateAndLongTermCapitalGainsTaxRate(Percent combinedStateAndLongTermCapitalGainsTaxRate) {
    this.combinedStateAndLongTermCapitalGainsTaxRate = combinedStateAndLongTermCapitalGainsTaxRate;
  }


  public IIncomeTaxes combinedStateAndMarginalTaxRate(Percent combinedStateAndMarginalTaxRate) {
    this.combinedStateAndMarginalTaxRate = combinedStateAndMarginalTaxRate;
    return this;
  }

  /**
   * Get combinedStateAndMarginalTaxRate
   * @return combinedStateAndMarginalTaxRate
   */
  @javax.annotation.Nullable
  public Percent getCombinedStateAndMarginalTaxRate() {
    return combinedStateAndMarginalTaxRate;
  }

  public void setCombinedStateAndMarginalTaxRate(Percent combinedStateAndMarginalTaxRate) {
    this.combinedStateAndMarginalTaxRate = combinedStateAndMarginalTaxRate;
  }


  public IIncomeTaxes longTermCapitalGainsTaxRate(Percent longTermCapitalGainsTaxRate) {
    this.longTermCapitalGainsTaxRate = longTermCapitalGainsTaxRate;
    return this;
  }

  /**
   * Get longTermCapitalGainsTaxRate
   * @return longTermCapitalGainsTaxRate
   */
  @javax.annotation.Nullable
  public Percent getLongTermCapitalGainsTaxRate() {
    return longTermCapitalGainsTaxRate;
  }

  public void setLongTermCapitalGainsTaxRate(Percent longTermCapitalGainsTaxRate) {
    this.longTermCapitalGainsTaxRate = longTermCapitalGainsTaxRate;
  }


  public IIncomeTaxes marginalTaxRate(Percent marginalTaxRate) {
    this.marginalTaxRate = marginalTaxRate;
    return this;
  }

  /**
   * Get marginalTaxRate
   * @return marginalTaxRate
   */
  @javax.annotation.Nullable
  public Percent getMarginalTaxRate() {
    return marginalTaxRate;
  }

  public void setMarginalTaxRate(Percent marginalTaxRate) {
    this.marginalTaxRate = marginalTaxRate;
  }


  public IIncomeTaxes stateTaxRate(Percent stateTaxRate) {
    this.stateTaxRate = stateTaxRate;
    return this;
  }

  /**
   * Get stateTaxRate
   * @return stateTaxRate
   */
  @javax.annotation.Nullable
  public Percent getStateTaxRate() {
    return stateTaxRate;
  }

  public void setStateTaxRate(Percent stateTaxRate) {
    this.stateTaxRate = stateTaxRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IIncomeTaxes iincomeTaxes = (IIncomeTaxes) o;
    return Objects.equals(this.averageTaxRate, iincomeTaxes.averageTaxRate) &&
        Objects.equals(this.combinedStateAndAverageTaxRate, iincomeTaxes.combinedStateAndAverageTaxRate) &&
        Objects.equals(this.combinedStateAndLongTermCapitalGainsTaxRate, iincomeTaxes.combinedStateAndLongTermCapitalGainsTaxRate) &&
        Objects.equals(this.combinedStateAndMarginalTaxRate, iincomeTaxes.combinedStateAndMarginalTaxRate) &&
        Objects.equals(this.longTermCapitalGainsTaxRate, iincomeTaxes.longTermCapitalGainsTaxRate) &&
        Objects.equals(this.marginalTaxRate, iincomeTaxes.marginalTaxRate) &&
        Objects.equals(this.stateTaxRate, iincomeTaxes.stateTaxRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageTaxRate, combinedStateAndAverageTaxRate, combinedStateAndLongTermCapitalGainsTaxRate, combinedStateAndMarginalTaxRate, longTermCapitalGainsTaxRate, marginalTaxRate, stateTaxRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IIncomeTaxes {\n");
    sb.append("    averageTaxRate: ").append(toIndentedString(averageTaxRate)).append("\n");
    sb.append("    combinedStateAndAverageTaxRate: ").append(toIndentedString(combinedStateAndAverageTaxRate)).append("\n");
    sb.append("    combinedStateAndLongTermCapitalGainsTaxRate: ").append(toIndentedString(combinedStateAndLongTermCapitalGainsTaxRate)).append("\n");
    sb.append("    combinedStateAndMarginalTaxRate: ").append(toIndentedString(combinedStateAndMarginalTaxRate)).append("\n");
    sb.append("    longTermCapitalGainsTaxRate: ").append(toIndentedString(longTermCapitalGainsTaxRate)).append("\n");
    sb.append("    marginalTaxRate: ").append(toIndentedString(marginalTaxRate)).append("\n");
    sb.append("    stateTaxRate: ").append(toIndentedString(stateTaxRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageTaxRate");
    openapiFields.add("combinedStateAndAverageTaxRate");
    openapiFields.add("combinedStateAndLongTermCapitalGainsTaxRate");
    openapiFields.add("combinedStateAndMarginalTaxRate");
    openapiFields.add("longTermCapitalGainsTaxRate");
    openapiFields.add("marginalTaxRate");
    openapiFields.add("stateTaxRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IIncomeTaxes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IIncomeTaxes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IIncomeTaxes is not found in the empty JSON string", IIncomeTaxes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IIncomeTaxes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IIncomeTaxes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `averageTaxRate`
      if (jsonObj.get("averageTaxRate") != null && !jsonObj.get("averageTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("averageTaxRate"));
      }
      // validate the optional field `combinedStateAndAverageTaxRate`
      if (jsonObj.get("combinedStateAndAverageTaxRate") != null && !jsonObj.get("combinedStateAndAverageTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("combinedStateAndAverageTaxRate"));
      }
      // validate the optional field `combinedStateAndLongTermCapitalGainsTaxRate`
      if (jsonObj.get("combinedStateAndLongTermCapitalGainsTaxRate") != null && !jsonObj.get("combinedStateAndLongTermCapitalGainsTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("combinedStateAndLongTermCapitalGainsTaxRate"));
      }
      // validate the optional field `combinedStateAndMarginalTaxRate`
      if (jsonObj.get("combinedStateAndMarginalTaxRate") != null && !jsonObj.get("combinedStateAndMarginalTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("combinedStateAndMarginalTaxRate"));
      }
      // validate the optional field `longTermCapitalGainsTaxRate`
      if (jsonObj.get("longTermCapitalGainsTaxRate") != null && !jsonObj.get("longTermCapitalGainsTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("longTermCapitalGainsTaxRate"));
      }
      // validate the optional field `marginalTaxRate`
      if (jsonObj.get("marginalTaxRate") != null && !jsonObj.get("marginalTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("marginalTaxRate"));
      }
      // validate the optional field `stateTaxRate`
      if (jsonObj.get("stateTaxRate") != null && !jsonObj.get("stateTaxRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("stateTaxRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IIncomeTaxes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IIncomeTaxes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IIncomeTaxes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IIncomeTaxes.class));

       return (TypeAdapter<T>) new TypeAdapter<IIncomeTaxes>() {
           @Override
           public void write(JsonWriter out, IIncomeTaxes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IIncomeTaxes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IIncomeTaxes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IIncomeTaxes
   * @throws IOException if the JSON string is invalid with respect to IIncomeTaxes
   */
  public static IIncomeTaxes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IIncomeTaxes.class);
  }

  /**
   * Convert an instance of IIncomeTaxes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

