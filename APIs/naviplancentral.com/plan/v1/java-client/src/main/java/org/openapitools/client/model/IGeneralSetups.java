/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IGeneralSetups
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IGeneralSetups {
  public static final String SERIALIZED_NAME_APPLIED_BUSINESS_LIMIT = "appliedBusinessLimit";
  @SerializedName(SERIALIZED_NAME_APPLIED_BUSINESS_LIMIT)
  private Currency appliedBusinessLimit;

  public static final String SERIALIZED_NAME_GOOD_WILL_FUTURE_SALES_MARKET_VALUE = "goodWillFutureSalesMarketValue";
  @SerializedName(SERIALIZED_NAME_GOOD_WILL_FUTURE_SALES_MARKET_VALUE)
  private Currency goodWillFutureSalesMarketValue;

  public static final String SERIALIZED_NAME_PERCENTAGE_OF_LIMIT_TO_USE = "percentageOfLimitToUse";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_OF_LIMIT_TO_USE)
  private Percent percentageOfLimitToUse;

  public static final String SERIALIZED_NAME_PREVIOUS_YEAR_ADJUSTED_AGGREGATE_INVESTMENT_INCOME = "previousYearAdjustedAggregateInvestmentIncome";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_YEAR_ADJUSTED_AGGREGATE_INVESTMENT_INCOME)
  private Currency previousYearAdjustedAggregateInvestmentIncome;

  public IGeneralSetups() {
  }

  public IGeneralSetups appliedBusinessLimit(Currency appliedBusinessLimit) {
    this.appliedBusinessLimit = appliedBusinessLimit;
    return this;
  }

  /**
   * Get appliedBusinessLimit
   * @return appliedBusinessLimit
   */
  @javax.annotation.Nullable
  public Currency getAppliedBusinessLimit() {
    return appliedBusinessLimit;
  }

  public void setAppliedBusinessLimit(Currency appliedBusinessLimit) {
    this.appliedBusinessLimit = appliedBusinessLimit;
  }


  public IGeneralSetups goodWillFutureSalesMarketValue(Currency goodWillFutureSalesMarketValue) {
    this.goodWillFutureSalesMarketValue = goodWillFutureSalesMarketValue;
    return this;
  }

  /**
   * Get goodWillFutureSalesMarketValue
   * @return goodWillFutureSalesMarketValue
   */
  @javax.annotation.Nullable
  public Currency getGoodWillFutureSalesMarketValue() {
    return goodWillFutureSalesMarketValue;
  }

  public void setGoodWillFutureSalesMarketValue(Currency goodWillFutureSalesMarketValue) {
    this.goodWillFutureSalesMarketValue = goodWillFutureSalesMarketValue;
  }


  public IGeneralSetups percentageOfLimitToUse(Percent percentageOfLimitToUse) {
    this.percentageOfLimitToUse = percentageOfLimitToUse;
    return this;
  }

  /**
   * Get percentageOfLimitToUse
   * @return percentageOfLimitToUse
   */
  @javax.annotation.Nullable
  public Percent getPercentageOfLimitToUse() {
    return percentageOfLimitToUse;
  }

  public void setPercentageOfLimitToUse(Percent percentageOfLimitToUse) {
    this.percentageOfLimitToUse = percentageOfLimitToUse;
  }


  public IGeneralSetups previousYearAdjustedAggregateInvestmentIncome(Currency previousYearAdjustedAggregateInvestmentIncome) {
    this.previousYearAdjustedAggregateInvestmentIncome = previousYearAdjustedAggregateInvestmentIncome;
    return this;
  }

  /**
   * Get previousYearAdjustedAggregateInvestmentIncome
   * @return previousYearAdjustedAggregateInvestmentIncome
   */
  @javax.annotation.Nullable
  public Currency getPreviousYearAdjustedAggregateInvestmentIncome() {
    return previousYearAdjustedAggregateInvestmentIncome;
  }

  public void setPreviousYearAdjustedAggregateInvestmentIncome(Currency previousYearAdjustedAggregateInvestmentIncome) {
    this.previousYearAdjustedAggregateInvestmentIncome = previousYearAdjustedAggregateInvestmentIncome;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IGeneralSetups igeneralSetups = (IGeneralSetups) o;
    return Objects.equals(this.appliedBusinessLimit, igeneralSetups.appliedBusinessLimit) &&
        Objects.equals(this.goodWillFutureSalesMarketValue, igeneralSetups.goodWillFutureSalesMarketValue) &&
        Objects.equals(this.percentageOfLimitToUse, igeneralSetups.percentageOfLimitToUse) &&
        Objects.equals(this.previousYearAdjustedAggregateInvestmentIncome, igeneralSetups.previousYearAdjustedAggregateInvestmentIncome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedBusinessLimit, goodWillFutureSalesMarketValue, percentageOfLimitToUse, previousYearAdjustedAggregateInvestmentIncome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IGeneralSetups {\n");
    sb.append("    appliedBusinessLimit: ").append(toIndentedString(appliedBusinessLimit)).append("\n");
    sb.append("    goodWillFutureSalesMarketValue: ").append(toIndentedString(goodWillFutureSalesMarketValue)).append("\n");
    sb.append("    percentageOfLimitToUse: ").append(toIndentedString(percentageOfLimitToUse)).append("\n");
    sb.append("    previousYearAdjustedAggregateInvestmentIncome: ").append(toIndentedString(previousYearAdjustedAggregateInvestmentIncome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedBusinessLimit");
    openapiFields.add("goodWillFutureSalesMarketValue");
    openapiFields.add("percentageOfLimitToUse");
    openapiFields.add("previousYearAdjustedAggregateInvestmentIncome");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IGeneralSetups
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IGeneralSetups.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IGeneralSetups is not found in the empty JSON string", IGeneralSetups.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IGeneralSetups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IGeneralSetups` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appliedBusinessLimit`
      if (jsonObj.get("appliedBusinessLimit") != null && !jsonObj.get("appliedBusinessLimit").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("appliedBusinessLimit"));
      }
      // validate the optional field `goodWillFutureSalesMarketValue`
      if (jsonObj.get("goodWillFutureSalesMarketValue") != null && !jsonObj.get("goodWillFutureSalesMarketValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("goodWillFutureSalesMarketValue"));
      }
      // validate the optional field `percentageOfLimitToUse`
      if (jsonObj.get("percentageOfLimitToUse") != null && !jsonObj.get("percentageOfLimitToUse").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("percentageOfLimitToUse"));
      }
      // validate the optional field `previousYearAdjustedAggregateInvestmentIncome`
      if (jsonObj.get("previousYearAdjustedAggregateInvestmentIncome") != null && !jsonObj.get("previousYearAdjustedAggregateInvestmentIncome").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("previousYearAdjustedAggregateInvestmentIncome"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IGeneralSetups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IGeneralSetups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IGeneralSetups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IGeneralSetups.class));

       return (TypeAdapter<T>) new TypeAdapter<IGeneralSetups>() {
           @Override
           public void write(JsonWriter out, IGeneralSetups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IGeneralSetups read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IGeneralSetups given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IGeneralSetups
   * @throws IOException if the JSON string is invalid with respect to IGeneralSetups
   */
  public static IGeneralSetups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IGeneralSetups.class);
  }

  /**
   * Convert an instance of IGeneralSetups to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

