/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ILumpSumDebtModStrategy;
import org.openapitools.client.model.IPeriodicDebtModStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IDebtModStrategies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IDebtModStrategies {
  public static final String SERIALIZED_NAME_LUMP_SUM_DEBT_MOD_STRATEGIES = "lumpSumDebtModStrategies";
  @SerializedName(SERIALIZED_NAME_LUMP_SUM_DEBT_MOD_STRATEGIES)
  private List<ILumpSumDebtModStrategy> lumpSumDebtModStrategies = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIODIC_DEBT_MOD_STRATEGIES = "periodicDebtModStrategies";
  @SerializedName(SERIALIZED_NAME_PERIODIC_DEBT_MOD_STRATEGIES)
  private List<IPeriodicDebtModStrategy> periodicDebtModStrategies = new ArrayList<>();

  public IDebtModStrategies() {
  }

  public IDebtModStrategies(
     List<ILumpSumDebtModStrategy> lumpSumDebtModStrategies, 
     List<IPeriodicDebtModStrategy> periodicDebtModStrategies
  ) {
    this();
    this.lumpSumDebtModStrategies = lumpSumDebtModStrategies;
    this.periodicDebtModStrategies = periodicDebtModStrategies;
  }

  /**
   * Get lumpSumDebtModStrategies
   * @return lumpSumDebtModStrategies
   */
  @javax.annotation.Nullable
  public List<ILumpSumDebtModStrategy> getLumpSumDebtModStrategies() {
    return lumpSumDebtModStrategies;
  }



  /**
   * Get periodicDebtModStrategies
   * @return periodicDebtModStrategies
   */
  @javax.annotation.Nullable
  public List<IPeriodicDebtModStrategy> getPeriodicDebtModStrategies() {
    return periodicDebtModStrategies;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDebtModStrategies idebtModStrategies = (IDebtModStrategies) o;
    return Objects.equals(this.lumpSumDebtModStrategies, idebtModStrategies.lumpSumDebtModStrategies) &&
        Objects.equals(this.periodicDebtModStrategies, idebtModStrategies.periodicDebtModStrategies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lumpSumDebtModStrategies, periodicDebtModStrategies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDebtModStrategies {\n");
    sb.append("    lumpSumDebtModStrategies: ").append(toIndentedString(lumpSumDebtModStrategies)).append("\n");
    sb.append("    periodicDebtModStrategies: ").append(toIndentedString(periodicDebtModStrategies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lumpSumDebtModStrategies");
    openapiFields.add("periodicDebtModStrategies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IDebtModStrategies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IDebtModStrategies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDebtModStrategies is not found in the empty JSON string", IDebtModStrategies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IDebtModStrategies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IDebtModStrategies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("lumpSumDebtModStrategies") != null && !jsonObj.get("lumpSumDebtModStrategies").isJsonNull()) {
        JsonArray jsonArraylumpSumDebtModStrategies = jsonObj.getAsJsonArray("lumpSumDebtModStrategies");
        if (jsonArraylumpSumDebtModStrategies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lumpSumDebtModStrategies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lumpSumDebtModStrategies` to be an array in the JSON string but got `%s`", jsonObj.get("lumpSumDebtModStrategies").toString()));
          }

          // validate the optional field `lumpSumDebtModStrategies` (array)
          for (int i = 0; i < jsonArraylumpSumDebtModStrategies.size(); i++) {
            ILumpSumDebtModStrategy.validateJsonElement(jsonArraylumpSumDebtModStrategies.get(i));
          };
        }
      }
      if (jsonObj.get("periodicDebtModStrategies") != null && !jsonObj.get("periodicDebtModStrategies").isJsonNull()) {
        JsonArray jsonArrayperiodicDebtModStrategies = jsonObj.getAsJsonArray("periodicDebtModStrategies");
        if (jsonArrayperiodicDebtModStrategies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("periodicDebtModStrategies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `periodicDebtModStrategies` to be an array in the JSON string but got `%s`", jsonObj.get("periodicDebtModStrategies").toString()));
          }

          // validate the optional field `periodicDebtModStrategies` (array)
          for (int i = 0; i < jsonArrayperiodicDebtModStrategies.size(); i++) {
            IPeriodicDebtModStrategy.validateJsonElement(jsonArrayperiodicDebtModStrategies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDebtModStrategies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDebtModStrategies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDebtModStrategies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDebtModStrategies.class));

       return (TypeAdapter<T>) new TypeAdapter<IDebtModStrategies>() {
           @Override
           public void write(JsonWriter out, IDebtModStrategies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDebtModStrategies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IDebtModStrategies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IDebtModStrategies
   * @throws IOException if the JSON string is invalid with respect to IDebtModStrategies
   */
  public static IDebtModStrategies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDebtModStrategies.class);
  }

  /**
   * Convert an instance of IDebtModStrategies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

