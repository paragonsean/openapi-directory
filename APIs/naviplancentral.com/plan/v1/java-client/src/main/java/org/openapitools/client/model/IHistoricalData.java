/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IGeneralSetups;
import org.openapitools.client.model.INotionalAccounts;
import org.openapitools.client.model.IOutstandingShareholderLoans;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IHistoricalData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IHistoricalData {
  public static final String SERIALIZED_NAME_GENERAL_SETUPS = "generalSetups";
  @SerializedName(SERIALIZED_NAME_GENERAL_SETUPS)
  private IGeneralSetups generalSetups;

  public static final String SERIALIZED_NAME_NOTIONAL_ACCOUNTS = "notionalAccounts";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_ACCOUNTS)
  private INotionalAccounts notionalAccounts;

  public static final String SERIALIZED_NAME_OUTSTANDING_SHAREHOLDER_LOANS = "outstandingShareholderLoans";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_SHAREHOLDER_LOANS)
  private IOutstandingShareholderLoans outstandingShareholderLoans;

  public IHistoricalData() {
  }

  public IHistoricalData generalSetups(IGeneralSetups generalSetups) {
    this.generalSetups = generalSetups;
    return this;
  }

  /**
   * Get generalSetups
   * @return generalSetups
   */
  @javax.annotation.Nullable
  public IGeneralSetups getGeneralSetups() {
    return generalSetups;
  }

  public void setGeneralSetups(IGeneralSetups generalSetups) {
    this.generalSetups = generalSetups;
  }


  public IHistoricalData notionalAccounts(INotionalAccounts notionalAccounts) {
    this.notionalAccounts = notionalAccounts;
    return this;
  }

  /**
   * Get notionalAccounts
   * @return notionalAccounts
   */
  @javax.annotation.Nullable
  public INotionalAccounts getNotionalAccounts() {
    return notionalAccounts;
  }

  public void setNotionalAccounts(INotionalAccounts notionalAccounts) {
    this.notionalAccounts = notionalAccounts;
  }


  public IHistoricalData outstandingShareholderLoans(IOutstandingShareholderLoans outstandingShareholderLoans) {
    this.outstandingShareholderLoans = outstandingShareholderLoans;
    return this;
  }

  /**
   * Get outstandingShareholderLoans
   * @return outstandingShareholderLoans
   */
  @javax.annotation.Nullable
  public IOutstandingShareholderLoans getOutstandingShareholderLoans() {
    return outstandingShareholderLoans;
  }

  public void setOutstandingShareholderLoans(IOutstandingShareholderLoans outstandingShareholderLoans) {
    this.outstandingShareholderLoans = outstandingShareholderLoans;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IHistoricalData ihistoricalData = (IHistoricalData) o;
    return Objects.equals(this.generalSetups, ihistoricalData.generalSetups) &&
        Objects.equals(this.notionalAccounts, ihistoricalData.notionalAccounts) &&
        Objects.equals(this.outstandingShareholderLoans, ihistoricalData.outstandingShareholderLoans);
  }

  @Override
  public int hashCode() {
    return Objects.hash(generalSetups, notionalAccounts, outstandingShareholderLoans);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IHistoricalData {\n");
    sb.append("    generalSetups: ").append(toIndentedString(generalSetups)).append("\n");
    sb.append("    notionalAccounts: ").append(toIndentedString(notionalAccounts)).append("\n");
    sb.append("    outstandingShareholderLoans: ").append(toIndentedString(outstandingShareholderLoans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("generalSetups");
    openapiFields.add("notionalAccounts");
    openapiFields.add("outstandingShareholderLoans");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IHistoricalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IHistoricalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IHistoricalData is not found in the empty JSON string", IHistoricalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IHistoricalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IHistoricalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `generalSetups`
      if (jsonObj.get("generalSetups") != null && !jsonObj.get("generalSetups").isJsonNull()) {
        IGeneralSetups.validateJsonElement(jsonObj.get("generalSetups"));
      }
      // validate the optional field `notionalAccounts`
      if (jsonObj.get("notionalAccounts") != null && !jsonObj.get("notionalAccounts").isJsonNull()) {
        INotionalAccounts.validateJsonElement(jsonObj.get("notionalAccounts"));
      }
      // validate the optional field `outstandingShareholderLoans`
      if (jsonObj.get("outstandingShareholderLoans") != null && !jsonObj.get("outstandingShareholderLoans").isJsonNull()) {
        IOutstandingShareholderLoans.validateJsonElement(jsonObj.get("outstandingShareholderLoans"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IHistoricalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IHistoricalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IHistoricalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IHistoricalData.class));

       return (TypeAdapter<T>) new TypeAdapter<IHistoricalData>() {
           @Override
           public void write(JsonWriter out, IHistoricalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IHistoricalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IHistoricalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IHistoricalData
   * @throws IOException if the JSON string is invalid with respect to IHistoricalData
   */
  public static IHistoricalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IHistoricalData.class);
  }

  /**
   * Convert an instance of IHistoricalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

