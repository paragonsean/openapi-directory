/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.FormattedEnumTypeFrequency;
import org.openapitools.client.model.FormattedEnumTypeSEPPDistributionMethod;
import org.openapitools.client.model.FormattedEnumTypeSEPPLifeExpectancyTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ISEPPRedemptionStrategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ISEPPRedemptionStrategy {
  public static final String SERIALIZED_NAME_APPLICABLE_DATE_RANGE = "applicableDateRange";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_DATE_RANGE)
  private FormattedDateRange applicableDateRange;

  public static final String SERIALIZED_NAME_DISTRIBUTION_METHOD = "distributionMethod";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_METHOD)
  private FormattedEnumTypeSEPPDistributionMethod distributionMethod;

  public static final String SERIALIZED_NAME_LIFE_EXPECTANCY_TABLE = "lifeExpectancyTable";
  @SerializedName(SERIALIZED_NAME_LIFE_EXPECTANCY_TABLE)
  private FormattedEnumTypeSEPPLifeExpectancyTable lifeExpectancyTable;

  public static final String SERIALIZED_NAME_REDEMPTION_FREQUENCY = "redemptionFrequency";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_FREQUENCY)
  private FormattedEnumTypeFrequency redemptionFrequency;

  public ISEPPRedemptionStrategy() {
  }

  public ISEPPRedemptionStrategy applicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
    return this;
  }

  /**
   * Get applicableDateRange
   * @return applicableDateRange
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableDateRange() {
    return applicableDateRange;
  }

  public void setApplicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
  }


  public ISEPPRedemptionStrategy distributionMethod(FormattedEnumTypeSEPPDistributionMethod distributionMethod) {
    this.distributionMethod = distributionMethod;
    return this;
  }

  /**
   * Get distributionMethod
   * @return distributionMethod
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeSEPPDistributionMethod getDistributionMethod() {
    return distributionMethod;
  }

  public void setDistributionMethod(FormattedEnumTypeSEPPDistributionMethod distributionMethod) {
    this.distributionMethod = distributionMethod;
  }


  public ISEPPRedemptionStrategy lifeExpectancyTable(FormattedEnumTypeSEPPLifeExpectancyTable lifeExpectancyTable) {
    this.lifeExpectancyTable = lifeExpectancyTable;
    return this;
  }

  /**
   * Get lifeExpectancyTable
   * @return lifeExpectancyTable
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeSEPPLifeExpectancyTable getLifeExpectancyTable() {
    return lifeExpectancyTable;
  }

  public void setLifeExpectancyTable(FormattedEnumTypeSEPPLifeExpectancyTable lifeExpectancyTable) {
    this.lifeExpectancyTable = lifeExpectancyTable;
  }


  public ISEPPRedemptionStrategy redemptionFrequency(FormattedEnumTypeFrequency redemptionFrequency) {
    this.redemptionFrequency = redemptionFrequency;
    return this;
  }

  /**
   * Get redemptionFrequency
   * @return redemptionFrequency
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeFrequency getRedemptionFrequency() {
    return redemptionFrequency;
  }

  public void setRedemptionFrequency(FormattedEnumTypeFrequency redemptionFrequency) {
    this.redemptionFrequency = redemptionFrequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ISEPPRedemptionStrategy isEPPRedemptionStrategy = (ISEPPRedemptionStrategy) o;
    return Objects.equals(this.applicableDateRange, isEPPRedemptionStrategy.applicableDateRange) &&
        Objects.equals(this.distributionMethod, isEPPRedemptionStrategy.distributionMethod) &&
        Objects.equals(this.lifeExpectancyTable, isEPPRedemptionStrategy.lifeExpectancyTable) &&
        Objects.equals(this.redemptionFrequency, isEPPRedemptionStrategy.redemptionFrequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableDateRange, distributionMethod, lifeExpectancyTable, redemptionFrequency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ISEPPRedemptionStrategy {\n");
    sb.append("    applicableDateRange: ").append(toIndentedString(applicableDateRange)).append("\n");
    sb.append("    distributionMethod: ").append(toIndentedString(distributionMethod)).append("\n");
    sb.append("    lifeExpectancyTable: ").append(toIndentedString(lifeExpectancyTable)).append("\n");
    sb.append("    redemptionFrequency: ").append(toIndentedString(redemptionFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableDateRange");
    openapiFields.add("distributionMethod");
    openapiFields.add("lifeExpectancyTable");
    openapiFields.add("redemptionFrequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ISEPPRedemptionStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ISEPPRedemptionStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ISEPPRedemptionStrategy is not found in the empty JSON string", ISEPPRedemptionStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ISEPPRedemptionStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ISEPPRedemptionStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicableDateRange`
      if (jsonObj.get("applicableDateRange") != null && !jsonObj.get("applicableDateRange").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableDateRange"));
      }
      // validate the optional field `distributionMethod`
      if (jsonObj.get("distributionMethod") != null && !jsonObj.get("distributionMethod").isJsonNull()) {
        FormattedEnumTypeSEPPDistributionMethod.validateJsonElement(jsonObj.get("distributionMethod"));
      }
      // validate the optional field `lifeExpectancyTable`
      if (jsonObj.get("lifeExpectancyTable") != null && !jsonObj.get("lifeExpectancyTable").isJsonNull()) {
        FormattedEnumTypeSEPPLifeExpectancyTable.validateJsonElement(jsonObj.get("lifeExpectancyTable"));
      }
      // validate the optional field `redemptionFrequency`
      if (jsonObj.get("redemptionFrequency") != null && !jsonObj.get("redemptionFrequency").isJsonNull()) {
        FormattedEnumTypeFrequency.validateJsonElement(jsonObj.get("redemptionFrequency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ISEPPRedemptionStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ISEPPRedemptionStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ISEPPRedemptionStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ISEPPRedemptionStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<ISEPPRedemptionStrategy>() {
           @Override
           public void write(JsonWriter out, ISEPPRedemptionStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ISEPPRedemptionStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ISEPPRedemptionStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ISEPPRedemptionStrategy
   * @throws IOException if the JSON string is invalid with respect to ISEPPRedemptionStrategy
   */
  public static ISEPPRedemptionStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ISEPPRedemptionStrategy.class);
  }

  /**
   * Convert an instance of ISEPPRedemptionStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

