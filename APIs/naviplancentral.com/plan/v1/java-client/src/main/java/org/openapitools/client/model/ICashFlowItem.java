/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ICashFlowItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ICashFlowItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_WITH_OWNER = "descriptionWithOwner";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_WITH_OWNER)
  private String descriptionWithOwner;

  public static final String SERIALIZED_NAME_IS_C_P_P = "isCPP";
  @SerializedName(SERIALIZED_NAME_IS_C_P_P)
  private Boolean isCPP;

  public static final String SERIALIZED_NAME_IS_O_A_S = "isOAS";
  @SerializedName(SERIALIZED_NAME_IS_O_A_S)
  private Boolean isOAS;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_TYPE_DESCRIPTION = "typeDescription";
  @SerializedName(SERIALIZED_NAME_TYPE_DESCRIPTION)
  private String typeDescription;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Currency value;

  public ICashFlowItem() {
  }

  public ICashFlowItem(
     String description, 
     String descriptionWithOwner, 
     Boolean isCPP, 
     Boolean isOAS, 
     String sourceId, 
     String typeDescription
  ) {
    this();
    this.description = description;
    this.descriptionWithOwner = descriptionWithOwner;
    this.isCPP = isCPP;
    this.isOAS = isOAS;
    this.sourceId = sourceId;
    this.typeDescription = typeDescription;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get descriptionWithOwner
   * @return descriptionWithOwner
   */
  @javax.annotation.Nullable
  public String getDescriptionWithOwner() {
    return descriptionWithOwner;
  }



  /**
   * Get isCPP
   * @return isCPP
   */
  @javax.annotation.Nullable
  public Boolean getIsCPP() {
    return isCPP;
  }



  /**
   * Get isOAS
   * @return isOAS
   */
  @javax.annotation.Nullable
  public Boolean getIsOAS() {
    return isOAS;
  }



  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }



  /**
   * Get typeDescription
   * @return typeDescription
   */
  @javax.annotation.Nullable
  public String getTypeDescription() {
    return typeDescription;
  }



  public ICashFlowItem value(Currency value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Currency getValue() {
    return value;
  }

  public void setValue(Currency value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICashFlowItem icashFlowItem = (ICashFlowItem) o;
    return Objects.equals(this.description, icashFlowItem.description) &&
        Objects.equals(this.descriptionWithOwner, icashFlowItem.descriptionWithOwner) &&
        Objects.equals(this.isCPP, icashFlowItem.isCPP) &&
        Objects.equals(this.isOAS, icashFlowItem.isOAS) &&
        Objects.equals(this.sourceId, icashFlowItem.sourceId) &&
        Objects.equals(this.typeDescription, icashFlowItem.typeDescription) &&
        Objects.equals(this.value, icashFlowItem.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, descriptionWithOwner, isCPP, isOAS, sourceId, typeDescription, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICashFlowItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionWithOwner: ").append(toIndentedString(descriptionWithOwner)).append("\n");
    sb.append("    isCPP: ").append(toIndentedString(isCPP)).append("\n");
    sb.append("    isOAS: ").append(toIndentedString(isOAS)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("descriptionWithOwner");
    openapiFields.add("isCPP");
    openapiFields.add("isOAS");
    openapiFields.add("sourceId");
    openapiFields.add("typeDescription");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ICashFlowItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ICashFlowItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ICashFlowItem is not found in the empty JSON string", ICashFlowItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ICashFlowItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ICashFlowItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("descriptionWithOwner") != null && !jsonObj.get("descriptionWithOwner").isJsonNull()) && !jsonObj.get("descriptionWithOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionWithOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionWithOwner").toString()));
      }
      if ((jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) && !jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if ((jsonObj.get("typeDescription") != null && !jsonObj.get("typeDescription").isJsonNull()) && !jsonObj.get("typeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeDescription").toString()));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ICashFlowItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ICashFlowItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ICashFlowItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ICashFlowItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ICashFlowItem>() {
           @Override
           public void write(JsonWriter out, ICashFlowItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ICashFlowItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ICashFlowItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ICashFlowItem
   * @throws IOException if the JSON string is invalid with respect to ICashFlowItem
   */
  public static ICashFlowItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ICashFlowItem.class);
  }

  /**
   * Convert an instance of ICashFlowItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

