/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.INetWorthCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ILiabilities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ILiabilities {
  public static final String SERIALIZED_NAME_CLIENT_LIABILITIES = "clientLiabilities";
  @SerializedName(SERIALIZED_NAME_CLIENT_LIABILITIES)
  private INetWorthCategory clientLiabilities;

  public static final String SERIALIZED_NAME_CO_CLIENT_LIABILITIES = "coClientLiabilities";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_LIABILITIES)
  private INetWorthCategory coClientLiabilities;

  public static final String SERIALIZED_NAME_COMMUNITY_PROPERTY_LIABILITIES = "communityPropertyLiabilities";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_PROPERTY_LIABILITIES)
  private INetWorthCategory communityPropertyLiabilities;

  public static final String SERIALIZED_NAME_JOINT_LIABILITIES = "jointLiabilities";
  @SerializedName(SERIALIZED_NAME_JOINT_LIABILITIES)
  private INetWorthCategory jointLiabilities;

  public static final String SERIALIZED_NAME_TOTAL_LIABILITIES = "totalLiabilities";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIABILITIES)
  private INetWorthCategory totalLiabilities;

  public ILiabilities() {
  }

  public ILiabilities clientLiabilities(INetWorthCategory clientLiabilities) {
    this.clientLiabilities = clientLiabilities;
    return this;
  }

  /**
   * Get clientLiabilities
   * @return clientLiabilities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getClientLiabilities() {
    return clientLiabilities;
  }

  public void setClientLiabilities(INetWorthCategory clientLiabilities) {
    this.clientLiabilities = clientLiabilities;
  }


  public ILiabilities coClientLiabilities(INetWorthCategory coClientLiabilities) {
    this.coClientLiabilities = coClientLiabilities;
    return this;
  }

  /**
   * Get coClientLiabilities
   * @return coClientLiabilities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getCoClientLiabilities() {
    return coClientLiabilities;
  }

  public void setCoClientLiabilities(INetWorthCategory coClientLiabilities) {
    this.coClientLiabilities = coClientLiabilities;
  }


  public ILiabilities communityPropertyLiabilities(INetWorthCategory communityPropertyLiabilities) {
    this.communityPropertyLiabilities = communityPropertyLiabilities;
    return this;
  }

  /**
   * Get communityPropertyLiabilities
   * @return communityPropertyLiabilities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getCommunityPropertyLiabilities() {
    return communityPropertyLiabilities;
  }

  public void setCommunityPropertyLiabilities(INetWorthCategory communityPropertyLiabilities) {
    this.communityPropertyLiabilities = communityPropertyLiabilities;
  }


  public ILiabilities jointLiabilities(INetWorthCategory jointLiabilities) {
    this.jointLiabilities = jointLiabilities;
    return this;
  }

  /**
   * Get jointLiabilities
   * @return jointLiabilities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getJointLiabilities() {
    return jointLiabilities;
  }

  public void setJointLiabilities(INetWorthCategory jointLiabilities) {
    this.jointLiabilities = jointLiabilities;
  }


  public ILiabilities totalLiabilities(INetWorthCategory totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
    return this;
  }

  /**
   * Get totalLiabilities
   * @return totalLiabilities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getTotalLiabilities() {
    return totalLiabilities;
  }

  public void setTotalLiabilities(INetWorthCategory totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ILiabilities iliabilities = (ILiabilities) o;
    return Objects.equals(this.clientLiabilities, iliabilities.clientLiabilities) &&
        Objects.equals(this.coClientLiabilities, iliabilities.coClientLiabilities) &&
        Objects.equals(this.communityPropertyLiabilities, iliabilities.communityPropertyLiabilities) &&
        Objects.equals(this.jointLiabilities, iliabilities.jointLiabilities) &&
        Objects.equals(this.totalLiabilities, iliabilities.totalLiabilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientLiabilities, coClientLiabilities, communityPropertyLiabilities, jointLiabilities, totalLiabilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ILiabilities {\n");
    sb.append("    clientLiabilities: ").append(toIndentedString(clientLiabilities)).append("\n");
    sb.append("    coClientLiabilities: ").append(toIndentedString(coClientLiabilities)).append("\n");
    sb.append("    communityPropertyLiabilities: ").append(toIndentedString(communityPropertyLiabilities)).append("\n");
    sb.append("    jointLiabilities: ").append(toIndentedString(jointLiabilities)).append("\n");
    sb.append("    totalLiabilities: ").append(toIndentedString(totalLiabilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientLiabilities");
    openapiFields.add("coClientLiabilities");
    openapiFields.add("communityPropertyLiabilities");
    openapiFields.add("jointLiabilities");
    openapiFields.add("totalLiabilities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ILiabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ILiabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ILiabilities is not found in the empty JSON string", ILiabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ILiabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ILiabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientLiabilities`
      if (jsonObj.get("clientLiabilities") != null && !jsonObj.get("clientLiabilities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("clientLiabilities"));
      }
      // validate the optional field `coClientLiabilities`
      if (jsonObj.get("coClientLiabilities") != null && !jsonObj.get("coClientLiabilities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("coClientLiabilities"));
      }
      // validate the optional field `communityPropertyLiabilities`
      if (jsonObj.get("communityPropertyLiabilities") != null && !jsonObj.get("communityPropertyLiabilities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("communityPropertyLiabilities"));
      }
      // validate the optional field `jointLiabilities`
      if (jsonObj.get("jointLiabilities") != null && !jsonObj.get("jointLiabilities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("jointLiabilities"));
      }
      // validate the optional field `totalLiabilities`
      if (jsonObj.get("totalLiabilities") != null && !jsonObj.get("totalLiabilities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("totalLiabilities"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ILiabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ILiabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ILiabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ILiabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<ILiabilities>() {
           @Override
           public void write(JsonWriter out, ILiabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ILiabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ILiabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ILiabilities
   * @throws IOException if the JSON string is invalid with respect to ILiabilities
   */
  public static ILiabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ILiabilities.class);
  }

  /**
   * Convert an instance of ILiabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

