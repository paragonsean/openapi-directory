/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IAddress;
import org.openapitools.client.model.IDependent;
import org.openapitools.client.model.IFamilyMember;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IFamily
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IFamily {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private IAddress address;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private IFamilyMember client;

  public static final String SERIALIZED_NAME_CO_CLIENT = "coClient";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT)
  private IFamilyMember coClient;

  public static final String SERIALIZED_NAME_DEPENDENTS = "dependents";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS)
  private List<IDependent> dependents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEAD_FULL_NAMES = "headFullNames";
  @SerializedName(SERIALIZED_NAME_HEAD_FULL_NAMES)
  private String headFullNames;

  public IFamily() {
  }

  public IFamily(
     List<IDependent> dependents, 
     String headFullNames
  ) {
    this();
    this.dependents = dependents;
    this.headFullNames = headFullNames;
  }

  public IFamily address(IAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public IAddress getAddress() {
    return address;
  }

  public void setAddress(IAddress address) {
    this.address = address;
  }


  public IFamily client(IFamilyMember client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public IFamilyMember getClient() {
    return client;
  }

  public void setClient(IFamilyMember client) {
    this.client = client;
  }


  public IFamily coClient(IFamilyMember coClient) {
    this.coClient = coClient;
    return this;
  }

  /**
   * Get coClient
   * @return coClient
   */
  @javax.annotation.Nullable
  public IFamilyMember getCoClient() {
    return coClient;
  }

  public void setCoClient(IFamilyMember coClient) {
    this.coClient = coClient;
  }


  /**
   * Get dependents
   * @return dependents
   */
  @javax.annotation.Nullable
  public List<IDependent> getDependents() {
    return dependents;
  }



  /**
   * Get headFullNames
   * @return headFullNames
   */
  @javax.annotation.Nullable
  public String getHeadFullNames() {
    return headFullNames;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFamily ifamily = (IFamily) o;
    return Objects.equals(this.address, ifamily.address) &&
        Objects.equals(this.client, ifamily.client) &&
        Objects.equals(this.coClient, ifamily.coClient) &&
        Objects.equals(this.dependents, ifamily.dependents) &&
        Objects.equals(this.headFullNames, ifamily.headFullNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, client, coClient, dependents, headFullNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFamily {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    coClient: ").append(toIndentedString(coClient)).append("\n");
    sb.append("    dependents: ").append(toIndentedString(dependents)).append("\n");
    sb.append("    headFullNames: ").append(toIndentedString(headFullNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("client");
    openapiFields.add("coClient");
    openapiFields.add("dependents");
    openapiFields.add("headFullNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IFamily
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IFamily.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IFamily is not found in the empty JSON string", IFamily.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IFamily.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IFamily` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        IAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        IFamilyMember.validateJsonElement(jsonObj.get("client"));
      }
      // validate the optional field `coClient`
      if (jsonObj.get("coClient") != null && !jsonObj.get("coClient").isJsonNull()) {
        IFamilyMember.validateJsonElement(jsonObj.get("coClient"));
      }
      if (jsonObj.get("dependents") != null && !jsonObj.get("dependents").isJsonNull()) {
        JsonArray jsonArraydependents = jsonObj.getAsJsonArray("dependents");
        if (jsonArraydependents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependents` to be an array in the JSON string but got `%s`", jsonObj.get("dependents").toString()));
          }

          // validate the optional field `dependents` (array)
          for (int i = 0; i < jsonArraydependents.size(); i++) {
            IDependent.validateJsonElement(jsonArraydependents.get(i));
          };
        }
      }
      if ((jsonObj.get("headFullNames") != null && !jsonObj.get("headFullNames").isJsonNull()) && !jsonObj.get("headFullNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headFullNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headFullNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IFamily.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IFamily' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IFamily> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IFamily.class));

       return (TypeAdapter<T>) new TypeAdapter<IFamily>() {
           @Override
           public void write(JsonWriter out, IFamily value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IFamily read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IFamily given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IFamily
   * @throws IOException if the JSON string is invalid with respect to IFamily
   */
  public static IFamily fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IFamily.class);
  }

  /**
   * Convert an instance of IFamily to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

