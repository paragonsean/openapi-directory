/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IRetirementAssetCategories;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRetirementAssets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IRetirementAssets {
  public static final String SERIALIZED_NAME_ALL_ASSETS = "allAssets";
  @SerializedName(SERIALIZED_NAME_ALL_ASSETS)
  private IRetirementAssetCategories allAssets;

  public static final String SERIALIZED_NAME_CLIENT_ASSETS = "clientAssets";
  @SerializedName(SERIALIZED_NAME_CLIENT_ASSETS)
  private IRetirementAssetCategories clientAssets;

  public static final String SERIALIZED_NAME_CO_CLIENT_ASSETS = "coClientAssets";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_ASSETS)
  private IRetirementAssetCategories coClientAssets;

  public static final String SERIALIZED_NAME_COMMUNITY_PROPERTY_ASSETS = "communityPropertyAssets";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_PROPERTY_ASSETS)
  private IRetirementAssetCategories communityPropertyAssets;

  public static final String SERIALIZED_NAME_JOINT_ASSETS = "jointAssets";
  @SerializedName(SERIALIZED_NAME_JOINT_ASSETS)
  private IRetirementAssetCategories jointAssets;

  public static final String SERIALIZED_NAME_WITHDRAWAL_RATE = "withdrawalRate";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_RATE)
  private Percent withdrawalRate;

  public IRetirementAssets() {
  }

  public IRetirementAssets allAssets(IRetirementAssetCategories allAssets) {
    this.allAssets = allAssets;
    return this;
  }

  /**
   * Get allAssets
   * @return allAssets
   */
  @javax.annotation.Nullable
  public IRetirementAssetCategories getAllAssets() {
    return allAssets;
  }

  public void setAllAssets(IRetirementAssetCategories allAssets) {
    this.allAssets = allAssets;
  }


  public IRetirementAssets clientAssets(IRetirementAssetCategories clientAssets) {
    this.clientAssets = clientAssets;
    return this;
  }

  /**
   * Get clientAssets
   * @return clientAssets
   */
  @javax.annotation.Nullable
  public IRetirementAssetCategories getClientAssets() {
    return clientAssets;
  }

  public void setClientAssets(IRetirementAssetCategories clientAssets) {
    this.clientAssets = clientAssets;
  }


  public IRetirementAssets coClientAssets(IRetirementAssetCategories coClientAssets) {
    this.coClientAssets = coClientAssets;
    return this;
  }

  /**
   * Get coClientAssets
   * @return coClientAssets
   */
  @javax.annotation.Nullable
  public IRetirementAssetCategories getCoClientAssets() {
    return coClientAssets;
  }

  public void setCoClientAssets(IRetirementAssetCategories coClientAssets) {
    this.coClientAssets = coClientAssets;
  }


  public IRetirementAssets communityPropertyAssets(IRetirementAssetCategories communityPropertyAssets) {
    this.communityPropertyAssets = communityPropertyAssets;
    return this;
  }

  /**
   * Get communityPropertyAssets
   * @return communityPropertyAssets
   */
  @javax.annotation.Nullable
  public IRetirementAssetCategories getCommunityPropertyAssets() {
    return communityPropertyAssets;
  }

  public void setCommunityPropertyAssets(IRetirementAssetCategories communityPropertyAssets) {
    this.communityPropertyAssets = communityPropertyAssets;
  }


  public IRetirementAssets jointAssets(IRetirementAssetCategories jointAssets) {
    this.jointAssets = jointAssets;
    return this;
  }

  /**
   * Get jointAssets
   * @return jointAssets
   */
  @javax.annotation.Nullable
  public IRetirementAssetCategories getJointAssets() {
    return jointAssets;
  }

  public void setJointAssets(IRetirementAssetCategories jointAssets) {
    this.jointAssets = jointAssets;
  }


  public IRetirementAssets withdrawalRate(Percent withdrawalRate) {
    this.withdrawalRate = withdrawalRate;
    return this;
  }

  /**
   * Get withdrawalRate
   * @return withdrawalRate
   */
  @javax.annotation.Nullable
  public Percent getWithdrawalRate() {
    return withdrawalRate;
  }

  public void setWithdrawalRate(Percent withdrawalRate) {
    this.withdrawalRate = withdrawalRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRetirementAssets iretirementAssets = (IRetirementAssets) o;
    return Objects.equals(this.allAssets, iretirementAssets.allAssets) &&
        Objects.equals(this.clientAssets, iretirementAssets.clientAssets) &&
        Objects.equals(this.coClientAssets, iretirementAssets.coClientAssets) &&
        Objects.equals(this.communityPropertyAssets, iretirementAssets.communityPropertyAssets) &&
        Objects.equals(this.jointAssets, iretirementAssets.jointAssets) &&
        Objects.equals(this.withdrawalRate, iretirementAssets.withdrawalRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allAssets, clientAssets, coClientAssets, communityPropertyAssets, jointAssets, withdrawalRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRetirementAssets {\n");
    sb.append("    allAssets: ").append(toIndentedString(allAssets)).append("\n");
    sb.append("    clientAssets: ").append(toIndentedString(clientAssets)).append("\n");
    sb.append("    coClientAssets: ").append(toIndentedString(coClientAssets)).append("\n");
    sb.append("    communityPropertyAssets: ").append(toIndentedString(communityPropertyAssets)).append("\n");
    sb.append("    jointAssets: ").append(toIndentedString(jointAssets)).append("\n");
    sb.append("    withdrawalRate: ").append(toIndentedString(withdrawalRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allAssets");
    openapiFields.add("clientAssets");
    openapiFields.add("coClientAssets");
    openapiFields.add("communityPropertyAssets");
    openapiFields.add("jointAssets");
    openapiFields.add("withdrawalRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRetirementAssets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRetirementAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRetirementAssets is not found in the empty JSON string", IRetirementAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRetirementAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRetirementAssets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allAssets`
      if (jsonObj.get("allAssets") != null && !jsonObj.get("allAssets").isJsonNull()) {
        IRetirementAssetCategories.validateJsonElement(jsonObj.get("allAssets"));
      }
      // validate the optional field `clientAssets`
      if (jsonObj.get("clientAssets") != null && !jsonObj.get("clientAssets").isJsonNull()) {
        IRetirementAssetCategories.validateJsonElement(jsonObj.get("clientAssets"));
      }
      // validate the optional field `coClientAssets`
      if (jsonObj.get("coClientAssets") != null && !jsonObj.get("coClientAssets").isJsonNull()) {
        IRetirementAssetCategories.validateJsonElement(jsonObj.get("coClientAssets"));
      }
      // validate the optional field `communityPropertyAssets`
      if (jsonObj.get("communityPropertyAssets") != null && !jsonObj.get("communityPropertyAssets").isJsonNull()) {
        IRetirementAssetCategories.validateJsonElement(jsonObj.get("communityPropertyAssets"));
      }
      // validate the optional field `jointAssets`
      if (jsonObj.get("jointAssets") != null && !jsonObj.get("jointAssets").isJsonNull()) {
        IRetirementAssetCategories.validateJsonElement(jsonObj.get("jointAssets"));
      }
      // validate the optional field `withdrawalRate`
      if (jsonObj.get("withdrawalRate") != null && !jsonObj.get("withdrawalRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("withdrawalRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRetirementAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRetirementAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRetirementAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRetirementAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<IRetirementAssets>() {
           @Override
           public void write(JsonWriter out, IRetirementAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRetirementAssets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRetirementAssets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRetirementAssets
   * @throws IOException if the JSON string is invalid with respect to IRetirementAssets
   */
  public static IRetirementAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRetirementAssets.class);
  }

  /**
   * Convert an instance of IRetirementAssets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

