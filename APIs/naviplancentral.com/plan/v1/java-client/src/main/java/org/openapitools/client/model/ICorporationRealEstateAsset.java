/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.CurrencyWithDate;
import org.openapitools.client.model.DescriptiveBoolean;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ICorporationRealEstateAsset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ICorporationRealEstateAsset {
  public static final String SERIALIZED_NAME_CURRENT_YEAR_NET_RENTAL_INCOME = "currentYearNetRentalIncome";
  @SerializedName(SERIALIZED_NAME_CURRENT_YEAR_NET_RENTAL_INCOME)
  private Currency currentYearNetRentalIncome;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE_BUSINESS_INCOME = "isActiveBusinessIncome";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_BUSINESS_INCOME)
  private DescriptiveBoolean isActiveBusinessIncome;

  public static final String SERIALIZED_NAME_MARKET_VALUE_AS_OF = "marketValueAsOf";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUE_AS_OF)
  private CurrencyWithDate marketValueAsOf;

  /**
   * Gets or Sets owner
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_PRE_TAX_GROWTH_RATE = "preTaxGrowthRate";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_GROWTH_RATE)
  private Percent preTaxGrowthRate;

  public static final String SERIALIZED_NAME_PURCHASE_AMOUNT = "purchaseAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AMOUNT)
  private Currency purchaseAmount;

  public static final String SERIALIZED_NAME_PURCHASE_DATE = "purchaseDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE)
  private Date purchaseDate;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standardDeviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private Percent standardDeviation;

  public static final String SERIALIZED_NAME_START_OF_YEAR_COST_BASIS = "startOfYearCostBasis";
  @SerializedName(SERIALIZED_NAME_START_OF_YEAR_COST_BASIS)
  private Currency startOfYearCostBasis;

  public static final String SERIALIZED_NAME_START_OF_YEAR_MARKET_VALUE = "startOfYearMarketValue";
  @SerializedName(SERIALIZED_NAME_START_OF_YEAR_MARKET_VALUE)
  private Currency startOfYearMarketValue;

  public ICorporationRealEstateAsset() {
  }

  public ICorporationRealEstateAsset(
     String description, 
     String id, 
     OwnerEnum owner
  ) {
    this();
    this.description = description;
    this.id = id;
    this.owner = owner;
  }

  public ICorporationRealEstateAsset currentYearNetRentalIncome(Currency currentYearNetRentalIncome) {
    this.currentYearNetRentalIncome = currentYearNetRentalIncome;
    return this;
  }

  /**
   * Get currentYearNetRentalIncome
   * @return currentYearNetRentalIncome
   */
  @javax.annotation.Nullable
  public Currency getCurrentYearNetRentalIncome() {
    return currentYearNetRentalIncome;
  }

  public void setCurrentYearNetRentalIncome(Currency currentYearNetRentalIncome) {
    this.currentYearNetRentalIncome = currentYearNetRentalIncome;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ICorporationRealEstateAsset isActiveBusinessIncome(DescriptiveBoolean isActiveBusinessIncome) {
    this.isActiveBusinessIncome = isActiveBusinessIncome;
    return this;
  }

  /**
   * Get isActiveBusinessIncome
   * @return isActiveBusinessIncome
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getIsActiveBusinessIncome() {
    return isActiveBusinessIncome;
  }

  public void setIsActiveBusinessIncome(DescriptiveBoolean isActiveBusinessIncome) {
    this.isActiveBusinessIncome = isActiveBusinessIncome;
  }


  public ICorporationRealEstateAsset marketValueAsOf(CurrencyWithDate marketValueAsOf) {
    this.marketValueAsOf = marketValueAsOf;
    return this;
  }

  /**
   * Get marketValueAsOf
   * @return marketValueAsOf
   */
  @javax.annotation.Nullable
  public CurrencyWithDate getMarketValueAsOf() {
    return marketValueAsOf;
  }

  public void setMarketValueAsOf(CurrencyWithDate marketValueAsOf) {
    this.marketValueAsOf = marketValueAsOf;
  }


  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }



  public ICorporationRealEstateAsset preTaxGrowthRate(Percent preTaxGrowthRate) {
    this.preTaxGrowthRate = preTaxGrowthRate;
    return this;
  }

  /**
   * Get preTaxGrowthRate
   * @return preTaxGrowthRate
   */
  @javax.annotation.Nullable
  public Percent getPreTaxGrowthRate() {
    return preTaxGrowthRate;
  }

  public void setPreTaxGrowthRate(Percent preTaxGrowthRate) {
    this.preTaxGrowthRate = preTaxGrowthRate;
  }


  public ICorporationRealEstateAsset purchaseAmount(Currency purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

  /**
   * Get purchaseAmount
   * @return purchaseAmount
   */
  @javax.annotation.Nullable
  public Currency getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(Currency purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }


  public ICorporationRealEstateAsset purchaseDate(Date purchaseDate) {
    this.purchaseDate = purchaseDate;
    return this;
  }

  /**
   * Get purchaseDate
   * @return purchaseDate
   */
  @javax.annotation.Nullable
  public Date getPurchaseDate() {
    return purchaseDate;
  }

  public void setPurchaseDate(Date purchaseDate) {
    this.purchaseDate = purchaseDate;
  }


  public ICorporationRealEstateAsset standardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * Get standardDeviation
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public Percent getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public ICorporationRealEstateAsset startOfYearCostBasis(Currency startOfYearCostBasis) {
    this.startOfYearCostBasis = startOfYearCostBasis;
    return this;
  }

  /**
   * Get startOfYearCostBasis
   * @return startOfYearCostBasis
   */
  @javax.annotation.Nullable
  public Currency getStartOfYearCostBasis() {
    return startOfYearCostBasis;
  }

  public void setStartOfYearCostBasis(Currency startOfYearCostBasis) {
    this.startOfYearCostBasis = startOfYearCostBasis;
  }


  public ICorporationRealEstateAsset startOfYearMarketValue(Currency startOfYearMarketValue) {
    this.startOfYearMarketValue = startOfYearMarketValue;
    return this;
  }

  /**
   * Get startOfYearMarketValue
   * @return startOfYearMarketValue
   */
  @javax.annotation.Nullable
  public Currency getStartOfYearMarketValue() {
    return startOfYearMarketValue;
  }

  public void setStartOfYearMarketValue(Currency startOfYearMarketValue) {
    this.startOfYearMarketValue = startOfYearMarketValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICorporationRealEstateAsset icorporationRealEstateAsset = (ICorporationRealEstateAsset) o;
    return Objects.equals(this.currentYearNetRentalIncome, icorporationRealEstateAsset.currentYearNetRentalIncome) &&
        Objects.equals(this.description, icorporationRealEstateAsset.description) &&
        Objects.equals(this.id, icorporationRealEstateAsset.id) &&
        Objects.equals(this.isActiveBusinessIncome, icorporationRealEstateAsset.isActiveBusinessIncome) &&
        Objects.equals(this.marketValueAsOf, icorporationRealEstateAsset.marketValueAsOf) &&
        Objects.equals(this.owner, icorporationRealEstateAsset.owner) &&
        Objects.equals(this.preTaxGrowthRate, icorporationRealEstateAsset.preTaxGrowthRate) &&
        Objects.equals(this.purchaseAmount, icorporationRealEstateAsset.purchaseAmount) &&
        Objects.equals(this.purchaseDate, icorporationRealEstateAsset.purchaseDate) &&
        Objects.equals(this.standardDeviation, icorporationRealEstateAsset.standardDeviation) &&
        Objects.equals(this.startOfYearCostBasis, icorporationRealEstateAsset.startOfYearCostBasis) &&
        Objects.equals(this.startOfYearMarketValue, icorporationRealEstateAsset.startOfYearMarketValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentYearNetRentalIncome, description, id, isActiveBusinessIncome, marketValueAsOf, owner, preTaxGrowthRate, purchaseAmount, purchaseDate, standardDeviation, startOfYearCostBasis, startOfYearMarketValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICorporationRealEstateAsset {\n");
    sb.append("    currentYearNetRentalIncome: ").append(toIndentedString(currentYearNetRentalIncome)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActiveBusinessIncome: ").append(toIndentedString(isActiveBusinessIncome)).append("\n");
    sb.append("    marketValueAsOf: ").append(toIndentedString(marketValueAsOf)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    preTaxGrowthRate: ").append(toIndentedString(preTaxGrowthRate)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    purchaseDate: ").append(toIndentedString(purchaseDate)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    startOfYearCostBasis: ").append(toIndentedString(startOfYearCostBasis)).append("\n");
    sb.append("    startOfYearMarketValue: ").append(toIndentedString(startOfYearMarketValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentYearNetRentalIncome");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("isActiveBusinessIncome");
    openapiFields.add("marketValueAsOf");
    openapiFields.add("owner");
    openapiFields.add("preTaxGrowthRate");
    openapiFields.add("purchaseAmount");
    openapiFields.add("purchaseDate");
    openapiFields.add("standardDeviation");
    openapiFields.add("startOfYearCostBasis");
    openapiFields.add("startOfYearMarketValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ICorporationRealEstateAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ICorporationRealEstateAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ICorporationRealEstateAsset is not found in the empty JSON string", ICorporationRealEstateAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ICorporationRealEstateAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ICorporationRealEstateAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentYearNetRentalIncome`
      if (jsonObj.get("currentYearNetRentalIncome") != null && !jsonObj.get("currentYearNetRentalIncome").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentYearNetRentalIncome"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `isActiveBusinessIncome`
      if (jsonObj.get("isActiveBusinessIncome") != null && !jsonObj.get("isActiveBusinessIncome").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("isActiveBusinessIncome"));
      }
      // validate the optional field `marketValueAsOf`
      if (jsonObj.get("marketValueAsOf") != null && !jsonObj.get("marketValueAsOf").isJsonNull()) {
        CurrencyWithDate.validateJsonElement(jsonObj.get("marketValueAsOf"));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `preTaxGrowthRate`
      if (jsonObj.get("preTaxGrowthRate") != null && !jsonObj.get("preTaxGrowthRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("preTaxGrowthRate"));
      }
      // validate the optional field `purchaseAmount`
      if (jsonObj.get("purchaseAmount") != null && !jsonObj.get("purchaseAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("purchaseAmount"));
      }
      // validate the optional field `purchaseDate`
      if (jsonObj.get("purchaseDate") != null && !jsonObj.get("purchaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("purchaseDate"));
      }
      // validate the optional field `standardDeviation`
      if (jsonObj.get("standardDeviation") != null && !jsonObj.get("standardDeviation").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("standardDeviation"));
      }
      // validate the optional field `startOfYearCostBasis`
      if (jsonObj.get("startOfYearCostBasis") != null && !jsonObj.get("startOfYearCostBasis").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("startOfYearCostBasis"));
      }
      // validate the optional field `startOfYearMarketValue`
      if (jsonObj.get("startOfYearMarketValue") != null && !jsonObj.get("startOfYearMarketValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("startOfYearMarketValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ICorporationRealEstateAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ICorporationRealEstateAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ICorporationRealEstateAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ICorporationRealEstateAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<ICorporationRealEstateAsset>() {
           @Override
           public void write(JsonWriter out, ICorporationRealEstateAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ICorporationRealEstateAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ICorporationRealEstateAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ICorporationRealEstateAsset
   * @throws IOException if the JSON string is invalid with respect to ICorporationRealEstateAsset
   */
  public static ICorporationRealEstateAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ICorporationRealEstateAsset.class);
  }

  /**
   * Convert an instance of ICorporationRealEstateAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

