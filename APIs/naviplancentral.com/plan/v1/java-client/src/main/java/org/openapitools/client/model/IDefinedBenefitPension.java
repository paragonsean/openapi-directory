/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.IOptionalFieldBenefitCurrencyWithGrowth;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IDefinedBenefitPension
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IDefinedBenefitPension {
  public static final String SERIALIZED_NAME_BENEFIT = "benefit";
  @SerializedName(SERIALIZED_NAME_BENEFIT)
  private IOptionalFieldBenefitCurrencyWithGrowth benefit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_BENEFIT_FORMULA = "isBenefitFormula";
  @SerializedName(SERIALIZED_NAME_IS_BENEFIT_FORMULA)
  private Boolean isBenefitFormula;

  public static final String SERIALIZED_NAME_IS_BENEFIT_INTEGRATED_WITH_CPP_QPP = "isBenefitIntegratedWithCppQpp";
  @SerializedName(SERIALIZED_NAME_IS_BENEFIT_INTEGRATED_WITH_CPP_QPP)
  private Boolean isBenefitIntegratedWithCppQpp;

  public static final String SERIALIZED_NAME_IS_FORMULA_INTEGRATED_WITH_CPP_QPP = "isFormulaIntegratedWithCppQpp";
  @SerializedName(SERIALIZED_NAME_IS_FORMULA_INTEGRATED_WITH_CPP_QPP)
  private Boolean isFormulaIntegratedWithCppQpp;

  /**
   * Gets or Sets owner
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_PENSION_TYPE = "pensionType";
  @SerializedName(SERIALIZED_NAME_PENSION_TYPE)
  private String pensionType;

  public static final String SERIALIZED_NAME_PERCENT_PAYABLE_TO_SURVIVOR = "percentPayableToSurvivor";
  @SerializedName(SERIALIZED_NAME_PERCENT_PAYABLE_TO_SURVIVOR)
  private Percent percentPayableToSurvivor;

  public static final String SERIALIZED_NAME_PROJECTED_YEARS_OF_SERVICE = "projectedYearsOfService";
  @SerializedName(SERIALIZED_NAME_PROJECTED_YEARS_OF_SERVICE)
  private Integer projectedYearsOfService;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Date startDate;

  public IDefinedBenefitPension() {
  }

  public IDefinedBenefitPension(
     String description, 
     Boolean isBenefitFormula, 
     Boolean isBenefitIntegratedWithCppQpp, 
     Boolean isFormulaIntegratedWithCppQpp, 
     OwnerEnum owner, 
     String pensionType, 
     Integer projectedYearsOfService
  ) {
    this();
    this.description = description;
    this.isBenefitFormula = isBenefitFormula;
    this.isBenefitIntegratedWithCppQpp = isBenefitIntegratedWithCppQpp;
    this.isFormulaIntegratedWithCppQpp = isFormulaIntegratedWithCppQpp;
    this.owner = owner;
    this.pensionType = pensionType;
    this.projectedYearsOfService = projectedYearsOfService;
  }

  public IDefinedBenefitPension benefit(IOptionalFieldBenefitCurrencyWithGrowth benefit) {
    this.benefit = benefit;
    return this;
  }

  /**
   * Get benefit
   * @return benefit
   */
  @javax.annotation.Nullable
  public IOptionalFieldBenefitCurrencyWithGrowth getBenefit() {
    return benefit;
  }

  public void setBenefit(IOptionalFieldBenefitCurrencyWithGrowth benefit) {
    this.benefit = benefit;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get isBenefitFormula
   * @return isBenefitFormula
   */
  @javax.annotation.Nullable
  public Boolean getIsBenefitFormula() {
    return isBenefitFormula;
  }



  /**
   * Get isBenefitIntegratedWithCppQpp
   * @return isBenefitIntegratedWithCppQpp
   */
  @javax.annotation.Nullable
  public Boolean getIsBenefitIntegratedWithCppQpp() {
    return isBenefitIntegratedWithCppQpp;
  }



  /**
   * Get isFormulaIntegratedWithCppQpp
   * @return isFormulaIntegratedWithCppQpp
   */
  @javax.annotation.Nullable
  public Boolean getIsFormulaIntegratedWithCppQpp() {
    return isFormulaIntegratedWithCppQpp;
  }



  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }



  /**
   * Get pensionType
   * @return pensionType
   */
  @javax.annotation.Nullable
  public String getPensionType() {
    return pensionType;
  }



  public IDefinedBenefitPension percentPayableToSurvivor(Percent percentPayableToSurvivor) {
    this.percentPayableToSurvivor = percentPayableToSurvivor;
    return this;
  }

  /**
   * Get percentPayableToSurvivor
   * @return percentPayableToSurvivor
   */
  @javax.annotation.Nullable
  public Percent getPercentPayableToSurvivor() {
    return percentPayableToSurvivor;
  }

  public void setPercentPayableToSurvivor(Percent percentPayableToSurvivor) {
    this.percentPayableToSurvivor = percentPayableToSurvivor;
  }


  /**
   * Get projectedYearsOfService
   * @return projectedYearsOfService
   */
  @javax.annotation.Nullable
  public Integer getProjectedYearsOfService() {
    return projectedYearsOfService;
  }



  public IDefinedBenefitPension startDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public Date getStartDate() {
    return startDate;
  }

  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDefinedBenefitPension idefinedBenefitPension = (IDefinedBenefitPension) o;
    return Objects.equals(this.benefit, idefinedBenefitPension.benefit) &&
        Objects.equals(this.description, idefinedBenefitPension.description) &&
        Objects.equals(this.isBenefitFormula, idefinedBenefitPension.isBenefitFormula) &&
        Objects.equals(this.isBenefitIntegratedWithCppQpp, idefinedBenefitPension.isBenefitIntegratedWithCppQpp) &&
        Objects.equals(this.isFormulaIntegratedWithCppQpp, idefinedBenefitPension.isFormulaIntegratedWithCppQpp) &&
        Objects.equals(this.owner, idefinedBenefitPension.owner) &&
        Objects.equals(this.pensionType, idefinedBenefitPension.pensionType) &&
        Objects.equals(this.percentPayableToSurvivor, idefinedBenefitPension.percentPayableToSurvivor) &&
        Objects.equals(this.projectedYearsOfService, idefinedBenefitPension.projectedYearsOfService) &&
        Objects.equals(this.startDate, idefinedBenefitPension.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefit, description, isBenefitFormula, isBenefitIntegratedWithCppQpp, isFormulaIntegratedWithCppQpp, owner, pensionType, percentPayableToSurvivor, projectedYearsOfService, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDefinedBenefitPension {\n");
    sb.append("    benefit: ").append(toIndentedString(benefit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isBenefitFormula: ").append(toIndentedString(isBenefitFormula)).append("\n");
    sb.append("    isBenefitIntegratedWithCppQpp: ").append(toIndentedString(isBenefitIntegratedWithCppQpp)).append("\n");
    sb.append("    isFormulaIntegratedWithCppQpp: ").append(toIndentedString(isFormulaIntegratedWithCppQpp)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    pensionType: ").append(toIndentedString(pensionType)).append("\n");
    sb.append("    percentPayableToSurvivor: ").append(toIndentedString(percentPayableToSurvivor)).append("\n");
    sb.append("    projectedYearsOfService: ").append(toIndentedString(projectedYearsOfService)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefit");
    openapiFields.add("description");
    openapiFields.add("isBenefitFormula");
    openapiFields.add("isBenefitIntegratedWithCppQpp");
    openapiFields.add("isFormulaIntegratedWithCppQpp");
    openapiFields.add("owner");
    openapiFields.add("pensionType");
    openapiFields.add("percentPayableToSurvivor");
    openapiFields.add("projectedYearsOfService");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IDefinedBenefitPension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IDefinedBenefitPension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDefinedBenefitPension is not found in the empty JSON string", IDefinedBenefitPension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IDefinedBenefitPension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IDefinedBenefitPension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `benefit`
      if (jsonObj.get("benefit") != null && !jsonObj.get("benefit").isJsonNull()) {
        IOptionalFieldBenefitCurrencyWithGrowth.validateJsonElement(jsonObj.get("benefit"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("pensionType") != null && !jsonObj.get("pensionType").isJsonNull()) && !jsonObj.get("pensionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pensionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pensionType").toString()));
      }
      // validate the optional field `percentPayableToSurvivor`
      if (jsonObj.get("percentPayableToSurvivor") != null && !jsonObj.get("percentPayableToSurvivor").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("percentPayableToSurvivor"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDefinedBenefitPension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDefinedBenefitPension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDefinedBenefitPension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDefinedBenefitPension.class));

       return (TypeAdapter<T>) new TypeAdapter<IDefinedBenefitPension>() {
           @Override
           public void write(JsonWriter out, IDefinedBenefitPension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDefinedBenefitPension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IDefinedBenefitPension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IDefinedBenefitPension
   * @throws IOException if the JSON string is invalid with respect to IDefinedBenefitPension
   */
  public static IDefinedBenefitPension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDefinedBenefitPension.class);
  }

  /**
   * Convert an instance of IDefinedBenefitPension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

