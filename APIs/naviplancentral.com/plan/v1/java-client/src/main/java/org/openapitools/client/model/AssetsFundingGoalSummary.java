/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IAccumulationCategoryData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetsFundingGoalSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetsFundingGoalSummary {
  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private IAccumulationCategoryData contributions;

  public static final String SERIALIZED_NAME_END_OF_YEAR_ASSETS = "endOfYearAssets";
  @SerializedName(SERIALIZED_NAME_END_OF_YEAR_ASSETS)
  private IAccumulationCategoryData endOfYearAssets;

  public static final String SERIALIZED_NAME_GOAL_TYPE = "goalType";
  @SerializedName(SERIALIZED_NAME_GOAL_TYPE)
  private String goalType;

  public static final String SERIALIZED_NAME_GROWTH_AND_REINVESTMENTS = "growthAndReinvestments";
  @SerializedName(SERIALIZED_NAME_GROWTH_AND_REINVESTMENTS)
  private IAccumulationCategoryData growthAndReinvestments;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private Integer identifier;

  public static final String SERIALIZED_NAME_NET_WITHDRAWALS = "netWithdrawals";
  @SerializedName(SERIALIZED_NAME_NET_WITHDRAWALS)
  private Double netWithdrawals;

  public static final String SERIALIZED_NAME_WITHDRAWALS = "withdrawals";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS)
  private IAccumulationCategoryData withdrawals;

  public AssetsFundingGoalSummary() {
  }

  public AssetsFundingGoalSummary contributions(IAccumulationCategoryData contributions) {
    this.contributions = contributions;
    return this;
  }

  /**
   * Get contributions
   * @return contributions
   */
  @javax.annotation.Nullable
  public IAccumulationCategoryData getContributions() {
    return contributions;
  }

  public void setContributions(IAccumulationCategoryData contributions) {
    this.contributions = contributions;
  }


  public AssetsFundingGoalSummary endOfYearAssets(IAccumulationCategoryData endOfYearAssets) {
    this.endOfYearAssets = endOfYearAssets;
    return this;
  }

  /**
   * Get endOfYearAssets
   * @return endOfYearAssets
   */
  @javax.annotation.Nullable
  public IAccumulationCategoryData getEndOfYearAssets() {
    return endOfYearAssets;
  }

  public void setEndOfYearAssets(IAccumulationCategoryData endOfYearAssets) {
    this.endOfYearAssets = endOfYearAssets;
  }


  public AssetsFundingGoalSummary goalType(String goalType) {
    this.goalType = goalType;
    return this;
  }

  /**
   * Get goalType
   * @return goalType
   */
  @javax.annotation.Nullable
  public String getGoalType() {
    return goalType;
  }

  public void setGoalType(String goalType) {
    this.goalType = goalType;
  }


  public AssetsFundingGoalSummary growthAndReinvestments(IAccumulationCategoryData growthAndReinvestments) {
    this.growthAndReinvestments = growthAndReinvestments;
    return this;
  }

  /**
   * Get growthAndReinvestments
   * @return growthAndReinvestments
   */
  @javax.annotation.Nullable
  public IAccumulationCategoryData getGrowthAndReinvestments() {
    return growthAndReinvestments;
  }

  public void setGrowthAndReinvestments(IAccumulationCategoryData growthAndReinvestments) {
    this.growthAndReinvestments = growthAndReinvestments;
  }


  public AssetsFundingGoalSummary identifier(Integer identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public Integer getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Integer identifier) {
    this.identifier = identifier;
  }


  public AssetsFundingGoalSummary netWithdrawals(Double netWithdrawals) {
    this.netWithdrawals = netWithdrawals;
    return this;
  }

  /**
   * Get netWithdrawals
   * @return netWithdrawals
   */
  @javax.annotation.Nullable
  public Double getNetWithdrawals() {
    return netWithdrawals;
  }

  public void setNetWithdrawals(Double netWithdrawals) {
    this.netWithdrawals = netWithdrawals;
  }


  public AssetsFundingGoalSummary withdrawals(IAccumulationCategoryData withdrawals) {
    this.withdrawals = withdrawals;
    return this;
  }

  /**
   * Get withdrawals
   * @return withdrawals
   */
  @javax.annotation.Nullable
  public IAccumulationCategoryData getWithdrawals() {
    return withdrawals;
  }

  public void setWithdrawals(IAccumulationCategoryData withdrawals) {
    this.withdrawals = withdrawals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetsFundingGoalSummary assetsFundingGoalSummary = (AssetsFundingGoalSummary) o;
    return Objects.equals(this.contributions, assetsFundingGoalSummary.contributions) &&
        Objects.equals(this.endOfYearAssets, assetsFundingGoalSummary.endOfYearAssets) &&
        Objects.equals(this.goalType, assetsFundingGoalSummary.goalType) &&
        Objects.equals(this.growthAndReinvestments, assetsFundingGoalSummary.growthAndReinvestments) &&
        Objects.equals(this.identifier, assetsFundingGoalSummary.identifier) &&
        Objects.equals(this.netWithdrawals, assetsFundingGoalSummary.netWithdrawals) &&
        Objects.equals(this.withdrawals, assetsFundingGoalSummary.withdrawals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributions, endOfYearAssets, goalType, growthAndReinvestments, identifier, netWithdrawals, withdrawals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetsFundingGoalSummary {\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    endOfYearAssets: ").append(toIndentedString(endOfYearAssets)).append("\n");
    sb.append("    goalType: ").append(toIndentedString(goalType)).append("\n");
    sb.append("    growthAndReinvestments: ").append(toIndentedString(growthAndReinvestments)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    netWithdrawals: ").append(toIndentedString(netWithdrawals)).append("\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contributions");
    openapiFields.add("endOfYearAssets");
    openapiFields.add("goalType");
    openapiFields.add("growthAndReinvestments");
    openapiFields.add("identifier");
    openapiFields.add("netWithdrawals");
    openapiFields.add("withdrawals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetsFundingGoalSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetsFundingGoalSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetsFundingGoalSummary is not found in the empty JSON string", AssetsFundingGoalSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetsFundingGoalSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetsFundingGoalSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contributions`
      if (jsonObj.get("contributions") != null && !jsonObj.get("contributions").isJsonNull()) {
        IAccumulationCategoryData.validateJsonElement(jsonObj.get("contributions"));
      }
      // validate the optional field `endOfYearAssets`
      if (jsonObj.get("endOfYearAssets") != null && !jsonObj.get("endOfYearAssets").isJsonNull()) {
        IAccumulationCategoryData.validateJsonElement(jsonObj.get("endOfYearAssets"));
      }
      if ((jsonObj.get("goalType") != null && !jsonObj.get("goalType").isJsonNull()) && !jsonObj.get("goalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalType").toString()));
      }
      // validate the optional field `growthAndReinvestments`
      if (jsonObj.get("growthAndReinvestments") != null && !jsonObj.get("growthAndReinvestments").isJsonNull()) {
        IAccumulationCategoryData.validateJsonElement(jsonObj.get("growthAndReinvestments"));
      }
      // validate the optional field `withdrawals`
      if (jsonObj.get("withdrawals") != null && !jsonObj.get("withdrawals").isJsonNull()) {
        IAccumulationCategoryData.validateJsonElement(jsonObj.get("withdrawals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetsFundingGoalSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetsFundingGoalSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetsFundingGoalSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetsFundingGoalSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetsFundingGoalSummary>() {
           @Override
           public void write(JsonWriter out, AssetsFundingGoalSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetsFundingGoalSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetsFundingGoalSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetsFundingGoalSummary
   * @throws IOException if the JSON string is invalid with respect to AssetsFundingGoalSummary
   */
  public static AssetsFundingGoalSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetsFundingGoalSummary.class);
  }

  /**
   * Convert an instance of AssetsFundingGoalSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

