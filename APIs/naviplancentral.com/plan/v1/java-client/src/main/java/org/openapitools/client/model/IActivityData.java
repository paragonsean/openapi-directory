/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CurrencyWithGrowth;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.IFormattedFrequency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IActivityData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IActivityData {
  public static final String SERIALIZED_NAME_AMOUNT_WITH_GROWTH = "amountWithGrowth";
  @SerializedName(SERIALIZED_NAME_AMOUNT_WITH_GROWTH)
  private CurrencyWithGrowth amountWithGrowth;

  public static final String SERIALIZED_NAME_APPLICABLE_DATE_RANGE = "applicableDateRange";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_DATE_RANGE)
  private FormattedDateRange applicableDateRange;

  public static final String SERIALIZED_NAME_DIRECT_TO = "directTo";
  @SerializedName(SERIALIZED_NAME_DIRECT_TO)
  private String directTo;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private IFormattedFrequency frequency;

  public IActivityData() {
  }

  public IActivityData(
     String directTo
  ) {
    this();
    this.directTo = directTo;
  }

  public IActivityData amountWithGrowth(CurrencyWithGrowth amountWithGrowth) {
    this.amountWithGrowth = amountWithGrowth;
    return this;
  }

  /**
   * Get amountWithGrowth
   * @return amountWithGrowth
   */
  @javax.annotation.Nullable
  public CurrencyWithGrowth getAmountWithGrowth() {
    return amountWithGrowth;
  }

  public void setAmountWithGrowth(CurrencyWithGrowth amountWithGrowth) {
    this.amountWithGrowth = amountWithGrowth;
  }


  public IActivityData applicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
    return this;
  }

  /**
   * Get applicableDateRange
   * @return applicableDateRange
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableDateRange() {
    return applicableDateRange;
  }

  public void setApplicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
  }


  /**
   * Get directTo
   * @return directTo
   */
  @javax.annotation.Nullable
  public String getDirectTo() {
    return directTo;
  }



  public IActivityData frequency(IFormattedFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public IFormattedFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(IFormattedFrequency frequency) {
    this.frequency = frequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IActivityData iactivityData = (IActivityData) o;
    return Objects.equals(this.amountWithGrowth, iactivityData.amountWithGrowth) &&
        Objects.equals(this.applicableDateRange, iactivityData.applicableDateRange) &&
        Objects.equals(this.directTo, iactivityData.directTo) &&
        Objects.equals(this.frequency, iactivityData.frequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountWithGrowth, applicableDateRange, directTo, frequency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IActivityData {\n");
    sb.append("    amountWithGrowth: ").append(toIndentedString(amountWithGrowth)).append("\n");
    sb.append("    applicableDateRange: ").append(toIndentedString(applicableDateRange)).append("\n");
    sb.append("    directTo: ").append(toIndentedString(directTo)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountWithGrowth");
    openapiFields.add("applicableDateRange");
    openapiFields.add("directTo");
    openapiFields.add("frequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IActivityData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IActivityData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IActivityData is not found in the empty JSON string", IActivityData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IActivityData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IActivityData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amountWithGrowth`
      if (jsonObj.get("amountWithGrowth") != null && !jsonObj.get("amountWithGrowth").isJsonNull()) {
        CurrencyWithGrowth.validateJsonElement(jsonObj.get("amountWithGrowth"));
      }
      // validate the optional field `applicableDateRange`
      if (jsonObj.get("applicableDateRange") != null && !jsonObj.get("applicableDateRange").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableDateRange"));
      }
      if ((jsonObj.get("directTo") != null && !jsonObj.get("directTo").isJsonNull()) && !jsonObj.get("directTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directTo").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        IFormattedFrequency.validateJsonElement(jsonObj.get("frequency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IActivityData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IActivityData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IActivityData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IActivityData.class));

       return (TypeAdapter<T>) new TypeAdapter<IActivityData>() {
           @Override
           public void write(JsonWriter out, IActivityData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IActivityData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IActivityData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IActivityData
   * @throws IOException if the JSON string is invalid with respect to IActivityData
   */
  public static IActivityData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IActivityData.class);
  }

  /**
   * Convert an instance of IActivityData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

