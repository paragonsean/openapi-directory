/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.INetWorthCategory;
import org.openapitools.client.model.IValueDescriptionPairCurrency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRetirementAssetCategories
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IRetirementAssetCategories {
  public static final String SERIALIZED_NAME_ALL_ASSETS = "allAssets";
  @SerializedName(SERIALIZED_NAME_ALL_ASSETS)
  private List<IValueDescriptionPairCurrency> allAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_QUALIFIED_ANNUITIES = "nonQualifiedAnnuities";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_ANNUITIES)
  private INetWorthCategory nonQualifiedAnnuities;

  public static final String SERIALIZED_NAME_NON_QUALIFIED_ASSETS = "nonQualifiedAssets";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_ASSETS)
  private INetWorthCategory nonQualifiedAssets;

  public static final String SERIALIZED_NAME_QUALIFIED_ANNUITIES = "qualifiedAnnuities";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_ANNUITIES)
  private INetWorthCategory qualifiedAnnuities;

  public static final String SERIALIZED_NAME_QUALIFIED_ASSETS = "qualifiedAssets";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_ASSETS)
  private INetWorthCategory qualifiedAssets;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "totalAssets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  private INetWorthCategory totalAssets;

  public IRetirementAssetCategories() {
  }

  public IRetirementAssetCategories(
     List<IValueDescriptionPairCurrency> allAssets
  ) {
    this();
    this.allAssets = allAssets;
  }

  /**
   * Get allAssets
   * @return allAssets
   */
  @javax.annotation.Nullable
  public List<IValueDescriptionPairCurrency> getAllAssets() {
    return allAssets;
  }



  public IRetirementAssetCategories nonQualifiedAnnuities(INetWorthCategory nonQualifiedAnnuities) {
    this.nonQualifiedAnnuities = nonQualifiedAnnuities;
    return this;
  }

  /**
   * Get nonQualifiedAnnuities
   * @return nonQualifiedAnnuities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getNonQualifiedAnnuities() {
    return nonQualifiedAnnuities;
  }

  public void setNonQualifiedAnnuities(INetWorthCategory nonQualifiedAnnuities) {
    this.nonQualifiedAnnuities = nonQualifiedAnnuities;
  }


  public IRetirementAssetCategories nonQualifiedAssets(INetWorthCategory nonQualifiedAssets) {
    this.nonQualifiedAssets = nonQualifiedAssets;
    return this;
  }

  /**
   * Get nonQualifiedAssets
   * @return nonQualifiedAssets
   */
  @javax.annotation.Nullable
  public INetWorthCategory getNonQualifiedAssets() {
    return nonQualifiedAssets;
  }

  public void setNonQualifiedAssets(INetWorthCategory nonQualifiedAssets) {
    this.nonQualifiedAssets = nonQualifiedAssets;
  }


  public IRetirementAssetCategories qualifiedAnnuities(INetWorthCategory qualifiedAnnuities) {
    this.qualifiedAnnuities = qualifiedAnnuities;
    return this;
  }

  /**
   * Get qualifiedAnnuities
   * @return qualifiedAnnuities
   */
  @javax.annotation.Nullable
  public INetWorthCategory getQualifiedAnnuities() {
    return qualifiedAnnuities;
  }

  public void setQualifiedAnnuities(INetWorthCategory qualifiedAnnuities) {
    this.qualifiedAnnuities = qualifiedAnnuities;
  }


  public IRetirementAssetCategories qualifiedAssets(INetWorthCategory qualifiedAssets) {
    this.qualifiedAssets = qualifiedAssets;
    return this;
  }

  /**
   * Get qualifiedAssets
   * @return qualifiedAssets
   */
  @javax.annotation.Nullable
  public INetWorthCategory getQualifiedAssets() {
    return qualifiedAssets;
  }

  public void setQualifiedAssets(INetWorthCategory qualifiedAssets) {
    this.qualifiedAssets = qualifiedAssets;
  }


  public IRetirementAssetCategories totalAssets(INetWorthCategory totalAssets) {
    this.totalAssets = totalAssets;
    return this;
  }

  /**
   * Get totalAssets
   * @return totalAssets
   */
  @javax.annotation.Nullable
  public INetWorthCategory getTotalAssets() {
    return totalAssets;
  }

  public void setTotalAssets(INetWorthCategory totalAssets) {
    this.totalAssets = totalAssets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRetirementAssetCategories iretirementAssetCategories = (IRetirementAssetCategories) o;
    return Objects.equals(this.allAssets, iretirementAssetCategories.allAssets) &&
        Objects.equals(this.nonQualifiedAnnuities, iretirementAssetCategories.nonQualifiedAnnuities) &&
        Objects.equals(this.nonQualifiedAssets, iretirementAssetCategories.nonQualifiedAssets) &&
        Objects.equals(this.qualifiedAnnuities, iretirementAssetCategories.qualifiedAnnuities) &&
        Objects.equals(this.qualifiedAssets, iretirementAssetCategories.qualifiedAssets) &&
        Objects.equals(this.totalAssets, iretirementAssetCategories.totalAssets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allAssets, nonQualifiedAnnuities, nonQualifiedAssets, qualifiedAnnuities, qualifiedAssets, totalAssets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRetirementAssetCategories {\n");
    sb.append("    allAssets: ").append(toIndentedString(allAssets)).append("\n");
    sb.append("    nonQualifiedAnnuities: ").append(toIndentedString(nonQualifiedAnnuities)).append("\n");
    sb.append("    nonQualifiedAssets: ").append(toIndentedString(nonQualifiedAssets)).append("\n");
    sb.append("    qualifiedAnnuities: ").append(toIndentedString(qualifiedAnnuities)).append("\n");
    sb.append("    qualifiedAssets: ").append(toIndentedString(qualifiedAssets)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allAssets");
    openapiFields.add("nonQualifiedAnnuities");
    openapiFields.add("nonQualifiedAssets");
    openapiFields.add("qualifiedAnnuities");
    openapiFields.add("qualifiedAssets");
    openapiFields.add("totalAssets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRetirementAssetCategories
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRetirementAssetCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRetirementAssetCategories is not found in the empty JSON string", IRetirementAssetCategories.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRetirementAssetCategories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRetirementAssetCategories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allAssets") != null && !jsonObj.get("allAssets").isJsonNull()) {
        JsonArray jsonArrayallAssets = jsonObj.getAsJsonArray("allAssets");
        if (jsonArrayallAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allAssets` to be an array in the JSON string but got `%s`", jsonObj.get("allAssets").toString()));
          }

          // validate the optional field `allAssets` (array)
          for (int i = 0; i < jsonArrayallAssets.size(); i++) {
            IValueDescriptionPairCurrency.validateJsonElement(jsonArrayallAssets.get(i));
          };
        }
      }
      // validate the optional field `nonQualifiedAnnuities`
      if (jsonObj.get("nonQualifiedAnnuities") != null && !jsonObj.get("nonQualifiedAnnuities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("nonQualifiedAnnuities"));
      }
      // validate the optional field `nonQualifiedAssets`
      if (jsonObj.get("nonQualifiedAssets") != null && !jsonObj.get("nonQualifiedAssets").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("nonQualifiedAssets"));
      }
      // validate the optional field `qualifiedAnnuities`
      if (jsonObj.get("qualifiedAnnuities") != null && !jsonObj.get("qualifiedAnnuities").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("qualifiedAnnuities"));
      }
      // validate the optional field `qualifiedAssets`
      if (jsonObj.get("qualifiedAssets") != null && !jsonObj.get("qualifiedAssets").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("qualifiedAssets"));
      }
      // validate the optional field `totalAssets`
      if (jsonObj.get("totalAssets") != null && !jsonObj.get("totalAssets").isJsonNull()) {
        INetWorthCategory.validateJsonElement(jsonObj.get("totalAssets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRetirementAssetCategories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRetirementAssetCategories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRetirementAssetCategories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRetirementAssetCategories.class));

       return (TypeAdapter<T>) new TypeAdapter<IRetirementAssetCategories>() {
           @Override
           public void write(JsonWriter out, IRetirementAssetCategories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRetirementAssetCategories read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRetirementAssetCategories given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRetirementAssetCategories
   * @throws IOException if the JSON string is invalid with respect to IRetirementAssetCategories
   */
  public static IRetirementAssetCategories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRetirementAssetCategories.class);
  }

  /**
   * Convert an instance of IRetirementAssetCategories to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

