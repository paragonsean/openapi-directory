/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments {
  public static final String SERIALIZED_NAME_CLIENT_RETIREMENT_AGE = "clientRetirementAge";
  @SerializedName(SERIALIZED_NAME_CLIENT_RETIREMENT_AGE)
  private Double clientRetirementAge;

  public static final String SERIALIZED_NAME_CO_CLIENT_RETIREMENT_AGE = "coClientRetirementAge";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_RETIREMENT_AGE)
  private Double coClientRetirementAge;

  public static final String SERIALIZED_NAME_DISCRETIONARY_EXPENSE_COVERAGE = "discretionaryExpenseCoverage";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_EXPENSE_COVERAGE)
  private Double discretionaryExpenseCoverage;

  public static final String SERIALIZED_NAME_FIXED_EXPENSE_COVERAGE = "fixedExpenseCoverage";
  @SerializedName(SERIALIZED_NAME_FIXED_EXPENSE_COVERAGE)
  private Double fixedExpenseCoverage;

  public static final String SERIALIZED_NAME_LUMP_SUM_CONTRIBUTION = "lumpSumContribution";
  @SerializedName(SERIALIZED_NAME_LUMP_SUM_CONTRIBUTION)
  private Double lumpSumContribution;

  public static final String SERIALIZED_NAME_LUMP_SUM_DATE = "lumpSumDate";
  @SerializedName(SERIALIZED_NAME_LUMP_SUM_DATE)
  private OffsetDateTime lumpSumDate;

  public static final String SERIALIZED_NAME_MONTHLY_SAVINGS_CONTRIBUTION = "monthlySavingsContribution";
  @SerializedName(SERIALIZED_NAME_MONTHLY_SAVINGS_CONTRIBUTION)
  private Double monthlySavingsContribution;

  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments() {
  }

  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments clientRetirementAge(Double clientRetirementAge) {
    this.clientRetirementAge = clientRetirementAge;
    return this;
  }

  /**
   * Get clientRetirementAge
   * @return clientRetirementAge
   */
  @javax.annotation.Nullable
  public Double getClientRetirementAge() {
    return clientRetirementAge;
  }

  public void setClientRetirementAge(Double clientRetirementAge) {
    this.clientRetirementAge = clientRetirementAge;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments coClientRetirementAge(Double coClientRetirementAge) {
    this.coClientRetirementAge = coClientRetirementAge;
    return this;
  }

  /**
   * Get coClientRetirementAge
   * @return coClientRetirementAge
   */
  @javax.annotation.Nullable
  public Double getCoClientRetirementAge() {
    return coClientRetirementAge;
  }

  public void setCoClientRetirementAge(Double coClientRetirementAge) {
    this.coClientRetirementAge = coClientRetirementAge;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments discretionaryExpenseCoverage(Double discretionaryExpenseCoverage) {
    this.discretionaryExpenseCoverage = discretionaryExpenseCoverage;
    return this;
  }

  /**
   * Get discretionaryExpenseCoverage
   * @return discretionaryExpenseCoverage
   */
  @javax.annotation.Nullable
  public Double getDiscretionaryExpenseCoverage() {
    return discretionaryExpenseCoverage;
  }

  public void setDiscretionaryExpenseCoverage(Double discretionaryExpenseCoverage) {
    this.discretionaryExpenseCoverage = discretionaryExpenseCoverage;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments fixedExpenseCoverage(Double fixedExpenseCoverage) {
    this.fixedExpenseCoverage = fixedExpenseCoverage;
    return this;
  }

  /**
   * Get fixedExpenseCoverage
   * @return fixedExpenseCoverage
   */
  @javax.annotation.Nullable
  public Double getFixedExpenseCoverage() {
    return fixedExpenseCoverage;
  }

  public void setFixedExpenseCoverage(Double fixedExpenseCoverage) {
    this.fixedExpenseCoverage = fixedExpenseCoverage;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments lumpSumContribution(Double lumpSumContribution) {
    this.lumpSumContribution = lumpSumContribution;
    return this;
  }

  /**
   * Get lumpSumContribution
   * @return lumpSumContribution
   */
  @javax.annotation.Nullable
  public Double getLumpSumContribution() {
    return lumpSumContribution;
  }

  public void setLumpSumContribution(Double lumpSumContribution) {
    this.lumpSumContribution = lumpSumContribution;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments lumpSumDate(OffsetDateTime lumpSumDate) {
    this.lumpSumDate = lumpSumDate;
    return this;
  }

  /**
   * Get lumpSumDate
   * @return lumpSumDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLumpSumDate() {
    return lumpSumDate;
  }

  public void setLumpSumDate(OffsetDateTime lumpSumDate) {
    this.lumpSumDate = lumpSumDate;
  }


  public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments monthlySavingsContribution(Double monthlySavingsContribution) {
    this.monthlySavingsContribution = monthlySavingsContribution;
    return this;
  }

  /**
   * Get monthlySavingsContribution
   * @return monthlySavingsContribution
   */
  @javax.annotation.Nullable
  public Double getMonthlySavingsContribution() {
    return monthlySavingsContribution;
  }

  public void setMonthlySavingsContribution(Double monthlySavingsContribution) {
    this.monthlySavingsContribution = monthlySavingsContribution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments advicentDomainLogicGoalWhatIfRetirementGoalAdjustments = (AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments) o;
    return Objects.equals(this.clientRetirementAge, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.clientRetirementAge) &&
        Objects.equals(this.coClientRetirementAge, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.coClientRetirementAge) &&
        Objects.equals(this.discretionaryExpenseCoverage, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.discretionaryExpenseCoverage) &&
        Objects.equals(this.fixedExpenseCoverage, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.fixedExpenseCoverage) &&
        Objects.equals(this.lumpSumContribution, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.lumpSumContribution) &&
        Objects.equals(this.lumpSumDate, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.lumpSumDate) &&
        Objects.equals(this.monthlySavingsContribution, advicentDomainLogicGoalWhatIfRetirementGoalAdjustments.monthlySavingsContribution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRetirementAge, coClientRetirementAge, discretionaryExpenseCoverage, fixedExpenseCoverage, lumpSumContribution, lumpSumDate, monthlySavingsContribution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments {\n");
    sb.append("    clientRetirementAge: ").append(toIndentedString(clientRetirementAge)).append("\n");
    sb.append("    coClientRetirementAge: ").append(toIndentedString(coClientRetirementAge)).append("\n");
    sb.append("    discretionaryExpenseCoverage: ").append(toIndentedString(discretionaryExpenseCoverage)).append("\n");
    sb.append("    fixedExpenseCoverage: ").append(toIndentedString(fixedExpenseCoverage)).append("\n");
    sb.append("    lumpSumContribution: ").append(toIndentedString(lumpSumContribution)).append("\n");
    sb.append("    lumpSumDate: ").append(toIndentedString(lumpSumDate)).append("\n");
    sb.append("    monthlySavingsContribution: ").append(toIndentedString(monthlySavingsContribution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientRetirementAge");
    openapiFields.add("coClientRetirementAge");
    openapiFields.add("discretionaryExpenseCoverage");
    openapiFields.add("fixedExpenseCoverage");
    openapiFields.add("lumpSumContribution");
    openapiFields.add("lumpSumDate");
    openapiFields.add("monthlySavingsContribution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments is not found in the empty JSON string", AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments>() {
           @Override
           public void write(JsonWriter out, AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments
   * @throws IOException if the JSON string is invalid with respect to AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments
   */
  public static AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.class);
  }

  /**
   * Convert an instance of AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

