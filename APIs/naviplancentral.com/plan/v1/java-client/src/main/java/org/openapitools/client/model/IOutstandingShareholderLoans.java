/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IOutstandingShareholderLoans
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IOutstandingShareholderLoans {
  public static final String SERIALIZED_NAME_CLIENT_AMOUNT = "clientAmount";
  @SerializedName(SERIALIZED_NAME_CLIENT_AMOUNT)
  private Currency clientAmount;

  public static final String SERIALIZED_NAME_CO_CLIENT_AMOUNT = "coClientAmount";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_AMOUNT)
  private Currency coClientAmount;

  public static final String SERIALIZED_NAME_OTHER_AMOUNT = "otherAmount";
  @SerializedName(SERIALIZED_NAME_OTHER_AMOUNT)
  private Currency otherAmount;

  public IOutstandingShareholderLoans() {
  }

  public IOutstandingShareholderLoans clientAmount(Currency clientAmount) {
    this.clientAmount = clientAmount;
    return this;
  }

  /**
   * Get clientAmount
   * @return clientAmount
   */
  @javax.annotation.Nullable
  public Currency getClientAmount() {
    return clientAmount;
  }

  public void setClientAmount(Currency clientAmount) {
    this.clientAmount = clientAmount;
  }


  public IOutstandingShareholderLoans coClientAmount(Currency coClientAmount) {
    this.coClientAmount = coClientAmount;
    return this;
  }

  /**
   * Get coClientAmount
   * @return coClientAmount
   */
  @javax.annotation.Nullable
  public Currency getCoClientAmount() {
    return coClientAmount;
  }

  public void setCoClientAmount(Currency coClientAmount) {
    this.coClientAmount = coClientAmount;
  }


  public IOutstandingShareholderLoans otherAmount(Currency otherAmount) {
    this.otherAmount = otherAmount;
    return this;
  }

  /**
   * Get otherAmount
   * @return otherAmount
   */
  @javax.annotation.Nullable
  public Currency getOtherAmount() {
    return otherAmount;
  }

  public void setOtherAmount(Currency otherAmount) {
    this.otherAmount = otherAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IOutstandingShareholderLoans ioutstandingShareholderLoans = (IOutstandingShareholderLoans) o;
    return Objects.equals(this.clientAmount, ioutstandingShareholderLoans.clientAmount) &&
        Objects.equals(this.coClientAmount, ioutstandingShareholderLoans.coClientAmount) &&
        Objects.equals(this.otherAmount, ioutstandingShareholderLoans.otherAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAmount, coClientAmount, otherAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IOutstandingShareholderLoans {\n");
    sb.append("    clientAmount: ").append(toIndentedString(clientAmount)).append("\n");
    sb.append("    coClientAmount: ").append(toIndentedString(coClientAmount)).append("\n");
    sb.append("    otherAmount: ").append(toIndentedString(otherAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientAmount");
    openapiFields.add("coClientAmount");
    openapiFields.add("otherAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IOutstandingShareholderLoans
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IOutstandingShareholderLoans.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IOutstandingShareholderLoans is not found in the empty JSON string", IOutstandingShareholderLoans.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IOutstandingShareholderLoans.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IOutstandingShareholderLoans` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientAmount`
      if (jsonObj.get("clientAmount") != null && !jsonObj.get("clientAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("clientAmount"));
      }
      // validate the optional field `coClientAmount`
      if (jsonObj.get("coClientAmount") != null && !jsonObj.get("coClientAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("coClientAmount"));
      }
      // validate the optional field `otherAmount`
      if (jsonObj.get("otherAmount") != null && !jsonObj.get("otherAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("otherAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IOutstandingShareholderLoans.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IOutstandingShareholderLoans' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IOutstandingShareholderLoans> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IOutstandingShareholderLoans.class));

       return (TypeAdapter<T>) new TypeAdapter<IOutstandingShareholderLoans>() {
           @Override
           public void write(JsonWriter out, IOutstandingShareholderLoans value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IOutstandingShareholderLoans read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IOutstandingShareholderLoans given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IOutstandingShareholderLoans
   * @throws IOException if the JSON string is invalid with respect to IOutstandingShareholderLoans
   */
  public static IOutstandingShareholderLoans fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IOutstandingShareholderLoans.class);
  }

  /**
   * Convert an instance of IOutstandingShareholderLoans to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

