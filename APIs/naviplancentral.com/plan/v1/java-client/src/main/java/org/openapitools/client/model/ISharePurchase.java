/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormattedEnumTypePrivateCorporationShareType;
import org.openapitools.client.model.IActivityData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ISharePurchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ISharePurchase {
  public static final String SERIALIZED_NAME_ACTIVITY_DATA = "activityData";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATA)
  private IActivityData activityData;

  /**
   * Gets or Sets shareHolder
   */
  @JsonAdapter(ShareHolderEnum.Adapter.class)
  public enum ShareHolderEnum {
    UNDEFINED("Undefined"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    OTHER("Other");

    private String value;

    ShareHolderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareHolderEnum fromValue(String value) {
      for (ShareHolderEnum b : ShareHolderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareHolderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareHolderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareHolderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareHolderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareHolderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_HOLDER = "shareHolder";
  @SerializedName(SERIALIZED_NAME_SHARE_HOLDER)
  private ShareHolderEnum shareHolder;

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private Integer shareId;

  public static final String SERIALIZED_NAME_SHARE_TYPE = "shareType";
  @SerializedName(SERIALIZED_NAME_SHARE_TYPE)
  private FormattedEnumTypePrivateCorporationShareType shareType;

  public ISharePurchase() {
  }

  public ISharePurchase(
     ShareHolderEnum shareHolder, 
     Integer shareId
  ) {
    this();
    this.shareHolder = shareHolder;
    this.shareId = shareId;
  }

  public ISharePurchase activityData(IActivityData activityData) {
    this.activityData = activityData;
    return this;
  }

  /**
   * Get activityData
   * @return activityData
   */
  @javax.annotation.Nullable
  public IActivityData getActivityData() {
    return activityData;
  }

  public void setActivityData(IActivityData activityData) {
    this.activityData = activityData;
  }


  /**
   * Get shareHolder
   * @return shareHolder
   */
  @javax.annotation.Nullable
  public ShareHolderEnum getShareHolder() {
    return shareHolder;
  }



  /**
   * Get shareId
   * @return shareId
   */
  @javax.annotation.Nullable
  public Integer getShareId() {
    return shareId;
  }



  public ISharePurchase shareType(FormattedEnumTypePrivateCorporationShareType shareType) {
    this.shareType = shareType;
    return this;
  }

  /**
   * Get shareType
   * @return shareType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypePrivateCorporationShareType getShareType() {
    return shareType;
  }

  public void setShareType(FormattedEnumTypePrivateCorporationShareType shareType) {
    this.shareType = shareType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ISharePurchase isharePurchase = (ISharePurchase) o;
    return Objects.equals(this.activityData, isharePurchase.activityData) &&
        Objects.equals(this.shareHolder, isharePurchase.shareHolder) &&
        Objects.equals(this.shareId, isharePurchase.shareId) &&
        Objects.equals(this.shareType, isharePurchase.shareType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityData, shareHolder, shareId, shareType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ISharePurchase {\n");
    sb.append("    activityData: ").append(toIndentedString(activityData)).append("\n");
    sb.append("    shareHolder: ").append(toIndentedString(shareHolder)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    shareType: ").append(toIndentedString(shareType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityData");
    openapiFields.add("shareHolder");
    openapiFields.add("shareId");
    openapiFields.add("shareType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ISharePurchase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ISharePurchase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ISharePurchase is not found in the empty JSON string", ISharePurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ISharePurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ISharePurchase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activityData`
      if (jsonObj.get("activityData") != null && !jsonObj.get("activityData").isJsonNull()) {
        IActivityData.validateJsonElement(jsonObj.get("activityData"));
      }
      if ((jsonObj.get("shareHolder") != null && !jsonObj.get("shareHolder").isJsonNull()) && !jsonObj.get("shareHolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareHolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareHolder").toString()));
      }
      // validate the optional field `shareHolder`
      if (jsonObj.get("shareHolder") != null && !jsonObj.get("shareHolder").isJsonNull()) {
        ShareHolderEnum.validateJsonElement(jsonObj.get("shareHolder"));
      }
      // validate the optional field `shareType`
      if (jsonObj.get("shareType") != null && !jsonObj.get("shareType").isJsonNull()) {
        FormattedEnumTypePrivateCorporationShareType.validateJsonElement(jsonObj.get("shareType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ISharePurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ISharePurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ISharePurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ISharePurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<ISharePurchase>() {
           @Override
           public void write(JsonWriter out, ISharePurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ISharePurchase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ISharePurchase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ISharePurchase
   * @throws IOException if the JSON string is invalid with respect to ISharePurchase
   */
  public static ISharePurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ISharePurchase.class);
  }

  /**
   * Convert an instance of ISharePurchase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

