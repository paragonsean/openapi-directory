/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.FormattedEnumTypeFrequency;
import org.openapitools.client.model.GrowthRateValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IBusinessEntityActivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IBusinessEntityActivity {
  public static final String SERIALIZED_NAME_APPLICABLE_DATE_RANGE = "applicableDateRange";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_DATE_RANGE)
  private FormattedDateRange applicableDateRange;

  public static final String SERIALIZED_NAME_DISTRIBUTIONS = "distributions";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTIONS)
  private Currency distributions;

  public static final String SERIALIZED_NAME_EXPENSE = "expense";
  @SerializedName(SERIALIZED_NAME_EXPENSE)
  private Currency expense;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FormattedEnumTypeFrequency frequency;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private Currency income;

  public static final String SERIALIZED_NAME_INDEX_RATE = "indexRate";
  @SerializedName(SERIALIZED_NAME_INDEX_RATE)
  private GrowthRateValues indexRate;

  public IBusinessEntityActivity() {
  }

  public IBusinessEntityActivity applicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
    return this;
  }

  /**
   * Get applicableDateRange
   * @return applicableDateRange
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableDateRange() {
    return applicableDateRange;
  }

  public void setApplicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
  }


  public IBusinessEntityActivity distributions(Currency distributions) {
    this.distributions = distributions;
    return this;
  }

  /**
   * Get distributions
   * @return distributions
   */
  @javax.annotation.Nullable
  public Currency getDistributions() {
    return distributions;
  }

  public void setDistributions(Currency distributions) {
    this.distributions = distributions;
  }


  public IBusinessEntityActivity expense(Currency expense) {
    this.expense = expense;
    return this;
  }

  /**
   * Get expense
   * @return expense
   */
  @javax.annotation.Nullable
  public Currency getExpense() {
    return expense;
  }

  public void setExpense(Currency expense) {
    this.expense = expense;
  }


  public IBusinessEntityActivity frequency(FormattedEnumTypeFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(FormattedEnumTypeFrequency frequency) {
    this.frequency = frequency;
  }


  public IBusinessEntityActivity income(Currency income) {
    this.income = income;
    return this;
  }

  /**
   * Get income
   * @return income
   */
  @javax.annotation.Nullable
  public Currency getIncome() {
    return income;
  }

  public void setIncome(Currency income) {
    this.income = income;
  }


  public IBusinessEntityActivity indexRate(GrowthRateValues indexRate) {
    this.indexRate = indexRate;
    return this;
  }

  /**
   * Get indexRate
   * @return indexRate
   */
  @javax.annotation.Nullable
  public GrowthRateValues getIndexRate() {
    return indexRate;
  }

  public void setIndexRate(GrowthRateValues indexRate) {
    this.indexRate = indexRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IBusinessEntityActivity ibusinessEntityActivity = (IBusinessEntityActivity) o;
    return Objects.equals(this.applicableDateRange, ibusinessEntityActivity.applicableDateRange) &&
        Objects.equals(this.distributions, ibusinessEntityActivity.distributions) &&
        Objects.equals(this.expense, ibusinessEntityActivity.expense) &&
        Objects.equals(this.frequency, ibusinessEntityActivity.frequency) &&
        Objects.equals(this.income, ibusinessEntityActivity.income) &&
        Objects.equals(this.indexRate, ibusinessEntityActivity.indexRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableDateRange, distributions, expense, frequency, income, indexRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IBusinessEntityActivity {\n");
    sb.append("    applicableDateRange: ").append(toIndentedString(applicableDateRange)).append("\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    expense: ").append(toIndentedString(expense)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    indexRate: ").append(toIndentedString(indexRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableDateRange");
    openapiFields.add("distributions");
    openapiFields.add("expense");
    openapiFields.add("frequency");
    openapiFields.add("income");
    openapiFields.add("indexRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IBusinessEntityActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IBusinessEntityActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IBusinessEntityActivity is not found in the empty JSON string", IBusinessEntityActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IBusinessEntityActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IBusinessEntityActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicableDateRange`
      if (jsonObj.get("applicableDateRange") != null && !jsonObj.get("applicableDateRange").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableDateRange"));
      }
      // validate the optional field `distributions`
      if (jsonObj.get("distributions") != null && !jsonObj.get("distributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("distributions"));
      }
      // validate the optional field `expense`
      if (jsonObj.get("expense") != null && !jsonObj.get("expense").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("expense"));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FormattedEnumTypeFrequency.validateJsonElement(jsonObj.get("frequency"));
      }
      // validate the optional field `income`
      if (jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("income"));
      }
      // validate the optional field `indexRate`
      if (jsonObj.get("indexRate") != null && !jsonObj.get("indexRate").isJsonNull()) {
        GrowthRateValues.validateJsonElement(jsonObj.get("indexRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IBusinessEntityActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IBusinessEntityActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IBusinessEntityActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IBusinessEntityActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<IBusinessEntityActivity>() {
           @Override
           public void write(JsonWriter out, IBusinessEntityActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IBusinessEntityActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IBusinessEntityActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IBusinessEntityActivity
   * @throws IOException if the JSON string is invalid with respect to IBusinessEntityActivity
   */
  public static IBusinessEntityActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IBusinessEntityActivity.class);
  }

  /**
   * Convert an instance of IBusinessEntityActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

