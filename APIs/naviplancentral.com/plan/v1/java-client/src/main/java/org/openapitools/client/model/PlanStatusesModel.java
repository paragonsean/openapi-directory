/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlanStatusesModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanStatusesModel {
  /**
   * Gets or Sets hasIntegratedAccounts
   */
  @JsonAdapter(HasIntegratedAccountsEnum.Adapter.class)
  public enum HasIntegratedAccountsEnum {
    UNKNOWN("Unknown");

    private String value;

    HasIntegratedAccountsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HasIntegratedAccountsEnum fromValue(String value) {
      for (HasIntegratedAccountsEnum b : HasIntegratedAccountsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HasIntegratedAccountsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HasIntegratedAccountsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HasIntegratedAccountsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HasIntegratedAccountsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HasIntegratedAccountsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HAS_INTEGRATED_ACCOUNTS = "hasIntegratedAccounts";
  @SerializedName(SERIALIZED_NAME_HAS_INTEGRATED_ACCOUNTS)
  private HasIntegratedAccountsEnum hasIntegratedAccounts;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  /**
   * Gets or Sets planDataStatus
   */
  @JsonAdapter(PlanDataStatusEnum.Adapter.class)
  public enum PlanDataStatusEnum {
    UPDATE_NOT_REQUIRED("UpdateNotRequired"),
    
    UPDATE_REQUIRED("UpdateRequired"),
    
    UPDATE_IN_PROGRESS("UpdateInProgress"),
    
    UPDATE_FAILED("UpdateFailed"),
    
    NO_SUCH_PLAN("NoSuchPlan");

    private String value;

    PlanDataStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanDataStatusEnum fromValue(String value) {
      for (PlanDataStatusEnum b : PlanDataStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlanDataStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanDataStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanDataStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlanDataStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlanDataStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAN_DATA_STATUS = "planDataStatus";
  @SerializedName(SERIALIZED_NAME_PLAN_DATA_STATUS)
  private PlanDataStatusEnum planDataStatus;

  /**
   * Gets or Sets serializedDataStatus
   */
  @JsonAdapter(SerializedDataStatusEnum.Adapter.class)
  public enum SerializedDataStatusEnum {
    UPDATE_NOT_REQUIRED("UpdateNotRequired"),
    
    UPDATE_REQUIRED("UpdateRequired"),
    
    UPDATE_IN_PROGRESS("UpdateInProgress"),
    
    UPDATE_FAILED("UpdateFailed"),
    
    NO_SUCH_PLAN("NoSuchPlan");

    private String value;

    SerializedDataStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SerializedDataStatusEnum fromValue(String value) {
      for (SerializedDataStatusEnum b : SerializedDataStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SerializedDataStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SerializedDataStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SerializedDataStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SerializedDataStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SerializedDataStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERIALIZED_DATA_STATUS = "serializedDataStatus";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_DATA_STATUS)
  private SerializedDataStatusEnum serializedDataStatus;

  public PlanStatusesModel() {
  }

  public PlanStatusesModel hasIntegratedAccounts(HasIntegratedAccountsEnum hasIntegratedAccounts) {
    this.hasIntegratedAccounts = hasIntegratedAccounts;
    return this;
  }

  /**
   * Get hasIntegratedAccounts
   * @return hasIntegratedAccounts
   */
  @javax.annotation.Nullable
  public HasIntegratedAccountsEnum getHasIntegratedAccounts() {
    return hasIntegratedAccounts;
  }

  public void setHasIntegratedAccounts(HasIntegratedAccountsEnum hasIntegratedAccounts) {
    this.hasIntegratedAccounts = hasIntegratedAccounts;
  }


  public PlanStatusesModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public PlanStatusesModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  public PlanStatusesModel planDataStatus(PlanDataStatusEnum planDataStatus) {
    this.planDataStatus = planDataStatus;
    return this;
  }

  /**
   * Get planDataStatus
   * @return planDataStatus
   */
  @javax.annotation.Nullable
  public PlanDataStatusEnum getPlanDataStatus() {
    return planDataStatus;
  }

  public void setPlanDataStatus(PlanDataStatusEnum planDataStatus) {
    this.planDataStatus = planDataStatus;
  }


  public PlanStatusesModel serializedDataStatus(SerializedDataStatusEnum serializedDataStatus) {
    this.serializedDataStatus = serializedDataStatus;
    return this;
  }

  /**
   * Get serializedDataStatus
   * @return serializedDataStatus
   */
  @javax.annotation.Nullable
  public SerializedDataStatusEnum getSerializedDataStatus() {
    return serializedDataStatus;
  }

  public void setSerializedDataStatus(SerializedDataStatusEnum serializedDataStatus) {
    this.serializedDataStatus = serializedDataStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanStatusesModel planStatusesModel = (PlanStatusesModel) o;
    return Objects.equals(this.hasIntegratedAccounts, planStatusesModel.hasIntegratedAccounts) &&
        Objects.equals(this.links, planStatusesModel.links) &&
        Objects.equals(this.planDataStatus, planStatusesModel.planDataStatus) &&
        Objects.equals(this.serializedDataStatus, planStatusesModel.serializedDataStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasIntegratedAccounts, links, planDataStatus, serializedDataStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanStatusesModel {\n");
    sb.append("    hasIntegratedAccounts: ").append(toIndentedString(hasIntegratedAccounts)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    planDataStatus: ").append(toIndentedString(planDataStatus)).append("\n");
    sb.append("    serializedDataStatus: ").append(toIndentedString(serializedDataStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasIntegratedAccounts");
    openapiFields.add("links");
    openapiFields.add("planDataStatus");
    openapiFields.add("serializedDataStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanStatusesModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanStatusesModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanStatusesModel is not found in the empty JSON string", PlanStatusesModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanStatusesModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanStatusesModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hasIntegratedAccounts") != null && !jsonObj.get("hasIntegratedAccounts").isJsonNull()) && !jsonObj.get("hasIntegratedAccounts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasIntegratedAccounts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasIntegratedAccounts").toString()));
      }
      // validate the optional field `hasIntegratedAccounts`
      if (jsonObj.get("hasIntegratedAccounts") != null && !jsonObj.get("hasIntegratedAccounts").isJsonNull()) {
        HasIntegratedAccountsEnum.validateJsonElement(jsonObj.get("hasIntegratedAccounts"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("planDataStatus") != null && !jsonObj.get("planDataStatus").isJsonNull()) && !jsonObj.get("planDataStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planDataStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planDataStatus").toString()));
      }
      // validate the optional field `planDataStatus`
      if (jsonObj.get("planDataStatus") != null && !jsonObj.get("planDataStatus").isJsonNull()) {
        PlanDataStatusEnum.validateJsonElement(jsonObj.get("planDataStatus"));
      }
      if ((jsonObj.get("serializedDataStatus") != null && !jsonObj.get("serializedDataStatus").isJsonNull()) && !jsonObj.get("serializedDataStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serializedDataStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serializedDataStatus").toString()));
      }
      // validate the optional field `serializedDataStatus`
      if (jsonObj.get("serializedDataStatus") != null && !jsonObj.get("serializedDataStatus").isJsonNull()) {
        SerializedDataStatusEnum.validateJsonElement(jsonObj.get("serializedDataStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanStatusesModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanStatusesModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanStatusesModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanStatusesModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanStatusesModel>() {
           @Override
           public void write(JsonWriter out, PlanStatusesModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanStatusesModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanStatusesModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanStatusesModel
   * @throws IOException if the JSON string is invalid with respect to PlanStatusesModel
   */
  public static PlanStatusesModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanStatusesModel.class);
  }

  /**
   * Convert an instance of PlanStatusesModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

