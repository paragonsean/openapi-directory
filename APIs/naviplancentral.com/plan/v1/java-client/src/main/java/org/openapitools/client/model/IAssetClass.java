/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IAssetClassWeight;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IAssetClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IAssetClass {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_MAX_CONSTRAINT = "maxConstraint";
  @SerializedName(SERIALIZED_NAME_MAX_CONSTRAINT)
  private Percent maxConstraint;

  public static final String SERIALIZED_NAME_MIN_CONSTRAINT = "minConstraint";
  @SerializedName(SERIALIZED_NAME_MIN_CONSTRAINT)
  private Percent minConstraint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_SUPER_ASSET_CLASS_INDEX = "parentSuperAssetClassIndex";
  @SerializedName(SERIALIZED_NAME_PARENT_SUPER_ASSET_CLASS_INDEX)
  private Integer parentSuperAssetClassIndex;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private IAssetClassWeight weight;

  public IAssetClass() {
  }

  public IAssetClass(
     Integer index, 
     String name, 
     Integer parentSuperAssetClassIndex
  ) {
    this();
    this.index = index;
    this.name = name;
    this.parentSuperAssetClassIndex = parentSuperAssetClassIndex;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }



  public IAssetClass maxConstraint(Percent maxConstraint) {
    this.maxConstraint = maxConstraint;
    return this;
  }

  /**
   * Get maxConstraint
   * @return maxConstraint
   */
  @javax.annotation.Nullable
  public Percent getMaxConstraint() {
    return maxConstraint;
  }

  public void setMaxConstraint(Percent maxConstraint) {
    this.maxConstraint = maxConstraint;
  }


  public IAssetClass minConstraint(Percent minConstraint) {
    this.minConstraint = minConstraint;
    return this;
  }

  /**
   * Get minConstraint
   * @return minConstraint
   */
  @javax.annotation.Nullable
  public Percent getMinConstraint() {
    return minConstraint;
  }

  public void setMinConstraint(Percent minConstraint) {
    this.minConstraint = minConstraint;
  }


  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get parentSuperAssetClassIndex
   * @return parentSuperAssetClassIndex
   */
  @javax.annotation.Nullable
  public Integer getParentSuperAssetClassIndex() {
    return parentSuperAssetClassIndex;
  }



  public IAssetClass weight(IAssetClassWeight weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public IAssetClassWeight getWeight() {
    return weight;
  }

  public void setWeight(IAssetClassWeight weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAssetClass iassetClass = (IAssetClass) o;
    return Objects.equals(this.index, iassetClass.index) &&
        Objects.equals(this.maxConstraint, iassetClass.maxConstraint) &&
        Objects.equals(this.minConstraint, iassetClass.minConstraint) &&
        Objects.equals(this.name, iassetClass.name) &&
        Objects.equals(this.parentSuperAssetClassIndex, iassetClass.parentSuperAssetClassIndex) &&
        Objects.equals(this.weight, iassetClass.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, maxConstraint, minConstraint, name, parentSuperAssetClassIndex, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAssetClass {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    maxConstraint: ").append(toIndentedString(maxConstraint)).append("\n");
    sb.append("    minConstraint: ").append(toIndentedString(minConstraint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentSuperAssetClassIndex: ").append(toIndentedString(parentSuperAssetClassIndex)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("maxConstraint");
    openapiFields.add("minConstraint");
    openapiFields.add("name");
    openapiFields.add("parentSuperAssetClassIndex");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IAssetClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IAssetClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IAssetClass is not found in the empty JSON string", IAssetClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IAssetClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IAssetClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `maxConstraint`
      if (jsonObj.get("maxConstraint") != null && !jsonObj.get("maxConstraint").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("maxConstraint"));
      }
      // validate the optional field `minConstraint`
      if (jsonObj.get("minConstraint") != null && !jsonObj.get("minConstraint").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("minConstraint"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        IAssetClassWeight.validateJsonElement(jsonObj.get("weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IAssetClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IAssetClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IAssetClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IAssetClass.class));

       return (TypeAdapter<T>) new TypeAdapter<IAssetClass>() {
           @Override
           public void write(JsonWriter out, IAssetClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IAssetClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IAssetClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IAssetClass
   * @throws IOException if the JSON string is invalid with respect to IAssetClass
   */
  public static IAssetClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IAssetClass.class);
  }

  /**
   * Convert an instance of IAssetClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

