/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.DescriptiveBoolean;
import org.openapitools.client.model.IContributions;
import org.openapitools.client.model.ICorporationRealEstateAsset;
import org.openapitools.client.model.IEstateDetails;
import org.openapitools.client.model.IHistoricalData;
import org.openapitools.client.model.IInvestmentAccount;
import org.openapitools.client.model.ILiability;
import org.openapitools.client.model.ILifeInsurancePolicy;
import org.openapitools.client.model.IOwnershipDetails;
import org.openapitools.client.model.IRealEstateAsset;
import org.openapitools.client.model.IWithdrawals;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IHoldingCompany
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IHoldingCompany {
  public static final String SERIALIZED_NAME_ANNUAL_DIVIDEND_YIELD = "annualDividendYield";
  @SerializedName(SERIALIZED_NAME_ANNUAL_DIVIDEND_YIELD)
  private Percent annualDividendYield;

  public static final String SERIALIZED_NAME_CCPC = "ccpc";
  @SerializedName(SERIALIZED_NAME_CCPC)
  private DescriptiveBoolean ccpc;

  public static final String SERIALIZED_NAME_COMMON_SHARES_OUTSTANDING = "commonSharesOutstanding";
  @SerializedName(SERIALIZED_NAME_COMMON_SHARES_OUTSTANDING)
  private Integer commonSharesOutstanding;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private IContributions contributions;

  public static final String SERIALIZED_NAME_CORPORATE_YEAR_END = "corporateYearEnd";
  @SerializedName(SERIALIZED_NAME_CORPORATE_YEAR_END)
  private Date corporateYearEnd;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets dividendType
   */
  @JsonAdapter(DividendTypeEnum.Adapter.class)
  public enum DividendTypeEnum {
    TAXABLE("Taxable"),
    
    NON_TAXABLE("NonTaxable");

    private String value;

    DividendTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DividendTypeEnum fromValue(String value) {
      for (DividendTypeEnum b : DividendTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DividendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DividendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DividendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DividendTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DividendTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIVIDEND_TYPE = "dividendType";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_TYPE)
  private DividendTypeEnum dividendType;

  public static final String SERIALIZED_NAME_DIVIDEND_TYPE_FORMATTED = "dividendTypeFormatted";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_TYPE_FORMATTED)
  private String dividendTypeFormatted;

  public static final String SERIALIZED_NAME_ESTATE_DETAILS = "estateDetails";
  @SerializedName(SERIALIZED_NAME_ESTATE_DETAILS)
  private IEstateDetails estateDetails;

  public static final String SERIALIZED_NAME_HISTORICAL_DATA = "historicalData";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_DATA)
  private IHistoricalData historicalData;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVESTMENT_ACCOUNTS = "investmentAccounts";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_ACCOUNTS)
  private List<IInvestmentAccount> investmentAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIABILITIES = "liabilities";
  @SerializedName(SERIALIZED_NAME_LIABILITIES)
  private List<ILiability> liabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFE_INSURANCE_POLICIES = "lifeInsurancePolicies";
  @SerializedName(SERIALIZED_NAME_LIFE_INSURANCE_POLICIES)
  private List<ILifeInsurancePolicy> lifeInsurancePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_VALUE = "marketValue";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUE)
  private Currency marketValue;

  public static final String SERIALIZED_NAME_NUM_PREFERRED_SHARE_CLASSES = "numPreferredShareClasses";
  @SerializedName(SERIALIZED_NAME_NUM_PREFERRED_SHARE_CLASSES)
  private Integer numPreferredShareClasses;

  public static final String SERIALIZED_NAME_OTHER_ASSETS = "otherAssets";
  @SerializedName(SERIALIZED_NAME_OTHER_ASSETS)
  private List<IRealEstateAsset> otherAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNERSHIP_AS_OF_DATE = "ownershipAsOfDate";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_AS_OF_DATE)
  private Date ownershipAsOfDate;

  public static final String SERIALIZED_NAME_OWNERSHIP_DETAILS = "ownershipDetails";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_DETAILS)
  private IOwnershipDetails ownershipDetails;

  public static final String SERIALIZED_NAME_PREFERRED_SHARES_OUTSTANDING = "preferredSharesOutstanding";
  @SerializedName(SERIALIZED_NAME_PREFERRED_SHARES_OUTSTANDING)
  private Integer preferredSharesOutstanding;

  public static final String SERIALIZED_NAME_PROVINCE_OF_INCORPORATION = "provinceOfIncorporation";
  @SerializedName(SERIALIZED_NAME_PROVINCE_OF_INCORPORATION)
  private String provinceOfIncorporation;

  public static final String SERIALIZED_NAME_PROVINCE_OF_TAXATION = "provinceOfTaxation";
  @SerializedName(SERIALIZED_NAME_PROVINCE_OF_TAXATION)
  private String provinceOfTaxation;

  public static final String SERIALIZED_NAME_REAL_ESTATE_ASSETS = "realEstateAssets";
  @SerializedName(SERIALIZED_NAME_REAL_ESTATE_ASSETS)
  private List<ICorporationRealEstateAsset> realEstateAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_OF_ALL_COMMON_SHARES = "valueOfAllCommonShares";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_ALL_COMMON_SHARES)
  private Currency valueOfAllCommonShares;

  public static final String SERIALIZED_NAME_VALUE_OF_ALL_PREFERRED_SHARES = "valueOfAllPreferredShares";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_ALL_PREFERRED_SHARES)
  private Currency valueOfAllPreferredShares;

  public static final String SERIALIZED_NAME_WITHDRAWALS = "withdrawals";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS)
  private IWithdrawals withdrawals;

  public IHoldingCompany() {
  }

  public IHoldingCompany(
     Integer commonSharesOutstanding, 
     String description, 
     DividendTypeEnum dividendType, 
     String dividendTypeFormatted, 
     String id, 
     List<IInvestmentAccount> investmentAccounts, 
     List<ILiability> liabilities, 
     List<ILifeInsurancePolicy> lifeInsurancePolicies, 
     Integer numPreferredShareClasses, 
     List<IRealEstateAsset> otherAssets, 
     Integer preferredSharesOutstanding, 
     String provinceOfIncorporation, 
     String provinceOfTaxation, 
     List<ICorporationRealEstateAsset> realEstateAssets
  ) {
    this();
    this.commonSharesOutstanding = commonSharesOutstanding;
    this.description = description;
    this.dividendType = dividendType;
    this.dividendTypeFormatted = dividendTypeFormatted;
    this.id = id;
    this.investmentAccounts = investmentAccounts;
    this.liabilities = liabilities;
    this.lifeInsurancePolicies = lifeInsurancePolicies;
    this.numPreferredShareClasses = numPreferredShareClasses;
    this.otherAssets = otherAssets;
    this.preferredSharesOutstanding = preferredSharesOutstanding;
    this.provinceOfIncorporation = provinceOfIncorporation;
    this.provinceOfTaxation = provinceOfTaxation;
    this.realEstateAssets = realEstateAssets;
  }

  public IHoldingCompany annualDividendYield(Percent annualDividendYield) {
    this.annualDividendYield = annualDividendYield;
    return this;
  }

  /**
   * Get annualDividendYield
   * @return annualDividendYield
   */
  @javax.annotation.Nullable
  public Percent getAnnualDividendYield() {
    return annualDividendYield;
  }

  public void setAnnualDividendYield(Percent annualDividendYield) {
    this.annualDividendYield = annualDividendYield;
  }


  public IHoldingCompany ccpc(DescriptiveBoolean ccpc) {
    this.ccpc = ccpc;
    return this;
  }

  /**
   * Get ccpc
   * @return ccpc
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getCcpc() {
    return ccpc;
  }

  public void setCcpc(DescriptiveBoolean ccpc) {
    this.ccpc = ccpc;
  }


  /**
   * Get commonSharesOutstanding
   * @return commonSharesOutstanding
   */
  @javax.annotation.Nullable
  public Integer getCommonSharesOutstanding() {
    return commonSharesOutstanding;
  }



  public IHoldingCompany contributions(IContributions contributions) {
    this.contributions = contributions;
    return this;
  }

  /**
   * Get contributions
   * @return contributions
   */
  @javax.annotation.Nullable
  public IContributions getContributions() {
    return contributions;
  }

  public void setContributions(IContributions contributions) {
    this.contributions = contributions;
  }


  public IHoldingCompany corporateYearEnd(Date corporateYearEnd) {
    this.corporateYearEnd = corporateYearEnd;
    return this;
  }

  /**
   * Get corporateYearEnd
   * @return corporateYearEnd
   */
  @javax.annotation.Nullable
  public Date getCorporateYearEnd() {
    return corporateYearEnd;
  }

  public void setCorporateYearEnd(Date corporateYearEnd) {
    this.corporateYearEnd = corporateYearEnd;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get dividendType
   * @return dividendType
   */
  @javax.annotation.Nullable
  public DividendTypeEnum getDividendType() {
    return dividendType;
  }



  /**
   * Get dividendTypeFormatted
   * @return dividendTypeFormatted
   */
  @javax.annotation.Nullable
  public String getDividendTypeFormatted() {
    return dividendTypeFormatted;
  }



  public IHoldingCompany estateDetails(IEstateDetails estateDetails) {
    this.estateDetails = estateDetails;
    return this;
  }

  /**
   * Get estateDetails
   * @return estateDetails
   */
  @javax.annotation.Nullable
  public IEstateDetails getEstateDetails() {
    return estateDetails;
  }

  public void setEstateDetails(IEstateDetails estateDetails) {
    this.estateDetails = estateDetails;
  }


  public IHoldingCompany historicalData(IHistoricalData historicalData) {
    this.historicalData = historicalData;
    return this;
  }

  /**
   * Get historicalData
   * @return historicalData
   */
  @javax.annotation.Nullable
  public IHistoricalData getHistoricalData() {
    return historicalData;
  }

  public void setHistoricalData(IHistoricalData historicalData) {
    this.historicalData = historicalData;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get investmentAccounts
   * @return investmentAccounts
   */
  @javax.annotation.Nullable
  public List<IInvestmentAccount> getInvestmentAccounts() {
    return investmentAccounts;
  }



  /**
   * Get liabilities
   * @return liabilities
   */
  @javax.annotation.Nullable
  public List<ILiability> getLiabilities() {
    return liabilities;
  }



  /**
   * Get lifeInsurancePolicies
   * @return lifeInsurancePolicies
   */
  @javax.annotation.Nullable
  public List<ILifeInsurancePolicy> getLifeInsurancePolicies() {
    return lifeInsurancePolicies;
  }



  public IHoldingCompany marketValue(Currency marketValue) {
    this.marketValue = marketValue;
    return this;
  }

  /**
   * Get marketValue
   * @return marketValue
   */
  @javax.annotation.Nullable
  public Currency getMarketValue() {
    return marketValue;
  }

  public void setMarketValue(Currency marketValue) {
    this.marketValue = marketValue;
  }


  /**
   * Get numPreferredShareClasses
   * @return numPreferredShareClasses
   */
  @javax.annotation.Nullable
  public Integer getNumPreferredShareClasses() {
    return numPreferredShareClasses;
  }



  /**
   * Get otherAssets
   * @return otherAssets
   */
  @javax.annotation.Nullable
  public List<IRealEstateAsset> getOtherAssets() {
    return otherAssets;
  }



  public IHoldingCompany ownershipAsOfDate(Date ownershipAsOfDate) {
    this.ownershipAsOfDate = ownershipAsOfDate;
    return this;
  }

  /**
   * Get ownershipAsOfDate
   * @return ownershipAsOfDate
   */
  @javax.annotation.Nullable
  public Date getOwnershipAsOfDate() {
    return ownershipAsOfDate;
  }

  public void setOwnershipAsOfDate(Date ownershipAsOfDate) {
    this.ownershipAsOfDate = ownershipAsOfDate;
  }


  public IHoldingCompany ownershipDetails(IOwnershipDetails ownershipDetails) {
    this.ownershipDetails = ownershipDetails;
    return this;
  }

  /**
   * Get ownershipDetails
   * @return ownershipDetails
   */
  @javax.annotation.Nullable
  public IOwnershipDetails getOwnershipDetails() {
    return ownershipDetails;
  }

  public void setOwnershipDetails(IOwnershipDetails ownershipDetails) {
    this.ownershipDetails = ownershipDetails;
  }


  /**
   * Get preferredSharesOutstanding
   * @return preferredSharesOutstanding
   */
  @javax.annotation.Nullable
  public Integer getPreferredSharesOutstanding() {
    return preferredSharesOutstanding;
  }



  /**
   * Get provinceOfIncorporation
   * @return provinceOfIncorporation
   */
  @javax.annotation.Nullable
  public String getProvinceOfIncorporation() {
    return provinceOfIncorporation;
  }



  /**
   * Get provinceOfTaxation
   * @return provinceOfTaxation
   */
  @javax.annotation.Nullable
  public String getProvinceOfTaxation() {
    return provinceOfTaxation;
  }



  /**
   * Get realEstateAssets
   * @return realEstateAssets
   */
  @javax.annotation.Nullable
  public List<ICorporationRealEstateAsset> getRealEstateAssets() {
    return realEstateAssets;
  }



  public IHoldingCompany valueOfAllCommonShares(Currency valueOfAllCommonShares) {
    this.valueOfAllCommonShares = valueOfAllCommonShares;
    return this;
  }

  /**
   * Get valueOfAllCommonShares
   * @return valueOfAllCommonShares
   */
  @javax.annotation.Nullable
  public Currency getValueOfAllCommonShares() {
    return valueOfAllCommonShares;
  }

  public void setValueOfAllCommonShares(Currency valueOfAllCommonShares) {
    this.valueOfAllCommonShares = valueOfAllCommonShares;
  }


  public IHoldingCompany valueOfAllPreferredShares(Currency valueOfAllPreferredShares) {
    this.valueOfAllPreferredShares = valueOfAllPreferredShares;
    return this;
  }

  /**
   * Get valueOfAllPreferredShares
   * @return valueOfAllPreferredShares
   */
  @javax.annotation.Nullable
  public Currency getValueOfAllPreferredShares() {
    return valueOfAllPreferredShares;
  }

  public void setValueOfAllPreferredShares(Currency valueOfAllPreferredShares) {
    this.valueOfAllPreferredShares = valueOfAllPreferredShares;
  }


  public IHoldingCompany withdrawals(IWithdrawals withdrawals) {
    this.withdrawals = withdrawals;
    return this;
  }

  /**
   * Get withdrawals
   * @return withdrawals
   */
  @javax.annotation.Nullable
  public IWithdrawals getWithdrawals() {
    return withdrawals;
  }

  public void setWithdrawals(IWithdrawals withdrawals) {
    this.withdrawals = withdrawals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IHoldingCompany iholdingCompany = (IHoldingCompany) o;
    return Objects.equals(this.annualDividendYield, iholdingCompany.annualDividendYield) &&
        Objects.equals(this.ccpc, iholdingCompany.ccpc) &&
        Objects.equals(this.commonSharesOutstanding, iholdingCompany.commonSharesOutstanding) &&
        Objects.equals(this.contributions, iholdingCompany.contributions) &&
        Objects.equals(this.corporateYearEnd, iholdingCompany.corporateYearEnd) &&
        Objects.equals(this.description, iholdingCompany.description) &&
        Objects.equals(this.dividendType, iholdingCompany.dividendType) &&
        Objects.equals(this.dividendTypeFormatted, iholdingCompany.dividendTypeFormatted) &&
        Objects.equals(this.estateDetails, iholdingCompany.estateDetails) &&
        Objects.equals(this.historicalData, iholdingCompany.historicalData) &&
        Objects.equals(this.id, iholdingCompany.id) &&
        Objects.equals(this.investmentAccounts, iholdingCompany.investmentAccounts) &&
        Objects.equals(this.liabilities, iholdingCompany.liabilities) &&
        Objects.equals(this.lifeInsurancePolicies, iholdingCompany.lifeInsurancePolicies) &&
        Objects.equals(this.marketValue, iholdingCompany.marketValue) &&
        Objects.equals(this.numPreferredShareClasses, iholdingCompany.numPreferredShareClasses) &&
        Objects.equals(this.otherAssets, iholdingCompany.otherAssets) &&
        Objects.equals(this.ownershipAsOfDate, iholdingCompany.ownershipAsOfDate) &&
        Objects.equals(this.ownershipDetails, iholdingCompany.ownershipDetails) &&
        Objects.equals(this.preferredSharesOutstanding, iholdingCompany.preferredSharesOutstanding) &&
        Objects.equals(this.provinceOfIncorporation, iholdingCompany.provinceOfIncorporation) &&
        Objects.equals(this.provinceOfTaxation, iholdingCompany.provinceOfTaxation) &&
        Objects.equals(this.realEstateAssets, iholdingCompany.realEstateAssets) &&
        Objects.equals(this.valueOfAllCommonShares, iholdingCompany.valueOfAllCommonShares) &&
        Objects.equals(this.valueOfAllPreferredShares, iholdingCompany.valueOfAllPreferredShares) &&
        Objects.equals(this.withdrawals, iholdingCompany.withdrawals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualDividendYield, ccpc, commonSharesOutstanding, contributions, corporateYearEnd, description, dividendType, dividendTypeFormatted, estateDetails, historicalData, id, investmentAccounts, liabilities, lifeInsurancePolicies, marketValue, numPreferredShareClasses, otherAssets, ownershipAsOfDate, ownershipDetails, preferredSharesOutstanding, provinceOfIncorporation, provinceOfTaxation, realEstateAssets, valueOfAllCommonShares, valueOfAllPreferredShares, withdrawals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IHoldingCompany {\n");
    sb.append("    annualDividendYield: ").append(toIndentedString(annualDividendYield)).append("\n");
    sb.append("    ccpc: ").append(toIndentedString(ccpc)).append("\n");
    sb.append("    commonSharesOutstanding: ").append(toIndentedString(commonSharesOutstanding)).append("\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    corporateYearEnd: ").append(toIndentedString(corporateYearEnd)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dividendType: ").append(toIndentedString(dividendType)).append("\n");
    sb.append("    dividendTypeFormatted: ").append(toIndentedString(dividendTypeFormatted)).append("\n");
    sb.append("    estateDetails: ").append(toIndentedString(estateDetails)).append("\n");
    sb.append("    historicalData: ").append(toIndentedString(historicalData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    investmentAccounts: ").append(toIndentedString(investmentAccounts)).append("\n");
    sb.append("    liabilities: ").append(toIndentedString(liabilities)).append("\n");
    sb.append("    lifeInsurancePolicies: ").append(toIndentedString(lifeInsurancePolicies)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    numPreferredShareClasses: ").append(toIndentedString(numPreferredShareClasses)).append("\n");
    sb.append("    otherAssets: ").append(toIndentedString(otherAssets)).append("\n");
    sb.append("    ownershipAsOfDate: ").append(toIndentedString(ownershipAsOfDate)).append("\n");
    sb.append("    ownershipDetails: ").append(toIndentedString(ownershipDetails)).append("\n");
    sb.append("    preferredSharesOutstanding: ").append(toIndentedString(preferredSharesOutstanding)).append("\n");
    sb.append("    provinceOfIncorporation: ").append(toIndentedString(provinceOfIncorporation)).append("\n");
    sb.append("    provinceOfTaxation: ").append(toIndentedString(provinceOfTaxation)).append("\n");
    sb.append("    realEstateAssets: ").append(toIndentedString(realEstateAssets)).append("\n");
    sb.append("    valueOfAllCommonShares: ").append(toIndentedString(valueOfAllCommonShares)).append("\n");
    sb.append("    valueOfAllPreferredShares: ").append(toIndentedString(valueOfAllPreferredShares)).append("\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualDividendYield");
    openapiFields.add("ccpc");
    openapiFields.add("commonSharesOutstanding");
    openapiFields.add("contributions");
    openapiFields.add("corporateYearEnd");
    openapiFields.add("description");
    openapiFields.add("dividendType");
    openapiFields.add("dividendTypeFormatted");
    openapiFields.add("estateDetails");
    openapiFields.add("historicalData");
    openapiFields.add("id");
    openapiFields.add("investmentAccounts");
    openapiFields.add("liabilities");
    openapiFields.add("lifeInsurancePolicies");
    openapiFields.add("marketValue");
    openapiFields.add("numPreferredShareClasses");
    openapiFields.add("otherAssets");
    openapiFields.add("ownershipAsOfDate");
    openapiFields.add("ownershipDetails");
    openapiFields.add("preferredSharesOutstanding");
    openapiFields.add("provinceOfIncorporation");
    openapiFields.add("provinceOfTaxation");
    openapiFields.add("realEstateAssets");
    openapiFields.add("valueOfAllCommonShares");
    openapiFields.add("valueOfAllPreferredShares");
    openapiFields.add("withdrawals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IHoldingCompany
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IHoldingCompany.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IHoldingCompany is not found in the empty JSON string", IHoldingCompany.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IHoldingCompany.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IHoldingCompany` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualDividendYield`
      if (jsonObj.get("annualDividendYield") != null && !jsonObj.get("annualDividendYield").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("annualDividendYield"));
      }
      // validate the optional field `ccpc`
      if (jsonObj.get("ccpc") != null && !jsonObj.get("ccpc").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("ccpc"));
      }
      // validate the optional field `contributions`
      if (jsonObj.get("contributions") != null && !jsonObj.get("contributions").isJsonNull()) {
        IContributions.validateJsonElement(jsonObj.get("contributions"));
      }
      // validate the optional field `corporateYearEnd`
      if (jsonObj.get("corporateYearEnd") != null && !jsonObj.get("corporateYearEnd").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("corporateYearEnd"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dividendType") != null && !jsonObj.get("dividendType").isJsonNull()) && !jsonObj.get("dividendType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dividendType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dividendType").toString()));
      }
      // validate the optional field `dividendType`
      if (jsonObj.get("dividendType") != null && !jsonObj.get("dividendType").isJsonNull()) {
        DividendTypeEnum.validateJsonElement(jsonObj.get("dividendType"));
      }
      if ((jsonObj.get("dividendTypeFormatted") != null && !jsonObj.get("dividendTypeFormatted").isJsonNull()) && !jsonObj.get("dividendTypeFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dividendTypeFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dividendTypeFormatted").toString()));
      }
      // validate the optional field `estateDetails`
      if (jsonObj.get("estateDetails") != null && !jsonObj.get("estateDetails").isJsonNull()) {
        IEstateDetails.validateJsonElement(jsonObj.get("estateDetails"));
      }
      // validate the optional field `historicalData`
      if (jsonObj.get("historicalData") != null && !jsonObj.get("historicalData").isJsonNull()) {
        IHistoricalData.validateJsonElement(jsonObj.get("historicalData"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("investmentAccounts") != null && !jsonObj.get("investmentAccounts").isJsonNull()) {
        JsonArray jsonArrayinvestmentAccounts = jsonObj.getAsJsonArray("investmentAccounts");
        if (jsonArrayinvestmentAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("investmentAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `investmentAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("investmentAccounts").toString()));
          }

          // validate the optional field `investmentAccounts` (array)
          for (int i = 0; i < jsonArrayinvestmentAccounts.size(); i++) {
            IInvestmentAccount.validateJsonElement(jsonArrayinvestmentAccounts.get(i));
          };
        }
      }
      if (jsonObj.get("liabilities") != null && !jsonObj.get("liabilities").isJsonNull()) {
        JsonArray jsonArrayliabilities = jsonObj.getAsJsonArray("liabilities");
        if (jsonArrayliabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("liabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `liabilities` to be an array in the JSON string but got `%s`", jsonObj.get("liabilities").toString()));
          }

          // validate the optional field `liabilities` (array)
          for (int i = 0; i < jsonArrayliabilities.size(); i++) {
            ILiability.validateJsonElement(jsonArrayliabilities.get(i));
          };
        }
      }
      if (jsonObj.get("lifeInsurancePolicies") != null && !jsonObj.get("lifeInsurancePolicies").isJsonNull()) {
        JsonArray jsonArraylifeInsurancePolicies = jsonObj.getAsJsonArray("lifeInsurancePolicies");
        if (jsonArraylifeInsurancePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lifeInsurancePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lifeInsurancePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("lifeInsurancePolicies").toString()));
          }

          // validate the optional field `lifeInsurancePolicies` (array)
          for (int i = 0; i < jsonArraylifeInsurancePolicies.size(); i++) {
            ILifeInsurancePolicy.validateJsonElement(jsonArraylifeInsurancePolicies.get(i));
          };
        }
      }
      // validate the optional field `marketValue`
      if (jsonObj.get("marketValue") != null && !jsonObj.get("marketValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("marketValue"));
      }
      if (jsonObj.get("otherAssets") != null && !jsonObj.get("otherAssets").isJsonNull()) {
        JsonArray jsonArrayotherAssets = jsonObj.getAsJsonArray("otherAssets");
        if (jsonArrayotherAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherAssets` to be an array in the JSON string but got `%s`", jsonObj.get("otherAssets").toString()));
          }

          // validate the optional field `otherAssets` (array)
          for (int i = 0; i < jsonArrayotherAssets.size(); i++) {
            IRealEstateAsset.validateJsonElement(jsonArrayotherAssets.get(i));
          };
        }
      }
      // validate the optional field `ownershipAsOfDate`
      if (jsonObj.get("ownershipAsOfDate") != null && !jsonObj.get("ownershipAsOfDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("ownershipAsOfDate"));
      }
      // validate the optional field `ownershipDetails`
      if (jsonObj.get("ownershipDetails") != null && !jsonObj.get("ownershipDetails").isJsonNull()) {
        IOwnershipDetails.validateJsonElement(jsonObj.get("ownershipDetails"));
      }
      if ((jsonObj.get("provinceOfIncorporation") != null && !jsonObj.get("provinceOfIncorporation").isJsonNull()) && !jsonObj.get("provinceOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provinceOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provinceOfIncorporation").toString()));
      }
      if ((jsonObj.get("provinceOfTaxation") != null && !jsonObj.get("provinceOfTaxation").isJsonNull()) && !jsonObj.get("provinceOfTaxation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provinceOfTaxation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provinceOfTaxation").toString()));
      }
      if (jsonObj.get("realEstateAssets") != null && !jsonObj.get("realEstateAssets").isJsonNull()) {
        JsonArray jsonArrayrealEstateAssets = jsonObj.getAsJsonArray("realEstateAssets");
        if (jsonArrayrealEstateAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("realEstateAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `realEstateAssets` to be an array in the JSON string but got `%s`", jsonObj.get("realEstateAssets").toString()));
          }

          // validate the optional field `realEstateAssets` (array)
          for (int i = 0; i < jsonArrayrealEstateAssets.size(); i++) {
            ICorporationRealEstateAsset.validateJsonElement(jsonArrayrealEstateAssets.get(i));
          };
        }
      }
      // validate the optional field `valueOfAllCommonShares`
      if (jsonObj.get("valueOfAllCommonShares") != null && !jsonObj.get("valueOfAllCommonShares").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("valueOfAllCommonShares"));
      }
      // validate the optional field `valueOfAllPreferredShares`
      if (jsonObj.get("valueOfAllPreferredShares") != null && !jsonObj.get("valueOfAllPreferredShares").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("valueOfAllPreferredShares"));
      }
      // validate the optional field `withdrawals`
      if (jsonObj.get("withdrawals") != null && !jsonObj.get("withdrawals").isJsonNull()) {
        IWithdrawals.validateJsonElement(jsonObj.get("withdrawals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IHoldingCompany.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IHoldingCompany' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IHoldingCompany> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IHoldingCompany.class));

       return (TypeAdapter<T>) new TypeAdapter<IHoldingCompany>() {
           @Override
           public void write(JsonWriter out, IHoldingCompany value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IHoldingCompany read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IHoldingCompany given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IHoldingCompany
   * @throws IOException if the JSON string is invalid with respect to IHoldingCompany
   */
  public static IHoldingCompany fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IHoldingCompany.class);
  }

  /**
   * Convert an instance of IHoldingCompany to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

