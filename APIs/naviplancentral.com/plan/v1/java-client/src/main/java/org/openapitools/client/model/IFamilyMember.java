/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.FormattedEnumTypeGender;
import org.openapitools.client.model.IAddress;
import org.openapitools.client.model.IEmployer;
import org.openapitools.client.model.IPersonName;
import org.openapitools.client.model.IPhoneNumbers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IFamilyMember
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IFamilyMember {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private IAddress address;

  public static final String SERIALIZED_NAME_AGE_AS_OF_PLAN_DATE = "ageAsOfPlanDate";
  @SerializedName(SERIALIZED_NAME_AGE_AS_OF_PLAN_DATE)
  private Integer ageAsOfPlanDate;

  public static final String SERIALIZED_NAME_BIRTHDATE = "birthdate";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE)
  private Date birthdate;

  public static final String SERIALIZED_NAME_CITIZENSHIP = "citizenship";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP)
  private String citizenship;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMPLOYER = "employer";
  @SerializedName(SERIALIZED_NAME_EMPLOYER)
  private IEmployer employer;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private FormattedEnumTypeGender gender;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private IPersonName name;

  /**
   * Gets or Sets ownershipId
   */
  @JsonAdapter(OwnershipIdEnum.Adapter.class)
  public enum OwnershipIdEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    OwnershipIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipIdEnum fromValue(String value) {
      for (OwnershipIdEnum b : OwnershipIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_ID = "ownershipId";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_ID)
  private OwnershipIdEnum ownershipId;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private IPhoneNumbers phone;

  public IFamilyMember() {
  }

  public IFamilyMember(
     Integer ageAsOfPlanDate, 
     String citizenship, 
     String email, 
     OwnershipIdEnum ownershipId
  ) {
    this();
    this.ageAsOfPlanDate = ageAsOfPlanDate;
    this.citizenship = citizenship;
    this.email = email;
    this.ownershipId = ownershipId;
  }

  public IFamilyMember address(IAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public IAddress getAddress() {
    return address;
  }

  public void setAddress(IAddress address) {
    this.address = address;
  }


  /**
   * Get ageAsOfPlanDate
   * @return ageAsOfPlanDate
   */
  @javax.annotation.Nullable
  public Integer getAgeAsOfPlanDate() {
    return ageAsOfPlanDate;
  }



  public IFamilyMember birthdate(Date birthdate) {
    this.birthdate = birthdate;
    return this;
  }

  /**
   * Get birthdate
   * @return birthdate
   */
  @javax.annotation.Nullable
  public Date getBirthdate() {
    return birthdate;
  }

  public void setBirthdate(Date birthdate) {
    this.birthdate = birthdate;
  }


  /**
   * Get citizenship
   * @return citizenship
   */
  @javax.annotation.Nullable
  public String getCitizenship() {
    return citizenship;
  }



  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }



  public IFamilyMember employer(IEmployer employer) {
    this.employer = employer;
    return this;
  }

  /**
   * Get employer
   * @return employer
   */
  @javax.annotation.Nullable
  public IEmployer getEmployer() {
    return employer;
  }

  public void setEmployer(IEmployer employer) {
    this.employer = employer;
  }


  public IFamilyMember gender(FormattedEnumTypeGender gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeGender getGender() {
    return gender;
  }

  public void setGender(FormattedEnumTypeGender gender) {
    this.gender = gender;
  }


  public IFamilyMember name(IPersonName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public IPersonName getName() {
    return name;
  }

  public void setName(IPersonName name) {
    this.name = name;
  }


  /**
   * Get ownershipId
   * @return ownershipId
   */
  @javax.annotation.Nullable
  public OwnershipIdEnum getOwnershipId() {
    return ownershipId;
  }



  public IFamilyMember phone(IPhoneNumbers phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public IPhoneNumbers getPhone() {
    return phone;
  }

  public void setPhone(IPhoneNumbers phone) {
    this.phone = phone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFamilyMember ifamilyMember = (IFamilyMember) o;
    return Objects.equals(this.address, ifamilyMember.address) &&
        Objects.equals(this.ageAsOfPlanDate, ifamilyMember.ageAsOfPlanDate) &&
        Objects.equals(this.birthdate, ifamilyMember.birthdate) &&
        Objects.equals(this.citizenship, ifamilyMember.citizenship) &&
        Objects.equals(this.email, ifamilyMember.email) &&
        Objects.equals(this.employer, ifamilyMember.employer) &&
        Objects.equals(this.gender, ifamilyMember.gender) &&
        Objects.equals(this.name, ifamilyMember.name) &&
        Objects.equals(this.ownershipId, ifamilyMember.ownershipId) &&
        Objects.equals(this.phone, ifamilyMember.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, ageAsOfPlanDate, birthdate, citizenship, email, employer, gender, name, ownershipId, phone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFamilyMember {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    ageAsOfPlanDate: ").append(toIndentedString(ageAsOfPlanDate)).append("\n");
    sb.append("    birthdate: ").append(toIndentedString(birthdate)).append("\n");
    sb.append("    citizenship: ").append(toIndentedString(citizenship)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    employer: ").append(toIndentedString(employer)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownershipId: ").append(toIndentedString(ownershipId)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("ageAsOfPlanDate");
    openapiFields.add("birthdate");
    openapiFields.add("citizenship");
    openapiFields.add("email");
    openapiFields.add("employer");
    openapiFields.add("gender");
    openapiFields.add("name");
    openapiFields.add("ownershipId");
    openapiFields.add("phone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IFamilyMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IFamilyMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IFamilyMember is not found in the empty JSON string", IFamilyMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IFamilyMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IFamilyMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        IAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `birthdate`
      if (jsonObj.get("birthdate") != null && !jsonObj.get("birthdate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("birthdate"));
      }
      if ((jsonObj.get("citizenship") != null && !jsonObj.get("citizenship").isJsonNull()) && !jsonObj.get("citizenship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citizenship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citizenship").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `employer`
      if (jsonObj.get("employer") != null && !jsonObj.get("employer").isJsonNull()) {
        IEmployer.validateJsonElement(jsonObj.get("employer"));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        FormattedEnumTypeGender.validateJsonElement(jsonObj.get("gender"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        IPersonName.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("ownershipId") != null && !jsonObj.get("ownershipId").isJsonNull()) && !jsonObj.get("ownershipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipId").toString()));
      }
      // validate the optional field `ownershipId`
      if (jsonObj.get("ownershipId") != null && !jsonObj.get("ownershipId").isJsonNull()) {
        OwnershipIdEnum.validateJsonElement(jsonObj.get("ownershipId"));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        IPhoneNumbers.validateJsonElement(jsonObj.get("phone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IFamilyMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IFamilyMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IFamilyMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IFamilyMember.class));

       return (TypeAdapter<T>) new TypeAdapter<IFamilyMember>() {
           @Override
           public void write(JsonWriter out, IFamilyMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IFamilyMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IFamilyMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IFamilyMember
   * @throws IOException if the JSON string is invalid with respect to IFamilyMember
   */
  public static IFamilyMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IFamilyMember.class);
  }

  /**
   * Convert an instance of IFamilyMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

