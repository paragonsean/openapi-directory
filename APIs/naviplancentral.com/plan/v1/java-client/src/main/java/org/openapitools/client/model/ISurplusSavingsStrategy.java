/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ISurplusSavingsStrategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ISurplusSavingsStrategy {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Date endDate;

  public static final String SERIALIZED_NAME_PERCENT_OF_SURPLUS = "percentOfSurplus";
  @SerializedName(SERIALIZED_NAME_PERCENT_OF_SURPLUS)
  private Percent percentOfSurplus;

  public static final String SERIALIZED_NAME_PERCENT_OF_SURPLUS_CLIENT = "percentOfSurplusClient";
  @SerializedName(SERIALIZED_NAME_PERCENT_OF_SURPLUS_CLIENT)
  private Percent percentOfSurplusClient;

  public static final String SERIALIZED_NAME_PERCENT_OF_SURPLUS_CO_CLIENT = "percentOfSurplusCoClient";
  @SerializedName(SERIALIZED_NAME_PERCENT_OF_SURPLUS_CO_CLIENT)
  private Percent percentOfSurplusCoClient;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Date startDate;

  public ISurplusSavingsStrategy() {
  }

  public ISurplusSavingsStrategy endDate(Date endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public Date getEndDate() {
    return endDate;
  }

  public void setEndDate(Date endDate) {
    this.endDate = endDate;
  }


  public ISurplusSavingsStrategy percentOfSurplus(Percent percentOfSurplus) {
    this.percentOfSurplus = percentOfSurplus;
    return this;
  }

  /**
   * Get percentOfSurplus
   * @return percentOfSurplus
   */
  @javax.annotation.Nullable
  public Percent getPercentOfSurplus() {
    return percentOfSurplus;
  }

  public void setPercentOfSurplus(Percent percentOfSurplus) {
    this.percentOfSurplus = percentOfSurplus;
  }


  public ISurplusSavingsStrategy percentOfSurplusClient(Percent percentOfSurplusClient) {
    this.percentOfSurplusClient = percentOfSurplusClient;
    return this;
  }

  /**
   * Get percentOfSurplusClient
   * @return percentOfSurplusClient
   */
  @javax.annotation.Nullable
  public Percent getPercentOfSurplusClient() {
    return percentOfSurplusClient;
  }

  public void setPercentOfSurplusClient(Percent percentOfSurplusClient) {
    this.percentOfSurplusClient = percentOfSurplusClient;
  }


  public ISurplusSavingsStrategy percentOfSurplusCoClient(Percent percentOfSurplusCoClient) {
    this.percentOfSurplusCoClient = percentOfSurplusCoClient;
    return this;
  }

  /**
   * Get percentOfSurplusCoClient
   * @return percentOfSurplusCoClient
   */
  @javax.annotation.Nullable
  public Percent getPercentOfSurplusCoClient() {
    return percentOfSurplusCoClient;
  }

  public void setPercentOfSurplusCoClient(Percent percentOfSurplusCoClient) {
    this.percentOfSurplusCoClient = percentOfSurplusCoClient;
  }


  public ISurplusSavingsStrategy startDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public Date getStartDate() {
    return startDate;
  }

  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ISurplusSavingsStrategy isurplusSavingsStrategy = (ISurplusSavingsStrategy) o;
    return Objects.equals(this.endDate, isurplusSavingsStrategy.endDate) &&
        Objects.equals(this.percentOfSurplus, isurplusSavingsStrategy.percentOfSurplus) &&
        Objects.equals(this.percentOfSurplusClient, isurplusSavingsStrategy.percentOfSurplusClient) &&
        Objects.equals(this.percentOfSurplusCoClient, isurplusSavingsStrategy.percentOfSurplusCoClient) &&
        Objects.equals(this.startDate, isurplusSavingsStrategy.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, percentOfSurplus, percentOfSurplusClient, percentOfSurplusCoClient, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ISurplusSavingsStrategy {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    percentOfSurplus: ").append(toIndentedString(percentOfSurplus)).append("\n");
    sb.append("    percentOfSurplusClient: ").append(toIndentedString(percentOfSurplusClient)).append("\n");
    sb.append("    percentOfSurplusCoClient: ").append(toIndentedString(percentOfSurplusCoClient)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("percentOfSurplus");
    openapiFields.add("percentOfSurplusClient");
    openapiFields.add("percentOfSurplusCoClient");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ISurplusSavingsStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ISurplusSavingsStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ISurplusSavingsStrategy is not found in the empty JSON string", ISurplusSavingsStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ISurplusSavingsStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ISurplusSavingsStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endDate`
      if (jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("endDate"));
      }
      // validate the optional field `percentOfSurplus`
      if (jsonObj.get("percentOfSurplus") != null && !jsonObj.get("percentOfSurplus").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("percentOfSurplus"));
      }
      // validate the optional field `percentOfSurplusClient`
      if (jsonObj.get("percentOfSurplusClient") != null && !jsonObj.get("percentOfSurplusClient").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("percentOfSurplusClient"));
      }
      // validate the optional field `percentOfSurplusCoClient`
      if (jsonObj.get("percentOfSurplusCoClient") != null && !jsonObj.get("percentOfSurplusCoClient").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("percentOfSurplusCoClient"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ISurplusSavingsStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ISurplusSavingsStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ISurplusSavingsStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ISurplusSavingsStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<ISurplusSavingsStrategy>() {
           @Override
           public void write(JsonWriter out, ISurplusSavingsStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ISurplusSavingsStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ISurplusSavingsStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ISurplusSavingsStrategy
   * @throws IOException if the JSON string is invalid with respect to ISurplusSavingsStrategy
   */
  public static ISurplusSavingsStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ISurplusSavingsStrategy.class);
  }

  /**
   * Convert an instance of ISurplusSavingsStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

