/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LivePlanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LivePlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LivePlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for livePlanGetAccountsByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetAccountsByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/NetWorth/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetAccountsByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetAccountsByClientidPlanid(Async)");
        }

        return livePlanGetAccountsByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves accounts for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel livePlanGetAccountsByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel> localVarResp = livePlanGetAccountsByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves accounts for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel> livePlanGetAccountsByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetAccountsByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves accounts for a given plan (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetAccountsByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetAccountsByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetGoalFundingListByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetGoalFundingListByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/Goals/Funding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetGoalFundingListByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetGoalFundingListByClientidPlanid(Async)");
        }

        return livePlanGetGoalFundingListByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieve a list of funding accounts
     * This function retrieves a list of funding accounts for the goals in the plan
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel livePlanGetGoalFundingListByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel> localVarResp = livePlanGetGoalFundingListByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of funding accounts
     * This function retrieves a list of funding accounts for the goals in the plan
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel> livePlanGetGoalFundingListByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetGoalFundingListByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of funding accounts (asynchronously)
     * This function retrieves a list of funding accounts for the goals in the plan
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetGoalFundingListByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetGoalFundingListByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetGoalsByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetGoalsByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/Goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetGoalsByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetGoalsByClientidPlanid(Async)");
        }

        return livePlanGetGoalsByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves all goals from the live plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel livePlanGetGoalsByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel> localVarResp = livePlanGetGoalsByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves all goals from the live plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel> livePlanGetGoalsByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetGoalsByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all goals from the live plan (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetGoalsByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetGoalsByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetLiabilitiesByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetLiabilitiesByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/NetWorth/Liabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetLiabilitiesByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetLiabilitiesByClientidPlanid(Async)");
        }

        return livePlanGetLiabilitiesByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves liabilities for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel livePlanGetLiabilitiesByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel> localVarResp = livePlanGetLiabilitiesByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves liabilities for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel> livePlanGetLiabilitiesByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetLiabilitiesByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves liabilities for a given plan (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetLiabilitiesByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetLiabilitiesByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetLifestyleAssetsByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetLifestyleAssetsByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/NetWorth/LifestyleAssets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetLifestyleAssetsByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetLifestyleAssetsByClientidPlanid(Async)");
        }

        return livePlanGetLifestyleAssetsByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves lifestyle assets for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel livePlanGetLifestyleAssetsByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel> localVarResp = livePlanGetLifestyleAssetsByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves lifestyle assets for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel> livePlanGetLifestyleAssetsByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetLifestyleAssetsByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves lifestyle assets for a given plan (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetLifestyleAssetsByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetLifestyleAssetsByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid
     * @param id  (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/Projections/{id}/NeedsVsAbilities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidValidateBeforeCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(Async)");
        }

        return livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCall(id, planId, clientId, _callback);

    }

    /**
     * Retrieves needs vs abilities projections
     * 
     * @param id  (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(Integer id, String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel> localVarResp = livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidWithHttpInfo(id, planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves needs vs abilities projections
     * 
     * @param id  (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel> livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidWithHttpInfo(Integer id, String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidValidateBeforeCall(id, planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves needs vs abilities projections (asynchronously)
     * 
     * @param id  (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidAsync(Integer id, String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidValidateBeforeCall(id, planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetProjectedNetWorthByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetProjectedNetWorthByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/Projections/NetWorth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetProjectedNetWorthByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetProjectedNetWorthByClientidPlanid(Async)");
        }

        return livePlanGetProjectedNetWorthByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves net worth projections
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel livePlanGetProjectedNetWorthByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel> localVarResp = livePlanGetProjectedNetWorthByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves net worth projections
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel> livePlanGetProjectedNetWorthByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetProjectedNetWorthByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves net worth projections (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetProjectedNetWorthByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetProjectedNetWorthByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetRealEstateAssetsByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetRealEstateAssetsByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/NetWorth/RealEstate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetRealEstateAssetsByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetRealEstateAssetsByClientidPlanid(Async)");
        }

        return livePlanGetRealEstateAssetsByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieves real estate accounts for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel livePlanGetRealEstateAssetsByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel> localVarResp = livePlanGetRealEstateAssetsByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieves real estate accounts for a given plan
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel> livePlanGetRealEstateAssetsByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetRealEstateAssetsByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves real estate accounts for a given plan (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetRealEstateAssetsByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetRealEstateAssetsByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for livePlanGetWhatAreMyOptionsByIdClientidPlanid
     * @param id The id of the goal (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetWhatAreMyOptionsByIdClientidPlanidCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LivePlan/Goals/{id}/WhatAreMyOptions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livePlanGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling livePlanGetWhatAreMyOptionsByIdClientidPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling livePlanGetWhatAreMyOptionsByIdClientidPlanid(Async)");
        }

        return livePlanGetWhatAreMyOptionsByIdClientidPlanidCall(id, planId, clientId, _callback);

    }

    /**
     * Retrieve WAMO values for a given goal
     * This function retrieves the WAMO values for the specified goal
     * @param id The id of the goal (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel livePlanGetWhatAreMyOptionsByIdClientidPlanid(Integer id, String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> localVarResp = livePlanGetWhatAreMyOptionsByIdClientidPlanidWithHttpInfo(id, planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieve WAMO values for a given goal
     * This function retrieves the WAMO values for the specified goal
     * @param id The id of the goal (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> livePlanGetWhatAreMyOptionsByIdClientidPlanidWithHttpInfo(Integer id, String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = livePlanGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(id, planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve WAMO values for a given goal (asynchronously)
     * This function retrieves the WAMO values for the specified goal
     * @param id The id of the goal (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call livePlanGetWhatAreMyOptionsByIdClientidPlanidAsync(Integer id, String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = livePlanGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(id, planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
