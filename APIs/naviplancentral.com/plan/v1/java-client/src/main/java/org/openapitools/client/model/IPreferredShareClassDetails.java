/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.FormattedEnumTypeDistributionDividendType;
import org.openapitools.client.model.IShareClassStructure;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPreferredShareClassDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPreferredShareClassDetails {
  public static final String SERIALIZED_NAME_ANNUAL_DIVIDEND_YIELD = "annualDividendYield";
  @SerializedName(SERIALIZED_NAME_ANNUAL_DIVIDEND_YIELD)
  private Percent annualDividendYield;

  public static final String SERIALIZED_NAME_DIVIDEND_TYPE = "dividendType";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_TYPE)
  private FormattedEnumTypeDistributionDividendType dividendType;

  public static final String SERIALIZED_NAME_REDEMPTION_VALUE_PER_SHARE = "redemptionValuePerShare";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_VALUE_PER_SHARE)
  private Currency redemptionValuePerShare;

  public static final String SERIALIZED_NAME_SHARE_CLASS_STRUCTURE = "shareClassStructure";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_STRUCTURE)
  private IShareClassStructure shareClassStructure;

  public IPreferredShareClassDetails() {
  }

  public IPreferredShareClassDetails annualDividendYield(Percent annualDividendYield) {
    this.annualDividendYield = annualDividendYield;
    return this;
  }

  /**
   * Get annualDividendYield
   * @return annualDividendYield
   */
  @javax.annotation.Nullable
  public Percent getAnnualDividendYield() {
    return annualDividendYield;
  }

  public void setAnnualDividendYield(Percent annualDividendYield) {
    this.annualDividendYield = annualDividendYield;
  }


  public IPreferredShareClassDetails dividendType(FormattedEnumTypeDistributionDividendType dividendType) {
    this.dividendType = dividendType;
    return this;
  }

  /**
   * Get dividendType
   * @return dividendType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeDistributionDividendType getDividendType() {
    return dividendType;
  }

  public void setDividendType(FormattedEnumTypeDistributionDividendType dividendType) {
    this.dividendType = dividendType;
  }


  public IPreferredShareClassDetails redemptionValuePerShare(Currency redemptionValuePerShare) {
    this.redemptionValuePerShare = redemptionValuePerShare;
    return this;
  }

  /**
   * Get redemptionValuePerShare
   * @return redemptionValuePerShare
   */
  @javax.annotation.Nullable
  public Currency getRedemptionValuePerShare() {
    return redemptionValuePerShare;
  }

  public void setRedemptionValuePerShare(Currency redemptionValuePerShare) {
    this.redemptionValuePerShare = redemptionValuePerShare;
  }


  public IPreferredShareClassDetails shareClassStructure(IShareClassStructure shareClassStructure) {
    this.shareClassStructure = shareClassStructure;
    return this;
  }

  /**
   * Get shareClassStructure
   * @return shareClassStructure
   */
  @javax.annotation.Nullable
  public IShareClassStructure getShareClassStructure() {
    return shareClassStructure;
  }

  public void setShareClassStructure(IShareClassStructure shareClassStructure) {
    this.shareClassStructure = shareClassStructure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPreferredShareClassDetails ipreferredShareClassDetails = (IPreferredShareClassDetails) o;
    return Objects.equals(this.annualDividendYield, ipreferredShareClassDetails.annualDividendYield) &&
        Objects.equals(this.dividendType, ipreferredShareClassDetails.dividendType) &&
        Objects.equals(this.redemptionValuePerShare, ipreferredShareClassDetails.redemptionValuePerShare) &&
        Objects.equals(this.shareClassStructure, ipreferredShareClassDetails.shareClassStructure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualDividendYield, dividendType, redemptionValuePerShare, shareClassStructure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPreferredShareClassDetails {\n");
    sb.append("    annualDividendYield: ").append(toIndentedString(annualDividendYield)).append("\n");
    sb.append("    dividendType: ").append(toIndentedString(dividendType)).append("\n");
    sb.append("    redemptionValuePerShare: ").append(toIndentedString(redemptionValuePerShare)).append("\n");
    sb.append("    shareClassStructure: ").append(toIndentedString(shareClassStructure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualDividendYield");
    openapiFields.add("dividendType");
    openapiFields.add("redemptionValuePerShare");
    openapiFields.add("shareClassStructure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPreferredShareClassDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPreferredShareClassDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPreferredShareClassDetails is not found in the empty JSON string", IPreferredShareClassDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPreferredShareClassDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPreferredShareClassDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualDividendYield`
      if (jsonObj.get("annualDividendYield") != null && !jsonObj.get("annualDividendYield").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("annualDividendYield"));
      }
      // validate the optional field `dividendType`
      if (jsonObj.get("dividendType") != null && !jsonObj.get("dividendType").isJsonNull()) {
        FormattedEnumTypeDistributionDividendType.validateJsonElement(jsonObj.get("dividendType"));
      }
      // validate the optional field `redemptionValuePerShare`
      if (jsonObj.get("redemptionValuePerShare") != null && !jsonObj.get("redemptionValuePerShare").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("redemptionValuePerShare"));
      }
      // validate the optional field `shareClassStructure`
      if (jsonObj.get("shareClassStructure") != null && !jsonObj.get("shareClassStructure").isJsonNull()) {
        IShareClassStructure.validateJsonElement(jsonObj.get("shareClassStructure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPreferredShareClassDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPreferredShareClassDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPreferredShareClassDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPreferredShareClassDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<IPreferredShareClassDetails>() {
           @Override
           public void write(JsonWriter out, IPreferredShareClassDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPreferredShareClassDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPreferredShareClassDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPreferredShareClassDetails
   * @throws IOException if the JSON string is invalid with respect to IPreferredShareClassDetails
   */
  public static IPreferredShareClassDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPreferredShareClassDetails.class);
  }

  /**
   * Convert an instance of IPreferredShareClassDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

