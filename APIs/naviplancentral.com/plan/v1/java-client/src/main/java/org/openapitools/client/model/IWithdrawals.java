/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ILoanRepaymentToShareholder;
import org.openapitools.client.model.IManualDividendDistribution;
import org.openapitools.client.model.IShareRedemption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IWithdrawals
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IWithdrawals {
  public static final String SERIALIZED_NAME_LOAN_REPAYMENTS_TO_SHAREHOLDER = "loanRepaymentsToShareholder";
  @SerializedName(SERIALIZED_NAME_LOAN_REPAYMENTS_TO_SHAREHOLDER)
  private List<ILoanRepaymentToShareholder> loanRepaymentsToShareholder = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANUAL_DIVIDEND_DISTRIBUTIONS = "manualDividendDistributions";
  @SerializedName(SERIALIZED_NAME_MANUAL_DIVIDEND_DISTRIBUTIONS)
  private List<IManualDividendDistribution> manualDividendDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARE_REDEMPTIONS = "shareRedemptions";
  @SerializedName(SERIALIZED_NAME_SHARE_REDEMPTIONS)
  private List<IShareRedemption> shareRedemptions = new ArrayList<>();

  public IWithdrawals() {
  }

  public IWithdrawals(
     List<ILoanRepaymentToShareholder> loanRepaymentsToShareholder, 
     List<IManualDividendDistribution> manualDividendDistributions, 
     List<IShareRedemption> shareRedemptions
  ) {
    this();
    this.loanRepaymentsToShareholder = loanRepaymentsToShareholder;
    this.manualDividendDistributions = manualDividendDistributions;
    this.shareRedemptions = shareRedemptions;
  }

  /**
   * Get loanRepaymentsToShareholder
   * @return loanRepaymentsToShareholder
   */
  @javax.annotation.Nullable
  public List<ILoanRepaymentToShareholder> getLoanRepaymentsToShareholder() {
    return loanRepaymentsToShareholder;
  }



  /**
   * Get manualDividendDistributions
   * @return manualDividendDistributions
   */
  @javax.annotation.Nullable
  public List<IManualDividendDistribution> getManualDividendDistributions() {
    return manualDividendDistributions;
  }



  /**
   * Get shareRedemptions
   * @return shareRedemptions
   */
  @javax.annotation.Nullable
  public List<IShareRedemption> getShareRedemptions() {
    return shareRedemptions;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IWithdrawals iwithdrawals = (IWithdrawals) o;
    return Objects.equals(this.loanRepaymentsToShareholder, iwithdrawals.loanRepaymentsToShareholder) &&
        Objects.equals(this.manualDividendDistributions, iwithdrawals.manualDividendDistributions) &&
        Objects.equals(this.shareRedemptions, iwithdrawals.shareRedemptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loanRepaymentsToShareholder, manualDividendDistributions, shareRedemptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IWithdrawals {\n");
    sb.append("    loanRepaymentsToShareholder: ").append(toIndentedString(loanRepaymentsToShareholder)).append("\n");
    sb.append("    manualDividendDistributions: ").append(toIndentedString(manualDividendDistributions)).append("\n");
    sb.append("    shareRedemptions: ").append(toIndentedString(shareRedemptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loanRepaymentsToShareholder");
    openapiFields.add("manualDividendDistributions");
    openapiFields.add("shareRedemptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IWithdrawals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IWithdrawals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IWithdrawals is not found in the empty JSON string", IWithdrawals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IWithdrawals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IWithdrawals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("loanRepaymentsToShareholder") != null && !jsonObj.get("loanRepaymentsToShareholder").isJsonNull()) {
        JsonArray jsonArrayloanRepaymentsToShareholder = jsonObj.getAsJsonArray("loanRepaymentsToShareholder");
        if (jsonArrayloanRepaymentsToShareholder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loanRepaymentsToShareholder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loanRepaymentsToShareholder` to be an array in the JSON string but got `%s`", jsonObj.get("loanRepaymentsToShareholder").toString()));
          }

          // validate the optional field `loanRepaymentsToShareholder` (array)
          for (int i = 0; i < jsonArrayloanRepaymentsToShareholder.size(); i++) {
            ILoanRepaymentToShareholder.validateJsonElement(jsonArrayloanRepaymentsToShareholder.get(i));
          };
        }
      }
      if (jsonObj.get("manualDividendDistributions") != null && !jsonObj.get("manualDividendDistributions").isJsonNull()) {
        JsonArray jsonArraymanualDividendDistributions = jsonObj.getAsJsonArray("manualDividendDistributions");
        if (jsonArraymanualDividendDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manualDividendDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manualDividendDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("manualDividendDistributions").toString()));
          }

          // validate the optional field `manualDividendDistributions` (array)
          for (int i = 0; i < jsonArraymanualDividendDistributions.size(); i++) {
            IManualDividendDistribution.validateJsonElement(jsonArraymanualDividendDistributions.get(i));
          };
        }
      }
      if (jsonObj.get("shareRedemptions") != null && !jsonObj.get("shareRedemptions").isJsonNull()) {
        JsonArray jsonArrayshareRedemptions = jsonObj.getAsJsonArray("shareRedemptions");
        if (jsonArrayshareRedemptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareRedemptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareRedemptions` to be an array in the JSON string but got `%s`", jsonObj.get("shareRedemptions").toString()));
          }

          // validate the optional field `shareRedemptions` (array)
          for (int i = 0; i < jsonArrayshareRedemptions.size(); i++) {
            IShareRedemption.validateJsonElement(jsonArrayshareRedemptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IWithdrawals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IWithdrawals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IWithdrawals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IWithdrawals.class));

       return (TypeAdapter<T>) new TypeAdapter<IWithdrawals>() {
           @Override
           public void write(JsonWriter out, IWithdrawals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IWithdrawals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IWithdrawals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IWithdrawals
   * @throws IOException if the JSON string is invalid with respect to IWithdrawals
   */
  public static IWithdrawals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IWithdrawals.class);
  }

  /**
   * Convert an instance of IWithdrawals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

