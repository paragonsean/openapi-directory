/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRestrictedStock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IRestrictedStock {
  public static final String SERIALIZED_NAME_ANNUAL_DIVIDEND_PER_UNIT = "annualDividendPerUnit";
  @SerializedName(SERIALIZED_NAME_ANNUAL_DIVIDEND_PER_UNIT)
  private Currency annualDividendPerUnit;

  public static final String SERIALIZED_NAME_APPLICABLE_RANGE_RETIREMENT_LIQUIDATED_ASSETS = "applicableRangeRetirementLiquidatedAssets";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_RANGE_RETIREMENT_LIQUIDATED_ASSETS)
  private FormattedDateRange applicableRangeRetirementLiquidatedAssets;

  public static final String SERIALIZED_NAME_AWARDED_DATE = "awardedDate";
  @SerializedName(SERIALIZED_NAME_AWARDED_DATE)
  private Date awardedDate;

  public static final String SERIALIZED_NAME_CURRENT_UNIT_VALUE = "currentUnitValue";
  @SerializedName(SERIALIZED_NAME_CURRENT_UNIT_VALUE)
  private Currency currentUnitValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROWTH_RATE = "growthRate";
  @SerializedName(SERIALIZED_NAME_GROWTH_RATE)
  private Percent growthRate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS = "numberOfUnits";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS)
  private Integer numberOfUnits;

  /**
   * Gets or Sets owner
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_PRICE_PAID_FOR_AWARD = "pricePaidForAward";
  @SerializedName(SERIALIZED_NAME_PRICE_PAID_FOR_AWARD)
  private Currency pricePaidForAward;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public IRestrictedStock() {
  }

  public IRestrictedStock(
     String description, 
     String id, 
     Integer numberOfUnits, 
     OwnerEnum owner, 
     String type
  ) {
    this();
    this.description = description;
    this.id = id;
    this.numberOfUnits = numberOfUnits;
    this.owner = owner;
    this.type = type;
  }

  public IRestrictedStock annualDividendPerUnit(Currency annualDividendPerUnit) {
    this.annualDividendPerUnit = annualDividendPerUnit;
    return this;
  }

  /**
   * Get annualDividendPerUnit
   * @return annualDividendPerUnit
   */
  @javax.annotation.Nullable
  public Currency getAnnualDividendPerUnit() {
    return annualDividendPerUnit;
  }

  public void setAnnualDividendPerUnit(Currency annualDividendPerUnit) {
    this.annualDividendPerUnit = annualDividendPerUnit;
  }


  public IRestrictedStock applicableRangeRetirementLiquidatedAssets(FormattedDateRange applicableRangeRetirementLiquidatedAssets) {
    this.applicableRangeRetirementLiquidatedAssets = applicableRangeRetirementLiquidatedAssets;
    return this;
  }

  /**
   * Get applicableRangeRetirementLiquidatedAssets
   * @return applicableRangeRetirementLiquidatedAssets
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableRangeRetirementLiquidatedAssets() {
    return applicableRangeRetirementLiquidatedAssets;
  }

  public void setApplicableRangeRetirementLiquidatedAssets(FormattedDateRange applicableRangeRetirementLiquidatedAssets) {
    this.applicableRangeRetirementLiquidatedAssets = applicableRangeRetirementLiquidatedAssets;
  }


  public IRestrictedStock awardedDate(Date awardedDate) {
    this.awardedDate = awardedDate;
    return this;
  }

  /**
   * Get awardedDate
   * @return awardedDate
   */
  @javax.annotation.Nullable
  public Date getAwardedDate() {
    return awardedDate;
  }

  public void setAwardedDate(Date awardedDate) {
    this.awardedDate = awardedDate;
  }


  public IRestrictedStock currentUnitValue(Currency currentUnitValue) {
    this.currentUnitValue = currentUnitValue;
    return this;
  }

  /**
   * Get currentUnitValue
   * @return currentUnitValue
   */
  @javax.annotation.Nullable
  public Currency getCurrentUnitValue() {
    return currentUnitValue;
  }

  public void setCurrentUnitValue(Currency currentUnitValue) {
    this.currentUnitValue = currentUnitValue;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public IRestrictedStock growthRate(Percent growthRate) {
    this.growthRate = growthRate;
    return this;
  }

  /**
   * Get growthRate
   * @return growthRate
   */
  @javax.annotation.Nullable
  public Percent getGrowthRate() {
    return growthRate;
  }

  public void setGrowthRate(Percent growthRate) {
    this.growthRate = growthRate;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get numberOfUnits
   * @return numberOfUnits
   */
  @javax.annotation.Nullable
  public Integer getNumberOfUnits() {
    return numberOfUnits;
  }



  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }



  public IRestrictedStock pricePaidForAward(Currency pricePaidForAward) {
    this.pricePaidForAward = pricePaidForAward;
    return this;
  }

  /**
   * Get pricePaidForAward
   * @return pricePaidForAward
   */
  @javax.annotation.Nullable
  public Currency getPricePaidForAward() {
    return pricePaidForAward;
  }

  public void setPricePaidForAward(Currency pricePaidForAward) {
    this.pricePaidForAward = pricePaidForAward;
  }


  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRestrictedStock irestrictedStock = (IRestrictedStock) o;
    return Objects.equals(this.annualDividendPerUnit, irestrictedStock.annualDividendPerUnit) &&
        Objects.equals(this.applicableRangeRetirementLiquidatedAssets, irestrictedStock.applicableRangeRetirementLiquidatedAssets) &&
        Objects.equals(this.awardedDate, irestrictedStock.awardedDate) &&
        Objects.equals(this.currentUnitValue, irestrictedStock.currentUnitValue) &&
        Objects.equals(this.description, irestrictedStock.description) &&
        Objects.equals(this.growthRate, irestrictedStock.growthRate) &&
        Objects.equals(this.id, irestrictedStock.id) &&
        Objects.equals(this.numberOfUnits, irestrictedStock.numberOfUnits) &&
        Objects.equals(this.owner, irestrictedStock.owner) &&
        Objects.equals(this.pricePaidForAward, irestrictedStock.pricePaidForAward) &&
        Objects.equals(this.type, irestrictedStock.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualDividendPerUnit, applicableRangeRetirementLiquidatedAssets, awardedDate, currentUnitValue, description, growthRate, id, numberOfUnits, owner, pricePaidForAward, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRestrictedStock {\n");
    sb.append("    annualDividendPerUnit: ").append(toIndentedString(annualDividendPerUnit)).append("\n");
    sb.append("    applicableRangeRetirementLiquidatedAssets: ").append(toIndentedString(applicableRangeRetirementLiquidatedAssets)).append("\n");
    sb.append("    awardedDate: ").append(toIndentedString(awardedDate)).append("\n");
    sb.append("    currentUnitValue: ").append(toIndentedString(currentUnitValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    growthRate: ").append(toIndentedString(growthRate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    numberOfUnits: ").append(toIndentedString(numberOfUnits)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    pricePaidForAward: ").append(toIndentedString(pricePaidForAward)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualDividendPerUnit");
    openapiFields.add("applicableRangeRetirementLiquidatedAssets");
    openapiFields.add("awardedDate");
    openapiFields.add("currentUnitValue");
    openapiFields.add("description");
    openapiFields.add("growthRate");
    openapiFields.add("id");
    openapiFields.add("numberOfUnits");
    openapiFields.add("owner");
    openapiFields.add("pricePaidForAward");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRestrictedStock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRestrictedStock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRestrictedStock is not found in the empty JSON string", IRestrictedStock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRestrictedStock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRestrictedStock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualDividendPerUnit`
      if (jsonObj.get("annualDividendPerUnit") != null && !jsonObj.get("annualDividendPerUnit").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("annualDividendPerUnit"));
      }
      // validate the optional field `applicableRangeRetirementLiquidatedAssets`
      if (jsonObj.get("applicableRangeRetirementLiquidatedAssets") != null && !jsonObj.get("applicableRangeRetirementLiquidatedAssets").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableRangeRetirementLiquidatedAssets"));
      }
      // validate the optional field `awardedDate`
      if (jsonObj.get("awardedDate") != null && !jsonObj.get("awardedDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("awardedDate"));
      }
      // validate the optional field `currentUnitValue`
      if (jsonObj.get("currentUnitValue") != null && !jsonObj.get("currentUnitValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentUnitValue"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `growthRate`
      if (jsonObj.get("growthRate") != null && !jsonObj.get("growthRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("growthRate"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `pricePaidForAward`
      if (jsonObj.get("pricePaidForAward") != null && !jsonObj.get("pricePaidForAward").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("pricePaidForAward"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRestrictedStock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRestrictedStock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRestrictedStock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRestrictedStock.class));

       return (TypeAdapter<T>) new TypeAdapter<IRestrictedStock>() {
           @Override
           public void write(JsonWriter out, IRestrictedStock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRestrictedStock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRestrictedStock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRestrictedStock
   * @throws IOException if the JSON string is invalid with respect to IRestrictedStock
   */
  public static IRestrictedStock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRestrictedStock.class);
  }

  /**
   * Convert an instance of IRestrictedStock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

