/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IBusinessPhoneNumbers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPhoneNumbers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPhoneNumbers {
  public static final String SERIALIZED_NAME_ADDITIONAL_NUMBERS = "additionalNumbers";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NUMBERS)
  private IBusinessPhoneNumbers additionalNumbers;

  public static final String SERIALIZED_NAME_BUSINESS = "business";
  @SerializedName(SERIALIZED_NAME_BUSINESS)
  private String business;

  public static final String SERIALIZED_NAME_CELL = "cell";
  @SerializedName(SERIALIZED_NAME_CELL)
  private String cell;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private String home;

  public static final String SERIALIZED_NAME_PAGER = "pager";
  @SerializedName(SERIALIZED_NAME_PAGER)
  private String pager;

  public IPhoneNumbers() {
  }

  public IPhoneNumbers(
     String business, 
     String cell, 
     String fax, 
     String home, 
     String pager
  ) {
    this();
    this.business = business;
    this.cell = cell;
    this.fax = fax;
    this.home = home;
    this.pager = pager;
  }

  public IPhoneNumbers additionalNumbers(IBusinessPhoneNumbers additionalNumbers) {
    this.additionalNumbers = additionalNumbers;
    return this;
  }

  /**
   * Get additionalNumbers
   * @return additionalNumbers
   */
  @javax.annotation.Nullable
  public IBusinessPhoneNumbers getAdditionalNumbers() {
    return additionalNumbers;
  }

  public void setAdditionalNumbers(IBusinessPhoneNumbers additionalNumbers) {
    this.additionalNumbers = additionalNumbers;
  }


  /**
   * Get business
   * @return business
   */
  @javax.annotation.Nullable
  public String getBusiness() {
    return business;
  }



  /**
   * Get cell
   * @return cell
   */
  @javax.annotation.Nullable
  public String getCell() {
    return cell;
  }



  /**
   * Get fax
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }



  /**
   * Get home
   * @return home
   */
  @javax.annotation.Nullable
  public String getHome() {
    return home;
  }



  /**
   * Get pager
   * @return pager
   */
  @javax.annotation.Nullable
  public String getPager() {
    return pager;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPhoneNumbers iphoneNumbers = (IPhoneNumbers) o;
    return Objects.equals(this.additionalNumbers, iphoneNumbers.additionalNumbers) &&
        Objects.equals(this.business, iphoneNumbers.business) &&
        Objects.equals(this.cell, iphoneNumbers.cell) &&
        Objects.equals(this.fax, iphoneNumbers.fax) &&
        Objects.equals(this.home, iphoneNumbers.home) &&
        Objects.equals(this.pager, iphoneNumbers.pager);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNumbers, business, cell, fax, home, pager);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPhoneNumbers {\n");
    sb.append("    additionalNumbers: ").append(toIndentedString(additionalNumbers)).append("\n");
    sb.append("    business: ").append(toIndentedString(business)).append("\n");
    sb.append("    cell: ").append(toIndentedString(cell)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    pager: ").append(toIndentedString(pager)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNumbers");
    openapiFields.add("business");
    openapiFields.add("cell");
    openapiFields.add("fax");
    openapiFields.add("home");
    openapiFields.add("pager");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPhoneNumbers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPhoneNumbers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPhoneNumbers is not found in the empty JSON string", IPhoneNumbers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPhoneNumbers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPhoneNumbers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalNumbers`
      if (jsonObj.get("additionalNumbers") != null && !jsonObj.get("additionalNumbers").isJsonNull()) {
        IBusinessPhoneNumbers.validateJsonElement(jsonObj.get("additionalNumbers"));
      }
      if ((jsonObj.get("business") != null && !jsonObj.get("business").isJsonNull()) && !jsonObj.get("business").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `business` to be a primitive type in the JSON string but got `%s`", jsonObj.get("business").toString()));
      }
      if ((jsonObj.get("cell") != null && !jsonObj.get("cell").isJsonNull()) && !jsonObj.get("cell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cell").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("home") != null && !jsonObj.get("home").isJsonNull()) && !jsonObj.get("home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home").toString()));
      }
      if ((jsonObj.get("pager") != null && !jsonObj.get("pager").isJsonNull()) && !jsonObj.get("pager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pager").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPhoneNumbers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPhoneNumbers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPhoneNumbers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPhoneNumbers.class));

       return (TypeAdapter<T>) new TypeAdapter<IPhoneNumbers>() {
           @Override
           public void write(JsonWriter out, IPhoneNumbers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPhoneNumbers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPhoneNumbers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPhoneNumbers
   * @throws IOException if the JSON string is invalid with respect to IPhoneNumbers
   */
  public static IPhoneNumbers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPhoneNumbers.class);
  }

  /**
   * Convert an instance of IPhoneNumbers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

