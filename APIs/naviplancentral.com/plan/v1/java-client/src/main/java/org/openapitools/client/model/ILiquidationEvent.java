/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ILiquidationEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ILiquidationEvent {
  public static final String SERIALIZED_NAME_FIRST_SALE_DATE = "firstSaleDate";
  @SerializedName(SERIALIZED_NAME_FIRST_SALE_DATE)
  private Date firstSaleDate;

  public static final String SERIALIZED_NAME_LAST_SALE_DATE = "lastSaleDate";
  @SerializedName(SERIALIZED_NAME_LAST_SALE_DATE)
  private Date lastSaleDate;

  /**
   * Gets or Sets liquidationType
   */
  @JsonAdapter(LiquidationTypeEnum.Adapter.class)
  public enum LiquidationTypeEnum {
    SELL_AT_PLAN_END("SellAtPlanEnd"),
    
    SELL_ALL_ON_SPECIFIC_DATE("SellAllOnSpecificDate"),
    
    SELL_IN_INSTALLMENTS("SellInInstallments");

    private String value;

    LiquidationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LiquidationTypeEnum fromValue(String value) {
      for (LiquidationTypeEnum b : LiquidationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LiquidationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LiquidationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LiquidationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LiquidationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LiquidationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIQUIDATION_TYPE = "liquidationType";
  @SerializedName(SERIALIZED_NAME_LIQUIDATION_TYPE)
  private LiquidationTypeEnum liquidationType;

  public static final String SERIALIZED_NAME_LIQUIDATION_TYPE_DESCRIPTION = "liquidationTypeDescription";
  @SerializedName(SERIALIZED_NAME_LIQUIDATION_TYPE_DESCRIPTION)
  private String liquidationTypeDescription;

  public static final String SERIALIZED_NAME_SALE_DATES_DESCRIPTION = "saleDatesDescription";
  @SerializedName(SERIALIZED_NAME_SALE_DATES_DESCRIPTION)
  private String saleDatesDescription;

  public ILiquidationEvent() {
  }

  public ILiquidationEvent(
     LiquidationTypeEnum liquidationType, 
     String liquidationTypeDescription, 
     String saleDatesDescription
  ) {
    this();
    this.liquidationType = liquidationType;
    this.liquidationTypeDescription = liquidationTypeDescription;
    this.saleDatesDescription = saleDatesDescription;
  }

  public ILiquidationEvent firstSaleDate(Date firstSaleDate) {
    this.firstSaleDate = firstSaleDate;
    return this;
  }

  /**
   * Get firstSaleDate
   * @return firstSaleDate
   */
  @javax.annotation.Nullable
  public Date getFirstSaleDate() {
    return firstSaleDate;
  }

  public void setFirstSaleDate(Date firstSaleDate) {
    this.firstSaleDate = firstSaleDate;
  }


  public ILiquidationEvent lastSaleDate(Date lastSaleDate) {
    this.lastSaleDate = lastSaleDate;
    return this;
  }

  /**
   * Get lastSaleDate
   * @return lastSaleDate
   */
  @javax.annotation.Nullable
  public Date getLastSaleDate() {
    return lastSaleDate;
  }

  public void setLastSaleDate(Date lastSaleDate) {
    this.lastSaleDate = lastSaleDate;
  }


  /**
   * Get liquidationType
   * @return liquidationType
   */
  @javax.annotation.Nullable
  public LiquidationTypeEnum getLiquidationType() {
    return liquidationType;
  }



  /**
   * Get liquidationTypeDescription
   * @return liquidationTypeDescription
   */
  @javax.annotation.Nullable
  public String getLiquidationTypeDescription() {
    return liquidationTypeDescription;
  }



  /**
   * Get saleDatesDescription
   * @return saleDatesDescription
   */
  @javax.annotation.Nullable
  public String getSaleDatesDescription() {
    return saleDatesDescription;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ILiquidationEvent iliquidationEvent = (ILiquidationEvent) o;
    return Objects.equals(this.firstSaleDate, iliquidationEvent.firstSaleDate) &&
        Objects.equals(this.lastSaleDate, iliquidationEvent.lastSaleDate) &&
        Objects.equals(this.liquidationType, iliquidationEvent.liquidationType) &&
        Objects.equals(this.liquidationTypeDescription, iliquidationEvent.liquidationTypeDescription) &&
        Objects.equals(this.saleDatesDescription, iliquidationEvent.saleDatesDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstSaleDate, lastSaleDate, liquidationType, liquidationTypeDescription, saleDatesDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ILiquidationEvent {\n");
    sb.append("    firstSaleDate: ").append(toIndentedString(firstSaleDate)).append("\n");
    sb.append("    lastSaleDate: ").append(toIndentedString(lastSaleDate)).append("\n");
    sb.append("    liquidationType: ").append(toIndentedString(liquidationType)).append("\n");
    sb.append("    liquidationTypeDescription: ").append(toIndentedString(liquidationTypeDescription)).append("\n");
    sb.append("    saleDatesDescription: ").append(toIndentedString(saleDatesDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstSaleDate");
    openapiFields.add("lastSaleDate");
    openapiFields.add("liquidationType");
    openapiFields.add("liquidationTypeDescription");
    openapiFields.add("saleDatesDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ILiquidationEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ILiquidationEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ILiquidationEvent is not found in the empty JSON string", ILiquidationEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ILiquidationEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ILiquidationEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstSaleDate`
      if (jsonObj.get("firstSaleDate") != null && !jsonObj.get("firstSaleDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("firstSaleDate"));
      }
      // validate the optional field `lastSaleDate`
      if (jsonObj.get("lastSaleDate") != null && !jsonObj.get("lastSaleDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("lastSaleDate"));
      }
      if ((jsonObj.get("liquidationType") != null && !jsonObj.get("liquidationType").isJsonNull()) && !jsonObj.get("liquidationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidationType").toString()));
      }
      // validate the optional field `liquidationType`
      if (jsonObj.get("liquidationType") != null && !jsonObj.get("liquidationType").isJsonNull()) {
        LiquidationTypeEnum.validateJsonElement(jsonObj.get("liquidationType"));
      }
      if ((jsonObj.get("liquidationTypeDescription") != null && !jsonObj.get("liquidationTypeDescription").isJsonNull()) && !jsonObj.get("liquidationTypeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidationTypeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidationTypeDescription").toString()));
      }
      if ((jsonObj.get("saleDatesDescription") != null && !jsonObj.get("saleDatesDescription").isJsonNull()) && !jsonObj.get("saleDatesDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saleDatesDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saleDatesDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ILiquidationEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ILiquidationEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ILiquidationEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ILiquidationEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ILiquidationEvent>() {
           @Override
           public void write(JsonWriter out, ILiquidationEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ILiquidationEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ILiquidationEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ILiquidationEvent
   * @throws IOException if the JSON string is invalid with respect to ILiquidationEvent
   */
  public static ILiquidationEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ILiquidationEvent.class);
  }

  /**
   * Convert an instance of ILiquidationEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

