/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoalAdjustmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalAdjustmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoalAdjustmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for goalAdjustmentsGetEducationByIdClientidPlanid
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetEducationByIdClientidPlanidCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/Education/{id}/Adjustments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetEducationByIdClientidPlanidValidateBeforeCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling goalAdjustmentsGetEducationByIdClientidPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetEducationByIdClientidPlanid(Async)");
        }

        return goalAdjustmentsGetEducationByIdClientidPlanidCall(id, planId, clientId, _callback);

    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel goalAdjustmentsGetEducationByIdClientidPlanid(Integer id, String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel> localVarResp = goalAdjustmentsGetEducationByIdClientidPlanidWithHttpInfo(id, planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel> goalAdjustmentsGetEducationByIdClientidPlanidWithHttpInfo(Integer id, String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetEducationByIdClientidPlanidValidateBeforeCall(id, planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the adjustments (asynchronously)
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetEducationByIdClientidPlanidAsync(Integer id, String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetEducationByIdClientidPlanidValidateBeforeCall(id, planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restrictions successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/Restrictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid(Async)");
        }

        return goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Returns a list of goal adjustment restrictions.
     * This function returns a list of adjustment restrictions for all goals.
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restrictions successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel> localVarResp = goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of goal adjustment restrictions.
     * This function returns a list of adjustment restrictions for all goals.
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restrictions successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel> goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of goal adjustment restrictions. (asynchronously)
     * This function returns a list of adjustment restrictions for all goals.
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restrictions successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsGetGoalSuccessRatesByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Goal Success Rates successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/GoalSuccessRates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetGoalSuccessRatesByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetGoalSuccessRatesByClientidPlanid(Async)");
        }

        return goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Returns a list of goals with their relevant success rates.
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Goal Success Rates successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel goalAdjustmentsGetGoalSuccessRatesByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel> localVarResp = goalAdjustmentsGetGoalSuccessRatesByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of goals with their relevant success rates.
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Goal Success Rates successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel> goalAdjustmentsGetGoalSuccessRatesByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetGoalSuccessRatesByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of goals with their relevant success rates. (asynchronously)
     * 
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Goal Success Rates successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetGoalSuccessRatesByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetGoalSuccessRatesByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsGetMajorPurchaseByIdClientidPlanid
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/MajorPurchase/{id}/Adjustments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetMajorPurchaseByIdClientidPlanidValidateBeforeCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(Async)");
        }

        return goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCall(id, planId, clientId, _callback);

    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(Integer id, String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel> localVarResp = goalAdjustmentsGetMajorPurchaseByIdClientidPlanidWithHttpInfo(id, planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel> goalAdjustmentsGetMajorPurchaseByIdClientidPlanidWithHttpInfo(Integer id, String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetMajorPurchaseByIdClientidPlanidValidateBeforeCall(id, planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the adjustments (asynchronously)
     * This function retrieves a goal and the adjustments made to it
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetMajorPurchaseByIdClientidPlanidAsync(Integer id, String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetMajorPurchaseByIdClientidPlanidValidateBeforeCall(id, planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsGetRetirementByClientidPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetRetirementByClientidPlanidCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/Retirement/Adjustments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetRetirementByClientidPlanidValidateBeforeCall(String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetRetirementByClientidPlanid(Async)");
        }

        return goalAdjustmentsGetRetirementByClientidPlanidCall(planId, clientId, _callback);

    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it for a particular client
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel goalAdjustmentsGetRetirementByClientidPlanid(String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel> localVarResp = goalAdjustmentsGetRetirementByClientidPlanidWithHttpInfo(planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the adjustments
     * This function retrieves a goal and the adjustments made to it for a particular client
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel> goalAdjustmentsGetRetirementByClientidPlanidWithHttpInfo(String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetRetirementByClientidPlanidValidateBeforeCall(planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the adjustments (asynchronously)
     * This function retrieves a goal and the adjustments made to it for a particular client
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetRetirementByClientidPlanidAsync(String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetRetirementByClientidPlanidValidateBeforeCall(planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid
     * @param id The id of the goal to retrieve WAMO values for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> What are my options results successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/{id}/WhatAreMyOptions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(Integer id, String planId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(Async)");
        }

        return goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCall(id, planId, clientId, _callback);

    }

    /**
     * Returns WAMO values for current goal
     * 
     * @param id The id of the goal to retrieve WAMO values for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> What are my options results successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(Integer id, String planId, String clientId) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> localVarResp = goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidWithHttpInfo(id, planId, clientId);
        return localVarResp.getData();
    }

    /**
     * Returns WAMO values for current goal
     * 
     * @param id The id of the goal to retrieve WAMO values for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> What are my options results successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidWithHttpInfo(Integer id, String planId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(id, planId, clientId, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns WAMO values for current goal (asynchronously)
     * 
     * @param id The id of the goal to retrieve WAMO values for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param clientId Id of the client user for the plan. Required if current session user is an advisor. Ignored for client user sessions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> What are my options results successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidAsync(Integer id, String planId, String clientId, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidValidateBeforeCall(id, planId, clientId, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCall(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalAdjustments;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/Education/{id}/Calculations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidValidateBeforeCall(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(Async)");
        }

        // verify the required parameter 'goalAdjustments' is set
        if (goalAdjustments == null) {
            throw new ApiException("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(Async)");
        }

        return goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCall(id, planId, goalAdjustments, _callback);

    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustments) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments> localVarResp = goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidWithHttpInfo(id, planId, goalAdjustments);
        return localVarResp.getData();
    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments> goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidWithHttpInfo(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustments) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidValidateBeforeCall(id, planId, goalAdjustments, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform calculations (asynchronously)
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidAsync(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments goalAdjustments, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidValidateBeforeCall(id, planId, goalAdjustments, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCall(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalAdjustments;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/MajorPurchase/{id}/Calculations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidValidateBeforeCall(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(Async)");
        }

        // verify the required parameter 'goalAdjustments' is set
        if (goalAdjustments == null) {
            throw new ApiException("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(Async)");
        }

        return goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCall(id, planId, goalAdjustments, _callback);

    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustments) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments> localVarResp = goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidWithHttpInfo(id, planId, goalAdjustments);
        return localVarResp.getData();
    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments> goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidWithHttpInfo(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustments) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidValidateBeforeCall(id, planId, goalAdjustments, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform calculations (asynchronously)
     * This function returns the posted object and the adjusted calculation values
     * @param id The id of the goal to retrieve adjustments for. (required)
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidAsync(Integer id, String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments goalAdjustments, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidValidateBeforeCall(id, planId, goalAdjustments, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for goalAdjustmentsPostRetirementByGoaladjustmentsPlanid
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCall(String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalAdjustments;

        // create path and map variables
        String localVarPath = "/api/GoalAdjustments/Retirement/Calculations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call goalAdjustmentsPostRetirementByGoaladjustmentsPlanidValidateBeforeCall(String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(Async)");
        }

        // verify the required parameter 'goalAdjustments' is set
        if (goalAdjustments == null) {
            throw new ApiException("Missing the required parameter 'goalAdjustments' when calling goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(Async)");
        }

        return goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCall(planId, goalAdjustments, _callback);

    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustments) throws ApiException {
        ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments> localVarResp = goalAdjustmentsPostRetirementByGoaladjustmentsPlanidWithHttpInfo(planId, goalAdjustments);
        return localVarResp.getData();
    }

    /**
     * Perform calculations
     * This function returns the posted object and the adjusted calculation values
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @return ApiResponse&lt;AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments> goalAdjustmentsPostRetirementByGoaladjustmentsPlanidWithHttpInfo(String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustments) throws ApiException {
        okhttp3.Call localVarCall = goalAdjustmentsPostRetirementByGoaladjustmentsPlanidValidateBeforeCall(planId, goalAdjustments, null);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform calculations (asynchronously)
     * This function returns the posted object and the adjusted calculation values
     * @param planId Id of the Plan to retrieve or update data for (e.g. 1001-11-3). (required)
     * @param goalAdjustments The adjusted values for this goal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for plan data access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to acquire a NaviPlan engine </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call goalAdjustmentsPostRetirementByGoaladjustmentsPlanidAsync(String planId, AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments goalAdjustments, final ApiCallback<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments> _callback) throws ApiException {

        okhttp3.Call localVarCall = goalAdjustmentsPostRetirementByGoaladjustmentsPlanidValidateBeforeCall(planId, goalAdjustments, _callback);
        Type localVarReturnType = new TypeToken<AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
