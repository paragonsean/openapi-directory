/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.CurrencyWithDate;
import org.openapitools.client.model.DescriptiveBoolean;
import org.openapitools.client.model.FormattedEnumTypeFrequency;
import org.openapitools.client.model.FormattedEnumTypeLiabilityType;
import org.openapitools.client.model.FormattedEnumTypePayOffOptionsType;
import org.openapitools.client.model.FormattedEnumTypePaymentType;
import org.openapitools.client.model.IDebtModStrategies;
import org.openapitools.client.model.IOptionalFieldCurrency;
import org.openapitools.client.model.IOptionalFieldDate;
import org.openapitools.client.model.IOptionalFieldDescriptiveBoolean;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ILiability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ILiability {
  public static final String SERIALIZED_NAME_ANNUAL_PAYMENT_AMOUNT = "annualPaymentAmount";
  @SerializedName(SERIALIZED_NAME_ANNUAL_PAYMENT_AMOUNT)
  private Currency annualPaymentAmount;

  public static final String SERIALIZED_NAME_BALANCE_AS_OF = "balanceAsOf";
  @SerializedName(SERIALIZED_NAME_BALANCE_AS_OF)
  private CurrencyWithDate balanceAsOf;

  public static final String SERIALIZED_NAME_BALANCE_AS_OF_PLAN_DATE = "balanceAsOfPlanDate";
  @SerializedName(SERIALIZED_NAME_BALANCE_AS_OF_PLAN_DATE)
  private Currency balanceAsOfPlanDate;

  public static final String SERIALIZED_NAME_DEBT_MOD_STRATEGIES = "debtModStrategies";
  @SerializedName(SERIALIZED_NAME_DEBT_MOD_STRATEGIES)
  private IDebtModStrategies debtModStrategies;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSURED_FOR_DISABILITY = "insuredForDisability";
  @SerializedName(SERIALIZED_NAME_INSURED_FOR_DISABILITY)
  private DescriptiveBoolean insuredForDisability;

  public static final String SERIALIZED_NAME_INSURED_FOR_LIFE = "insuredForLife";
  @SerializedName(SERIALIZED_NAME_INSURED_FOR_LIFE)
  private DescriptiveBoolean insuredForLife;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private Percent interestRate;

  public static final String SERIALIZED_NAME_IS_INTEREST_RATE_VARIABLE = "isInterestRateVariable";
  @SerializedName(SERIALIZED_NAME_IS_INTEREST_RATE_VARIABLE)
  private DescriptiveBoolean isInterestRateVariable;

  public static final String SERIALIZED_NAME_IS_PAYMENT_VARIABLE = "isPaymentVariable";
  @SerializedName(SERIALIZED_NAME_IS_PAYMENT_VARIABLE)
  private DescriptiveBoolean isPaymentVariable;

  public static final String SERIALIZED_NAME_LINKED_ASSET_ID = "linkedAssetId";
  @SerializedName(SERIALIZED_NAME_LINKED_ASSET_ID)
  private String linkedAssetId;

  public static final String SERIALIZED_NAME_LINKED_ASSET_NAME = "linkedAssetName";
  @SerializedName(SERIALIZED_NAME_LINKED_ASSET_NAME)
  private String linkedAssetName;

  public static final String SERIALIZED_NAME_LOAN_DATE = "loanDate";
  @SerializedName(SERIALIZED_NAME_LOAN_DATE)
  private Date loanDate;

  public static final String SERIALIZED_NAME_ORIGINAL_BALANCE = "originalBalance";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_BALANCE)
  private Currency originalBalance;

  /**
   * Gets or Sets owner
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_PAID_OFF_BY_RETIREMENT = "paidOffByRetirement";
  @SerializedName(SERIALIZED_NAME_PAID_OFF_BY_RETIREMENT)
  private IOptionalFieldDescriptiveBoolean paidOffByRetirement;

  public static final String SERIALIZED_NAME_PAY_OFF_DATE = "payOffDate";
  @SerializedName(SERIALIZED_NAME_PAY_OFF_DATE)
  private IOptionalFieldDate payOffDate;

  public static final String SERIALIZED_NAME_PAY_OFF_OPTION_TYPE = "payOffOptionType";
  @SerializedName(SERIALIZED_NAME_PAY_OFF_OPTION_TYPE)
  private FormattedEnumTypePayOffOptionsType payOffOptionType;

  public static final String SERIALIZED_NAME_PAYMENT_AMOUNT = "paymentAmount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AMOUNT)
  private IOptionalFieldCurrency paymentAmount;

  public static final String SERIALIZED_NAME_PAYMENT_FREQUENCY = "paymentFrequency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FREQUENCY)
  private FormattedEnumTypeFrequency paymentFrequency;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private FormattedEnumTypePaymentType paymentType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private FormattedEnumTypeLiabilityType type;

  public ILiability() {
  }

  public ILiability(
     String description, 
     String id, 
     String linkedAssetId, 
     String linkedAssetName, 
     OwnerEnum owner
  ) {
    this();
    this.description = description;
    this.id = id;
    this.linkedAssetId = linkedAssetId;
    this.linkedAssetName = linkedAssetName;
    this.owner = owner;
  }

  public ILiability annualPaymentAmount(Currency annualPaymentAmount) {
    this.annualPaymentAmount = annualPaymentAmount;
    return this;
  }

  /**
   * Get annualPaymentAmount
   * @return annualPaymentAmount
   */
  @javax.annotation.Nullable
  public Currency getAnnualPaymentAmount() {
    return annualPaymentAmount;
  }

  public void setAnnualPaymentAmount(Currency annualPaymentAmount) {
    this.annualPaymentAmount = annualPaymentAmount;
  }


  public ILiability balanceAsOf(CurrencyWithDate balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

  /**
   * Get balanceAsOf
   * @return balanceAsOf
   */
  @javax.annotation.Nullable
  public CurrencyWithDate getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(CurrencyWithDate balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }


  public ILiability balanceAsOfPlanDate(Currency balanceAsOfPlanDate) {
    this.balanceAsOfPlanDate = balanceAsOfPlanDate;
    return this;
  }

  /**
   * Get balanceAsOfPlanDate
   * @return balanceAsOfPlanDate
   */
  @javax.annotation.Nullable
  public Currency getBalanceAsOfPlanDate() {
    return balanceAsOfPlanDate;
  }

  public void setBalanceAsOfPlanDate(Currency balanceAsOfPlanDate) {
    this.balanceAsOfPlanDate = balanceAsOfPlanDate;
  }


  public ILiability debtModStrategies(IDebtModStrategies debtModStrategies) {
    this.debtModStrategies = debtModStrategies;
    return this;
  }

  /**
   * Get debtModStrategies
   * @return debtModStrategies
   */
  @javax.annotation.Nullable
  public IDebtModStrategies getDebtModStrategies() {
    return debtModStrategies;
  }

  public void setDebtModStrategies(IDebtModStrategies debtModStrategies) {
    this.debtModStrategies = debtModStrategies;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ILiability insuredForDisability(DescriptiveBoolean insuredForDisability) {
    this.insuredForDisability = insuredForDisability;
    return this;
  }

  /**
   * Get insuredForDisability
   * @return insuredForDisability
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getInsuredForDisability() {
    return insuredForDisability;
  }

  public void setInsuredForDisability(DescriptiveBoolean insuredForDisability) {
    this.insuredForDisability = insuredForDisability;
  }


  public ILiability insuredForLife(DescriptiveBoolean insuredForLife) {
    this.insuredForLife = insuredForLife;
    return this;
  }

  /**
   * Get insuredForLife
   * @return insuredForLife
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getInsuredForLife() {
    return insuredForLife;
  }

  public void setInsuredForLife(DescriptiveBoolean insuredForLife) {
    this.insuredForLife = insuredForLife;
  }


  public ILiability interestRate(Percent interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * Get interestRate
   * @return interestRate
   */
  @javax.annotation.Nullable
  public Percent getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Percent interestRate) {
    this.interestRate = interestRate;
  }


  public ILiability isInterestRateVariable(DescriptiveBoolean isInterestRateVariable) {
    this.isInterestRateVariable = isInterestRateVariable;
    return this;
  }

  /**
   * Get isInterestRateVariable
   * @return isInterestRateVariable
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getIsInterestRateVariable() {
    return isInterestRateVariable;
  }

  public void setIsInterestRateVariable(DescriptiveBoolean isInterestRateVariable) {
    this.isInterestRateVariable = isInterestRateVariable;
  }


  public ILiability isPaymentVariable(DescriptiveBoolean isPaymentVariable) {
    this.isPaymentVariable = isPaymentVariable;
    return this;
  }

  /**
   * Get isPaymentVariable
   * @return isPaymentVariable
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getIsPaymentVariable() {
    return isPaymentVariable;
  }

  public void setIsPaymentVariable(DescriptiveBoolean isPaymentVariable) {
    this.isPaymentVariable = isPaymentVariable;
  }


  /**
   * Get linkedAssetId
   * @return linkedAssetId
   */
  @javax.annotation.Nullable
  public String getLinkedAssetId() {
    return linkedAssetId;
  }



  /**
   * Get linkedAssetName
   * @return linkedAssetName
   */
  @javax.annotation.Nullable
  public String getLinkedAssetName() {
    return linkedAssetName;
  }



  public ILiability loanDate(Date loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  /**
   * Get loanDate
   * @return loanDate
   */
  @javax.annotation.Nullable
  public Date getLoanDate() {
    return loanDate;
  }

  public void setLoanDate(Date loanDate) {
    this.loanDate = loanDate;
  }


  public ILiability originalBalance(Currency originalBalance) {
    this.originalBalance = originalBalance;
    return this;
  }

  /**
   * Get originalBalance
   * @return originalBalance
   */
  @javax.annotation.Nullable
  public Currency getOriginalBalance() {
    return originalBalance;
  }

  public void setOriginalBalance(Currency originalBalance) {
    this.originalBalance = originalBalance;
  }


  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }



  public ILiability paidOffByRetirement(IOptionalFieldDescriptiveBoolean paidOffByRetirement) {
    this.paidOffByRetirement = paidOffByRetirement;
    return this;
  }

  /**
   * Get paidOffByRetirement
   * @return paidOffByRetirement
   */
  @javax.annotation.Nullable
  public IOptionalFieldDescriptiveBoolean getPaidOffByRetirement() {
    return paidOffByRetirement;
  }

  public void setPaidOffByRetirement(IOptionalFieldDescriptiveBoolean paidOffByRetirement) {
    this.paidOffByRetirement = paidOffByRetirement;
  }


  public ILiability payOffDate(IOptionalFieldDate payOffDate) {
    this.payOffDate = payOffDate;
    return this;
  }

  /**
   * Get payOffDate
   * @return payOffDate
   */
  @javax.annotation.Nullable
  public IOptionalFieldDate getPayOffDate() {
    return payOffDate;
  }

  public void setPayOffDate(IOptionalFieldDate payOffDate) {
    this.payOffDate = payOffDate;
  }


  public ILiability payOffOptionType(FormattedEnumTypePayOffOptionsType payOffOptionType) {
    this.payOffOptionType = payOffOptionType;
    return this;
  }

  /**
   * Get payOffOptionType
   * @return payOffOptionType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypePayOffOptionsType getPayOffOptionType() {
    return payOffOptionType;
  }

  public void setPayOffOptionType(FormattedEnumTypePayOffOptionsType payOffOptionType) {
    this.payOffOptionType = payOffOptionType;
  }


  public ILiability paymentAmount(IOptionalFieldCurrency paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * Get paymentAmount
   * @return paymentAmount
   */
  @javax.annotation.Nullable
  public IOptionalFieldCurrency getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(IOptionalFieldCurrency paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public ILiability paymentFrequency(FormattedEnumTypeFrequency paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
    return this;
  }

  /**
   * Get paymentFrequency
   * @return paymentFrequency
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeFrequency getPaymentFrequency() {
    return paymentFrequency;
  }

  public void setPaymentFrequency(FormattedEnumTypeFrequency paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
  }


  public ILiability paymentType(FormattedEnumTypePaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypePaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(FormattedEnumTypePaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public ILiability type(FormattedEnumTypeLiabilityType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeLiabilityType getType() {
    return type;
  }

  public void setType(FormattedEnumTypeLiabilityType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ILiability iliability = (ILiability) o;
    return Objects.equals(this.annualPaymentAmount, iliability.annualPaymentAmount) &&
        Objects.equals(this.balanceAsOf, iliability.balanceAsOf) &&
        Objects.equals(this.balanceAsOfPlanDate, iliability.balanceAsOfPlanDate) &&
        Objects.equals(this.debtModStrategies, iliability.debtModStrategies) &&
        Objects.equals(this.description, iliability.description) &&
        Objects.equals(this.id, iliability.id) &&
        Objects.equals(this.insuredForDisability, iliability.insuredForDisability) &&
        Objects.equals(this.insuredForLife, iliability.insuredForLife) &&
        Objects.equals(this.interestRate, iliability.interestRate) &&
        Objects.equals(this.isInterestRateVariable, iliability.isInterestRateVariable) &&
        Objects.equals(this.isPaymentVariable, iliability.isPaymentVariable) &&
        Objects.equals(this.linkedAssetId, iliability.linkedAssetId) &&
        Objects.equals(this.linkedAssetName, iliability.linkedAssetName) &&
        Objects.equals(this.loanDate, iliability.loanDate) &&
        Objects.equals(this.originalBalance, iliability.originalBalance) &&
        Objects.equals(this.owner, iliability.owner) &&
        Objects.equals(this.paidOffByRetirement, iliability.paidOffByRetirement) &&
        Objects.equals(this.payOffDate, iliability.payOffDate) &&
        Objects.equals(this.payOffOptionType, iliability.payOffOptionType) &&
        Objects.equals(this.paymentAmount, iliability.paymentAmount) &&
        Objects.equals(this.paymentFrequency, iliability.paymentFrequency) &&
        Objects.equals(this.paymentType, iliability.paymentType) &&
        Objects.equals(this.type, iliability.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualPaymentAmount, balanceAsOf, balanceAsOfPlanDate, debtModStrategies, description, id, insuredForDisability, insuredForLife, interestRate, isInterestRateVariable, isPaymentVariable, linkedAssetId, linkedAssetName, loanDate, originalBalance, owner, paidOffByRetirement, payOffDate, payOffOptionType, paymentAmount, paymentFrequency, paymentType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ILiability {\n");
    sb.append("    annualPaymentAmount: ").append(toIndentedString(annualPaymentAmount)).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    balanceAsOfPlanDate: ").append(toIndentedString(balanceAsOfPlanDate)).append("\n");
    sb.append("    debtModStrategies: ").append(toIndentedString(debtModStrategies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    insuredForDisability: ").append(toIndentedString(insuredForDisability)).append("\n");
    sb.append("    insuredForLife: ").append(toIndentedString(insuredForLife)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    isInterestRateVariable: ").append(toIndentedString(isInterestRateVariable)).append("\n");
    sb.append("    isPaymentVariable: ").append(toIndentedString(isPaymentVariable)).append("\n");
    sb.append("    linkedAssetId: ").append(toIndentedString(linkedAssetId)).append("\n");
    sb.append("    linkedAssetName: ").append(toIndentedString(linkedAssetName)).append("\n");
    sb.append("    loanDate: ").append(toIndentedString(loanDate)).append("\n");
    sb.append("    originalBalance: ").append(toIndentedString(originalBalance)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    paidOffByRetirement: ").append(toIndentedString(paidOffByRetirement)).append("\n");
    sb.append("    payOffDate: ").append(toIndentedString(payOffDate)).append("\n");
    sb.append("    payOffOptionType: ").append(toIndentedString(payOffOptionType)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualPaymentAmount");
    openapiFields.add("balanceAsOf");
    openapiFields.add("balanceAsOfPlanDate");
    openapiFields.add("debtModStrategies");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("insuredForDisability");
    openapiFields.add("insuredForLife");
    openapiFields.add("interestRate");
    openapiFields.add("isInterestRateVariable");
    openapiFields.add("isPaymentVariable");
    openapiFields.add("linkedAssetId");
    openapiFields.add("linkedAssetName");
    openapiFields.add("loanDate");
    openapiFields.add("originalBalance");
    openapiFields.add("owner");
    openapiFields.add("paidOffByRetirement");
    openapiFields.add("payOffDate");
    openapiFields.add("payOffOptionType");
    openapiFields.add("paymentAmount");
    openapiFields.add("paymentFrequency");
    openapiFields.add("paymentType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ILiability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ILiability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ILiability is not found in the empty JSON string", ILiability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ILiability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ILiability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualPaymentAmount`
      if (jsonObj.get("annualPaymentAmount") != null && !jsonObj.get("annualPaymentAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("annualPaymentAmount"));
      }
      // validate the optional field `balanceAsOf`
      if (jsonObj.get("balanceAsOf") != null && !jsonObj.get("balanceAsOf").isJsonNull()) {
        CurrencyWithDate.validateJsonElement(jsonObj.get("balanceAsOf"));
      }
      // validate the optional field `balanceAsOfPlanDate`
      if (jsonObj.get("balanceAsOfPlanDate") != null && !jsonObj.get("balanceAsOfPlanDate").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("balanceAsOfPlanDate"));
      }
      // validate the optional field `debtModStrategies`
      if (jsonObj.get("debtModStrategies") != null && !jsonObj.get("debtModStrategies").isJsonNull()) {
        IDebtModStrategies.validateJsonElement(jsonObj.get("debtModStrategies"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `insuredForDisability`
      if (jsonObj.get("insuredForDisability") != null && !jsonObj.get("insuredForDisability").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("insuredForDisability"));
      }
      // validate the optional field `insuredForLife`
      if (jsonObj.get("insuredForLife") != null && !jsonObj.get("insuredForLife").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("insuredForLife"));
      }
      // validate the optional field `interestRate`
      if (jsonObj.get("interestRate") != null && !jsonObj.get("interestRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("interestRate"));
      }
      // validate the optional field `isInterestRateVariable`
      if (jsonObj.get("isInterestRateVariable") != null && !jsonObj.get("isInterestRateVariable").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("isInterestRateVariable"));
      }
      // validate the optional field `isPaymentVariable`
      if (jsonObj.get("isPaymentVariable") != null && !jsonObj.get("isPaymentVariable").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("isPaymentVariable"));
      }
      if ((jsonObj.get("linkedAssetId") != null && !jsonObj.get("linkedAssetId").isJsonNull()) && !jsonObj.get("linkedAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedAssetId").toString()));
      }
      if ((jsonObj.get("linkedAssetName") != null && !jsonObj.get("linkedAssetName").isJsonNull()) && !jsonObj.get("linkedAssetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedAssetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedAssetName").toString()));
      }
      // validate the optional field `loanDate`
      if (jsonObj.get("loanDate") != null && !jsonObj.get("loanDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("loanDate"));
      }
      // validate the optional field `originalBalance`
      if (jsonObj.get("originalBalance") != null && !jsonObj.get("originalBalance").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("originalBalance"));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `paidOffByRetirement`
      if (jsonObj.get("paidOffByRetirement") != null && !jsonObj.get("paidOffByRetirement").isJsonNull()) {
        IOptionalFieldDescriptiveBoolean.validateJsonElement(jsonObj.get("paidOffByRetirement"));
      }
      // validate the optional field `payOffDate`
      if (jsonObj.get("payOffDate") != null && !jsonObj.get("payOffDate").isJsonNull()) {
        IOptionalFieldDate.validateJsonElement(jsonObj.get("payOffDate"));
      }
      // validate the optional field `payOffOptionType`
      if (jsonObj.get("payOffOptionType") != null && !jsonObj.get("payOffOptionType").isJsonNull()) {
        FormattedEnumTypePayOffOptionsType.validateJsonElement(jsonObj.get("payOffOptionType"));
      }
      // validate the optional field `paymentAmount`
      if (jsonObj.get("paymentAmount") != null && !jsonObj.get("paymentAmount").isJsonNull()) {
        IOptionalFieldCurrency.validateJsonElement(jsonObj.get("paymentAmount"));
      }
      // validate the optional field `paymentFrequency`
      if (jsonObj.get("paymentFrequency") != null && !jsonObj.get("paymentFrequency").isJsonNull()) {
        FormattedEnumTypeFrequency.validateJsonElement(jsonObj.get("paymentFrequency"));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        FormattedEnumTypePaymentType.validateJsonElement(jsonObj.get("paymentType"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        FormattedEnumTypeLiabilityType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ILiability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ILiability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ILiability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ILiability.class));

       return (TypeAdapter<T>) new TypeAdapter<ILiability>() {
           @Override
           public void write(JsonWriter out, ILiability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ILiability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ILiability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ILiability
   * @throws IOException if the JSON string is invalid with respect to ILiability
   */
  public static ILiability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ILiability.class);
  }

  /**
   * Convert an instance of ILiability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

