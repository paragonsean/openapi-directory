/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdvisorModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvisorModel {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADVISOR_ID = "advisorId";
  @SerializedName(SERIALIZED_NAME_ADVISOR_ID)
  private String advisorId;

  public static final String SERIALIZED_NAME_ADVISOR_TITLE = "advisorTitle";
  @SerializedName(SERIALIZED_NAME_ADVISOR_TITLE)
  private String advisorTitle;

  public static final String SERIALIZED_NAME_BUSINESS_PHONE = "businessPhone";
  @SerializedName(SERIALIZED_NAME_BUSINESS_PHONE)
  private String businessPhone;

  public static final String SERIALIZED_NAME_CELL_PHONE = "cellPhone";
  @SerializedName(SERIALIZED_NAME_CELL_PHONE)
  private String cellPhone;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_FAX_PHONE = "faxPhone";
  @SerializedName(SERIALIZED_NAME_FAX_PHONE)
  private String faxPhone;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_OFFICE_NAME = "officeName";
  @SerializedName(SERIALIZED_NAME_OFFICE_NAME)
  private String officeName;

  public static final String SERIALIZED_NAME_OFFICE_WEBSITE = "officeWebsite";
  @SerializedName(SERIALIZED_NAME_OFFICE_WEBSITE)
  private String officeWebsite;

  public static final String SERIALIZED_NAME_PAGER_NUMBER = "pagerNumber";
  @SerializedName(SERIALIZED_NAME_PAGER_NUMBER)
  private String pagerNumber;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "stateProvince";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public AdvisorModel() {
  }

  public AdvisorModel addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public AdvisorModel addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public AdvisorModel advisorId(String advisorId) {
    this.advisorId = advisorId;
    return this;
  }

  /**
   * Get advisorId
   * @return advisorId
   */
  @javax.annotation.Nullable
  public String getAdvisorId() {
    return advisorId;
  }

  public void setAdvisorId(String advisorId) {
    this.advisorId = advisorId;
  }


  public AdvisorModel advisorTitle(String advisorTitle) {
    this.advisorTitle = advisorTitle;
    return this;
  }

  /**
   * Get advisorTitle
   * @return advisorTitle
   */
  @javax.annotation.Nullable
  public String getAdvisorTitle() {
    return advisorTitle;
  }

  public void setAdvisorTitle(String advisorTitle) {
    this.advisorTitle = advisorTitle;
  }


  public AdvisorModel businessPhone(String businessPhone) {
    this.businessPhone = businessPhone;
    return this;
  }

  /**
   * Get businessPhone
   * @return businessPhone
   */
  @javax.annotation.Nullable
  public String getBusinessPhone() {
    return businessPhone;
  }

  public void setBusinessPhone(String businessPhone) {
    this.businessPhone = businessPhone;
  }


  public AdvisorModel cellPhone(String cellPhone) {
    this.cellPhone = cellPhone;
    return this;
  }

  /**
   * Get cellPhone
   * @return cellPhone
   */
  @javax.annotation.Nullable
  public String getCellPhone() {
    return cellPhone;
  }

  public void setCellPhone(String cellPhone) {
    this.cellPhone = cellPhone;
  }


  public AdvisorModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AdvisorModel emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public AdvisorModel faxPhone(String faxPhone) {
    this.faxPhone = faxPhone;
    return this;
  }

  /**
   * Get faxPhone
   * @return faxPhone
   */
  @javax.annotation.Nullable
  public String getFaxPhone() {
    return faxPhone;
  }

  public void setFaxPhone(String faxPhone) {
    this.faxPhone = faxPhone;
  }


  public AdvisorModel firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public AdvisorModel homePhone(String homePhone) {
    this.homePhone = homePhone;
    return this;
  }

  /**
   * Get homePhone
   * @return homePhone
   */
  @javax.annotation.Nullable
  public String getHomePhone() {
    return homePhone;
  }

  public void setHomePhone(String homePhone) {
    this.homePhone = homePhone;
  }


  public AdvisorModel lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public AdvisorModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public AdvisorModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  public AdvisorModel middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public AdvisorModel officeName(String officeName) {
    this.officeName = officeName;
    return this;
  }

  /**
   * Get officeName
   * @return officeName
   */
  @javax.annotation.Nullable
  public String getOfficeName() {
    return officeName;
  }

  public void setOfficeName(String officeName) {
    this.officeName = officeName;
  }


  public AdvisorModel officeWebsite(String officeWebsite) {
    this.officeWebsite = officeWebsite;
    return this;
  }

  /**
   * Get officeWebsite
   * @return officeWebsite
   */
  @javax.annotation.Nullable
  public String getOfficeWebsite() {
    return officeWebsite;
  }

  public void setOfficeWebsite(String officeWebsite) {
    this.officeWebsite = officeWebsite;
  }


  public AdvisorModel pagerNumber(String pagerNumber) {
    this.pagerNumber = pagerNumber;
    return this;
  }

  /**
   * Get pagerNumber
   * @return pagerNumber
   */
  @javax.annotation.Nullable
  public String getPagerNumber() {
    return pagerNumber;
  }

  public void setPagerNumber(String pagerNumber) {
    this.pagerNumber = pagerNumber;
  }


  public AdvisorModel postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public AdvisorModel stateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
    return this;
  }

  /**
   * Get stateProvince
   * @return stateProvince
   */
  @javax.annotation.Nullable
  public String getStateProvince() {
    return stateProvince;
  }

  public void setStateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvisorModel advisorModel = (AdvisorModel) o;
    return Objects.equals(this.addressLine1, advisorModel.addressLine1) &&
        Objects.equals(this.addressLine2, advisorModel.addressLine2) &&
        Objects.equals(this.advisorId, advisorModel.advisorId) &&
        Objects.equals(this.advisorTitle, advisorModel.advisorTitle) &&
        Objects.equals(this.businessPhone, advisorModel.businessPhone) &&
        Objects.equals(this.cellPhone, advisorModel.cellPhone) &&
        Objects.equals(this.city, advisorModel.city) &&
        Objects.equals(this.emailAddress, advisorModel.emailAddress) &&
        Objects.equals(this.faxPhone, advisorModel.faxPhone) &&
        Objects.equals(this.firstName, advisorModel.firstName) &&
        Objects.equals(this.homePhone, advisorModel.homePhone) &&
        Objects.equals(this.lastName, advisorModel.lastName) &&
        Objects.equals(this.links, advisorModel.links) &&
        Objects.equals(this.middleName, advisorModel.middleName) &&
        Objects.equals(this.officeName, advisorModel.officeName) &&
        Objects.equals(this.officeWebsite, advisorModel.officeWebsite) &&
        Objects.equals(this.pagerNumber, advisorModel.pagerNumber) &&
        Objects.equals(this.postalCode, advisorModel.postalCode) &&
        Objects.equals(this.stateProvince, advisorModel.stateProvince);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, addressLine2, advisorId, advisorTitle, businessPhone, cellPhone, city, emailAddress, faxPhone, firstName, homePhone, lastName, links, middleName, officeName, officeWebsite, pagerNumber, postalCode, stateProvince);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvisorModel {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    advisorId: ").append(toIndentedString(advisorId)).append("\n");
    sb.append("    advisorTitle: ").append(toIndentedString(advisorTitle)).append("\n");
    sb.append("    businessPhone: ").append(toIndentedString(businessPhone)).append("\n");
    sb.append("    cellPhone: ").append(toIndentedString(cellPhone)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    faxPhone: ").append(toIndentedString(faxPhone)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    officeName: ").append(toIndentedString(officeName)).append("\n");
    sb.append("    officeWebsite: ").append(toIndentedString(officeWebsite)).append("\n");
    sb.append("    pagerNumber: ").append(toIndentedString(pagerNumber)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("advisorId");
    openapiFields.add("advisorTitle");
    openapiFields.add("businessPhone");
    openapiFields.add("cellPhone");
    openapiFields.add("city");
    openapiFields.add("emailAddress");
    openapiFields.add("faxPhone");
    openapiFields.add("firstName");
    openapiFields.add("homePhone");
    openapiFields.add("lastName");
    openapiFields.add("links");
    openapiFields.add("middleName");
    openapiFields.add("officeName");
    openapiFields.add("officeWebsite");
    openapiFields.add("pagerNumber");
    openapiFields.add("postalCode");
    openapiFields.add("stateProvince");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvisorModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvisorModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvisorModel is not found in the empty JSON string", AdvisorModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvisorModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvisorModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("advisorId") != null && !jsonObj.get("advisorId").isJsonNull()) && !jsonObj.get("advisorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisorId").toString()));
      }
      if ((jsonObj.get("advisorTitle") != null && !jsonObj.get("advisorTitle").isJsonNull()) && !jsonObj.get("advisorTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisorTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisorTitle").toString()));
      }
      if ((jsonObj.get("businessPhone") != null && !jsonObj.get("businessPhone").isJsonNull()) && !jsonObj.get("businessPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessPhone").toString()));
      }
      if ((jsonObj.get("cellPhone") != null && !jsonObj.get("cellPhone").isJsonNull()) && !jsonObj.get("cellPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cellPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cellPhone").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("faxPhone") != null && !jsonObj.get("faxPhone").isJsonNull()) && !jsonObj.get("faxPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faxPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faxPhone").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("officeName") != null && !jsonObj.get("officeName").isJsonNull()) && !jsonObj.get("officeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeName").toString()));
      }
      if ((jsonObj.get("officeWebsite") != null && !jsonObj.get("officeWebsite").isJsonNull()) && !jsonObj.get("officeWebsite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeWebsite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeWebsite").toString()));
      }
      if ((jsonObj.get("pagerNumber") != null && !jsonObj.get("pagerNumber").isJsonNull()) && !jsonObj.get("pagerNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pagerNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pagerNumber").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("stateProvince") != null && !jsonObj.get("stateProvince").isJsonNull()) && !jsonObj.get("stateProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateProvince").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvisorModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvisorModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvisorModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvisorModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvisorModel>() {
           @Override
           public void write(JsonWriter out, AdvisorModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvisorModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvisorModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvisorModel
   * @throws IOException if the JSON string is invalid with respect to AdvisorModel
   */
  public static AdvisorModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvisorModel.class);
  }

  /**
   * Convert an instance of AdvisorModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

