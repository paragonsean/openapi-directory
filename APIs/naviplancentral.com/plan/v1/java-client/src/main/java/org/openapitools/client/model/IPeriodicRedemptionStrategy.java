/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.FormattedEnumTypeFrequency;
import org.openapitools.client.model.GrowthRateValues;
import org.openapitools.client.model.PercentOrCurrency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IPeriodicRedemptionStrategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPeriodicRedemptionStrategy {
  public static final String SERIALIZED_NAME_AMOUNT_OR_PERCENT_OF_VALUE = "amountOrPercentOfValue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OR_PERCENT_OF_VALUE)
  private PercentOrCurrency amountOrPercentOfValue;

  public static final String SERIALIZED_NAME_APPLICABLE_DATE_RANGE = "applicableDateRange";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_DATE_RANGE)
  private FormattedDateRange applicableDateRange;

  public static final String SERIALIZED_NAME_INDEX_RATE = "indexRate";
  @SerializedName(SERIALIZED_NAME_INDEX_RATE)
  private GrowthRateValues indexRate;

  public static final String SERIALIZED_NAME_REDEMPTION_FREQUENCY = "redemptionFrequency";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_FREQUENCY)
  private FormattedEnumTypeFrequency redemptionFrequency;

  public IPeriodicRedemptionStrategy() {
  }

  public IPeriodicRedemptionStrategy amountOrPercentOfValue(PercentOrCurrency amountOrPercentOfValue) {
    this.amountOrPercentOfValue = amountOrPercentOfValue;
    return this;
  }

  /**
   * Get amountOrPercentOfValue
   * @return amountOrPercentOfValue
   */
  @javax.annotation.Nullable
  public PercentOrCurrency getAmountOrPercentOfValue() {
    return amountOrPercentOfValue;
  }

  public void setAmountOrPercentOfValue(PercentOrCurrency amountOrPercentOfValue) {
    this.amountOrPercentOfValue = amountOrPercentOfValue;
  }


  public IPeriodicRedemptionStrategy applicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
    return this;
  }

  /**
   * Get applicableDateRange
   * @return applicableDateRange
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableDateRange() {
    return applicableDateRange;
  }

  public void setApplicableDateRange(FormattedDateRange applicableDateRange) {
    this.applicableDateRange = applicableDateRange;
  }


  public IPeriodicRedemptionStrategy indexRate(GrowthRateValues indexRate) {
    this.indexRate = indexRate;
    return this;
  }

  /**
   * Get indexRate
   * @return indexRate
   */
  @javax.annotation.Nullable
  public GrowthRateValues getIndexRate() {
    return indexRate;
  }

  public void setIndexRate(GrowthRateValues indexRate) {
    this.indexRate = indexRate;
  }


  public IPeriodicRedemptionStrategy redemptionFrequency(FormattedEnumTypeFrequency redemptionFrequency) {
    this.redemptionFrequency = redemptionFrequency;
    return this;
  }

  /**
   * Get redemptionFrequency
   * @return redemptionFrequency
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeFrequency getRedemptionFrequency() {
    return redemptionFrequency;
  }

  public void setRedemptionFrequency(FormattedEnumTypeFrequency redemptionFrequency) {
    this.redemptionFrequency = redemptionFrequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPeriodicRedemptionStrategy iperiodicRedemptionStrategy = (IPeriodicRedemptionStrategy) o;
    return Objects.equals(this.amountOrPercentOfValue, iperiodicRedemptionStrategy.amountOrPercentOfValue) &&
        Objects.equals(this.applicableDateRange, iperiodicRedemptionStrategy.applicableDateRange) &&
        Objects.equals(this.indexRate, iperiodicRedemptionStrategy.indexRate) &&
        Objects.equals(this.redemptionFrequency, iperiodicRedemptionStrategy.redemptionFrequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountOrPercentOfValue, applicableDateRange, indexRate, redemptionFrequency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPeriodicRedemptionStrategy {\n");
    sb.append("    amountOrPercentOfValue: ").append(toIndentedString(amountOrPercentOfValue)).append("\n");
    sb.append("    applicableDateRange: ").append(toIndentedString(applicableDateRange)).append("\n");
    sb.append("    indexRate: ").append(toIndentedString(indexRate)).append("\n");
    sb.append("    redemptionFrequency: ").append(toIndentedString(redemptionFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountOrPercentOfValue");
    openapiFields.add("applicableDateRange");
    openapiFields.add("indexRate");
    openapiFields.add("redemptionFrequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPeriodicRedemptionStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPeriodicRedemptionStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPeriodicRedemptionStrategy is not found in the empty JSON string", IPeriodicRedemptionStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPeriodicRedemptionStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPeriodicRedemptionStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amountOrPercentOfValue`
      if (jsonObj.get("amountOrPercentOfValue") != null && !jsonObj.get("amountOrPercentOfValue").isJsonNull()) {
        PercentOrCurrency.validateJsonElement(jsonObj.get("amountOrPercentOfValue"));
      }
      // validate the optional field `applicableDateRange`
      if (jsonObj.get("applicableDateRange") != null && !jsonObj.get("applicableDateRange").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableDateRange"));
      }
      // validate the optional field `indexRate`
      if (jsonObj.get("indexRate") != null && !jsonObj.get("indexRate").isJsonNull()) {
        GrowthRateValues.validateJsonElement(jsonObj.get("indexRate"));
      }
      // validate the optional field `redemptionFrequency`
      if (jsonObj.get("redemptionFrequency") != null && !jsonObj.get("redemptionFrequency").isJsonNull()) {
        FormattedEnumTypeFrequency.validateJsonElement(jsonObj.get("redemptionFrequency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPeriodicRedemptionStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPeriodicRedemptionStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPeriodicRedemptionStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPeriodicRedemptionStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<IPeriodicRedemptionStrategy>() {
           @Override
           public void write(JsonWriter out, IPeriodicRedemptionStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPeriodicRedemptionStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPeriodicRedemptionStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPeriodicRedemptionStrategy
   * @throws IOException if the JSON string is invalid with respect to IPeriodicRedemptionStrategy
   */
  public static IPeriodicRedemptionStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPeriodicRedemptionStrategy.class);
  }

  /**
   * Convert an instance of IPeriodicRedemptionStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

