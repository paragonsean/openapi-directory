/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.IPlanModules;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlanInformationModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanInformationModel {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_JOINT_ANALYSIS = "isJointAnalysis";
  @SerializedName(SERIALIZED_NAME_IS_JOINT_ANALYSIS)
  private Boolean isJointAnalysis;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_PLAN_DATE = "planDate";
  @SerializedName(SERIALIZED_NAME_PLAN_DATE)
  private Date planDate;

  public static final String SERIALIZED_NAME_PLAN_DESCRIPTION = "planDescription";
  @SerializedName(SERIALIZED_NAME_PLAN_DESCRIPTION)
  private String planDescription;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  /**
   * Gets or Sets planLevel
   */
  @JsonAdapter(PlanLevelEnum.Adapter.class)
  public enum PlanLevelEnum {
    CALCULATOR("Calculator"),
    
    FINANCIAL_ASSESSMENT("FinancialAssessment"),
    
    ASSET_ALLOCATION("AssetAllocation"),
    
    LEVEL1("Level1"),
    
    LEVEL2("Level2"),
    
    LEVEL3("Level3"),
    
    UNDEFINED("Undefined");

    private String value;

    PlanLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanLevelEnum fromValue(String value) {
      for (PlanLevelEnum b : PlanLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlanLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlanLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlanLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAN_LEVEL = "planLevel";
  @SerializedName(SERIALIZED_NAME_PLAN_LEVEL)
  private PlanLevelEnum planLevel;

  public static final String SERIALIZED_NAME_PLAN_MODULES = "planModules";
  @SerializedName(SERIALIZED_NAME_PLAN_MODULES)
  private IPlanModules planModules;

  public static final String SERIALIZED_NAME_PLAN_TYPE = "planType";
  @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
  private String planType;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private Date publishDate;

  public PlanInformationModel() {
  }

  public PlanInformationModel(
     String country, 
     String description, 
     Boolean isJointAnalysis, 
     String locale, 
     String planDescription, 
     String planId, 
     PlanLevelEnum planLevel, 
     String planType
  ) {
    this();
    this.country = country;
    this.description = description;
    this.isJointAnalysis = isJointAnalysis;
    this.locale = locale;
    this.planDescription = planDescription;
    this.planId = planId;
    this.planLevel = planLevel;
    this.planType = planType;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get isJointAnalysis
   * @return isJointAnalysis
   */
  @javax.annotation.Nullable
  public Boolean getIsJointAnalysis() {
    return isJointAnalysis;
  }



  public PlanInformationModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public PlanInformationModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }



  public PlanInformationModel planDate(Date planDate) {
    this.planDate = planDate;
    return this;
  }

  /**
   * Get planDate
   * @return planDate
   */
  @javax.annotation.Nullable
  public Date getPlanDate() {
    return planDate;
  }

  public void setPlanDate(Date planDate) {
    this.planDate = planDate;
  }


  /**
   * Get planDescription
   * @return planDescription
   */
  @javax.annotation.Nullable
  public String getPlanDescription() {
    return planDescription;
  }



  /**
   * Get planId
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }



  /**
   * Get planLevel
   * @return planLevel
   */
  @javax.annotation.Nullable
  public PlanLevelEnum getPlanLevel() {
    return planLevel;
  }



  public PlanInformationModel planModules(IPlanModules planModules) {
    this.planModules = planModules;
    return this;
  }

  /**
   * Get planModules
   * @return planModules
   */
  @javax.annotation.Nullable
  public IPlanModules getPlanModules() {
    return planModules;
  }

  public void setPlanModules(IPlanModules planModules) {
    this.planModules = planModules;
  }


  /**
   * Get planType
   * @return planType
   */
  @javax.annotation.Nullable
  public String getPlanType() {
    return planType;
  }



  public PlanInformationModel publishDate(Date publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Get publishDate
   * @return publishDate
   */
  @javax.annotation.Nullable
  public Date getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(Date publishDate) {
    this.publishDate = publishDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanInformationModel planInformationModel = (PlanInformationModel) o;
    return Objects.equals(this.country, planInformationModel.country) &&
        Objects.equals(this.description, planInformationModel.description) &&
        Objects.equals(this.isJointAnalysis, planInformationModel.isJointAnalysis) &&
        Objects.equals(this.links, planInformationModel.links) &&
        Objects.equals(this.locale, planInformationModel.locale) &&
        Objects.equals(this.planDate, planInformationModel.planDate) &&
        Objects.equals(this.planDescription, planInformationModel.planDescription) &&
        Objects.equals(this.planId, planInformationModel.planId) &&
        Objects.equals(this.planLevel, planInformationModel.planLevel) &&
        Objects.equals(this.planModules, planInformationModel.planModules) &&
        Objects.equals(this.planType, planInformationModel.planType) &&
        Objects.equals(this.publishDate, planInformationModel.publishDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, description, isJointAnalysis, links, locale, planDate, planDescription, planId, planLevel, planModules, planType, publishDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanInformationModel {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isJointAnalysis: ").append(toIndentedString(isJointAnalysis)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    planDate: ").append(toIndentedString(planDate)).append("\n");
    sb.append("    planDescription: ").append(toIndentedString(planDescription)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    planLevel: ").append(toIndentedString(planLevel)).append("\n");
    sb.append("    planModules: ").append(toIndentedString(planModules)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("description");
    openapiFields.add("isJointAnalysis");
    openapiFields.add("links");
    openapiFields.add("locale");
    openapiFields.add("planDate");
    openapiFields.add("planDescription");
    openapiFields.add("planId");
    openapiFields.add("planLevel");
    openapiFields.add("planModules");
    openapiFields.add("planType");
    openapiFields.add("publishDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanInformationModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanInformationModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanInformationModel is not found in the empty JSON string", PlanInformationModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanInformationModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanInformationModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `planDate`
      if (jsonObj.get("planDate") != null && !jsonObj.get("planDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("planDate"));
      }
      if ((jsonObj.get("planDescription") != null && !jsonObj.get("planDescription").isJsonNull()) && !jsonObj.get("planDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planDescription").toString()));
      }
      if ((jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) && !jsonObj.get("planId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planId").toString()));
      }
      if ((jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) && !jsonObj.get("planLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planLevel").toString()));
      }
      // validate the optional field `planLevel`
      if (jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) {
        PlanLevelEnum.validateJsonElement(jsonObj.get("planLevel"));
      }
      // validate the optional field `planModules`
      if (jsonObj.get("planModules") != null && !jsonObj.get("planModules").isJsonNull()) {
        IPlanModules.validateJsonElement(jsonObj.get("planModules"));
      }
      if ((jsonObj.get("planType") != null && !jsonObj.get("planType").isJsonNull()) && !jsonObj.get("planType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planType").toString()));
      }
      // validate the optional field `publishDate`
      if (jsonObj.get("publishDate") != null && !jsonObj.get("publishDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("publishDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanInformationModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanInformationModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanInformationModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanInformationModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanInformationModel>() {
           @Override
           public void write(JsonWriter out, PlanInformationModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanInformationModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanInformationModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanInformationModel
   * @throws IOException if the JSON string is invalid with respect to PlanInformationModel
   */
  public static PlanInformationModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanInformationModel.class);
  }

  /**
   * Convert an instance of PlanInformationModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

