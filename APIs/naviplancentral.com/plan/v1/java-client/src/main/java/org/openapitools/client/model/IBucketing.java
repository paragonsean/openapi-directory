/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IBucketing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IBucketing {
  public static final String SERIALIZED_NAME_DISTRIBUTION_BUCKET_TARGET_BALANCE = "distributionBucketTargetBalance";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_BUCKET_TARGET_BALANCE)
  private Currency distributionBucketTargetBalance;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Date endDate;

  public static final String SERIALIZED_NAME_INDEXED_AT = "indexedAt";
  @SerializedName(SERIALIZED_NAME_INDEXED_AT)
  private Percent indexedAt;

  public static final String SERIALIZED_NAME_RETURN_RATE = "returnRate";
  @SerializedName(SERIALIZED_NAME_RETURN_RATE)
  private Percent returnRate;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standardDeviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private Percent standardDeviation;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Date startDate;

  public IBucketing() {
  }

  public IBucketing distributionBucketTargetBalance(Currency distributionBucketTargetBalance) {
    this.distributionBucketTargetBalance = distributionBucketTargetBalance;
    return this;
  }

  /**
   * Get distributionBucketTargetBalance
   * @return distributionBucketTargetBalance
   */
  @javax.annotation.Nullable
  public Currency getDistributionBucketTargetBalance() {
    return distributionBucketTargetBalance;
  }

  public void setDistributionBucketTargetBalance(Currency distributionBucketTargetBalance) {
    this.distributionBucketTargetBalance = distributionBucketTargetBalance;
  }


  public IBucketing endDate(Date endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public Date getEndDate() {
    return endDate;
  }

  public void setEndDate(Date endDate) {
    this.endDate = endDate;
  }


  public IBucketing indexedAt(Percent indexedAt) {
    this.indexedAt = indexedAt;
    return this;
  }

  /**
   * Get indexedAt
   * @return indexedAt
   */
  @javax.annotation.Nullable
  public Percent getIndexedAt() {
    return indexedAt;
  }

  public void setIndexedAt(Percent indexedAt) {
    this.indexedAt = indexedAt;
  }


  public IBucketing returnRate(Percent returnRate) {
    this.returnRate = returnRate;
    return this;
  }

  /**
   * Get returnRate
   * @return returnRate
   */
  @javax.annotation.Nullable
  public Percent getReturnRate() {
    return returnRate;
  }

  public void setReturnRate(Percent returnRate) {
    this.returnRate = returnRate;
  }


  public IBucketing standardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * Get standardDeviation
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public Percent getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public IBucketing startDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public Date getStartDate() {
    return startDate;
  }

  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IBucketing ibucketing = (IBucketing) o;
    return Objects.equals(this.distributionBucketTargetBalance, ibucketing.distributionBucketTargetBalance) &&
        Objects.equals(this.endDate, ibucketing.endDate) &&
        Objects.equals(this.indexedAt, ibucketing.indexedAt) &&
        Objects.equals(this.returnRate, ibucketing.returnRate) &&
        Objects.equals(this.standardDeviation, ibucketing.standardDeviation) &&
        Objects.equals(this.startDate, ibucketing.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributionBucketTargetBalance, endDate, indexedAt, returnRate, standardDeviation, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IBucketing {\n");
    sb.append("    distributionBucketTargetBalance: ").append(toIndentedString(distributionBucketTargetBalance)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    indexedAt: ").append(toIndentedString(indexedAt)).append("\n");
    sb.append("    returnRate: ").append(toIndentedString(returnRate)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distributionBucketTargetBalance");
    openapiFields.add("endDate");
    openapiFields.add("indexedAt");
    openapiFields.add("returnRate");
    openapiFields.add("standardDeviation");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IBucketing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IBucketing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IBucketing is not found in the empty JSON string", IBucketing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IBucketing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IBucketing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `distributionBucketTargetBalance`
      if (jsonObj.get("distributionBucketTargetBalance") != null && !jsonObj.get("distributionBucketTargetBalance").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("distributionBucketTargetBalance"));
      }
      // validate the optional field `endDate`
      if (jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("endDate"));
      }
      // validate the optional field `indexedAt`
      if (jsonObj.get("indexedAt") != null && !jsonObj.get("indexedAt").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("indexedAt"));
      }
      // validate the optional field `returnRate`
      if (jsonObj.get("returnRate") != null && !jsonObj.get("returnRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("returnRate"));
      }
      // validate the optional field `standardDeviation`
      if (jsonObj.get("standardDeviation") != null && !jsonObj.get("standardDeviation").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("standardDeviation"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IBucketing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IBucketing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IBucketing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IBucketing.class));

       return (TypeAdapter<T>) new TypeAdapter<IBucketing>() {
           @Override
           public void write(JsonWriter out, IBucketing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IBucketing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IBucketing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IBucketing
   * @throws IOException if the JSON string is invalid with respect to IBucketing
   */
  public static IBucketing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IBucketing.class);
  }

  /**
   * Convert an instance of IBucketing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

