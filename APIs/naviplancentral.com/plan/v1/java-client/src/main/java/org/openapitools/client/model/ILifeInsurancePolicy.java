/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.DescriptiveBoolean;
import org.openapitools.client.model.IInsurancePremium;
import org.openapitools.client.model.TimePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ILifeInsurancePolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ILifeInsurancePolicy {
  public static final String SERIALIZED_NAME_BENEFICIARY_NAME = "beneficiaryName";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_NAME)
  private String beneficiaryName;

  public static final String SERIALIZED_NAME_BENEFIT_PERIOD = "benefitPeriod";
  @SerializedName(SERIALIZED_NAME_BENEFIT_PERIOD)
  private TimePeriod benefitPeriod;

  public static final String SERIALIZED_NAME_CASH_SURRENDER_VALUE = "cashSurrenderValue";
  @SerializedName(SERIALIZED_NAME_CASH_SURRENDER_VALUE)
  private Currency cashSurrenderValue;

  public static final String SERIALIZED_NAME_COVERAGE_CEASE_DATE = "coverageCeaseDate";
  @SerializedName(SERIALIZED_NAME_COVERAGE_CEASE_DATE)
  private Date coverageCeaseDate;

  public static final String SERIALIZED_NAME_DAILY_BENEFIT_VALUE = "dailyBenefitValue";
  @SerializedName(SERIALIZED_NAME_DAILY_BENEFIT_VALUE)
  private Double dailyBenefitValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private Date effectiveDate;

  public static final String SERIALIZED_NAME_FORMATTED_BENEFIT_VALUE = "formattedBenefitValue";
  @SerializedName(SERIALIZED_NAME_FORMATTED_BENEFIT_VALUE)
  private String formattedBenefitValue;

  public static final String SERIALIZED_NAME_FORMATTED_INSURED_TYPE = "formattedInsuredType";
  @SerializedName(SERIALIZED_NAME_FORMATTED_INSURED_TYPE)
  private String formattedInsuredType;

  public static final String SERIALIZED_NAME_FORMATTED_POLICY_TYPE = "formattedPolicyType";
  @SerializedName(SERIALIZED_NAME_FORMATTED_POLICY_TYPE)
  private String formattedPolicyType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets insured
   */
  @JsonAdapter(InsuredEnum.Adapter.class)
  public enum InsuredEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient"),
    
    FIRST_TO_DIE("FirstToDie"),
    
    SECOND_TO_DIE("SecondToDie"),
    
    OTHER("Other");

    private String value;

    InsuredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsuredEnum fromValue(String value) {
      for (InsuredEnum b : InsuredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsuredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsuredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsuredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsuredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsuredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSURED = "insured";
  @SerializedName(SERIALIZED_NAME_INSURED)
  private InsuredEnum insured;

  public static final String SERIALIZED_NAME_IS_C_S_V_PAYABLE_WITH_DEATH_BENEFIT = "isCSVPayableWithDeathBenefit";
  @SerializedName(SERIALIZED_NAME_IS_C_S_V_PAYABLE_WITH_DEATH_BENEFIT)
  private DescriptiveBoolean isCSVPayableWithDeathBenefit;

  public static final String SERIALIZED_NAME_MONTHLY_BENEFIT_VALUE = "monthlyBenefitValue";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BENEFIT_VALUE)
  private Double monthlyBenefitValue;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  /**
   * Gets or Sets policyType
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
  public enum PolicyTypeEnum {
    WHOLE_LIFE("WholeLife"),
    
    UNIVERSAL_LIFE("UniversalLife"),
    
    TERM1_LIFE("Term1Life"),
    
    TERM5_LIFE("Term5Life"),
    
    TERM10_LIFE("Term10Life"),
    
    TERM20_LIFE("Term20Life"),
    
    TERM100_LIFE("Term100Life"),
    
    VARIABLE_LIFE("VariableLife"),
    
    VARIABLE_UNIVERSAL_LIFE("VariableUniversalLife"),
    
    GROUP_LONG_TERM_DISABILITY("GroupLongTermDisability"),
    
    GROUP_SHORT_TERM_DISABILITY("GroupShortTermDisability"),
    
    INDIVIDUAL_DISABILITY("IndividualDisability"),
    
    LONG_TERM_CARE("LongTermCare"),
    
    CRITICAL_ILLNESS("CriticalIllness"),
    
    MEDICAL_COVERAGE_PLAN("MedicalCoveragePlan"),
    
    CASH_TO_INSURED_COVERAGE("CashToInsuredCoverage");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeEnum policyType;

  public static final String SERIALIZED_NAME_PREMIUM_DATA = "premiumData";
  @SerializedName(SERIALIZED_NAME_PREMIUM_DATA)
  private IInsurancePremium premiumData;

  public static final String SERIALIZED_NAME_PREMIUMS_WAIVED_AT_DISABILITY = "premiumsWaivedAtDisability";
  @SerializedName(SERIALIZED_NAME_PREMIUMS_WAIVED_AT_DISABILITY)
  private DescriptiveBoolean premiumsWaivedAtDisability;

  public static final String SERIALIZED_NAME_RAW_BENEFIT_VALUE = "rawBenefitValue";
  @SerializedName(SERIALIZED_NAME_RAW_BENEFIT_VALUE)
  private Double rawBenefitValue;

  public static final String SERIALIZED_NAME_WAITING_PERIOD = "waitingPeriod";
  @SerializedName(SERIALIZED_NAME_WAITING_PERIOD)
  private TimePeriod waitingPeriod;

  public ILifeInsurancePolicy() {
  }

  public ILifeInsurancePolicy(
     String beneficiaryName, 
     Double dailyBenefitValue, 
     String description, 
     String formattedBenefitValue, 
     String formattedInsuredType, 
     String formattedPolicyType, 
     String id, 
     InsuredEnum insured, 
     Double monthlyBenefitValue, 
     String ownerName, 
     PolicyTypeEnum policyType, 
     Double rawBenefitValue
  ) {
    this();
    this.beneficiaryName = beneficiaryName;
    this.dailyBenefitValue = dailyBenefitValue;
    this.description = description;
    this.formattedBenefitValue = formattedBenefitValue;
    this.formattedInsuredType = formattedInsuredType;
    this.formattedPolicyType = formattedPolicyType;
    this.id = id;
    this.insured = insured;
    this.monthlyBenefitValue = monthlyBenefitValue;
    this.ownerName = ownerName;
    this.policyType = policyType;
    this.rawBenefitValue = rawBenefitValue;
  }

  /**
   * Get beneficiaryName
   * @return beneficiaryName
   */
  @javax.annotation.Nullable
  public String getBeneficiaryName() {
    return beneficiaryName;
  }



  public ILifeInsurancePolicy benefitPeriod(TimePeriod benefitPeriod) {
    this.benefitPeriod = benefitPeriod;
    return this;
  }

  /**
   * Get benefitPeriod
   * @return benefitPeriod
   */
  @javax.annotation.Nullable
  public TimePeriod getBenefitPeriod() {
    return benefitPeriod;
  }

  public void setBenefitPeriod(TimePeriod benefitPeriod) {
    this.benefitPeriod = benefitPeriod;
  }


  public ILifeInsurancePolicy cashSurrenderValue(Currency cashSurrenderValue) {
    this.cashSurrenderValue = cashSurrenderValue;
    return this;
  }

  /**
   * Get cashSurrenderValue
   * @return cashSurrenderValue
   */
  @javax.annotation.Nullable
  public Currency getCashSurrenderValue() {
    return cashSurrenderValue;
  }

  public void setCashSurrenderValue(Currency cashSurrenderValue) {
    this.cashSurrenderValue = cashSurrenderValue;
  }


  public ILifeInsurancePolicy coverageCeaseDate(Date coverageCeaseDate) {
    this.coverageCeaseDate = coverageCeaseDate;
    return this;
  }

  /**
   * Get coverageCeaseDate
   * @return coverageCeaseDate
   */
  @javax.annotation.Nullable
  public Date getCoverageCeaseDate() {
    return coverageCeaseDate;
  }

  public void setCoverageCeaseDate(Date coverageCeaseDate) {
    this.coverageCeaseDate = coverageCeaseDate;
  }


  /**
   * Get dailyBenefitValue
   * @return dailyBenefitValue
   */
  @javax.annotation.Nullable
  public Double getDailyBenefitValue() {
    return dailyBenefitValue;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public ILifeInsurancePolicy effectiveDate(Date effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Get effectiveDate
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public Date getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(Date effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  /**
   * Get formattedBenefitValue
   * @return formattedBenefitValue
   */
  @javax.annotation.Nullable
  public String getFormattedBenefitValue() {
    return formattedBenefitValue;
  }



  /**
   * Get formattedInsuredType
   * @return formattedInsuredType
   */
  @javax.annotation.Nullable
  public String getFormattedInsuredType() {
    return formattedInsuredType;
  }



  /**
   * Get formattedPolicyType
   * @return formattedPolicyType
   */
  @javax.annotation.Nullable
  public String getFormattedPolicyType() {
    return formattedPolicyType;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get insured
   * @return insured
   */
  @javax.annotation.Nullable
  public InsuredEnum getInsured() {
    return insured;
  }



  public ILifeInsurancePolicy isCSVPayableWithDeathBenefit(DescriptiveBoolean isCSVPayableWithDeathBenefit) {
    this.isCSVPayableWithDeathBenefit = isCSVPayableWithDeathBenefit;
    return this;
  }

  /**
   * Get isCSVPayableWithDeathBenefit
   * @return isCSVPayableWithDeathBenefit
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getIsCSVPayableWithDeathBenefit() {
    return isCSVPayableWithDeathBenefit;
  }

  public void setIsCSVPayableWithDeathBenefit(DescriptiveBoolean isCSVPayableWithDeathBenefit) {
    this.isCSVPayableWithDeathBenefit = isCSVPayableWithDeathBenefit;
  }


  /**
   * Get monthlyBenefitValue
   * @return monthlyBenefitValue
   */
  @javax.annotation.Nullable
  public Double getMonthlyBenefitValue() {
    return monthlyBenefitValue;
  }



  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }



  /**
   * Get policyType
   * @return policyType
   */
  @javax.annotation.Nullable
  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }



  public ILifeInsurancePolicy premiumData(IInsurancePremium premiumData) {
    this.premiumData = premiumData;
    return this;
  }

  /**
   * Get premiumData
   * @return premiumData
   */
  @javax.annotation.Nullable
  public IInsurancePremium getPremiumData() {
    return premiumData;
  }

  public void setPremiumData(IInsurancePremium premiumData) {
    this.premiumData = premiumData;
  }


  public ILifeInsurancePolicy premiumsWaivedAtDisability(DescriptiveBoolean premiumsWaivedAtDisability) {
    this.premiumsWaivedAtDisability = premiumsWaivedAtDisability;
    return this;
  }

  /**
   * Get premiumsWaivedAtDisability
   * @return premiumsWaivedAtDisability
   */
  @javax.annotation.Nullable
  public DescriptiveBoolean getPremiumsWaivedAtDisability() {
    return premiumsWaivedAtDisability;
  }

  public void setPremiumsWaivedAtDisability(DescriptiveBoolean premiumsWaivedAtDisability) {
    this.premiumsWaivedAtDisability = premiumsWaivedAtDisability;
  }


  /**
   * Get rawBenefitValue
   * @return rawBenefitValue
   */
  @javax.annotation.Nullable
  public Double getRawBenefitValue() {
    return rawBenefitValue;
  }



  public ILifeInsurancePolicy waitingPeriod(TimePeriod waitingPeriod) {
    this.waitingPeriod = waitingPeriod;
    return this;
  }

  /**
   * Get waitingPeriod
   * @return waitingPeriod
   */
  @javax.annotation.Nullable
  public TimePeriod getWaitingPeriod() {
    return waitingPeriod;
  }

  public void setWaitingPeriod(TimePeriod waitingPeriod) {
    this.waitingPeriod = waitingPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ILifeInsurancePolicy ilifeInsurancePolicy = (ILifeInsurancePolicy) o;
    return Objects.equals(this.beneficiaryName, ilifeInsurancePolicy.beneficiaryName) &&
        Objects.equals(this.benefitPeriod, ilifeInsurancePolicy.benefitPeriod) &&
        Objects.equals(this.cashSurrenderValue, ilifeInsurancePolicy.cashSurrenderValue) &&
        Objects.equals(this.coverageCeaseDate, ilifeInsurancePolicy.coverageCeaseDate) &&
        Objects.equals(this.dailyBenefitValue, ilifeInsurancePolicy.dailyBenefitValue) &&
        Objects.equals(this.description, ilifeInsurancePolicy.description) &&
        Objects.equals(this.effectiveDate, ilifeInsurancePolicy.effectiveDate) &&
        Objects.equals(this.formattedBenefitValue, ilifeInsurancePolicy.formattedBenefitValue) &&
        Objects.equals(this.formattedInsuredType, ilifeInsurancePolicy.formattedInsuredType) &&
        Objects.equals(this.formattedPolicyType, ilifeInsurancePolicy.formattedPolicyType) &&
        Objects.equals(this.id, ilifeInsurancePolicy.id) &&
        Objects.equals(this.insured, ilifeInsurancePolicy.insured) &&
        Objects.equals(this.isCSVPayableWithDeathBenefit, ilifeInsurancePolicy.isCSVPayableWithDeathBenefit) &&
        Objects.equals(this.monthlyBenefitValue, ilifeInsurancePolicy.monthlyBenefitValue) &&
        Objects.equals(this.ownerName, ilifeInsurancePolicy.ownerName) &&
        Objects.equals(this.policyType, ilifeInsurancePolicy.policyType) &&
        Objects.equals(this.premiumData, ilifeInsurancePolicy.premiumData) &&
        Objects.equals(this.premiumsWaivedAtDisability, ilifeInsurancePolicy.premiumsWaivedAtDisability) &&
        Objects.equals(this.rawBenefitValue, ilifeInsurancePolicy.rawBenefitValue) &&
        Objects.equals(this.waitingPeriod, ilifeInsurancePolicy.waitingPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beneficiaryName, benefitPeriod, cashSurrenderValue, coverageCeaseDate, dailyBenefitValue, description, effectiveDate, formattedBenefitValue, formattedInsuredType, formattedPolicyType, id, insured, isCSVPayableWithDeathBenefit, monthlyBenefitValue, ownerName, policyType, premiumData, premiumsWaivedAtDisability, rawBenefitValue, waitingPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ILifeInsurancePolicy {\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    benefitPeriod: ").append(toIndentedString(benefitPeriod)).append("\n");
    sb.append("    cashSurrenderValue: ").append(toIndentedString(cashSurrenderValue)).append("\n");
    sb.append("    coverageCeaseDate: ").append(toIndentedString(coverageCeaseDate)).append("\n");
    sb.append("    dailyBenefitValue: ").append(toIndentedString(dailyBenefitValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    formattedBenefitValue: ").append(toIndentedString(formattedBenefitValue)).append("\n");
    sb.append("    formattedInsuredType: ").append(toIndentedString(formattedInsuredType)).append("\n");
    sb.append("    formattedPolicyType: ").append(toIndentedString(formattedPolicyType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    insured: ").append(toIndentedString(insured)).append("\n");
    sb.append("    isCSVPayableWithDeathBenefit: ").append(toIndentedString(isCSVPayableWithDeathBenefit)).append("\n");
    sb.append("    monthlyBenefitValue: ").append(toIndentedString(monthlyBenefitValue)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    premiumData: ").append(toIndentedString(premiumData)).append("\n");
    sb.append("    premiumsWaivedAtDisability: ").append(toIndentedString(premiumsWaivedAtDisability)).append("\n");
    sb.append("    rawBenefitValue: ").append(toIndentedString(rawBenefitValue)).append("\n");
    sb.append("    waitingPeriod: ").append(toIndentedString(waitingPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beneficiaryName");
    openapiFields.add("benefitPeriod");
    openapiFields.add("cashSurrenderValue");
    openapiFields.add("coverageCeaseDate");
    openapiFields.add("dailyBenefitValue");
    openapiFields.add("description");
    openapiFields.add("effectiveDate");
    openapiFields.add("formattedBenefitValue");
    openapiFields.add("formattedInsuredType");
    openapiFields.add("formattedPolicyType");
    openapiFields.add("id");
    openapiFields.add("insured");
    openapiFields.add("isCSVPayableWithDeathBenefit");
    openapiFields.add("monthlyBenefitValue");
    openapiFields.add("ownerName");
    openapiFields.add("policyType");
    openapiFields.add("premiumData");
    openapiFields.add("premiumsWaivedAtDisability");
    openapiFields.add("rawBenefitValue");
    openapiFields.add("waitingPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ILifeInsurancePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ILifeInsurancePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ILifeInsurancePolicy is not found in the empty JSON string", ILifeInsurancePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ILifeInsurancePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ILifeInsurancePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beneficiaryName") != null && !jsonObj.get("beneficiaryName").isJsonNull()) && !jsonObj.get("beneficiaryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryName").toString()));
      }
      // validate the optional field `benefitPeriod`
      if (jsonObj.get("benefitPeriod") != null && !jsonObj.get("benefitPeriod").isJsonNull()) {
        TimePeriod.validateJsonElement(jsonObj.get("benefitPeriod"));
      }
      // validate the optional field `cashSurrenderValue`
      if (jsonObj.get("cashSurrenderValue") != null && !jsonObj.get("cashSurrenderValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("cashSurrenderValue"));
      }
      // validate the optional field `coverageCeaseDate`
      if (jsonObj.get("coverageCeaseDate") != null && !jsonObj.get("coverageCeaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("coverageCeaseDate"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `effectiveDate`
      if (jsonObj.get("effectiveDate") != null && !jsonObj.get("effectiveDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("effectiveDate"));
      }
      if ((jsonObj.get("formattedBenefitValue") != null && !jsonObj.get("formattedBenefitValue").isJsonNull()) && !jsonObj.get("formattedBenefitValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedBenefitValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedBenefitValue").toString()));
      }
      if ((jsonObj.get("formattedInsuredType") != null && !jsonObj.get("formattedInsuredType").isJsonNull()) && !jsonObj.get("formattedInsuredType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedInsuredType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedInsuredType").toString()));
      }
      if ((jsonObj.get("formattedPolicyType") != null && !jsonObj.get("formattedPolicyType").isJsonNull()) && !jsonObj.get("formattedPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedPolicyType").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("insured") != null && !jsonObj.get("insured").isJsonNull()) && !jsonObj.get("insured").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insured` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insured").toString()));
      }
      // validate the optional field `insured`
      if (jsonObj.get("insured") != null && !jsonObj.get("insured").isJsonNull()) {
        InsuredEnum.validateJsonElement(jsonObj.get("insured"));
      }
      // validate the optional field `isCSVPayableWithDeathBenefit`
      if (jsonObj.get("isCSVPayableWithDeathBenefit") != null && !jsonObj.get("isCSVPayableWithDeathBenefit").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("isCSVPayableWithDeathBenefit"));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if ((jsonObj.get("policyType") != null && !jsonObj.get("policyType").isJsonNull()) && !jsonObj.get("policyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyType").toString()));
      }
      // validate the optional field `policyType`
      if (jsonObj.get("policyType") != null && !jsonObj.get("policyType").isJsonNull()) {
        PolicyTypeEnum.validateJsonElement(jsonObj.get("policyType"));
      }
      // validate the optional field `premiumData`
      if (jsonObj.get("premiumData") != null && !jsonObj.get("premiumData").isJsonNull()) {
        IInsurancePremium.validateJsonElement(jsonObj.get("premiumData"));
      }
      // validate the optional field `premiumsWaivedAtDisability`
      if (jsonObj.get("premiumsWaivedAtDisability") != null && !jsonObj.get("premiumsWaivedAtDisability").isJsonNull()) {
        DescriptiveBoolean.validateJsonElement(jsonObj.get("premiumsWaivedAtDisability"));
      }
      // validate the optional field `waitingPeriod`
      if (jsonObj.get("waitingPeriod") != null && !jsonObj.get("waitingPeriod").isJsonNull()) {
        TimePeriod.validateJsonElement(jsonObj.get("waitingPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ILifeInsurancePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ILifeInsurancePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ILifeInsurancePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ILifeInsurancePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ILifeInsurancePolicy>() {
           @Override
           public void write(JsonWriter out, ILifeInsurancePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ILifeInsurancePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ILifeInsurancePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ILifeInsurancePolicy
   * @throws IOException if the JSON string is invalid with respect to ILifeInsurancePolicy
   */
  public static ILifeInsurancePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ILifeInsurancePolicy.class);
  }

  /**
   * Convert an instance of ILifeInsurancePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

