/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IAccumulationCategoryData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IAccumulationCategoryData {
  public static final String SERIALIZED_NAME_ALL_ASSETS = "allAssets";
  @SerializedName(SERIALIZED_NAME_ALL_ASSETS)
  private Currency allAssets;

  public static final String SERIALIZED_NAME_LOCKED_IN = "lockedIn";
  @SerializedName(SERIALIZED_NAME_LOCKED_IN)
  private Currency lockedIn;

  public static final String SERIALIZED_NAME_NON_QUALIFIED = "nonQualified";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED)
  private Currency nonQualified;

  public static final String SERIALIZED_NAME_QUALIFIED = "qualified";
  @SerializedName(SERIALIZED_NAME_QUALIFIED)
  private Currency qualified;

  public static final String SERIALIZED_NAME_ROTH = "roth";
  @SerializedName(SERIALIZED_NAME_ROTH)
  private Currency roth;

  public static final String SERIALIZED_NAME_TFSA = "tfsa";
  @SerializedName(SERIALIZED_NAME_TFSA)
  private Currency tfsa;

  public IAccumulationCategoryData() {
  }

  public IAccumulationCategoryData allAssets(Currency allAssets) {
    this.allAssets = allAssets;
    return this;
  }

  /**
   * Get allAssets
   * @return allAssets
   */
  @javax.annotation.Nullable
  public Currency getAllAssets() {
    return allAssets;
  }

  public void setAllAssets(Currency allAssets) {
    this.allAssets = allAssets;
  }


  public IAccumulationCategoryData lockedIn(Currency lockedIn) {
    this.lockedIn = lockedIn;
    return this;
  }

  /**
   * Get lockedIn
   * @return lockedIn
   */
  @javax.annotation.Nullable
  public Currency getLockedIn() {
    return lockedIn;
  }

  public void setLockedIn(Currency lockedIn) {
    this.lockedIn = lockedIn;
  }


  public IAccumulationCategoryData nonQualified(Currency nonQualified) {
    this.nonQualified = nonQualified;
    return this;
  }

  /**
   * Get nonQualified
   * @return nonQualified
   */
  @javax.annotation.Nullable
  public Currency getNonQualified() {
    return nonQualified;
  }

  public void setNonQualified(Currency nonQualified) {
    this.nonQualified = nonQualified;
  }


  public IAccumulationCategoryData qualified(Currency qualified) {
    this.qualified = qualified;
    return this;
  }

  /**
   * Get qualified
   * @return qualified
   */
  @javax.annotation.Nullable
  public Currency getQualified() {
    return qualified;
  }

  public void setQualified(Currency qualified) {
    this.qualified = qualified;
  }


  public IAccumulationCategoryData roth(Currency roth) {
    this.roth = roth;
    return this;
  }

  /**
   * Get roth
   * @return roth
   */
  @javax.annotation.Nullable
  public Currency getRoth() {
    return roth;
  }

  public void setRoth(Currency roth) {
    this.roth = roth;
  }


  public IAccumulationCategoryData tfsa(Currency tfsa) {
    this.tfsa = tfsa;
    return this;
  }

  /**
   * Get tfsa
   * @return tfsa
   */
  @javax.annotation.Nullable
  public Currency getTfsa() {
    return tfsa;
  }

  public void setTfsa(Currency tfsa) {
    this.tfsa = tfsa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAccumulationCategoryData iaccumulationCategoryData = (IAccumulationCategoryData) o;
    return Objects.equals(this.allAssets, iaccumulationCategoryData.allAssets) &&
        Objects.equals(this.lockedIn, iaccumulationCategoryData.lockedIn) &&
        Objects.equals(this.nonQualified, iaccumulationCategoryData.nonQualified) &&
        Objects.equals(this.qualified, iaccumulationCategoryData.qualified) &&
        Objects.equals(this.roth, iaccumulationCategoryData.roth) &&
        Objects.equals(this.tfsa, iaccumulationCategoryData.tfsa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allAssets, lockedIn, nonQualified, qualified, roth, tfsa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAccumulationCategoryData {\n");
    sb.append("    allAssets: ").append(toIndentedString(allAssets)).append("\n");
    sb.append("    lockedIn: ").append(toIndentedString(lockedIn)).append("\n");
    sb.append("    nonQualified: ").append(toIndentedString(nonQualified)).append("\n");
    sb.append("    qualified: ").append(toIndentedString(qualified)).append("\n");
    sb.append("    roth: ").append(toIndentedString(roth)).append("\n");
    sb.append("    tfsa: ").append(toIndentedString(tfsa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allAssets");
    openapiFields.add("lockedIn");
    openapiFields.add("nonQualified");
    openapiFields.add("qualified");
    openapiFields.add("roth");
    openapiFields.add("tfsa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IAccumulationCategoryData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IAccumulationCategoryData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IAccumulationCategoryData is not found in the empty JSON string", IAccumulationCategoryData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IAccumulationCategoryData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IAccumulationCategoryData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allAssets`
      if (jsonObj.get("allAssets") != null && !jsonObj.get("allAssets").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("allAssets"));
      }
      // validate the optional field `lockedIn`
      if (jsonObj.get("lockedIn") != null && !jsonObj.get("lockedIn").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("lockedIn"));
      }
      // validate the optional field `nonQualified`
      if (jsonObj.get("nonQualified") != null && !jsonObj.get("nonQualified").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("nonQualified"));
      }
      // validate the optional field `qualified`
      if (jsonObj.get("qualified") != null && !jsonObj.get("qualified").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("qualified"));
      }
      // validate the optional field `roth`
      if (jsonObj.get("roth") != null && !jsonObj.get("roth").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("roth"));
      }
      // validate the optional field `tfsa`
      if (jsonObj.get("tfsa") != null && !jsonObj.get("tfsa").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("tfsa"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IAccumulationCategoryData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IAccumulationCategoryData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IAccumulationCategoryData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IAccumulationCategoryData.class));

       return (TypeAdapter<T>) new TypeAdapter<IAccumulationCategoryData>() {
           @Override
           public void write(JsonWriter out, IAccumulationCategoryData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IAccumulationCategoryData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IAccumulationCategoryData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IAccumulationCategoryData
   * @throws IOException if the JSON string is invalid with respect to IAccumulationCategoryData
   */
  public static IAccumulationCategoryData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IAccumulationCategoryData.class);
  }

  /**
   * Convert an instance of IAccumulationCategoryData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

