/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FormattedEnumTypeDistributionDividendType;
import org.openapitools.client.model.FormattedEnumTypePrivateCorporationShareType;
import org.openapitools.client.model.IActivityData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IManualDividendDistribution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IManualDividendDistribution {
  public static final String SERIALIZED_NAME_ACTIVITY_DATA = "activityData";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATA)
  private IActivityData activityData;

  public static final String SERIALIZED_NAME_DIRECT_CO_CLIENT_AFTER_TAX_PROCEEDS_TO = "directCoClientAfterTaxProceedsTo";
  @SerializedName(SERIALIZED_NAME_DIRECT_CO_CLIENT_AFTER_TAX_PROCEEDS_TO)
  private String directCoClientAfterTaxProceedsTo;

  public static final String SERIALIZED_NAME_DIVIDEND_TYPE = "dividendType";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_TYPE)
  private FormattedEnumTypeDistributionDividendType dividendType;

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private Integer shareId;

  public static final String SERIALIZED_NAME_SHARE_TYPE = "shareType";
  @SerializedName(SERIALIZED_NAME_SHARE_TYPE)
  private FormattedEnumTypePrivateCorporationShareType shareType;

  public IManualDividendDistribution() {
  }

  public IManualDividendDistribution(
     String directCoClientAfterTaxProceedsTo, 
     Integer shareId
  ) {
    this();
    this.directCoClientAfterTaxProceedsTo = directCoClientAfterTaxProceedsTo;
    this.shareId = shareId;
  }

  public IManualDividendDistribution activityData(IActivityData activityData) {
    this.activityData = activityData;
    return this;
  }

  /**
   * Get activityData
   * @return activityData
   */
  @javax.annotation.Nullable
  public IActivityData getActivityData() {
    return activityData;
  }

  public void setActivityData(IActivityData activityData) {
    this.activityData = activityData;
  }


  /**
   * Get directCoClientAfterTaxProceedsTo
   * @return directCoClientAfterTaxProceedsTo
   */
  @javax.annotation.Nullable
  public String getDirectCoClientAfterTaxProceedsTo() {
    return directCoClientAfterTaxProceedsTo;
  }



  public IManualDividendDistribution dividendType(FormattedEnumTypeDistributionDividendType dividendType) {
    this.dividendType = dividendType;
    return this;
  }

  /**
   * Get dividendType
   * @return dividendType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypeDistributionDividendType getDividendType() {
    return dividendType;
  }

  public void setDividendType(FormattedEnumTypeDistributionDividendType dividendType) {
    this.dividendType = dividendType;
  }


  /**
   * Get shareId
   * @return shareId
   */
  @javax.annotation.Nullable
  public Integer getShareId() {
    return shareId;
  }



  public IManualDividendDistribution shareType(FormattedEnumTypePrivateCorporationShareType shareType) {
    this.shareType = shareType;
    return this;
  }

  /**
   * Get shareType
   * @return shareType
   */
  @javax.annotation.Nullable
  public FormattedEnumTypePrivateCorporationShareType getShareType() {
    return shareType;
  }

  public void setShareType(FormattedEnumTypePrivateCorporationShareType shareType) {
    this.shareType = shareType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IManualDividendDistribution imanualDividendDistribution = (IManualDividendDistribution) o;
    return Objects.equals(this.activityData, imanualDividendDistribution.activityData) &&
        Objects.equals(this.directCoClientAfterTaxProceedsTo, imanualDividendDistribution.directCoClientAfterTaxProceedsTo) &&
        Objects.equals(this.dividendType, imanualDividendDistribution.dividendType) &&
        Objects.equals(this.shareId, imanualDividendDistribution.shareId) &&
        Objects.equals(this.shareType, imanualDividendDistribution.shareType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityData, directCoClientAfterTaxProceedsTo, dividendType, shareId, shareType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IManualDividendDistribution {\n");
    sb.append("    activityData: ").append(toIndentedString(activityData)).append("\n");
    sb.append("    directCoClientAfterTaxProceedsTo: ").append(toIndentedString(directCoClientAfterTaxProceedsTo)).append("\n");
    sb.append("    dividendType: ").append(toIndentedString(dividendType)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    shareType: ").append(toIndentedString(shareType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityData");
    openapiFields.add("directCoClientAfterTaxProceedsTo");
    openapiFields.add("dividendType");
    openapiFields.add("shareId");
    openapiFields.add("shareType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IManualDividendDistribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IManualDividendDistribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IManualDividendDistribution is not found in the empty JSON string", IManualDividendDistribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IManualDividendDistribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IManualDividendDistribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activityData`
      if (jsonObj.get("activityData") != null && !jsonObj.get("activityData").isJsonNull()) {
        IActivityData.validateJsonElement(jsonObj.get("activityData"));
      }
      if ((jsonObj.get("directCoClientAfterTaxProceedsTo") != null && !jsonObj.get("directCoClientAfterTaxProceedsTo").isJsonNull()) && !jsonObj.get("directCoClientAfterTaxProceedsTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directCoClientAfterTaxProceedsTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directCoClientAfterTaxProceedsTo").toString()));
      }
      // validate the optional field `dividendType`
      if (jsonObj.get("dividendType") != null && !jsonObj.get("dividendType").isJsonNull()) {
        FormattedEnumTypeDistributionDividendType.validateJsonElement(jsonObj.get("dividendType"));
      }
      // validate the optional field `shareType`
      if (jsonObj.get("shareType") != null && !jsonObj.get("shareType").isJsonNull()) {
        FormattedEnumTypePrivateCorporationShareType.validateJsonElement(jsonObj.get("shareType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IManualDividendDistribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IManualDividendDistribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IManualDividendDistribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IManualDividendDistribution.class));

       return (TypeAdapter<T>) new TypeAdapter<IManualDividendDistribution>() {
           @Override
           public void write(JsonWriter out, IManualDividendDistribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IManualDividendDistribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IManualDividendDistribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IManualDividendDistribution
   * @throws IOException if the JSON string is invalid with respect to IManualDividendDistribution
   */
  public static IManualDividendDistribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IManualDividendDistribution.class);
  }

  /**
   * Convert an instance of IManualDividendDistribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

