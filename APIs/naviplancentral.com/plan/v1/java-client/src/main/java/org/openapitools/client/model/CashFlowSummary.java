/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CashFlowSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CashFlowSummary {
  public static final String SERIALIZED_NAME_SURPLUS_DEFICIT = "surplusDeficit";
  @SerializedName(SERIALIZED_NAME_SURPLUS_DEFICIT)
  private Double surplusDeficit;

  public static final String SERIALIZED_NAME_TOTAL_INCOME = "totalIncome";
  @SerializedName(SERIALIZED_NAME_TOTAL_INCOME)
  private Double totalIncome;

  public static final String SERIALIZED_NAME_TOTAL_OUTFLOWS_WITH_TAXES = "totalOutflowsWithTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_OUTFLOWS_WITH_TAXES)
  private Double totalOutflowsWithTaxes;

  public static final String SERIALIZED_NAME_TOTAL_OUTFLOWS_WITHOUT_TAXES = "totalOutflowsWithoutTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_OUTFLOWS_WITHOUT_TAXES)
  private Double totalOutflowsWithoutTaxes;

  public static final String SERIALIZED_NAME_TOTAL_TAXES = "totalTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAXES)
  private Double totalTaxes;

  public CashFlowSummary() {
  }

  public CashFlowSummary surplusDeficit(Double surplusDeficit) {
    this.surplusDeficit = surplusDeficit;
    return this;
  }

  /**
   * Get surplusDeficit
   * @return surplusDeficit
   */
  @javax.annotation.Nullable
  public Double getSurplusDeficit() {
    return surplusDeficit;
  }

  public void setSurplusDeficit(Double surplusDeficit) {
    this.surplusDeficit = surplusDeficit;
  }


  public CashFlowSummary totalIncome(Double totalIncome) {
    this.totalIncome = totalIncome;
    return this;
  }

  /**
   * Get totalIncome
   * @return totalIncome
   */
  @javax.annotation.Nullable
  public Double getTotalIncome() {
    return totalIncome;
  }

  public void setTotalIncome(Double totalIncome) {
    this.totalIncome = totalIncome;
  }


  public CashFlowSummary totalOutflowsWithTaxes(Double totalOutflowsWithTaxes) {
    this.totalOutflowsWithTaxes = totalOutflowsWithTaxes;
    return this;
  }

  /**
   * Get totalOutflowsWithTaxes
   * @return totalOutflowsWithTaxes
   */
  @javax.annotation.Nullable
  public Double getTotalOutflowsWithTaxes() {
    return totalOutflowsWithTaxes;
  }

  public void setTotalOutflowsWithTaxes(Double totalOutflowsWithTaxes) {
    this.totalOutflowsWithTaxes = totalOutflowsWithTaxes;
  }


  public CashFlowSummary totalOutflowsWithoutTaxes(Double totalOutflowsWithoutTaxes) {
    this.totalOutflowsWithoutTaxes = totalOutflowsWithoutTaxes;
    return this;
  }

  /**
   * Get totalOutflowsWithoutTaxes
   * @return totalOutflowsWithoutTaxes
   */
  @javax.annotation.Nullable
  public Double getTotalOutflowsWithoutTaxes() {
    return totalOutflowsWithoutTaxes;
  }

  public void setTotalOutflowsWithoutTaxes(Double totalOutflowsWithoutTaxes) {
    this.totalOutflowsWithoutTaxes = totalOutflowsWithoutTaxes;
  }


  public CashFlowSummary totalTaxes(Double totalTaxes) {
    this.totalTaxes = totalTaxes;
    return this;
  }

  /**
   * Get totalTaxes
   * @return totalTaxes
   */
  @javax.annotation.Nullable
  public Double getTotalTaxes() {
    return totalTaxes;
  }

  public void setTotalTaxes(Double totalTaxes) {
    this.totalTaxes = totalTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowSummary cashFlowSummary = (CashFlowSummary) o;
    return Objects.equals(this.surplusDeficit, cashFlowSummary.surplusDeficit) &&
        Objects.equals(this.totalIncome, cashFlowSummary.totalIncome) &&
        Objects.equals(this.totalOutflowsWithTaxes, cashFlowSummary.totalOutflowsWithTaxes) &&
        Objects.equals(this.totalOutflowsWithoutTaxes, cashFlowSummary.totalOutflowsWithoutTaxes) &&
        Objects.equals(this.totalTaxes, cashFlowSummary.totalTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(surplusDeficit, totalIncome, totalOutflowsWithTaxes, totalOutflowsWithoutTaxes, totalTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowSummary {\n");
    sb.append("    surplusDeficit: ").append(toIndentedString(surplusDeficit)).append("\n");
    sb.append("    totalIncome: ").append(toIndentedString(totalIncome)).append("\n");
    sb.append("    totalOutflowsWithTaxes: ").append(toIndentedString(totalOutflowsWithTaxes)).append("\n");
    sb.append("    totalOutflowsWithoutTaxes: ").append(toIndentedString(totalOutflowsWithoutTaxes)).append("\n");
    sb.append("    totalTaxes: ").append(toIndentedString(totalTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("surplusDeficit");
    openapiFields.add("totalIncome");
    openapiFields.add("totalOutflowsWithTaxes");
    openapiFields.add("totalOutflowsWithoutTaxes");
    openapiFields.add("totalTaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CashFlowSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CashFlowSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashFlowSummary is not found in the empty JSON string", CashFlowSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CashFlowSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashFlowSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashFlowSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashFlowSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashFlowSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashFlowSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CashFlowSummary>() {
           @Override
           public void write(JsonWriter out, CashFlowSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashFlowSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CashFlowSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CashFlowSummary
   * @throws IOException if the JSON string is invalid with respect to CashFlowSummary
   */
  public static CashFlowSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashFlowSummary.class);
  }

  /**
   * Convert an instance of CashFlowSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

