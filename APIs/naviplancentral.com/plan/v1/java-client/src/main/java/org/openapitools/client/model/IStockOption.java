/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.FormattedDateRange;
import org.openapitools.client.model.IVestingData;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IStockOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IStockOption {
  public static final String SERIALIZED_NAME_ANNUAL_DIVIDEND_PER_UNIT = "annualDividendPerUnit";
  @SerializedName(SERIALIZED_NAME_ANNUAL_DIVIDEND_PER_UNIT)
  private Currency annualDividendPerUnit;

  public static final String SERIALIZED_NAME_APPLICABLE_RANGE_RETIREMENT_LIQUIDATED_ASSETS = "applicableRangeRetirementLiquidatedAssets";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_RANGE_RETIREMENT_LIQUIDATED_ASSETS)
  private FormattedDateRange applicableRangeRetirementLiquidatedAssets;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CURRENT_UNIT_PRICE = "currentUnitPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_UNIT_PRICE)
  private Currency currentUnitPrice;

  public static final String SERIALIZED_NAME_CURRENT_UNIT_PRICE_DATE = "currentUnitPriceDate";
  @SerializedName(SERIALIZED_NAME_CURRENT_UNIT_PRICE_DATE)
  private Date currentUnitPriceDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_OF_PLAN_YEAR_EXERCISABLE_GROSS_VALUE = "endOfPlanYearExercisableGrossValue";
  @SerializedName(SERIALIZED_NAME_END_OF_PLAN_YEAR_EXERCISABLE_GROSS_VALUE)
  private Currency endOfPlanYearExercisableGrossValue;

  public static final String SERIALIZED_NAME_EXERCISE_COST = "exerciseCost";
  @SerializedName(SERIALIZED_NAME_EXERCISE_COST)
  private Currency exerciseCost;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private Date expirationDate;

  public static final String SERIALIZED_NAME_GRANT_DATE = "grantDate";
  @SerializedName(SERIALIZED_NAME_GRANT_DATE)
  private Date grantDate;

  public static final String SERIALIZED_NAME_GRANTED_OPTIONS = "grantedOptions";
  @SerializedName(SERIALIZED_NAME_GRANTED_OPTIONS)
  private Integer grantedOptions;

  public static final String SERIALIZED_NAME_GROWTH_RATE = "growthRate";
  @SerializedName(SERIALIZED_NAME_GROWTH_RATE)
  private Percent growthRate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPTIONS_EXERCISABLE = "optionsExercisable";
  @SerializedName(SERIALIZED_NAME_OPTIONS_EXERCISABLE)
  private Integer optionsExercisable;

  public static final String SERIALIZED_NAME_OPTIONS_EXERCISED = "optionsExercised";
  @SerializedName(SERIALIZED_NAME_OPTIONS_EXERCISED)
  private Integer optionsExercised;

  public static final String SERIALIZED_NAME_OPTIONS_VESTED = "optionsVested";
  @SerializedName(SERIALIZED_NAME_OPTIONS_VESTED)
  private Integer optionsVested;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PRE_TAX_PROFIT = "preTaxProfit";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_PROFIT)
  private Currency preTaxProfit;

  public static final String SERIALIZED_NAME_START_OF_YEAR_A_M_T_BASIS = "startOfYearAMTBasis";
  @SerializedName(SERIALIZED_NAME_START_OF_YEAR_A_M_T_BASIS)
  private Currency startOfYearAMTBasis;

  public static final String SERIALIZED_NAME_START_OF_YEAR_COST_BASIS = "startOfYearCostBasis";
  @SerializedName(SERIALIZED_NAME_START_OF_YEAR_COST_BASIS)
  private Currency startOfYearCostBasis;

  public static final String SERIALIZED_NAME_START_OF_YEAR_UNIT_PRICE = "startOfYearUnitPrice";
  @SerializedName(SERIALIZED_NAME_START_OF_YEAR_UNIT_PRICE)
  private Currency startOfYearUnitPrice;

  public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";
  @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
  private Currency strikePrice;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NON_QUALIFIED_STOCK_OPTION("NonQualifiedStockOption"),
    
    INCENTIVE_STOCK_OPTION("IncentiveStockOption");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_TYPE_FORMATTED = "typeFormatted";
  @SerializedName(SERIALIZED_NAME_TYPE_FORMATTED)
  private String typeFormatted;

  public static final String SERIALIZED_NAME_VESTING_SCHEDULE = "vestingSchedule";
  @SerializedName(SERIALIZED_NAME_VESTING_SCHEDULE)
  private List<IVestingData> vestingSchedule = new ArrayList<>();

  public IStockOption() {
  }

  public IStockOption(
     String company, 
     String description, 
     Integer grantedOptions, 
     String id, 
     Integer optionsExercisable, 
     Integer optionsExercised, 
     Integer optionsVested, 
     String owner, 
     String symbol, 
     TypeEnum type, 
     String typeFormatted, 
     List<IVestingData> vestingSchedule
  ) {
    this();
    this.company = company;
    this.description = description;
    this.grantedOptions = grantedOptions;
    this.id = id;
    this.optionsExercisable = optionsExercisable;
    this.optionsExercised = optionsExercised;
    this.optionsVested = optionsVested;
    this.owner = owner;
    this.symbol = symbol;
    this.type = type;
    this.typeFormatted = typeFormatted;
    this.vestingSchedule = vestingSchedule;
  }

  public IStockOption annualDividendPerUnit(Currency annualDividendPerUnit) {
    this.annualDividendPerUnit = annualDividendPerUnit;
    return this;
  }

  /**
   * Get annualDividendPerUnit
   * @return annualDividendPerUnit
   */
  @javax.annotation.Nullable
  public Currency getAnnualDividendPerUnit() {
    return annualDividendPerUnit;
  }

  public void setAnnualDividendPerUnit(Currency annualDividendPerUnit) {
    this.annualDividendPerUnit = annualDividendPerUnit;
  }


  public IStockOption applicableRangeRetirementLiquidatedAssets(FormattedDateRange applicableRangeRetirementLiquidatedAssets) {
    this.applicableRangeRetirementLiquidatedAssets = applicableRangeRetirementLiquidatedAssets;
    return this;
  }

  /**
   * Get applicableRangeRetirementLiquidatedAssets
   * @return applicableRangeRetirementLiquidatedAssets
   */
  @javax.annotation.Nullable
  public FormattedDateRange getApplicableRangeRetirementLiquidatedAssets() {
    return applicableRangeRetirementLiquidatedAssets;
  }

  public void setApplicableRangeRetirementLiquidatedAssets(FormattedDateRange applicableRangeRetirementLiquidatedAssets) {
    this.applicableRangeRetirementLiquidatedAssets = applicableRangeRetirementLiquidatedAssets;
  }


  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }



  public IStockOption currentUnitPrice(Currency currentUnitPrice) {
    this.currentUnitPrice = currentUnitPrice;
    return this;
  }

  /**
   * Get currentUnitPrice
   * @return currentUnitPrice
   */
  @javax.annotation.Nullable
  public Currency getCurrentUnitPrice() {
    return currentUnitPrice;
  }

  public void setCurrentUnitPrice(Currency currentUnitPrice) {
    this.currentUnitPrice = currentUnitPrice;
  }


  public IStockOption currentUnitPriceDate(Date currentUnitPriceDate) {
    this.currentUnitPriceDate = currentUnitPriceDate;
    return this;
  }

  /**
   * Get currentUnitPriceDate
   * @return currentUnitPriceDate
   */
  @javax.annotation.Nullable
  public Date getCurrentUnitPriceDate() {
    return currentUnitPriceDate;
  }

  public void setCurrentUnitPriceDate(Date currentUnitPriceDate) {
    this.currentUnitPriceDate = currentUnitPriceDate;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public IStockOption endOfPlanYearExercisableGrossValue(Currency endOfPlanYearExercisableGrossValue) {
    this.endOfPlanYearExercisableGrossValue = endOfPlanYearExercisableGrossValue;
    return this;
  }

  /**
   * Get endOfPlanYearExercisableGrossValue
   * @return endOfPlanYearExercisableGrossValue
   */
  @javax.annotation.Nullable
  public Currency getEndOfPlanYearExercisableGrossValue() {
    return endOfPlanYearExercisableGrossValue;
  }

  public void setEndOfPlanYearExercisableGrossValue(Currency endOfPlanYearExercisableGrossValue) {
    this.endOfPlanYearExercisableGrossValue = endOfPlanYearExercisableGrossValue;
  }


  public IStockOption exerciseCost(Currency exerciseCost) {
    this.exerciseCost = exerciseCost;
    return this;
  }

  /**
   * Get exerciseCost
   * @return exerciseCost
   */
  @javax.annotation.Nullable
  public Currency getExerciseCost() {
    return exerciseCost;
  }

  public void setExerciseCost(Currency exerciseCost) {
    this.exerciseCost = exerciseCost;
  }


  public IStockOption expirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public Date getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
  }


  public IStockOption grantDate(Date grantDate) {
    this.grantDate = grantDate;
    return this;
  }

  /**
   * Get grantDate
   * @return grantDate
   */
  @javax.annotation.Nullable
  public Date getGrantDate() {
    return grantDate;
  }

  public void setGrantDate(Date grantDate) {
    this.grantDate = grantDate;
  }


  /**
   * Get grantedOptions
   * @return grantedOptions
   */
  @javax.annotation.Nullable
  public Integer getGrantedOptions() {
    return grantedOptions;
  }



  public IStockOption growthRate(Percent growthRate) {
    this.growthRate = growthRate;
    return this;
  }

  /**
   * Get growthRate
   * @return growthRate
   */
  @javax.annotation.Nullable
  public Percent getGrowthRate() {
    return growthRate;
  }

  public void setGrowthRate(Percent growthRate) {
    this.growthRate = growthRate;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get optionsExercisable
   * @return optionsExercisable
   */
  @javax.annotation.Nullable
  public Integer getOptionsExercisable() {
    return optionsExercisable;
  }



  /**
   * Get optionsExercised
   * @return optionsExercised
   */
  @javax.annotation.Nullable
  public Integer getOptionsExercised() {
    return optionsExercised;
  }



  /**
   * Get optionsVested
   * @return optionsVested
   */
  @javax.annotation.Nullable
  public Integer getOptionsVested() {
    return optionsVested;
  }



  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }



  public IStockOption preTaxProfit(Currency preTaxProfit) {
    this.preTaxProfit = preTaxProfit;
    return this;
  }

  /**
   * Get preTaxProfit
   * @return preTaxProfit
   */
  @javax.annotation.Nullable
  public Currency getPreTaxProfit() {
    return preTaxProfit;
  }

  public void setPreTaxProfit(Currency preTaxProfit) {
    this.preTaxProfit = preTaxProfit;
  }


  public IStockOption startOfYearAMTBasis(Currency startOfYearAMTBasis) {
    this.startOfYearAMTBasis = startOfYearAMTBasis;
    return this;
  }

  /**
   * Get startOfYearAMTBasis
   * @return startOfYearAMTBasis
   */
  @javax.annotation.Nullable
  public Currency getStartOfYearAMTBasis() {
    return startOfYearAMTBasis;
  }

  public void setStartOfYearAMTBasis(Currency startOfYearAMTBasis) {
    this.startOfYearAMTBasis = startOfYearAMTBasis;
  }


  public IStockOption startOfYearCostBasis(Currency startOfYearCostBasis) {
    this.startOfYearCostBasis = startOfYearCostBasis;
    return this;
  }

  /**
   * Get startOfYearCostBasis
   * @return startOfYearCostBasis
   */
  @javax.annotation.Nullable
  public Currency getStartOfYearCostBasis() {
    return startOfYearCostBasis;
  }

  public void setStartOfYearCostBasis(Currency startOfYearCostBasis) {
    this.startOfYearCostBasis = startOfYearCostBasis;
  }


  public IStockOption startOfYearUnitPrice(Currency startOfYearUnitPrice) {
    this.startOfYearUnitPrice = startOfYearUnitPrice;
    return this;
  }

  /**
   * Get startOfYearUnitPrice
   * @return startOfYearUnitPrice
   */
  @javax.annotation.Nullable
  public Currency getStartOfYearUnitPrice() {
    return startOfYearUnitPrice;
  }

  public void setStartOfYearUnitPrice(Currency startOfYearUnitPrice) {
    this.startOfYearUnitPrice = startOfYearUnitPrice;
  }


  public IStockOption strikePrice(Currency strikePrice) {
    this.strikePrice = strikePrice;
    return this;
  }

  /**
   * Get strikePrice
   * @return strikePrice
   */
  @javax.annotation.Nullable
  public Currency getStrikePrice() {
    return strikePrice;
  }

  public void setStrikePrice(Currency strikePrice) {
    this.strikePrice = strikePrice;
  }


  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }



  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  /**
   * Get typeFormatted
   * @return typeFormatted
   */
  @javax.annotation.Nullable
  public String getTypeFormatted() {
    return typeFormatted;
  }



  /**
   * Get vestingSchedule
   * @return vestingSchedule
   */
  @javax.annotation.Nullable
  public List<IVestingData> getVestingSchedule() {
    return vestingSchedule;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IStockOption istockOption = (IStockOption) o;
    return Objects.equals(this.annualDividendPerUnit, istockOption.annualDividendPerUnit) &&
        Objects.equals(this.applicableRangeRetirementLiquidatedAssets, istockOption.applicableRangeRetirementLiquidatedAssets) &&
        Objects.equals(this.company, istockOption.company) &&
        Objects.equals(this.currentUnitPrice, istockOption.currentUnitPrice) &&
        Objects.equals(this.currentUnitPriceDate, istockOption.currentUnitPriceDate) &&
        Objects.equals(this.description, istockOption.description) &&
        Objects.equals(this.endOfPlanYearExercisableGrossValue, istockOption.endOfPlanYearExercisableGrossValue) &&
        Objects.equals(this.exerciseCost, istockOption.exerciseCost) &&
        Objects.equals(this.expirationDate, istockOption.expirationDate) &&
        Objects.equals(this.grantDate, istockOption.grantDate) &&
        Objects.equals(this.grantedOptions, istockOption.grantedOptions) &&
        Objects.equals(this.growthRate, istockOption.growthRate) &&
        Objects.equals(this.id, istockOption.id) &&
        Objects.equals(this.optionsExercisable, istockOption.optionsExercisable) &&
        Objects.equals(this.optionsExercised, istockOption.optionsExercised) &&
        Objects.equals(this.optionsVested, istockOption.optionsVested) &&
        Objects.equals(this.owner, istockOption.owner) &&
        Objects.equals(this.preTaxProfit, istockOption.preTaxProfit) &&
        Objects.equals(this.startOfYearAMTBasis, istockOption.startOfYearAMTBasis) &&
        Objects.equals(this.startOfYearCostBasis, istockOption.startOfYearCostBasis) &&
        Objects.equals(this.startOfYearUnitPrice, istockOption.startOfYearUnitPrice) &&
        Objects.equals(this.strikePrice, istockOption.strikePrice) &&
        Objects.equals(this.symbol, istockOption.symbol) &&
        Objects.equals(this.type, istockOption.type) &&
        Objects.equals(this.typeFormatted, istockOption.typeFormatted) &&
        Objects.equals(this.vestingSchedule, istockOption.vestingSchedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualDividendPerUnit, applicableRangeRetirementLiquidatedAssets, company, currentUnitPrice, currentUnitPriceDate, description, endOfPlanYearExercisableGrossValue, exerciseCost, expirationDate, grantDate, grantedOptions, growthRate, id, optionsExercisable, optionsExercised, optionsVested, owner, preTaxProfit, startOfYearAMTBasis, startOfYearCostBasis, startOfYearUnitPrice, strikePrice, symbol, type, typeFormatted, vestingSchedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IStockOption {\n");
    sb.append("    annualDividendPerUnit: ").append(toIndentedString(annualDividendPerUnit)).append("\n");
    sb.append("    applicableRangeRetirementLiquidatedAssets: ").append(toIndentedString(applicableRangeRetirementLiquidatedAssets)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    currentUnitPrice: ").append(toIndentedString(currentUnitPrice)).append("\n");
    sb.append("    currentUnitPriceDate: ").append(toIndentedString(currentUnitPriceDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endOfPlanYearExercisableGrossValue: ").append(toIndentedString(endOfPlanYearExercisableGrossValue)).append("\n");
    sb.append("    exerciseCost: ").append(toIndentedString(exerciseCost)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    grantDate: ").append(toIndentedString(grantDate)).append("\n");
    sb.append("    grantedOptions: ").append(toIndentedString(grantedOptions)).append("\n");
    sb.append("    growthRate: ").append(toIndentedString(growthRate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    optionsExercisable: ").append(toIndentedString(optionsExercisable)).append("\n");
    sb.append("    optionsExercised: ").append(toIndentedString(optionsExercised)).append("\n");
    sb.append("    optionsVested: ").append(toIndentedString(optionsVested)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    preTaxProfit: ").append(toIndentedString(preTaxProfit)).append("\n");
    sb.append("    startOfYearAMTBasis: ").append(toIndentedString(startOfYearAMTBasis)).append("\n");
    sb.append("    startOfYearCostBasis: ").append(toIndentedString(startOfYearCostBasis)).append("\n");
    sb.append("    startOfYearUnitPrice: ").append(toIndentedString(startOfYearUnitPrice)).append("\n");
    sb.append("    strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeFormatted: ").append(toIndentedString(typeFormatted)).append("\n");
    sb.append("    vestingSchedule: ").append(toIndentedString(vestingSchedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualDividendPerUnit");
    openapiFields.add("applicableRangeRetirementLiquidatedAssets");
    openapiFields.add("company");
    openapiFields.add("currentUnitPrice");
    openapiFields.add("currentUnitPriceDate");
    openapiFields.add("description");
    openapiFields.add("endOfPlanYearExercisableGrossValue");
    openapiFields.add("exerciseCost");
    openapiFields.add("expirationDate");
    openapiFields.add("grantDate");
    openapiFields.add("grantedOptions");
    openapiFields.add("growthRate");
    openapiFields.add("id");
    openapiFields.add("optionsExercisable");
    openapiFields.add("optionsExercised");
    openapiFields.add("optionsVested");
    openapiFields.add("owner");
    openapiFields.add("preTaxProfit");
    openapiFields.add("startOfYearAMTBasis");
    openapiFields.add("startOfYearCostBasis");
    openapiFields.add("startOfYearUnitPrice");
    openapiFields.add("strikePrice");
    openapiFields.add("symbol");
    openapiFields.add("type");
    openapiFields.add("typeFormatted");
    openapiFields.add("vestingSchedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IStockOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IStockOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IStockOption is not found in the empty JSON string", IStockOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IStockOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IStockOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualDividendPerUnit`
      if (jsonObj.get("annualDividendPerUnit") != null && !jsonObj.get("annualDividendPerUnit").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("annualDividendPerUnit"));
      }
      // validate the optional field `applicableRangeRetirementLiquidatedAssets`
      if (jsonObj.get("applicableRangeRetirementLiquidatedAssets") != null && !jsonObj.get("applicableRangeRetirementLiquidatedAssets").isJsonNull()) {
        FormattedDateRange.validateJsonElement(jsonObj.get("applicableRangeRetirementLiquidatedAssets"));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      // validate the optional field `currentUnitPrice`
      if (jsonObj.get("currentUnitPrice") != null && !jsonObj.get("currentUnitPrice").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentUnitPrice"));
      }
      // validate the optional field `currentUnitPriceDate`
      if (jsonObj.get("currentUnitPriceDate") != null && !jsonObj.get("currentUnitPriceDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("currentUnitPriceDate"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `endOfPlanYearExercisableGrossValue`
      if (jsonObj.get("endOfPlanYearExercisableGrossValue") != null && !jsonObj.get("endOfPlanYearExercisableGrossValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("endOfPlanYearExercisableGrossValue"));
      }
      // validate the optional field `exerciseCost`
      if (jsonObj.get("exerciseCost") != null && !jsonObj.get("exerciseCost").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("exerciseCost"));
      }
      // validate the optional field `expirationDate`
      if (jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("expirationDate"));
      }
      // validate the optional field `grantDate`
      if (jsonObj.get("grantDate") != null && !jsonObj.get("grantDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("grantDate"));
      }
      // validate the optional field `growthRate`
      if (jsonObj.get("growthRate") != null && !jsonObj.get("growthRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("growthRate"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `preTaxProfit`
      if (jsonObj.get("preTaxProfit") != null && !jsonObj.get("preTaxProfit").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("preTaxProfit"));
      }
      // validate the optional field `startOfYearAMTBasis`
      if (jsonObj.get("startOfYearAMTBasis") != null && !jsonObj.get("startOfYearAMTBasis").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("startOfYearAMTBasis"));
      }
      // validate the optional field `startOfYearCostBasis`
      if (jsonObj.get("startOfYearCostBasis") != null && !jsonObj.get("startOfYearCostBasis").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("startOfYearCostBasis"));
      }
      // validate the optional field `startOfYearUnitPrice`
      if (jsonObj.get("startOfYearUnitPrice") != null && !jsonObj.get("startOfYearUnitPrice").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("startOfYearUnitPrice"));
      }
      // validate the optional field `strikePrice`
      if (jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("strikePrice"));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("typeFormatted") != null && !jsonObj.get("typeFormatted").isJsonNull()) && !jsonObj.get("typeFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeFormatted").toString()));
      }
      if (jsonObj.get("vestingSchedule") != null && !jsonObj.get("vestingSchedule").isJsonNull()) {
        JsonArray jsonArrayvestingSchedule = jsonObj.getAsJsonArray("vestingSchedule");
        if (jsonArrayvestingSchedule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vestingSchedule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vestingSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("vestingSchedule").toString()));
          }

          // validate the optional field `vestingSchedule` (array)
          for (int i = 0; i < jsonArrayvestingSchedule.size(); i++) {
            IVestingData.validateJsonElement(jsonArrayvestingSchedule.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IStockOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IStockOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IStockOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IStockOption.class));

       return (TypeAdapter<T>) new TypeAdapter<IStockOption>() {
           @Override
           public void write(JsonWriter out, IStockOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IStockOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IStockOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IStockOption
   * @throws IOException if the JSON string is invalid with respect to IStockOption
   */
  public static IStockOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IStockOption.class);
  }

  /**
   * Convert an instance of IStockOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

