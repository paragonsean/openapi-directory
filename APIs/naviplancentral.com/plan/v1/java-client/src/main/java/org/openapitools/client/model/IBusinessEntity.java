/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.IAssetId;
import org.openapitools.client.model.IBusinessEntityActivity;
import org.openapitools.client.model.ILiquidationEvent;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IBusinessEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IBusinessEntity {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private List<IBusinessEntityActivity> activities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private IAssetId assetId;

  /**
   * Gets or Sets businessType
   */
  @JsonAdapter(BusinessTypeEnum.Adapter.class)
  public enum BusinessTypeEnum {
    UNDEFINED("Undefined"),
    
    LLC("LLC"),
    
    PARTNERSHIP("Partnership"),
    
    S_CORPORATION("SCorporation"),
    
    C_CORPORATION("CCorporation");

    private String value;

    BusinessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessTypeEnum fromValue(String value) {
      for (BusinessTypeEnum b : BusinessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BusinessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_TYPE = "businessType";
  @SerializedName(SERIALIZED_NAME_BUSINESS_TYPE)
  private BusinessTypeEnum businessType;

  public static final String SERIALIZED_NAME_BUSINESS_TYPE_FORMATTED = "businessTypeFormatted";
  @SerializedName(SERIALIZED_NAME_BUSINESS_TYPE_FORMATTED)
  private String businessTypeFormatted;

  public static final String SERIALIZED_NAME_CURRENT_ANNUAL_DISTRIBUTIONS = "currentAnnualDistributions";
  @SerializedName(SERIALIZED_NAME_CURRENT_ANNUAL_DISTRIBUTIONS)
  private Currency currentAnnualDistributions;

  public static final String SERIALIZED_NAME_CURRENT_ANNUAL_DIVIDENDS = "currentAnnualDividends";
  @SerializedName(SERIALIZED_NAME_CURRENT_ANNUAL_DIVIDENDS)
  private Currency currentAnnualDividends;

  public static final String SERIALIZED_NAME_CURRENT_ANNUAL_GROWTH_RATE = "currentAnnualGrowthRate";
  @SerializedName(SERIALIZED_NAME_CURRENT_ANNUAL_GROWTH_RATE)
  private Percent currentAnnualGrowthRate;

  public static final String SERIALIZED_NAME_CURRENT_ANNUAL_NET_INCOME = "currentAnnualNetIncome";
  @SerializedName(SERIALIZED_NAME_CURRENT_ANNUAL_NET_INCOME)
  private Currency currentAnnualNetIncome;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  public static final String SERIALIZED_NAME_LIQUIDATION_EVENT = "liquidationEvent";
  @SerializedName(SERIALIZED_NAME_LIQUIDATION_EVENT)
  private ILiquidationEvent liquidationEvent;

  public static final String SERIALIZED_NAME_MARKET_VALUATION_DATE = "marketValuationDate";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUATION_DATE)
  private Date marketValuationDate;

  public static final String SERIALIZED_NAME_MARKET_VALUE = "marketValue";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUE)
  private Currency marketValue;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PURCHASE_AMOUNT = "purchaseAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AMOUNT)
  private Currency purchaseAmount;

  public static final String SERIALIZED_NAME_PURCHASE_DATE = "purchaseDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE)
  private Date purchaseDate;

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standardDeviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private Percent standardDeviation;

  public IBusinessEntity() {
  }

  public IBusinessEntity(
     List<IBusinessEntityActivity> activities, 
     BusinessTypeEnum businessType, 
     String businessTypeFormatted, 
     String entityName, 
     String owner
  ) {
    this();
    this.activities = activities;
    this.businessType = businessType;
    this.businessTypeFormatted = businessTypeFormatted;
    this.entityName = entityName;
    this.owner = owner;
  }

  /**
   * Get activities
   * @return activities
   */
  @javax.annotation.Nullable
  public List<IBusinessEntityActivity> getActivities() {
    return activities;
  }



  public IBusinessEntity assetId(IAssetId assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Get assetId
   * @return assetId
   */
  @javax.annotation.Nullable
  public IAssetId getAssetId() {
    return assetId;
  }

  public void setAssetId(IAssetId assetId) {
    this.assetId = assetId;
  }


  /**
   * Get businessType
   * @return businessType
   */
  @javax.annotation.Nullable
  public BusinessTypeEnum getBusinessType() {
    return businessType;
  }



  /**
   * Get businessTypeFormatted
   * @return businessTypeFormatted
   */
  @javax.annotation.Nullable
  public String getBusinessTypeFormatted() {
    return businessTypeFormatted;
  }



  public IBusinessEntity currentAnnualDistributions(Currency currentAnnualDistributions) {
    this.currentAnnualDistributions = currentAnnualDistributions;
    return this;
  }

  /**
   * Get currentAnnualDistributions
   * @return currentAnnualDistributions
   */
  @javax.annotation.Nullable
  public Currency getCurrentAnnualDistributions() {
    return currentAnnualDistributions;
  }

  public void setCurrentAnnualDistributions(Currency currentAnnualDistributions) {
    this.currentAnnualDistributions = currentAnnualDistributions;
  }


  public IBusinessEntity currentAnnualDividends(Currency currentAnnualDividends) {
    this.currentAnnualDividends = currentAnnualDividends;
    return this;
  }

  /**
   * Get currentAnnualDividends
   * @return currentAnnualDividends
   */
  @javax.annotation.Nullable
  public Currency getCurrentAnnualDividends() {
    return currentAnnualDividends;
  }

  public void setCurrentAnnualDividends(Currency currentAnnualDividends) {
    this.currentAnnualDividends = currentAnnualDividends;
  }


  public IBusinessEntity currentAnnualGrowthRate(Percent currentAnnualGrowthRate) {
    this.currentAnnualGrowthRate = currentAnnualGrowthRate;
    return this;
  }

  /**
   * Get currentAnnualGrowthRate
   * @return currentAnnualGrowthRate
   */
  @javax.annotation.Nullable
  public Percent getCurrentAnnualGrowthRate() {
    return currentAnnualGrowthRate;
  }

  public void setCurrentAnnualGrowthRate(Percent currentAnnualGrowthRate) {
    this.currentAnnualGrowthRate = currentAnnualGrowthRate;
  }


  public IBusinessEntity currentAnnualNetIncome(Currency currentAnnualNetIncome) {
    this.currentAnnualNetIncome = currentAnnualNetIncome;
    return this;
  }

  /**
   * Get currentAnnualNetIncome
   * @return currentAnnualNetIncome
   */
  @javax.annotation.Nullable
  public Currency getCurrentAnnualNetIncome() {
    return currentAnnualNetIncome;
  }

  public void setCurrentAnnualNetIncome(Currency currentAnnualNetIncome) {
    this.currentAnnualNetIncome = currentAnnualNetIncome;
  }


  /**
   * Get entityName
   * @return entityName
   */
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }



  public IBusinessEntity liquidationEvent(ILiquidationEvent liquidationEvent) {
    this.liquidationEvent = liquidationEvent;
    return this;
  }

  /**
   * Get liquidationEvent
   * @return liquidationEvent
   */
  @javax.annotation.Nullable
  public ILiquidationEvent getLiquidationEvent() {
    return liquidationEvent;
  }

  public void setLiquidationEvent(ILiquidationEvent liquidationEvent) {
    this.liquidationEvent = liquidationEvent;
  }


  public IBusinessEntity marketValuationDate(Date marketValuationDate) {
    this.marketValuationDate = marketValuationDate;
    return this;
  }

  /**
   * Get marketValuationDate
   * @return marketValuationDate
   */
  @javax.annotation.Nullable
  public Date getMarketValuationDate() {
    return marketValuationDate;
  }

  public void setMarketValuationDate(Date marketValuationDate) {
    this.marketValuationDate = marketValuationDate;
  }


  public IBusinessEntity marketValue(Currency marketValue) {
    this.marketValue = marketValue;
    return this;
  }

  /**
   * Get marketValue
   * @return marketValue
   */
  @javax.annotation.Nullable
  public Currency getMarketValue() {
    return marketValue;
  }

  public void setMarketValue(Currency marketValue) {
    this.marketValue = marketValue;
  }


  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }



  public IBusinessEntity purchaseAmount(Currency purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

  /**
   * Get purchaseAmount
   * @return purchaseAmount
   */
  @javax.annotation.Nullable
  public Currency getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(Currency purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }


  public IBusinessEntity purchaseDate(Date purchaseDate) {
    this.purchaseDate = purchaseDate;
    return this;
  }

  /**
   * Get purchaseDate
   * @return purchaseDate
   */
  @javax.annotation.Nullable
  public Date getPurchaseDate() {
    return purchaseDate;
  }

  public void setPurchaseDate(Date purchaseDate) {
    this.purchaseDate = purchaseDate;
  }


  public IBusinessEntity standardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * Get standardDeviation
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public Percent getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(Percent standardDeviation) {
    this.standardDeviation = standardDeviation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IBusinessEntity ibusinessEntity = (IBusinessEntity) o;
    return Objects.equals(this.activities, ibusinessEntity.activities) &&
        Objects.equals(this.assetId, ibusinessEntity.assetId) &&
        Objects.equals(this.businessType, ibusinessEntity.businessType) &&
        Objects.equals(this.businessTypeFormatted, ibusinessEntity.businessTypeFormatted) &&
        Objects.equals(this.currentAnnualDistributions, ibusinessEntity.currentAnnualDistributions) &&
        Objects.equals(this.currentAnnualDividends, ibusinessEntity.currentAnnualDividends) &&
        Objects.equals(this.currentAnnualGrowthRate, ibusinessEntity.currentAnnualGrowthRate) &&
        Objects.equals(this.currentAnnualNetIncome, ibusinessEntity.currentAnnualNetIncome) &&
        Objects.equals(this.entityName, ibusinessEntity.entityName) &&
        Objects.equals(this.liquidationEvent, ibusinessEntity.liquidationEvent) &&
        Objects.equals(this.marketValuationDate, ibusinessEntity.marketValuationDate) &&
        Objects.equals(this.marketValue, ibusinessEntity.marketValue) &&
        Objects.equals(this.owner, ibusinessEntity.owner) &&
        Objects.equals(this.purchaseAmount, ibusinessEntity.purchaseAmount) &&
        Objects.equals(this.purchaseDate, ibusinessEntity.purchaseDate) &&
        Objects.equals(this.standardDeviation, ibusinessEntity.standardDeviation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, assetId, businessType, businessTypeFormatted, currentAnnualDistributions, currentAnnualDividends, currentAnnualGrowthRate, currentAnnualNetIncome, entityName, liquidationEvent, marketValuationDate, marketValue, owner, purchaseAmount, purchaseDate, standardDeviation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IBusinessEntity {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    businessType: ").append(toIndentedString(businessType)).append("\n");
    sb.append("    businessTypeFormatted: ").append(toIndentedString(businessTypeFormatted)).append("\n");
    sb.append("    currentAnnualDistributions: ").append(toIndentedString(currentAnnualDistributions)).append("\n");
    sb.append("    currentAnnualDividends: ").append(toIndentedString(currentAnnualDividends)).append("\n");
    sb.append("    currentAnnualGrowthRate: ").append(toIndentedString(currentAnnualGrowthRate)).append("\n");
    sb.append("    currentAnnualNetIncome: ").append(toIndentedString(currentAnnualNetIncome)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    liquidationEvent: ").append(toIndentedString(liquidationEvent)).append("\n");
    sb.append("    marketValuationDate: ").append(toIndentedString(marketValuationDate)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    purchaseDate: ").append(toIndentedString(purchaseDate)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("assetId");
    openapiFields.add("businessType");
    openapiFields.add("businessTypeFormatted");
    openapiFields.add("currentAnnualDistributions");
    openapiFields.add("currentAnnualDividends");
    openapiFields.add("currentAnnualGrowthRate");
    openapiFields.add("currentAnnualNetIncome");
    openapiFields.add("entityName");
    openapiFields.add("liquidationEvent");
    openapiFields.add("marketValuationDate");
    openapiFields.add("marketValue");
    openapiFields.add("owner");
    openapiFields.add("purchaseAmount");
    openapiFields.add("purchaseDate");
    openapiFields.add("standardDeviation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IBusinessEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IBusinessEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IBusinessEntity is not found in the empty JSON string", IBusinessEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IBusinessEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IBusinessEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        JsonArray jsonArrayactivities = jsonObj.getAsJsonArray("activities");
        if (jsonArrayactivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activities` to be an array in the JSON string but got `%s`", jsonObj.get("activities").toString()));
          }

          // validate the optional field `activities` (array)
          for (int i = 0; i < jsonArrayactivities.size(); i++) {
            IBusinessEntityActivity.validateJsonElement(jsonArrayactivities.get(i));
          };
        }
      }
      // validate the optional field `assetId`
      if (jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) {
        IAssetId.validateJsonElement(jsonObj.get("assetId"));
      }
      if ((jsonObj.get("businessType") != null && !jsonObj.get("businessType").isJsonNull()) && !jsonObj.get("businessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessType").toString()));
      }
      // validate the optional field `businessType`
      if (jsonObj.get("businessType") != null && !jsonObj.get("businessType").isJsonNull()) {
        BusinessTypeEnum.validateJsonElement(jsonObj.get("businessType"));
      }
      if ((jsonObj.get("businessTypeFormatted") != null && !jsonObj.get("businessTypeFormatted").isJsonNull()) && !jsonObj.get("businessTypeFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessTypeFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessTypeFormatted").toString()));
      }
      // validate the optional field `currentAnnualDistributions`
      if (jsonObj.get("currentAnnualDistributions") != null && !jsonObj.get("currentAnnualDistributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentAnnualDistributions"));
      }
      // validate the optional field `currentAnnualDividends`
      if (jsonObj.get("currentAnnualDividends") != null && !jsonObj.get("currentAnnualDividends").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentAnnualDividends"));
      }
      // validate the optional field `currentAnnualGrowthRate`
      if (jsonObj.get("currentAnnualGrowthRate") != null && !jsonObj.get("currentAnnualGrowthRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("currentAnnualGrowthRate"));
      }
      // validate the optional field `currentAnnualNetIncome`
      if (jsonObj.get("currentAnnualNetIncome") != null && !jsonObj.get("currentAnnualNetIncome").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currentAnnualNetIncome"));
      }
      if ((jsonObj.get("entityName") != null && !jsonObj.get("entityName").isJsonNull()) && !jsonObj.get("entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityName").toString()));
      }
      // validate the optional field `liquidationEvent`
      if (jsonObj.get("liquidationEvent") != null && !jsonObj.get("liquidationEvent").isJsonNull()) {
        ILiquidationEvent.validateJsonElement(jsonObj.get("liquidationEvent"));
      }
      // validate the optional field `marketValuationDate`
      if (jsonObj.get("marketValuationDate") != null && !jsonObj.get("marketValuationDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("marketValuationDate"));
      }
      // validate the optional field `marketValue`
      if (jsonObj.get("marketValue") != null && !jsonObj.get("marketValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("marketValue"));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `purchaseAmount`
      if (jsonObj.get("purchaseAmount") != null && !jsonObj.get("purchaseAmount").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("purchaseAmount"));
      }
      // validate the optional field `purchaseDate`
      if (jsonObj.get("purchaseDate") != null && !jsonObj.get("purchaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("purchaseDate"));
      }
      // validate the optional field `standardDeviation`
      if (jsonObj.get("standardDeviation") != null && !jsonObj.get("standardDeviation").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("standardDeviation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IBusinessEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IBusinessEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IBusinessEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IBusinessEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<IBusinessEntity>() {
           @Override
           public void write(JsonWriter out, IBusinessEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IBusinessEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IBusinessEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IBusinessEntity
   * @throws IOException if the JSON string is invalid with respect to IBusinessEntity
   */
  public static IBusinessEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IBusinessEntity.class);
  }

  /**
   * Convert an instance of IBusinessEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

