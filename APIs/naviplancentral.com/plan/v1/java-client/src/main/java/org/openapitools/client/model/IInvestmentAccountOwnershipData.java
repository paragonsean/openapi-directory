/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IInvestmentAccountOwnershipData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IInvestmentAccountOwnershipData {
  /**
   * Gets or Sets owner
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    ALL("All"),
    
    HEAD1("Head1"),
    
    HEAD2("Head2"),
    
    NON_HEAD1("NonHead1"),
    
    NON_HEAD2("NonHead2"),
    
    NON_HEAD3("NonHead3"),
    
    NON_HEAD4("NonHead4"),
    
    NON_HEAD5("NonHead5"),
    
    NON_HEAD6("NonHead6"),
    
    NON_HEAD7("NonHead7"),
    
    NON_HEAD8("NonHead8"),
    
    NON_HEAD9("NonHead9"),
    
    COMMUNITY_PROPERTY("CommunityProperty"),
    
    JOINT("Joint"),
    
    OTHER("Other"),
    
    ALL_DEPENDENTS("AllDependents"),
    
    ALL_FAMILY_MEMBERS("AllFamilyMembers"),
    
    CORPORATION("Corporation");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_OWNERS_NAME = "ownersName";
  @SerializedName(SERIALIZED_NAME_OWNERS_NAME)
  private String ownersName;

  public static final String SERIALIZED_NAME_OWNERSHIP_PERCENT = "ownershipPercent";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_PERCENT)
  private Percent ownershipPercent;

  public IInvestmentAccountOwnershipData() {
  }

  public IInvestmentAccountOwnershipData(
     OwnerEnum owner, 
     String ownersName
  ) {
    this();
    this.owner = owner;
    this.ownersName = ownersName;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }



  /**
   * Get ownersName
   * @return ownersName
   */
  @javax.annotation.Nullable
  public String getOwnersName() {
    return ownersName;
  }



  public IInvestmentAccountOwnershipData ownershipPercent(Percent ownershipPercent) {
    this.ownershipPercent = ownershipPercent;
    return this;
  }

  /**
   * Get ownershipPercent
   * @return ownershipPercent
   */
  @javax.annotation.Nullable
  public Percent getOwnershipPercent() {
    return ownershipPercent;
  }

  public void setOwnershipPercent(Percent ownershipPercent) {
    this.ownershipPercent = ownershipPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IInvestmentAccountOwnershipData iinvestmentAccountOwnershipData = (IInvestmentAccountOwnershipData) o;
    return Objects.equals(this.owner, iinvestmentAccountOwnershipData.owner) &&
        Objects.equals(this.ownersName, iinvestmentAccountOwnershipData.ownersName) &&
        Objects.equals(this.ownershipPercent, iinvestmentAccountOwnershipData.ownershipPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(owner, ownersName, ownershipPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IInvestmentAccountOwnershipData {\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownersName: ").append(toIndentedString(ownersName)).append("\n");
    sb.append("    ownershipPercent: ").append(toIndentedString(ownershipPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("owner");
    openapiFields.add("ownersName");
    openapiFields.add("ownershipPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IInvestmentAccountOwnershipData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IInvestmentAccountOwnershipData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IInvestmentAccountOwnershipData is not found in the empty JSON string", IInvestmentAccountOwnershipData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IInvestmentAccountOwnershipData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IInvestmentAccountOwnershipData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("ownersName") != null && !jsonObj.get("ownersName").isJsonNull()) && !jsonObj.get("ownersName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownersName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownersName").toString()));
      }
      // validate the optional field `ownershipPercent`
      if (jsonObj.get("ownershipPercent") != null && !jsonObj.get("ownershipPercent").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("ownershipPercent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IInvestmentAccountOwnershipData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IInvestmentAccountOwnershipData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IInvestmentAccountOwnershipData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IInvestmentAccountOwnershipData.class));

       return (TypeAdapter<T>) new TypeAdapter<IInvestmentAccountOwnershipData>() {
           @Override
           public void write(JsonWriter out, IInvestmentAccountOwnershipData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IInvestmentAccountOwnershipData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IInvestmentAccountOwnershipData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IInvestmentAccountOwnershipData
   * @throws IOException if the JSON string is invalid with respect to IInvestmentAccountOwnershipData
   */
  public static IInvestmentAccountOwnershipData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IInvestmentAccountOwnershipData.class);
  }

  /**
   * Convert an instance of IInvestmentAccountOwnershipData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

