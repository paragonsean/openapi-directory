/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IOwnershipData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IShareClassStructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IShareClassStructure {
  public static final String SERIALIZED_NAME_CLIENT_OWNERSHIP_DATA = "clientOwnershipData";
  @SerializedName(SERIALIZED_NAME_CLIENT_OWNERSHIP_DATA)
  private IOwnershipData clientOwnershipData;

  public static final String SERIALIZED_NAME_CO_CLIENT_OWNERSHIP_DATA = "coClientOwnershipData";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_OWNERSHIP_DATA)
  private IOwnershipData coClientOwnershipData;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OTHER_OWNERSHIP_DATA = "otherOwnershipData";
  @SerializedName(SERIALIZED_NAME_OTHER_OWNERSHIP_DATA)
  private IOwnershipData otherOwnershipData;

  public static final String SERIALIZED_NAME_PARENT_CORPORATION_OWNERSHIP_DATA = "parentCorporationOwnershipData";
  @SerializedName(SERIALIZED_NAME_PARENT_CORPORATION_OWNERSHIP_DATA)
  private IOwnershipData parentCorporationOwnershipData;

  public IShareClassStructure() {
  }

  public IShareClassStructure(
     String description, 
     Integer id
  ) {
    this();
    this.description = description;
    this.id = id;
  }

  public IShareClassStructure clientOwnershipData(IOwnershipData clientOwnershipData) {
    this.clientOwnershipData = clientOwnershipData;
    return this;
  }

  /**
   * Get clientOwnershipData
   * @return clientOwnershipData
   */
  @javax.annotation.Nullable
  public IOwnershipData getClientOwnershipData() {
    return clientOwnershipData;
  }

  public void setClientOwnershipData(IOwnershipData clientOwnershipData) {
    this.clientOwnershipData = clientOwnershipData;
  }


  public IShareClassStructure coClientOwnershipData(IOwnershipData coClientOwnershipData) {
    this.coClientOwnershipData = coClientOwnershipData;
    return this;
  }

  /**
   * Get coClientOwnershipData
   * @return coClientOwnershipData
   */
  @javax.annotation.Nullable
  public IOwnershipData getCoClientOwnershipData() {
    return coClientOwnershipData;
  }

  public void setCoClientOwnershipData(IOwnershipData coClientOwnershipData) {
    this.coClientOwnershipData = coClientOwnershipData;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public IShareClassStructure otherOwnershipData(IOwnershipData otherOwnershipData) {
    this.otherOwnershipData = otherOwnershipData;
    return this;
  }

  /**
   * Get otherOwnershipData
   * @return otherOwnershipData
   */
  @javax.annotation.Nullable
  public IOwnershipData getOtherOwnershipData() {
    return otherOwnershipData;
  }

  public void setOtherOwnershipData(IOwnershipData otherOwnershipData) {
    this.otherOwnershipData = otherOwnershipData;
  }


  public IShareClassStructure parentCorporationOwnershipData(IOwnershipData parentCorporationOwnershipData) {
    this.parentCorporationOwnershipData = parentCorporationOwnershipData;
    return this;
  }

  /**
   * Get parentCorporationOwnershipData
   * @return parentCorporationOwnershipData
   */
  @javax.annotation.Nullable
  public IOwnershipData getParentCorporationOwnershipData() {
    return parentCorporationOwnershipData;
  }

  public void setParentCorporationOwnershipData(IOwnershipData parentCorporationOwnershipData) {
    this.parentCorporationOwnershipData = parentCorporationOwnershipData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IShareClassStructure ishareClassStructure = (IShareClassStructure) o;
    return Objects.equals(this.clientOwnershipData, ishareClassStructure.clientOwnershipData) &&
        Objects.equals(this.coClientOwnershipData, ishareClassStructure.coClientOwnershipData) &&
        Objects.equals(this.description, ishareClassStructure.description) &&
        Objects.equals(this.id, ishareClassStructure.id) &&
        Objects.equals(this.otherOwnershipData, ishareClassStructure.otherOwnershipData) &&
        Objects.equals(this.parentCorporationOwnershipData, ishareClassStructure.parentCorporationOwnershipData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientOwnershipData, coClientOwnershipData, description, id, otherOwnershipData, parentCorporationOwnershipData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IShareClassStructure {\n");
    sb.append("    clientOwnershipData: ").append(toIndentedString(clientOwnershipData)).append("\n");
    sb.append("    coClientOwnershipData: ").append(toIndentedString(coClientOwnershipData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    otherOwnershipData: ").append(toIndentedString(otherOwnershipData)).append("\n");
    sb.append("    parentCorporationOwnershipData: ").append(toIndentedString(parentCorporationOwnershipData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientOwnershipData");
    openapiFields.add("coClientOwnershipData");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("otherOwnershipData");
    openapiFields.add("parentCorporationOwnershipData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IShareClassStructure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IShareClassStructure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IShareClassStructure is not found in the empty JSON string", IShareClassStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IShareClassStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IShareClassStructure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientOwnershipData`
      if (jsonObj.get("clientOwnershipData") != null && !jsonObj.get("clientOwnershipData").isJsonNull()) {
        IOwnershipData.validateJsonElement(jsonObj.get("clientOwnershipData"));
      }
      // validate the optional field `coClientOwnershipData`
      if (jsonObj.get("coClientOwnershipData") != null && !jsonObj.get("coClientOwnershipData").isJsonNull()) {
        IOwnershipData.validateJsonElement(jsonObj.get("coClientOwnershipData"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `otherOwnershipData`
      if (jsonObj.get("otherOwnershipData") != null && !jsonObj.get("otherOwnershipData").isJsonNull()) {
        IOwnershipData.validateJsonElement(jsonObj.get("otherOwnershipData"));
      }
      // validate the optional field `parentCorporationOwnershipData`
      if (jsonObj.get("parentCorporationOwnershipData") != null && !jsonObj.get("parentCorporationOwnershipData").isJsonNull()) {
        IOwnershipData.validateJsonElement(jsonObj.get("parentCorporationOwnershipData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IShareClassStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IShareClassStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IShareClassStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IShareClassStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<IShareClassStructure>() {
           @Override
           public void write(JsonWriter out, IShareClassStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IShareClassStructure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IShareClassStructure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IShareClassStructure
   * @throws IOException if the JSON string is invalid with respect to IShareClassStructure
   */
  public static IShareClassStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IShareClassStructure.class);
  }

  /**
   * Convert an instance of IShareClassStructure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

