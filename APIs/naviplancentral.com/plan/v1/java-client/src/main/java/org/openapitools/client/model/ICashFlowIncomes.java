/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.ICashFlowCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ICashFlowIncomes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ICashFlowIncomes {
  public static final String SERIALIZED_NAME_ANNUITY_PAYMENTS = "annuityPayments";
  @SerializedName(SERIALIZED_NAME_ANNUITY_PAYMENTS)
  private ICashFlowCategory annuityPayments;

  public static final String SERIALIZED_NAME_DISABILITY_INCOMES = "disabilityIncomes";
  @SerializedName(SERIALIZED_NAME_DISABILITY_INCOMES)
  private Currency disabilityIncomes;

  public static final String SERIALIZED_NAME_EARNED_INCOME = "earnedIncome";
  @SerializedName(SERIALIZED_NAME_EARNED_INCOME)
  private ICashFlowCategory earnedIncome;

  public static final String SERIALIZED_NAME_INSURANCE_BENEFITS = "insuranceBenefits";
  @SerializedName(SERIALIZED_NAME_INSURANCE_BENEFITS)
  private ICashFlowCategory insuranceBenefits;

  public static final String SERIALIZED_NAME_INVESTMENT_INCOMES = "investmentIncomes";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_INCOMES)
  private ICashFlowCategory investmentIncomes;

  public static final String SERIALIZED_NAME_LIFESTYLE_ASSET_LIQUIDATIONS = "lifestyleAssetLiquidations";
  @SerializedName(SERIALIZED_NAME_LIFESTYLE_ASSET_LIQUIDATIONS)
  private ICashFlowCategory lifestyleAssetLiquidations;

  public static final String SERIALIZED_NAME_LOCKED_IN_LIQUIDATIONS = "lockedInLiquidations";
  @SerializedName(SERIALIZED_NAME_LOCKED_IN_LIQUIDATIONS)
  private Currency lockedInLiquidations;

  public static final String SERIALIZED_NAME_LONG_TERM_CARE_BENEFITS = "longTermCareBenefits";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CARE_BENEFITS)
  private Currency longTermCareBenefits;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_INCOMES = "miscellaneousIncomes";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_INCOMES)
  private ICashFlowCategory miscellaneousIncomes;

  public static final String SERIALIZED_NAME_NON_QUALIFIED_LIQUIDATIONS = "nonQualifiedLiquidations";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_LIQUIDATIONS)
  private ICashFlowCategory nonQualifiedLiquidations;

  public static final String SERIALIZED_NAME_PENSION = "pension";
  @SerializedName(SERIALIZED_NAME_PENSION)
  private ICashFlowCategory pension;

  public static final String SERIALIZED_NAME_PRIVATE_CORPORATIONS = "privateCorporations";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CORPORATIONS)
  private ICashFlowCategory privateCorporations;

  public static final String SERIALIZED_NAME_QUALIFIED_LIQUIDATIONS = "qualifiedLiquidations";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_LIQUIDATIONS)
  private ICashFlowCategory qualifiedLiquidations;

  public static final String SERIALIZED_NAME_QUALIFIED_LIQUIDATIONS_NON_REQUIRED_MINIMUM_DISTRIBUTIONS = "qualifiedLiquidationsNonRequiredMinimumDistributions";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_LIQUIDATIONS_NON_REQUIRED_MINIMUM_DISTRIBUTIONS)
  private ICashFlowCategory qualifiedLiquidationsNonRequiredMinimumDistributions;

  public static final String SERIALIZED_NAME_REQUIRED_MINIMUM_DISTRIBUTIONS = "requiredMinimumDistributions";
  @SerializedName(SERIALIZED_NAME_REQUIRED_MINIMUM_DISTRIBUTIONS)
  private ICashFlowCategory requiredMinimumDistributions;

  public static final String SERIALIZED_NAME_RETIREMENT_INCOME = "retirementIncome";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_INCOME)
  private Currency retirementIncome;

  public static final String SERIALIZED_NAME_ROTH_LIQUIDATIONS = "rothLiquidations";
  @SerializedName(SERIALIZED_NAME_ROTH_LIQUIDATIONS)
  private Currency rothLiquidations;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY = "socialSecurity";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY)
  private ICashFlowCategory socialSecurity;

  public static final String SERIALIZED_NAME_TFSA_LIQUIDATIONS = "tfsaLiquidations";
  @SerializedName(SERIALIZED_NAME_TFSA_LIQUIDATIONS)
  private Currency tfsaLiquidations;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private ICashFlowCategory total;

  public static final String SERIALIZED_NAME_WITHDRAWALS = "withdrawals";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS)
  private Currency withdrawals;

  public ICashFlowIncomes() {
  }

  public ICashFlowIncomes annuityPayments(ICashFlowCategory annuityPayments) {
    this.annuityPayments = annuityPayments;
    return this;
  }

  /**
   * Get annuityPayments
   * @return annuityPayments
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getAnnuityPayments() {
    return annuityPayments;
  }

  public void setAnnuityPayments(ICashFlowCategory annuityPayments) {
    this.annuityPayments = annuityPayments;
  }


  public ICashFlowIncomes disabilityIncomes(Currency disabilityIncomes) {
    this.disabilityIncomes = disabilityIncomes;
    return this;
  }

  /**
   * Get disabilityIncomes
   * @return disabilityIncomes
   */
  @javax.annotation.Nullable
  public Currency getDisabilityIncomes() {
    return disabilityIncomes;
  }

  public void setDisabilityIncomes(Currency disabilityIncomes) {
    this.disabilityIncomes = disabilityIncomes;
  }


  public ICashFlowIncomes earnedIncome(ICashFlowCategory earnedIncome) {
    this.earnedIncome = earnedIncome;
    return this;
  }

  /**
   * Get earnedIncome
   * @return earnedIncome
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getEarnedIncome() {
    return earnedIncome;
  }

  public void setEarnedIncome(ICashFlowCategory earnedIncome) {
    this.earnedIncome = earnedIncome;
  }


  public ICashFlowIncomes insuranceBenefits(ICashFlowCategory insuranceBenefits) {
    this.insuranceBenefits = insuranceBenefits;
    return this;
  }

  /**
   * Get insuranceBenefits
   * @return insuranceBenefits
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getInsuranceBenefits() {
    return insuranceBenefits;
  }

  public void setInsuranceBenefits(ICashFlowCategory insuranceBenefits) {
    this.insuranceBenefits = insuranceBenefits;
  }


  public ICashFlowIncomes investmentIncomes(ICashFlowCategory investmentIncomes) {
    this.investmentIncomes = investmentIncomes;
    return this;
  }

  /**
   * Get investmentIncomes
   * @return investmentIncomes
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getInvestmentIncomes() {
    return investmentIncomes;
  }

  public void setInvestmentIncomes(ICashFlowCategory investmentIncomes) {
    this.investmentIncomes = investmentIncomes;
  }


  public ICashFlowIncomes lifestyleAssetLiquidations(ICashFlowCategory lifestyleAssetLiquidations) {
    this.lifestyleAssetLiquidations = lifestyleAssetLiquidations;
    return this;
  }

  /**
   * Get lifestyleAssetLiquidations
   * @return lifestyleAssetLiquidations
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getLifestyleAssetLiquidations() {
    return lifestyleAssetLiquidations;
  }

  public void setLifestyleAssetLiquidations(ICashFlowCategory lifestyleAssetLiquidations) {
    this.lifestyleAssetLiquidations = lifestyleAssetLiquidations;
  }


  public ICashFlowIncomes lockedInLiquidations(Currency lockedInLiquidations) {
    this.lockedInLiquidations = lockedInLiquidations;
    return this;
  }

  /**
   * Get lockedInLiquidations
   * @return lockedInLiquidations
   */
  @javax.annotation.Nullable
  public Currency getLockedInLiquidations() {
    return lockedInLiquidations;
  }

  public void setLockedInLiquidations(Currency lockedInLiquidations) {
    this.lockedInLiquidations = lockedInLiquidations;
  }


  public ICashFlowIncomes longTermCareBenefits(Currency longTermCareBenefits) {
    this.longTermCareBenefits = longTermCareBenefits;
    return this;
  }

  /**
   * Get longTermCareBenefits
   * @return longTermCareBenefits
   */
  @javax.annotation.Nullable
  public Currency getLongTermCareBenefits() {
    return longTermCareBenefits;
  }

  public void setLongTermCareBenefits(Currency longTermCareBenefits) {
    this.longTermCareBenefits = longTermCareBenefits;
  }


  public ICashFlowIncomes miscellaneousIncomes(ICashFlowCategory miscellaneousIncomes) {
    this.miscellaneousIncomes = miscellaneousIncomes;
    return this;
  }

  /**
   * Get miscellaneousIncomes
   * @return miscellaneousIncomes
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getMiscellaneousIncomes() {
    return miscellaneousIncomes;
  }

  public void setMiscellaneousIncomes(ICashFlowCategory miscellaneousIncomes) {
    this.miscellaneousIncomes = miscellaneousIncomes;
  }


  public ICashFlowIncomes nonQualifiedLiquidations(ICashFlowCategory nonQualifiedLiquidations) {
    this.nonQualifiedLiquidations = nonQualifiedLiquidations;
    return this;
  }

  /**
   * Get nonQualifiedLiquidations
   * @return nonQualifiedLiquidations
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getNonQualifiedLiquidations() {
    return nonQualifiedLiquidations;
  }

  public void setNonQualifiedLiquidations(ICashFlowCategory nonQualifiedLiquidations) {
    this.nonQualifiedLiquidations = nonQualifiedLiquidations;
  }


  public ICashFlowIncomes pension(ICashFlowCategory pension) {
    this.pension = pension;
    return this;
  }

  /**
   * Get pension
   * @return pension
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getPension() {
    return pension;
  }

  public void setPension(ICashFlowCategory pension) {
    this.pension = pension;
  }


  public ICashFlowIncomes privateCorporations(ICashFlowCategory privateCorporations) {
    this.privateCorporations = privateCorporations;
    return this;
  }

  /**
   * Get privateCorporations
   * @return privateCorporations
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getPrivateCorporations() {
    return privateCorporations;
  }

  public void setPrivateCorporations(ICashFlowCategory privateCorporations) {
    this.privateCorporations = privateCorporations;
  }


  public ICashFlowIncomes qualifiedLiquidations(ICashFlowCategory qualifiedLiquidations) {
    this.qualifiedLiquidations = qualifiedLiquidations;
    return this;
  }

  /**
   * Get qualifiedLiquidations
   * @return qualifiedLiquidations
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getQualifiedLiquidations() {
    return qualifiedLiquidations;
  }

  public void setQualifiedLiquidations(ICashFlowCategory qualifiedLiquidations) {
    this.qualifiedLiquidations = qualifiedLiquidations;
  }


  public ICashFlowIncomes qualifiedLiquidationsNonRequiredMinimumDistributions(ICashFlowCategory qualifiedLiquidationsNonRequiredMinimumDistributions) {
    this.qualifiedLiquidationsNonRequiredMinimumDistributions = qualifiedLiquidationsNonRequiredMinimumDistributions;
    return this;
  }

  /**
   * Get qualifiedLiquidationsNonRequiredMinimumDistributions
   * @return qualifiedLiquidationsNonRequiredMinimumDistributions
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getQualifiedLiquidationsNonRequiredMinimumDistributions() {
    return qualifiedLiquidationsNonRequiredMinimumDistributions;
  }

  public void setQualifiedLiquidationsNonRequiredMinimumDistributions(ICashFlowCategory qualifiedLiquidationsNonRequiredMinimumDistributions) {
    this.qualifiedLiquidationsNonRequiredMinimumDistributions = qualifiedLiquidationsNonRequiredMinimumDistributions;
  }


  public ICashFlowIncomes requiredMinimumDistributions(ICashFlowCategory requiredMinimumDistributions) {
    this.requiredMinimumDistributions = requiredMinimumDistributions;
    return this;
  }

  /**
   * Get requiredMinimumDistributions
   * @return requiredMinimumDistributions
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getRequiredMinimumDistributions() {
    return requiredMinimumDistributions;
  }

  public void setRequiredMinimumDistributions(ICashFlowCategory requiredMinimumDistributions) {
    this.requiredMinimumDistributions = requiredMinimumDistributions;
  }


  public ICashFlowIncomes retirementIncome(Currency retirementIncome) {
    this.retirementIncome = retirementIncome;
    return this;
  }

  /**
   * Get retirementIncome
   * @return retirementIncome
   */
  @javax.annotation.Nullable
  public Currency getRetirementIncome() {
    return retirementIncome;
  }

  public void setRetirementIncome(Currency retirementIncome) {
    this.retirementIncome = retirementIncome;
  }


  public ICashFlowIncomes rothLiquidations(Currency rothLiquidations) {
    this.rothLiquidations = rothLiquidations;
    return this;
  }

  /**
   * Get rothLiquidations
   * @return rothLiquidations
   */
  @javax.annotation.Nullable
  public Currency getRothLiquidations() {
    return rothLiquidations;
  }

  public void setRothLiquidations(Currency rothLiquidations) {
    this.rothLiquidations = rothLiquidations;
  }


  public ICashFlowIncomes socialSecurity(ICashFlowCategory socialSecurity) {
    this.socialSecurity = socialSecurity;
    return this;
  }

  /**
   * Get socialSecurity
   * @return socialSecurity
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getSocialSecurity() {
    return socialSecurity;
  }

  public void setSocialSecurity(ICashFlowCategory socialSecurity) {
    this.socialSecurity = socialSecurity;
  }


  public ICashFlowIncomes tfsaLiquidations(Currency tfsaLiquidations) {
    this.tfsaLiquidations = tfsaLiquidations;
    return this;
  }

  /**
   * Get tfsaLiquidations
   * @return tfsaLiquidations
   */
  @javax.annotation.Nullable
  public Currency getTfsaLiquidations() {
    return tfsaLiquidations;
  }

  public void setTfsaLiquidations(Currency tfsaLiquidations) {
    this.tfsaLiquidations = tfsaLiquidations;
  }


  public ICashFlowIncomes total(ICashFlowCategory total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getTotal() {
    return total;
  }

  public void setTotal(ICashFlowCategory total) {
    this.total = total;
  }


  public ICashFlowIncomes withdrawals(Currency withdrawals) {
    this.withdrawals = withdrawals;
    return this;
  }

  /**
   * Get withdrawals
   * @return withdrawals
   */
  @javax.annotation.Nullable
  public Currency getWithdrawals() {
    return withdrawals;
  }

  public void setWithdrawals(Currency withdrawals) {
    this.withdrawals = withdrawals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICashFlowIncomes icashFlowIncomes = (ICashFlowIncomes) o;
    return Objects.equals(this.annuityPayments, icashFlowIncomes.annuityPayments) &&
        Objects.equals(this.disabilityIncomes, icashFlowIncomes.disabilityIncomes) &&
        Objects.equals(this.earnedIncome, icashFlowIncomes.earnedIncome) &&
        Objects.equals(this.insuranceBenefits, icashFlowIncomes.insuranceBenefits) &&
        Objects.equals(this.investmentIncomes, icashFlowIncomes.investmentIncomes) &&
        Objects.equals(this.lifestyleAssetLiquidations, icashFlowIncomes.lifestyleAssetLiquidations) &&
        Objects.equals(this.lockedInLiquidations, icashFlowIncomes.lockedInLiquidations) &&
        Objects.equals(this.longTermCareBenefits, icashFlowIncomes.longTermCareBenefits) &&
        Objects.equals(this.miscellaneousIncomes, icashFlowIncomes.miscellaneousIncomes) &&
        Objects.equals(this.nonQualifiedLiquidations, icashFlowIncomes.nonQualifiedLiquidations) &&
        Objects.equals(this.pension, icashFlowIncomes.pension) &&
        Objects.equals(this.privateCorporations, icashFlowIncomes.privateCorporations) &&
        Objects.equals(this.qualifiedLiquidations, icashFlowIncomes.qualifiedLiquidations) &&
        Objects.equals(this.qualifiedLiquidationsNonRequiredMinimumDistributions, icashFlowIncomes.qualifiedLiquidationsNonRequiredMinimumDistributions) &&
        Objects.equals(this.requiredMinimumDistributions, icashFlowIncomes.requiredMinimumDistributions) &&
        Objects.equals(this.retirementIncome, icashFlowIncomes.retirementIncome) &&
        Objects.equals(this.rothLiquidations, icashFlowIncomes.rothLiquidations) &&
        Objects.equals(this.socialSecurity, icashFlowIncomes.socialSecurity) &&
        Objects.equals(this.tfsaLiquidations, icashFlowIncomes.tfsaLiquidations) &&
        Objects.equals(this.total, icashFlowIncomes.total) &&
        Objects.equals(this.withdrawals, icashFlowIncomes.withdrawals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annuityPayments, disabilityIncomes, earnedIncome, insuranceBenefits, investmentIncomes, lifestyleAssetLiquidations, lockedInLiquidations, longTermCareBenefits, miscellaneousIncomes, nonQualifiedLiquidations, pension, privateCorporations, qualifiedLiquidations, qualifiedLiquidationsNonRequiredMinimumDistributions, requiredMinimumDistributions, retirementIncome, rothLiquidations, socialSecurity, tfsaLiquidations, total, withdrawals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICashFlowIncomes {\n");
    sb.append("    annuityPayments: ").append(toIndentedString(annuityPayments)).append("\n");
    sb.append("    disabilityIncomes: ").append(toIndentedString(disabilityIncomes)).append("\n");
    sb.append("    earnedIncome: ").append(toIndentedString(earnedIncome)).append("\n");
    sb.append("    insuranceBenefits: ").append(toIndentedString(insuranceBenefits)).append("\n");
    sb.append("    investmentIncomes: ").append(toIndentedString(investmentIncomes)).append("\n");
    sb.append("    lifestyleAssetLiquidations: ").append(toIndentedString(lifestyleAssetLiquidations)).append("\n");
    sb.append("    lockedInLiquidations: ").append(toIndentedString(lockedInLiquidations)).append("\n");
    sb.append("    longTermCareBenefits: ").append(toIndentedString(longTermCareBenefits)).append("\n");
    sb.append("    miscellaneousIncomes: ").append(toIndentedString(miscellaneousIncomes)).append("\n");
    sb.append("    nonQualifiedLiquidations: ").append(toIndentedString(nonQualifiedLiquidations)).append("\n");
    sb.append("    pension: ").append(toIndentedString(pension)).append("\n");
    sb.append("    privateCorporations: ").append(toIndentedString(privateCorporations)).append("\n");
    sb.append("    qualifiedLiquidations: ").append(toIndentedString(qualifiedLiquidations)).append("\n");
    sb.append("    qualifiedLiquidationsNonRequiredMinimumDistributions: ").append(toIndentedString(qualifiedLiquidationsNonRequiredMinimumDistributions)).append("\n");
    sb.append("    requiredMinimumDistributions: ").append(toIndentedString(requiredMinimumDistributions)).append("\n");
    sb.append("    retirementIncome: ").append(toIndentedString(retirementIncome)).append("\n");
    sb.append("    rothLiquidations: ").append(toIndentedString(rothLiquidations)).append("\n");
    sb.append("    socialSecurity: ").append(toIndentedString(socialSecurity)).append("\n");
    sb.append("    tfsaLiquidations: ").append(toIndentedString(tfsaLiquidations)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annuityPayments");
    openapiFields.add("disabilityIncomes");
    openapiFields.add("earnedIncome");
    openapiFields.add("insuranceBenefits");
    openapiFields.add("investmentIncomes");
    openapiFields.add("lifestyleAssetLiquidations");
    openapiFields.add("lockedInLiquidations");
    openapiFields.add("longTermCareBenefits");
    openapiFields.add("miscellaneousIncomes");
    openapiFields.add("nonQualifiedLiquidations");
    openapiFields.add("pension");
    openapiFields.add("privateCorporations");
    openapiFields.add("qualifiedLiquidations");
    openapiFields.add("qualifiedLiquidationsNonRequiredMinimumDistributions");
    openapiFields.add("requiredMinimumDistributions");
    openapiFields.add("retirementIncome");
    openapiFields.add("rothLiquidations");
    openapiFields.add("socialSecurity");
    openapiFields.add("tfsaLiquidations");
    openapiFields.add("total");
    openapiFields.add("withdrawals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ICashFlowIncomes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ICashFlowIncomes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ICashFlowIncomes is not found in the empty JSON string", ICashFlowIncomes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ICashFlowIncomes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ICashFlowIncomes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annuityPayments`
      if (jsonObj.get("annuityPayments") != null && !jsonObj.get("annuityPayments").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("annuityPayments"));
      }
      // validate the optional field `disabilityIncomes`
      if (jsonObj.get("disabilityIncomes") != null && !jsonObj.get("disabilityIncomes").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("disabilityIncomes"));
      }
      // validate the optional field `earnedIncome`
      if (jsonObj.get("earnedIncome") != null && !jsonObj.get("earnedIncome").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("earnedIncome"));
      }
      // validate the optional field `insuranceBenefits`
      if (jsonObj.get("insuranceBenefits") != null && !jsonObj.get("insuranceBenefits").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("insuranceBenefits"));
      }
      // validate the optional field `investmentIncomes`
      if (jsonObj.get("investmentIncomes") != null && !jsonObj.get("investmentIncomes").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("investmentIncomes"));
      }
      // validate the optional field `lifestyleAssetLiquidations`
      if (jsonObj.get("lifestyleAssetLiquidations") != null && !jsonObj.get("lifestyleAssetLiquidations").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("lifestyleAssetLiquidations"));
      }
      // validate the optional field `lockedInLiquidations`
      if (jsonObj.get("lockedInLiquidations") != null && !jsonObj.get("lockedInLiquidations").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("lockedInLiquidations"));
      }
      // validate the optional field `longTermCareBenefits`
      if (jsonObj.get("longTermCareBenefits") != null && !jsonObj.get("longTermCareBenefits").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("longTermCareBenefits"));
      }
      // validate the optional field `miscellaneousIncomes`
      if (jsonObj.get("miscellaneousIncomes") != null && !jsonObj.get("miscellaneousIncomes").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("miscellaneousIncomes"));
      }
      // validate the optional field `nonQualifiedLiquidations`
      if (jsonObj.get("nonQualifiedLiquidations") != null && !jsonObj.get("nonQualifiedLiquidations").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("nonQualifiedLiquidations"));
      }
      // validate the optional field `pension`
      if (jsonObj.get("pension") != null && !jsonObj.get("pension").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("pension"));
      }
      // validate the optional field `privateCorporations`
      if (jsonObj.get("privateCorporations") != null && !jsonObj.get("privateCorporations").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("privateCorporations"));
      }
      // validate the optional field `qualifiedLiquidations`
      if (jsonObj.get("qualifiedLiquidations") != null && !jsonObj.get("qualifiedLiquidations").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("qualifiedLiquidations"));
      }
      // validate the optional field `qualifiedLiquidationsNonRequiredMinimumDistributions`
      if (jsonObj.get("qualifiedLiquidationsNonRequiredMinimumDistributions") != null && !jsonObj.get("qualifiedLiquidationsNonRequiredMinimumDistributions").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("qualifiedLiquidationsNonRequiredMinimumDistributions"));
      }
      // validate the optional field `requiredMinimumDistributions`
      if (jsonObj.get("requiredMinimumDistributions") != null && !jsonObj.get("requiredMinimumDistributions").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("requiredMinimumDistributions"));
      }
      // validate the optional field `retirementIncome`
      if (jsonObj.get("retirementIncome") != null && !jsonObj.get("retirementIncome").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("retirementIncome"));
      }
      // validate the optional field `rothLiquidations`
      if (jsonObj.get("rothLiquidations") != null && !jsonObj.get("rothLiquidations").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("rothLiquidations"));
      }
      // validate the optional field `socialSecurity`
      if (jsonObj.get("socialSecurity") != null && !jsonObj.get("socialSecurity").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("socialSecurity"));
      }
      // validate the optional field `tfsaLiquidations`
      if (jsonObj.get("tfsaLiquidations") != null && !jsonObj.get("tfsaLiquidations").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("tfsaLiquidations"));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("total"));
      }
      // validate the optional field `withdrawals`
      if (jsonObj.get("withdrawals") != null && !jsonObj.get("withdrawals").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("withdrawals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ICashFlowIncomes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ICashFlowIncomes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ICashFlowIncomes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ICashFlowIncomes.class));

       return (TypeAdapter<T>) new TypeAdapter<ICashFlowIncomes>() {
           @Override
           public void write(JsonWriter out, ICashFlowIncomes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ICashFlowIncomes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ICashFlowIncomes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ICashFlowIncomes
   * @throws IOException if the JSON string is invalid with respect to ICashFlowIncomes
   */
  public static ICashFlowIncomes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ICashFlowIncomes.class);
  }

  /**
   * Convert an instance of ICashFlowIncomes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

