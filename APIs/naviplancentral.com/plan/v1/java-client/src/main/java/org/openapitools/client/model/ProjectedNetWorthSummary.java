/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.INetWorthAtDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectedNetWorthSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectedNetWorthSummary {
  public static final String SERIALIZED_NAME_CLIENT_AGE = "clientAge";
  @SerializedName(SERIALIZED_NAME_CLIENT_AGE)
  private Integer clientAge;

  public static final String SERIALIZED_NAME_CO_CLIENT_AGE = "coClientAge";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT_AGE)
  private Integer coClientAge;

  public static final String SERIALIZED_NAME_END_OF_YEAR_NET_WORTH = "endOfYearNetWorth";
  @SerializedName(SERIALIZED_NAME_END_OF_YEAR_NET_WORTH)
  private INetWorthAtDate endOfYearNetWorth;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public ProjectedNetWorthSummary() {
  }

  public ProjectedNetWorthSummary clientAge(Integer clientAge) {
    this.clientAge = clientAge;
    return this;
  }

  /**
   * Get clientAge
   * @return clientAge
   */
  @javax.annotation.Nullable
  public Integer getClientAge() {
    return clientAge;
  }

  public void setClientAge(Integer clientAge) {
    this.clientAge = clientAge;
  }


  public ProjectedNetWorthSummary coClientAge(Integer coClientAge) {
    this.coClientAge = coClientAge;
    return this;
  }

  /**
   * Get coClientAge
   * @return coClientAge
   */
  @javax.annotation.Nullable
  public Integer getCoClientAge() {
    return coClientAge;
  }

  public void setCoClientAge(Integer coClientAge) {
    this.coClientAge = coClientAge;
  }


  public ProjectedNetWorthSummary endOfYearNetWorth(INetWorthAtDate endOfYearNetWorth) {
    this.endOfYearNetWorth = endOfYearNetWorth;
    return this;
  }

  /**
   * Get endOfYearNetWorth
   * @return endOfYearNetWorth
   */
  @javax.annotation.Nullable
  public INetWorthAtDate getEndOfYearNetWorth() {
    return endOfYearNetWorth;
  }

  public void setEndOfYearNetWorth(INetWorthAtDate endOfYearNetWorth) {
    this.endOfYearNetWorth = endOfYearNetWorth;
  }


  public ProjectedNetWorthSummary year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectedNetWorthSummary projectedNetWorthSummary = (ProjectedNetWorthSummary) o;
    return Objects.equals(this.clientAge, projectedNetWorthSummary.clientAge) &&
        Objects.equals(this.coClientAge, projectedNetWorthSummary.coClientAge) &&
        Objects.equals(this.endOfYearNetWorth, projectedNetWorthSummary.endOfYearNetWorth) &&
        Objects.equals(this.year, projectedNetWorthSummary.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAge, coClientAge, endOfYearNetWorth, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectedNetWorthSummary {\n");
    sb.append("    clientAge: ").append(toIndentedString(clientAge)).append("\n");
    sb.append("    coClientAge: ").append(toIndentedString(coClientAge)).append("\n");
    sb.append("    endOfYearNetWorth: ").append(toIndentedString(endOfYearNetWorth)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientAge");
    openapiFields.add("coClientAge");
    openapiFields.add("endOfYearNetWorth");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectedNetWorthSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectedNetWorthSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectedNetWorthSummary is not found in the empty JSON string", ProjectedNetWorthSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectedNetWorthSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectedNetWorthSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endOfYearNetWorth`
      if (jsonObj.get("endOfYearNetWorth") != null && !jsonObj.get("endOfYearNetWorth").isJsonNull()) {
        INetWorthAtDate.validateJsonElement(jsonObj.get("endOfYearNetWorth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectedNetWorthSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectedNetWorthSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectedNetWorthSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectedNetWorthSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectedNetWorthSummary>() {
           @Override
           public void write(JsonWriter out, ProjectedNetWorthSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectedNetWorthSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectedNetWorthSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectedNetWorthSummary
   * @throws IOException if the JSON string is invalid with respect to ProjectedNetWorthSummary
   */
  public static ProjectedNetWorthSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectedNetWorthSummary.class);
  }

  /**
   * Convert an instance of ProjectedNetWorthSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

