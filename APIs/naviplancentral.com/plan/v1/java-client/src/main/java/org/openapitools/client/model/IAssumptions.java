/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.IBucketing;
import org.openapitools.client.model.IHeadAssumptions;
import org.openapitools.client.model.Percent;
import org.openapitools.client.model.Year;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IAssumptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IAssumptions {
  public static final String SERIALIZED_NAME_ANY_HEAD_ALREADY_RETIRED = "anyHeadAlreadyRetired";
  @SerializedName(SERIALIZED_NAME_ANY_HEAD_ALREADY_RETIRED)
  private Boolean anyHeadAlreadyRetired;

  public static final String SERIALIZED_NAME_BOTH_RETIRED = "bothRetired";
  @SerializedName(SERIALIZED_NAME_BOTH_RETIRED)
  private Boolean bothRetired;

  public static final String SERIALIZED_NAME_BUCKETING = "bucketing";
  @SerializedName(SERIALIZED_NAME_BUCKETING)
  private IBucketing bucketing;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private IHeadAssumptions client;

  public static final String SERIALIZED_NAME_CO_CLIENT = "coClient";
  @SerializedName(SERIALIZED_NAME_CO_CLIENT)
  private IHeadAssumptions coClient;

  public static final String SERIALIZED_NAME_FIRST_TO_DIE_DATE = "firstToDieDate";
  @SerializedName(SERIALIZED_NAME_FIRST_TO_DIE_DATE)
  private Date firstToDieDate;

  /**
   * Gets or Sets firstToDieMember
   */
  @JsonAdapter(FirstToDieMemberEnum.Adapter.class)
  public enum FirstToDieMemberEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient");

    private String value;

    FirstToDieMemberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirstToDieMemberEnum fromValue(String value) {
      for (FirstToDieMemberEnum b : FirstToDieMemberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirstToDieMemberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirstToDieMemberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirstToDieMemberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirstToDieMemberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirstToDieMemberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIRST_TO_DIE_MEMBER = "firstToDieMember";
  @SerializedName(SERIALIZED_NAME_FIRST_TO_DIE_MEMBER)
  private FirstToDieMemberEnum firstToDieMember;

  public static final String SERIALIZED_NAME_FIRST_TO_RETIRE_DATE = "firstToRetireDate";
  @SerializedName(SERIALIZED_NAME_FIRST_TO_RETIRE_DATE)
  private Date firstToRetireDate;

  public static final String SERIALIZED_NAME_INFLATION_RATE = "inflationRate";
  @SerializedName(SERIALIZED_NAME_INFLATION_RATE)
  private Percent inflationRate;

  public static final String SERIALIZED_NAME_LAST_TO_DIE_DATE = "lastToDieDate";
  @SerializedName(SERIALIZED_NAME_LAST_TO_DIE_DATE)
  private Date lastToDieDate;

  /**
   * Gets or Sets lastToDieMember
   */
  @JsonAdapter(LastToDieMemberEnum.Adapter.class)
  public enum LastToDieMemberEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient");

    private String value;

    LastToDieMemberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastToDieMemberEnum fromValue(String value) {
      for (LastToDieMemberEnum b : LastToDieMemberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastToDieMemberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastToDieMemberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastToDieMemberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastToDieMemberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastToDieMemberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_TO_DIE_MEMBER = "lastToDieMember";
  @SerializedName(SERIALIZED_NAME_LAST_TO_DIE_MEMBER)
  private LastToDieMemberEnum lastToDieMember;

  public static final String SERIALIZED_NAME_LAST_TO_RETIRE_DATE = "lastToRetireDate";
  @SerializedName(SERIALIZED_NAME_LAST_TO_RETIRE_DATE)
  private Date lastToRetireDate;

  public static final String SERIALIZED_NAME_RETIREMENT_YEAR_ADJUSTED_IF_ALREADY_RETIRED = "retirementYearAdjustedIfAlreadyRetired";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_YEAR_ADJUSTED_IF_ALREADY_RETIRED)
  private Year retirementYearAdjustedIfAlreadyRetired;

  public static final String SERIALIZED_NAME_SPLIT_SURPLUS_SAVINGS_STRATEGIES_ENABLED = "splitSurplusSavingsStrategiesEnabled";
  @SerializedName(SERIALIZED_NAME_SPLIT_SURPLUS_SAVINGS_STRATEGIES_ENABLED)
  private Boolean splitSurplusSavingsStrategiesEnabled;

  /**
   * Gets or Sets taxMethod
   */
  @JsonAdapter(TaxMethodEnum.Adapter.class)
  public enum TaxMethodEnum {
    AVERAGE("Average"),
    
    SIMPLIFIED("Simplified"),
    
    DETAILED("Detailed");

    private String value;

    TaxMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxMethodEnum fromValue(String value) {
      for (TaxMethodEnum b : TaxMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_METHOD = "taxMethod";
  @SerializedName(SERIALIZED_NAME_TAX_METHOD)
  private TaxMethodEnum taxMethod;

  public IAssumptions() {
  }

  public IAssumptions(
     Boolean anyHeadAlreadyRetired, 
     Boolean bothRetired, 
     FirstToDieMemberEnum firstToDieMember, 
     LastToDieMemberEnum lastToDieMember, 
     Boolean splitSurplusSavingsStrategiesEnabled, 
     TaxMethodEnum taxMethod
  ) {
    this();
    this.anyHeadAlreadyRetired = anyHeadAlreadyRetired;
    this.bothRetired = bothRetired;
    this.firstToDieMember = firstToDieMember;
    this.lastToDieMember = lastToDieMember;
    this.splitSurplusSavingsStrategiesEnabled = splitSurplusSavingsStrategiesEnabled;
    this.taxMethod = taxMethod;
  }

  /**
   * Get anyHeadAlreadyRetired
   * @return anyHeadAlreadyRetired
   */
  @javax.annotation.Nullable
  public Boolean getAnyHeadAlreadyRetired() {
    return anyHeadAlreadyRetired;
  }



  /**
   * Get bothRetired
   * @return bothRetired
   */
  @javax.annotation.Nullable
  public Boolean getBothRetired() {
    return bothRetired;
  }



  public IAssumptions bucketing(IBucketing bucketing) {
    this.bucketing = bucketing;
    return this;
  }

  /**
   * Get bucketing
   * @return bucketing
   */
  @javax.annotation.Nullable
  public IBucketing getBucketing() {
    return bucketing;
  }

  public void setBucketing(IBucketing bucketing) {
    this.bucketing = bucketing;
  }


  public IAssumptions client(IHeadAssumptions client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public IHeadAssumptions getClient() {
    return client;
  }

  public void setClient(IHeadAssumptions client) {
    this.client = client;
  }


  public IAssumptions coClient(IHeadAssumptions coClient) {
    this.coClient = coClient;
    return this;
  }

  /**
   * Get coClient
   * @return coClient
   */
  @javax.annotation.Nullable
  public IHeadAssumptions getCoClient() {
    return coClient;
  }

  public void setCoClient(IHeadAssumptions coClient) {
    this.coClient = coClient;
  }


  public IAssumptions firstToDieDate(Date firstToDieDate) {
    this.firstToDieDate = firstToDieDate;
    return this;
  }

  /**
   * Get firstToDieDate
   * @return firstToDieDate
   */
  @javax.annotation.Nullable
  public Date getFirstToDieDate() {
    return firstToDieDate;
  }

  public void setFirstToDieDate(Date firstToDieDate) {
    this.firstToDieDate = firstToDieDate;
  }


  /**
   * Get firstToDieMember
   * @return firstToDieMember
   */
  @javax.annotation.Nullable
  public FirstToDieMemberEnum getFirstToDieMember() {
    return firstToDieMember;
  }



  public IAssumptions firstToRetireDate(Date firstToRetireDate) {
    this.firstToRetireDate = firstToRetireDate;
    return this;
  }

  /**
   * Get firstToRetireDate
   * @return firstToRetireDate
   */
  @javax.annotation.Nullable
  public Date getFirstToRetireDate() {
    return firstToRetireDate;
  }

  public void setFirstToRetireDate(Date firstToRetireDate) {
    this.firstToRetireDate = firstToRetireDate;
  }


  public IAssumptions inflationRate(Percent inflationRate) {
    this.inflationRate = inflationRate;
    return this;
  }

  /**
   * Get inflationRate
   * @return inflationRate
   */
  @javax.annotation.Nullable
  public Percent getInflationRate() {
    return inflationRate;
  }

  public void setInflationRate(Percent inflationRate) {
    this.inflationRate = inflationRate;
  }


  public IAssumptions lastToDieDate(Date lastToDieDate) {
    this.lastToDieDate = lastToDieDate;
    return this;
  }

  /**
   * Get lastToDieDate
   * @return lastToDieDate
   */
  @javax.annotation.Nullable
  public Date getLastToDieDate() {
    return lastToDieDate;
  }

  public void setLastToDieDate(Date lastToDieDate) {
    this.lastToDieDate = lastToDieDate;
  }


  /**
   * Get lastToDieMember
   * @return lastToDieMember
   */
  @javax.annotation.Nullable
  public LastToDieMemberEnum getLastToDieMember() {
    return lastToDieMember;
  }



  public IAssumptions lastToRetireDate(Date lastToRetireDate) {
    this.lastToRetireDate = lastToRetireDate;
    return this;
  }

  /**
   * Get lastToRetireDate
   * @return lastToRetireDate
   */
  @javax.annotation.Nullable
  public Date getLastToRetireDate() {
    return lastToRetireDate;
  }

  public void setLastToRetireDate(Date lastToRetireDate) {
    this.lastToRetireDate = lastToRetireDate;
  }


  public IAssumptions retirementYearAdjustedIfAlreadyRetired(Year retirementYearAdjustedIfAlreadyRetired) {
    this.retirementYearAdjustedIfAlreadyRetired = retirementYearAdjustedIfAlreadyRetired;
    return this;
  }

  /**
   * Get retirementYearAdjustedIfAlreadyRetired
   * @return retirementYearAdjustedIfAlreadyRetired
   */
  @javax.annotation.Nullable
  public Year getRetirementYearAdjustedIfAlreadyRetired() {
    return retirementYearAdjustedIfAlreadyRetired;
  }

  public void setRetirementYearAdjustedIfAlreadyRetired(Year retirementYearAdjustedIfAlreadyRetired) {
    this.retirementYearAdjustedIfAlreadyRetired = retirementYearAdjustedIfAlreadyRetired;
  }


  /**
   * Get splitSurplusSavingsStrategiesEnabled
   * @return splitSurplusSavingsStrategiesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSplitSurplusSavingsStrategiesEnabled() {
    return splitSurplusSavingsStrategiesEnabled;
  }



  /**
   * Get taxMethod
   * @return taxMethod
   */
  @javax.annotation.Nullable
  public TaxMethodEnum getTaxMethod() {
    return taxMethod;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IAssumptions iassumptions = (IAssumptions) o;
    return Objects.equals(this.anyHeadAlreadyRetired, iassumptions.anyHeadAlreadyRetired) &&
        Objects.equals(this.bothRetired, iassumptions.bothRetired) &&
        Objects.equals(this.bucketing, iassumptions.bucketing) &&
        Objects.equals(this.client, iassumptions.client) &&
        Objects.equals(this.coClient, iassumptions.coClient) &&
        Objects.equals(this.firstToDieDate, iassumptions.firstToDieDate) &&
        Objects.equals(this.firstToDieMember, iassumptions.firstToDieMember) &&
        Objects.equals(this.firstToRetireDate, iassumptions.firstToRetireDate) &&
        Objects.equals(this.inflationRate, iassumptions.inflationRate) &&
        Objects.equals(this.lastToDieDate, iassumptions.lastToDieDate) &&
        Objects.equals(this.lastToDieMember, iassumptions.lastToDieMember) &&
        Objects.equals(this.lastToRetireDate, iassumptions.lastToRetireDate) &&
        Objects.equals(this.retirementYearAdjustedIfAlreadyRetired, iassumptions.retirementYearAdjustedIfAlreadyRetired) &&
        Objects.equals(this.splitSurplusSavingsStrategiesEnabled, iassumptions.splitSurplusSavingsStrategiesEnabled) &&
        Objects.equals(this.taxMethod, iassumptions.taxMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anyHeadAlreadyRetired, bothRetired, bucketing, client, coClient, firstToDieDate, firstToDieMember, firstToRetireDate, inflationRate, lastToDieDate, lastToDieMember, lastToRetireDate, retirementYearAdjustedIfAlreadyRetired, splitSurplusSavingsStrategiesEnabled, taxMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IAssumptions {\n");
    sb.append("    anyHeadAlreadyRetired: ").append(toIndentedString(anyHeadAlreadyRetired)).append("\n");
    sb.append("    bothRetired: ").append(toIndentedString(bothRetired)).append("\n");
    sb.append("    bucketing: ").append(toIndentedString(bucketing)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    coClient: ").append(toIndentedString(coClient)).append("\n");
    sb.append("    firstToDieDate: ").append(toIndentedString(firstToDieDate)).append("\n");
    sb.append("    firstToDieMember: ").append(toIndentedString(firstToDieMember)).append("\n");
    sb.append("    firstToRetireDate: ").append(toIndentedString(firstToRetireDate)).append("\n");
    sb.append("    inflationRate: ").append(toIndentedString(inflationRate)).append("\n");
    sb.append("    lastToDieDate: ").append(toIndentedString(lastToDieDate)).append("\n");
    sb.append("    lastToDieMember: ").append(toIndentedString(lastToDieMember)).append("\n");
    sb.append("    lastToRetireDate: ").append(toIndentedString(lastToRetireDate)).append("\n");
    sb.append("    retirementYearAdjustedIfAlreadyRetired: ").append(toIndentedString(retirementYearAdjustedIfAlreadyRetired)).append("\n");
    sb.append("    splitSurplusSavingsStrategiesEnabled: ").append(toIndentedString(splitSurplusSavingsStrategiesEnabled)).append("\n");
    sb.append("    taxMethod: ").append(toIndentedString(taxMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anyHeadAlreadyRetired");
    openapiFields.add("bothRetired");
    openapiFields.add("bucketing");
    openapiFields.add("client");
    openapiFields.add("coClient");
    openapiFields.add("firstToDieDate");
    openapiFields.add("firstToDieMember");
    openapiFields.add("firstToRetireDate");
    openapiFields.add("inflationRate");
    openapiFields.add("lastToDieDate");
    openapiFields.add("lastToDieMember");
    openapiFields.add("lastToRetireDate");
    openapiFields.add("retirementYearAdjustedIfAlreadyRetired");
    openapiFields.add("splitSurplusSavingsStrategiesEnabled");
    openapiFields.add("taxMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IAssumptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IAssumptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IAssumptions is not found in the empty JSON string", IAssumptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IAssumptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IAssumptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketing`
      if (jsonObj.get("bucketing") != null && !jsonObj.get("bucketing").isJsonNull()) {
        IBucketing.validateJsonElement(jsonObj.get("bucketing"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        IHeadAssumptions.validateJsonElement(jsonObj.get("client"));
      }
      // validate the optional field `coClient`
      if (jsonObj.get("coClient") != null && !jsonObj.get("coClient").isJsonNull()) {
        IHeadAssumptions.validateJsonElement(jsonObj.get("coClient"));
      }
      // validate the optional field `firstToDieDate`
      if (jsonObj.get("firstToDieDate") != null && !jsonObj.get("firstToDieDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("firstToDieDate"));
      }
      if ((jsonObj.get("firstToDieMember") != null && !jsonObj.get("firstToDieMember").isJsonNull()) && !jsonObj.get("firstToDieMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstToDieMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstToDieMember").toString()));
      }
      // validate the optional field `firstToDieMember`
      if (jsonObj.get("firstToDieMember") != null && !jsonObj.get("firstToDieMember").isJsonNull()) {
        FirstToDieMemberEnum.validateJsonElement(jsonObj.get("firstToDieMember"));
      }
      // validate the optional field `firstToRetireDate`
      if (jsonObj.get("firstToRetireDate") != null && !jsonObj.get("firstToRetireDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("firstToRetireDate"));
      }
      // validate the optional field `inflationRate`
      if (jsonObj.get("inflationRate") != null && !jsonObj.get("inflationRate").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("inflationRate"));
      }
      // validate the optional field `lastToDieDate`
      if (jsonObj.get("lastToDieDate") != null && !jsonObj.get("lastToDieDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("lastToDieDate"));
      }
      if ((jsonObj.get("lastToDieMember") != null && !jsonObj.get("lastToDieMember").isJsonNull()) && !jsonObj.get("lastToDieMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastToDieMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastToDieMember").toString()));
      }
      // validate the optional field `lastToDieMember`
      if (jsonObj.get("lastToDieMember") != null && !jsonObj.get("lastToDieMember").isJsonNull()) {
        LastToDieMemberEnum.validateJsonElement(jsonObj.get("lastToDieMember"));
      }
      // validate the optional field `lastToRetireDate`
      if (jsonObj.get("lastToRetireDate") != null && !jsonObj.get("lastToRetireDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("lastToRetireDate"));
      }
      // validate the optional field `retirementYearAdjustedIfAlreadyRetired`
      if (jsonObj.get("retirementYearAdjustedIfAlreadyRetired") != null && !jsonObj.get("retirementYearAdjustedIfAlreadyRetired").isJsonNull()) {
        Year.validateJsonElement(jsonObj.get("retirementYearAdjustedIfAlreadyRetired"));
      }
      if ((jsonObj.get("taxMethod") != null && !jsonObj.get("taxMethod").isJsonNull()) && !jsonObj.get("taxMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxMethod").toString()));
      }
      // validate the optional field `taxMethod`
      if (jsonObj.get("taxMethod") != null && !jsonObj.get("taxMethod").isJsonNull()) {
        TaxMethodEnum.validateJsonElement(jsonObj.get("taxMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IAssumptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IAssumptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IAssumptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IAssumptions.class));

       return (TypeAdapter<T>) new TypeAdapter<IAssumptions>() {
           @Override
           public void write(JsonWriter out, IAssumptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IAssumptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IAssumptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IAssumptions
   * @throws IOException if the JSON string is invalid with respect to IAssumptions
   */
  public static IAssumptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IAssumptions.class);
  }

  /**
   * Convert an instance of IAssumptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

