/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.IHolding;
import org.openapitools.client.model.IRateOfReturnDetails;
import org.openapitools.client.model.Percent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IInvestmentAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IInvestmentAccount {
  public static final String SERIALIZED_NAME_ANNUAL_FEE = "annualFee";
  @SerializedName(SERIALIZED_NAME_ANNUAL_FEE)
  private Percent annualFee;

  public static final String SERIALIZED_NAME_COST_BASIS = "costBasis";
  @SerializedName(SERIALIZED_NAME_COST_BASIS)
  private Currency costBasis;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCLUDE_IN_A_A = "excludeInAA";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_IN_A_A)
  private Boolean excludeInAA;

  public static final String SERIALIZED_NAME_HOLDINGS = "holdings";
  @SerializedName(SERIALIZED_NAME_HOLDINGS)
  private List<IHolding> holdings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARKET_VALUE = "marketValue";
  @SerializedName(SERIALIZED_NAME_MARKET_VALUE)
  private Currency marketValue;

  public static final String SERIALIZED_NAME_RATE_OF_RETURN = "rateOfReturn";
  @SerializedName(SERIALIZED_NAME_RATE_OF_RETURN)
  private IRateOfReturnDetails rateOfReturn;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUATION_DATE = "valuationDate";
  @SerializedName(SERIALIZED_NAME_VALUATION_DATE)
  private Date valuationDate;

  public IInvestmentAccount() {
  }

  public IInvestmentAccount(
     String description, 
     Boolean excludeInAA, 
     List<IHolding> holdings, 
     String id, 
     String type
  ) {
    this();
    this.description = description;
    this.excludeInAA = excludeInAA;
    this.holdings = holdings;
    this.id = id;
    this.type = type;
  }

  public IInvestmentAccount annualFee(Percent annualFee) {
    this.annualFee = annualFee;
    return this;
  }

  /**
   * Get annualFee
   * @return annualFee
   */
  @javax.annotation.Nullable
  public Percent getAnnualFee() {
    return annualFee;
  }

  public void setAnnualFee(Percent annualFee) {
    this.annualFee = annualFee;
  }


  public IInvestmentAccount costBasis(Currency costBasis) {
    this.costBasis = costBasis;
    return this;
  }

  /**
   * Get costBasis
   * @return costBasis
   */
  @javax.annotation.Nullable
  public Currency getCostBasis() {
    return costBasis;
  }

  public void setCostBasis(Currency costBasis) {
    this.costBasis = costBasis;
  }


  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get excludeInAA
   * @return excludeInAA
   */
  @javax.annotation.Nullable
  public Boolean getExcludeInAA() {
    return excludeInAA;
  }



  /**
   * Get holdings
   * @return holdings
   */
  @javax.annotation.Nullable
  public List<IHolding> getHoldings() {
    return holdings;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public IInvestmentAccount marketValue(Currency marketValue) {
    this.marketValue = marketValue;
    return this;
  }

  /**
   * Get marketValue
   * @return marketValue
   */
  @javax.annotation.Nullable
  public Currency getMarketValue() {
    return marketValue;
  }

  public void setMarketValue(Currency marketValue) {
    this.marketValue = marketValue;
  }


  public IInvestmentAccount rateOfReturn(IRateOfReturnDetails rateOfReturn) {
    this.rateOfReturn = rateOfReturn;
    return this;
  }

  /**
   * Get rateOfReturn
   * @return rateOfReturn
   */
  @javax.annotation.Nullable
  public IRateOfReturnDetails getRateOfReturn() {
    return rateOfReturn;
  }

  public void setRateOfReturn(IRateOfReturnDetails rateOfReturn) {
    this.rateOfReturn = rateOfReturn;
  }


  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }



  public IInvestmentAccount valuationDate(Date valuationDate) {
    this.valuationDate = valuationDate;
    return this;
  }

  /**
   * Get valuationDate
   * @return valuationDate
   */
  @javax.annotation.Nullable
  public Date getValuationDate() {
    return valuationDate;
  }

  public void setValuationDate(Date valuationDate) {
    this.valuationDate = valuationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IInvestmentAccount iinvestmentAccount = (IInvestmentAccount) o;
    return Objects.equals(this.annualFee, iinvestmentAccount.annualFee) &&
        Objects.equals(this.costBasis, iinvestmentAccount.costBasis) &&
        Objects.equals(this.description, iinvestmentAccount.description) &&
        Objects.equals(this.excludeInAA, iinvestmentAccount.excludeInAA) &&
        Objects.equals(this.holdings, iinvestmentAccount.holdings) &&
        Objects.equals(this.id, iinvestmentAccount.id) &&
        Objects.equals(this.marketValue, iinvestmentAccount.marketValue) &&
        Objects.equals(this.rateOfReturn, iinvestmentAccount.rateOfReturn) &&
        Objects.equals(this.type, iinvestmentAccount.type) &&
        Objects.equals(this.valuationDate, iinvestmentAccount.valuationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualFee, costBasis, description, excludeInAA, holdings, id, marketValue, rateOfReturn, type, valuationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IInvestmentAccount {\n");
    sb.append("    annualFee: ").append(toIndentedString(annualFee)).append("\n");
    sb.append("    costBasis: ").append(toIndentedString(costBasis)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    excludeInAA: ").append(toIndentedString(excludeInAA)).append("\n");
    sb.append("    holdings: ").append(toIndentedString(holdings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    rateOfReturn: ").append(toIndentedString(rateOfReturn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valuationDate: ").append(toIndentedString(valuationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualFee");
    openapiFields.add("costBasis");
    openapiFields.add("description");
    openapiFields.add("excludeInAA");
    openapiFields.add("holdings");
    openapiFields.add("id");
    openapiFields.add("marketValue");
    openapiFields.add("rateOfReturn");
    openapiFields.add("type");
    openapiFields.add("valuationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IInvestmentAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IInvestmentAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IInvestmentAccount is not found in the empty JSON string", IInvestmentAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IInvestmentAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IInvestmentAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annualFee`
      if (jsonObj.get("annualFee") != null && !jsonObj.get("annualFee").isJsonNull()) {
        Percent.validateJsonElement(jsonObj.get("annualFee"));
      }
      // validate the optional field `costBasis`
      if (jsonObj.get("costBasis") != null && !jsonObj.get("costBasis").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("costBasis"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("holdings") != null && !jsonObj.get("holdings").isJsonNull()) {
        JsonArray jsonArrayholdings = jsonObj.getAsJsonArray("holdings");
        if (jsonArrayholdings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holdings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holdings` to be an array in the JSON string but got `%s`", jsonObj.get("holdings").toString()));
          }

          // validate the optional field `holdings` (array)
          for (int i = 0; i < jsonArrayholdings.size(); i++) {
            IHolding.validateJsonElement(jsonArrayholdings.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `marketValue`
      if (jsonObj.get("marketValue") != null && !jsonObj.get("marketValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("marketValue"));
      }
      // validate the optional field `rateOfReturn`
      if (jsonObj.get("rateOfReturn") != null && !jsonObj.get("rateOfReturn").isJsonNull()) {
        IRateOfReturnDetails.validateJsonElement(jsonObj.get("rateOfReturn"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `valuationDate`
      if (jsonObj.get("valuationDate") != null && !jsonObj.get("valuationDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("valuationDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IInvestmentAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IInvestmentAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IInvestmentAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IInvestmentAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<IInvestmentAccount>() {
           @Override
           public void write(JsonWriter out, IInvestmentAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IInvestmentAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IInvestmentAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IInvestmentAccount
   * @throws IOException if the JSON string is invalid with respect to IInvestmentAccount
   */
  public static IInvestmentAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IInvestmentAccount.class);
  }

  /**
   * Convert an instance of IInvestmentAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

