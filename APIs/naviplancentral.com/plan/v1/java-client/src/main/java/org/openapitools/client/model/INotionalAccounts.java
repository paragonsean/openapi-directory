/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * INotionalAccounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class INotionalAccounts {
  public static final String SERIALIZED_NAME_CAPITAL_DIVIDEND_ACCOUNT_END_OF_YEAR_VALUE = "capitalDividendAccountEndOfYearValue";
  @SerializedName(SERIALIZED_NAME_CAPITAL_DIVIDEND_ACCOUNT_END_OF_YEAR_VALUE)
  private Currency capitalDividendAccountEndOfYearValue;

  public static final String SERIALIZED_NAME_CAPITAL_LOSSES_CARRYOVER_END_OF_YEAR_VALUE = "capitalLossesCarryoverEndOfYearValue";
  @SerializedName(SERIALIZED_NAME_CAPITAL_LOSSES_CARRYOVER_END_OF_YEAR_VALUE)
  private Currency capitalLossesCarryoverEndOfYearValue;

  public static final String SERIALIZED_NAME_DIVIDEND_REFUND = "dividendRefund";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_REFUND)
  private Currency dividendRefund;

  public static final String SERIALIZED_NAME_GENERAL_RATE_OF_INCOME_POOL_END_OF_YEAR_VALUE = "generalRateOfIncomePoolEndOfYearValue";
  @SerializedName(SERIALIZED_NAME_GENERAL_RATE_OF_INCOME_POOL_END_OF_YEAR_VALUE)
  private Currency generalRateOfIncomePoolEndOfYearValue;

  public static final String SERIALIZED_NAME_NON_ELIGIBLE_REFUNDABLE_DIVIDEND_TAX_ON_HAND_END_OF_YEAR_VALUE = "nonEligibleRefundableDividendTaxOnHandEndOfYearValue";
  @SerializedName(SERIALIZED_NAME_NON_ELIGIBLE_REFUNDABLE_DIVIDEND_TAX_ON_HAND_END_OF_YEAR_VALUE)
  private Currency nonEligibleRefundableDividendTaxOnHandEndOfYearValue;

  public static final String SERIALIZED_NAME_NRDTOH_DIVIDEND_REFUND = "nrdtohDividendRefund";
  @SerializedName(SERIALIZED_NAME_NRDTOH_DIVIDEND_REFUND)
  private Currency nrdtohDividendRefund;

  public static final String SERIALIZED_NAME_REFUNDABLE_DIVIDEND_TAX_ON_HAND_END_OF_YEAR_VALUE = "refundableDividendTaxOnHandEndOfYearValue";
  @SerializedName(SERIALIZED_NAME_REFUNDABLE_DIVIDEND_TAX_ON_HAND_END_OF_YEAR_VALUE)
  private Currency refundableDividendTaxOnHandEndOfYearValue;

  public INotionalAccounts() {
  }

  public INotionalAccounts capitalDividendAccountEndOfYearValue(Currency capitalDividendAccountEndOfYearValue) {
    this.capitalDividendAccountEndOfYearValue = capitalDividendAccountEndOfYearValue;
    return this;
  }

  /**
   * Get capitalDividendAccountEndOfYearValue
   * @return capitalDividendAccountEndOfYearValue
   */
  @javax.annotation.Nullable
  public Currency getCapitalDividendAccountEndOfYearValue() {
    return capitalDividendAccountEndOfYearValue;
  }

  public void setCapitalDividendAccountEndOfYearValue(Currency capitalDividendAccountEndOfYearValue) {
    this.capitalDividendAccountEndOfYearValue = capitalDividendAccountEndOfYearValue;
  }


  public INotionalAccounts capitalLossesCarryoverEndOfYearValue(Currency capitalLossesCarryoverEndOfYearValue) {
    this.capitalLossesCarryoverEndOfYearValue = capitalLossesCarryoverEndOfYearValue;
    return this;
  }

  /**
   * Get capitalLossesCarryoverEndOfYearValue
   * @return capitalLossesCarryoverEndOfYearValue
   */
  @javax.annotation.Nullable
  public Currency getCapitalLossesCarryoverEndOfYearValue() {
    return capitalLossesCarryoverEndOfYearValue;
  }

  public void setCapitalLossesCarryoverEndOfYearValue(Currency capitalLossesCarryoverEndOfYearValue) {
    this.capitalLossesCarryoverEndOfYearValue = capitalLossesCarryoverEndOfYearValue;
  }


  public INotionalAccounts dividendRefund(Currency dividendRefund) {
    this.dividendRefund = dividendRefund;
    return this;
  }

  /**
   * Get dividendRefund
   * @return dividendRefund
   */
  @javax.annotation.Nullable
  public Currency getDividendRefund() {
    return dividendRefund;
  }

  public void setDividendRefund(Currency dividendRefund) {
    this.dividendRefund = dividendRefund;
  }


  public INotionalAccounts generalRateOfIncomePoolEndOfYearValue(Currency generalRateOfIncomePoolEndOfYearValue) {
    this.generalRateOfIncomePoolEndOfYearValue = generalRateOfIncomePoolEndOfYearValue;
    return this;
  }

  /**
   * Get generalRateOfIncomePoolEndOfYearValue
   * @return generalRateOfIncomePoolEndOfYearValue
   */
  @javax.annotation.Nullable
  public Currency getGeneralRateOfIncomePoolEndOfYearValue() {
    return generalRateOfIncomePoolEndOfYearValue;
  }

  public void setGeneralRateOfIncomePoolEndOfYearValue(Currency generalRateOfIncomePoolEndOfYearValue) {
    this.generalRateOfIncomePoolEndOfYearValue = generalRateOfIncomePoolEndOfYearValue;
  }


  public INotionalAccounts nonEligibleRefundableDividendTaxOnHandEndOfYearValue(Currency nonEligibleRefundableDividendTaxOnHandEndOfYearValue) {
    this.nonEligibleRefundableDividendTaxOnHandEndOfYearValue = nonEligibleRefundableDividendTaxOnHandEndOfYearValue;
    return this;
  }

  /**
   * Get nonEligibleRefundableDividendTaxOnHandEndOfYearValue
   * @return nonEligibleRefundableDividendTaxOnHandEndOfYearValue
   */
  @javax.annotation.Nullable
  public Currency getNonEligibleRefundableDividendTaxOnHandEndOfYearValue() {
    return nonEligibleRefundableDividendTaxOnHandEndOfYearValue;
  }

  public void setNonEligibleRefundableDividendTaxOnHandEndOfYearValue(Currency nonEligibleRefundableDividendTaxOnHandEndOfYearValue) {
    this.nonEligibleRefundableDividendTaxOnHandEndOfYearValue = nonEligibleRefundableDividendTaxOnHandEndOfYearValue;
  }


  public INotionalAccounts nrdtohDividendRefund(Currency nrdtohDividendRefund) {
    this.nrdtohDividendRefund = nrdtohDividendRefund;
    return this;
  }

  /**
   * Get nrdtohDividendRefund
   * @return nrdtohDividendRefund
   */
  @javax.annotation.Nullable
  public Currency getNrdtohDividendRefund() {
    return nrdtohDividendRefund;
  }

  public void setNrdtohDividendRefund(Currency nrdtohDividendRefund) {
    this.nrdtohDividendRefund = nrdtohDividendRefund;
  }


  public INotionalAccounts refundableDividendTaxOnHandEndOfYearValue(Currency refundableDividendTaxOnHandEndOfYearValue) {
    this.refundableDividendTaxOnHandEndOfYearValue = refundableDividendTaxOnHandEndOfYearValue;
    return this;
  }

  /**
   * Get refundableDividendTaxOnHandEndOfYearValue
   * @return refundableDividendTaxOnHandEndOfYearValue
   */
  @javax.annotation.Nullable
  public Currency getRefundableDividendTaxOnHandEndOfYearValue() {
    return refundableDividendTaxOnHandEndOfYearValue;
  }

  public void setRefundableDividendTaxOnHandEndOfYearValue(Currency refundableDividendTaxOnHandEndOfYearValue) {
    this.refundableDividendTaxOnHandEndOfYearValue = refundableDividendTaxOnHandEndOfYearValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    INotionalAccounts inotionalAccounts = (INotionalAccounts) o;
    return Objects.equals(this.capitalDividendAccountEndOfYearValue, inotionalAccounts.capitalDividendAccountEndOfYearValue) &&
        Objects.equals(this.capitalLossesCarryoverEndOfYearValue, inotionalAccounts.capitalLossesCarryoverEndOfYearValue) &&
        Objects.equals(this.dividendRefund, inotionalAccounts.dividendRefund) &&
        Objects.equals(this.generalRateOfIncomePoolEndOfYearValue, inotionalAccounts.generalRateOfIncomePoolEndOfYearValue) &&
        Objects.equals(this.nonEligibleRefundableDividendTaxOnHandEndOfYearValue, inotionalAccounts.nonEligibleRefundableDividendTaxOnHandEndOfYearValue) &&
        Objects.equals(this.nrdtohDividendRefund, inotionalAccounts.nrdtohDividendRefund) &&
        Objects.equals(this.refundableDividendTaxOnHandEndOfYearValue, inotionalAccounts.refundableDividendTaxOnHandEndOfYearValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capitalDividendAccountEndOfYearValue, capitalLossesCarryoverEndOfYearValue, dividendRefund, generalRateOfIncomePoolEndOfYearValue, nonEligibleRefundableDividendTaxOnHandEndOfYearValue, nrdtohDividendRefund, refundableDividendTaxOnHandEndOfYearValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class INotionalAccounts {\n");
    sb.append("    capitalDividendAccountEndOfYearValue: ").append(toIndentedString(capitalDividendAccountEndOfYearValue)).append("\n");
    sb.append("    capitalLossesCarryoverEndOfYearValue: ").append(toIndentedString(capitalLossesCarryoverEndOfYearValue)).append("\n");
    sb.append("    dividendRefund: ").append(toIndentedString(dividendRefund)).append("\n");
    sb.append("    generalRateOfIncomePoolEndOfYearValue: ").append(toIndentedString(generalRateOfIncomePoolEndOfYearValue)).append("\n");
    sb.append("    nonEligibleRefundableDividendTaxOnHandEndOfYearValue: ").append(toIndentedString(nonEligibleRefundableDividendTaxOnHandEndOfYearValue)).append("\n");
    sb.append("    nrdtohDividendRefund: ").append(toIndentedString(nrdtohDividendRefund)).append("\n");
    sb.append("    refundableDividendTaxOnHandEndOfYearValue: ").append(toIndentedString(refundableDividendTaxOnHandEndOfYearValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capitalDividendAccountEndOfYearValue");
    openapiFields.add("capitalLossesCarryoverEndOfYearValue");
    openapiFields.add("dividendRefund");
    openapiFields.add("generalRateOfIncomePoolEndOfYearValue");
    openapiFields.add("nonEligibleRefundableDividendTaxOnHandEndOfYearValue");
    openapiFields.add("nrdtohDividendRefund");
    openapiFields.add("refundableDividendTaxOnHandEndOfYearValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to INotionalAccounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!INotionalAccounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in INotionalAccounts is not found in the empty JSON string", INotionalAccounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!INotionalAccounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `INotionalAccounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `capitalDividendAccountEndOfYearValue`
      if (jsonObj.get("capitalDividendAccountEndOfYearValue") != null && !jsonObj.get("capitalDividendAccountEndOfYearValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("capitalDividendAccountEndOfYearValue"));
      }
      // validate the optional field `capitalLossesCarryoverEndOfYearValue`
      if (jsonObj.get("capitalLossesCarryoverEndOfYearValue") != null && !jsonObj.get("capitalLossesCarryoverEndOfYearValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("capitalLossesCarryoverEndOfYearValue"));
      }
      // validate the optional field `dividendRefund`
      if (jsonObj.get("dividendRefund") != null && !jsonObj.get("dividendRefund").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("dividendRefund"));
      }
      // validate the optional field `generalRateOfIncomePoolEndOfYearValue`
      if (jsonObj.get("generalRateOfIncomePoolEndOfYearValue") != null && !jsonObj.get("generalRateOfIncomePoolEndOfYearValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("generalRateOfIncomePoolEndOfYearValue"));
      }
      // validate the optional field `nonEligibleRefundableDividendTaxOnHandEndOfYearValue`
      if (jsonObj.get("nonEligibleRefundableDividendTaxOnHandEndOfYearValue") != null && !jsonObj.get("nonEligibleRefundableDividendTaxOnHandEndOfYearValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("nonEligibleRefundableDividendTaxOnHandEndOfYearValue"));
      }
      // validate the optional field `nrdtohDividendRefund`
      if (jsonObj.get("nrdtohDividendRefund") != null && !jsonObj.get("nrdtohDividendRefund").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("nrdtohDividendRefund"));
      }
      // validate the optional field `refundableDividendTaxOnHandEndOfYearValue`
      if (jsonObj.get("refundableDividendTaxOnHandEndOfYearValue") != null && !jsonObj.get("refundableDividendTaxOnHandEndOfYearValue").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("refundableDividendTaxOnHandEndOfYearValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!INotionalAccounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'INotionalAccounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<INotionalAccounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(INotionalAccounts.class));

       return (TypeAdapter<T>) new TypeAdapter<INotionalAccounts>() {
           @Override
           public void write(JsonWriter out, INotionalAccounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public INotionalAccounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of INotionalAccounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of INotionalAccounts
   * @throws IOException if the JSON string is invalid with respect to INotionalAccounts
   */
  public static INotionalAccounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, INotionalAccounts.class);
  }

  /**
   * Convert an instance of INotionalAccounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

