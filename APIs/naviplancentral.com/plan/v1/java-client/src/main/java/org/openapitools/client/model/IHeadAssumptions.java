/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.FormattedMaritalOrTaxFilingStatus;
import org.openapitools.client.model.IGovernmentPensions;
import org.openapitools.client.model.IIncomeTaxes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IHeadAssumptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IHeadAssumptions {
  public static final String SERIALIZED_NAME_ALREADY_RETIRED = "alreadyRetired";
  @SerializedName(SERIALIZED_NAME_ALREADY_RETIRED)
  private Boolean alreadyRetired;

  public static final String SERIALIZED_NAME_DECEASED_AGE = "deceasedAge";
  @SerializedName(SERIALIZED_NAME_DECEASED_AGE)
  private Integer deceasedAge;

  public static final String SERIALIZED_NAME_DECEASED_DATE = "deceasedDate";
  @SerializedName(SERIALIZED_NAME_DECEASED_DATE)
  private Date deceasedDate;

  public static final String SERIALIZED_NAME_ESTATE_INCOME_TAXES = "estateIncomeTaxes";
  @SerializedName(SERIALIZED_NAME_ESTATE_INCOME_TAXES)
  private IIncomeTaxes estateIncomeTaxes;

  public static final String SERIALIZED_NAME_GOVERNMENT_PENSIONS = "governmentPensions";
  @SerializedName(SERIALIZED_NAME_GOVERNMENT_PENSIONS)
  private IGovernmentPensions governmentPensions;

  public static final String SERIALIZED_NAME_MARITAL_OR_TAX_FILING_STATUS = "maritalOrTaxFilingStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_OR_TAX_FILING_STATUS)
  private FormattedMaritalOrTaxFilingStatus maritalOrTaxFilingStatus;

  public static final String SERIALIZED_NAME_PRE_RETIREMENT_INCOME_TAXES = "preRetirementIncomeTaxes";
  @SerializedName(SERIALIZED_NAME_PRE_RETIREMENT_INCOME_TAXES)
  private IIncomeTaxes preRetirementIncomeTaxes;

  public static final String SERIALIZED_NAME_RETIREMENT_AGE = "retirementAge";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_AGE)
  private Integer retirementAge;

  public static final String SERIALIZED_NAME_RETIREMENT_DATE = "retirementDate";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_DATE)
  private Date retirementDate;

  public static final String SERIALIZED_NAME_RETIREMENT_INCOME_TAXES = "retirementIncomeTaxes";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_INCOME_TAXES)
  private IIncomeTaxes retirementIncomeTaxes;

  public IHeadAssumptions() {
  }

  public IHeadAssumptions(
     Boolean alreadyRetired, 
     Integer deceasedAge, 
     Integer retirementAge
  ) {
    this();
    this.alreadyRetired = alreadyRetired;
    this.deceasedAge = deceasedAge;
    this.retirementAge = retirementAge;
  }

  /**
   * Get alreadyRetired
   * @return alreadyRetired
   */
  @javax.annotation.Nullable
  public Boolean getAlreadyRetired() {
    return alreadyRetired;
  }



  /**
   * Get deceasedAge
   * @return deceasedAge
   */
  @javax.annotation.Nullable
  public Integer getDeceasedAge() {
    return deceasedAge;
  }



  public IHeadAssumptions deceasedDate(Date deceasedDate) {
    this.deceasedDate = deceasedDate;
    return this;
  }

  /**
   * Get deceasedDate
   * @return deceasedDate
   */
  @javax.annotation.Nullable
  public Date getDeceasedDate() {
    return deceasedDate;
  }

  public void setDeceasedDate(Date deceasedDate) {
    this.deceasedDate = deceasedDate;
  }


  public IHeadAssumptions estateIncomeTaxes(IIncomeTaxes estateIncomeTaxes) {
    this.estateIncomeTaxes = estateIncomeTaxes;
    return this;
  }

  /**
   * Get estateIncomeTaxes
   * @return estateIncomeTaxes
   */
  @javax.annotation.Nullable
  public IIncomeTaxes getEstateIncomeTaxes() {
    return estateIncomeTaxes;
  }

  public void setEstateIncomeTaxes(IIncomeTaxes estateIncomeTaxes) {
    this.estateIncomeTaxes = estateIncomeTaxes;
  }


  public IHeadAssumptions governmentPensions(IGovernmentPensions governmentPensions) {
    this.governmentPensions = governmentPensions;
    return this;
  }

  /**
   * Get governmentPensions
   * @return governmentPensions
   */
  @javax.annotation.Nullable
  public IGovernmentPensions getGovernmentPensions() {
    return governmentPensions;
  }

  public void setGovernmentPensions(IGovernmentPensions governmentPensions) {
    this.governmentPensions = governmentPensions;
  }


  public IHeadAssumptions maritalOrTaxFilingStatus(FormattedMaritalOrTaxFilingStatus maritalOrTaxFilingStatus) {
    this.maritalOrTaxFilingStatus = maritalOrTaxFilingStatus;
    return this;
  }

  /**
   * Get maritalOrTaxFilingStatus
   * @return maritalOrTaxFilingStatus
   */
  @javax.annotation.Nullable
  public FormattedMaritalOrTaxFilingStatus getMaritalOrTaxFilingStatus() {
    return maritalOrTaxFilingStatus;
  }

  public void setMaritalOrTaxFilingStatus(FormattedMaritalOrTaxFilingStatus maritalOrTaxFilingStatus) {
    this.maritalOrTaxFilingStatus = maritalOrTaxFilingStatus;
  }


  public IHeadAssumptions preRetirementIncomeTaxes(IIncomeTaxes preRetirementIncomeTaxes) {
    this.preRetirementIncomeTaxes = preRetirementIncomeTaxes;
    return this;
  }

  /**
   * Get preRetirementIncomeTaxes
   * @return preRetirementIncomeTaxes
   */
  @javax.annotation.Nullable
  public IIncomeTaxes getPreRetirementIncomeTaxes() {
    return preRetirementIncomeTaxes;
  }

  public void setPreRetirementIncomeTaxes(IIncomeTaxes preRetirementIncomeTaxes) {
    this.preRetirementIncomeTaxes = preRetirementIncomeTaxes;
  }


  /**
   * Get retirementAge
   * @return retirementAge
   */
  @javax.annotation.Nullable
  public Integer getRetirementAge() {
    return retirementAge;
  }



  public IHeadAssumptions retirementDate(Date retirementDate) {
    this.retirementDate = retirementDate;
    return this;
  }

  /**
   * Get retirementDate
   * @return retirementDate
   */
  @javax.annotation.Nullable
  public Date getRetirementDate() {
    return retirementDate;
  }

  public void setRetirementDate(Date retirementDate) {
    this.retirementDate = retirementDate;
  }


  public IHeadAssumptions retirementIncomeTaxes(IIncomeTaxes retirementIncomeTaxes) {
    this.retirementIncomeTaxes = retirementIncomeTaxes;
    return this;
  }

  /**
   * Get retirementIncomeTaxes
   * @return retirementIncomeTaxes
   */
  @javax.annotation.Nullable
  public IIncomeTaxes getRetirementIncomeTaxes() {
    return retirementIncomeTaxes;
  }

  public void setRetirementIncomeTaxes(IIncomeTaxes retirementIncomeTaxes) {
    this.retirementIncomeTaxes = retirementIncomeTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IHeadAssumptions iheadAssumptions = (IHeadAssumptions) o;
    return Objects.equals(this.alreadyRetired, iheadAssumptions.alreadyRetired) &&
        Objects.equals(this.deceasedAge, iheadAssumptions.deceasedAge) &&
        Objects.equals(this.deceasedDate, iheadAssumptions.deceasedDate) &&
        Objects.equals(this.estateIncomeTaxes, iheadAssumptions.estateIncomeTaxes) &&
        Objects.equals(this.governmentPensions, iheadAssumptions.governmentPensions) &&
        Objects.equals(this.maritalOrTaxFilingStatus, iheadAssumptions.maritalOrTaxFilingStatus) &&
        Objects.equals(this.preRetirementIncomeTaxes, iheadAssumptions.preRetirementIncomeTaxes) &&
        Objects.equals(this.retirementAge, iheadAssumptions.retirementAge) &&
        Objects.equals(this.retirementDate, iheadAssumptions.retirementDate) &&
        Objects.equals(this.retirementIncomeTaxes, iheadAssumptions.retirementIncomeTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alreadyRetired, deceasedAge, deceasedDate, estateIncomeTaxes, governmentPensions, maritalOrTaxFilingStatus, preRetirementIncomeTaxes, retirementAge, retirementDate, retirementIncomeTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IHeadAssumptions {\n");
    sb.append("    alreadyRetired: ").append(toIndentedString(alreadyRetired)).append("\n");
    sb.append("    deceasedAge: ").append(toIndentedString(deceasedAge)).append("\n");
    sb.append("    deceasedDate: ").append(toIndentedString(deceasedDate)).append("\n");
    sb.append("    estateIncomeTaxes: ").append(toIndentedString(estateIncomeTaxes)).append("\n");
    sb.append("    governmentPensions: ").append(toIndentedString(governmentPensions)).append("\n");
    sb.append("    maritalOrTaxFilingStatus: ").append(toIndentedString(maritalOrTaxFilingStatus)).append("\n");
    sb.append("    preRetirementIncomeTaxes: ").append(toIndentedString(preRetirementIncomeTaxes)).append("\n");
    sb.append("    retirementAge: ").append(toIndentedString(retirementAge)).append("\n");
    sb.append("    retirementDate: ").append(toIndentedString(retirementDate)).append("\n");
    sb.append("    retirementIncomeTaxes: ").append(toIndentedString(retirementIncomeTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alreadyRetired");
    openapiFields.add("deceasedAge");
    openapiFields.add("deceasedDate");
    openapiFields.add("estateIncomeTaxes");
    openapiFields.add("governmentPensions");
    openapiFields.add("maritalOrTaxFilingStatus");
    openapiFields.add("preRetirementIncomeTaxes");
    openapiFields.add("retirementAge");
    openapiFields.add("retirementDate");
    openapiFields.add("retirementIncomeTaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IHeadAssumptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IHeadAssumptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IHeadAssumptions is not found in the empty JSON string", IHeadAssumptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IHeadAssumptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IHeadAssumptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deceasedDate`
      if (jsonObj.get("deceasedDate") != null && !jsonObj.get("deceasedDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("deceasedDate"));
      }
      // validate the optional field `estateIncomeTaxes`
      if (jsonObj.get("estateIncomeTaxes") != null && !jsonObj.get("estateIncomeTaxes").isJsonNull()) {
        IIncomeTaxes.validateJsonElement(jsonObj.get("estateIncomeTaxes"));
      }
      // validate the optional field `governmentPensions`
      if (jsonObj.get("governmentPensions") != null && !jsonObj.get("governmentPensions").isJsonNull()) {
        IGovernmentPensions.validateJsonElement(jsonObj.get("governmentPensions"));
      }
      // validate the optional field `maritalOrTaxFilingStatus`
      if (jsonObj.get("maritalOrTaxFilingStatus") != null && !jsonObj.get("maritalOrTaxFilingStatus").isJsonNull()) {
        FormattedMaritalOrTaxFilingStatus.validateJsonElement(jsonObj.get("maritalOrTaxFilingStatus"));
      }
      // validate the optional field `preRetirementIncomeTaxes`
      if (jsonObj.get("preRetirementIncomeTaxes") != null && !jsonObj.get("preRetirementIncomeTaxes").isJsonNull()) {
        IIncomeTaxes.validateJsonElement(jsonObj.get("preRetirementIncomeTaxes"));
      }
      // validate the optional field `retirementDate`
      if (jsonObj.get("retirementDate") != null && !jsonObj.get("retirementDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("retirementDate"));
      }
      // validate the optional field `retirementIncomeTaxes`
      if (jsonObj.get("retirementIncomeTaxes") != null && !jsonObj.get("retirementIncomeTaxes").isJsonNull()) {
        IIncomeTaxes.validateJsonElement(jsonObj.get("retirementIncomeTaxes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IHeadAssumptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IHeadAssumptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IHeadAssumptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IHeadAssumptions.class));

       return (TypeAdapter<T>) new TypeAdapter<IHeadAssumptions>() {
           @Override
           public void write(JsonWriter out, IHeadAssumptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IHeadAssumptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IHeadAssumptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IHeadAssumptions
   * @throws IOException if the JSON string is invalid with respect to IHeadAssumptions
   */
  public static IHeadAssumptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IHeadAssumptions.class);
  }

  /**
   * Convert an instance of IHeadAssumptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

