/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.ICashFlowCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ICashFlowOutflows
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:21.776546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ICashFlowOutflows {
  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private Currency contributions;

  public static final String SERIALIZED_NAME_EDUCATION_EXPENSES = "educationExpenses";
  @SerializedName(SERIALIZED_NAME_EDUCATION_EXPENSES)
  private ICashFlowCategory educationExpenses;

  public static final String SERIALIZED_NAME_EMPLOYER_EXPENSES = "employerExpenses";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_EXPENSES)
  private ICashFlowCategory employerExpenses;

  public static final String SERIALIZED_NAME_EMPLOYMENT_BUSINESS_EXPENSES = "employmentBusinessExpenses";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_BUSINESS_EXPENSES)
  private ICashFlowCategory employmentBusinessExpenses;

  public static final String SERIALIZED_NAME_INVESTMENT_EXPENSES = "investmentExpenses";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_EXPENSES)
  private ICashFlowCategory investmentExpenses;

  public static final String SERIALIZED_NAME_LIFESTYLE_EXPENSES = "lifestyleExpenses";
  @SerializedName(SERIALIZED_NAME_LIFESTYLE_EXPENSES)
  private ICashFlowCategory lifestyleExpenses;

  public static final String SERIALIZED_NAME_LIFESTYLE_EXPENSES_DISCRETIONARY = "lifestyleExpensesDiscretionary";
  @SerializedName(SERIALIZED_NAME_LIFESTYLE_EXPENSES_DISCRETIONARY)
  private ICashFlowCategory lifestyleExpensesDiscretionary;

  public static final String SERIALIZED_NAME_LIFESTYLE_EXPENSES_FIXED = "lifestyleExpensesFixed";
  @SerializedName(SERIALIZED_NAME_LIFESTYLE_EXPENSES_FIXED)
  private ICashFlowCategory lifestyleExpensesFixed;

  public static final String SERIALIZED_NAME_LOCKED_IN_CONTRIBUTIONS = "lockedInContributions";
  @SerializedName(SERIALIZED_NAME_LOCKED_IN_CONTRIBUTIONS)
  private Currency lockedInContributions;

  public static final String SERIALIZED_NAME_MEDICAL_EXPENSES = "medicalExpenses";
  @SerializedName(SERIALIZED_NAME_MEDICAL_EXPENSES)
  private ICashFlowCategory medicalExpenses;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_EXPENSES = "miscellaneousExpenses";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_EXPENSES)
  private ICashFlowCategory miscellaneousExpenses;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_EXPENSES_DISCRETIONARY = "miscellaneousExpensesDiscretionary";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_EXPENSES_DISCRETIONARY)
  private ICashFlowCategory miscellaneousExpensesDiscretionary;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_EXPENSES_FIXED = "miscellaneousExpensesFixed";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_EXPENSES_FIXED)
  private ICashFlowCategory miscellaneousExpensesFixed;

  public static final String SERIALIZED_NAME_NON_QUALIFIED_CONTRIBUTIONS = "nonQualifiedContributions";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_CONTRIBUTIONS)
  private ICashFlowCategory nonQualifiedContributions;

  public static final String SERIALIZED_NAME_NON_QUALIFIED_REINVESTMENTS = "nonQualifiedReinvestments";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_REINVESTMENTS)
  private ICashFlowCategory nonQualifiedReinvestments;

  public static final String SERIALIZED_NAME_PRIVATE_CORPORATION_OUTFLOWS = "privateCorporationOutflows";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CORPORATION_OUTFLOWS)
  private ICashFlowCategory privateCorporationOutflows;

  public static final String SERIALIZED_NAME_QUALIFIED_CONTRIBUTIONS = "qualifiedContributions";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_CONTRIBUTIONS)
  private ICashFlowCategory qualifiedContributions;

  public static final String SERIALIZED_NAME_ROTH_CONTRIBUTIONS = "rothContributions";
  @SerializedName(SERIALIZED_NAME_ROTH_CONTRIBUTIONS)
  private Currency rothContributions;

  public static final String SERIALIZED_NAME_SURPLUS_OUTFLOWS = "surplusOutflows";
  @SerializedName(SERIALIZED_NAME_SURPLUS_OUTFLOWS)
  private ICashFlowCategory surplusOutflows;

  public static final String SERIALIZED_NAME_SURPLUS_SAVINGS = "surplusSavings";
  @SerializedName(SERIALIZED_NAME_SURPLUS_SAVINGS)
  private Currency surplusSavings;

  public static final String SERIALIZED_NAME_TFSA_CONTRIBUTIONS = "tfsaContributions";
  @SerializedName(SERIALIZED_NAME_TFSA_CONTRIBUTIONS)
  private Currency tfsaContributions;

  public static final String SERIALIZED_NAME_TOTAL_NEEDS = "totalNeeds";
  @SerializedName(SERIALIZED_NAME_TOTAL_NEEDS)
  private Currency totalNeeds;

  public static final String SERIALIZED_NAME_TOTAL_WITH_TAXES = "totalWithTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_WITH_TAXES)
  private Currency totalWithTaxes;

  public static final String SERIALIZED_NAME_TOTAL_WITHOUT_TAXES = "totalWithoutTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_WITHOUT_TAXES)
  private Currency totalWithoutTaxes;

  public ICashFlowOutflows() {
  }

  public ICashFlowOutflows contributions(Currency contributions) {
    this.contributions = contributions;
    return this;
  }

  /**
   * Get contributions
   * @return contributions
   */
  @javax.annotation.Nullable
  public Currency getContributions() {
    return contributions;
  }

  public void setContributions(Currency contributions) {
    this.contributions = contributions;
  }


  public ICashFlowOutflows educationExpenses(ICashFlowCategory educationExpenses) {
    this.educationExpenses = educationExpenses;
    return this;
  }

  /**
   * Get educationExpenses
   * @return educationExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getEducationExpenses() {
    return educationExpenses;
  }

  public void setEducationExpenses(ICashFlowCategory educationExpenses) {
    this.educationExpenses = educationExpenses;
  }


  public ICashFlowOutflows employerExpenses(ICashFlowCategory employerExpenses) {
    this.employerExpenses = employerExpenses;
    return this;
  }

  /**
   * Get employerExpenses
   * @return employerExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getEmployerExpenses() {
    return employerExpenses;
  }

  public void setEmployerExpenses(ICashFlowCategory employerExpenses) {
    this.employerExpenses = employerExpenses;
  }


  public ICashFlowOutflows employmentBusinessExpenses(ICashFlowCategory employmentBusinessExpenses) {
    this.employmentBusinessExpenses = employmentBusinessExpenses;
    return this;
  }

  /**
   * Get employmentBusinessExpenses
   * @return employmentBusinessExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getEmploymentBusinessExpenses() {
    return employmentBusinessExpenses;
  }

  public void setEmploymentBusinessExpenses(ICashFlowCategory employmentBusinessExpenses) {
    this.employmentBusinessExpenses = employmentBusinessExpenses;
  }


  public ICashFlowOutflows investmentExpenses(ICashFlowCategory investmentExpenses) {
    this.investmentExpenses = investmentExpenses;
    return this;
  }

  /**
   * Get investmentExpenses
   * @return investmentExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getInvestmentExpenses() {
    return investmentExpenses;
  }

  public void setInvestmentExpenses(ICashFlowCategory investmentExpenses) {
    this.investmentExpenses = investmentExpenses;
  }


  public ICashFlowOutflows lifestyleExpenses(ICashFlowCategory lifestyleExpenses) {
    this.lifestyleExpenses = lifestyleExpenses;
    return this;
  }

  /**
   * Get lifestyleExpenses
   * @return lifestyleExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getLifestyleExpenses() {
    return lifestyleExpenses;
  }

  public void setLifestyleExpenses(ICashFlowCategory lifestyleExpenses) {
    this.lifestyleExpenses = lifestyleExpenses;
  }


  public ICashFlowOutflows lifestyleExpensesDiscretionary(ICashFlowCategory lifestyleExpensesDiscretionary) {
    this.lifestyleExpensesDiscretionary = lifestyleExpensesDiscretionary;
    return this;
  }

  /**
   * Get lifestyleExpensesDiscretionary
   * @return lifestyleExpensesDiscretionary
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getLifestyleExpensesDiscretionary() {
    return lifestyleExpensesDiscretionary;
  }

  public void setLifestyleExpensesDiscretionary(ICashFlowCategory lifestyleExpensesDiscretionary) {
    this.lifestyleExpensesDiscretionary = lifestyleExpensesDiscretionary;
  }


  public ICashFlowOutflows lifestyleExpensesFixed(ICashFlowCategory lifestyleExpensesFixed) {
    this.lifestyleExpensesFixed = lifestyleExpensesFixed;
    return this;
  }

  /**
   * Get lifestyleExpensesFixed
   * @return lifestyleExpensesFixed
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getLifestyleExpensesFixed() {
    return lifestyleExpensesFixed;
  }

  public void setLifestyleExpensesFixed(ICashFlowCategory lifestyleExpensesFixed) {
    this.lifestyleExpensesFixed = lifestyleExpensesFixed;
  }


  public ICashFlowOutflows lockedInContributions(Currency lockedInContributions) {
    this.lockedInContributions = lockedInContributions;
    return this;
  }

  /**
   * Get lockedInContributions
   * @return lockedInContributions
   */
  @javax.annotation.Nullable
  public Currency getLockedInContributions() {
    return lockedInContributions;
  }

  public void setLockedInContributions(Currency lockedInContributions) {
    this.lockedInContributions = lockedInContributions;
  }


  public ICashFlowOutflows medicalExpenses(ICashFlowCategory medicalExpenses) {
    this.medicalExpenses = medicalExpenses;
    return this;
  }

  /**
   * Get medicalExpenses
   * @return medicalExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getMedicalExpenses() {
    return medicalExpenses;
  }

  public void setMedicalExpenses(ICashFlowCategory medicalExpenses) {
    this.medicalExpenses = medicalExpenses;
  }


  public ICashFlowOutflows miscellaneousExpenses(ICashFlowCategory miscellaneousExpenses) {
    this.miscellaneousExpenses = miscellaneousExpenses;
    return this;
  }

  /**
   * Get miscellaneousExpenses
   * @return miscellaneousExpenses
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getMiscellaneousExpenses() {
    return miscellaneousExpenses;
  }

  public void setMiscellaneousExpenses(ICashFlowCategory miscellaneousExpenses) {
    this.miscellaneousExpenses = miscellaneousExpenses;
  }


  public ICashFlowOutflows miscellaneousExpensesDiscretionary(ICashFlowCategory miscellaneousExpensesDiscretionary) {
    this.miscellaneousExpensesDiscretionary = miscellaneousExpensesDiscretionary;
    return this;
  }

  /**
   * Get miscellaneousExpensesDiscretionary
   * @return miscellaneousExpensesDiscretionary
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getMiscellaneousExpensesDiscretionary() {
    return miscellaneousExpensesDiscretionary;
  }

  public void setMiscellaneousExpensesDiscretionary(ICashFlowCategory miscellaneousExpensesDiscretionary) {
    this.miscellaneousExpensesDiscretionary = miscellaneousExpensesDiscretionary;
  }


  public ICashFlowOutflows miscellaneousExpensesFixed(ICashFlowCategory miscellaneousExpensesFixed) {
    this.miscellaneousExpensesFixed = miscellaneousExpensesFixed;
    return this;
  }

  /**
   * Get miscellaneousExpensesFixed
   * @return miscellaneousExpensesFixed
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getMiscellaneousExpensesFixed() {
    return miscellaneousExpensesFixed;
  }

  public void setMiscellaneousExpensesFixed(ICashFlowCategory miscellaneousExpensesFixed) {
    this.miscellaneousExpensesFixed = miscellaneousExpensesFixed;
  }


  public ICashFlowOutflows nonQualifiedContributions(ICashFlowCategory nonQualifiedContributions) {
    this.nonQualifiedContributions = nonQualifiedContributions;
    return this;
  }

  /**
   * Get nonQualifiedContributions
   * @return nonQualifiedContributions
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getNonQualifiedContributions() {
    return nonQualifiedContributions;
  }

  public void setNonQualifiedContributions(ICashFlowCategory nonQualifiedContributions) {
    this.nonQualifiedContributions = nonQualifiedContributions;
  }


  public ICashFlowOutflows nonQualifiedReinvestments(ICashFlowCategory nonQualifiedReinvestments) {
    this.nonQualifiedReinvestments = nonQualifiedReinvestments;
    return this;
  }

  /**
   * Get nonQualifiedReinvestments
   * @return nonQualifiedReinvestments
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getNonQualifiedReinvestments() {
    return nonQualifiedReinvestments;
  }

  public void setNonQualifiedReinvestments(ICashFlowCategory nonQualifiedReinvestments) {
    this.nonQualifiedReinvestments = nonQualifiedReinvestments;
  }


  public ICashFlowOutflows privateCorporationOutflows(ICashFlowCategory privateCorporationOutflows) {
    this.privateCorporationOutflows = privateCorporationOutflows;
    return this;
  }

  /**
   * Get privateCorporationOutflows
   * @return privateCorporationOutflows
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getPrivateCorporationOutflows() {
    return privateCorporationOutflows;
  }

  public void setPrivateCorporationOutflows(ICashFlowCategory privateCorporationOutflows) {
    this.privateCorporationOutflows = privateCorporationOutflows;
  }


  public ICashFlowOutflows qualifiedContributions(ICashFlowCategory qualifiedContributions) {
    this.qualifiedContributions = qualifiedContributions;
    return this;
  }

  /**
   * Get qualifiedContributions
   * @return qualifiedContributions
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getQualifiedContributions() {
    return qualifiedContributions;
  }

  public void setQualifiedContributions(ICashFlowCategory qualifiedContributions) {
    this.qualifiedContributions = qualifiedContributions;
  }


  public ICashFlowOutflows rothContributions(Currency rothContributions) {
    this.rothContributions = rothContributions;
    return this;
  }

  /**
   * Get rothContributions
   * @return rothContributions
   */
  @javax.annotation.Nullable
  public Currency getRothContributions() {
    return rothContributions;
  }

  public void setRothContributions(Currency rothContributions) {
    this.rothContributions = rothContributions;
  }


  public ICashFlowOutflows surplusOutflows(ICashFlowCategory surplusOutflows) {
    this.surplusOutflows = surplusOutflows;
    return this;
  }

  /**
   * Get surplusOutflows
   * @return surplusOutflows
   */
  @javax.annotation.Nullable
  public ICashFlowCategory getSurplusOutflows() {
    return surplusOutflows;
  }

  public void setSurplusOutflows(ICashFlowCategory surplusOutflows) {
    this.surplusOutflows = surplusOutflows;
  }


  public ICashFlowOutflows surplusSavings(Currency surplusSavings) {
    this.surplusSavings = surplusSavings;
    return this;
  }

  /**
   * Get surplusSavings
   * @return surplusSavings
   */
  @javax.annotation.Nullable
  public Currency getSurplusSavings() {
    return surplusSavings;
  }

  public void setSurplusSavings(Currency surplusSavings) {
    this.surplusSavings = surplusSavings;
  }


  public ICashFlowOutflows tfsaContributions(Currency tfsaContributions) {
    this.tfsaContributions = tfsaContributions;
    return this;
  }

  /**
   * Get tfsaContributions
   * @return tfsaContributions
   */
  @javax.annotation.Nullable
  public Currency getTfsaContributions() {
    return tfsaContributions;
  }

  public void setTfsaContributions(Currency tfsaContributions) {
    this.tfsaContributions = tfsaContributions;
  }


  public ICashFlowOutflows totalNeeds(Currency totalNeeds) {
    this.totalNeeds = totalNeeds;
    return this;
  }

  /**
   * Get totalNeeds
   * @return totalNeeds
   */
  @javax.annotation.Nullable
  public Currency getTotalNeeds() {
    return totalNeeds;
  }

  public void setTotalNeeds(Currency totalNeeds) {
    this.totalNeeds = totalNeeds;
  }


  public ICashFlowOutflows totalWithTaxes(Currency totalWithTaxes) {
    this.totalWithTaxes = totalWithTaxes;
    return this;
  }

  /**
   * Get totalWithTaxes
   * @return totalWithTaxes
   */
  @javax.annotation.Nullable
  public Currency getTotalWithTaxes() {
    return totalWithTaxes;
  }

  public void setTotalWithTaxes(Currency totalWithTaxes) {
    this.totalWithTaxes = totalWithTaxes;
  }


  public ICashFlowOutflows totalWithoutTaxes(Currency totalWithoutTaxes) {
    this.totalWithoutTaxes = totalWithoutTaxes;
    return this;
  }

  /**
   * Get totalWithoutTaxes
   * @return totalWithoutTaxes
   */
  @javax.annotation.Nullable
  public Currency getTotalWithoutTaxes() {
    return totalWithoutTaxes;
  }

  public void setTotalWithoutTaxes(Currency totalWithoutTaxes) {
    this.totalWithoutTaxes = totalWithoutTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ICashFlowOutflows icashFlowOutflows = (ICashFlowOutflows) o;
    return Objects.equals(this.contributions, icashFlowOutflows.contributions) &&
        Objects.equals(this.educationExpenses, icashFlowOutflows.educationExpenses) &&
        Objects.equals(this.employerExpenses, icashFlowOutflows.employerExpenses) &&
        Objects.equals(this.employmentBusinessExpenses, icashFlowOutflows.employmentBusinessExpenses) &&
        Objects.equals(this.investmentExpenses, icashFlowOutflows.investmentExpenses) &&
        Objects.equals(this.lifestyleExpenses, icashFlowOutflows.lifestyleExpenses) &&
        Objects.equals(this.lifestyleExpensesDiscretionary, icashFlowOutflows.lifestyleExpensesDiscretionary) &&
        Objects.equals(this.lifestyleExpensesFixed, icashFlowOutflows.lifestyleExpensesFixed) &&
        Objects.equals(this.lockedInContributions, icashFlowOutflows.lockedInContributions) &&
        Objects.equals(this.medicalExpenses, icashFlowOutflows.medicalExpenses) &&
        Objects.equals(this.miscellaneousExpenses, icashFlowOutflows.miscellaneousExpenses) &&
        Objects.equals(this.miscellaneousExpensesDiscretionary, icashFlowOutflows.miscellaneousExpensesDiscretionary) &&
        Objects.equals(this.miscellaneousExpensesFixed, icashFlowOutflows.miscellaneousExpensesFixed) &&
        Objects.equals(this.nonQualifiedContributions, icashFlowOutflows.nonQualifiedContributions) &&
        Objects.equals(this.nonQualifiedReinvestments, icashFlowOutflows.nonQualifiedReinvestments) &&
        Objects.equals(this.privateCorporationOutflows, icashFlowOutflows.privateCorporationOutflows) &&
        Objects.equals(this.qualifiedContributions, icashFlowOutflows.qualifiedContributions) &&
        Objects.equals(this.rothContributions, icashFlowOutflows.rothContributions) &&
        Objects.equals(this.surplusOutflows, icashFlowOutflows.surplusOutflows) &&
        Objects.equals(this.surplusSavings, icashFlowOutflows.surplusSavings) &&
        Objects.equals(this.tfsaContributions, icashFlowOutflows.tfsaContributions) &&
        Objects.equals(this.totalNeeds, icashFlowOutflows.totalNeeds) &&
        Objects.equals(this.totalWithTaxes, icashFlowOutflows.totalWithTaxes) &&
        Objects.equals(this.totalWithoutTaxes, icashFlowOutflows.totalWithoutTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributions, educationExpenses, employerExpenses, employmentBusinessExpenses, investmentExpenses, lifestyleExpenses, lifestyleExpensesDiscretionary, lifestyleExpensesFixed, lockedInContributions, medicalExpenses, miscellaneousExpenses, miscellaneousExpensesDiscretionary, miscellaneousExpensesFixed, nonQualifiedContributions, nonQualifiedReinvestments, privateCorporationOutflows, qualifiedContributions, rothContributions, surplusOutflows, surplusSavings, tfsaContributions, totalNeeds, totalWithTaxes, totalWithoutTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ICashFlowOutflows {\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    educationExpenses: ").append(toIndentedString(educationExpenses)).append("\n");
    sb.append("    employerExpenses: ").append(toIndentedString(employerExpenses)).append("\n");
    sb.append("    employmentBusinessExpenses: ").append(toIndentedString(employmentBusinessExpenses)).append("\n");
    sb.append("    investmentExpenses: ").append(toIndentedString(investmentExpenses)).append("\n");
    sb.append("    lifestyleExpenses: ").append(toIndentedString(lifestyleExpenses)).append("\n");
    sb.append("    lifestyleExpensesDiscretionary: ").append(toIndentedString(lifestyleExpensesDiscretionary)).append("\n");
    sb.append("    lifestyleExpensesFixed: ").append(toIndentedString(lifestyleExpensesFixed)).append("\n");
    sb.append("    lockedInContributions: ").append(toIndentedString(lockedInContributions)).append("\n");
    sb.append("    medicalExpenses: ").append(toIndentedString(medicalExpenses)).append("\n");
    sb.append("    miscellaneousExpenses: ").append(toIndentedString(miscellaneousExpenses)).append("\n");
    sb.append("    miscellaneousExpensesDiscretionary: ").append(toIndentedString(miscellaneousExpensesDiscretionary)).append("\n");
    sb.append("    miscellaneousExpensesFixed: ").append(toIndentedString(miscellaneousExpensesFixed)).append("\n");
    sb.append("    nonQualifiedContributions: ").append(toIndentedString(nonQualifiedContributions)).append("\n");
    sb.append("    nonQualifiedReinvestments: ").append(toIndentedString(nonQualifiedReinvestments)).append("\n");
    sb.append("    privateCorporationOutflows: ").append(toIndentedString(privateCorporationOutflows)).append("\n");
    sb.append("    qualifiedContributions: ").append(toIndentedString(qualifiedContributions)).append("\n");
    sb.append("    rothContributions: ").append(toIndentedString(rothContributions)).append("\n");
    sb.append("    surplusOutflows: ").append(toIndentedString(surplusOutflows)).append("\n");
    sb.append("    surplusSavings: ").append(toIndentedString(surplusSavings)).append("\n");
    sb.append("    tfsaContributions: ").append(toIndentedString(tfsaContributions)).append("\n");
    sb.append("    totalNeeds: ").append(toIndentedString(totalNeeds)).append("\n");
    sb.append("    totalWithTaxes: ").append(toIndentedString(totalWithTaxes)).append("\n");
    sb.append("    totalWithoutTaxes: ").append(toIndentedString(totalWithoutTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contributions");
    openapiFields.add("educationExpenses");
    openapiFields.add("employerExpenses");
    openapiFields.add("employmentBusinessExpenses");
    openapiFields.add("investmentExpenses");
    openapiFields.add("lifestyleExpenses");
    openapiFields.add("lifestyleExpensesDiscretionary");
    openapiFields.add("lifestyleExpensesFixed");
    openapiFields.add("lockedInContributions");
    openapiFields.add("medicalExpenses");
    openapiFields.add("miscellaneousExpenses");
    openapiFields.add("miscellaneousExpensesDiscretionary");
    openapiFields.add("miscellaneousExpensesFixed");
    openapiFields.add("nonQualifiedContributions");
    openapiFields.add("nonQualifiedReinvestments");
    openapiFields.add("privateCorporationOutflows");
    openapiFields.add("qualifiedContributions");
    openapiFields.add("rothContributions");
    openapiFields.add("surplusOutflows");
    openapiFields.add("surplusSavings");
    openapiFields.add("tfsaContributions");
    openapiFields.add("totalNeeds");
    openapiFields.add("totalWithTaxes");
    openapiFields.add("totalWithoutTaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ICashFlowOutflows
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ICashFlowOutflows.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ICashFlowOutflows is not found in the empty JSON string", ICashFlowOutflows.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ICashFlowOutflows.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ICashFlowOutflows` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contributions`
      if (jsonObj.get("contributions") != null && !jsonObj.get("contributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("contributions"));
      }
      // validate the optional field `educationExpenses`
      if (jsonObj.get("educationExpenses") != null && !jsonObj.get("educationExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("educationExpenses"));
      }
      // validate the optional field `employerExpenses`
      if (jsonObj.get("employerExpenses") != null && !jsonObj.get("employerExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("employerExpenses"));
      }
      // validate the optional field `employmentBusinessExpenses`
      if (jsonObj.get("employmentBusinessExpenses") != null && !jsonObj.get("employmentBusinessExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("employmentBusinessExpenses"));
      }
      // validate the optional field `investmentExpenses`
      if (jsonObj.get("investmentExpenses") != null && !jsonObj.get("investmentExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("investmentExpenses"));
      }
      // validate the optional field `lifestyleExpenses`
      if (jsonObj.get("lifestyleExpenses") != null && !jsonObj.get("lifestyleExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("lifestyleExpenses"));
      }
      // validate the optional field `lifestyleExpensesDiscretionary`
      if (jsonObj.get("lifestyleExpensesDiscretionary") != null && !jsonObj.get("lifestyleExpensesDiscretionary").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("lifestyleExpensesDiscretionary"));
      }
      // validate the optional field `lifestyleExpensesFixed`
      if (jsonObj.get("lifestyleExpensesFixed") != null && !jsonObj.get("lifestyleExpensesFixed").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("lifestyleExpensesFixed"));
      }
      // validate the optional field `lockedInContributions`
      if (jsonObj.get("lockedInContributions") != null && !jsonObj.get("lockedInContributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("lockedInContributions"));
      }
      // validate the optional field `medicalExpenses`
      if (jsonObj.get("medicalExpenses") != null && !jsonObj.get("medicalExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("medicalExpenses"));
      }
      // validate the optional field `miscellaneousExpenses`
      if (jsonObj.get("miscellaneousExpenses") != null && !jsonObj.get("miscellaneousExpenses").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("miscellaneousExpenses"));
      }
      // validate the optional field `miscellaneousExpensesDiscretionary`
      if (jsonObj.get("miscellaneousExpensesDiscretionary") != null && !jsonObj.get("miscellaneousExpensesDiscretionary").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("miscellaneousExpensesDiscretionary"));
      }
      // validate the optional field `miscellaneousExpensesFixed`
      if (jsonObj.get("miscellaneousExpensesFixed") != null && !jsonObj.get("miscellaneousExpensesFixed").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("miscellaneousExpensesFixed"));
      }
      // validate the optional field `nonQualifiedContributions`
      if (jsonObj.get("nonQualifiedContributions") != null && !jsonObj.get("nonQualifiedContributions").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("nonQualifiedContributions"));
      }
      // validate the optional field `nonQualifiedReinvestments`
      if (jsonObj.get("nonQualifiedReinvestments") != null && !jsonObj.get("nonQualifiedReinvestments").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("nonQualifiedReinvestments"));
      }
      // validate the optional field `privateCorporationOutflows`
      if (jsonObj.get("privateCorporationOutflows") != null && !jsonObj.get("privateCorporationOutflows").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("privateCorporationOutflows"));
      }
      // validate the optional field `qualifiedContributions`
      if (jsonObj.get("qualifiedContributions") != null && !jsonObj.get("qualifiedContributions").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("qualifiedContributions"));
      }
      // validate the optional field `rothContributions`
      if (jsonObj.get("rothContributions") != null && !jsonObj.get("rothContributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("rothContributions"));
      }
      // validate the optional field `surplusOutflows`
      if (jsonObj.get("surplusOutflows") != null && !jsonObj.get("surplusOutflows").isJsonNull()) {
        ICashFlowCategory.validateJsonElement(jsonObj.get("surplusOutflows"));
      }
      // validate the optional field `surplusSavings`
      if (jsonObj.get("surplusSavings") != null && !jsonObj.get("surplusSavings").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("surplusSavings"));
      }
      // validate the optional field `tfsaContributions`
      if (jsonObj.get("tfsaContributions") != null && !jsonObj.get("tfsaContributions").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("tfsaContributions"));
      }
      // validate the optional field `totalNeeds`
      if (jsonObj.get("totalNeeds") != null && !jsonObj.get("totalNeeds").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("totalNeeds"));
      }
      // validate the optional field `totalWithTaxes`
      if (jsonObj.get("totalWithTaxes") != null && !jsonObj.get("totalWithTaxes").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("totalWithTaxes"));
      }
      // validate the optional field `totalWithoutTaxes`
      if (jsonObj.get("totalWithoutTaxes") != null && !jsonObj.get("totalWithoutTaxes").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("totalWithoutTaxes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ICashFlowOutflows.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ICashFlowOutflows' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ICashFlowOutflows> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ICashFlowOutflows.class));

       return (TypeAdapter<T>) new TypeAdapter<ICashFlowOutflows>() {
           @Override
           public void write(JsonWriter out, ICashFlowOutflows value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ICashFlowOutflows read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ICashFlowOutflows given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ICashFlowOutflows
   * @throws IOException if the JSON string is invalid with respect to ICashFlowOutflows
   */
  public static ICashFlowOutflows fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ICashFlowOutflows.class);
  }

  /**
   * Convert an instance of ICashFlowOutflows to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

