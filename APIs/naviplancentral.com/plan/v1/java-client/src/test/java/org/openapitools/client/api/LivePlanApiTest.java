/*
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel;
import org.openapitools.client.model.AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LivePlanApi
 */
@Disabled
public class LivePlanApiTest {

    private final LivePlanApi api = new LivePlanApi();

    /**
     * Retrieves accounts for a given plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetAccountsByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel response = api.livePlanGetAccountsByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of funding accounts
     *
     * This function retrieves a list of funding accounts for the goals in the plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetGoalFundingListByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel response = api.livePlanGetGoalFundingListByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves all goals from the live plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetGoalsByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel response = api.livePlanGetGoalsByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves liabilities for a given plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetLiabilitiesByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel response = api.livePlanGetLiabilitiesByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves lifestyle assets for a given plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetLifestyleAssetsByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel response = api.livePlanGetLifestyleAssetsByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves needs vs abilities projections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidTest() throws ApiException {
        Integer id = null;
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel response = api.livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(id, planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves net worth projections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetProjectedNetWorthByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel response = api.livePlanGetProjectedNetWorthByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieves real estate accounts for a given plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetRealEstateAssetsByClientidPlanidTest() throws ApiException {
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel response = api.livePlanGetRealEstateAssetsByClientidPlanid(planId, clientId);
        // TODO: test validations
    }

    /**
     * Retrieve WAMO values for a given goal
     *
     * This function retrieves the WAMO values for the specified goal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livePlanGetWhatAreMyOptionsByIdClientidPlanidTest() throws ApiException {
        Integer id = null;
        String planId = null;
        String clientId = null;
        AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel response = api.livePlanGetWhatAreMyOptionsByIdClientidPlanid(id, planId, clientId);
        // TODO: test validations
    }

}
