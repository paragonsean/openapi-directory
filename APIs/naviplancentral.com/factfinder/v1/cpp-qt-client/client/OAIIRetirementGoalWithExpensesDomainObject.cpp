/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRetirementGoalWithExpensesDomainObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRetirementGoalWithExpensesDomainObject::OAIIRetirementGoalWithExpensesDomainObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRetirementGoalWithExpensesDomainObject::OAIIRetirementGoalWithExpensesDomainObject() {
    this->initializeModel();
}

OAIIRetirementGoalWithExpensesDomainObject::~OAIIRetirementGoalWithExpensesDomainObject() {}

void OAIIRetirementGoalWithExpensesDomainObject::initializeModel() {

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_head1_retirement_date_isSet = false;
    m_head1_retirement_date_isValid = false;

    m_head2_retirement_date_isSet = false;
    m_head2_retirement_date_isValid = false;

    m_retirement_expenses_isSet = false;
    m_retirement_expenses_isValid = false;

    m_retirement_goal_id_isSet = false;
    m_retirement_goal_id_isValid = false;
}

void OAIIRetirementGoalWithExpensesDomainObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRetirementGoalWithExpensesDomainObject::fromJsonObject(QJsonObject json) {

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_head1_retirement_date_isValid = ::OpenAPI::fromJsonValue(m_head1_retirement_date, json[QString("head1RetirementDate")]);
    m_head1_retirement_date_isSet = !json[QString("head1RetirementDate")].isNull() && m_head1_retirement_date_isValid;

    m_head2_retirement_date_isValid = ::OpenAPI::fromJsonValue(m_head2_retirement_date, json[QString("head2RetirementDate")]);
    m_head2_retirement_date_isSet = !json[QString("head2RetirementDate")].isNull() && m_head2_retirement_date_isValid;

    m_retirement_expenses_isValid = ::OpenAPI::fromJsonValue(m_retirement_expenses, json[QString("retirementExpenses")]);
    m_retirement_expenses_isSet = !json[QString("retirementExpenses")].isNull() && m_retirement_expenses_isValid;

    m_retirement_goal_id_isValid = ::OpenAPI::fromJsonValue(m_retirement_goal_id, json[QString("retirementGoalId")]);
    m_retirement_goal_id_isSet = !json[QString("retirementGoalId")].isNull() && m_retirement_goal_id_isValid;
}

QString OAIIRetirementGoalWithExpensesDomainObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRetirementGoalWithExpensesDomainObject::asJsonObject() const {
    QJsonObject obj;
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_head1_retirement_date_isSet) {
        obj.insert(QString("head1RetirementDate"), ::OpenAPI::toJsonValue(m_head1_retirement_date));
    }
    if (m_head2_retirement_date_isSet) {
        obj.insert(QString("head2RetirementDate"), ::OpenAPI::toJsonValue(m_head2_retirement_date));
    }
    if (m_retirement_expenses.size() > 0) {
        obj.insert(QString("retirementExpenses"), ::OpenAPI::toJsonValue(m_retirement_expenses));
    }
    if (m_retirement_goal_id_isSet) {
        obj.insert(QString("retirementGoalId"), ::OpenAPI::toJsonValue(m_retirement_goal_id));
    }
    return obj;
}

QString OAIIRetirementGoalWithExpensesDomainObject::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIIRetirementGoalWithExpensesDomainObject::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIIRetirementGoalWithExpensesDomainObject::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIIRetirementGoalWithExpensesDomainObject::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QDateTime OAIIRetirementGoalWithExpensesDomainObject::getHead1RetirementDate() const {
    return m_head1_retirement_date;
}
void OAIIRetirementGoalWithExpensesDomainObject::setHead1RetirementDate(const QDateTime &head1_retirement_date) {
    m_head1_retirement_date = head1_retirement_date;
    m_head1_retirement_date_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_head1_retirement_date_Set() const{
    return m_head1_retirement_date_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_head1_retirement_date_Valid() const{
    return m_head1_retirement_date_isValid;
}

QDateTime OAIIRetirementGoalWithExpensesDomainObject::getHead2RetirementDate() const {
    return m_head2_retirement_date;
}
void OAIIRetirementGoalWithExpensesDomainObject::setHead2RetirementDate(const QDateTime &head2_retirement_date) {
    m_head2_retirement_date = head2_retirement_date;
    m_head2_retirement_date_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_head2_retirement_date_Set() const{
    return m_head2_retirement_date_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_head2_retirement_date_Valid() const{
    return m_head2_retirement_date_isValid;
}

QList<OAIIRetirementExpenseDomainObject> OAIIRetirementGoalWithExpensesDomainObject::getRetirementExpenses() const {
    return m_retirement_expenses;
}
void OAIIRetirementGoalWithExpensesDomainObject::setRetirementExpenses(const QList<OAIIRetirementExpenseDomainObject> &retirement_expenses) {
    m_retirement_expenses = retirement_expenses;
    m_retirement_expenses_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_retirement_expenses_Set() const{
    return m_retirement_expenses_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_retirement_expenses_Valid() const{
    return m_retirement_expenses_isValid;
}

qint32 OAIIRetirementGoalWithExpensesDomainObject::getRetirementGoalId() const {
    return m_retirement_goal_id;
}
void OAIIRetirementGoalWithExpensesDomainObject::setRetirementGoalId(const qint32 &retirement_goal_id) {
    m_retirement_goal_id = retirement_goal_id;
    m_retirement_goal_id_isSet = true;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_retirement_goal_id_Set() const{
    return m_retirement_goal_id_isSet;
}

bool OAIIRetirementGoalWithExpensesDomainObject::is_retirement_goal_id_Valid() const{
    return m_retirement_goal_id_isValid;
}

bool OAIIRetirementGoalWithExpensesDomainObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head1_retirement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head2_retirement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_expenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_goal_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRetirementGoalWithExpensesDomainObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
