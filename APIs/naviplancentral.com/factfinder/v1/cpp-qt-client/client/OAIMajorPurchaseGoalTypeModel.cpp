/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMajorPurchaseGoalTypeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMajorPurchaseGoalTypeModel::OAIMajorPurchaseGoalTypeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMajorPurchaseGoalTypeModel::OAIMajorPurchaseGoalTypeModel() {
    this->initializeModel();
}

OAIMajorPurchaseGoalTypeModel::~OAIMajorPurchaseGoalTypeModel() {}

void OAIMajorPurchaseGoalTypeModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_major_purchase_goal_type_id_isSet = false;
    m_major_purchase_goal_type_id_isValid = false;
}

void OAIMajorPurchaseGoalTypeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMajorPurchaseGoalTypeModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_major_purchase_goal_type_id_isValid = ::OpenAPI::fromJsonValue(m_major_purchase_goal_type_id, json[QString("majorPurchaseGoalTypeId")]);
    m_major_purchase_goal_type_id_isSet = !json[QString("majorPurchaseGoalTypeId")].isNull() && m_major_purchase_goal_type_id_isValid;
}

QString OAIMajorPurchaseGoalTypeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMajorPurchaseGoalTypeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_major_purchase_goal_type_id_isSet) {
        obj.insert(QString("majorPurchaseGoalTypeId"), ::OpenAPI::toJsonValue(m_major_purchase_goal_type_id));
    }
    return obj;
}

QString OAIMajorPurchaseGoalTypeModel::getDescription() const {
    return m_description;
}
void OAIMajorPurchaseGoalTypeModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMajorPurchaseGoalTypeModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMajorPurchaseGoalTypeModel::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIObjectLink> OAIMajorPurchaseGoalTypeModel::getLinks() const {
    return m_links;
}
void OAIMajorPurchaseGoalTypeModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMajorPurchaseGoalTypeModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMajorPurchaseGoalTypeModel::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIMajorPurchaseGoalTypeModel::getMajorPurchaseGoalTypeId() const {
    return m_major_purchase_goal_type_id;
}
void OAIMajorPurchaseGoalTypeModel::setMajorPurchaseGoalTypeId(const qint32 &major_purchase_goal_type_id) {
    m_major_purchase_goal_type_id = major_purchase_goal_type_id;
    m_major_purchase_goal_type_id_isSet = true;
}

bool OAIMajorPurchaseGoalTypeModel::is_major_purchase_goal_type_id_Set() const{
    return m_major_purchase_goal_type_id_isSet;
}

bool OAIMajorPurchaseGoalTypeModel::is_major_purchase_goal_type_id_Valid() const{
    return m_major_purchase_goal_type_id_isValid;
}

bool OAIMajorPurchaseGoalTypeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_purchase_goal_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMajorPurchaseGoalTypeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
