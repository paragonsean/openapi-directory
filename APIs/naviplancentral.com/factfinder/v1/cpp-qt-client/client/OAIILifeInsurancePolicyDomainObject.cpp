/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILifeInsurancePolicyDomainObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILifeInsurancePolicyDomainObject::OAIILifeInsurancePolicyDomainObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILifeInsurancePolicyDomainObject::OAIILifeInsurancePolicyDomainObject() {
    this->initializeModel();
}

OAIILifeInsurancePolicyDomainObject::~OAIILifeInsurancePolicyDomainObject() {}

void OAIILifeInsurancePolicyDomainObject::initializeModel() {

    m_beneficiary_isSet = false;
    m_beneficiary_isValid = false;

    m_beneficiary_dependent_id_isSet = false;
    m_beneficiary_dependent_id_isValid = false;

    m_benefit_isSet = false;
    m_benefit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_general_account_market_value_isSet = false;
    m_general_account_market_value_isValid = false;

    m_insured_isSet = false;
    m_insured_isValid = false;

    m_life_insurance_policy_id_isSet = false;
    m_life_insurance_policy_id_isValid = false;

    m_payer_isSet = false;
    m_payer_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_premium_isSet = false;
    m_premium_isValid = false;

    m_subaccounts_isSet = false;
    m_subaccounts_isValid = false;
}

void OAIILifeInsurancePolicyDomainObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILifeInsurancePolicyDomainObject::fromJsonObject(QJsonObject json) {

    m_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_beneficiary, json[QString("beneficiary")]);
    m_beneficiary_isSet = !json[QString("beneficiary")].isNull() && m_beneficiary_isValid;

    m_beneficiary_dependent_id_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_dependent_id, json[QString("beneficiaryDependentId")]);
    m_beneficiary_dependent_id_isSet = !json[QString("beneficiaryDependentId")].isNull() && m_beneficiary_dependent_id_isValid;

    m_benefit_isValid = ::OpenAPI::fromJsonValue(m_benefit, json[QString("benefit")]);
    m_benefit_isSet = !json[QString("benefit")].isNull() && m_benefit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_general_account_market_value_isValid = ::OpenAPI::fromJsonValue(m_general_account_market_value, json[QString("generalAccountMarketValue")]);
    m_general_account_market_value_isSet = !json[QString("generalAccountMarketValue")].isNull() && m_general_account_market_value_isValid;

    m_insured_isValid = ::OpenAPI::fromJsonValue(m_insured, json[QString("insured")]);
    m_insured_isSet = !json[QString("insured")].isNull() && m_insured_isValid;

    m_life_insurance_policy_id_isValid = ::OpenAPI::fromJsonValue(m_life_insurance_policy_id, json[QString("lifeInsurancePolicyId")]);
    m_life_insurance_policy_id_isSet = !json[QString("lifeInsurancePolicyId")].isNull() && m_life_insurance_policy_id_isValid;

    m_payer_isValid = ::OpenAPI::fromJsonValue(m_payer, json[QString("payer")]);
    m_payer_isSet = !json[QString("payer")].isNull() && m_payer_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;

    m_premium_isValid = ::OpenAPI::fromJsonValue(m_premium, json[QString("premium")]);
    m_premium_isSet = !json[QString("premium")].isNull() && m_premium_isValid;

    m_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_subaccounts, json[QString("subaccounts")]);
    m_subaccounts_isSet = !json[QString("subaccounts")].isNull() && m_subaccounts_isValid;
}

QString OAIILifeInsurancePolicyDomainObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILifeInsurancePolicyDomainObject::asJsonObject() const {
    QJsonObject obj;
    if (m_beneficiary_isSet) {
        obj.insert(QString("beneficiary"), ::OpenAPI::toJsonValue(m_beneficiary));
    }
    if (m_beneficiary_dependent_id_isSet) {
        obj.insert(QString("beneficiaryDependentId"), ::OpenAPI::toJsonValue(m_beneficiary_dependent_id));
    }
    if (m_benefit_isSet) {
        obj.insert(QString("benefit"), ::OpenAPI::toJsonValue(m_benefit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_general_account_market_value_isSet) {
        obj.insert(QString("generalAccountMarketValue"), ::OpenAPI::toJsonValue(m_general_account_market_value));
    }
    if (m_insured_isSet) {
        obj.insert(QString("insured"), ::OpenAPI::toJsonValue(m_insured));
    }
    if (m_life_insurance_policy_id_isSet) {
        obj.insert(QString("lifeInsurancePolicyId"), ::OpenAPI::toJsonValue(m_life_insurance_policy_id));
    }
    if (m_payer_isSet) {
        obj.insert(QString("payer"), ::OpenAPI::toJsonValue(m_payer));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_premium_isSet) {
        obj.insert(QString("premium"), ::OpenAPI::toJsonValue(m_premium));
    }
    if (m_subaccounts.size() > 0) {
        obj.insert(QString("subaccounts"), ::OpenAPI::toJsonValue(m_subaccounts));
    }
    return obj;
}

QString OAIILifeInsurancePolicyDomainObject::getBeneficiary() const {
    return m_beneficiary;
}
void OAIILifeInsurancePolicyDomainObject::setBeneficiary(const QString &beneficiary) {
    m_beneficiary = beneficiary;
    m_beneficiary_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_beneficiary_Set() const{
    return m_beneficiary_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_beneficiary_Valid() const{
    return m_beneficiary_isValid;
}

qint32 OAIILifeInsurancePolicyDomainObject::getBeneficiaryDependentId() const {
    return m_beneficiary_dependent_id;
}
void OAIILifeInsurancePolicyDomainObject::setBeneficiaryDependentId(const qint32 &beneficiary_dependent_id) {
    m_beneficiary_dependent_id = beneficiary_dependent_id;
    m_beneficiary_dependent_id_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_beneficiary_dependent_id_Set() const{
    return m_beneficiary_dependent_id_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_beneficiary_dependent_id_Valid() const{
    return m_beneficiary_dependent_id_isValid;
}

double OAIILifeInsurancePolicyDomainObject::getBenefit() const {
    return m_benefit;
}
void OAIILifeInsurancePolicyDomainObject::setBenefit(const double &benefit) {
    m_benefit = benefit;
    m_benefit_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_benefit_Set() const{
    return m_benefit_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_benefit_Valid() const{
    return m_benefit_isValid;
}

QString OAIILifeInsurancePolicyDomainObject::getDescription() const {
    return m_description;
}
void OAIILifeInsurancePolicyDomainObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIILifeInsurancePolicyDomainObject::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIILifeInsurancePolicyDomainObject::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIILifeInsurancePolicyDomainObject::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIILifeInsurancePolicyDomainObject::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAIILifeInsurancePolicyDomainObject::getFrequency() const {
    return m_frequency;
}
void OAIILifeInsurancePolicyDomainObject::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_frequency_Valid() const{
    return m_frequency_isValid;
}

double OAIILifeInsurancePolicyDomainObject::getGeneralAccountMarketValue() const {
    return m_general_account_market_value;
}
void OAIILifeInsurancePolicyDomainObject::setGeneralAccountMarketValue(const double &general_account_market_value) {
    m_general_account_market_value = general_account_market_value;
    m_general_account_market_value_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_general_account_market_value_Set() const{
    return m_general_account_market_value_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_general_account_market_value_Valid() const{
    return m_general_account_market_value_isValid;
}

QString OAIILifeInsurancePolicyDomainObject::getInsured() const {
    return m_insured;
}
void OAIILifeInsurancePolicyDomainObject::setInsured(const QString &insured) {
    m_insured = insured;
    m_insured_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_insured_Set() const{
    return m_insured_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_insured_Valid() const{
    return m_insured_isValid;
}

qint32 OAIILifeInsurancePolicyDomainObject::getLifeInsurancePolicyId() const {
    return m_life_insurance_policy_id;
}
void OAIILifeInsurancePolicyDomainObject::setLifeInsurancePolicyId(const qint32 &life_insurance_policy_id) {
    m_life_insurance_policy_id = life_insurance_policy_id;
    m_life_insurance_policy_id_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_life_insurance_policy_id_Set() const{
    return m_life_insurance_policy_id_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_life_insurance_policy_id_Valid() const{
    return m_life_insurance_policy_id_isValid;
}

QString OAIILifeInsurancePolicyDomainObject::getPayer() const {
    return m_payer;
}
void OAIILifeInsurancePolicyDomainObject::setPayer(const QString &payer) {
    m_payer = payer;
    m_payer_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_payer_Set() const{
    return m_payer_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_payer_Valid() const{
    return m_payer_isValid;
}

qint32 OAIILifeInsurancePolicyDomainObject::getPolicyType() const {
    return m_policy_type;
}
void OAIILifeInsurancePolicyDomainObject::setPolicyType(const qint32 &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

double OAIILifeInsurancePolicyDomainObject::getPremium() const {
    return m_premium;
}
void OAIILifeInsurancePolicyDomainObject::setPremium(const double &premium) {
    m_premium = premium;
    m_premium_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_premium_Set() const{
    return m_premium_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_premium_Valid() const{
    return m_premium_isValid;
}

QList<OAILifeInsurancePolicySubaccountDomainObject> OAIILifeInsurancePolicyDomainObject::getSubaccounts() const {
    return m_subaccounts;
}
void OAIILifeInsurancePolicyDomainObject::setSubaccounts(const QList<OAILifeInsurancePolicySubaccountDomainObject> &subaccounts) {
    m_subaccounts = subaccounts;
    m_subaccounts_isSet = true;
}

bool OAIILifeInsurancePolicyDomainObject::is_subaccounts_Set() const{
    return m_subaccounts_isSet;
}

bool OAIILifeInsurancePolicyDomainObject::is_subaccounts_Valid() const{
    return m_subaccounts_isValid;
}

bool OAIILifeInsurancePolicyDomainObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_dependent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_account_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_insurance_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILifeInsurancePolicyDomainObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
