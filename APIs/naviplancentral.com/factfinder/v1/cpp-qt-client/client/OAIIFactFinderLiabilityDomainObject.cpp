/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIFactFinderLiabilityDomainObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIFactFinderLiabilityDomainObject::OAIIFactFinderLiabilityDomainObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIFactFinderLiabilityDomainObject::OAIIFactFinderLiabilityDomainObject() {
    this->initializeModel();
}

OAIIFactFinderLiabilityDomainObject::~OAIIFactFinderLiabilityDomainObject() {}

void OAIIFactFinderLiabilityDomainObject::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_as_of_date_isSet = false;
    m_balance_as_of_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_external_source_id_isSet = false;
    m_external_source_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_import_source_isSet = false;
    m_import_source_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_liability_id_isSet = false;
    m_liability_id_isValid = false;

    m_liability_type_isSet = false;
    m_liability_type_isValid = false;

    m_loan_date_isSet = false;
    m_loan_date_isValid = false;

    m_original_principal_isSet = false;
    m_original_principal_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;
}

void OAIIFactFinderLiabilityDomainObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIFactFinderLiabilityDomainObject::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_as_of_date_isValid = ::OpenAPI::fromJsonValue(m_balance_as_of_date, json[QString("balanceAsOfDate")]);
    m_balance_as_of_date_isSet = !json[QString("balanceAsOfDate")].isNull() && m_balance_as_of_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_external_source_id_isValid = ::OpenAPI::fromJsonValue(m_external_source_id, json[QString("externalSourceId")]);
    m_external_source_id_isSet = !json[QString("externalSourceId")].isNull() && m_external_source_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_import_source_isValid = ::OpenAPI::fromJsonValue(m_import_source, json[QString("importSource")]);
    m_import_source_isSet = !json[QString("importSource")].isNull() && m_import_source_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_liability_id_isValid = ::OpenAPI::fromJsonValue(m_liability_id, json[QString("liabilityId")]);
    m_liability_id_isSet = !json[QString("liabilityId")].isNull() && m_liability_id_isValid;

    m_liability_type_isValid = ::OpenAPI::fromJsonValue(m_liability_type, json[QString("liabilityType")]);
    m_liability_type_isSet = !json[QString("liabilityType")].isNull() && m_liability_type_isValid;

    m_loan_date_isValid = ::OpenAPI::fromJsonValue(m_loan_date, json[QString("loanDate")]);
    m_loan_date_isSet = !json[QString("loanDate")].isNull() && m_loan_date_isValid;

    m_original_principal_isValid = ::OpenAPI::fromJsonValue(m_original_principal, json[QString("originalPrincipal")]);
    m_original_principal_isSet = !json[QString("originalPrincipal")].isNull() && m_original_principal_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIFactFinderLiabilityDomainObject::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_as_of_date_isSet) {
        obj.insert(QString("balanceAsOfDate"), ::OpenAPI::toJsonValue(m_balance_as_of_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_external_source_id_isSet) {
        obj.insert(QString("externalSourceId"), ::OpenAPI::toJsonValue(m_external_source_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_import_source_isSet) {
        obj.insert(QString("importSource"), ::OpenAPI::toJsonValue(m_import_source));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_liability_id_isSet) {
        obj.insert(QString("liabilityId"), ::OpenAPI::toJsonValue(m_liability_id));
    }
    if (m_liability_type_isSet) {
        obj.insert(QString("liabilityType"), ::OpenAPI::toJsonValue(m_liability_type));
    }
    if (m_loan_date_isSet) {
        obj.insert(QString("loanDate"), ::OpenAPI::toJsonValue(m_loan_date));
    }
    if (m_original_principal_isSet) {
        obj.insert(QString("originalPrincipal"), ::OpenAPI::toJsonValue(m_original_principal));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_isSet) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    return obj;
}

double OAIIFactFinderLiabilityDomainObject::getBalance() const {
    return m_balance;
}
void OAIIFactFinderLiabilityDomainObject::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_balance_Valid() const{
    return m_balance_isValid;
}

QDateTime OAIIFactFinderLiabilityDomainObject::getBalanceAsOfDate() const {
    return m_balance_as_of_date;
}
void OAIIFactFinderLiabilityDomainObject::setBalanceAsOfDate(const QDateTime &balance_as_of_date) {
    m_balance_as_of_date = balance_as_of_date;
    m_balance_as_of_date_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_balance_as_of_date_Set() const{
    return m_balance_as_of_date_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_balance_as_of_date_Valid() const{
    return m_balance_as_of_date_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getDescription() const {
    return m_description;
}
void OAIIFactFinderLiabilityDomainObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIIFactFinderLiabilityDomainObject::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getExternalSourceId() const {
    return m_external_source_id;
}
void OAIIFactFinderLiabilityDomainObject::setExternalSourceId(const QString &external_source_id) {
    m_external_source_id = external_source_id;
    m_external_source_id_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_external_source_id_Set() const{
    return m_external_source_id_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_external_source_id_Valid() const{
    return m_external_source_id_isValid;
}

qint32 OAIIFactFinderLiabilityDomainObject::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIIFactFinderLiabilityDomainObject::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAIIFactFinderLiabilityDomainObject::getFrequency() const {
    return m_frequency;
}
void OAIIFactFinderLiabilityDomainObject::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getImportSource() const {
    return m_import_source;
}
void OAIIFactFinderLiabilityDomainObject::setImportSource(const QString &import_source) {
    m_import_source = import_source;
    m_import_source_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_import_source_Set() const{
    return m_import_source_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_import_source_Valid() const{
    return m_import_source_isValid;
}

double OAIIFactFinderLiabilityDomainObject::getInterestRate() const {
    return m_interest_rate;
}
void OAIIFactFinderLiabilityDomainObject::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

QDateTime OAIIFactFinderLiabilityDomainObject::getLastUpdated() const {
    return m_last_updated;
}
void OAIIFactFinderLiabilityDomainObject::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIIFactFinderLiabilityDomainObject::getLiabilityId() const {
    return m_liability_id;
}
void OAIIFactFinderLiabilityDomainObject::setLiabilityId(const qint32 &liability_id) {
    m_liability_id = liability_id;
    m_liability_id_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_liability_id_Set() const{
    return m_liability_id_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_liability_id_Valid() const{
    return m_liability_id_isValid;
}

qint32 OAIIFactFinderLiabilityDomainObject::getLiabilityType() const {
    return m_liability_type;
}
void OAIIFactFinderLiabilityDomainObject::setLiabilityType(const qint32 &liability_type) {
    m_liability_type = liability_type;
    m_liability_type_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_liability_type_Set() const{
    return m_liability_type_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_liability_type_Valid() const{
    return m_liability_type_isValid;
}

QDateTime OAIIFactFinderLiabilityDomainObject::getLoanDate() const {
    return m_loan_date;
}
void OAIIFactFinderLiabilityDomainObject::setLoanDate(const QDateTime &loan_date) {
    m_loan_date = loan_date;
    m_loan_date_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_loan_date_Set() const{
    return m_loan_date_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_loan_date_Valid() const{
    return m_loan_date_isValid;
}

double OAIIFactFinderLiabilityDomainObject::getOriginalPrincipal() const {
    return m_original_principal;
}
void OAIIFactFinderLiabilityDomainObject::setOriginalPrincipal(const double &original_principal) {
    m_original_principal = original_principal;
    m_original_principal_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_original_principal_Set() const{
    return m_original_principal_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_original_principal_Valid() const{
    return m_original_principal_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getOwner() const {
    return m_owner;
}
void OAIIFactFinderLiabilityDomainObject::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_owner_Valid() const{
    return m_owner_isValid;
}

double OAIIFactFinderLiabilityDomainObject::getPayment() const {
    return m_payment;
}
void OAIIFactFinderLiabilityDomainObject::setPayment(const double &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_payment_Valid() const{
    return m_payment_isValid;
}

QString OAIIFactFinderLiabilityDomainObject::getPaymentType() const {
    return m_payment_type;
}
void OAIIFactFinderLiabilityDomainObject::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIIFactFinderLiabilityDomainObject::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIIFactFinderLiabilityDomainObject::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

bool OAIIFactFinderLiabilityDomainObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_as_of_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIFactFinderLiabilityDomainObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
