/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHoldingWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHoldingWithIdModel::OAIAccountHoldingWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHoldingWithIdModel::OAIAccountHoldingWithIdModel() {
    this->initializeModel();
}

OAIAccountHoldingWithIdModel::~OAIAccountHoldingWithIdModel() {}

void OAIAccountHoldingWithIdModel::initializeModel() {

    m_account_holding_id_isSet = false;
    m_account_holding_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_cusip_isSet = false;
    m_cusip_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;
}

void OAIAccountHoldingWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHoldingWithIdModel::fromJsonObject(QJsonObject json) {

    m_account_holding_id_isValid = ::OpenAPI::fromJsonValue(m_account_holding_id, json[QString("accountHoldingId")]);
    m_account_holding_id_isSet = !json[QString("accountHoldingId")].isNull() && m_account_holding_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("costBasis")]);
    m_cost_basis_isSet = !json[QString("costBasis")].isNull() && m_cost_basis_isValid;

    m_cusip_isValid = ::OpenAPI::fromJsonValue(m_cusip, json[QString("cusip")]);
    m_cusip_isSet = !json[QString("cusip")].isNull() && m_cusip_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("valuationDate")]);
    m_valuation_date_isSet = !json[QString("valuationDate")].isNull() && m_valuation_date_isValid;
}

QString OAIAccountHoldingWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHoldingWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holding_id_isSet) {
        obj.insert(QString("accountHoldingId"), ::OpenAPI::toJsonValue(m_account_holding_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_cost_basis_isSet) {
        obj.insert(QString("costBasis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_cusip_isSet) {
        obj.insert(QString("cusip"), ::OpenAPI::toJsonValue(m_cusip));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_market_value_isSet) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_valuation_date_isSet) {
        obj.insert(QString("valuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    return obj;
}

qint32 OAIAccountHoldingWithIdModel::getAccountHoldingId() const {
    return m_account_holding_id;
}
void OAIAccountHoldingWithIdModel::setAccountHoldingId(const qint32 &account_holding_id) {
    m_account_holding_id = account_holding_id;
    m_account_holding_id_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_account_holding_id_Set() const{
    return m_account_holding_id_isSet;
}

bool OAIAccountHoldingWithIdModel::is_account_holding_id_Valid() const{
    return m_account_holding_id_isValid;
}

qint32 OAIAccountHoldingWithIdModel::getAccountId() const {
    return m_account_id;
}
void OAIAccountHoldingWithIdModel::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountHoldingWithIdModel::is_account_id_Valid() const{
    return m_account_id_isValid;
}

double OAIAccountHoldingWithIdModel::getCostBasis() const {
    return m_cost_basis;
}
void OAIAccountHoldingWithIdModel::setCostBasis(const double &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIAccountHoldingWithIdModel::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

QString OAIAccountHoldingWithIdModel::getCusip() const {
    return m_cusip;
}
void OAIAccountHoldingWithIdModel::setCusip(const QString &cusip) {
    m_cusip = cusip;
    m_cusip_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_cusip_Set() const{
    return m_cusip_isSet;
}

bool OAIAccountHoldingWithIdModel::is_cusip_Valid() const{
    return m_cusip_isValid;
}

QString OAIAccountHoldingWithIdModel::getDescription() const {
    return m_description;
}
void OAIAccountHoldingWithIdModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountHoldingWithIdModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountHoldingWithIdModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIAccountHoldingWithIdModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIAccountHoldingWithIdModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

QList<OAIObjectLink> OAIAccountHoldingWithIdModel::getLinks() const {
    return m_links;
}
void OAIAccountHoldingWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAccountHoldingWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

double OAIAccountHoldingWithIdModel::getMarketValue() const {
    return m_market_value;
}
void OAIAccountHoldingWithIdModel::setMarketValue(const double &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIAccountHoldingWithIdModel::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIAccountHoldingWithIdModel::getSymbol() const {
    return m_symbol;
}
void OAIAccountHoldingWithIdModel::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIAccountHoldingWithIdModel::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QDateTime OAIAccountHoldingWithIdModel::getValuationDate() const {
    return m_valuation_date;
}
void OAIAccountHoldingWithIdModel::setValuationDate(const QDateTime &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIAccountHoldingWithIdModel::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIAccountHoldingWithIdModel::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

bool OAIAccountHoldingWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHoldingWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
