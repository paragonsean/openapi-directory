/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncomeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncomeModel::OAIIncomeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncomeModel::OAIIncomeModel() {
    this->initializeModel();
}

OAIIncomeModel::~OAIIncomeModel() {}

void OAIIncomeModel::initializeModel() {

    m_annual_amount_isSet = false;
    m_annual_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_income_type_id_isSet = false;
    m_income_type_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIncomeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncomeModel::fromJsonObject(QJsonObject json) {

    m_annual_amount_isValid = ::OpenAPI::fromJsonValue(m_annual_amount, json[QString("annualAmount")]);
    m_annual_amount_isSet = !json[QString("annualAmount")].isNull() && m_annual_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_income_type_id_isValid = ::OpenAPI::fromJsonValue(m_income_type_id, json[QString("incomeTypeId")]);
    m_income_type_id_isSet = !json[QString("incomeTypeId")].isNull() && m_income_type_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIncomeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncomeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_amount_isSet) {
        obj.insert(QString("annualAmount"), ::OpenAPI::toJsonValue(m_annual_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_income_type_id_isSet) {
        obj.insert(QString("incomeTypeId"), ::OpenAPI::toJsonValue(m_income_type_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

double OAIIncomeModel::getAnnualAmount() const {
    return m_annual_amount;
}
void OAIIncomeModel::setAnnualAmount(const double &annual_amount) {
    m_annual_amount = annual_amount;
    m_annual_amount_isSet = true;
}

bool OAIIncomeModel::is_annual_amount_Set() const{
    return m_annual_amount_isSet;
}

bool OAIIncomeModel::is_annual_amount_Valid() const{
    return m_annual_amount_isValid;
}

QString OAIIncomeModel::getDescription() const {
    return m_description;
}
void OAIIncomeModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIncomeModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIncomeModel::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIIncomeModel::getEndDate() const {
    return m_end_date;
}
void OAIIncomeModel::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIIncomeModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIIncomeModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIIncomeModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIIncomeModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIIncomeModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIIncomeModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIIncomeModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIIncomeModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIIncomeModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIIncomeModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAIIncomeModel::getIncomeTypeId() const {
    return m_income_type_id;
}
void OAIIncomeModel::setIncomeTypeId(const qint32 &income_type_id) {
    m_income_type_id = income_type_id;
    m_income_type_id_isSet = true;
}

bool OAIIncomeModel::is_income_type_id_Set() const{
    return m_income_type_id_isSet;
}

bool OAIIncomeModel::is_income_type_id_Valid() const{
    return m_income_type_id_isValid;
}

QString OAIIncomeModel::getOwner() const {
    return m_owner;
}
void OAIIncomeModel::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIncomeModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIncomeModel::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIIncomeModel::getStartDate() const {
    return m_start_date;
}
void OAIIncomeModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIncomeModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIncomeModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIncomeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncomeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_fact_finder_id_isValid && true;
}

} // namespace OpenAPI
