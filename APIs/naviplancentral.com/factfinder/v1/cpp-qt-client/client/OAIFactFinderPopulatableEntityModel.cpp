/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactFinderPopulatableEntityModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactFinderPopulatableEntityModel::OAIFactFinderPopulatableEntityModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactFinderPopulatableEntityModel::OAIFactFinderPopulatableEntityModel() {
    this->initializeModel();
}

OAIFactFinderPopulatableEntityModel::~OAIFactFinderPopulatableEntityModel() {}

void OAIFactFinderPopulatableEntityModel::initializeModel() {

    m_household_id_isSet = false;
    m_household_id_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_level_isSet = false;
    m_plan_level_isValid = false;
}

void OAIFactFinderPopulatableEntityModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactFinderPopulatableEntityModel::fromJsonObject(QJsonObject json) {

    m_household_id_isValid = ::OpenAPI::fromJsonValue(m_household_id, json[QString("householdId")]);
    m_household_id_isSet = !json[QString("householdId")].isNull() && m_household_id_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_plan_level_isValid = ::OpenAPI::fromJsonValue(m_plan_level, json[QString("planLevel")]);
    m_plan_level_isSet = !json[QString("planLevel")].isNull() && m_plan_level_isValid;
}

QString OAIFactFinderPopulatableEntityModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactFinderPopulatableEntityModel::asJsonObject() const {
    QJsonObject obj;
    if (m_household_id_isSet) {
        obj.insert(QString("householdId"), ::OpenAPI::toJsonValue(m_household_id));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_level_isSet) {
        obj.insert(QString("planLevel"), ::OpenAPI::toJsonValue(m_plan_level));
    }
    return obj;
}

qint32 OAIFactFinderPopulatableEntityModel::getHouseholdId() const {
    return m_household_id;
}
void OAIFactFinderPopulatableEntityModel::setHouseholdId(const qint32 &household_id) {
    m_household_id = household_id;
    m_household_id_isSet = true;
}

bool OAIFactFinderPopulatableEntityModel::is_household_id_Set() const{
    return m_household_id_isSet;
}

bool OAIFactFinderPopulatableEntityModel::is_household_id_Valid() const{
    return m_household_id_isValid;
}

QList<QString> OAIFactFinderPopulatableEntityModel::getModules() const {
    return m_modules;
}
void OAIFactFinderPopulatableEntityModel::setModules(const QList<QString> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAIFactFinderPopulatableEntityModel::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAIFactFinderPopulatableEntityModel::is_modules_Valid() const{
    return m_modules_isValid;
}

qint32 OAIFactFinderPopulatableEntityModel::getPlanId() const {
    return m_plan_id;
}
void OAIFactFinderPopulatableEntityModel::setPlanId(const qint32 &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIFactFinderPopulatableEntityModel::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIFactFinderPopulatableEntityModel::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIFactFinderPopulatableEntityModel::getPlanLevel() const {
    return m_plan_level;
}
void OAIFactFinderPopulatableEntityModel::setPlanLevel(const QString &plan_level) {
    m_plan_level = plan_level;
    m_plan_level_isSet = true;
}

bool OAIFactFinderPopulatableEntityModel::is_plan_level_Set() const{
    return m_plan_level_isSet;
}

bool OAIFactFinderPopulatableEntityModel::is_plan_level_Valid() const{
    return m_plan_level_isValid;
}

bool OAIFactFinderPopulatableEntityModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_household_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactFinderPopulatableEntityModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_household_id_isValid && true;
}

} // namespace OpenAPI
