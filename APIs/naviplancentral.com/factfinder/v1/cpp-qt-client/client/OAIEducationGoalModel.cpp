/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEducationGoalModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEducationGoalModel::OAIEducationGoalModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEducationGoalModel::OAIEducationGoalModel() {
    this->initializeModel();
}

OAIEducationGoalModel::~OAIEducationGoalModel() {}

void OAIEducationGoalModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_projected_cost_isSet = false;
    m_projected_cost_isValid = false;
}

void OAIEducationGoalModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEducationGoalModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_projected_cost_isValid = ::OpenAPI::fromJsonValue(m_projected_cost, json[QString("projectedCost")]);
    m_projected_cost_isSet = !json[QString("projectedCost")].isNull() && m_projected_cost_isValid;
}

QString OAIEducationGoalModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEducationGoalModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_projected_cost_isSet) {
        obj.insert(QString("projectedCost"), ::OpenAPI::toJsonValue(m_projected_cost));
    }
    return obj;
}

QString OAIEducationGoalModel::getDescription() const {
    return m_description;
}
void OAIEducationGoalModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEducationGoalModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEducationGoalModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEducationGoalModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIEducationGoalModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIEducationGoalModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIEducationGoalModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIEducationGoalModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIEducationGoalModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIEducationGoalModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIEducationGoalModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

double OAIEducationGoalModel::getProjectedCost() const {
    return m_projected_cost;
}
void OAIEducationGoalModel::setProjectedCost(const double &projected_cost) {
    m_projected_cost = projected_cost;
    m_projected_cost_isSet = true;
}

bool OAIEducationGoalModel::is_projected_cost_Set() const{
    return m_projected_cost_isSet;
}

bool OAIEducationGoalModel::is_projected_cost_Valid() const{
    return m_projected_cost_isValid;
}

bool OAIEducationGoalModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEducationGoalModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_fact_finder_id_isValid && true;
}

} // namespace OpenAPI
