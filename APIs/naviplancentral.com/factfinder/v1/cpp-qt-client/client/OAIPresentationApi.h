/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPresentationApi_H
#define OAI_OAIPresentationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountsWithSubEntitiesModel.h"
#include "OAIDefinedBenefitPensionsModel.h"
#include "OAIIncomesModel.h"
#include "OAILiabilitiesModel.h"
#include "OAILifeInsurancePoliciesWithSubEntitiesModel.h"
#include "OAIOwnersModel.h"
#include "OAIRelationshipTypesModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPresentationApi : public QObject {
    Q_OBJECT

public:
    OAIPresentationApi(const int timeOut = 0);
    ~OAIPresentationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    * @param[in]  external_source_id QString [optional]
    */
    virtual void presentationGetAccountsByFactfinderidExternalsourceid(const qint32 &fact_finder_id, const ::OpenAPI::OptionalParam<QString> &external_source_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void presentationGetDemographicOwnersByFactfinderid(const qint32 &fact_finder_id);


    virtual void presentationGetDemographicRelationships();

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void presentationGetIncomesByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void presentationGetLiabilitiesByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void presentationGetLifeInsurancePoliciesByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void presentationGetPensionsByFactfinderid(const qint32 &fact_finder_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void presentationGetAccountsByFactfinderidExternalsourceidCallback(OAIHttpRequestWorker *worker);
    void presentationGetDemographicOwnersByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void presentationGetDemographicRelationshipsCallback(OAIHttpRequestWorker *worker);
    void presentationGetIncomesByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void presentationGetLiabilitiesByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void presentationGetLifeInsurancePoliciesByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void presentationGetPensionsByFactfinderidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void presentationGetAccountsByFactfinderidExternalsourceidSignal(OAIAccountsWithSubEntitiesModel summary);
    void presentationGetDemographicOwnersByFactfinderidSignal(OAIOwnersModel summary);
    void presentationGetDemographicRelationshipsSignal(OAIRelationshipTypesModel summary);
    void presentationGetIncomesByFactfinderidSignal(OAIIncomesModel summary);
    void presentationGetLiabilitiesByFactfinderidSignal(OAILiabilitiesModel summary);
    void presentationGetLifeInsurancePoliciesByFactfinderidSignal(OAILifeInsurancePoliciesWithSubEntitiesModel summary);
    void presentationGetPensionsByFactfinderidSignal(OAIDefinedBenefitPensionsModel summary);


    void presentationGetAccountsByFactfinderidExternalsourceidSignalFull(OAIHttpRequestWorker *worker, OAIAccountsWithSubEntitiesModel summary);
    void presentationGetDemographicOwnersByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIOwnersModel summary);
    void presentationGetDemographicRelationshipsSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipTypesModel summary);
    void presentationGetIncomesByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIIncomesModel summary);
    void presentationGetLiabilitiesByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAILiabilitiesModel summary);
    void presentationGetLifeInsurancePoliciesByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAILifeInsurancePoliciesWithSubEntitiesModel summary);
    void presentationGetPensionsByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIDefinedBenefitPensionsModel summary);

    Q_DECL_DEPRECATED_X("Use presentationGetAccountsByFactfinderidExternalsourceidSignalError() instead")
    void presentationGetAccountsByFactfinderidExternalsourceidSignalE(OAIAccountsWithSubEntitiesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetAccountsByFactfinderidExternalsourceidSignalError(OAIAccountsWithSubEntitiesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetDemographicOwnersByFactfinderidSignalError() instead")
    void presentationGetDemographicOwnersByFactfinderidSignalE(OAIOwnersModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetDemographicOwnersByFactfinderidSignalError(OAIOwnersModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetDemographicRelationshipsSignalError() instead")
    void presentationGetDemographicRelationshipsSignalE(OAIRelationshipTypesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetDemographicRelationshipsSignalError(OAIRelationshipTypesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetIncomesByFactfinderidSignalError() instead")
    void presentationGetIncomesByFactfinderidSignalE(OAIIncomesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetIncomesByFactfinderidSignalError(OAIIncomesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetLiabilitiesByFactfinderidSignalError() instead")
    void presentationGetLiabilitiesByFactfinderidSignalE(OAILiabilitiesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetLiabilitiesByFactfinderidSignalError(OAILiabilitiesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetLifeInsurancePoliciesByFactfinderidSignalError() instead")
    void presentationGetLifeInsurancePoliciesByFactfinderidSignalE(OAILifeInsurancePoliciesWithSubEntitiesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetLifeInsurancePoliciesByFactfinderidSignalError(OAILifeInsurancePoliciesWithSubEntitiesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetPensionsByFactfinderidSignalError() instead")
    void presentationGetPensionsByFactfinderidSignalE(OAIDefinedBenefitPensionsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetPensionsByFactfinderidSignalError(OAIDefinedBenefitPensionsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use presentationGetAccountsByFactfinderidExternalsourceidSignalErrorFull() instead")
    void presentationGetAccountsByFactfinderidExternalsourceidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetAccountsByFactfinderidExternalsourceidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetDemographicOwnersByFactfinderidSignalErrorFull() instead")
    void presentationGetDemographicOwnersByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetDemographicOwnersByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetDemographicRelationshipsSignalErrorFull() instead")
    void presentationGetDemographicRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetDemographicRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetIncomesByFactfinderidSignalErrorFull() instead")
    void presentationGetIncomesByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetIncomesByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetLiabilitiesByFactfinderidSignalErrorFull() instead")
    void presentationGetLiabilitiesByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetLiabilitiesByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetLifeInsurancePoliciesByFactfinderidSignalErrorFull() instead")
    void presentationGetLifeInsurancePoliciesByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetLifeInsurancePoliciesByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use presentationGetPensionsByFactfinderidSignalErrorFull() instead")
    void presentationGetPensionsByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void presentationGetPensionsByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
