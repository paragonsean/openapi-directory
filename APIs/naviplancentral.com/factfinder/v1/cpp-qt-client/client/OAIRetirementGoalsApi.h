/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRetirementGoalsApi_H
#define OAI_OAIRetirementGoalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRetirementExpenseModel.h"
#include "OAIRetirementExpenseWithIdModel.h"
#include "OAIRetirementExpensesModel.h"
#include "OAIRetirementGoalModel.h"
#include "OAIRetirementGoalWithIdModel.h"
#include "OAIRetirementGoalsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRetirementGoalsApi : public QObject {
    Q_OBJECT

public:
    OAIRetirementGoalsApi(const int timeOut = 0);
    ~OAIRetirementGoalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void retirementGoalsDeleteById(const qint32 &id);

    /**
    * @param[in]  retirement_goal_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void retirementGoalsDeleteByRetirementgoalidId(const qint32 &retirement_goal_id, const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void retirementGoalsGetById(const qint32 &id);

    /**
    * @param[in]  retirement_goal_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void retirementGoalsGetRetirementExpenseByRetirementgoalidId(const qint32 &retirement_goal_id, const qint32 &id);

    /**
    * @param[in]  retirement_goal_id qint32 [required]
    */
    virtual void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid(const qint32 &retirement_goal_id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIRetirementGoalModel [required]
    */
    virtual void retirementGoalsPostByModel(const OAIRetirementGoalModel &model);

    /**
    * @param[in]  retirement_goal_id qint32 [required]
    * @param[in]  model OAIRetirementExpenseModel [required]
    */
    virtual void retirementGoalsPostByRetirementgoalidModel(const qint32 &retirement_goal_id, const OAIRetirementExpenseModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIRetirementGoalModel [required]
    */
    virtual void retirementGoalsPutByIdModel(const qint32 &id, const OAIRetirementGoalModel &model);

    /**
    * @param[in]  retirement_goal_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIRetirementExpenseModel [required]
    */
    virtual void retirementGoalsPutByRetirementgoalidIdModel(const qint32 &retirement_goal_id, const qint32 &id, const OAIRetirementExpenseModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void retirementGoalsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsDeleteByRetirementgoalidIdCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsGetByIdCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsPostByModelCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsPostByRetirementgoalidModelCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsPutByIdModelCallback(OAIHttpRequestWorker *worker);
    void retirementGoalsPutByRetirementgoalidIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void retirementGoalsDeleteByIdSignal();
    void retirementGoalsDeleteByRetirementgoalidIdSignal();
    void retirementGoalsGetByIdSignal(OAIRetirementGoalWithIdModel summary);
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignal(OAIRetirementExpenseWithIdModel summary);
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignal(OAIRetirementExpensesModel summary);
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignal(OAIRetirementGoalsModel summary);
    void retirementGoalsPostByModelSignal(OAIRetirementGoalWithIdModel summary);
    void retirementGoalsPostByRetirementgoalidModelSignal(OAIRetirementExpenseWithIdModel summary);
    void retirementGoalsPutByIdModelSignal(OAIRetirementGoalWithIdModel summary);
    void retirementGoalsPutByRetirementgoalidIdModelSignal(OAIRetirementExpenseWithIdModel summary);


    void retirementGoalsDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void retirementGoalsDeleteByRetirementgoalidIdSignalFull(OAIHttpRequestWorker *worker);
    void retirementGoalsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIRetirementGoalWithIdModel summary);
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalFull(OAIHttpRequestWorker *worker, OAIRetirementExpenseWithIdModel summary);
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalFull(OAIHttpRequestWorker *worker, OAIRetirementExpensesModel summary);
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIRetirementGoalsModel summary);
    void retirementGoalsPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIRetirementGoalWithIdModel summary);
    void retirementGoalsPostByRetirementgoalidModelSignalFull(OAIHttpRequestWorker *worker, OAIRetirementExpenseWithIdModel summary);
    void retirementGoalsPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIRetirementGoalWithIdModel summary);
    void retirementGoalsPutByRetirementgoalidIdModelSignalFull(OAIHttpRequestWorker *worker, OAIRetirementExpenseWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use retirementGoalsDeleteByIdSignalError() instead")
    void retirementGoalsDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsDeleteByRetirementgoalidIdSignalError() instead")
    void retirementGoalsDeleteByRetirementgoalidIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsDeleteByRetirementgoalidIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetByIdSignalError() instead")
    void retirementGoalsGetByIdSignalE(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetByIdSignalError(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalError() instead")
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalE(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalError(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalError() instead")
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalE(OAIRetirementExpensesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalError(OAIRetirementExpensesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalError() instead")
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalE(OAIRetirementGoalsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalError(OAIRetirementGoalsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPostByModelSignalError() instead")
    void retirementGoalsPostByModelSignalE(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPostByModelSignalError(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPostByRetirementgoalidModelSignalError() instead")
    void retirementGoalsPostByRetirementgoalidModelSignalE(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPostByRetirementgoalidModelSignalError(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPutByIdModelSignalError() instead")
    void retirementGoalsPutByIdModelSignalE(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPutByIdModelSignalError(OAIRetirementGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPutByRetirementgoalidIdModelSignalError() instead")
    void retirementGoalsPutByRetirementgoalidIdModelSignalE(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPutByRetirementgoalidIdModelSignalError(OAIRetirementExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use retirementGoalsDeleteByIdSignalErrorFull() instead")
    void retirementGoalsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsDeleteByRetirementgoalidIdSignalErrorFull() instead")
    void retirementGoalsDeleteByRetirementgoalidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsDeleteByRetirementgoalidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetByIdSignalErrorFull() instead")
    void retirementGoalsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalErrorFull() instead")
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalErrorFull() instead")
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPostByModelSignalErrorFull() instead")
    void retirementGoalsPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPostByRetirementgoalidModelSignalErrorFull() instead")
    void retirementGoalsPostByRetirementgoalidModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPostByRetirementgoalidModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPutByIdModelSignalErrorFull() instead")
    void retirementGoalsPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retirementGoalsPutByRetirementgoalidIdModelSignalErrorFull() instead")
    void retirementGoalsPutByRetirementgoalidIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retirementGoalsPutByRetirementgoalidIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
