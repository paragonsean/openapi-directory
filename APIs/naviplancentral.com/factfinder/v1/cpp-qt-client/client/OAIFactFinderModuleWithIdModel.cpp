/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactFinderModuleWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactFinderModuleWithIdModel::OAIFactFinderModuleWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactFinderModuleWithIdModel::OAIFactFinderModuleWithIdModel() {
    this->initializeModel();
}

OAIFactFinderModuleWithIdModel::~OAIFactFinderModuleWithIdModel() {}

void OAIFactFinderModuleWithIdModel::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_module_id_isSet = false;
    m_module_id_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_visited_isSet = false;
    m_visited_isValid = false;
}

void OAIFactFinderModuleWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactFinderModuleWithIdModel::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_module_id_isValid = ::OpenAPI::fromJsonValue(m_module_id, json[QString("moduleId")]);
    m_module_id_isSet = !json[QString("moduleId")].isNull() && m_module_id_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("moduleName")]);
    m_module_name_isSet = !json[QString("moduleName")].isNull() && m_module_name_isValid;

    m_visited_isValid = ::OpenAPI::fromJsonValue(m_visited, json[QString("visited")]);
    m_visited_isSet = !json[QString("visited")].isNull() && m_visited_isValid;
}

QString OAIFactFinderModuleWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactFinderModuleWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_module_id_isSet) {
        obj.insert(QString("moduleId"), ::OpenAPI::toJsonValue(m_module_id));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("moduleName"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_visited_isSet) {
        obj.insert(QString("visited"), ::OpenAPI::toJsonValue(m_visited));
    }
    return obj;
}

bool OAIFactFinderModuleWithIdModel::isAvailable() const {
    return m_available;
}
void OAIFactFinderModuleWithIdModel::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_available_Set() const{
    return m_available_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_available_Valid() const{
    return m_available_isValid;
}

qint32 OAIFactFinderModuleWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIFactFinderModuleWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QList<OAIObjectLink> OAIFactFinderModuleWithIdModel::getLinks() const {
    return m_links;
}
void OAIFactFinderModuleWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIFactFinderModuleWithIdModel::getModuleId() const {
    return m_module_id;
}
void OAIFactFinderModuleWithIdModel::setModuleId(const qint32 &module_id) {
    m_module_id = module_id;
    m_module_id_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_module_id_Set() const{
    return m_module_id_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_module_id_Valid() const{
    return m_module_id_isValid;
}

QString OAIFactFinderModuleWithIdModel::getModuleName() const {
    return m_module_name;
}
void OAIFactFinderModuleWithIdModel::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_module_name_Valid() const{
    return m_module_name_isValid;
}

bool OAIFactFinderModuleWithIdModel::isVisited() const {
    return m_visited;
}
void OAIFactFinderModuleWithIdModel::setVisited(const bool &visited) {
    m_visited = visited;
    m_visited_isSet = true;
}

bool OAIFactFinderModuleWithIdModel::is_visited_Set() const{
    return m_visited_isSet;
}

bool OAIFactFinderModuleWithIdModel::is_visited_Valid() const{
    return m_visited_isValid;
}

bool OAIFactFinderModuleWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visited_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactFinderModuleWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
