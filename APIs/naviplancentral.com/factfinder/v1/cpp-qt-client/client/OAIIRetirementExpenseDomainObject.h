/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIRetirementExpenseDomainObject.h
 *
 * 
 */

#ifndef OAIIRetirementExpenseDomainObject_H
#define OAIIRetirementExpenseDomainObject_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIRetirementExpenseDomainObject : public OAIObject {
public:
    OAIIRetirementExpenseDomainObject();
    OAIIRetirementExpenseDomainObject(QString json);
    ~OAIIRetirementExpenseDomainObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    qint32 getAnnualPeriod() const;
    void setAnnualPeriod(const qint32 &annual_period);
    bool is_annual_period_Set() const;
    bool is_annual_period_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getExternalDestinationId() const;
    void setExternalDestinationId(const QString &external_destination_id);
    bool is_external_destination_id_Set() const;
    bool is_external_destination_id_Valid() const;

    qint32 getFrequency() const;
    void setFrequency(const qint32 &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QString getMember() const;
    void setMember(const QString &member);
    bool is_member_Set() const;
    bool is_member_Valid() const;

    qint32 getRetirementExpenseId() const;
    void setRetirementExpenseId(const qint32 &retirement_expense_id);
    bool is_retirement_expense_id_Set() const;
    bool is_retirement_expense_id_Valid() const;

    qint32 getRetirementGoalId() const;
    void setRetirementGoalId(const qint32 &retirement_goal_id);
    bool is_retirement_goal_id_Set() const;
    bool is_retirement_goal_id_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    qint32 m_annual_period;
    bool m_annual_period_isSet;
    bool m_annual_period_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_external_destination_id;
    bool m_external_destination_id_isSet;
    bool m_external_destination_id_isValid;

    qint32 m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QString m_member;
    bool m_member_isSet;
    bool m_member_isValid;

    qint32 m_retirement_expense_id;
    bool m_retirement_expense_id_isSet;
    bool m_retirement_expense_id_isValid;

    qint32 m_retirement_goal_id;
    bool m_retirement_goal_id_isSet;
    bool m_retirement_goal_id_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIRetirementExpenseDomainObject)

#endif // OAIIRetirementExpenseDomainObject_H
