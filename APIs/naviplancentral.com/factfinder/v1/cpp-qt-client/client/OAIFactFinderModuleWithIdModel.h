/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFactFinderModuleWithIdModel.h
 *
 * 
 */

#ifndef OAIFactFinderModuleWithIdModel_H
#define OAIFactFinderModuleWithIdModel_H

#include <QJsonObject>

#include "OAIObjectLink.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjectLink;

class OAIFactFinderModuleWithIdModel : public OAIObject {
public:
    OAIFactFinderModuleWithIdModel();
    OAIFactFinderModuleWithIdModel(QString json);
    ~OAIFactFinderModuleWithIdModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAvailable() const;
    void setAvailable(const bool &available);
    bool is_available_Set() const;
    bool is_available_Valid() const;

    qint32 getFactFinderId() const;
    void setFactFinderId(const qint32 &fact_finder_id);
    bool is_fact_finder_id_Set() const;
    bool is_fact_finder_id_Valid() const;

    QList<OAIObjectLink> getLinks() const;
    void setLinks(const QList<OAIObjectLink> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getModuleId() const;
    void setModuleId(const qint32 &module_id);
    bool is_module_id_Set() const;
    bool is_module_id_Valid() const;

    QString getModuleName() const;
    void setModuleName(const QString &module_name);
    bool is_module_name_Set() const;
    bool is_module_name_Valid() const;

    bool isVisited() const;
    void setVisited(const bool &visited);
    bool is_visited_Set() const;
    bool is_visited_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_available;
    bool m_available_isSet;
    bool m_available_isValid;

    qint32 m_fact_finder_id;
    bool m_fact_finder_id_isSet;
    bool m_fact_finder_id_isValid;

    QList<OAIObjectLink> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_module_id;
    bool m_module_id_isSet;
    bool m_module_id_isValid;

    QString m_module_name;
    bool m_module_name_isSet;
    bool m_module_name_isValid;

    bool m_visited;
    bool m_visited_isSet;
    bool m_visited_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFactFinderModuleWithIdModel)

#endif // OAIFactFinderModuleWithIdModel_H
