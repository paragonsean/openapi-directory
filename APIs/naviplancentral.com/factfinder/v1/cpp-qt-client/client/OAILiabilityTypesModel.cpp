/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiabilityTypesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiabilityTypesModel::OAILiabilityTypesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiabilityTypesModel::OAILiabilityTypesModel() {
    this->initializeModel();
}

OAILiabilityTypesModel::~OAILiabilityTypesModel() {}

void OAILiabilityTypesModel::initializeModel() {

    m_liability_types_isSet = false;
    m_liability_types_isValid = false;
}

void OAILiabilityTypesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiabilityTypesModel::fromJsonObject(QJsonObject json) {

    m_liability_types_isValid = ::OpenAPI::fromJsonValue(m_liability_types, json[QString("liabilityTypes")]);
    m_liability_types_isSet = !json[QString("liabilityTypes")].isNull() && m_liability_types_isValid;
}

QString OAILiabilityTypesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiabilityTypesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_liability_types.size() > 0) {
        obj.insert(QString("liabilityTypes"), ::OpenAPI::toJsonValue(m_liability_types));
    }
    return obj;
}

QList<OAILiabilityTypeModel> OAILiabilityTypesModel::getLiabilityTypes() const {
    return m_liability_types;
}
void OAILiabilityTypesModel::setLiabilityTypes(const QList<OAILiabilityTypeModel> &liability_types) {
    m_liability_types = liability_types;
    m_liability_types_isSet = true;
}

bool OAILiabilityTypesModel::is_liability_types_Set() const{
    return m_liability_types_isSet;
}

bool OAILiabilityTypesModel::is_liability_types_Valid() const{
    return m_liability_types_isValid;
}

bool OAILiabilityTypesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_liability_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiabilityTypesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
