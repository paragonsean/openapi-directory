/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFactFindersApi_H
#define OAI_OAIFactFindersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFactFinderEntityModel.h"
#include "OAIFactFinderModel.h"
#include "OAIFactFinderPopulatableEntityModel.h"
#include "OAIFactFinderPopulationModel.h"
#include "OAIFactFinderSnapshotWithIdModel.h"
#include "OAIFactFinderSnapshotsModel.h"
#include "OAIFactFinderWithIdModel.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFactFindersApi : public QObject {
    Q_OBJECT

public:
    OAIFactFindersApi(const int timeOut = 0);
    ~OAIFactFindersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void factFindersDeleteById(const qint32 &id);

    /**
    * @param[in]  household_id qint32 [optional]
    */
    virtual void factFindersGetByHouseholdIdByHouseholdid(const ::OpenAPI::OptionalParam<qint32> &household_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void factFindersGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void factFindersGetSnapshotsByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIFactFinderEntityModel [required]
    */
    virtual void factFindersPostByModel(const OAIFactFinderEntityModel &model);

    /**
    * @param[in]  model OAIFactFinderPopulatableEntityModel [required]
    */
    virtual void factFindersPostPopulateByModel(const OAIFactFinderPopulatableEntityModel &model);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void factFindersPostSnapshotsByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIFactFinderModel [required]
    */
    virtual void factFindersPutByIdModel(const qint32 &id, const OAIFactFinderModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIFactFinderPopulationModel [required]
    */
    virtual void factFindersPutPopulateFactFinderByIdModel(const qint32 &id, const OAIFactFinderPopulationModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void factFindersDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void factFindersGetByHouseholdIdByHouseholdidCallback(OAIHttpRequestWorker *worker);
    void factFindersGetByIdCallback(OAIHttpRequestWorker *worker);
    void factFindersGetSnapshotsByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void factFindersPostByModelCallback(OAIHttpRequestWorker *worker);
    void factFindersPostPopulateByModelCallback(OAIHttpRequestWorker *worker);
    void factFindersPostSnapshotsByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void factFindersPutByIdModelCallback(OAIHttpRequestWorker *worker);
    void factFindersPutPopulateFactFinderByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void factFindersDeleteByIdSignal(OAIObject summary);
    void factFindersGetByHouseholdIdByHouseholdidSignal(QList<OAIFactFinderWithIdModel> summary);
    void factFindersGetByIdSignal(OAIFactFinderWithIdModel summary);
    void factFindersGetSnapshotsByFactfinderidSignal(OAIFactFinderSnapshotsModel summary);
    void factFindersPostByModelSignal(OAIObject summary);
    void factFindersPostPopulateByModelSignal(OAIObject summary);
    void factFindersPostSnapshotsByFactfinderidSignal(OAIObject summary);
    void factFindersPutByIdModelSignal(OAIFactFinderWithIdModel summary);
    void factFindersPutPopulateFactFinderByIdModelSignal(OAIFactFinderWithIdModel summary);


    void factFindersDeleteByIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void factFindersGetByHouseholdIdByHouseholdidSignalFull(OAIHttpRequestWorker *worker, QList<OAIFactFinderWithIdModel> summary);
    void factFindersGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIFactFinderWithIdModel summary);
    void factFindersGetSnapshotsByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIFactFinderSnapshotsModel summary);
    void factFindersPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void factFindersPostPopulateByModelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void factFindersPostSnapshotsByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void factFindersPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIFactFinderWithIdModel summary);
    void factFindersPutPopulateFactFinderByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIFactFinderWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use factFindersDeleteByIdSignalError() instead")
    void factFindersDeleteByIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersDeleteByIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetByHouseholdIdByHouseholdidSignalError() instead")
    void factFindersGetByHouseholdIdByHouseholdidSignalE(QList<OAIFactFinderWithIdModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetByHouseholdIdByHouseholdidSignalError(QList<OAIFactFinderWithIdModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetByIdSignalError() instead")
    void factFindersGetByIdSignalE(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetByIdSignalError(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetSnapshotsByFactfinderidSignalError() instead")
    void factFindersGetSnapshotsByFactfinderidSignalE(OAIFactFinderSnapshotsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetSnapshotsByFactfinderidSignalError(OAIFactFinderSnapshotsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostByModelSignalError() instead")
    void factFindersPostByModelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostByModelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostPopulateByModelSignalError() instead")
    void factFindersPostPopulateByModelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostPopulateByModelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostSnapshotsByFactfinderidSignalError() instead")
    void factFindersPostSnapshotsByFactfinderidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostSnapshotsByFactfinderidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPutByIdModelSignalError() instead")
    void factFindersPutByIdModelSignalE(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPutByIdModelSignalError(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPutPopulateFactFinderByIdModelSignalError() instead")
    void factFindersPutPopulateFactFinderByIdModelSignalE(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPutPopulateFactFinderByIdModelSignalError(OAIFactFinderWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use factFindersDeleteByIdSignalErrorFull() instead")
    void factFindersDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetByHouseholdIdByHouseholdidSignalErrorFull() instead")
    void factFindersGetByHouseholdIdByHouseholdidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetByHouseholdIdByHouseholdidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetByIdSignalErrorFull() instead")
    void factFindersGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersGetSnapshotsByFactfinderidSignalErrorFull() instead")
    void factFindersGetSnapshotsByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersGetSnapshotsByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostByModelSignalErrorFull() instead")
    void factFindersPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostPopulateByModelSignalErrorFull() instead")
    void factFindersPostPopulateByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostPopulateByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPostSnapshotsByFactfinderidSignalErrorFull() instead")
    void factFindersPostSnapshotsByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPostSnapshotsByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPutByIdModelSignalErrorFull() instead")
    void factFindersPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factFindersPutPopulateFactFinderByIdModelSignalErrorFull() instead")
    void factFindersPutPopulateFactFinderByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factFindersPutPopulateFactFinderByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
