/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRetirementExpenseDomainObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRetirementExpenseDomainObject::OAIIRetirementExpenseDomainObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRetirementExpenseDomainObject::OAIIRetirementExpenseDomainObject() {
    this->initializeModel();
}

OAIIRetirementExpenseDomainObject::~OAIIRetirementExpenseDomainObject() {}

void OAIIRetirementExpenseDomainObject::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_annual_period_isSet = false;
    m_annual_period_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_retirement_expense_id_isSet = false;
    m_retirement_expense_id_isValid = false;

    m_retirement_goal_id_isSet = false;
    m_retirement_goal_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIRetirementExpenseDomainObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRetirementExpenseDomainObject::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_annual_period_isValid = ::OpenAPI::fromJsonValue(m_annual_period, json[QString("annualPeriod")]);
    m_annual_period_isSet = !json[QString("annualPeriod")].isNull() && m_annual_period_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_retirement_expense_id_isValid = ::OpenAPI::fromJsonValue(m_retirement_expense_id, json[QString("retirementExpenseId")]);
    m_retirement_expense_id_isSet = !json[QString("retirementExpenseId")].isNull() && m_retirement_expense_id_isValid;

    m_retirement_goal_id_isValid = ::OpenAPI::fromJsonValue(m_retirement_goal_id, json[QString("retirementGoalId")]);
    m_retirement_goal_id_isSet = !json[QString("retirementGoalId")].isNull() && m_retirement_goal_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIRetirementExpenseDomainObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRetirementExpenseDomainObject::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_annual_period_isSet) {
        obj.insert(QString("annualPeriod"), ::OpenAPI::toJsonValue(m_annual_period));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_member_isSet) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_retirement_expense_id_isSet) {
        obj.insert(QString("retirementExpenseId"), ::OpenAPI::toJsonValue(m_retirement_expense_id));
    }
    if (m_retirement_goal_id_isSet) {
        obj.insert(QString("retirementGoalId"), ::OpenAPI::toJsonValue(m_retirement_goal_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

double OAIIRetirementExpenseDomainObject::getAmount() const {
    return m_amount;
}
void OAIIRetirementExpenseDomainObject::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_amount_Valid() const{
    return m_amount_isValid;
}

qint32 OAIIRetirementExpenseDomainObject::getAnnualPeriod() const {
    return m_annual_period;
}
void OAIIRetirementExpenseDomainObject::setAnnualPeriod(const qint32 &annual_period) {
    m_annual_period = annual_period;
    m_annual_period_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_annual_period_Set() const{
    return m_annual_period_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_annual_period_Valid() const{
    return m_annual_period_isValid;
}

QString OAIIRetirementExpenseDomainObject::getDescription() const {
    return m_description;
}
void OAIIRetirementExpenseDomainObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIIRetirementExpenseDomainObject::getEndDate() const {
    return m_end_date;
}
void OAIIRetirementExpenseDomainObject::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIIRetirementExpenseDomainObject::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIIRetirementExpenseDomainObject::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIIRetirementExpenseDomainObject::getFrequency() const {
    return m_frequency;
}
void OAIIRetirementExpenseDomainObject::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIIRetirementExpenseDomainObject::getMember() const {
    return m_member;
}
void OAIIRetirementExpenseDomainObject::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_member_Set() const{
    return m_member_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_member_Valid() const{
    return m_member_isValid;
}

qint32 OAIIRetirementExpenseDomainObject::getRetirementExpenseId() const {
    return m_retirement_expense_id;
}
void OAIIRetirementExpenseDomainObject::setRetirementExpenseId(const qint32 &retirement_expense_id) {
    m_retirement_expense_id = retirement_expense_id;
    m_retirement_expense_id_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_retirement_expense_id_Set() const{
    return m_retirement_expense_id_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_retirement_expense_id_Valid() const{
    return m_retirement_expense_id_isValid;
}

qint32 OAIIRetirementExpenseDomainObject::getRetirementGoalId() const {
    return m_retirement_goal_id;
}
void OAIIRetirementExpenseDomainObject::setRetirementGoalId(const qint32 &retirement_goal_id) {
    m_retirement_goal_id = retirement_goal_id;
    m_retirement_goal_id_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_retirement_goal_id_Set() const{
    return m_retirement_goal_id_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_retirement_goal_id_Valid() const{
    return m_retirement_goal_id_isValid;
}

QDateTime OAIIRetirementExpenseDomainObject::getStartDate() const {
    return m_start_date;
}
void OAIIRetirementExpenseDomainObject::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIRetirementExpenseDomainObject::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIRetirementExpenseDomainObject::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIRetirementExpenseDomainObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_expense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_goal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRetirementExpenseDomainObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
