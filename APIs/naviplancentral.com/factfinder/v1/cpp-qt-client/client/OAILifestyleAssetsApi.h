/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILifestyleAssetsApi_H
#define OAI_OAILifestyleAssetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILifestyleAssetModel.h"
#include "OAILifestyleAssetWithIdModel.h"
#include "OAILifestyleAssetsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILifestyleAssetsApi : public QObject {
    Q_OBJECT

public:
    OAILifestyleAssetsApi(const int timeOut = 0);
    ~OAILifestyleAssetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void lifestyleAssetsDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void lifestyleAssetsGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAILifestyleAssetModel [required]
    */
    virtual void lifestyleAssetsPostByModel(const OAILifestyleAssetModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAILifestyleAssetModel [required]
    */
    virtual void lifestyleAssetsPutByIdModel(const qint32 &id, const OAILifestyleAssetModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void lifestyleAssetsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void lifestyleAssetsGetByIdCallback(OAIHttpRequestWorker *worker);
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void lifestyleAssetsPostByModelCallback(OAIHttpRequestWorker *worker);
    void lifestyleAssetsPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void lifestyleAssetsDeleteByIdSignal();
    void lifestyleAssetsGetByIdSignal(OAILifestyleAssetWithIdModel summary);
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignal(OAILifestyleAssetsModel summary);
    void lifestyleAssetsPostByModelSignal(OAILifestyleAssetWithIdModel summary);
    void lifestyleAssetsPutByIdModelSignal(OAILifestyleAssetWithIdModel summary);


    void lifestyleAssetsDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void lifestyleAssetsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAILifestyleAssetWithIdModel summary);
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAILifestyleAssetsModel summary);
    void lifestyleAssetsPostByModelSignalFull(OAIHttpRequestWorker *worker, OAILifestyleAssetWithIdModel summary);
    void lifestyleAssetsPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAILifestyleAssetWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use lifestyleAssetsDeleteByIdSignalError() instead")
    void lifestyleAssetsDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsGetByIdSignalError() instead")
    void lifestyleAssetsGetByIdSignalE(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsGetByIdSignalError(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalError() instead")
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalE(OAILifestyleAssetsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalError(OAILifestyleAssetsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsPostByModelSignalError() instead")
    void lifestyleAssetsPostByModelSignalE(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsPostByModelSignalError(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsPutByIdModelSignalError() instead")
    void lifestyleAssetsPutByIdModelSignalE(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsPutByIdModelSignalError(OAILifestyleAssetWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use lifestyleAssetsDeleteByIdSignalErrorFull() instead")
    void lifestyleAssetsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsGetByIdSignalErrorFull() instead")
    void lifestyleAssetsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsPostByModelSignalErrorFull() instead")
    void lifestyleAssetsPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lifestyleAssetsPutByIdModelSignalErrorFull() instead")
    void lifestyleAssetsPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lifestyleAssetsPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
