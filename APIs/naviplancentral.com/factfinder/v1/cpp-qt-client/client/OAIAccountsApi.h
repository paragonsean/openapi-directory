/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountHoldingModel.h"
#include "OAIAccountHoldingWithIdModel.h"
#include "OAIAccountHoldingsModel.h"
#include "OAIAccountHoldingsWithoutIdModel.h"
#include "OAIAccountModel.h"
#include "OAIAccountWithIdModel.h"
#include "OAIAccountsModel.h"
#include "OAISavingsStrategiesModel.h"
#include "OAISavingsStrategyModel.h"
#include "OAISavingsStrategyWithIdModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void accountsDeleteAccountById(const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void accountsDeleteAccountHoldingByAccountidId(const qint32 &account_id, const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    */
    virtual void accountsDeleteSavingsStrategiesByAccountid(const qint32 &account_id);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void accountsDeleteSavingsStrategyByAccountidId(const qint32 &account_id, const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void accountsGetAccountHoldingByAccountidId(const qint32 &account_id, const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    */
    virtual void accountsGetAccountHoldingsByAccountid(const qint32 &account_id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    * @param[in]  external_source_id QString [optional]
    */
    virtual void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid(const qint32 &fact_finder_id, const ::OpenAPI::OptionalParam<QString> &external_source_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void accountsGetById(const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(const qint32 &account_id, const qint32 &id);

    /**
    * @param[in]  account_id qint32 [required]
    */
    virtual void accountsGetSavingsStrategiesByAccountIdByAccountid(const qint32 &account_id);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  model OAIAccountHoldingModel [required]
    */
    virtual void accountsPostAccountHoldingByAccountidModel(const qint32 &account_id, const OAIAccountHoldingModel &model);

    /**
    * @param[in]  model OAIAccountModel [required]
    */
    virtual void accountsPostByModel(const OAIAccountModel &model);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  savings_strategy OAISavingsStrategyModel [required]
    */
    virtual void accountsPostSavingsStrategyByAccountidSavingsstrategy(const qint32 &account_id, const OAISavingsStrategyModel &savings_strategy);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  holding OAIAccountHoldingModel [required]
    */
    virtual void accountsPutByAccountidIdHolding(const qint32 &account_id, const qint32 &id, const OAIAccountHoldingModel &holding);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIAccountModel [required]
    */
    virtual void accountsPutByIdModel(const qint32 &id, const OAIAccountModel &model);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  holdings OAIAccountHoldingsWithoutIdModel [required]
    */
    virtual void accountsPutHoldingsByAccountidHoldings(const qint32 &account_id, const OAIAccountHoldingsWithoutIdModel &holdings);

    /**
    * @param[in]  account_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  savings_strategy OAISavingsStrategyModel [required]
    */
    virtual void accountsPutSavingsStrategyByAccountidIdSavingsstrategy(const qint32 &account_id, const qint32 &id, const OAISavingsStrategyModel &savings_strategy);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsDeleteAccountByIdCallback(OAIHttpRequestWorker *worker);
    void accountsDeleteAccountHoldingByAccountidIdCallback(OAIHttpRequestWorker *worker);
    void accountsDeleteSavingsStrategiesByAccountidCallback(OAIHttpRequestWorker *worker);
    void accountsDeleteSavingsStrategyByAccountidIdCallback(OAIHttpRequestWorker *worker);
    void accountsGetAccountHoldingByAccountidIdCallback(OAIHttpRequestWorker *worker);
    void accountsGetAccountHoldingsByAccountidCallback(OAIHttpRequestWorker *worker);
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidCallback(OAIHttpRequestWorker *worker);
    void accountsGetByIdCallback(OAIHttpRequestWorker *worker);
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdCallback(OAIHttpRequestWorker *worker);
    void accountsGetSavingsStrategiesByAccountIdByAccountidCallback(OAIHttpRequestWorker *worker);
    void accountsPostAccountHoldingByAccountidModelCallback(OAIHttpRequestWorker *worker);
    void accountsPostByModelCallback(OAIHttpRequestWorker *worker);
    void accountsPostSavingsStrategyByAccountidSavingsstrategyCallback(OAIHttpRequestWorker *worker);
    void accountsPutByAccountidIdHoldingCallback(OAIHttpRequestWorker *worker);
    void accountsPutByIdModelCallback(OAIHttpRequestWorker *worker);
    void accountsPutHoldingsByAccountidHoldingsCallback(OAIHttpRequestWorker *worker);
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsDeleteAccountByIdSignal();
    void accountsDeleteAccountHoldingByAccountidIdSignal();
    void accountsDeleteSavingsStrategiesByAccountidSignal();
    void accountsDeleteSavingsStrategyByAccountidIdSignal();
    void accountsGetAccountHoldingByAccountidIdSignal(OAIAccountHoldingWithIdModel summary);
    void accountsGetAccountHoldingsByAccountidSignal(OAIAccountHoldingsModel summary);
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignal(OAIAccountsModel summary);
    void accountsGetByIdSignal(OAIAccountWithIdModel summary);
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignal(OAISavingsStrategyWithIdModel summary);
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignal(OAISavingsStrategiesModel summary);
    void accountsPostAccountHoldingByAccountidModelSignal(OAIAccountHoldingWithIdModel summary);
    void accountsPostByModelSignal(OAIAccountWithIdModel summary);
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignal(OAISavingsStrategyWithIdModel summary);
    void accountsPutByAccountidIdHoldingSignal(OAIAccountHoldingModel summary);
    void accountsPutByIdModelSignal(OAIAccountWithIdModel summary);
    void accountsPutHoldingsByAccountidHoldingsSignal(OAIAccountHoldingsModel summary);
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignal(OAISavingsStrategyWithIdModel summary);


    void accountsDeleteAccountByIdSignalFull(OAIHttpRequestWorker *worker);
    void accountsDeleteAccountHoldingByAccountidIdSignalFull(OAIHttpRequestWorker *worker);
    void accountsDeleteSavingsStrategiesByAccountidSignalFull(OAIHttpRequestWorker *worker);
    void accountsDeleteSavingsStrategyByAccountidIdSignalFull(OAIHttpRequestWorker *worker);
    void accountsGetAccountHoldingByAccountidIdSignalFull(OAIHttpRequestWorker *worker, OAIAccountHoldingWithIdModel summary);
    void accountsGetAccountHoldingsByAccountidSignalFull(OAIHttpRequestWorker *worker, OAIAccountHoldingsModel summary);
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalFull(OAIHttpRequestWorker *worker, OAIAccountsModel summary);
    void accountsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIAccountWithIdModel summary);
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalFull(OAIHttpRequestWorker *worker, OAISavingsStrategyWithIdModel summary);
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignalFull(OAIHttpRequestWorker *worker, OAISavingsStrategiesModel summary);
    void accountsPostAccountHoldingByAccountidModelSignalFull(OAIHttpRequestWorker *worker, OAIAccountHoldingWithIdModel summary);
    void accountsPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIAccountWithIdModel summary);
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignalFull(OAIHttpRequestWorker *worker, OAISavingsStrategyWithIdModel summary);
    void accountsPutByAccountidIdHoldingSignalFull(OAIHttpRequestWorker *worker, OAIAccountHoldingModel summary);
    void accountsPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIAccountWithIdModel summary);
    void accountsPutHoldingsByAccountidHoldingsSignalFull(OAIHttpRequestWorker *worker, OAIAccountHoldingsModel summary);
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalFull(OAIHttpRequestWorker *worker, OAISavingsStrategyWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use accountsDeleteAccountByIdSignalError() instead")
    void accountsDeleteAccountByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteAccountByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteAccountHoldingByAccountidIdSignalError() instead")
    void accountsDeleteAccountHoldingByAccountidIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteAccountHoldingByAccountidIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSavingsStrategiesByAccountidSignalError() instead")
    void accountsDeleteSavingsStrategiesByAccountidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSavingsStrategiesByAccountidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSavingsStrategyByAccountidIdSignalError() instead")
    void accountsDeleteSavingsStrategyByAccountidIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSavingsStrategyByAccountidIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountHoldingByAccountidIdSignalError() instead")
    void accountsGetAccountHoldingByAccountidIdSignalE(OAIAccountHoldingWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountHoldingByAccountidIdSignalError(OAIAccountHoldingWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountHoldingsByAccountidSignalError() instead")
    void accountsGetAccountHoldingsByAccountidSignalE(OAIAccountHoldingsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountHoldingsByAccountidSignalError(OAIAccountHoldingsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalError() instead")
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalE(OAIAccountsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalError(OAIAccountsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetByIdSignalError() instead")
    void accountsGetByIdSignalE(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetByIdSignalError(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalError() instead")
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalE(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalError(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSavingsStrategiesByAccountIdByAccountidSignalError() instead")
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignalE(OAISavingsStrategiesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignalError(OAISavingsStrategiesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostAccountHoldingByAccountidModelSignalError() instead")
    void accountsPostAccountHoldingByAccountidModelSignalE(OAIAccountHoldingWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostAccountHoldingByAccountidModelSignalError(OAIAccountHoldingWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostByModelSignalError() instead")
    void accountsPostByModelSignalE(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostByModelSignalError(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostSavingsStrategyByAccountidSavingsstrategySignalError() instead")
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignalE(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignalError(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutByAccountidIdHoldingSignalError() instead")
    void accountsPutByAccountidIdHoldingSignalE(OAIAccountHoldingModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutByAccountidIdHoldingSignalError(OAIAccountHoldingModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutByIdModelSignalError() instead")
    void accountsPutByIdModelSignalE(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutByIdModelSignalError(OAIAccountWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutHoldingsByAccountidHoldingsSignalError() instead")
    void accountsPutHoldingsByAccountidHoldingsSignalE(OAIAccountHoldingsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutHoldingsByAccountidHoldingsSignalError(OAIAccountHoldingsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalError() instead")
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalE(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalError(OAISavingsStrategyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsDeleteAccountByIdSignalErrorFull() instead")
    void accountsDeleteAccountByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteAccountByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteAccountHoldingByAccountidIdSignalErrorFull() instead")
    void accountsDeleteAccountHoldingByAccountidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteAccountHoldingByAccountidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSavingsStrategiesByAccountidSignalErrorFull() instead")
    void accountsDeleteSavingsStrategiesByAccountidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSavingsStrategiesByAccountidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSavingsStrategyByAccountidIdSignalErrorFull() instead")
    void accountsDeleteSavingsStrategyByAccountidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSavingsStrategyByAccountidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountHoldingByAccountidIdSignalErrorFull() instead")
    void accountsGetAccountHoldingByAccountidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountHoldingByAccountidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountHoldingsByAccountidSignalErrorFull() instead")
    void accountsGetAccountHoldingsByAccountidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountHoldingsByAccountidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalErrorFull() instead")
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetByIdSignalErrorFull() instead")
    void accountsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalErrorFull() instead")
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSavingsStrategiesByAccountIdByAccountidSignalErrorFull() instead")
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSavingsStrategiesByAccountIdByAccountidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostAccountHoldingByAccountidModelSignalErrorFull() instead")
    void accountsPostAccountHoldingByAccountidModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostAccountHoldingByAccountidModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostByModelSignalErrorFull() instead")
    void accountsPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPostSavingsStrategyByAccountidSavingsstrategySignalErrorFull() instead")
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPostSavingsStrategyByAccountidSavingsstrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutByAccountidIdHoldingSignalErrorFull() instead")
    void accountsPutByAccountidIdHoldingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutByAccountidIdHoldingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutByIdModelSignalErrorFull() instead")
    void accountsPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutHoldingsByAccountidHoldingsSignalErrorFull() instead")
    void accountsPutHoldingsByAccountidHoldingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutHoldingsByAccountidHoldingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalErrorFull() instead")
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPutSavingsStrategyByAccountidIdSavingsstrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
