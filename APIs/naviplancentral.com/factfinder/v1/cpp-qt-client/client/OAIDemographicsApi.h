/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDemographicsApi_H
#define OAI_OAIDemographicsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDemographicsDependentModel.h"
#include "OAIDemographicsDependentWithIdModel.h"
#include "OAIDemographicsDependentsModel.h"
#include "OAIDemographicsModel.h"
#include "OAIDemographicsWithIdModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDemographicsApi : public QObject {
    Q_OBJECT

public:
    OAIDemographicsApi(const int timeOut = 0);
    ~OAIDemographicsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  demographic_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void demographicsDeleteDependentByDemographicidId(const qint32 &demographic_id, const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void demographicsGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void demographicsGetDemographicsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  demographic_id qint32 [required]
    * @param[in]  id qint32 [required]
    */
    virtual void demographicsGetDependentByDemographicidId(const qint32 &demographic_id, const qint32 &id);

    /**
    * @param[in]  demographic_id qint32 [required]
    */
    virtual void demographicsGetDependentsByDemographicid(const qint32 &demographic_id);

    /**
    * @param[in]  demographic_id qint32 [required]
    * @param[in]  model OAIDemographicsDependentModel [required]
    */
    virtual void demographicsPostByDemographicidModel(const qint32 &demographic_id, const OAIDemographicsDependentModel &model);

    /**
    * @param[in]  model OAIDemographicsModel [required]
    */
    virtual void demographicsPostByModel(const OAIDemographicsModel &model);

    /**
    * @param[in]  demographic_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIDemographicsDependentModel [required]
    */
    virtual void demographicsPutByDemographicidIdModel(const qint32 &demographic_id, const qint32 &id, const OAIDemographicsDependentModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIDemographicsModel [required]
    */
    virtual void demographicsPutByIdModel(const qint32 &id, const OAIDemographicsModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void demographicsDeleteDependentByDemographicidIdCallback(OAIHttpRequestWorker *worker);
    void demographicsGetByIdCallback(OAIHttpRequestWorker *worker);
    void demographicsGetDemographicsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void demographicsGetDependentByDemographicidIdCallback(OAIHttpRequestWorker *worker);
    void demographicsGetDependentsByDemographicidCallback(OAIHttpRequestWorker *worker);
    void demographicsPostByDemographicidModelCallback(OAIHttpRequestWorker *worker);
    void demographicsPostByModelCallback(OAIHttpRequestWorker *worker);
    void demographicsPutByDemographicidIdModelCallback(OAIHttpRequestWorker *worker);
    void demographicsPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void demographicsDeleteDependentByDemographicidIdSignal();
    void demographicsGetByIdSignal(OAIDemographicsWithIdModel summary);
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignal(OAIDemographicsWithIdModel summary);
    void demographicsGetDependentByDemographicidIdSignal(OAIDemographicsDependentWithIdModel summary);
    void demographicsGetDependentsByDemographicidSignal(OAIDemographicsDependentsModel summary);
    void demographicsPostByDemographicidModelSignal(OAIDemographicsDependentWithIdModel summary);
    void demographicsPostByModelSignal(OAIDemographicsWithIdModel summary);
    void demographicsPutByDemographicidIdModelSignal(OAIDemographicsDependentWithIdModel summary);
    void demographicsPutByIdModelSignal(OAIDemographicsWithIdModel summary);


    void demographicsDeleteDependentByDemographicidIdSignalFull(OAIHttpRequestWorker *worker);
    void demographicsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsWithIdModel summary);
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsWithIdModel summary);
    void demographicsGetDependentByDemographicidIdSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsDependentWithIdModel summary);
    void demographicsGetDependentsByDemographicidSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsDependentsModel summary);
    void demographicsPostByDemographicidModelSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsDependentWithIdModel summary);
    void demographicsPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsWithIdModel summary);
    void demographicsPutByDemographicidIdModelSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsDependentWithIdModel summary);
    void demographicsPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIDemographicsWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use demographicsDeleteDependentByDemographicidIdSignalError() instead")
    void demographicsDeleteDependentByDemographicidIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsDeleteDependentByDemographicidIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetByIdSignalError() instead")
    void demographicsGetByIdSignalE(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetByIdSignalError(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDemographicsByFactFinderIdByFactfinderidSignalError() instead")
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignalE(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignalError(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDependentByDemographicidIdSignalError() instead")
    void demographicsGetDependentByDemographicidIdSignalE(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDependentByDemographicidIdSignalError(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDependentsByDemographicidSignalError() instead")
    void demographicsGetDependentsByDemographicidSignalE(OAIDemographicsDependentsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDependentsByDemographicidSignalError(OAIDemographicsDependentsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPostByDemographicidModelSignalError() instead")
    void demographicsPostByDemographicidModelSignalE(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPostByDemographicidModelSignalError(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPostByModelSignalError() instead")
    void demographicsPostByModelSignalE(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPostByModelSignalError(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPutByDemographicidIdModelSignalError() instead")
    void demographicsPutByDemographicidIdModelSignalE(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPutByDemographicidIdModelSignalError(OAIDemographicsDependentWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPutByIdModelSignalError() instead")
    void demographicsPutByIdModelSignalE(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPutByIdModelSignalError(OAIDemographicsWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use demographicsDeleteDependentByDemographicidIdSignalErrorFull() instead")
    void demographicsDeleteDependentByDemographicidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsDeleteDependentByDemographicidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetByIdSignalErrorFull() instead")
    void demographicsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDemographicsByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDemographicsByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDependentByDemographicidIdSignalErrorFull() instead")
    void demographicsGetDependentByDemographicidIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDependentByDemographicidIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsGetDependentsByDemographicidSignalErrorFull() instead")
    void demographicsGetDependentsByDemographicidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsGetDependentsByDemographicidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPostByDemographicidModelSignalErrorFull() instead")
    void demographicsPostByDemographicidModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPostByDemographicidModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPostByModelSignalErrorFull() instead")
    void demographicsPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPutByDemographicidIdModelSignalErrorFull() instead")
    void demographicsPutByDemographicidIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPutByDemographicidIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demographicsPutByIdModelSignalErrorFull() instead")
    void demographicsPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demographicsPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
