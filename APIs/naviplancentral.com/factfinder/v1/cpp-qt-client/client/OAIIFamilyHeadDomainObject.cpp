/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIFamilyHeadDomainObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIFamilyHeadDomainObject::OAIIFamilyHeadDomainObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIFamilyHeadDomainObject::OAIIFamilyHeadDomainObject() {
    this->initializeModel();
}

OAIIFamilyHeadDomainObject::~OAIIFamilyHeadDomainObject() {}

void OAIIFamilyHeadDomainObject::initializeModel() {

    m_already_retired_isSet = false;
    m_already_retired_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_tax_filing_status_isSet = false;
    m_tax_filing_status_isValid = false;
}

void OAIIFamilyHeadDomainObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIFamilyHeadDomainObject::fromJsonObject(QJsonObject json) {

    m_already_retired_isValid = ::OpenAPI::fromJsonValue(m_already_retired, json[QString("alreadyRetired")]);
    m_already_retired_isSet = !json[QString("alreadyRetired")].isNull() && m_already_retired_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birthDate")]);
    m_birth_date_isSet = !json[QString("birthDate")].isNull() && m_birth_date_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_tax_filing_status_isValid = ::OpenAPI::fromJsonValue(m_tax_filing_status, json[QString("taxFilingStatus")]);
    m_tax_filing_status_isSet = !json[QString("taxFilingStatus")].isNull() && m_tax_filing_status_isValid;
}

QString OAIIFamilyHeadDomainObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIFamilyHeadDomainObject::asJsonObject() const {
    QJsonObject obj;
    if (m_already_retired_isSet) {
        obj.insert(QString("alreadyRetired"), ::OpenAPI::toJsonValue(m_already_retired));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("birthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_tax_filing_status_isSet) {
        obj.insert(QString("taxFilingStatus"), ::OpenAPI::toJsonValue(m_tax_filing_status));
    }
    return obj;
}

bool OAIIFamilyHeadDomainObject::isAlreadyRetired() const {
    return m_already_retired;
}
void OAIIFamilyHeadDomainObject::setAlreadyRetired(const bool &already_retired) {
    m_already_retired = already_retired;
    m_already_retired_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_already_retired_Set() const{
    return m_already_retired_isSet;
}

bool OAIIFamilyHeadDomainObject::is_already_retired_Valid() const{
    return m_already_retired_isValid;
}

QDateTime OAIIFamilyHeadDomainObject::getBirthDate() const {
    return m_birth_date;
}
void OAIIFamilyHeadDomainObject::setBirthDate(const QDateTime &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIIFamilyHeadDomainObject::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIIFamilyHeadDomainObject::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIIFamilyHeadDomainObject::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIIFamilyHeadDomainObject::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

QString OAIIFamilyHeadDomainObject::getFirstName() const {
    return m_first_name;
}
void OAIIFamilyHeadDomainObject::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIIFamilyHeadDomainObject::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIIFamilyHeadDomainObject::getGender() const {
    return m_gender;
}
void OAIIFamilyHeadDomainObject::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIIFamilyHeadDomainObject::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIIFamilyHeadDomainObject::getLastName() const {
    return m_last_name;
}
void OAIIFamilyHeadDomainObject::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIIFamilyHeadDomainObject::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIIFamilyHeadDomainObject::getTaxFilingStatus() const {
    return m_tax_filing_status;
}
void OAIIFamilyHeadDomainObject::setTaxFilingStatus(const qint32 &tax_filing_status) {
    m_tax_filing_status = tax_filing_status;
    m_tax_filing_status_isSet = true;
}

bool OAIIFamilyHeadDomainObject::is_tax_filing_status_Set() const{
    return m_tax_filing_status_isSet;
}

bool OAIIFamilyHeadDomainObject::is_tax_filing_status_Valid() const{
    return m_tax_filing_status_isValid;
}

bool OAIIFamilyHeadDomainObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_already_retired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_filing_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIFamilyHeadDomainObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
