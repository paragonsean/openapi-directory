/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIncomesApi_H
#define OAI_OAIIncomesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIncomeModel.h"
#include "OAIIncomeWithIdModel.h"
#include "OAIIncomesModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIncomesApi : public QObject {
    Q_OBJECT

public:
    OAIIncomesApi(const int timeOut = 0);
    ~OAIIncomesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void incomesDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void incomesGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void incomesGetIncomesByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIIncomeModel [required]
    */
    virtual void incomesPostByModel(const OAIIncomeModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIIncomeModel [required]
    */
    virtual void incomesPutByIdModel(const qint32 &id, const OAIIncomeModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void incomesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void incomesGetByIdCallback(OAIHttpRequestWorker *worker);
    void incomesGetIncomesByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void incomesPostByModelCallback(OAIHttpRequestWorker *worker);
    void incomesPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void incomesDeleteByIdSignal();
    void incomesGetByIdSignal(OAIIncomeWithIdModel summary);
    void incomesGetIncomesByFactFinderIdByFactfinderidSignal(OAIIncomesModel summary);
    void incomesPostByModelSignal(OAIIncomeWithIdModel summary);
    void incomesPutByIdModelSignal(OAIIncomeWithIdModel summary);


    void incomesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void incomesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIIncomeWithIdModel summary);
    void incomesGetIncomesByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIIncomesModel summary);
    void incomesPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIIncomeWithIdModel summary);
    void incomesPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIIncomeWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use incomesDeleteByIdSignalError() instead")
    void incomesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incomesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesGetByIdSignalError() instead")
    void incomesGetByIdSignalE(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesGetByIdSignalError(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesGetIncomesByFactFinderIdByFactfinderidSignalError() instead")
    void incomesGetIncomesByFactFinderIdByFactfinderidSignalE(OAIIncomesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesGetIncomesByFactFinderIdByFactfinderidSignalError(OAIIncomesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesPostByModelSignalError() instead")
    void incomesPostByModelSignalE(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesPostByModelSignalError(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesPutByIdModelSignalError() instead")
    void incomesPutByIdModelSignalE(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesPutByIdModelSignalError(OAIIncomeWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use incomesDeleteByIdSignalErrorFull() instead")
    void incomesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesGetByIdSignalErrorFull() instead")
    void incomesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesGetIncomesByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void incomesGetIncomesByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesGetIncomesByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesPostByModelSignalErrorFull() instead")
    void incomesPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomesPutByIdModelSignalErrorFull() instead")
    void incomesPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomesPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
