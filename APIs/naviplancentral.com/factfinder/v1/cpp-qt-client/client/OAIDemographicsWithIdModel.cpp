/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDemographicsWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDemographicsWithIdModel::OAIDemographicsWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDemographicsWithIdModel::OAIDemographicsWithIdModel() {
    this->initializeModel();
}

OAIDemographicsWithIdModel::~OAIDemographicsWithIdModel() {}

void OAIDemographicsWithIdModel::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_demographics_id_isSet = false;
    m_demographics_id_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_external_source_id_isSet = false;
    m_external_source_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_head1_isSet = false;
    m_head1_isValid = false;

    m_head2_isSet = false;
    m_head2_isValid = false;

    m_joint_analysis_isSet = false;
    m_joint_analysis_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_lock_retirement_isSet = false;
    m_lock_retirement_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDemographicsWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDemographicsWithIdModel::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_demographics_id_isValid = ::OpenAPI::fromJsonValue(m_demographics_id, json[QString("demographicsId")]);
    m_demographics_id_isSet = !json[QString("demographicsId")].isNull() && m_demographics_id_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_external_source_id_isValid = ::OpenAPI::fromJsonValue(m_external_source_id, json[QString("externalSourceId")]);
    m_external_source_id_isSet = !json[QString("externalSourceId")].isNull() && m_external_source_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_head1_isValid = ::OpenAPI::fromJsonValue(m_head1, json[QString("head1")]);
    m_head1_isSet = !json[QString("head1")].isNull() && m_head1_isValid;

    m_head2_isValid = ::OpenAPI::fromJsonValue(m_head2, json[QString("head2")]);
    m_head2_isSet = !json[QString("head2")].isNull() && m_head2_isValid;

    m_joint_analysis_isValid = ::OpenAPI::fromJsonValue(m_joint_analysis, json[QString("jointAnalysis")]);
    m_joint_analysis_isSet = !json[QString("jointAnalysis")].isNull() && m_joint_analysis_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_lock_retirement_isValid = ::OpenAPI::fromJsonValue(m_lock_retirement, json[QString("lockRetirement")]);
    m_lock_retirement_isSet = !json[QString("lockRetirement")].isNull() && m_lock_retirement_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDemographicsWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDemographicsWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_demographics_id_isSet) {
        obj.insert(QString("demographicsId"), ::OpenAPI::toJsonValue(m_demographics_id));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_external_source_id_isSet) {
        obj.insert(QString("externalSourceId"), ::OpenAPI::toJsonValue(m_external_source_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_head1.isSet()) {
        obj.insert(QString("head1"), ::OpenAPI::toJsonValue(m_head1));
    }
    if (m_head2.isSet()) {
        obj.insert(QString("head2"), ::OpenAPI::toJsonValue(m_head2));
    }
    if (m_joint_analysis_isSet) {
        obj.insert(QString("jointAnalysis"), ::OpenAPI::toJsonValue(m_joint_analysis));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_lock_retirement_isSet) {
        obj.insert(QString("lockRetirement"), ::OpenAPI::toJsonValue(m_lock_retirement));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDemographicsWithIdModel::getCity() const {
    return m_city;
}
void OAIDemographicsWithIdModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIDemographicsWithIdModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIDemographicsWithIdModel::is_city_Valid() const{
    return m_city_isValid;
}

QDateTime OAIDemographicsWithIdModel::getCreated() const {
    return m_created;
}
void OAIDemographicsWithIdModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDemographicsWithIdModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDemographicsWithIdModel::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIDemographicsWithIdModel::getDemographicsId() const {
    return m_demographics_id;
}
void OAIDemographicsWithIdModel::setDemographicsId(const qint32 &demographics_id) {
    m_demographics_id = demographics_id;
    m_demographics_id_isSet = true;
}

bool OAIDemographicsWithIdModel::is_demographics_id_Set() const{
    return m_demographics_id_isSet;
}

bool OAIDemographicsWithIdModel::is_demographics_id_Valid() const{
    return m_demographics_id_isValid;
}

QString OAIDemographicsWithIdModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIDemographicsWithIdModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIDemographicsWithIdModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIDemographicsWithIdModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

QString OAIDemographicsWithIdModel::getExternalSourceId() const {
    return m_external_source_id;
}
void OAIDemographicsWithIdModel::setExternalSourceId(const QString &external_source_id) {
    m_external_source_id = external_source_id;
    m_external_source_id_isSet = true;
}

bool OAIDemographicsWithIdModel::is_external_source_id_Set() const{
    return m_external_source_id_isSet;
}

bool OAIDemographicsWithIdModel::is_external_source_id_Valid() const{
    return m_external_source_id_isValid;
}

qint32 OAIDemographicsWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIDemographicsWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIDemographicsWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIDemographicsWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

OAIFamilyHeadModel OAIDemographicsWithIdModel::getHead1() const {
    return m_head1;
}
void OAIDemographicsWithIdModel::setHead1(const OAIFamilyHeadModel &head1) {
    m_head1 = head1;
    m_head1_isSet = true;
}

bool OAIDemographicsWithIdModel::is_head1_Set() const{
    return m_head1_isSet;
}

bool OAIDemographicsWithIdModel::is_head1_Valid() const{
    return m_head1_isValid;
}

OAIFamilyHeadModel OAIDemographicsWithIdModel::getHead2() const {
    return m_head2;
}
void OAIDemographicsWithIdModel::setHead2(const OAIFamilyHeadModel &head2) {
    m_head2 = head2;
    m_head2_isSet = true;
}

bool OAIDemographicsWithIdModel::is_head2_Set() const{
    return m_head2_isSet;
}

bool OAIDemographicsWithIdModel::is_head2_Valid() const{
    return m_head2_isValid;
}

bool OAIDemographicsWithIdModel::isJointAnalysis() const {
    return m_joint_analysis;
}
void OAIDemographicsWithIdModel::setJointAnalysis(const bool &joint_analysis) {
    m_joint_analysis = joint_analysis;
    m_joint_analysis_isSet = true;
}

bool OAIDemographicsWithIdModel::is_joint_analysis_Set() const{
    return m_joint_analysis_isSet;
}

bool OAIDemographicsWithIdModel::is_joint_analysis_Valid() const{
    return m_joint_analysis_isValid;
}

QList<OAIObjectLink> OAIDemographicsWithIdModel::getLinks() const {
    return m_links;
}
void OAIDemographicsWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDemographicsWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDemographicsWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIDemographicsWithIdModel::isLockRetirement() const {
    return m_lock_retirement;
}
void OAIDemographicsWithIdModel::setLockRetirement(const bool &lock_retirement) {
    m_lock_retirement = lock_retirement;
    m_lock_retirement_isSet = true;
}

bool OAIDemographicsWithIdModel::is_lock_retirement_Set() const{
    return m_lock_retirement_isSet;
}

bool OAIDemographicsWithIdModel::is_lock_retirement_Valid() const{
    return m_lock_retirement_isValid;
}

qint32 OAIDemographicsWithIdModel::getState() const {
    return m_state;
}
void OAIDemographicsWithIdModel::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDemographicsWithIdModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDemographicsWithIdModel::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDemographicsWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demographics_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joint_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_retirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDemographicsWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
