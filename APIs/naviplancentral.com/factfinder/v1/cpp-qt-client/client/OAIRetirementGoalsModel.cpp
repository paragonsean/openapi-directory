/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetirementGoalsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetirementGoalsModel::OAIRetirementGoalsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetirementGoalsModel::OAIRetirementGoalsModel() {
    this->initializeModel();
}

OAIRetirementGoalsModel::~OAIRetirementGoalsModel() {}

void OAIRetirementGoalsModel::initializeModel() {

    m_retirement_goals_isSet = false;
    m_retirement_goals_isValid = false;
}

void OAIRetirementGoalsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetirementGoalsModel::fromJsonObject(QJsonObject json) {

    m_retirement_goals_isValid = ::OpenAPI::fromJsonValue(m_retirement_goals, json[QString("retirementGoals")]);
    m_retirement_goals_isSet = !json[QString("retirementGoals")].isNull() && m_retirement_goals_isValid;
}

QString OAIRetirementGoalsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetirementGoalsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_retirement_goals.size() > 0) {
        obj.insert(QString("retirementGoals"), ::OpenAPI::toJsonValue(m_retirement_goals));
    }
    return obj;
}

QList<OAIRetirementGoalWithIdModel> OAIRetirementGoalsModel::getRetirementGoals() const {
    return m_retirement_goals;
}
void OAIRetirementGoalsModel::setRetirementGoals(const QList<OAIRetirementGoalWithIdModel> &retirement_goals) {
    m_retirement_goals = retirement_goals;
    m_retirement_goals_isSet = true;
}

bool OAIRetirementGoalsModel::is_retirement_goals_Set() const{
    return m_retirement_goals_isSet;
}

bool OAIRetirementGoalsModel::is_retirement_goals_Valid() const{
    return m_retirement_goals_isValid;
}

bool OAIRetirementGoalsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retirement_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetirementGoalsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
