/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetirementGoalsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRetirementGoalsApi::OAIRetirementGoalsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIRetirementGoalsApi::~OAIRetirementGoalsApi() {
}

void OAIRetirementGoalsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://demo.uat.naviplancentral.com/factfinder"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://demo.uat.naviplancentral.com/factfinder"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("retirementGoalsDeleteById", defaultConf);
    _serverIndices.insert("retirementGoalsDeleteById", 0);
    _serverConfigs.insert("retirementGoalsDeleteByRetirementgoalidId", defaultConf);
    _serverIndices.insert("retirementGoalsDeleteByRetirementgoalidId", 0);
    _serverConfigs.insert("retirementGoalsGetById", defaultConf);
    _serverIndices.insert("retirementGoalsGetById", 0);
    _serverConfigs.insert("retirementGoalsGetRetirementExpenseByRetirementgoalidId", defaultConf);
    _serverIndices.insert("retirementGoalsGetRetirementExpenseByRetirementgoalidId", 0);
    _serverConfigs.insert("retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid", defaultConf);
    _serverIndices.insert("retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid", 0);
    _serverConfigs.insert("retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid", defaultConf);
    _serverIndices.insert("retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid", 0);
    _serverConfigs.insert("retirementGoalsPostByModel", defaultConf);
    _serverIndices.insert("retirementGoalsPostByModel", 0);
    _serverConfigs.insert("retirementGoalsPostByRetirementgoalidModel", defaultConf);
    _serverIndices.insert("retirementGoalsPostByRetirementgoalidModel", 0);
    _serverConfigs.insert("retirementGoalsPutByIdModel", defaultConf);
    _serverIndices.insert("retirementGoalsPutByIdModel", 0);
    _serverConfigs.insert("retirementGoalsPutByRetirementgoalidIdModel", defaultConf);
    _serverIndices.insert("retirementGoalsPutByRetirementgoalidIdModel", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIRetirementGoalsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIRetirementGoalsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIRetirementGoalsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIRetirementGoalsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIRetirementGoalsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIRetirementGoalsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIRetirementGoalsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIRetirementGoalsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIRetirementGoalsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIRetirementGoalsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRetirementGoalsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRetirementGoalsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIRetirementGoalsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIRetirementGoalsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIRetirementGoalsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIRetirementGoalsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIRetirementGoalsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIRetirementGoalsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIRetirementGoalsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIRetirementGoalsApi::retirementGoalsDeleteById(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsDeleteById"][_serverIndices.value("retirementGoalsDeleteById")].URL()+"/api/RetirementGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsDeleteByIdCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsDeleteByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsDeleteByIdSignal();
        Q_EMIT retirementGoalsDeleteByIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsDeleteByIdSignalE(error_type, error_str);
        Q_EMIT retirementGoalsDeleteByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsDeleteByIdSignalError(error_type, error_str);
        Q_EMIT retirementGoalsDeleteByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsDeleteByRetirementgoalidId(const qint32 &retirement_goal_id, const qint32 &id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsDeleteByRetirementgoalidId"][_serverIndices.value("retirementGoalsDeleteByRetirementgoalidId")].URL()+"/api/RetirementGoals/{retirementGoalId}/Expenses/{id}");
    
    
    {
        QString retirement_goal_idPathParam("{");
        retirement_goal_idPathParam.append("retirementGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retirementGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retirementGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(retirement_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retirement_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsDeleteByRetirementgoalidIdCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsDeleteByRetirementgoalidIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignal();
        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignalE(error_type, error_str);
        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignalError(error_type, error_str);
        Q_EMIT retirementGoalsDeleteByRetirementgoalidIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsGetById(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsGetById"][_serverIndices.value("retirementGoalsGetById")].URL()+"/api/RetirementGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsGetByIdCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsGetByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsGetByIdSignal(output);
        Q_EMIT retirementGoalsGetByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsGetByIdSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsGetByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsGetByIdSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsGetByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementExpenseByRetirementgoalidId(const qint32 &retirement_goal_id, const qint32 &id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsGetRetirementExpenseByRetirementgoalidId"][_serverIndices.value("retirementGoalsGetRetirementExpenseByRetirementgoalidId")].URL()+"/api/RetirementGoals/{retirementGoalId}/Expenses/{id}");
    
    
    {
        QString retirement_goal_idPathParam("{");
        retirement_goal_idPathParam.append("retirementGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retirementGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retirementGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(retirement_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retirement_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsGetRetirementExpenseByRetirementgoalidIdCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementExpenseByRetirementgoalidIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignal(output);
        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementExpenseByRetirementgoalidIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid(const qint32 &retirement_goal_id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid"][_serverIndices.value("retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid")].URL()+"/api/RetirementGoals/{retirementGoalId}/Expenses");
    
    
    {
        QString retirement_goal_idPathParam("{");
        retirement_goal_idPathParam.append("retirementGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retirementGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retirementGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(retirement_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retirement_goal_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementExpensesModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignal(output);
        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id) {
    QString fullPath = QString(_serverConfigs["retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid"][_serverIndices.value("retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid")].URL()+"/api/RetirementGoals");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "factFinderId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("factFinderId")).append(querySuffix).append(QUrl::toPercentEncoding(fact_finder_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementGoalsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignal(output);
        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsPostByModel(const OAIRetirementGoalModel &model) {
    QString fullPath = QString(_serverConfigs["retirementGoalsPostByModel"][_serverIndices.value("retirementGoalsPostByModel")].URL()+"/api/RetirementGoals");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsPostByModelCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsPostByModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsPostByModelSignal(output);
        Q_EMIT retirementGoalsPostByModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsPostByModelSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsPostByModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsPostByModelSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsPostByModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsPostByRetirementgoalidModel(const qint32 &retirement_goal_id, const OAIRetirementExpenseModel &model) {
    QString fullPath = QString(_serverConfigs["retirementGoalsPostByRetirementgoalidModel"][_serverIndices.value("retirementGoalsPostByRetirementgoalidModel")].URL()+"/api/RetirementGoals/{retirementGoalId}/Expenses");
    
    
    {
        QString retirement_goal_idPathParam("{");
        retirement_goal_idPathParam.append("retirementGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retirementGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retirementGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(retirement_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retirement_goal_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsPostByRetirementgoalidModelCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsPostByRetirementgoalidModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignal(output);
        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsPostByRetirementgoalidModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsPutByIdModel(const qint32 &id, const OAIRetirementGoalModel &model) {
    QString fullPath = QString(_serverConfigs["retirementGoalsPutByIdModel"][_serverIndices.value("retirementGoalsPutByIdModel")].URL()+"/api/RetirementGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsPutByIdModelCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsPutByIdModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsPutByIdModelSignal(output);
        Q_EMIT retirementGoalsPutByIdModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsPutByIdModelSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsPutByIdModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsPutByIdModelSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsPutByIdModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::retirementGoalsPutByRetirementgoalidIdModel(const qint32 &retirement_goal_id, const qint32 &id, const OAIRetirementExpenseModel &model) {
    QString fullPath = QString(_serverConfigs["retirementGoalsPutByRetirementgoalidIdModel"][_serverIndices.value("retirementGoalsPutByRetirementgoalidIdModel")].URL()+"/api/RetirementGoals/{retirementGoalId}/Expenses/{id}");
    
    
    {
        QString retirement_goal_idPathParam("{");
        retirement_goal_idPathParam.append("retirementGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retirementGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retirementGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(retirement_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retirement_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRetirementGoalsApi::retirementGoalsPutByRetirementgoalidIdModelCallback);
    connect(this, &OAIRetirementGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRetirementGoalsApi::retirementGoalsPutByRetirementgoalidIdModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRetirementExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignal(output);
        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignalE(output, error_type, error_str);
        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignalError(output, error_type, error_str);
        Q_EMIT retirementGoalsPutByRetirementgoalidIdModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRetirementGoalsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
