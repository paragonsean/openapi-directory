/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientsModel::OAIClientsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientsModel::OAIClientsModel() {
    this->initializeModel();
}

OAIClientsModel::~OAIClientsModel() {}

void OAIClientsModel::initializeModel() {

    m_external_destination_name_isSet = false;
    m_external_destination_name_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_plan_action_isSet = false;
    m_plan_action_isValid = false;
}

void OAIClientsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientsModel::fromJsonObject(QJsonObject json) {

    m_external_destination_name_isValid = ::OpenAPI::fromJsonValue(m_external_destination_name, json[QString("externalDestinationName")]);
    m_external_destination_name_isSet = !json[QString("externalDestinationName")].isNull() && m_external_destination_name_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_plan_action_isValid = ::OpenAPI::fromJsonValue(m_plan_action, json[QString("planAction")]);
    m_plan_action_isSet = !json[QString("planAction")].isNull() && m_plan_action_isValid;
}

QString OAIClientsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_external_destination_name_isSet) {
        obj.insert(QString("externalDestinationName"), ::OpenAPI::toJsonValue(m_external_destination_name));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_plan_action_isSet) {
        obj.insert(QString("planAction"), ::OpenAPI::toJsonValue(m_plan_action));
    }
    return obj;
}

QString OAIClientsModel::getExternalDestinationName() const {
    return m_external_destination_name;
}
void OAIClientsModel::setExternalDestinationName(const QString &external_destination_name) {
    m_external_destination_name = external_destination_name;
    m_external_destination_name_isSet = true;
}

bool OAIClientsModel::is_external_destination_name_Set() const{
    return m_external_destination_name_isSet;
}

bool OAIClientsModel::is_external_destination_name_Valid() const{
    return m_external_destination_name_isValid;
}

qint32 OAIClientsModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIClientsModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIClientsModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIClientsModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QString OAIClientsModel::getPlanAction() const {
    return m_plan_action;
}
void OAIClientsModel::setPlanAction(const QString &plan_action) {
    m_plan_action = plan_action;
    m_plan_action_isSet = true;
}

bool OAIClientsModel::is_plan_action_Set() const{
    return m_plan_action_isSet;
}

bool OAIClientsModel::is_plan_action_Valid() const{
    return m_plan_action_isValid;
}

bool OAIClientsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fact_finder_id_isValid && m_plan_action_isValid && true;
}

} // namespace OpenAPI
