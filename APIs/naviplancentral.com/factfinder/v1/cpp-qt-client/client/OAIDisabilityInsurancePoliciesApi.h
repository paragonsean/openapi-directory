/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisabilityInsurancePoliciesApi_H
#define OAI_OAIDisabilityInsurancePoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisabilityInsurancePoliciesModel.h"
#include "OAIDisabilityInsurancePolicyModel.h"
#include "OAIDisabilityInsurancePolicyWithIdModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisabilityInsurancePoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIDisabilityInsurancePoliciesApi(const int timeOut = 0);
    ~OAIDisabilityInsurancePoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void disabilityInsurancePoliciesDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void disabilityInsurancePoliciesGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIDisabilityInsurancePolicyModel [required]
    */
    virtual void disabilityInsurancePoliciesPostByModel(const OAIDisabilityInsurancePolicyModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIDisabilityInsurancePolicyModel [required]
    */
    virtual void disabilityInsurancePoliciesPutByIdModel(const qint32 &id, const OAIDisabilityInsurancePolicyModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disabilityInsurancePoliciesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void disabilityInsurancePoliciesGetByIdCallback(OAIHttpRequestWorker *worker);
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void disabilityInsurancePoliciesPostByModelCallback(OAIHttpRequestWorker *worker);
    void disabilityInsurancePoliciesPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disabilityInsurancePoliciesDeleteByIdSignal();
    void disabilityInsurancePoliciesGetByIdSignal(OAIDisabilityInsurancePolicyWithIdModel summary);
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignal(OAIDisabilityInsurancePoliciesModel summary);
    void disabilityInsurancePoliciesPostByModelSignal(OAIDisabilityInsurancePolicyWithIdModel summary);
    void disabilityInsurancePoliciesPutByIdModelSignal(OAIDisabilityInsurancePolicyWithIdModel summary);


    void disabilityInsurancePoliciesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void disabilityInsurancePoliciesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIDisabilityInsurancePolicyWithIdModel summary);
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIDisabilityInsurancePoliciesModel summary);
    void disabilityInsurancePoliciesPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIDisabilityInsurancePolicyWithIdModel summary);
    void disabilityInsurancePoliciesPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIDisabilityInsurancePolicyWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesDeleteByIdSignalError() instead")
    void disabilityInsurancePoliciesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesGetByIdSignalError() instead")
    void disabilityInsurancePoliciesGetByIdSignalE(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesGetByIdSignalError(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalError() instead")
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalE(OAIDisabilityInsurancePoliciesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalError(OAIDisabilityInsurancePoliciesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesPostByModelSignalError() instead")
    void disabilityInsurancePoliciesPostByModelSignalE(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesPostByModelSignalError(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesPutByIdModelSignalError() instead")
    void disabilityInsurancePoliciesPutByIdModelSignalE(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesPutByIdModelSignalError(OAIDisabilityInsurancePolicyWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesDeleteByIdSignalErrorFull() instead")
    void disabilityInsurancePoliciesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesGetByIdSignalErrorFull() instead")
    void disabilityInsurancePoliciesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesPostByModelSignalErrorFull() instead")
    void disabilityInsurancePoliciesPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disabilityInsurancePoliciesPutByIdModelSignalErrorFull() instead")
    void disabilityInsurancePoliciesPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disabilityInsurancePoliciesPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
