/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEducationGoalsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEducationGoalsApi::OAIEducationGoalsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEducationGoalsApi::~OAIEducationGoalsApi() {
}

void OAIEducationGoalsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://demo.uat.naviplancentral.com/factfinder"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://demo.uat.naviplancentral.com/factfinder"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("educationGoalsDeleteByEducationgoalidId", defaultConf);
    _serverIndices.insert("educationGoalsDeleteByEducationgoalidId", 0);
    _serverConfigs.insert("educationGoalsDeleteById", defaultConf);
    _serverIndices.insert("educationGoalsDeleteById", 0);
    _serverConfigs.insert("educationGoalsGetById", defaultConf);
    _serverIndices.insert("educationGoalsGetById", 0);
    _serverConfigs.insert("educationGoalsGetEducationExpenseByEducationgoalidId", defaultConf);
    _serverIndices.insert("educationGoalsGetEducationExpenseByEducationgoalidId", 0);
    _serverConfigs.insert("educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid", defaultConf);
    _serverIndices.insert("educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid", 0);
    _serverConfigs.insert("educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid", defaultConf);
    _serverIndices.insert("educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid", 0);
    _serverConfigs.insert("educationGoalsPostByEducationgoalidModel", defaultConf);
    _serverIndices.insert("educationGoalsPostByEducationgoalidModel", 0);
    _serverConfigs.insert("educationGoalsPostByModel", defaultConf);
    _serverIndices.insert("educationGoalsPostByModel", 0);
    _serverConfigs.insert("educationGoalsPutByEducationgoalidIdModel", defaultConf);
    _serverIndices.insert("educationGoalsPutByEducationgoalidIdModel", 0);
    _serverConfigs.insert("educationGoalsPutByIdModel", defaultConf);
    _serverIndices.insert("educationGoalsPutByIdModel", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEducationGoalsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEducationGoalsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEducationGoalsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEducationGoalsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEducationGoalsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEducationGoalsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEducationGoalsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEducationGoalsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEducationGoalsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEducationGoalsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEducationGoalsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEducationGoalsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEducationGoalsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEducationGoalsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEducationGoalsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEducationGoalsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEducationGoalsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEducationGoalsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEducationGoalsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEducationGoalsApi::educationGoalsDeleteByEducationgoalidId(const qint32 &education_goal_id, const qint32 &id) {
    QString fullPath = QString(_serverConfigs["educationGoalsDeleteByEducationgoalidId"][_serverIndices.value("educationGoalsDeleteByEducationgoalidId")].URL()+"/api/EducationGoals/{educationGoalId}/Expenses/{id}");
    
    
    {
        QString education_goal_idPathParam("{");
        education_goal_idPathParam.append("educationGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "educationGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"educationGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(education_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(education_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsDeleteByEducationgoalidIdCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsDeleteByEducationgoalidIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignal();
        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignalE(error_type, error_str);
        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignalError(error_type, error_str);
        Q_EMIT educationGoalsDeleteByEducationgoalidIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsDeleteById(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["educationGoalsDeleteById"][_serverIndices.value("educationGoalsDeleteById")].URL()+"/api/EducationGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsDeleteByIdCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsDeleteByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsDeleteByIdSignal();
        Q_EMIT educationGoalsDeleteByIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsDeleteByIdSignalE(error_type, error_str);
        Q_EMIT educationGoalsDeleteByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsDeleteByIdSignalError(error_type, error_str);
        Q_EMIT educationGoalsDeleteByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsGetById(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["educationGoalsGetById"][_serverIndices.value("educationGoalsGetById")].URL()+"/api/EducationGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsGetByIdCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsGetByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsGetByIdSignal(output);
        Q_EMIT educationGoalsGetByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsGetByIdSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsGetByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsGetByIdSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsGetByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsGetEducationExpenseByEducationgoalidId(const qint32 &education_goal_id, const qint32 &id) {
    QString fullPath = QString(_serverConfigs["educationGoalsGetEducationExpenseByEducationgoalidId"][_serverIndices.value("educationGoalsGetEducationExpenseByEducationgoalidId")].URL()+"/api/EducationGoals/{educationGoalId}/Expenses/{id}");
    
    
    {
        QString education_goal_idPathParam("{");
        education_goal_idPathParam.append("educationGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "educationGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"educationGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(education_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(education_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsGetEducationExpenseByEducationgoalidIdCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsGetEducationExpenseByEducationgoalidIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignal(output);
        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationExpenseByEducationgoalidIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid(const qint32 &education_goal_id) {
    QString fullPath = QString(_serverConfigs["educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid"][_serverIndices.value("educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid")].URL()+"/api/EducationGoals/{educationGoalId}/Expenses");
    
    
    {
        QString education_goal_idPathParam("{");
        education_goal_idPathParam.append("educationGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "educationGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"educationGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(education_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(education_goal_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationExpensesModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignal(output);
        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id) {
    QString fullPath = QString(_serverConfigs["educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid"][_serverIndices.value("educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid")].URL()+"/api/EducationGoals");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "factFinderId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("factFinderId")).append(querySuffix).append(QUrl::toPercentEncoding(fact_finder_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationGoalsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignal(output);
        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsPostByEducationgoalidModel(const qint32 &education_goal_id, const OAIEducationExpenseModel &model) {
    QString fullPath = QString(_serverConfigs["educationGoalsPostByEducationgoalidModel"][_serverIndices.value("educationGoalsPostByEducationgoalidModel")].URL()+"/api/EducationGoals/{educationGoalId}/Expenses");
    
    
    {
        QString education_goal_idPathParam("{");
        education_goal_idPathParam.append("educationGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "educationGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"educationGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(education_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(education_goal_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsPostByEducationgoalidModelCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsPostByEducationgoalidModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsPostByEducationgoalidModelSignal(output);
        Q_EMIT educationGoalsPostByEducationgoalidModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsPostByEducationgoalidModelSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsPostByEducationgoalidModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsPostByEducationgoalidModelSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsPostByEducationgoalidModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsPostByModel(const OAIEducationGoalModel &model) {
    QString fullPath = QString(_serverConfigs["educationGoalsPostByModel"][_serverIndices.value("educationGoalsPostByModel")].URL()+"/api/EducationGoals");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsPostByModelCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsPostByModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsPostByModelSignal(output);
        Q_EMIT educationGoalsPostByModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsPostByModelSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsPostByModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsPostByModelSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsPostByModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsPutByEducationgoalidIdModel(const qint32 &education_goal_id, const qint32 &id, const OAIEducationExpenseModel &model) {
    QString fullPath = QString(_serverConfigs["educationGoalsPutByEducationgoalidIdModel"][_serverIndices.value("educationGoalsPutByEducationgoalidIdModel")].URL()+"/api/EducationGoals/{educationGoalId}/Expenses/{id}");
    
    
    {
        QString education_goal_idPathParam("{");
        education_goal_idPathParam.append("educationGoalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "educationGoalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"educationGoalId"+pathSuffix : pathPrefix;
        fullPath.replace(education_goal_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(education_goal_id)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsPutByEducationgoalidIdModelCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsPutByEducationgoalidIdModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationExpenseWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignal(output);
        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsPutByEducationgoalidIdModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::educationGoalsPutByIdModel(const qint32 &id, const OAIEducationGoalModel &model) {
    QString fullPath = QString(_serverConfigs["educationGoalsPutByIdModel"][_serverIndices.value("educationGoalsPutByIdModel")].URL()+"/api/EducationGoals/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = model.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEducationGoalsApi::educationGoalsPutByIdModelCallback);
    connect(this, &OAIEducationGoalsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEducationGoalsApi::educationGoalsPutByIdModelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEducationGoalWithIdModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT educationGoalsPutByIdModelSignal(output);
        Q_EMIT educationGoalsPutByIdModelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT educationGoalsPutByIdModelSignalE(output, error_type, error_str);
        Q_EMIT educationGoalsPutByIdModelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT educationGoalsPutByIdModelSignalError(output, error_type, error_str);
        Q_EMIT educationGoalsPutByIdModelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEducationGoalsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
