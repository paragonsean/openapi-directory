/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifestyleAssetWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifestyleAssetWithIdModel::OAILifestyleAssetWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifestyleAssetWithIdModel::OAILifestyleAssetWithIdModel() {
    this->initializeModel();
}

OAILifestyleAssetWithIdModel::~OAILifestyleAssetWithIdModel() {}

void OAILifestyleAssetWithIdModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_lifestyle_asset_id_isSet = false;
    m_lifestyle_asset_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_purchase_amount_isSet = false;
    m_purchase_amount_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILifestyleAssetWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifestyleAssetWithIdModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_lifestyle_asset_id_isValid = ::OpenAPI::fromJsonValue(m_lifestyle_asset_id, json[QString("lifestyleAssetId")]);
    m_lifestyle_asset_id_isSet = !json[QString("lifestyleAssetId")].isNull() && m_lifestyle_asset_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_purchase_amount_isValid = ::OpenAPI::fromJsonValue(m_purchase_amount, json[QString("purchaseAmount")]);
    m_purchase_amount_isSet = !json[QString("purchaseAmount")].isNull() && m_purchase_amount_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILifestyleAssetWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifestyleAssetWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_lifestyle_asset_id_isSet) {
        obj.insert(QString("lifestyleAssetId"), ::OpenAPI::toJsonValue(m_lifestyle_asset_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_market_value_isSet) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_purchase_amount_isSet) {
        obj.insert(QString("purchaseAmount"), ::OpenAPI::toJsonValue(m_purchase_amount));
    }
    if (m_purchase_date_isSet) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILifestyleAssetWithIdModel::getDescription() const {
    return m_description;
}
void OAILifestyleAssetWithIdModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAILifestyleAssetWithIdModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILifestyleAssetWithIdModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAILifestyleAssetWithIdModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAILifestyleAssetWithIdModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAILifestyleAssetWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAILifestyleAssetWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAILifestyleAssetWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAILifestyleAssetWithIdModel::getLifestyleAssetId() const {
    return m_lifestyle_asset_id;
}
void OAILifestyleAssetWithIdModel::setLifestyleAssetId(const qint32 &lifestyle_asset_id) {
    m_lifestyle_asset_id = lifestyle_asset_id;
    m_lifestyle_asset_id_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_lifestyle_asset_id_Set() const{
    return m_lifestyle_asset_id_isSet;
}

bool OAILifestyleAssetWithIdModel::is_lifestyle_asset_id_Valid() const{
    return m_lifestyle_asset_id_isValid;
}

QList<OAIObjectLink> OAILifestyleAssetWithIdModel::getLinks() const {
    return m_links;
}
void OAILifestyleAssetWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAILifestyleAssetWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

double OAILifestyleAssetWithIdModel::getMarketValue() const {
    return m_market_value;
}
void OAILifestyleAssetWithIdModel::setMarketValue(const double &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAILifestyleAssetWithIdModel::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAILifestyleAssetWithIdModel::getOwner() const {
    return m_owner;
}
void OAILifestyleAssetWithIdModel::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAILifestyleAssetWithIdModel::is_owner_Valid() const{
    return m_owner_isValid;
}

double OAILifestyleAssetWithIdModel::getPurchaseAmount() const {
    return m_purchase_amount;
}
void OAILifestyleAssetWithIdModel::setPurchaseAmount(const double &purchase_amount) {
    m_purchase_amount = purchase_amount;
    m_purchase_amount_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_purchase_amount_Set() const{
    return m_purchase_amount_isSet;
}

bool OAILifestyleAssetWithIdModel::is_purchase_amount_Valid() const{
    return m_purchase_amount_isValid;
}

QDateTime OAILifestyleAssetWithIdModel::getPurchaseDate() const {
    return m_purchase_date;
}
void OAILifestyleAssetWithIdModel::setPurchaseDate(const QDateTime &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAILifestyleAssetWithIdModel::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

qint32 OAILifestyleAssetWithIdModel::getType() const {
    return m_type;
}
void OAILifestyleAssetWithIdModel::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILifestyleAssetWithIdModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAILifestyleAssetWithIdModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILifestyleAssetWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifestyle_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifestyleAssetWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
