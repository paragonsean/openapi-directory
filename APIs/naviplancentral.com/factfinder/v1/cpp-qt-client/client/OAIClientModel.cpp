/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientModel::OAIClientModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientModel::OAIClientModel() {
    this->initializeModel();
}

OAIClientModel::~OAIClientModel() {}

void OAIClientModel::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_owner_user_isSet = false;
    m_owner_user_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIClientModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientModel::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_owner_user_isValid = ::OpenAPI::fromJsonValue(m_owner_user, json[QString("ownerUser")]);
    m_owner_user_isSet = !json[QString("ownerUser")].isNull() && m_owner_user_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIClientModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientModel::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_owner_user_isSet) {
        obj.insert(QString("ownerUser"), ::OpenAPI::toJsonValue(m_owner_user));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

qint32 OAIClientModel::getClientId() const {
    return m_client_id;
}
void OAIClientModel::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIClientModel::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIClientModel::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIClientModel::getMessage() const {
    return m_message;
}
void OAIClientModel::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIClientModel::is_message_Set() const{
    return m_message_isSet;
}

bool OAIClientModel::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIClientModel::getOwnerUser() const {
    return m_owner_user;
}
void OAIClientModel::setOwnerUser(const QString &owner_user) {
    m_owner_user = owner_user;
    m_owner_user_isSet = true;
}

bool OAIClientModel::is_owner_user_Set() const{
    return m_owner_user_isSet;
}

bool OAIClientModel::is_owner_user_Valid() const{
    return m_owner_user_isValid;
}

qint32 OAIClientModel::getPlanId() const {
    return m_plan_id;
}
void OAIClientModel::setPlanId(const qint32 &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIClientModel::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIClientModel::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

bool OAIClientModel::isSuccess() const {
    return m_success;
}
void OAIClientModel::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIClientModel::is_success_Set() const{
    return m_success_isSet;
}

bool OAIClientModel::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIClientModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
