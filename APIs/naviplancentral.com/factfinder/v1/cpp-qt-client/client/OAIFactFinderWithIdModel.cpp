/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactFinderWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactFinderWithIdModel::OAIFactFinderWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactFinderWithIdModel::OAIFactFinderWithIdModel() {
    this->initializeModel();
}

OAIFactFinderWithIdModel::~OAIFactFinderWithIdModel() {}

void OAIFactFinderWithIdModel::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_household_id_isSet = false;
    m_household_id_isValid = false;

    m_last_status_update_isSet = false;
    m_last_status_update_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_level_isSet = false;
    m_plan_level_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIFactFinderWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactFinderWithIdModel::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_household_id_isValid = ::OpenAPI::fromJsonValue(m_household_id, json[QString("householdId")]);
    m_household_id_isSet = !json[QString("householdId")].isNull() && m_household_id_isValid;

    m_last_status_update_isValid = ::OpenAPI::fromJsonValue(m_last_status_update, json[QString("lastStatusUpdate")]);
    m_last_status_update_isSet = !json[QString("lastStatusUpdate")].isNull() && m_last_status_update_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_plan_level_isValid = ::OpenAPI::fromJsonValue(m_plan_level, json[QString("planLevel")]);
    m_plan_level_isSet = !json[QString("planLevel")].isNull() && m_plan_level_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIFactFinderWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactFinderWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_household_id_isSet) {
        obj.insert(QString("householdId"), ::OpenAPI::toJsonValue(m_household_id));
    }
    if (m_last_status_update_isSet) {
        obj.insert(QString("lastStatusUpdate"), ::OpenAPI::toJsonValue(m_last_status_update));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_modules.isSet()) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_level_isSet) {
        obj.insert(QString("planLevel"), ::OpenAPI::toJsonValue(m_plan_level));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIFactFinderWithIdModel::getCountryCode() const {
    return m_country_code;
}
void OAIFactFinderWithIdModel::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIFactFinderWithIdModel::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIFactFinderWithIdModel::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QDateTime OAIFactFinderWithIdModel::getCreated() const {
    return m_created;
}
void OAIFactFinderWithIdModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIFactFinderWithIdModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAIFactFinderWithIdModel::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIFactFinderWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIFactFinderWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIFactFinderWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIFactFinderWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAIFactFinderWithIdModel::getHouseholdId() const {
    return m_household_id;
}
void OAIFactFinderWithIdModel::setHouseholdId(const qint32 &household_id) {
    m_household_id = household_id;
    m_household_id_isSet = true;
}

bool OAIFactFinderWithIdModel::is_household_id_Set() const{
    return m_household_id_isSet;
}

bool OAIFactFinderWithIdModel::is_household_id_Valid() const{
    return m_household_id_isValid;
}

QDateTime OAIFactFinderWithIdModel::getLastStatusUpdate() const {
    return m_last_status_update;
}
void OAIFactFinderWithIdModel::setLastStatusUpdate(const QDateTime &last_status_update) {
    m_last_status_update = last_status_update;
    m_last_status_update_isSet = true;
}

bool OAIFactFinderWithIdModel::is_last_status_update_Set() const{
    return m_last_status_update_isSet;
}

bool OAIFactFinderWithIdModel::is_last_status_update_Valid() const{
    return m_last_status_update_isValid;
}

QList<OAIObjectLink> OAIFactFinderWithIdModel::getLinks() const {
    return m_links;
}
void OAIFactFinderWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIFactFinderWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIFactFinderWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

OAIFactFinderModulesModel OAIFactFinderWithIdModel::getModules() const {
    return m_modules;
}
void OAIFactFinderWithIdModel::setModules(const OAIFactFinderModulesModel &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAIFactFinderWithIdModel::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAIFactFinderWithIdModel::is_modules_Valid() const{
    return m_modules_isValid;
}

qint32 OAIFactFinderWithIdModel::getPlanId() const {
    return m_plan_id;
}
void OAIFactFinderWithIdModel::setPlanId(const qint32 &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIFactFinderWithIdModel::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIFactFinderWithIdModel::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIFactFinderWithIdModel::getPlanLevel() const {
    return m_plan_level;
}
void OAIFactFinderWithIdModel::setPlanLevel(const QString &plan_level) {
    m_plan_level = plan_level;
    m_plan_level_isSet = true;
}

bool OAIFactFinderWithIdModel::is_plan_level_Set() const{
    return m_plan_level_isSet;
}

bool OAIFactFinderWithIdModel::is_plan_level_Valid() const{
    return m_plan_level_isValid;
}

QString OAIFactFinderWithIdModel::getStatus() const {
    return m_status;
}
void OAIFactFinderWithIdModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFactFinderWithIdModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFactFinderWithIdModel::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFactFinderWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_household_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactFinderWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
