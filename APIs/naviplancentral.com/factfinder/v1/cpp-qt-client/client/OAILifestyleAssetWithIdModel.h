/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILifestyleAssetWithIdModel.h
 *
 * 
 */

#ifndef OAILifestyleAssetWithIdModel_H
#define OAILifestyleAssetWithIdModel_H

#include <QJsonObject>

#include "OAIObjectLink.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjectLink;

class OAILifestyleAssetWithIdModel : public OAIObject {
public:
    OAILifestyleAssetWithIdModel();
    OAILifestyleAssetWithIdModel(QString json);
    ~OAILifestyleAssetWithIdModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExternalDestinationId() const;
    void setExternalDestinationId(const QString &external_destination_id);
    bool is_external_destination_id_Set() const;
    bool is_external_destination_id_Valid() const;

    qint32 getFactFinderId() const;
    void setFactFinderId(const qint32 &fact_finder_id);
    bool is_fact_finder_id_Set() const;
    bool is_fact_finder_id_Valid() const;

    qint32 getLifestyleAssetId() const;
    void setLifestyleAssetId(const qint32 &lifestyle_asset_id);
    bool is_lifestyle_asset_id_Set() const;
    bool is_lifestyle_asset_id_Valid() const;

    QList<OAIObjectLink> getLinks() const;
    void setLinks(const QList<OAIObjectLink> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    double getMarketValue() const;
    void setMarketValue(const double &market_value);
    bool is_market_value_Set() const;
    bool is_market_value_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    double getPurchaseAmount() const;
    void setPurchaseAmount(const double &purchase_amount);
    bool is_purchase_amount_Set() const;
    bool is_purchase_amount_Valid() const;

    QDateTime getPurchaseDate() const;
    void setPurchaseDate(const QDateTime &purchase_date);
    bool is_purchase_date_Set() const;
    bool is_purchase_date_Valid() const;

    qint32 getType() const;
    void setType(const qint32 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_external_destination_id;
    bool m_external_destination_id_isSet;
    bool m_external_destination_id_isValid;

    qint32 m_fact_finder_id;
    bool m_fact_finder_id_isSet;
    bool m_fact_finder_id_isValid;

    qint32 m_lifestyle_asset_id;
    bool m_lifestyle_asset_id_isSet;
    bool m_lifestyle_asset_id_isValid;

    QList<OAIObjectLink> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    double m_market_value;
    bool m_market_value_isSet;
    bool m_market_value_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    double m_purchase_amount;
    bool m_purchase_amount_isSet;
    bool m_purchase_amount_isValid;

    QDateTime m_purchase_date;
    bool m_purchase_date_isSet;
    bool m_purchase_date_isValid;

    qint32 m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILifestyleAssetWithIdModel)

#endif // OAILifestyleAssetWithIdModel_H
