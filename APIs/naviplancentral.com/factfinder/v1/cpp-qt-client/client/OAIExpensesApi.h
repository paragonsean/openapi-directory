/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpensesApi_H
#define OAI_OAIExpensesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpenseModel.h"
#include "OAIExpenseWithIdModel.h"
#include "OAIExpensesModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpensesApi : public QObject {
    Q_OBJECT

public:
    OAIExpensesApi(const int timeOut = 0);
    ~OAIExpensesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void expensesDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void expensesGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void expensesGetExpensesByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIExpenseModel [required]
    */
    virtual void expensesPostByModel(const OAIExpenseModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIExpenseModel [required]
    */
    virtual void expensesPutByIdModel(const qint32 &id, const OAIExpenseModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expensesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void expensesGetByIdCallback(OAIHttpRequestWorker *worker);
    void expensesGetExpensesByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void expensesPostByModelCallback(OAIHttpRequestWorker *worker);
    void expensesPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expensesDeleteByIdSignal();
    void expensesGetByIdSignal(OAIExpenseWithIdModel summary);
    void expensesGetExpensesByFactFinderIdByFactfinderidSignal(OAIExpensesModel summary);
    void expensesPostByModelSignal(OAIExpenseWithIdModel summary);
    void expensesPutByIdModelSignal(OAIExpenseWithIdModel summary);


    void expensesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void expensesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIExpenseWithIdModel summary);
    void expensesGetExpensesByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIExpensesModel summary);
    void expensesPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIExpenseWithIdModel summary);
    void expensesPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIExpenseWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use expensesDeleteByIdSignalError() instead")
    void expensesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expensesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesGetByIdSignalError() instead")
    void expensesGetByIdSignalE(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesGetByIdSignalError(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesGetExpensesByFactFinderIdByFactfinderidSignalError() instead")
    void expensesGetExpensesByFactFinderIdByFactfinderidSignalE(OAIExpensesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesGetExpensesByFactFinderIdByFactfinderidSignalError(OAIExpensesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesPostByModelSignalError() instead")
    void expensesPostByModelSignalE(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesPostByModelSignalError(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesPutByIdModelSignalError() instead")
    void expensesPutByIdModelSignalE(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesPutByIdModelSignalError(OAIExpenseWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expensesDeleteByIdSignalErrorFull() instead")
    void expensesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesGetByIdSignalErrorFull() instead")
    void expensesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesGetExpensesByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void expensesGetExpensesByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesGetExpensesByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesPostByModelSignalErrorFull() instead")
    void expensesPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expensesPutByIdModelSignalErrorFull() instead")
    void expensesPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expensesPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
