/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpensesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpensesModel::OAIExpensesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpensesModel::OAIExpensesModel() {
    this->initializeModel();
}

OAIExpensesModel::~OAIExpensesModel() {}

void OAIExpensesModel::initializeModel() {

    m_expenses_isSet = false;
    m_expenses_isValid = false;
}

void OAIExpensesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpensesModel::fromJsonObject(QJsonObject json) {

    m_expenses_isValid = ::OpenAPI::fromJsonValue(m_expenses, json[QString("expenses")]);
    m_expenses_isSet = !json[QString("expenses")].isNull() && m_expenses_isValid;
}

QString OAIExpensesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpensesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_expenses.size() > 0) {
        obj.insert(QString("expenses"), ::OpenAPI::toJsonValue(m_expenses));
    }
    return obj;
}

QList<OAIExpenseWithIdModel> OAIExpensesModel::getExpenses() const {
    return m_expenses;
}
void OAIExpensesModel::setExpenses(const QList<OAIExpenseWithIdModel> &expenses) {
    m_expenses = expenses;
    m_expenses_isSet = true;
}

bool OAIExpensesModel::is_expenses_Set() const{
    return m_expenses_isSet;
}

bool OAIExpensesModel::is_expenses_Valid() const{
    return m_expenses_isValid;
}

bool OAIExpensesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpensesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
