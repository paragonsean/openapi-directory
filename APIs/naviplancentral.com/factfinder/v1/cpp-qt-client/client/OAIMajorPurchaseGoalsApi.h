/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMajorPurchaseGoalsApi_H
#define OAI_OAIMajorPurchaseGoalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMajorPurchaseGoalModel.h"
#include "OAIMajorPurchaseGoalWithIdModel.h"
#include "OAIMajorPurchaseGoalsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMajorPurchaseGoalsApi : public QObject {
    Q_OBJECT

public:
    OAIMajorPurchaseGoalsApi(const int timeOut = 0);
    ~OAIMajorPurchaseGoalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void majorPurchaseGoalsDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void majorPurchaseGoalsGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    */
    virtual void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderid(const qint32 &fact_finder_id);

    /**
    * @param[in]  model OAIMajorPurchaseGoalModel [required]
    */
    virtual void majorPurchaseGoalsPostByModel(const OAIMajorPurchaseGoalModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAIMajorPurchaseGoalModel [required]
    */
    virtual void majorPurchaseGoalsPutByIdModel(const qint32 &id, const OAIMajorPurchaseGoalModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void majorPurchaseGoalsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void majorPurchaseGoalsGetByIdCallback(OAIHttpRequestWorker *worker);
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidCallback(OAIHttpRequestWorker *worker);
    void majorPurchaseGoalsPostByModelCallback(OAIHttpRequestWorker *worker);
    void majorPurchaseGoalsPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void majorPurchaseGoalsDeleteByIdSignal();
    void majorPurchaseGoalsGetByIdSignal(OAIMajorPurchaseGoalWithIdModel summary);
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignal(OAIMajorPurchaseGoalsModel summary);
    void majorPurchaseGoalsPostByModelSignal(OAIMajorPurchaseGoalWithIdModel summary);
    void majorPurchaseGoalsPutByIdModelSignal(OAIMajorPurchaseGoalWithIdModel summary);


    void majorPurchaseGoalsDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void majorPurchaseGoalsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIMajorPurchaseGoalWithIdModel summary);
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalFull(OAIHttpRequestWorker *worker, OAIMajorPurchaseGoalsModel summary);
    void majorPurchaseGoalsPostByModelSignalFull(OAIHttpRequestWorker *worker, OAIMajorPurchaseGoalWithIdModel summary);
    void majorPurchaseGoalsPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAIMajorPurchaseGoalWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsDeleteByIdSignalError() instead")
    void majorPurchaseGoalsDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsGetByIdSignalError() instead")
    void majorPurchaseGoalsGetByIdSignalE(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsGetByIdSignalError(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalError() instead")
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalE(OAIMajorPurchaseGoalsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalError(OAIMajorPurchaseGoalsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsPostByModelSignalError() instead")
    void majorPurchaseGoalsPostByModelSignalE(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsPostByModelSignalError(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsPutByIdModelSignalError() instead")
    void majorPurchaseGoalsPutByIdModelSignalE(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsPutByIdModelSignalError(OAIMajorPurchaseGoalWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsDeleteByIdSignalErrorFull() instead")
    void majorPurchaseGoalsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsGetByIdSignalErrorFull() instead")
    void majorPurchaseGoalsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalErrorFull() instead")
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsPostByModelSignalErrorFull() instead")
    void majorPurchaseGoalsPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use majorPurchaseGoalsPutByIdModelSignalErrorFull() instead")
    void majorPurchaseGoalsPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void majorPurchaseGoalsPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
