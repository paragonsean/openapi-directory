/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactFinderSnapshotWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactFinderSnapshotWithIdModel::OAIFactFinderSnapshotWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactFinderSnapshotWithIdModel::OAIFactFinderSnapshotWithIdModel() {
    this->initializeModel();
}

OAIFactFinderSnapshotWithIdModel::~OAIFactFinderSnapshotWithIdModel() {}

void OAIFactFinderSnapshotWithIdModel::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_fact_finder_data_isSet = false;
    m_fact_finder_data_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_fact_finder_status_isSet = false;
    m_fact_finder_status_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAIFactFinderSnapshotWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactFinderSnapshotWithIdModel::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_fact_finder_data_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_data, json[QString("factFinderData")]);
    m_fact_finder_data_isSet = !json[QString("factFinderData")].isNull() && m_fact_finder_data_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_fact_finder_status_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_status, json[QString("factFinderStatus")]);
    m_fact_finder_status_isSet = !json[QString("factFinderStatus")].isNull() && m_fact_finder_status_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshotId")]);
    m_snapshot_id_isSet = !json[QString("snapshotId")].isNull() && m_snapshot_id_isValid;
}

QString OAIFactFinderSnapshotWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactFinderSnapshotWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_fact_finder_data.isSet()) {
        obj.insert(QString("factFinderData"), ::OpenAPI::toJsonValue(m_fact_finder_data));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_fact_finder_status_isSet) {
        obj.insert(QString("factFinderStatus"), ::OpenAPI::toJsonValue(m_fact_finder_status));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

QDateTime OAIFactFinderSnapshotWithIdModel::getCreated() const {
    return m_created;
}
void OAIFactFinderSnapshotWithIdModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIFactFinderSnapshotWithIdModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAIFactFinderSnapshotWithIdModel::is_created_Valid() const{
    return m_created_isValid;
}

OAIIFactFinderSnapshotDomainObject OAIFactFinderSnapshotWithIdModel::getFactFinderData() const {
    return m_fact_finder_data;
}
void OAIFactFinderSnapshotWithIdModel::setFactFinderData(const OAIIFactFinderSnapshotDomainObject &fact_finder_data) {
    m_fact_finder_data = fact_finder_data;
    m_fact_finder_data_isSet = true;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_data_Set() const{
    return m_fact_finder_data_isSet;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_data_Valid() const{
    return m_fact_finder_data_isValid;
}

qint32 OAIFactFinderSnapshotWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIFactFinderSnapshotWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QString OAIFactFinderSnapshotWithIdModel::getFactFinderStatus() const {
    return m_fact_finder_status;
}
void OAIFactFinderSnapshotWithIdModel::setFactFinderStatus(const QString &fact_finder_status) {
    m_fact_finder_status = fact_finder_status;
    m_fact_finder_status_isSet = true;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_status_Set() const{
    return m_fact_finder_status_isSet;
}

bool OAIFactFinderSnapshotWithIdModel::is_fact_finder_status_Valid() const{
    return m_fact_finder_status_isValid;
}

qint32 OAIFactFinderSnapshotWithIdModel::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIFactFinderSnapshotWithIdModel::setSnapshotId(const qint32 &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIFactFinderSnapshotWithIdModel::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIFactFinderSnapshotWithIdModel::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAIFactFinderSnapshotWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactFinderSnapshotWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
