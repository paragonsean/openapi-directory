/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountWithSubEntitiesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountWithSubEntitiesModel::OAIAccountWithSubEntitiesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountWithSubEntitiesModel::OAIAccountWithSubEntitiesModel() {
    this->initializeModel();
}

OAIAccountWithSubEntitiesModel::~OAIAccountWithSubEntitiesModel() {}

void OAIAccountWithSubEntitiesModel::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_external_source_id_isSet = false;
    m_external_source_id_isValid = false;

    m_external_source_name_isSet = false;
    m_external_source_name_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_holdings_isSet = false;
    m_holdings_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_owner_dependent_id_isSet = false;
    m_owner_dependent_id_isValid = false;

    m_savings_strategies_isSet = false;
    m_savings_strategies_isValid = false;
}

void OAIAccountWithSubEntitiesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountWithSubEntitiesModel::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_external_source_id_isValid = ::OpenAPI::fromJsonValue(m_external_source_id, json[QString("externalSourceId")]);
    m_external_source_id_isSet = !json[QString("externalSourceId")].isNull() && m_external_source_id_isValid;

    m_external_source_name_isValid = ::OpenAPI::fromJsonValue(m_external_source_name, json[QString("externalSourceName")]);
    m_external_source_name_isSet = !json[QString("externalSourceName")].isNull() && m_external_source_name_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_holdings_isValid = ::OpenAPI::fromJsonValue(m_holdings, json[QString("holdings")]);
    m_holdings_isSet = !json[QString("holdings")].isNull() && m_holdings_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_owner_dependent_id_isValid = ::OpenAPI::fromJsonValue(m_owner_dependent_id, json[QString("ownerDependentId")]);
    m_owner_dependent_id_isSet = !json[QString("ownerDependentId")].isNull() && m_owner_dependent_id_isValid;

    m_savings_strategies_isValid = ::OpenAPI::fromJsonValue(m_savings_strategies, json[QString("savingsStrategies")]);
    m_savings_strategies_isSet = !json[QString("savingsStrategies")].isNull() && m_savings_strategies_isValid;
}

QString OAIAccountWithSubEntitiesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountWithSubEntitiesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_external_source_id_isSet) {
        obj.insert(QString("externalSourceId"), ::OpenAPI::toJsonValue(m_external_source_id));
    }
    if (m_external_source_name_isSet) {
        obj.insert(QString("externalSourceName"), ::OpenAPI::toJsonValue(m_external_source_name));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_holdings.size() > 0) {
        obj.insert(QString("holdings"), ::OpenAPI::toJsonValue(m_holdings));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_market_value_isSet) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_owner_dependent_id_isSet) {
        obj.insert(QString("ownerDependentId"), ::OpenAPI::toJsonValue(m_owner_dependent_id));
    }
    if (m_savings_strategies.size() > 0) {
        obj.insert(QString("savingsStrategies"), ::OpenAPI::toJsonValue(m_savings_strategies));
    }
    return obj;
}

qint32 OAIAccountWithSubEntitiesModel::getAccountId() const {
    return m_account_id;
}
void OAIAccountWithSubEntitiesModel::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAIAccountWithSubEntitiesModel::getAccountType() const {
    return m_account_type;
}
void OAIAccountWithSubEntitiesModel::setAccountType(const qint32 &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIAccountWithSubEntitiesModel::getDescription() const {
    return m_description;
}
void OAIAccountWithSubEntitiesModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountWithSubEntitiesModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIAccountWithSubEntitiesModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

QString OAIAccountWithSubEntitiesModel::getExternalSourceId() const {
    return m_external_source_id;
}
void OAIAccountWithSubEntitiesModel::setExternalSourceId(const QString &external_source_id) {
    m_external_source_id = external_source_id;
    m_external_source_id_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_external_source_id_Set() const{
    return m_external_source_id_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_external_source_id_Valid() const{
    return m_external_source_id_isValid;
}

QString OAIAccountWithSubEntitiesModel::getExternalSourceName() const {
    return m_external_source_name;
}
void OAIAccountWithSubEntitiesModel::setExternalSourceName(const QString &external_source_name) {
    m_external_source_name = external_source_name;
    m_external_source_name_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_external_source_name_Set() const{
    return m_external_source_name_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_external_source_name_Valid() const{
    return m_external_source_name_isValid;
}

qint32 OAIAccountWithSubEntitiesModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIAccountWithSubEntitiesModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QList<OAIAccountHoldingWithIdModel> OAIAccountWithSubEntitiesModel::getHoldings() const {
    return m_holdings;
}
void OAIAccountWithSubEntitiesModel::setHoldings(const QList<OAIAccountHoldingWithIdModel> &holdings) {
    m_holdings = holdings;
    m_holdings_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_holdings_Set() const{
    return m_holdings_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_holdings_Valid() const{
    return m_holdings_isValid;
}

QDateTime OAIAccountWithSubEntitiesModel::getLastUpdated() const {
    return m_last_updated;
}
void OAIAccountWithSubEntitiesModel::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<OAIObjectLink> OAIAccountWithSubEntitiesModel::getLinks() const {
    return m_links;
}
void OAIAccountWithSubEntitiesModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_links_Valid() const{
    return m_links_isValid;
}

double OAIAccountWithSubEntitiesModel::getMarketValue() const {
    return m_market_value;
}
void OAIAccountWithSubEntitiesModel::setMarketValue(const double &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIAccountWithSubEntitiesModel::getOwner() const {
    return m_owner;
}
void OAIAccountWithSubEntitiesModel::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIAccountWithSubEntitiesModel::getOwnerDependentId() const {
    return m_owner_dependent_id;
}
void OAIAccountWithSubEntitiesModel::setOwnerDependentId(const qint32 &owner_dependent_id) {
    m_owner_dependent_id = owner_dependent_id;
    m_owner_dependent_id_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_owner_dependent_id_Set() const{
    return m_owner_dependent_id_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_owner_dependent_id_Valid() const{
    return m_owner_dependent_id_isValid;
}

QList<OAISavingsStrategyWithIdModel> OAIAccountWithSubEntitiesModel::getSavingsStrategies() const {
    return m_savings_strategies;
}
void OAIAccountWithSubEntitiesModel::setSavingsStrategies(const QList<OAISavingsStrategyWithIdModel> &savings_strategies) {
    m_savings_strategies = savings_strategies;
    m_savings_strategies_isSet = true;
}

bool OAIAccountWithSubEntitiesModel::is_savings_strategies_Set() const{
    return m_savings_strategies_isSet;
}

bool OAIAccountWithSubEntitiesModel::is_savings_strategies_Valid() const{
    return m_savings_strategies_isValid;
}

bool OAIAccountWithSubEntitiesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_dependent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_strategies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountWithSubEntitiesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
