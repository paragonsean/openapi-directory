/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiabilitiesApi_H
#define OAI_OAILiabilitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILiabilitiesModel.h"
#include "OAILiabilityModel.h"
#include "OAILiabilityWithIdModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiabilitiesApi : public QObject {
    Q_OBJECT

public:
    OAILiabilitiesApi(const int timeOut = 0);
    ~OAILiabilitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void liabilitiesDeleteById(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void liabilitiesGetById(const qint32 &id);

    /**
    * @param[in]  fact_finder_id qint32 [required]
    * @param[in]  external_source_id QString [optional]
    */
    virtual void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid(const qint32 &fact_finder_id, const ::OpenAPI::OptionalParam<QString> &external_source_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model OAILiabilityModel [required]
    */
    virtual void liabilitiesPostByModel(const OAILiabilityModel &model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  model OAILiabilityModel [required]
    */
    virtual void liabilitiesPutByIdModel(const qint32 &id, const OAILiabilityModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void liabilitiesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void liabilitiesGetByIdCallback(OAIHttpRequestWorker *worker);
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidCallback(OAIHttpRequestWorker *worker);
    void liabilitiesPostByModelCallback(OAIHttpRequestWorker *worker);
    void liabilitiesPutByIdModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void liabilitiesDeleteByIdSignal();
    void liabilitiesGetByIdSignal(OAILiabilityWithIdModel summary);
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignal(OAILiabilitiesModel summary);
    void liabilitiesPostByModelSignal(OAILiabilityWithIdModel summary);
    void liabilitiesPutByIdModelSignal(OAILiabilityWithIdModel summary);


    void liabilitiesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void liabilitiesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAILiabilityWithIdModel summary);
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalFull(OAIHttpRequestWorker *worker, OAILiabilitiesModel summary);
    void liabilitiesPostByModelSignalFull(OAIHttpRequestWorker *worker, OAILiabilityWithIdModel summary);
    void liabilitiesPutByIdModelSignalFull(OAIHttpRequestWorker *worker, OAILiabilityWithIdModel summary);

    Q_DECL_DEPRECATED_X("Use liabilitiesDeleteByIdSignalError() instead")
    void liabilitiesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetByIdSignalError() instead")
    void liabilitiesGetByIdSignalE(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetByIdSignalError(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalError() instead")
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalE(OAILiabilitiesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalError(OAILiabilitiesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesPostByModelSignalError() instead")
    void liabilitiesPostByModelSignalE(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesPostByModelSignalError(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesPutByIdModelSignalError() instead")
    void liabilitiesPutByIdModelSignalE(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesPutByIdModelSignalError(OAILiabilityWithIdModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use liabilitiesDeleteByIdSignalErrorFull() instead")
    void liabilitiesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetByIdSignalErrorFull() instead")
    void liabilitiesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalErrorFull() instead")
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesPostByModelSignalErrorFull() instead")
    void liabilitiesPostByModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesPostByModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesPutByIdModelSignalErrorFull() instead")
    void liabilitiesPutByIdModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesPutByIdModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
