/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMajorPurchaseGoalWithIdModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMajorPurchaseGoalWithIdModel::OAIMajorPurchaseGoalWithIdModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMajorPurchaseGoalWithIdModel::OAIMajorPurchaseGoalWithIdModel() {
    this->initializeModel();
}

OAIMajorPurchaseGoalWithIdModel::~OAIMajorPurchaseGoalWithIdModel() {}

void OAIMajorPurchaseGoalWithIdModel::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_major_purchase_goal_id_isSet = false;
    m_major_purchase_goal_id_isValid = false;

    m_major_purchase_goal_type_id_isSet = false;
    m_major_purchase_goal_type_id_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_target_date_isSet = false;
    m_target_date_isValid = false;
}

void OAIMajorPurchaseGoalWithIdModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMajorPurchaseGoalWithIdModel::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_major_purchase_goal_id_isValid = ::OpenAPI::fromJsonValue(m_major_purchase_goal_id, json[QString("majorPurchaseGoalId")]);
    m_major_purchase_goal_id_isSet = !json[QString("majorPurchaseGoalId")].isNull() && m_major_purchase_goal_id_isValid;

    m_major_purchase_goal_type_id_isValid = ::OpenAPI::fromJsonValue(m_major_purchase_goal_type_id, json[QString("majorPurchaseGoalTypeId")]);
    m_major_purchase_goal_type_id_isSet = !json[QString("majorPurchaseGoalTypeId")].isNull() && m_major_purchase_goal_type_id_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_target_date_isValid = ::OpenAPI::fromJsonValue(m_target_date, json[QString("targetDate")]);
    m_target_date_isSet = !json[QString("targetDate")].isNull() && m_target_date_isValid;
}

QString OAIMajorPurchaseGoalWithIdModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMajorPurchaseGoalWithIdModel::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_major_purchase_goal_id_isSet) {
        obj.insert(QString("majorPurchaseGoalId"), ::OpenAPI::toJsonValue(m_major_purchase_goal_id));
    }
    if (m_major_purchase_goal_type_id_isSet) {
        obj.insert(QString("majorPurchaseGoalTypeId"), ::OpenAPI::toJsonValue(m_major_purchase_goal_type_id));
    }
    if (m_member_isSet) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_target_date_isSet) {
        obj.insert(QString("targetDate"), ::OpenAPI::toJsonValue(m_target_date));
    }
    return obj;
}

double OAIMajorPurchaseGoalWithIdModel::getAmount() const {
    return m_amount;
}
void OAIMajorPurchaseGoalWithIdModel::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIMajorPurchaseGoalWithIdModel::getDescription() const {
    return m_description;
}
void OAIMajorPurchaseGoalWithIdModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMajorPurchaseGoalWithIdModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIMajorPurchaseGoalWithIdModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIMajorPurchaseGoalWithIdModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIMajorPurchaseGoalWithIdModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

QList<OAIObjectLink> OAIMajorPurchaseGoalWithIdModel::getLinks() const {
    return m_links;
}
void OAIMajorPurchaseGoalWithIdModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIMajorPurchaseGoalWithIdModel::getMajorPurchaseGoalId() const {
    return m_major_purchase_goal_id;
}
void OAIMajorPurchaseGoalWithIdModel::setMajorPurchaseGoalId(const qint32 &major_purchase_goal_id) {
    m_major_purchase_goal_id = major_purchase_goal_id;
    m_major_purchase_goal_id_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_major_purchase_goal_id_Set() const{
    return m_major_purchase_goal_id_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_major_purchase_goal_id_Valid() const{
    return m_major_purchase_goal_id_isValid;
}

qint32 OAIMajorPurchaseGoalWithIdModel::getMajorPurchaseGoalTypeId() const {
    return m_major_purchase_goal_type_id;
}
void OAIMajorPurchaseGoalWithIdModel::setMajorPurchaseGoalTypeId(const qint32 &major_purchase_goal_type_id) {
    m_major_purchase_goal_type_id = major_purchase_goal_type_id;
    m_major_purchase_goal_type_id_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_major_purchase_goal_type_id_Set() const{
    return m_major_purchase_goal_type_id_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_major_purchase_goal_type_id_Valid() const{
    return m_major_purchase_goal_type_id_isValid;
}

QString OAIMajorPurchaseGoalWithIdModel::getMember() const {
    return m_member;
}
void OAIMajorPurchaseGoalWithIdModel::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_member_Set() const{
    return m_member_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_member_Valid() const{
    return m_member_isValid;
}

QDateTime OAIMajorPurchaseGoalWithIdModel::getTargetDate() const {
    return m_target_date;
}
void OAIMajorPurchaseGoalWithIdModel::setTargetDate(const QDateTime &target_date) {
    m_target_date = target_date;
    m_target_date_isSet = true;
}

bool OAIMajorPurchaseGoalWithIdModel::is_target_date_Set() const{
    return m_target_date_isSet;
}

bool OAIMajorPurchaseGoalWithIdModel::is_target_date_Valid() const{
    return m_target_date_isValid;
}

bool OAIMajorPurchaseGoalWithIdModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_purchase_goal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_purchase_goal_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMajorPurchaseGoalWithIdModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
