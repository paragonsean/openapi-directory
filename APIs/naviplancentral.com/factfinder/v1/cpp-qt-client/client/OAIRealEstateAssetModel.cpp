/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealEstateAssetModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealEstateAssetModel::OAIRealEstateAssetModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealEstateAssetModel::OAIRealEstateAssetModel() {
    this->initializeModel();
}

OAIRealEstateAssetModel::~OAIRealEstateAssetModel() {}

void OAIRealEstateAssetModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_destination_id_isSet = false;
    m_external_destination_id_isValid = false;

    m_fact_finder_id_isSet = false;
    m_fact_finder_id_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_purchase_amount_isSet = false;
    m_purchase_amount_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_rental_income_isSet = false;
    m_rental_income_isValid = false;
}

void OAIRealEstateAssetModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealEstateAssetModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_destination_id_isValid = ::OpenAPI::fromJsonValue(m_external_destination_id, json[QString("externalDestinationId")]);
    m_external_destination_id_isSet = !json[QString("externalDestinationId")].isNull() && m_external_destination_id_isValid;

    m_fact_finder_id_isValid = ::OpenAPI::fromJsonValue(m_fact_finder_id, json[QString("factFinderId")]);
    m_fact_finder_id_isSet = !json[QString("factFinderId")].isNull() && m_fact_finder_id_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_purchase_amount_isValid = ::OpenAPI::fromJsonValue(m_purchase_amount, json[QString("purchaseAmount")]);
    m_purchase_amount_isSet = !json[QString("purchaseAmount")].isNull() && m_purchase_amount_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_rental_income_isValid = ::OpenAPI::fromJsonValue(m_rental_income, json[QString("rentalIncome")]);
    m_rental_income_isSet = !json[QString("rentalIncome")].isNull() && m_rental_income_isValid;
}

QString OAIRealEstateAssetModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealEstateAssetModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_destination_id_isSet) {
        obj.insert(QString("externalDestinationId"), ::OpenAPI::toJsonValue(m_external_destination_id));
    }
    if (m_fact_finder_id_isSet) {
        obj.insert(QString("factFinderId"), ::OpenAPI::toJsonValue(m_fact_finder_id));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_market_value_isSet) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_purchase_amount_isSet) {
        obj.insert(QString("purchaseAmount"), ::OpenAPI::toJsonValue(m_purchase_amount));
    }
    if (m_purchase_date_isSet) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_rental_income_isSet) {
        obj.insert(QString("rentalIncome"), ::OpenAPI::toJsonValue(m_rental_income));
    }
    return obj;
}

QString OAIRealEstateAssetModel::getDescription() const {
    return m_description;
}
void OAIRealEstateAssetModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRealEstateAssetModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRealEstateAssetModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRealEstateAssetModel::getExternalDestinationId() const {
    return m_external_destination_id;
}
void OAIRealEstateAssetModel::setExternalDestinationId(const QString &external_destination_id) {
    m_external_destination_id = external_destination_id;
    m_external_destination_id_isSet = true;
}

bool OAIRealEstateAssetModel::is_external_destination_id_Set() const{
    return m_external_destination_id_isSet;
}

bool OAIRealEstateAssetModel::is_external_destination_id_Valid() const{
    return m_external_destination_id_isValid;
}

qint32 OAIRealEstateAssetModel::getFactFinderId() const {
    return m_fact_finder_id;
}
void OAIRealEstateAssetModel::setFactFinderId(const qint32 &fact_finder_id) {
    m_fact_finder_id = fact_finder_id;
    m_fact_finder_id_isSet = true;
}

bool OAIRealEstateAssetModel::is_fact_finder_id_Set() const{
    return m_fact_finder_id_isSet;
}

bool OAIRealEstateAssetModel::is_fact_finder_id_Valid() const{
    return m_fact_finder_id_isValid;
}

qint32 OAIRealEstateAssetModel::getFrequency() const {
    return m_frequency;
}
void OAIRealEstateAssetModel::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIRealEstateAssetModel::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIRealEstateAssetModel::is_frequency_Valid() const{
    return m_frequency_isValid;
}

double OAIRealEstateAssetModel::getMarketValue() const {
    return m_market_value;
}
void OAIRealEstateAssetModel::setMarketValue(const double &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIRealEstateAssetModel::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIRealEstateAssetModel::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIRealEstateAssetModel::getOwner() const {
    return m_owner;
}
void OAIRealEstateAssetModel::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRealEstateAssetModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRealEstateAssetModel::is_owner_Valid() const{
    return m_owner_isValid;
}

double OAIRealEstateAssetModel::getPurchaseAmount() const {
    return m_purchase_amount;
}
void OAIRealEstateAssetModel::setPurchaseAmount(const double &purchase_amount) {
    m_purchase_amount = purchase_amount;
    m_purchase_amount_isSet = true;
}

bool OAIRealEstateAssetModel::is_purchase_amount_Set() const{
    return m_purchase_amount_isSet;
}

bool OAIRealEstateAssetModel::is_purchase_amount_Valid() const{
    return m_purchase_amount_isValid;
}

QDateTime OAIRealEstateAssetModel::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIRealEstateAssetModel::setPurchaseDate(const QDateTime &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIRealEstateAssetModel::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIRealEstateAssetModel::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

double OAIRealEstateAssetModel::getRentalIncome() const {
    return m_rental_income;
}
void OAIRealEstateAssetModel::setRentalIncome(const double &rental_income) {
    m_rental_income = rental_income;
    m_rental_income_isSet = true;
}

bool OAIRealEstateAssetModel::is_rental_income_Set() const{
    return m_rental_income_isSet;
}

bool OAIRealEstateAssetModel::is_rental_income_Valid() const{
    return m_rental_income_isValid;
}

bool OAIRealEstateAssetModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_finder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_income_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealEstateAssetModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_fact_finder_id_isValid && true;
}

} // namespace OpenAPI
