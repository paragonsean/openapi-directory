# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpenseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_period: int=None, description: str=None, end_date: datetime=None, expense_amount: float=None, expense_type_id: int=None, external_destination_id: str=None, fact_finder_id: int=None, frequency: int=None, member: str=None, start_date: datetime=None):
        """ExpenseModel - a model defined in OpenAPI

        :param annual_period: The annual_period of this ExpenseModel.
        :param description: The description of this ExpenseModel.
        :param end_date: The end_date of this ExpenseModel.
        :param expense_amount: The expense_amount of this ExpenseModel.
        :param expense_type_id: The expense_type_id of this ExpenseModel.
        :param external_destination_id: The external_destination_id of this ExpenseModel.
        :param fact_finder_id: The fact_finder_id of this ExpenseModel.
        :param frequency: The frequency of this ExpenseModel.
        :param member: The member of this ExpenseModel.
        :param start_date: The start_date of this ExpenseModel.
        """
        self.openapi_types = {
            'annual_period': int,
            'description': str,
            'end_date': datetime,
            'expense_amount': float,
            'expense_type_id': int,
            'external_destination_id': str,
            'fact_finder_id': int,
            'frequency': int,
            'member': str,
            'start_date': datetime
        }

        self.attribute_map = {
            'annual_period': 'annualPeriod',
            'description': 'description',
            'end_date': 'endDate',
            'expense_amount': 'expenseAmount',
            'expense_type_id': 'expenseTypeId',
            'external_destination_id': 'externalDestinationId',
            'fact_finder_id': 'factFinderId',
            'frequency': 'frequency',
            'member': 'member',
            'start_date': 'startDate'
        }

        self._annual_period = annual_period
        self._description = description
        self._end_date = end_date
        self._expense_amount = expense_amount
        self._expense_type_id = expense_type_id
        self._external_destination_id = external_destination_id
        self._fact_finder_id = fact_finder_id
        self._frequency = frequency
        self._member = member
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseModel of this ExpenseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_period(self):
        """Gets the annual_period of this ExpenseModel.


        :return: The annual_period of this ExpenseModel.
        :rtype: int
        """
        return self._annual_period

    @annual_period.setter
    def annual_period(self, annual_period):
        """Sets the annual_period of this ExpenseModel.


        :param annual_period: The annual_period of this ExpenseModel.
        :type annual_period: int
        """
        if annual_period is not None and annual_period > 99:
            raise ValueError("Invalid value for `annual_period`, must be a value less than or equal to `99`")
        if annual_period is not None and annual_period < 1:
            raise ValueError("Invalid value for `annual_period`, must be a value greater than or equal to `1`")

        self._annual_period = annual_period

    @property
    def description(self):
        """Gets the description of this ExpenseModel.


        :return: The description of this ExpenseModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExpenseModel.


        :param description: The description of this ExpenseModel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this ExpenseModel.


        :return: The end_date of this ExpenseModel.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ExpenseModel.


        :param end_date: The end_date of this ExpenseModel.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def expense_amount(self):
        """Gets the expense_amount of this ExpenseModel.


        :return: The expense_amount of this ExpenseModel.
        :rtype: float
        """
        return self._expense_amount

    @expense_amount.setter
    def expense_amount(self, expense_amount):
        """Sets the expense_amount of this ExpenseModel.


        :param expense_amount: The expense_amount of this ExpenseModel.
        :type expense_amount: float
        """

        self._expense_amount = expense_amount

    @property
    def expense_type_id(self):
        """Gets the expense_type_id of this ExpenseModel.


        :return: The expense_type_id of this ExpenseModel.
        :rtype: int
        """
        return self._expense_type_id

    @expense_type_id.setter
    def expense_type_id(self, expense_type_id):
        """Sets the expense_type_id of this ExpenseModel.


        :param expense_type_id: The expense_type_id of this ExpenseModel.
        :type expense_type_id: int
        """

        self._expense_type_id = expense_type_id

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this ExpenseModel.


        :return: The external_destination_id of this ExpenseModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this ExpenseModel.


        :param external_destination_id: The external_destination_id of this ExpenseModel.
        :type external_destination_id: str
        """
        if external_destination_id is not None and len(external_destination_id) > 64:
            raise ValueError("Invalid value for `external_destination_id`, length must be less than or equal to `64`")
        if external_destination_id is not None and len(external_destination_id) < 0:
            raise ValueError("Invalid value for `external_destination_id`, length must be greater than or equal to `0`")

        self._external_destination_id = external_destination_id

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this ExpenseModel.


        :return: The fact_finder_id of this ExpenseModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this ExpenseModel.


        :param fact_finder_id: The fact_finder_id of this ExpenseModel.
        :type fact_finder_id: int
        """
        if fact_finder_id is None:
            raise ValueError("Invalid value for `fact_finder_id`, must not be `None`")

        self._fact_finder_id = fact_finder_id

    @property
    def frequency(self):
        """Gets the frequency of this ExpenseModel.


        :return: The frequency of this ExpenseModel.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ExpenseModel.


        :param frequency: The frequency of this ExpenseModel.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def member(self):
        """Gets the member of this ExpenseModel.


        :return: The member of this ExpenseModel.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ExpenseModel.


        :param member: The member of this ExpenseModel.
        :type member: str
        """
        allowed_values = ["Client", "CoClient", "Joint"]  # noqa: E501
        if member not in allowed_values:
            raise ValueError(
                "Invalid value for `member` ({0}), must be one of {1}"
                .format(member, allowed_values)
            )

        self._member = member

    @property
    def start_date(self):
        """Gets the start_date of this ExpenseModel.


        :return: The start_date of this ExpenseModel.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ExpenseModel.


        :param start_date: The start_date of this ExpenseModel.
        :type start_date: datetime
        """

        self._start_date = start_date
