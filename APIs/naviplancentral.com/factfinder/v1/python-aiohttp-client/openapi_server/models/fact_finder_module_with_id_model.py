# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class FactFinderModuleWithIdModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, fact_finder_id: int=None, links: List[ObjectLink]=None, module_id: int=None, module_name: str=None, visited: bool=None):
        """FactFinderModuleWithIdModel - a model defined in OpenAPI

        :param available: The available of this FactFinderModuleWithIdModel.
        :param fact_finder_id: The fact_finder_id of this FactFinderModuleWithIdModel.
        :param links: The links of this FactFinderModuleWithIdModel.
        :param module_id: The module_id of this FactFinderModuleWithIdModel.
        :param module_name: The module_name of this FactFinderModuleWithIdModel.
        :param visited: The visited of this FactFinderModuleWithIdModel.
        """
        self.openapi_types = {
            'available': bool,
            'fact_finder_id': int,
            'links': List[ObjectLink],
            'module_id': int,
            'module_name': str,
            'visited': bool
        }

        self.attribute_map = {
            'available': 'available',
            'fact_finder_id': 'factFinderId',
            'links': 'links',
            'module_id': 'moduleId',
            'module_name': 'moduleName',
            'visited': 'visited'
        }

        self._available = available
        self._fact_finder_id = fact_finder_id
        self._links = links
        self._module_id = module_id
        self._module_name = module_name
        self._visited = visited

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactFinderModuleWithIdModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FactFinderModuleWithIdModel of this FactFinderModuleWithIdModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this FactFinderModuleWithIdModel.


        :return: The available of this FactFinderModuleWithIdModel.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this FactFinderModuleWithIdModel.


        :param available: The available of this FactFinderModuleWithIdModel.
        :type available: bool
        """

        self._available = available

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this FactFinderModuleWithIdModel.


        :return: The fact_finder_id of this FactFinderModuleWithIdModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this FactFinderModuleWithIdModel.


        :param fact_finder_id: The fact_finder_id of this FactFinderModuleWithIdModel.
        :type fact_finder_id: int
        """

        self._fact_finder_id = fact_finder_id

    @property
    def links(self):
        """Gets the links of this FactFinderModuleWithIdModel.


        :return: The links of this FactFinderModuleWithIdModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FactFinderModuleWithIdModel.


        :param links: The links of this FactFinderModuleWithIdModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def module_id(self):
        """Gets the module_id of this FactFinderModuleWithIdModel.


        :return: The module_id of this FactFinderModuleWithIdModel.
        :rtype: int
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this FactFinderModuleWithIdModel.


        :param module_id: The module_id of this FactFinderModuleWithIdModel.
        :type module_id: int
        """

        self._module_id = module_id

    @property
    def module_name(self):
        """Gets the module_name of this FactFinderModuleWithIdModel.


        :return: The module_name of this FactFinderModuleWithIdModel.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this FactFinderModuleWithIdModel.


        :param module_name: The module_name of this FactFinderModuleWithIdModel.
        :type module_name: str
        """
        allowed_values = ["Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase"]  # noqa: E501
        if module_name not in allowed_values:
            raise ValueError(
                "Invalid value for `module_name` ({0}), must be one of {1}"
                .format(module_name, allowed_values)
            )

        self._module_name = module_name

    @property
    def visited(self):
        """Gets the visited of this FactFinderModuleWithIdModel.


        :return: The visited of this FactFinderModuleWithIdModel.
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited):
        """Sets the visited of this FactFinderModuleWithIdModel.


        :param visited: The visited of this FactFinderModuleWithIdModel.
        :type visited: bool
        """

        self._visited = visited
