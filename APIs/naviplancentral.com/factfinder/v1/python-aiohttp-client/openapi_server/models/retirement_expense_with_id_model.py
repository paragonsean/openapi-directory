# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class RetirementExpenseWithIdModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, annual_period: int=None, description: str=None, end_date: datetime=None, external_destination_id: str=None, frequency: int=None, links: List[ObjectLink]=None, member: str=None, retirement_expense_id: int=None, retirement_goal_id: int=None, start_date: datetime=None):
        """RetirementExpenseWithIdModel - a model defined in OpenAPI

        :param amount: The amount of this RetirementExpenseWithIdModel.
        :param annual_period: The annual_period of this RetirementExpenseWithIdModel.
        :param description: The description of this RetirementExpenseWithIdModel.
        :param end_date: The end_date of this RetirementExpenseWithIdModel.
        :param external_destination_id: The external_destination_id of this RetirementExpenseWithIdModel.
        :param frequency: The frequency of this RetirementExpenseWithIdModel.
        :param links: The links of this RetirementExpenseWithIdModel.
        :param member: The member of this RetirementExpenseWithIdModel.
        :param retirement_expense_id: The retirement_expense_id of this RetirementExpenseWithIdModel.
        :param retirement_goal_id: The retirement_goal_id of this RetirementExpenseWithIdModel.
        :param start_date: The start_date of this RetirementExpenseWithIdModel.
        """
        self.openapi_types = {
            'amount': float,
            'annual_period': int,
            'description': str,
            'end_date': datetime,
            'external_destination_id': str,
            'frequency': int,
            'links': List[ObjectLink],
            'member': str,
            'retirement_expense_id': int,
            'retirement_goal_id': int,
            'start_date': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'annual_period': 'annualPeriod',
            'description': 'description',
            'end_date': 'endDate',
            'external_destination_id': 'externalDestinationId',
            'frequency': 'frequency',
            'links': 'links',
            'member': 'member',
            'retirement_expense_id': 'retirementExpenseId',
            'retirement_goal_id': 'retirementGoalId',
            'start_date': 'startDate'
        }

        self._amount = amount
        self._annual_period = annual_period
        self._description = description
        self._end_date = end_date
        self._external_destination_id = external_destination_id
        self._frequency = frequency
        self._links = links
        self._member = member
        self._retirement_expense_id = retirement_expense_id
        self._retirement_goal_id = retirement_goal_id
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetirementExpenseWithIdModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetirementExpenseWithIdModel of this RetirementExpenseWithIdModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RetirementExpenseWithIdModel.


        :return: The amount of this RetirementExpenseWithIdModel.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RetirementExpenseWithIdModel.


        :param amount: The amount of this RetirementExpenseWithIdModel.
        :type amount: float
        """

        self._amount = amount

    @property
    def annual_period(self):
        """Gets the annual_period of this RetirementExpenseWithIdModel.


        :return: The annual_period of this RetirementExpenseWithIdModel.
        :rtype: int
        """
        return self._annual_period

    @annual_period.setter
    def annual_period(self, annual_period):
        """Sets the annual_period of this RetirementExpenseWithIdModel.


        :param annual_period: The annual_period of this RetirementExpenseWithIdModel.
        :type annual_period: int
        """

        self._annual_period = annual_period

    @property
    def description(self):
        """Gets the description of this RetirementExpenseWithIdModel.


        :return: The description of this RetirementExpenseWithIdModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RetirementExpenseWithIdModel.


        :param description: The description of this RetirementExpenseWithIdModel.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this RetirementExpenseWithIdModel.


        :return: The end_date of this RetirementExpenseWithIdModel.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RetirementExpenseWithIdModel.


        :param end_date: The end_date of this RetirementExpenseWithIdModel.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this RetirementExpenseWithIdModel.


        :return: The external_destination_id of this RetirementExpenseWithIdModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this RetirementExpenseWithIdModel.


        :param external_destination_id: The external_destination_id of this RetirementExpenseWithIdModel.
        :type external_destination_id: str
        """

        self._external_destination_id = external_destination_id

    @property
    def frequency(self):
        """Gets the frequency of this RetirementExpenseWithIdModel.


        :return: The frequency of this RetirementExpenseWithIdModel.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RetirementExpenseWithIdModel.


        :param frequency: The frequency of this RetirementExpenseWithIdModel.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def links(self):
        """Gets the links of this RetirementExpenseWithIdModel.


        :return: The links of this RetirementExpenseWithIdModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RetirementExpenseWithIdModel.


        :param links: The links of this RetirementExpenseWithIdModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def member(self):
        """Gets the member of this RetirementExpenseWithIdModel.


        :return: The member of this RetirementExpenseWithIdModel.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this RetirementExpenseWithIdModel.


        :param member: The member of this RetirementExpenseWithIdModel.
        :type member: str
        """
        allowed_values = ["Client", "CoClient", "Joint"]  # noqa: E501
        if member not in allowed_values:
            raise ValueError(
                "Invalid value for `member` ({0}), must be one of {1}"
                .format(member, allowed_values)
            )

        self._member = member

    @property
    def retirement_expense_id(self):
        """Gets the retirement_expense_id of this RetirementExpenseWithIdModel.


        :return: The retirement_expense_id of this RetirementExpenseWithIdModel.
        :rtype: int
        """
        return self._retirement_expense_id

    @retirement_expense_id.setter
    def retirement_expense_id(self, retirement_expense_id):
        """Sets the retirement_expense_id of this RetirementExpenseWithIdModel.


        :param retirement_expense_id: The retirement_expense_id of this RetirementExpenseWithIdModel.
        :type retirement_expense_id: int
        """

        self._retirement_expense_id = retirement_expense_id

    @property
    def retirement_goal_id(self):
        """Gets the retirement_goal_id of this RetirementExpenseWithIdModel.


        :return: The retirement_goal_id of this RetirementExpenseWithIdModel.
        :rtype: int
        """
        return self._retirement_goal_id

    @retirement_goal_id.setter
    def retirement_goal_id(self, retirement_goal_id):
        """Sets the retirement_goal_id of this RetirementExpenseWithIdModel.


        :param retirement_goal_id: The retirement_goal_id of this RetirementExpenseWithIdModel.
        :type retirement_goal_id: int
        """

        self._retirement_goal_id = retirement_goal_id

    @property
    def start_date(self):
        """Gets the start_date of this RetirementExpenseWithIdModel.


        :return: The start_date of this RetirementExpenseWithIdModel.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RetirementExpenseWithIdModel.


        :param start_date: The start_date of this RetirementExpenseWithIdModel.
        :type start_date: datetime
        """

        self._start_date = start_date
