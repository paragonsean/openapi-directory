# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FactFinderEntityModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, household_id: int=None, modules: List[str]=None, plan_level: str=None):
        """FactFinderEntityModel - a model defined in OpenAPI

        :param household_id: The household_id of this FactFinderEntityModel.
        :param modules: The modules of this FactFinderEntityModel.
        :param plan_level: The plan_level of this FactFinderEntityModel.
        """
        self.openapi_types = {
            'household_id': int,
            'modules': List[str],
            'plan_level': str
        }

        self.attribute_map = {
            'household_id': 'householdId',
            'modules': 'modules',
            'plan_level': 'planLevel'
        }

        self._household_id = household_id
        self._modules = modules
        self._plan_level = plan_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactFinderEntityModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FactFinderEntityModel of this FactFinderEntityModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def household_id(self):
        """Gets the household_id of this FactFinderEntityModel.


        :return: The household_id of this FactFinderEntityModel.
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this FactFinderEntityModel.


        :param household_id: The household_id of this FactFinderEntityModel.
        :type household_id: int
        """
        if household_id is None:
            raise ValueError("Invalid value for `household_id`, must not be `None`")
        if household_id is not None and household_id > 2147483647:
            raise ValueError("Invalid value for `household_id`, must be a value less than or equal to `2147483647`")
        if household_id is not None and household_id < 0:
            raise ValueError("Invalid value for `household_id`, must be a value greater than or equal to `0`")

        self._household_id = household_id

    @property
    def modules(self):
        """Gets the modules of this FactFinderEntityModel.


        :return: The modules of this FactFinderEntityModel.
        :rtype: List[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this FactFinderEntityModel.


        :param modules: The modules of this FactFinderEntityModel.
        :type modules: List[str]
        """
        allowed_values = ["Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase"]  # noqa: E501
        if not set(modules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `modules` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(modules) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._modules = modules

    @property
    def plan_level(self):
        """Gets the plan_level of this FactFinderEntityModel.


        :return: The plan_level of this FactFinderEntityModel.
        :rtype: str
        """
        return self._plan_level

    @plan_level.setter
    def plan_level(self, plan_level):
        """Sets the plan_level of this FactFinderEntityModel.


        :param plan_level: The plan_level of this FactFinderEntityModel.
        :type plan_level: str
        """
        allowed_values = ["Level2", "Level1"]  # noqa: E501
        if plan_level not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_level` ({0}), must be one of {1}"
                .format(plan_level, allowed_values)
            )

        self._plan_level = plan_level
