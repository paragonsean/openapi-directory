# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class EducationExpenseWithIdModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_cost: float=None, education_expense_id: int=None, education_goal_id: int=None, external_destination_id: str=None, links: List[ObjectLink]=None, member: str=None, member_dependent_id: int=None, start_year: datetime=None, years: int=None):
        """EducationExpenseWithIdModel - a model defined in OpenAPI

        :param annual_cost: The annual_cost of this EducationExpenseWithIdModel.
        :param education_expense_id: The education_expense_id of this EducationExpenseWithIdModel.
        :param education_goal_id: The education_goal_id of this EducationExpenseWithIdModel.
        :param external_destination_id: The external_destination_id of this EducationExpenseWithIdModel.
        :param links: The links of this EducationExpenseWithIdModel.
        :param member: The member of this EducationExpenseWithIdModel.
        :param member_dependent_id: The member_dependent_id of this EducationExpenseWithIdModel.
        :param start_year: The start_year of this EducationExpenseWithIdModel.
        :param years: The years of this EducationExpenseWithIdModel.
        """
        self.openapi_types = {
            'annual_cost': float,
            'education_expense_id': int,
            'education_goal_id': int,
            'external_destination_id': str,
            'links': List[ObjectLink],
            'member': str,
            'member_dependent_id': int,
            'start_year': datetime,
            'years': int
        }

        self.attribute_map = {
            'annual_cost': 'annualCost',
            'education_expense_id': 'educationExpenseId',
            'education_goal_id': 'educationGoalId',
            'external_destination_id': 'externalDestinationId',
            'links': 'links',
            'member': 'member',
            'member_dependent_id': 'memberDependentId',
            'start_year': 'startYear',
            'years': 'years'
        }

        self._annual_cost = annual_cost
        self._education_expense_id = education_expense_id
        self._education_goal_id = education_goal_id
        self._external_destination_id = external_destination_id
        self._links = links
        self._member = member
        self._member_dependent_id = member_dependent_id
        self._start_year = start_year
        self._years = years

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EducationExpenseWithIdModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EducationExpenseWithIdModel of this EducationExpenseWithIdModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_cost(self):
        """Gets the annual_cost of this EducationExpenseWithIdModel.


        :return: The annual_cost of this EducationExpenseWithIdModel.
        :rtype: float
        """
        return self._annual_cost

    @annual_cost.setter
    def annual_cost(self, annual_cost):
        """Sets the annual_cost of this EducationExpenseWithIdModel.


        :param annual_cost: The annual_cost of this EducationExpenseWithIdModel.
        :type annual_cost: float
        """

        self._annual_cost = annual_cost

    @property
    def education_expense_id(self):
        """Gets the education_expense_id of this EducationExpenseWithIdModel.


        :return: The education_expense_id of this EducationExpenseWithIdModel.
        :rtype: int
        """
        return self._education_expense_id

    @education_expense_id.setter
    def education_expense_id(self, education_expense_id):
        """Sets the education_expense_id of this EducationExpenseWithIdModel.


        :param education_expense_id: The education_expense_id of this EducationExpenseWithIdModel.
        :type education_expense_id: int
        """

        self._education_expense_id = education_expense_id

    @property
    def education_goal_id(self):
        """Gets the education_goal_id of this EducationExpenseWithIdModel.


        :return: The education_goal_id of this EducationExpenseWithIdModel.
        :rtype: int
        """
        return self._education_goal_id

    @education_goal_id.setter
    def education_goal_id(self, education_goal_id):
        """Sets the education_goal_id of this EducationExpenseWithIdModel.


        :param education_goal_id: The education_goal_id of this EducationExpenseWithIdModel.
        :type education_goal_id: int
        """

        self._education_goal_id = education_goal_id

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this EducationExpenseWithIdModel.


        :return: The external_destination_id of this EducationExpenseWithIdModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this EducationExpenseWithIdModel.


        :param external_destination_id: The external_destination_id of this EducationExpenseWithIdModel.
        :type external_destination_id: str
        """

        self._external_destination_id = external_destination_id

    @property
    def links(self):
        """Gets the links of this EducationExpenseWithIdModel.


        :return: The links of this EducationExpenseWithIdModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EducationExpenseWithIdModel.


        :param links: The links of this EducationExpenseWithIdModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def member(self):
        """Gets the member of this EducationExpenseWithIdModel.


        :return: The member of this EducationExpenseWithIdModel.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this EducationExpenseWithIdModel.


        :param member: The member of this EducationExpenseWithIdModel.
        :type member: str
        """
        allowed_values = ["Client", "CoClient", "Dependent"]  # noqa: E501
        if member not in allowed_values:
            raise ValueError(
                "Invalid value for `member` ({0}), must be one of {1}"
                .format(member, allowed_values)
            )

        self._member = member

    @property
    def member_dependent_id(self):
        """Gets the member_dependent_id of this EducationExpenseWithIdModel.


        :return: The member_dependent_id of this EducationExpenseWithIdModel.
        :rtype: int
        """
        return self._member_dependent_id

    @member_dependent_id.setter
    def member_dependent_id(self, member_dependent_id):
        """Sets the member_dependent_id of this EducationExpenseWithIdModel.


        :param member_dependent_id: The member_dependent_id of this EducationExpenseWithIdModel.
        :type member_dependent_id: int
        """

        self._member_dependent_id = member_dependent_id

    @property
    def start_year(self):
        """Gets the start_year of this EducationExpenseWithIdModel.


        :return: The start_year of this EducationExpenseWithIdModel.
        :rtype: datetime
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this EducationExpenseWithIdModel.


        :param start_year: The start_year of this EducationExpenseWithIdModel.
        :type start_year: datetime
        """

        self._start_year = start_year

    @property
    def years(self):
        """Gets the years of this EducationExpenseWithIdModel.


        :return: The years of this EducationExpenseWithIdModel.
        :rtype: int
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this EducationExpenseWithIdModel.


        :param years: The years of this EducationExpenseWithIdModel.
        :type years: int
        """

        self._years = years
