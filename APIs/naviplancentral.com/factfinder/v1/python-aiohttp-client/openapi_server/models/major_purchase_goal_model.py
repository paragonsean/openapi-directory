# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MajorPurchaseGoalModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, description: str=None, external_destination_id: str=None, fact_finder_id: int=None, major_purchase_goal_type_id: int=None, member: str=None, target_date: datetime=None):
        """MajorPurchaseGoalModel - a model defined in OpenAPI

        :param amount: The amount of this MajorPurchaseGoalModel.
        :param description: The description of this MajorPurchaseGoalModel.
        :param external_destination_id: The external_destination_id of this MajorPurchaseGoalModel.
        :param fact_finder_id: The fact_finder_id of this MajorPurchaseGoalModel.
        :param major_purchase_goal_type_id: The major_purchase_goal_type_id of this MajorPurchaseGoalModel.
        :param member: The member of this MajorPurchaseGoalModel.
        :param target_date: The target_date of this MajorPurchaseGoalModel.
        """
        self.openapi_types = {
            'amount': float,
            'description': str,
            'external_destination_id': str,
            'fact_finder_id': int,
            'major_purchase_goal_type_id': int,
            'member': str,
            'target_date': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'external_destination_id': 'externalDestinationId',
            'fact_finder_id': 'factFinderId',
            'major_purchase_goal_type_id': 'majorPurchaseGoalTypeId',
            'member': 'member',
            'target_date': 'targetDate'
        }

        self._amount = amount
        self._description = description
        self._external_destination_id = external_destination_id
        self._fact_finder_id = fact_finder_id
        self._major_purchase_goal_type_id = major_purchase_goal_type_id
        self._member = member
        self._target_date = target_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MajorPurchaseGoalModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MajorPurchaseGoalModel of this MajorPurchaseGoalModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this MajorPurchaseGoalModel.


        :return: The amount of this MajorPurchaseGoalModel.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this MajorPurchaseGoalModel.


        :param amount: The amount of this MajorPurchaseGoalModel.
        :type amount: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this MajorPurchaseGoalModel.


        :return: The description of this MajorPurchaseGoalModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MajorPurchaseGoalModel.


        :param description: The description of this MajorPurchaseGoalModel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this MajorPurchaseGoalModel.


        :return: The external_destination_id of this MajorPurchaseGoalModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this MajorPurchaseGoalModel.


        :param external_destination_id: The external_destination_id of this MajorPurchaseGoalModel.
        :type external_destination_id: str
        """
        if external_destination_id is not None and len(external_destination_id) > 64:
            raise ValueError("Invalid value for `external_destination_id`, length must be less than or equal to `64`")
        if external_destination_id is not None and len(external_destination_id) < 0:
            raise ValueError("Invalid value for `external_destination_id`, length must be greater than or equal to `0`")

        self._external_destination_id = external_destination_id

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this MajorPurchaseGoalModel.


        :return: The fact_finder_id of this MajorPurchaseGoalModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this MajorPurchaseGoalModel.


        :param fact_finder_id: The fact_finder_id of this MajorPurchaseGoalModel.
        :type fact_finder_id: int
        """
        if fact_finder_id is None:
            raise ValueError("Invalid value for `fact_finder_id`, must not be `None`")

        self._fact_finder_id = fact_finder_id

    @property
    def major_purchase_goal_type_id(self):
        """Gets the major_purchase_goal_type_id of this MajorPurchaseGoalModel.


        :return: The major_purchase_goal_type_id of this MajorPurchaseGoalModel.
        :rtype: int
        """
        return self._major_purchase_goal_type_id

    @major_purchase_goal_type_id.setter
    def major_purchase_goal_type_id(self, major_purchase_goal_type_id):
        """Sets the major_purchase_goal_type_id of this MajorPurchaseGoalModel.


        :param major_purchase_goal_type_id: The major_purchase_goal_type_id of this MajorPurchaseGoalModel.
        :type major_purchase_goal_type_id: int
        """

        self._major_purchase_goal_type_id = major_purchase_goal_type_id

    @property
    def member(self):
        """Gets the member of this MajorPurchaseGoalModel.


        :return: The member of this MajorPurchaseGoalModel.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this MajorPurchaseGoalModel.


        :param member: The member of this MajorPurchaseGoalModel.
        :type member: str
        """
        allowed_values = ["Client", "CoClient", "Joint"]  # noqa: E501
        if member not in allowed_values:
            raise ValueError(
                "Invalid value for `member` ({0}), must be one of {1}"
                .format(member, allowed_values)
            )

        self._member = member

    @property
    def target_date(self):
        """Gets the target_date of this MajorPurchaseGoalModel.


        :return: The target_date of this MajorPurchaseGoalModel.
        :rtype: datetime
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this MajorPurchaseGoalModel.


        :param target_date: The target_date of this MajorPurchaseGoalModel.
        :type target_date: datetime
        """

        self._target_date = target_date
