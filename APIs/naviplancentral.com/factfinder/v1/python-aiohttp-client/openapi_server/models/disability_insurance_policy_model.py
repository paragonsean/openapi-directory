# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisabilityInsurancePolicyModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit: float=None, benefit_frequency: int=None, benefit_type: str=None, description: str=None, external_destination_id: str=None, fact_finder_id: int=None, insured: str=None, policy_type: int=None, premium: float=None, premium_frequency: int=None):
        """DisabilityInsurancePolicyModel - a model defined in OpenAPI

        :param benefit: The benefit of this DisabilityInsurancePolicyModel.
        :param benefit_frequency: The benefit_frequency of this DisabilityInsurancePolicyModel.
        :param benefit_type: The benefit_type of this DisabilityInsurancePolicyModel.
        :param description: The description of this DisabilityInsurancePolicyModel.
        :param external_destination_id: The external_destination_id of this DisabilityInsurancePolicyModel.
        :param fact_finder_id: The fact_finder_id of this DisabilityInsurancePolicyModel.
        :param insured: The insured of this DisabilityInsurancePolicyModel.
        :param policy_type: The policy_type of this DisabilityInsurancePolicyModel.
        :param premium: The premium of this DisabilityInsurancePolicyModel.
        :param premium_frequency: The premium_frequency of this DisabilityInsurancePolicyModel.
        """
        self.openapi_types = {
            'benefit': float,
            'benefit_frequency': int,
            'benefit_type': str,
            'description': str,
            'external_destination_id': str,
            'fact_finder_id': int,
            'insured': str,
            'policy_type': int,
            'premium': float,
            'premium_frequency': int
        }

        self.attribute_map = {
            'benefit': 'benefit',
            'benefit_frequency': 'benefitFrequency',
            'benefit_type': 'benefitType',
            'description': 'description',
            'external_destination_id': 'externalDestinationId',
            'fact_finder_id': 'factFinderId',
            'insured': 'insured',
            'policy_type': 'policyType',
            'premium': 'premium',
            'premium_frequency': 'premiumFrequency'
        }

        self._benefit = benefit
        self._benefit_frequency = benefit_frequency
        self._benefit_type = benefit_type
        self._description = description
        self._external_destination_id = external_destination_id
        self._fact_finder_id = fact_finder_id
        self._insured = insured
        self._policy_type = policy_type
        self._premium = premium
        self._premium_frequency = premium_frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisabilityInsurancePolicyModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisabilityInsurancePolicyModel of this DisabilityInsurancePolicyModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit(self):
        """Gets the benefit of this DisabilityInsurancePolicyModel.


        :return: The benefit of this DisabilityInsurancePolicyModel.
        :rtype: float
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this DisabilityInsurancePolicyModel.


        :param benefit: The benefit of this DisabilityInsurancePolicyModel.
        :type benefit: float
        """

        self._benefit = benefit

    @property
    def benefit_frequency(self):
        """Gets the benefit_frequency of this DisabilityInsurancePolicyModel.


        :return: The benefit_frequency of this DisabilityInsurancePolicyModel.
        :rtype: int
        """
        return self._benefit_frequency

    @benefit_frequency.setter
    def benefit_frequency(self, benefit_frequency):
        """Sets the benefit_frequency of this DisabilityInsurancePolicyModel.


        :param benefit_frequency: The benefit_frequency of this DisabilityInsurancePolicyModel.
        :type benefit_frequency: int
        """

        self._benefit_frequency = benefit_frequency

    @property
    def benefit_type(self):
        """Gets the benefit_type of this DisabilityInsurancePolicyModel.


        :return: The benefit_type of this DisabilityInsurancePolicyModel.
        :rtype: str
        """
        return self._benefit_type

    @benefit_type.setter
    def benefit_type(self, benefit_type):
        """Sets the benefit_type of this DisabilityInsurancePolicyModel.


        :param benefit_type: The benefit_type of this DisabilityInsurancePolicyModel.
        :type benefit_type: str
        """
        allowed_values = ["Dollar", "Percent"]  # noqa: E501
        if benefit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `benefit_type` ({0}), must be one of {1}"
                .format(benefit_type, allowed_values)
            )

        self._benefit_type = benefit_type

    @property
    def description(self):
        """Gets the description of this DisabilityInsurancePolicyModel.


        :return: The description of this DisabilityInsurancePolicyModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DisabilityInsurancePolicyModel.


        :param description: The description of this DisabilityInsurancePolicyModel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this DisabilityInsurancePolicyModel.


        :return: The external_destination_id of this DisabilityInsurancePolicyModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this DisabilityInsurancePolicyModel.


        :param external_destination_id: The external_destination_id of this DisabilityInsurancePolicyModel.
        :type external_destination_id: str
        """
        if external_destination_id is not None and len(external_destination_id) > 64:
            raise ValueError("Invalid value for `external_destination_id`, length must be less than or equal to `64`")
        if external_destination_id is not None and len(external_destination_id) < 0:
            raise ValueError("Invalid value for `external_destination_id`, length must be greater than or equal to `0`")

        self._external_destination_id = external_destination_id

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this DisabilityInsurancePolicyModel.


        :return: The fact_finder_id of this DisabilityInsurancePolicyModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this DisabilityInsurancePolicyModel.


        :param fact_finder_id: The fact_finder_id of this DisabilityInsurancePolicyModel.
        :type fact_finder_id: int
        """
        if fact_finder_id is None:
            raise ValueError("Invalid value for `fact_finder_id`, must not be `None`")

        self._fact_finder_id = fact_finder_id

    @property
    def insured(self):
        """Gets the insured of this DisabilityInsurancePolicyModel.


        :return: The insured of this DisabilityInsurancePolicyModel.
        :rtype: str
        """
        return self._insured

    @insured.setter
    def insured(self, insured):
        """Sets the insured of this DisabilityInsurancePolicyModel.


        :param insured: The insured of this DisabilityInsurancePolicyModel.
        :type insured: str
        """
        allowed_values = ["Client", "CoClient"]  # noqa: E501
        if insured not in allowed_values:
            raise ValueError(
                "Invalid value for `insured` ({0}), must be one of {1}"
                .format(insured, allowed_values)
            )

        self._insured = insured

    @property
    def policy_type(self):
        """Gets the policy_type of this DisabilityInsurancePolicyModel.


        :return: The policy_type of this DisabilityInsurancePolicyModel.
        :rtype: int
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this DisabilityInsurancePolicyModel.


        :param policy_type: The policy_type of this DisabilityInsurancePolicyModel.
        :type policy_type: int
        """

        self._policy_type = policy_type

    @property
    def premium(self):
        """Gets the premium of this DisabilityInsurancePolicyModel.


        :return: The premium of this DisabilityInsurancePolicyModel.
        :rtype: float
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this DisabilityInsurancePolicyModel.


        :param premium: The premium of this DisabilityInsurancePolicyModel.
        :type premium: float
        """

        self._premium = premium

    @property
    def premium_frequency(self):
        """Gets the premium_frequency of this DisabilityInsurancePolicyModel.


        :return: The premium_frequency of this DisabilityInsurancePolicyModel.
        :rtype: int
        """
        return self._premium_frequency

    @premium_frequency.setter
    def premium_frequency(self, premium_frequency):
        """Sets the premium_frequency of this DisabilityInsurancePolicyModel.


        :param premium_frequency: The premium_frequency of this DisabilityInsurancePolicyModel.
        :type premium_frequency: int
        """

        self._premium_frequency = premium_frequency
