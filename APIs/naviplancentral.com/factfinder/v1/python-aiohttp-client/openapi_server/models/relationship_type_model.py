# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipTypeModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_child_type: bool=None, relationship_type: str=None):
        """RelationshipTypeModel - a model defined in OpenAPI

        :param id: The id of this RelationshipTypeModel.
        :param is_child_type: The is_child_type of this RelationshipTypeModel.
        :param relationship_type: The relationship_type of this RelationshipTypeModel.
        """
        self.openapi_types = {
            'id': int,
            'is_child_type': bool,
            'relationship_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_child_type': 'isChildType',
            'relationship_type': 'relationshipType'
        }

        self._id = id
        self._is_child_type = is_child_type
        self._relationship_type = relationship_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipTypeModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipTypeModel of this RelationshipTypeModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RelationshipTypeModel.


        :return: The id of this RelationshipTypeModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RelationshipTypeModel.


        :param id: The id of this RelationshipTypeModel.
        :type id: int
        """

        self._id = id

    @property
    def is_child_type(self):
        """Gets the is_child_type of this RelationshipTypeModel.


        :return: The is_child_type of this RelationshipTypeModel.
        :rtype: bool
        """
        return self._is_child_type

    @is_child_type.setter
    def is_child_type(self, is_child_type):
        """Sets the is_child_type of this RelationshipTypeModel.


        :param is_child_type: The is_child_type of this RelationshipTypeModel.
        :type is_child_type: bool
        """

        self._is_child_type = is_child_type

    @property
    def relationship_type(self):
        """Gets the relationship_type of this RelationshipTypeModel.


        :return: The relationship_type of this RelationshipTypeModel.
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this RelationshipTypeModel.


        :param relationship_type: The relationship_type of this RelationshipTypeModel.
        :type relationship_type: str
        """
        allowed_values = ["Son", "Daughter", "FosterSon", "FosterDaughter", "Grandson", "Granddaughter", "Nephew", "Niece", "MaleCousin", "FemaleCousin", "Father", "Mother", "Grandfather", "Grandmother", "Uncle", "Aunt", "Brother", "Sister", "SonInLaw", "DaughterInLaw", "MaleOther", "FemaleOther"]  # noqa: E501
        if relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_type` ({0}), must be one of {1}"
                .format(relationship_type, allowed_values)
            )

        self._relationship_type = relationship_type
