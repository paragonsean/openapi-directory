# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavingsStrategyModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employer_savings_amount: float=None, employer_savings_amount_type: str=None, end_date: datetime=None, external_destination_id: str=None, frequency_id: int=None, mandatory_amount: float=None, mandatory_amount_type: str=None, post_tax_savings_amount: float=None, post_tax_savings_amount_type: str=None, pre_tax_savings_amount: float=None, pre_tax_savings_amount_type: str=None, start_date: datetime=None):
        """SavingsStrategyModel - a model defined in OpenAPI

        :param employer_savings_amount: The employer_savings_amount of this SavingsStrategyModel.
        :param employer_savings_amount_type: The employer_savings_amount_type of this SavingsStrategyModel.
        :param end_date: The end_date of this SavingsStrategyModel.
        :param external_destination_id: The external_destination_id of this SavingsStrategyModel.
        :param frequency_id: The frequency_id of this SavingsStrategyModel.
        :param mandatory_amount: The mandatory_amount of this SavingsStrategyModel.
        :param mandatory_amount_type: The mandatory_amount_type of this SavingsStrategyModel.
        :param post_tax_savings_amount: The post_tax_savings_amount of this SavingsStrategyModel.
        :param post_tax_savings_amount_type: The post_tax_savings_amount_type of this SavingsStrategyModel.
        :param pre_tax_savings_amount: The pre_tax_savings_amount of this SavingsStrategyModel.
        :param pre_tax_savings_amount_type: The pre_tax_savings_amount_type of this SavingsStrategyModel.
        :param start_date: The start_date of this SavingsStrategyModel.
        """
        self.openapi_types = {
            'employer_savings_amount': float,
            'employer_savings_amount_type': str,
            'end_date': datetime,
            'external_destination_id': str,
            'frequency_id': int,
            'mandatory_amount': float,
            'mandatory_amount_type': str,
            'post_tax_savings_amount': float,
            'post_tax_savings_amount_type': str,
            'pre_tax_savings_amount': float,
            'pre_tax_savings_amount_type': str,
            'start_date': datetime
        }

        self.attribute_map = {
            'employer_savings_amount': 'employerSavingsAmount',
            'employer_savings_amount_type': 'employerSavingsAmountType',
            'end_date': 'endDate',
            'external_destination_id': 'externalDestinationId',
            'frequency_id': 'frequencyId',
            'mandatory_amount': 'mandatoryAmount',
            'mandatory_amount_type': 'mandatoryAmountType',
            'post_tax_savings_amount': 'postTaxSavingsAmount',
            'post_tax_savings_amount_type': 'postTaxSavingsAmountType',
            'pre_tax_savings_amount': 'preTaxSavingsAmount',
            'pre_tax_savings_amount_type': 'preTaxSavingsAmountType',
            'start_date': 'startDate'
        }

        self._employer_savings_amount = employer_savings_amount
        self._employer_savings_amount_type = employer_savings_amount_type
        self._end_date = end_date
        self._external_destination_id = external_destination_id
        self._frequency_id = frequency_id
        self._mandatory_amount = mandatory_amount
        self._mandatory_amount_type = mandatory_amount_type
        self._post_tax_savings_amount = post_tax_savings_amount
        self._post_tax_savings_amount_type = post_tax_savings_amount_type
        self._pre_tax_savings_amount = pre_tax_savings_amount
        self._pre_tax_savings_amount_type = pre_tax_savings_amount_type
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavingsStrategyModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavingsStrategyModel of this SavingsStrategyModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employer_savings_amount(self):
        """Gets the employer_savings_amount of this SavingsStrategyModel.


        :return: The employer_savings_amount of this SavingsStrategyModel.
        :rtype: float
        """
        return self._employer_savings_amount

    @employer_savings_amount.setter
    def employer_savings_amount(self, employer_savings_amount):
        """Sets the employer_savings_amount of this SavingsStrategyModel.


        :param employer_savings_amount: The employer_savings_amount of this SavingsStrategyModel.
        :type employer_savings_amount: float
        """

        self._employer_savings_amount = employer_savings_amount

    @property
    def employer_savings_amount_type(self):
        """Gets the employer_savings_amount_type of this SavingsStrategyModel.


        :return: The employer_savings_amount_type of this SavingsStrategyModel.
        :rtype: str
        """
        return self._employer_savings_amount_type

    @employer_savings_amount_type.setter
    def employer_savings_amount_type(self, employer_savings_amount_type):
        """Sets the employer_savings_amount_type of this SavingsStrategyModel.


        :param employer_savings_amount_type: The employer_savings_amount_type of this SavingsStrategyModel.
        :type employer_savings_amount_type: str
        """
        allowed_values = ["Dollar", "Percent", "Max"]  # noqa: E501
        if employer_savings_amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `employer_savings_amount_type` ({0}), must be one of {1}"
                .format(employer_savings_amount_type, allowed_values)
            )

        self._employer_savings_amount_type = employer_savings_amount_type

    @property
    def end_date(self):
        """Gets the end_date of this SavingsStrategyModel.


        :return: The end_date of this SavingsStrategyModel.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SavingsStrategyModel.


        :param end_date: The end_date of this SavingsStrategyModel.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this SavingsStrategyModel.


        :return: The external_destination_id of this SavingsStrategyModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this SavingsStrategyModel.


        :param external_destination_id: The external_destination_id of this SavingsStrategyModel.
        :type external_destination_id: str
        """

        self._external_destination_id = external_destination_id

    @property
    def frequency_id(self):
        """Gets the frequency_id of this SavingsStrategyModel.


        :return: The frequency_id of this SavingsStrategyModel.
        :rtype: int
        """
        return self._frequency_id

    @frequency_id.setter
    def frequency_id(self, frequency_id):
        """Sets the frequency_id of this SavingsStrategyModel.


        :param frequency_id: The frequency_id of this SavingsStrategyModel.
        :type frequency_id: int
        """

        self._frequency_id = frequency_id

    @property
    def mandatory_amount(self):
        """Gets the mandatory_amount of this SavingsStrategyModel.


        :return: The mandatory_amount of this SavingsStrategyModel.
        :rtype: float
        """
        return self._mandatory_amount

    @mandatory_amount.setter
    def mandatory_amount(self, mandatory_amount):
        """Sets the mandatory_amount of this SavingsStrategyModel.


        :param mandatory_amount: The mandatory_amount of this SavingsStrategyModel.
        :type mandatory_amount: float
        """

        self._mandatory_amount = mandatory_amount

    @property
    def mandatory_amount_type(self):
        """Gets the mandatory_amount_type of this SavingsStrategyModel.


        :return: The mandatory_amount_type of this SavingsStrategyModel.
        :rtype: str
        """
        return self._mandatory_amount_type

    @mandatory_amount_type.setter
    def mandatory_amount_type(self, mandatory_amount_type):
        """Sets the mandatory_amount_type of this SavingsStrategyModel.


        :param mandatory_amount_type: The mandatory_amount_type of this SavingsStrategyModel.
        :type mandatory_amount_type: str
        """
        allowed_values = ["Dollar", "Percent", "Max"]  # noqa: E501
        if mandatory_amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mandatory_amount_type` ({0}), must be one of {1}"
                .format(mandatory_amount_type, allowed_values)
            )

        self._mandatory_amount_type = mandatory_amount_type

    @property
    def post_tax_savings_amount(self):
        """Gets the post_tax_savings_amount of this SavingsStrategyModel.


        :return: The post_tax_savings_amount of this SavingsStrategyModel.
        :rtype: float
        """
        return self._post_tax_savings_amount

    @post_tax_savings_amount.setter
    def post_tax_savings_amount(self, post_tax_savings_amount):
        """Sets the post_tax_savings_amount of this SavingsStrategyModel.


        :param post_tax_savings_amount: The post_tax_savings_amount of this SavingsStrategyModel.
        :type post_tax_savings_amount: float
        """

        self._post_tax_savings_amount = post_tax_savings_amount

    @property
    def post_tax_savings_amount_type(self):
        """Gets the post_tax_savings_amount_type of this SavingsStrategyModel.


        :return: The post_tax_savings_amount_type of this SavingsStrategyModel.
        :rtype: str
        """
        return self._post_tax_savings_amount_type

    @post_tax_savings_amount_type.setter
    def post_tax_savings_amount_type(self, post_tax_savings_amount_type):
        """Sets the post_tax_savings_amount_type of this SavingsStrategyModel.


        :param post_tax_savings_amount_type: The post_tax_savings_amount_type of this SavingsStrategyModel.
        :type post_tax_savings_amount_type: str
        """
        allowed_values = ["Dollar", "Percent", "Max"]  # noqa: E501
        if post_tax_savings_amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `post_tax_savings_amount_type` ({0}), must be one of {1}"
                .format(post_tax_savings_amount_type, allowed_values)
            )

        self._post_tax_savings_amount_type = post_tax_savings_amount_type

    @property
    def pre_tax_savings_amount(self):
        """Gets the pre_tax_savings_amount of this SavingsStrategyModel.


        :return: The pre_tax_savings_amount of this SavingsStrategyModel.
        :rtype: float
        """
        return self._pre_tax_savings_amount

    @pre_tax_savings_amount.setter
    def pre_tax_savings_amount(self, pre_tax_savings_amount):
        """Sets the pre_tax_savings_amount of this SavingsStrategyModel.


        :param pre_tax_savings_amount: The pre_tax_savings_amount of this SavingsStrategyModel.
        :type pre_tax_savings_amount: float
        """

        self._pre_tax_savings_amount = pre_tax_savings_amount

    @property
    def pre_tax_savings_amount_type(self):
        """Gets the pre_tax_savings_amount_type of this SavingsStrategyModel.


        :return: The pre_tax_savings_amount_type of this SavingsStrategyModel.
        :rtype: str
        """
        return self._pre_tax_savings_amount_type

    @pre_tax_savings_amount_type.setter
    def pre_tax_savings_amount_type(self, pre_tax_savings_amount_type):
        """Sets the pre_tax_savings_amount_type of this SavingsStrategyModel.


        :param pre_tax_savings_amount_type: The pre_tax_savings_amount_type of this SavingsStrategyModel.
        :type pre_tax_savings_amount_type: str
        """
        allowed_values = ["Dollar", "Percent", "Max"]  # noqa: E501
        if pre_tax_savings_amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pre_tax_savings_amount_type` ({0}), must be one of {1}"
                .format(pre_tax_savings_amount_type, allowed_values)
            )

        self._pre_tax_savings_amount_type = pre_tax_savings_amount_type

    @property
    def start_date(self):
        """Gets the start_date of this SavingsStrategyModel.


        :return: The start_date of this SavingsStrategyModel.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SavingsStrategyModel.


        :param start_date: The start_date of this SavingsStrategyModel.
        :type start_date: datetime
        """

        self._start_date = start_date
