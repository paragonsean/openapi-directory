# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: int=None, description: str=None, external_destination_id: str=None, external_source_id: str=None, external_source_name: str=None, fact_finder_id: int=None, last_updated: datetime=None, market_value: float=None, owner: str=None, owner_dependent_id: int=None):
        """AccountModel - a model defined in OpenAPI

        :param account_type: The account_type of this AccountModel.
        :param description: The description of this AccountModel.
        :param external_destination_id: The external_destination_id of this AccountModel.
        :param external_source_id: The external_source_id of this AccountModel.
        :param external_source_name: The external_source_name of this AccountModel.
        :param fact_finder_id: The fact_finder_id of this AccountModel.
        :param last_updated: The last_updated of this AccountModel.
        :param market_value: The market_value of this AccountModel.
        :param owner: The owner of this AccountModel.
        :param owner_dependent_id: The owner_dependent_id of this AccountModel.
        """
        self.openapi_types = {
            'account_type': int,
            'description': str,
            'external_destination_id': str,
            'external_source_id': str,
            'external_source_name': str,
            'fact_finder_id': int,
            'last_updated': datetime,
            'market_value': float,
            'owner': str,
            'owner_dependent_id': int
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'description': 'description',
            'external_destination_id': 'externalDestinationId',
            'external_source_id': 'externalSourceId',
            'external_source_name': 'externalSourceName',
            'fact_finder_id': 'factFinderId',
            'last_updated': 'lastUpdated',
            'market_value': 'marketValue',
            'owner': 'owner',
            'owner_dependent_id': 'ownerDependentId'
        }

        self._account_type = account_type
        self._description = description
        self._external_destination_id = external_destination_id
        self._external_source_id = external_source_id
        self._external_source_name = external_source_name
        self._fact_finder_id = fact_finder_id
        self._last_updated = last_updated
        self._market_value = market_value
        self._owner = owner
        self._owner_dependent_id = owner_dependent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountModel of this AccountModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this AccountModel.


        :return: The account_type of this AccountModel.
        :rtype: int
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountModel.


        :param account_type: The account_type of this AccountModel.
        :type account_type: int
        """

        self._account_type = account_type

    @property
    def description(self):
        """Gets the description of this AccountModel.


        :return: The description of this AccountModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountModel.


        :param description: The description of this AccountModel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this AccountModel.


        :return: The external_destination_id of this AccountModel.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this AccountModel.


        :param external_destination_id: The external_destination_id of this AccountModel.
        :type external_destination_id: str
        """
        if external_destination_id is not None and len(external_destination_id) > 64:
            raise ValueError("Invalid value for `external_destination_id`, length must be less than or equal to `64`")
        if external_destination_id is not None and len(external_destination_id) < 0:
            raise ValueError("Invalid value for `external_destination_id`, length must be greater than or equal to `0`")

        self._external_destination_id = external_destination_id

    @property
    def external_source_id(self):
        """Gets the external_source_id of this AccountModel.


        :return: The external_source_id of this AccountModel.
        :rtype: str
        """
        return self._external_source_id

    @external_source_id.setter
    def external_source_id(self, external_source_id):
        """Sets the external_source_id of this AccountModel.


        :param external_source_id: The external_source_id of this AccountModel.
        :type external_source_id: str
        """
        if external_source_id is not None and len(external_source_id) > 64:
            raise ValueError("Invalid value for `external_source_id`, length must be less than or equal to `64`")
        if external_source_id is not None and len(external_source_id) < 0:
            raise ValueError("Invalid value for `external_source_id`, length must be greater than or equal to `0`")

        self._external_source_id = external_source_id

    @property
    def external_source_name(self):
        """Gets the external_source_name of this AccountModel.


        :return: The external_source_name of this AccountModel.
        :rtype: str
        """
        return self._external_source_name

    @external_source_name.setter
    def external_source_name(self, external_source_name):
        """Sets the external_source_name of this AccountModel.


        :param external_source_name: The external_source_name of this AccountModel.
        :type external_source_name: str
        """
        if external_source_name is not None and len(external_source_name) > 64:
            raise ValueError("Invalid value for `external_source_name`, length must be less than or equal to `64`")
        if external_source_name is not None and len(external_source_name) < 0:
            raise ValueError("Invalid value for `external_source_name`, length must be greater than or equal to `0`")

        self._external_source_name = external_source_name

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this AccountModel.


        :return: The fact_finder_id of this AccountModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this AccountModel.


        :param fact_finder_id: The fact_finder_id of this AccountModel.
        :type fact_finder_id: int
        """
        if fact_finder_id is None:
            raise ValueError("Invalid value for `fact_finder_id`, must not be `None`")

        self._fact_finder_id = fact_finder_id

    @property
    def last_updated(self):
        """Gets the last_updated of this AccountModel.


        :return: The last_updated of this AccountModel.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AccountModel.


        :param last_updated: The last_updated of this AccountModel.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def market_value(self):
        """Gets the market_value of this AccountModel.


        :return: The market_value of this AccountModel.
        :rtype: float
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this AccountModel.


        :param market_value: The market_value of this AccountModel.
        :type market_value: float
        """

        self._market_value = market_value

    @property
    def owner(self):
        """Gets the owner of this AccountModel.


        :return: The owner of this AccountModel.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AccountModel.


        :param owner: The owner of this AccountModel.
        :type owner: str
        """
        allowed_values = ["Client", "CoClient", "Joint", "Dependent", "Other"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def owner_dependent_id(self):
        """Gets the owner_dependent_id of this AccountModel.


        :return: The owner_dependent_id of this AccountModel.
        :rtype: int
        """
        return self._owner_dependent_id

    @owner_dependent_id.setter
    def owner_dependent_id(self, owner_dependent_id):
        """Sets the owner_dependent_id of this AccountModel.


        :param owner_dependent_id: The owner_dependent_id of this AccountModel.
        :type owner_dependent_id: int
        """

        self._owner_dependent_id = owner_dependent_id
