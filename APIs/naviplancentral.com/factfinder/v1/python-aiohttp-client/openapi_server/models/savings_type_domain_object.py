# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavingsTypeDomainObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name: str=None, valid_amount_types: List[str]=None):
        """SavingsTypeDomainObject - a model defined in OpenAPI

        :param type_name: The type_name of this SavingsTypeDomainObject.
        :param valid_amount_types: The valid_amount_types of this SavingsTypeDomainObject.
        """
        self.openapi_types = {
            'type_name': str,
            'valid_amount_types': List[str]
        }

        self.attribute_map = {
            'type_name': 'typeName',
            'valid_amount_types': 'validAmountTypes'
        }

        self._type_name = type_name
        self._valid_amount_types = valid_amount_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavingsTypeDomainObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavingsTypeDomainObject of this SavingsTypeDomainObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self):
        """Gets the type_name of this SavingsTypeDomainObject.


        :return: The type_name of this SavingsTypeDomainObject.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this SavingsTypeDomainObject.


        :param type_name: The type_name of this SavingsTypeDomainObject.
        :type type_name: str
        """
        allowed_values = ["PostTaxSavings", "PreTaxSavings", "EmployerSavings", "MandatorySavings"]  # noqa: E501
        if type_name not in allowed_values:
            raise ValueError(
                "Invalid value for `type_name` ({0}), must be one of {1}"
                .format(type_name, allowed_values)
            )

        self._type_name = type_name

    @property
    def valid_amount_types(self):
        """Gets the valid_amount_types of this SavingsTypeDomainObject.


        :return: The valid_amount_types of this SavingsTypeDomainObject.
        :rtype: List[str]
        """
        return self._valid_amount_types

    @valid_amount_types.setter
    def valid_amount_types(self, valid_amount_types):
        """Sets the valid_amount_types of this SavingsTypeDomainObject.


        :param valid_amount_types: The valid_amount_types of this SavingsTypeDomainObject.
        :type valid_amount_types: List[str]
        """
        allowed_values = ["Dollar", "Percent", "Max"]  # noqa: E501
        if not set(valid_amount_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `valid_amount_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(valid_amount_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._valid_amount_types = valid_amount_types
