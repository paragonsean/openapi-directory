# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fact_finder_modules_model import FactFinderModulesModel
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class FactFinderWithIdModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, created: datetime=None, fact_finder_id: int=None, household_id: int=None, last_status_update: datetime=None, links: List[ObjectLink]=None, modules: FactFinderModulesModel=None, plan_id: int=None, plan_level: str=None, status: str=None):
        """FactFinderWithIdModel - a model defined in OpenAPI

        :param country_code: The country_code of this FactFinderWithIdModel.
        :param created: The created of this FactFinderWithIdModel.
        :param fact_finder_id: The fact_finder_id of this FactFinderWithIdModel.
        :param household_id: The household_id of this FactFinderWithIdModel.
        :param last_status_update: The last_status_update of this FactFinderWithIdModel.
        :param links: The links of this FactFinderWithIdModel.
        :param modules: The modules of this FactFinderWithIdModel.
        :param plan_id: The plan_id of this FactFinderWithIdModel.
        :param plan_level: The plan_level of this FactFinderWithIdModel.
        :param status: The status of this FactFinderWithIdModel.
        """
        self.openapi_types = {
            'country_code': str,
            'created': datetime,
            'fact_finder_id': int,
            'household_id': int,
            'last_status_update': datetime,
            'links': List[ObjectLink],
            'modules': FactFinderModulesModel,
            'plan_id': int,
            'plan_level': str,
            'status': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'created': 'created',
            'fact_finder_id': 'factFinderId',
            'household_id': 'householdId',
            'last_status_update': 'lastStatusUpdate',
            'links': 'links',
            'modules': 'modules',
            'plan_id': 'planId',
            'plan_level': 'planLevel',
            'status': 'status'
        }

        self._country_code = country_code
        self._created = created
        self._fact_finder_id = fact_finder_id
        self._household_id = household_id
        self._last_status_update = last_status_update
        self._links = links
        self._modules = modules
        self._plan_id = plan_id
        self._plan_level = plan_level
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactFinderWithIdModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FactFinderWithIdModel of this FactFinderWithIdModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this FactFinderWithIdModel.


        :return: The country_code of this FactFinderWithIdModel.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this FactFinderWithIdModel.


        :param country_code: The country_code of this FactFinderWithIdModel.
        :type country_code: str
        """
        allowed_values = ["UnitedStates", "Canada"]  # noqa: E501
        if country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `country_code` ({0}), must be one of {1}"
                .format(country_code, allowed_values)
            )

        self._country_code = country_code

    @property
    def created(self):
        """Gets the created of this FactFinderWithIdModel.


        :return: The created of this FactFinderWithIdModel.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FactFinderWithIdModel.


        :param created: The created of this FactFinderWithIdModel.
        :type created: datetime
        """

        self._created = created

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this FactFinderWithIdModel.


        :return: The fact_finder_id of this FactFinderWithIdModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this FactFinderWithIdModel.


        :param fact_finder_id: The fact_finder_id of this FactFinderWithIdModel.
        :type fact_finder_id: int
        """

        self._fact_finder_id = fact_finder_id

    @property
    def household_id(self):
        """Gets the household_id of this FactFinderWithIdModel.


        :return: The household_id of this FactFinderWithIdModel.
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this FactFinderWithIdModel.


        :param household_id: The household_id of this FactFinderWithIdModel.
        :type household_id: int
        """

        self._household_id = household_id

    @property
    def last_status_update(self):
        """Gets the last_status_update of this FactFinderWithIdModel.


        :return: The last_status_update of this FactFinderWithIdModel.
        :rtype: datetime
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this FactFinderWithIdModel.


        :param last_status_update: The last_status_update of this FactFinderWithIdModel.
        :type last_status_update: datetime
        """

        self._last_status_update = last_status_update

    @property
    def links(self):
        """Gets the links of this FactFinderWithIdModel.


        :return: The links of this FactFinderWithIdModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FactFinderWithIdModel.


        :param links: The links of this FactFinderWithIdModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def modules(self):
        """Gets the modules of this FactFinderWithIdModel.


        :return: The modules of this FactFinderWithIdModel.
        :rtype: FactFinderModulesModel
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this FactFinderWithIdModel.


        :param modules: The modules of this FactFinderWithIdModel.
        :type modules: FactFinderModulesModel
        """

        self._modules = modules

    @property
    def plan_id(self):
        """Gets the plan_id of this FactFinderWithIdModel.


        :return: The plan_id of this FactFinderWithIdModel.
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this FactFinderWithIdModel.


        :param plan_id: The plan_id of this FactFinderWithIdModel.
        :type plan_id: int
        """

        self._plan_id = plan_id

    @property
    def plan_level(self):
        """Gets the plan_level of this FactFinderWithIdModel.


        :return: The plan_level of this FactFinderWithIdModel.
        :rtype: str
        """
        return self._plan_level

    @plan_level.setter
    def plan_level(self, plan_level):
        """Sets the plan_level of this FactFinderWithIdModel.


        :param plan_level: The plan_level of this FactFinderWithIdModel.
        :type plan_level: str
        """
        allowed_values = ["Level2", "Level1"]  # noqa: E501
        if plan_level not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_level` ({0}), must be one of {1}"
                .format(plan_level, allowed_values)
            )

        self._plan_level = plan_level

    @property
    def status(self):
        """Gets the status of this FactFinderWithIdModel.


        :return: The status of this FactFinderWithIdModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FactFinderWithIdModel.


        :param status: The status of this FactFinderWithIdModel.
        :type status: str
        """
        allowed_values = ["New", "InProgress", "ClientSubmitted", "AdvisorAccepted", "Canceled", "Draft", "Deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
