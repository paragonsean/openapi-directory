# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IAccountHoldingDomainObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holding_id: int=None, account_id: int=None, cost_basis: float=None, cusip: str=None, description: str=None, external_destination_id: str=None, held_away: bool=None, market_value: float=None, symbol: str=None, valuation_date: datetime=None):
        """IAccountHoldingDomainObject - a model defined in OpenAPI

        :param account_holding_id: The account_holding_id of this IAccountHoldingDomainObject.
        :param account_id: The account_id of this IAccountHoldingDomainObject.
        :param cost_basis: The cost_basis of this IAccountHoldingDomainObject.
        :param cusip: The cusip of this IAccountHoldingDomainObject.
        :param description: The description of this IAccountHoldingDomainObject.
        :param external_destination_id: The external_destination_id of this IAccountHoldingDomainObject.
        :param held_away: The held_away of this IAccountHoldingDomainObject.
        :param market_value: The market_value of this IAccountHoldingDomainObject.
        :param symbol: The symbol of this IAccountHoldingDomainObject.
        :param valuation_date: The valuation_date of this IAccountHoldingDomainObject.
        """
        self.openapi_types = {
            'account_holding_id': int,
            'account_id': int,
            'cost_basis': float,
            'cusip': str,
            'description': str,
            'external_destination_id': str,
            'held_away': bool,
            'market_value': float,
            'symbol': str,
            'valuation_date': datetime
        }

        self.attribute_map = {
            'account_holding_id': 'accountHoldingId',
            'account_id': 'accountId',
            'cost_basis': 'costBasis',
            'cusip': 'cusip',
            'description': 'description',
            'external_destination_id': 'externalDestinationId',
            'held_away': 'heldAway',
            'market_value': 'marketValue',
            'symbol': 'symbol',
            'valuation_date': 'valuationDate'
        }

        self._account_holding_id = account_holding_id
        self._account_id = account_id
        self._cost_basis = cost_basis
        self._cusip = cusip
        self._description = description
        self._external_destination_id = external_destination_id
        self._held_away = held_away
        self._market_value = market_value
        self._symbol = symbol
        self._valuation_date = valuation_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IAccountHoldingDomainObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IAccountHoldingDomainObject of this IAccountHoldingDomainObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holding_id(self):
        """Gets the account_holding_id of this IAccountHoldingDomainObject.


        :return: The account_holding_id of this IAccountHoldingDomainObject.
        :rtype: int
        """
        return self._account_holding_id

    @account_holding_id.setter
    def account_holding_id(self, account_holding_id):
        """Sets the account_holding_id of this IAccountHoldingDomainObject.


        :param account_holding_id: The account_holding_id of this IAccountHoldingDomainObject.
        :type account_holding_id: int
        """

        self._account_holding_id = account_holding_id

    @property
    def account_id(self):
        """Gets the account_id of this IAccountHoldingDomainObject.


        :return: The account_id of this IAccountHoldingDomainObject.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this IAccountHoldingDomainObject.


        :param account_id: The account_id of this IAccountHoldingDomainObject.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def cost_basis(self):
        """Gets the cost_basis of this IAccountHoldingDomainObject.


        :return: The cost_basis of this IAccountHoldingDomainObject.
        :rtype: float
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this IAccountHoldingDomainObject.


        :param cost_basis: The cost_basis of this IAccountHoldingDomainObject.
        :type cost_basis: float
        """

        self._cost_basis = cost_basis

    @property
    def cusip(self):
        """Gets the cusip of this IAccountHoldingDomainObject.


        :return: The cusip of this IAccountHoldingDomainObject.
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this IAccountHoldingDomainObject.


        :param cusip: The cusip of this IAccountHoldingDomainObject.
        :type cusip: str
        """

        self._cusip = cusip

    @property
    def description(self):
        """Gets the description of this IAccountHoldingDomainObject.


        :return: The description of this IAccountHoldingDomainObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IAccountHoldingDomainObject.


        :param description: The description of this IAccountHoldingDomainObject.
        :type description: str
        """

        self._description = description

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this IAccountHoldingDomainObject.


        :return: The external_destination_id of this IAccountHoldingDomainObject.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this IAccountHoldingDomainObject.


        :param external_destination_id: The external_destination_id of this IAccountHoldingDomainObject.
        :type external_destination_id: str
        """

        self._external_destination_id = external_destination_id

    @property
    def held_away(self):
        """Gets the held_away of this IAccountHoldingDomainObject.


        :return: The held_away of this IAccountHoldingDomainObject.
        :rtype: bool
        """
        return self._held_away

    @held_away.setter
    def held_away(self, held_away):
        """Sets the held_away of this IAccountHoldingDomainObject.


        :param held_away: The held_away of this IAccountHoldingDomainObject.
        :type held_away: bool
        """

        self._held_away = held_away

    @property
    def market_value(self):
        """Gets the market_value of this IAccountHoldingDomainObject.


        :return: The market_value of this IAccountHoldingDomainObject.
        :rtype: float
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this IAccountHoldingDomainObject.


        :param market_value: The market_value of this IAccountHoldingDomainObject.
        :type market_value: float
        """

        self._market_value = market_value

    @property
    def symbol(self):
        """Gets the symbol of this IAccountHoldingDomainObject.


        :return: The symbol of this IAccountHoldingDomainObject.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IAccountHoldingDomainObject.


        :param symbol: The symbol of this IAccountHoldingDomainObject.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def valuation_date(self):
        """Gets the valuation_date of this IAccountHoldingDomainObject.


        :return: The valuation_date of this IAccountHoldingDomainObject.
        :rtype: datetime
        """
        return self._valuation_date

    @valuation_date.setter
    def valuation_date(self, valuation_date):
        """Sets the valuation_date of this IAccountHoldingDomainObject.


        :param valuation_date: The valuation_date of this IAccountHoldingDomainObject.
        :type valuation_date: datetime
        """

        self._valuation_date = valuation_date
