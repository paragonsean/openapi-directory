# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientsModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_destination_name: str=None, fact_finder_id: int=None, plan_action: str=None):
        """ClientsModel - a model defined in OpenAPI

        :param external_destination_name: The external_destination_name of this ClientsModel.
        :param fact_finder_id: The fact_finder_id of this ClientsModel.
        :param plan_action: The plan_action of this ClientsModel.
        """
        self.openapi_types = {
            'external_destination_name': str,
            'fact_finder_id': int,
            'plan_action': str
        }

        self.attribute_map = {
            'external_destination_name': 'externalDestinationName',
            'fact_finder_id': 'factFinderId',
            'plan_action': 'planAction'
        }

        self._external_destination_name = external_destination_name
        self._fact_finder_id = fact_finder_id
        self._plan_action = plan_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientsModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientsModel of this ClientsModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_destination_name(self):
        """Gets the external_destination_name of this ClientsModel.


        :return: The external_destination_name of this ClientsModel.
        :rtype: str
        """
        return self._external_destination_name

    @external_destination_name.setter
    def external_destination_name(self, external_destination_name):
        """Sets the external_destination_name of this ClientsModel.


        :param external_destination_name: The external_destination_name of this ClientsModel.
        :type external_destination_name: str
        """
        if external_destination_name is not None and len(external_destination_name) > 49:
            raise ValueError("Invalid value for `external_destination_name`, length must be less than or equal to `49`")
        if external_destination_name is not None and len(external_destination_name) < 0:
            raise ValueError("Invalid value for `external_destination_name`, length must be greater than or equal to `0`")

        self._external_destination_name = external_destination_name

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this ClientsModel.


        :return: The fact_finder_id of this ClientsModel.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this ClientsModel.


        :param fact_finder_id: The fact_finder_id of this ClientsModel.
        :type fact_finder_id: int
        """
        if fact_finder_id is None:
            raise ValueError("Invalid value for `fact_finder_id`, must not be `None`")

        self._fact_finder_id = fact_finder_id

    @property
    def plan_action(self):
        """Gets the plan_action of this ClientsModel.


        :return: The plan_action of this ClientsModel.
        :rtype: str
        """
        return self._plan_action

    @plan_action.setter
    def plan_action(self, plan_action):
        """Sets the plan_action of this ClientsModel.


        :param plan_action: The plan_action of this ClientsModel.
        :type plan_action: str
        """
        allowed_values = ["New", "Duplicate", "Project", "Update"]  # noqa: E501
        if plan_action not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_action` ({0}), must be one of {1}"
                .format(plan_action, allowed_values)
            )

        self._plan_action = plan_action
