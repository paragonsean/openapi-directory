# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_link import ObjectLink
from openapi_server import util


class FilingStatusTypeModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filing_status_type_id: int=None, filing_status_type_name: str=None, has_joint_dependent: bool=None, links: List[ObjectLink]=None, partner_statuses: List[int]=None, valid_for_single_analysis: bool=None):
        """FilingStatusTypeModel - a model defined in OpenAPI

        :param filing_status_type_id: The filing_status_type_id of this FilingStatusTypeModel.
        :param filing_status_type_name: The filing_status_type_name of this FilingStatusTypeModel.
        :param has_joint_dependent: The has_joint_dependent of this FilingStatusTypeModel.
        :param links: The links of this FilingStatusTypeModel.
        :param partner_statuses: The partner_statuses of this FilingStatusTypeModel.
        :param valid_for_single_analysis: The valid_for_single_analysis of this FilingStatusTypeModel.
        """
        self.openapi_types = {
            'filing_status_type_id': int,
            'filing_status_type_name': str,
            'has_joint_dependent': bool,
            'links': List[ObjectLink],
            'partner_statuses': List[int],
            'valid_for_single_analysis': bool
        }

        self.attribute_map = {
            'filing_status_type_id': 'filingStatusTypeId',
            'filing_status_type_name': 'filingStatusTypeName',
            'has_joint_dependent': 'hasJointDependent',
            'links': 'links',
            'partner_statuses': 'partnerStatuses',
            'valid_for_single_analysis': 'validForSingleAnalysis'
        }

        self._filing_status_type_id = filing_status_type_id
        self._filing_status_type_name = filing_status_type_name
        self._has_joint_dependent = has_joint_dependent
        self._links = links
        self._partner_statuses = partner_statuses
        self._valid_for_single_analysis = valid_for_single_analysis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilingStatusTypeModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilingStatusTypeModel of this FilingStatusTypeModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filing_status_type_id(self):
        """Gets the filing_status_type_id of this FilingStatusTypeModel.


        :return: The filing_status_type_id of this FilingStatusTypeModel.
        :rtype: int
        """
        return self._filing_status_type_id

    @filing_status_type_id.setter
    def filing_status_type_id(self, filing_status_type_id):
        """Sets the filing_status_type_id of this FilingStatusTypeModel.


        :param filing_status_type_id: The filing_status_type_id of this FilingStatusTypeModel.
        :type filing_status_type_id: int
        """

        self._filing_status_type_id = filing_status_type_id

    @property
    def filing_status_type_name(self):
        """Gets the filing_status_type_name of this FilingStatusTypeModel.


        :return: The filing_status_type_name of this FilingStatusTypeModel.
        :rtype: str
        """
        return self._filing_status_type_name

    @filing_status_type_name.setter
    def filing_status_type_name(self, filing_status_type_name):
        """Sets the filing_status_type_name of this FilingStatusTypeModel.


        :param filing_status_type_name: The filing_status_type_name of this FilingStatusTypeModel.
        :type filing_status_type_name: str
        """

        self._filing_status_type_name = filing_status_type_name

    @property
    def has_joint_dependent(self):
        """Gets the has_joint_dependent of this FilingStatusTypeModel.


        :return: The has_joint_dependent of this FilingStatusTypeModel.
        :rtype: bool
        """
        return self._has_joint_dependent

    @has_joint_dependent.setter
    def has_joint_dependent(self, has_joint_dependent):
        """Sets the has_joint_dependent of this FilingStatusTypeModel.


        :param has_joint_dependent: The has_joint_dependent of this FilingStatusTypeModel.
        :type has_joint_dependent: bool
        """

        self._has_joint_dependent = has_joint_dependent

    @property
    def links(self):
        """Gets the links of this FilingStatusTypeModel.


        :return: The links of this FilingStatusTypeModel.
        :rtype: List[ObjectLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FilingStatusTypeModel.


        :param links: The links of this FilingStatusTypeModel.
        :type links: List[ObjectLink]
        """

        self._links = links

    @property
    def partner_statuses(self):
        """Gets the partner_statuses of this FilingStatusTypeModel.


        :return: The partner_statuses of this FilingStatusTypeModel.
        :rtype: List[int]
        """
        return self._partner_statuses

    @partner_statuses.setter
    def partner_statuses(self, partner_statuses):
        """Sets the partner_statuses of this FilingStatusTypeModel.


        :param partner_statuses: The partner_statuses of this FilingStatusTypeModel.
        :type partner_statuses: List[int]
        """

        self._partner_statuses = partner_statuses

    @property
    def valid_for_single_analysis(self):
        """Gets the valid_for_single_analysis of this FilingStatusTypeModel.


        :return: The valid_for_single_analysis of this FilingStatusTypeModel.
        :rtype: bool
        """
        return self._valid_for_single_analysis

    @valid_for_single_analysis.setter
    def valid_for_single_analysis(self, valid_for_single_analysis):
        """Sets the valid_for_single_analysis of this FilingStatusTypeModel.


        :param valid_for_single_analysis: The valid_for_single_analysis of this FilingStatusTypeModel.
        :type valid_for_single_analysis: bool
        """

        self._valid_for_single_analysis = valid_for_single_analysis
