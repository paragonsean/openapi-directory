# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IFactFinderLiabilityDomainObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, balance_as_of_date: datetime=None, description: str=None, external_destination_id: str=None, external_source_id: str=None, fact_finder_id: int=None, frequency: int=None, import_source: str=None, interest_rate: float=None, last_updated: datetime=None, liability_id: int=None, liability_type: int=None, loan_date: datetime=None, original_principal: float=None, owner: str=None, payment: float=None, payment_type: str=None):
        """IFactFinderLiabilityDomainObject - a model defined in OpenAPI

        :param balance: The balance of this IFactFinderLiabilityDomainObject.
        :param balance_as_of_date: The balance_as_of_date of this IFactFinderLiabilityDomainObject.
        :param description: The description of this IFactFinderLiabilityDomainObject.
        :param external_destination_id: The external_destination_id of this IFactFinderLiabilityDomainObject.
        :param external_source_id: The external_source_id of this IFactFinderLiabilityDomainObject.
        :param fact_finder_id: The fact_finder_id of this IFactFinderLiabilityDomainObject.
        :param frequency: The frequency of this IFactFinderLiabilityDomainObject.
        :param import_source: The import_source of this IFactFinderLiabilityDomainObject.
        :param interest_rate: The interest_rate of this IFactFinderLiabilityDomainObject.
        :param last_updated: The last_updated of this IFactFinderLiabilityDomainObject.
        :param liability_id: The liability_id of this IFactFinderLiabilityDomainObject.
        :param liability_type: The liability_type of this IFactFinderLiabilityDomainObject.
        :param loan_date: The loan_date of this IFactFinderLiabilityDomainObject.
        :param original_principal: The original_principal of this IFactFinderLiabilityDomainObject.
        :param owner: The owner of this IFactFinderLiabilityDomainObject.
        :param payment: The payment of this IFactFinderLiabilityDomainObject.
        :param payment_type: The payment_type of this IFactFinderLiabilityDomainObject.
        """
        self.openapi_types = {
            'balance': float,
            'balance_as_of_date': datetime,
            'description': str,
            'external_destination_id': str,
            'external_source_id': str,
            'fact_finder_id': int,
            'frequency': int,
            'import_source': str,
            'interest_rate': float,
            'last_updated': datetime,
            'liability_id': int,
            'liability_type': int,
            'loan_date': datetime,
            'original_principal': float,
            'owner': str,
            'payment': float,
            'payment_type': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'balance_as_of_date': 'balanceAsOfDate',
            'description': 'description',
            'external_destination_id': 'externalDestinationId',
            'external_source_id': 'externalSourceId',
            'fact_finder_id': 'factFinderId',
            'frequency': 'frequency',
            'import_source': 'importSource',
            'interest_rate': 'interestRate',
            'last_updated': 'lastUpdated',
            'liability_id': 'liabilityId',
            'liability_type': 'liabilityType',
            'loan_date': 'loanDate',
            'original_principal': 'originalPrincipal',
            'owner': 'owner',
            'payment': 'payment',
            'payment_type': 'paymentType'
        }

        self._balance = balance
        self._balance_as_of_date = balance_as_of_date
        self._description = description
        self._external_destination_id = external_destination_id
        self._external_source_id = external_source_id
        self._fact_finder_id = fact_finder_id
        self._frequency = frequency
        self._import_source = import_source
        self._interest_rate = interest_rate
        self._last_updated = last_updated
        self._liability_id = liability_id
        self._liability_type = liability_type
        self._loan_date = loan_date
        self._original_principal = original_principal
        self._owner = owner
        self._payment = payment
        self._payment_type = payment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IFactFinderLiabilityDomainObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IFactFinderLiabilityDomainObject of this IFactFinderLiabilityDomainObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this IFactFinderLiabilityDomainObject.


        :return: The balance of this IFactFinderLiabilityDomainObject.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this IFactFinderLiabilityDomainObject.


        :param balance: The balance of this IFactFinderLiabilityDomainObject.
        :type balance: float
        """

        self._balance = balance

    @property
    def balance_as_of_date(self):
        """Gets the balance_as_of_date of this IFactFinderLiabilityDomainObject.


        :return: The balance_as_of_date of this IFactFinderLiabilityDomainObject.
        :rtype: datetime
        """
        return self._balance_as_of_date

    @balance_as_of_date.setter
    def balance_as_of_date(self, balance_as_of_date):
        """Sets the balance_as_of_date of this IFactFinderLiabilityDomainObject.


        :param balance_as_of_date: The balance_as_of_date of this IFactFinderLiabilityDomainObject.
        :type balance_as_of_date: datetime
        """

        self._balance_as_of_date = balance_as_of_date

    @property
    def description(self):
        """Gets the description of this IFactFinderLiabilityDomainObject.


        :return: The description of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IFactFinderLiabilityDomainObject.


        :param description: The description of this IFactFinderLiabilityDomainObject.
        :type description: str
        """

        self._description = description

    @property
    def external_destination_id(self):
        """Gets the external_destination_id of this IFactFinderLiabilityDomainObject.


        :return: The external_destination_id of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._external_destination_id

    @external_destination_id.setter
    def external_destination_id(self, external_destination_id):
        """Sets the external_destination_id of this IFactFinderLiabilityDomainObject.


        :param external_destination_id: The external_destination_id of this IFactFinderLiabilityDomainObject.
        :type external_destination_id: str
        """

        self._external_destination_id = external_destination_id

    @property
    def external_source_id(self):
        """Gets the external_source_id of this IFactFinderLiabilityDomainObject.


        :return: The external_source_id of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._external_source_id

    @external_source_id.setter
    def external_source_id(self, external_source_id):
        """Sets the external_source_id of this IFactFinderLiabilityDomainObject.


        :param external_source_id: The external_source_id of this IFactFinderLiabilityDomainObject.
        :type external_source_id: str
        """

        self._external_source_id = external_source_id

    @property
    def fact_finder_id(self):
        """Gets the fact_finder_id of this IFactFinderLiabilityDomainObject.


        :return: The fact_finder_id of this IFactFinderLiabilityDomainObject.
        :rtype: int
        """
        return self._fact_finder_id

    @fact_finder_id.setter
    def fact_finder_id(self, fact_finder_id):
        """Sets the fact_finder_id of this IFactFinderLiabilityDomainObject.


        :param fact_finder_id: The fact_finder_id of this IFactFinderLiabilityDomainObject.
        :type fact_finder_id: int
        """

        self._fact_finder_id = fact_finder_id

    @property
    def frequency(self):
        """Gets the frequency of this IFactFinderLiabilityDomainObject.


        :return: The frequency of this IFactFinderLiabilityDomainObject.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this IFactFinderLiabilityDomainObject.


        :param frequency: The frequency of this IFactFinderLiabilityDomainObject.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def import_source(self):
        """Gets the import_source of this IFactFinderLiabilityDomainObject.


        :return: The import_source of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._import_source

    @import_source.setter
    def import_source(self, import_source):
        """Sets the import_source of this IFactFinderLiabilityDomainObject.


        :param import_source: The import_source of this IFactFinderLiabilityDomainObject.
        :type import_source: str
        """

        self._import_source = import_source

    @property
    def interest_rate(self):
        """Gets the interest_rate of this IFactFinderLiabilityDomainObject.


        :return: The interest_rate of this IFactFinderLiabilityDomainObject.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this IFactFinderLiabilityDomainObject.


        :param interest_rate: The interest_rate of this IFactFinderLiabilityDomainObject.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def last_updated(self):
        """Gets the last_updated of this IFactFinderLiabilityDomainObject.


        :return: The last_updated of this IFactFinderLiabilityDomainObject.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this IFactFinderLiabilityDomainObject.


        :param last_updated: The last_updated of this IFactFinderLiabilityDomainObject.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def liability_id(self):
        """Gets the liability_id of this IFactFinderLiabilityDomainObject.


        :return: The liability_id of this IFactFinderLiabilityDomainObject.
        :rtype: int
        """
        return self._liability_id

    @liability_id.setter
    def liability_id(self, liability_id):
        """Sets the liability_id of this IFactFinderLiabilityDomainObject.


        :param liability_id: The liability_id of this IFactFinderLiabilityDomainObject.
        :type liability_id: int
        """

        self._liability_id = liability_id

    @property
    def liability_type(self):
        """Gets the liability_type of this IFactFinderLiabilityDomainObject.


        :return: The liability_type of this IFactFinderLiabilityDomainObject.
        :rtype: int
        """
        return self._liability_type

    @liability_type.setter
    def liability_type(self, liability_type):
        """Sets the liability_type of this IFactFinderLiabilityDomainObject.


        :param liability_type: The liability_type of this IFactFinderLiabilityDomainObject.
        :type liability_type: int
        """

        self._liability_type = liability_type

    @property
    def loan_date(self):
        """Gets the loan_date of this IFactFinderLiabilityDomainObject.


        :return: The loan_date of this IFactFinderLiabilityDomainObject.
        :rtype: datetime
        """
        return self._loan_date

    @loan_date.setter
    def loan_date(self, loan_date):
        """Sets the loan_date of this IFactFinderLiabilityDomainObject.


        :param loan_date: The loan_date of this IFactFinderLiabilityDomainObject.
        :type loan_date: datetime
        """

        self._loan_date = loan_date

    @property
    def original_principal(self):
        """Gets the original_principal of this IFactFinderLiabilityDomainObject.


        :return: The original_principal of this IFactFinderLiabilityDomainObject.
        :rtype: float
        """
        return self._original_principal

    @original_principal.setter
    def original_principal(self, original_principal):
        """Sets the original_principal of this IFactFinderLiabilityDomainObject.


        :param original_principal: The original_principal of this IFactFinderLiabilityDomainObject.
        :type original_principal: float
        """

        self._original_principal = original_principal

    @property
    def owner(self):
        """Gets the owner of this IFactFinderLiabilityDomainObject.


        :return: The owner of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IFactFinderLiabilityDomainObject.


        :param owner: The owner of this IFactFinderLiabilityDomainObject.
        :type owner: str
        """
        allowed_values = ["Client", "CoClient", "Joint"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def payment(self):
        """Gets the payment of this IFactFinderLiabilityDomainObject.


        :return: The payment of this IFactFinderLiabilityDomainObject.
        :rtype: float
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this IFactFinderLiabilityDomainObject.


        :param payment: The payment of this IFactFinderLiabilityDomainObject.
        :type payment: float
        """

        self._payment = payment

    @property
    def payment_type(self):
        """Gets the payment_type of this IFactFinderLiabilityDomainObject.


        :return: The payment_type of this IFactFinderLiabilityDomainObject.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this IFactFinderLiabilityDomainObject.


        :param payment_type: The payment_type of this IFactFinderLiabilityDomainObject.
        :type payment_type: str
        """
        allowed_values = ["InterestOnly", "PrincipalAndInterest", "SetPrincipal", "LastPeriod"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type
