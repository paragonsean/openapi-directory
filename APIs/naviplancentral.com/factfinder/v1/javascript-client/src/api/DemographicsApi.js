/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DemographicsDependentModel from '../model/DemographicsDependentModel';
import DemographicsDependentWithIdModel from '../model/DemographicsDependentWithIdModel';
import DemographicsDependentsModel from '../model/DemographicsDependentsModel';
import DemographicsModel from '../model/DemographicsModel';
import DemographicsWithIdModel from '../model/DemographicsWithIdModel';

/**
* Demographics service.
* @module api/DemographicsApi
* @version v1
*/
export default class DemographicsApi {

    /**
    * Constructs a new DemographicsApi. 
    * @alias module:api/DemographicsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the demographicsDeleteDependentByDemographicidId operation.
     * @callback module:api/DemographicsApi~demographicsDeleteDependentByDemographicidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Dependent tied to a Fact Finder.<br />                Purpose: Allows for removal of a Dependent from a Fact Finder.
     * @param {Number} demographicId The ID of the Demographic information used to identify which Dependent to remove
     * @param {Number} id The Dependent ID used to identify which Dependent to remove
     * @param {module:api/DemographicsApi~demographicsDeleteDependentByDemographicidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    demographicsDeleteDependentByDemographicidId(demographicId, id, callback) {
      let postBody = null;
      // verify the required parameter 'demographicId' is set
      if (demographicId === undefined || demographicId === null) {
        throw new Error("Missing the required parameter 'demographicId' when calling demographicsDeleteDependentByDemographicidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demographicsDeleteDependentByDemographicidId");
      }

      let pathParams = {
        'demographicId': demographicId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Demographics/{demographicId}/Dependents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsGetById operation.
     * @callback module:api/DemographicsApi~demographicsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves Demographic information for the specified Demographic information ID.<br />                Purpose: Provides access to the Demographic information including city and state.
     * @param {Number} id The ID of the Demographic information used to retreive the Demographic information
     * @param {module:api/DemographicsApi~demographicsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsWithIdModel}
     */
    demographicsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demographicsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsGetDemographicsByFactFinderIdByFactfinderid operation.
     * @callback module:api/DemographicsApi~demographicsGetDemographicsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Demographic information for the specified Fact Finder ID.<br />                Purpose: Provides access to the Demographic information including city and state.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Demographic information
     * @param {module:api/DemographicsApi~demographicsGetDemographicsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsWithIdModel}
     */
    demographicsGetDemographicsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling demographicsGetDemographicsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsGetDependentByDemographicidId operation.
     * @callback module:api/DemographicsApi~demographicsGetDependentByDemographicidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsDependentWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Dependent for the specified Dependent ID.<br />                Purpose: Provides access to the Dependent including first and last name.
     * @param {Number} demographicId The ID of the Demographic information used to retrieve Dependents
     * @param {Number} id The ID of the Dependent used to retreive the Dependent
     * @param {module:api/DemographicsApi~demographicsGetDependentByDemographicidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsDependentWithIdModel}
     */
    demographicsGetDependentByDemographicidId(demographicId, id, callback) {
      let postBody = null;
      // verify the required parameter 'demographicId' is set
      if (demographicId === undefined || demographicId === null) {
        throw new Error("Missing the required parameter 'demographicId' when calling demographicsGetDependentByDemographicidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demographicsGetDependentByDemographicidId");
      }

      let pathParams = {
        'demographicId': demographicId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsDependentWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics/{demographicId}/Dependents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsGetDependentsByDemographicid operation.
     * @callback module:api/DemographicsApi~demographicsGetDependentsByDemographicidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsDependentsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Dependents for the specified Demographic information ID.<br />                Purpose: Provides access to the Dependents including first and last name.
     * @param {Number} demographicId The ID of the Demographic information used to retrieve Dependents
     * @param {module:api/DemographicsApi~demographicsGetDependentsByDemographicidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsDependentsModel}
     */
    demographicsGetDependentsByDemographicid(demographicId, callback) {
      let postBody = null;
      // verify the required parameter 'demographicId' is set
      if (demographicId === undefined || demographicId === null) {
        throw new Error("Missing the required parameter 'demographicId' when calling demographicsGetDependentsByDemographicid");
      }

      let pathParams = {
        'demographicId': demographicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsDependentsModel;
      return this.apiClient.callApi(
        '/api/Demographics/{demographicId}/Dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsPostByDemographicidModel operation.
     * @callback module:api/DemographicsApi~demographicsPostByDemographicidModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsDependentWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Dependent.<br />                Purpose: Allows for creation of Dependents on a Fact Finder.
     * @param {Number} demographicId The ID of the Demographic information to add the Dependent to
     * @param {module:model/DemographicsDependentModel} model The Dependent to be added to the Fact Finder
     * @param {module:api/DemographicsApi~demographicsPostByDemographicidModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsDependentWithIdModel}
     */
    demographicsPostByDemographicidModel(demographicId, model, callback) {
      let postBody = model;
      // verify the required parameter 'demographicId' is set
      if (demographicId === undefined || demographicId === null) {
        throw new Error("Missing the required parameter 'demographicId' when calling demographicsPostByDemographicidModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling demographicsPostByDemographicidModel");
      }

      let pathParams = {
        'demographicId': demographicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsDependentWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics/{demographicId}/Dependents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsPostByModel operation.
     * @callback module:api/DemographicsApi~demographicsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates Demographic information.<br />                Purpose: Allows for creation of Demographic information on a Fact Finder.
     * @param {module:model/DemographicsModel} model The Demographic information to be added to the Fact Finder
     * @param {module:api/DemographicsApi~demographicsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsWithIdModel}
     */
    demographicsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling demographicsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsPutByDemographicidIdModel operation.
     * @callback module:api/DemographicsApi~demographicsPutByDemographicidIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsDependentWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Dependent.<br />                Purpose: Allows for complete replacement of a Dependent on a Fact Finder.
     * @param {Number} demographicId The ID of the Demographic information used to identify which Dependent to update
     * @param {Number} id The existing Dependent ID used to identify which Dependent to update
     * @param {module:model/DemographicsDependentModel} model The Dependent to be updated on a Fact Finder
     * @param {module:api/DemographicsApi~demographicsPutByDemographicidIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsDependentWithIdModel}
     */
    demographicsPutByDemographicidIdModel(demographicId, id, model, callback) {
      let postBody = model;
      // verify the required parameter 'demographicId' is set
      if (demographicId === undefined || demographicId === null) {
        throw new Error("Missing the required parameter 'demographicId' when calling demographicsPutByDemographicidIdModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demographicsPutByDemographicidIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling demographicsPutByDemographicidIdModel");
      }

      let pathParams = {
        'demographicId': demographicId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsDependentWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics/{demographicId}/Dependents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demographicsPutByIdModel operation.
     * @callback module:api/DemographicsApi~demographicsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DemographicsWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates Demographic information.<br />                Purpose: Allows for complete replacement of Demographic information on a Fact Finder.
     * @param {Number} id The existing Demographic information ID used to identify which Demographic information to update
     * @param {module:model/DemographicsModel} model The Demographic information to be updated on a Fact Finder
     * @param {module:api/DemographicsApi~demographicsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DemographicsWithIdModel}
     */
    demographicsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demographicsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling demographicsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DemographicsWithIdModel;
      return this.apiClient.callApi(
        '/api/Demographics/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
