/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LifestyleAssetModel from '../model/LifestyleAssetModel';
import LifestyleAssetWithIdModel from '../model/LifestyleAssetWithIdModel';
import LifestyleAssetsModel from '../model/LifestyleAssetsModel';

/**
* LifestyleAssets service.
* @module api/LifestyleAssetsApi
* @version v1
*/
export default class LifestyleAssetsApi {

    /**
    * Constructs a new LifestyleAssetsApi. 
    * @alias module:api/LifestyleAssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lifestyleAssetsDeleteById operation.
     * @callback module:api/LifestyleAssetsApi~lifestyleAssetsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Lifestyle Asset tied to a Fact Finder.<br />                Purpose: Allows for removal of a Lifestyle Asset from a Fact Finder.
     * @param {Number} id The Lifestyle Asset ID used to identify which Lifestyle Asset to remove
     * @param {module:api/LifestyleAssetsApi~lifestyleAssetsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lifestyleAssetsDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifestyleAssetsDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/LifestyleAssets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifestyleAssetsGetById operation.
     * @callback module:api/LifestyleAssetsApi~lifestyleAssetsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifestyleAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Lifestyle Asset for the specified Lifestyle Asset ID.<br />                Purpose: Provides access to the Lifestyle Asset including description and market value.
     * @param {Number} id The ID of the Lifestyle Asset used to retreive the Lifestyle Asset
     * @param {module:api/LifestyleAssetsApi~lifestyleAssetsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifestyleAssetWithIdModel}
     */
    lifestyleAssetsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifestyleAssetsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifestyleAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/LifestyleAssets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderid operation.
     * @callback module:api/LifestyleAssetsApi~lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifestyleAssetsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Lifestyle Assets for the specified Fact Finder ID.<br />                Purpose: Provides access to the Lifestyle Assets including description and market value.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Lifestyle Assets
     * @param {module:api/LifestyleAssetsApi~lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifestyleAssetsModel}
     */
    lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling lifestyleAssetsGetLifestyleAssetsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifestyleAssetsModel;
      return this.apiClient.callApi(
        '/api/LifestyleAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifestyleAssetsPostByModel operation.
     * @callback module:api/LifestyleAssetsApi~lifestyleAssetsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifestyleAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Lifestyle Asset.<br />                Purpose: Allows for creation of Lifestyle Assets on a Fact Finder.
     * @param {module:model/LifestyleAssetModel} model The Lifestyle Asset to be added to the Fact Finder
     * @param {module:api/LifestyleAssetsApi~lifestyleAssetsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifestyleAssetWithIdModel}
     */
    lifestyleAssetsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifestyleAssetsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifestyleAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/LifestyleAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifestyleAssetsPutByIdModel operation.
     * @callback module:api/LifestyleAssetsApi~lifestyleAssetsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifestyleAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Lifestyle Asset.<br />                Purpose: Allows for complete replacement of a Lifestyle Asset on a Fact Finder.
     * @param {Number} id The existing Lifestyle Asset ID used to identify which Lifestyle Asset to update
     * @param {module:model/LifestyleAssetModel} model The Lifestyle Asset to be updated on a Fact Finder
     * @param {module:api/LifestyleAssetsApi~lifestyleAssetsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifestyleAssetWithIdModel}
     */
    lifestyleAssetsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifestyleAssetsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifestyleAssetsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifestyleAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/LifestyleAssets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
