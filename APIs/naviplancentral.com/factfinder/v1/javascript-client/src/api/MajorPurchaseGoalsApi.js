/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MajorPurchaseGoalModel from '../model/MajorPurchaseGoalModel';
import MajorPurchaseGoalWithIdModel from '../model/MajorPurchaseGoalWithIdModel';
import MajorPurchaseGoalsModel from '../model/MajorPurchaseGoalsModel';

/**
* MajorPurchaseGoals service.
* @module api/MajorPurchaseGoalsApi
* @version v1
*/
export default class MajorPurchaseGoalsApi {

    /**
    * Constructs a new MajorPurchaseGoalsApi. 
    * @alias module:api/MajorPurchaseGoalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the majorPurchaseGoalsDeleteById operation.
     * @callback module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Major Purchase tied to a Fact Finder.<br />                Purpose: Allows for removal of a Major Purchase from a Fact Finder.
     * @param {Number} id The Major Purchase ID used to identify which Major Purchase to remove
     * @param {module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    majorPurchaseGoalsDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling majorPurchaseGoalsDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/MajorPurchaseGoals/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the majorPurchaseGoalsGetById operation.
     * @callback module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MajorPurchaseGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Major Purchase for the specified Major Purchase ID.<br />                Purpose: Provides access to the Major Purchase including description and amount.
     * @param {Number} id The ID of the Major Purchase used to retreive the Major Purchase
     * @param {module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MajorPurchaseGoalWithIdModel}
     */
    majorPurchaseGoalsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling majorPurchaseGoalsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MajorPurchaseGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/MajorPurchaseGoals/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderid operation.
     * @callback module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MajorPurchaseGoalsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Major Purchases for the specified Fact Finder ID.<br />                Purpose: Provides access to the Major Purchases including description and amount.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Major Purchases
     * @param {module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MajorPurchaseGoalsModel}
     */
    majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling majorPurchaseGoalsGetMajorPurchaseGoalsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MajorPurchaseGoalsModel;
      return this.apiClient.callApi(
        '/api/MajorPurchaseGoals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the majorPurchaseGoalsPostByModel operation.
     * @callback module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MajorPurchaseGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Major Purchase.<br />                Purpose: Allows for creation of Major Purchases on a Fact Finder.
     * @param {module:model/MajorPurchaseGoalModel} model The Major Purchase to be added to the Fact Finder
     * @param {module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MajorPurchaseGoalWithIdModel}
     */
    majorPurchaseGoalsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling majorPurchaseGoalsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = MajorPurchaseGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/MajorPurchaseGoals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the majorPurchaseGoalsPutByIdModel operation.
     * @callback module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MajorPurchaseGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Major Purchase.<br />                Purpose: Allows for complete replacement of a Major Purchase on a Fact Finder.
     * @param {Number} id The existing Major Purchase ID used to identify which Major Purchase to update
     * @param {module:model/MajorPurchaseGoalModel} model The Major Purchase to be updated on a Fact Finder
     * @param {module:api/MajorPurchaseGoalsApi~majorPurchaseGoalsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MajorPurchaseGoalWithIdModel}
     */
    majorPurchaseGoalsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling majorPurchaseGoalsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling majorPurchaseGoalsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = MajorPurchaseGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/MajorPurchaseGoals/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
