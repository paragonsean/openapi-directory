/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FactFinderModuleModel from '../model/FactFinderModuleModel';
import FactFinderModuleWithIdModel from '../model/FactFinderModuleWithIdModel';
import FactFinderModulesModel from '../model/FactFinderModulesModel';

/**
* FactFinderModules service.
* @module api/FactFinderModulesApi
* @version v1
*/
export default class FactFinderModulesApi {

    /**
    * Constructs a new FactFinderModulesApi. 
    * @alias module:api/FactFinderModulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the factFinderModulesGetByFactfinderid operation.
     * @callback module:api/FactFinderModulesApi~factFinderModulesGetByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderModulesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Fact Finder Modules for the specified Fact Finder ID.<br />                Purpose: Provides access to the Fact Finder Modules including description and policy type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Fact Finder Modules
     * @param {module:api/FactFinderModulesApi~factFinderModulesGetByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderModulesModel}
     */
    factFinderModulesGetByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling factFinderModulesGetByFactfinderid");
      }

      let pathParams = {
        'factFinderId': factFinderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderModulesModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{factFinderId}/Modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFinderModulesGetByFactfinderidId operation.
     * @callback module:api/FactFinderModulesApi~factFinderModulesGetByFactfinderidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderModuleWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Fact Finder Module for the specified Fact Finder Module ID.<br />                Purpose: Provides access to the Fact Finder Module including description and policy type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Fact Finder Module
     * @param {Number} id The ID of the Fact Finder Module used to retreive the Fact Finder Module
     * @param {module:api/FactFinderModulesApi~factFinderModulesGetByFactfinderidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderModuleWithIdModel}
     */
    factFinderModulesGetByFactfinderidId(factFinderId, id, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling factFinderModulesGetByFactfinderidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFinderModulesGetByFactfinderidId");
      }

      let pathParams = {
        'factFinderId': factFinderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderModuleWithIdModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{factFinderId}/Modules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFinderModulesPutByModelFactfinderidId operation.
     * @callback module:api/FactFinderModulesApi~factFinderModulesPutByModelFactfinderidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderModuleWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Fact Finder Module.<br />                Purpose: Allows for complete replacement of a Fact Finder Module on a Fact Finder.
     * @param {Number} factFinderId The ID of the Fact Finder used to identify the Fact Finder Module to update
     * @param {Number} id The existing Fact Finder Module ID used to identify which Fact Finder Module to update
     * @param {module:model/FactFinderModuleModel} model The Fact Finder Module to be updated on a Fact Finder
     * @param {module:api/FactFinderModulesApi~factFinderModulesPutByModelFactfinderidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderModuleWithIdModel}
     */
    factFinderModulesPutByModelFactfinderidId(factFinderId, id, model, callback) {
      let postBody = model;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling factFinderModulesPutByModelFactfinderidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFinderModulesPutByModelFactfinderidId");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling factFinderModulesPutByModelFactfinderidId");
      }

      let pathParams = {
        'factFinderId': factFinderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderModuleWithIdModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{factFinderId}/Modules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
