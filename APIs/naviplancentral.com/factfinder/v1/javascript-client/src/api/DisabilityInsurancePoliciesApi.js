/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DisabilityInsurancePoliciesModel from '../model/DisabilityInsurancePoliciesModel';
import DisabilityInsurancePolicyModel from '../model/DisabilityInsurancePolicyModel';
import DisabilityInsurancePolicyWithIdModel from '../model/DisabilityInsurancePolicyWithIdModel';

/**
* DisabilityInsurancePolicies service.
* @module api/DisabilityInsurancePoliciesApi
* @version v1
*/
export default class DisabilityInsurancePoliciesApi {

    /**
    * Constructs a new DisabilityInsurancePoliciesApi. 
    * @alias module:api/DisabilityInsurancePoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disabilityInsurancePoliciesDeleteById operation.
     * @callback module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Disability Insurance Policy tied to a Fact Finder.<br />                Purpose: Allows for removal of a Disability Insurance Policy from a Fact Finder.
     * @param {Number} id The Disability Insurance Policy ID used to identify which Disability Insurance Policy to remove
     * @param {module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disabilityInsurancePoliciesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disabilityInsurancePoliciesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/DisabilityInsurancePolicies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disabilityInsurancePoliciesGetById operation.
     * @callback module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisabilityInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Disability Insurance Policy for the specified Disability Insurance Policy ID.<br />                Purpose: Provides access to the Disability Insurance Policy including description and policy type.
     * @param {Number} id The ID of the Disability Insurance Policy used to retreive the Disability Insurance Policy
     * @param {module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisabilityInsurancePolicyWithIdModel}
     */
    disabilityInsurancePoliciesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disabilityInsurancePoliciesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DisabilityInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/DisabilityInsurancePolicies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid operation.
     * @callback module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisabilityInsurancePoliciesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Disability Insurance Policies for the specified Fact Finder ID.<br />                Purpose: Provides access to the Disability Insurance Policies including description and policy type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Disability Insurance Policies
     * @param {module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisabilityInsurancePoliciesModel}
     */
    disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling disabilityInsurancePoliciesGetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DisabilityInsurancePoliciesModel;
      return this.apiClient.callApi(
        '/api/DisabilityInsurancePolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disabilityInsurancePoliciesPostByModel operation.
     * @callback module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisabilityInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Disability Insurance Policy.<br />                Purpose: Allows for creation of Disability Insurance Policies on a Fact Finder.
     * @param {module:model/DisabilityInsurancePolicyModel} model The Disability Insurance Policy to be added to the Fact Finder
     * @param {module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisabilityInsurancePolicyWithIdModel}
     */
    disabilityInsurancePoliciesPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling disabilityInsurancePoliciesPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DisabilityInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/DisabilityInsurancePolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disabilityInsurancePoliciesPutByIdModel operation.
     * @callback module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisabilityInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Disability Insurance Policy.<br />                Purpose: Allows for complete replacement of a Disability Insurance Policy on a Fact Finder.
     * @param {Number} id The existing Disability Insurance Policy ID used to identify which Disability Insurance Policy to update
     * @param {module:model/DisabilityInsurancePolicyModel} model The Disability Insurance Policy to be updated on a Fact Finder
     * @param {module:api/DisabilityInsurancePoliciesApi~disabilityInsurancePoliciesPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisabilityInsurancePolicyWithIdModel}
     */
    disabilityInsurancePoliciesPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disabilityInsurancePoliciesPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling disabilityInsurancePoliciesPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = DisabilityInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/DisabilityInsurancePolicies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
