/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LiabilitiesModel from '../model/LiabilitiesModel';
import LiabilityModel from '../model/LiabilityModel';
import LiabilityWithIdModel from '../model/LiabilityWithIdModel';

/**
* Liabilities service.
* @module api/LiabilitiesApi
* @version v1
*/
export default class LiabilitiesApi {

    /**
    * Constructs a new LiabilitiesApi. 
    * @alias module:api/LiabilitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the liabilitiesDeleteById operation.
     * @callback module:api/LiabilitiesApi~liabilitiesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Liability tied to a Fact Finder.<br />                Purpose: Allows for removal of a Liability from a Fact Finder.
     * @param {Number} id The Liability ID used to identify which Liability to remove
     * @param {module:api/LiabilitiesApi~liabilitiesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liabilitiesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling liabilitiesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Liabilities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liabilitiesGetById operation.
     * @callback module:api/LiabilitiesApi~liabilitiesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilityWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Liability for the specified Liability ID.<br />                Purpose: Provides access to the Liability including owner and type.
     * @param {Number} id The ID of the Liability used to retreive the Liability
     * @param {module:api/LiabilitiesApi~liabilitiesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilityWithIdModel}
     */
    liabilitiesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling liabilitiesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LiabilityWithIdModel;
      return this.apiClient.callApi(
        '/api/Liabilities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid operation.
     * @callback module:api/LiabilitiesApi~liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilitiesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Liabilities for the specified Fact Finder ID.<br />                Purpose: Provides access to the Liabilities including owner and type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Liabilities
     * @param {Object} opts Optional parameters
     * @param {String} [externalSourceId] The external source ID used to filter Liabilities
     * @param {module:api/LiabilitiesApi~liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilitiesModel}
     */
    liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid(factFinderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling liabilitiesGetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId,
        'externalSourceId': opts['externalSourceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LiabilitiesModel;
      return this.apiClient.callApi(
        '/api/Liabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liabilitiesPostByModel operation.
     * @callback module:api/LiabilitiesApi~liabilitiesPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilityWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Liability.<br />                Purpose: Allows for creation of Liabilities on a Fact Finder.
     * @param {module:model/LiabilityModel} model The Liability to be added to the Fact Finder
     * @param {module:api/LiabilitiesApi~liabilitiesPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilityWithIdModel}
     */
    liabilitiesPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling liabilitiesPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LiabilityWithIdModel;
      return this.apiClient.callApi(
        '/api/Liabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liabilitiesPutByIdModel operation.
     * @callback module:api/LiabilitiesApi~liabilitiesPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilityWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Liability.<br />                Purpose: Allows for complete replacement of a Liability on a Fact Finder.
     * @param {Number} id The existing Liability ID used to identify which Liability to update
     * @param {module:model/LiabilityModel} model The Liability to be updated on a Fact Finder
     * @param {module:api/LiabilitiesApi~liabilitiesPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilityWithIdModel}
     */
    liabilitiesPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling liabilitiesPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling liabilitiesPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LiabilityWithIdModel;
      return this.apiClient.callApi(
        '/api/Liabilities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
