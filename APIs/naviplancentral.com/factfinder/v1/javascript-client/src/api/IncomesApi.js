/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IncomeModel from '../model/IncomeModel';
import IncomeWithIdModel from '../model/IncomeWithIdModel';
import IncomesModel from '../model/IncomesModel';

/**
* Incomes service.
* @module api/IncomesApi
* @version v1
*/
export default class IncomesApi {

    /**
    * Constructs a new IncomesApi. 
    * @alias module:api/IncomesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the incomesDeleteById operation.
     * @callback module:api/IncomesApi~incomesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes an Income tied to a Fact Finder.<br />                Purpose: Allows for removal of an Income from a Fact Finder.
     * @param {Number} id The Income ID used to identify which Income to remove
     * @param {module:api/IncomesApi~incomesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incomesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling incomesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Incomes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomesGetById operation.
     * @callback module:api/IncomesApi~incomesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Income for the specified Income ID.<br />                Purpose: Provides access to the Income including annual amount and start date.
     * @param {Number} id The ID of the Income used to retreive the Income
     * @param {module:api/IncomesApi~incomesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeWithIdModel}
     */
    incomesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling incomesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = IncomeWithIdModel;
      return this.apiClient.callApi(
        '/api/Incomes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomesGetIncomesByFactFinderIdByFactfinderid operation.
     * @callback module:api/IncomesApi~incomesGetIncomesByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Incomes for the specified Fact Finder ID.<br />                Purpose: Provides access to the Incomes including annual amount and start date.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Incomes
     * @param {module:api/IncomesApi~incomesGetIncomesByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomesModel}
     */
    incomesGetIncomesByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling incomesGetIncomesByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = IncomesModel;
      return this.apiClient.callApi(
        '/api/Incomes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomesPostByModel operation.
     * @callback module:api/IncomesApi~incomesPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Income.<br />                Purpose: Allows for creation of Incomes on a Fact Finder.
     * @param {module:model/IncomeModel} model The Income to be added to the Fact Finder
     * @param {module:api/IncomesApi~incomesPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeWithIdModel}
     */
    incomesPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling incomesPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = IncomeWithIdModel;
      return this.apiClient.callApi(
        '/api/Incomes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomesPutByIdModel operation.
     * @callback module:api/IncomesApi~incomesPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates an Income.<br />                Purpose: Allows for complete replacement of an Income on a Fact Finder.
     * @param {Number} id The existing Income ID used to identify which Income to update
     * @param {module:model/IncomeModel} model The Income to be updated on a Fact Finder
     * @param {module:api/IncomesApi~incomesPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeWithIdModel}
     */
    incomesPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling incomesPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling incomesPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = IncomeWithIdModel;
      return this.apiClient.callApi(
        '/api/Incomes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
