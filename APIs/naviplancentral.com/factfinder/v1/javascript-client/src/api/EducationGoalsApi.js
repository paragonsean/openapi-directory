/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EducationExpenseModel from '../model/EducationExpenseModel';
import EducationExpenseWithIdModel from '../model/EducationExpenseWithIdModel';
import EducationExpensesModel from '../model/EducationExpensesModel';
import EducationGoalModel from '../model/EducationGoalModel';
import EducationGoalWithIdModel from '../model/EducationGoalWithIdModel';
import EducationGoalsModel from '../model/EducationGoalsModel';

/**
* EducationGoals service.
* @module api/EducationGoalsApi
* @version v1
*/
export default class EducationGoalsApi {

    /**
    * Constructs a new EducationGoalsApi. 
    * @alias module:api/EducationGoalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the educationGoalsDeleteByEducationgoalidId operation.
     * @callback module:api/EducationGoalsApi~educationGoalsDeleteByEducationgoalidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes an Education Goal Expense tied to a Fact Finder.<br />                Purpose: Allows for removal of an Education Goal Expense from a Fact Finder.
     * @param {Number} educationGoalId The Education Goal ID used to locate the Goal to delete the Expense under
     * @param {Number} id The Education Goal Expense ID used to identify which Education Goal Expense to remove
     * @param {module:api/EducationGoalsApi~educationGoalsDeleteByEducationgoalidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    educationGoalsDeleteByEducationgoalidId(educationGoalId, id, callback) {
      let postBody = null;
      // verify the required parameter 'educationGoalId' is set
      if (educationGoalId === undefined || educationGoalId === null) {
        throw new Error("Missing the required parameter 'educationGoalId' when calling educationGoalsDeleteByEducationgoalidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsDeleteByEducationgoalidId");
      }

      let pathParams = {
        'educationGoalId': educationGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/EducationGoals/{educationGoalId}/Expenses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsDeleteById operation.
     * @callback module:api/EducationGoalsApi~educationGoalsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes an Education Goal tied to a Fact Finder.<br />                Purpose: Allows for removal of an Education Goal from a Fact Finder.
     * @param {Number} id The Education Goal ID used to identify which Education Goal to remove
     * @param {module:api/EducationGoalsApi~educationGoalsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    educationGoalsDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/EducationGoals/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsGetById operation.
     * @callback module:api/EducationGoalsApi~educationGoalsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Education Goal for the specified Education Goal ID.<br />                Purpose: Provides access to the Education Goal including description and projected cost.
     * @param {Number} id The ID of the Education Goal used to retreive the Education Goal
     * @param {module:api/EducationGoalsApi~educationGoalsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationGoalWithIdModel}
     */
    educationGoalsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsGetEducationExpenseByEducationgoalidId operation.
     * @callback module:api/EducationGoalsApi~educationGoalsGetEducationExpenseByEducationgoalidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Education Goal Expense for the specified Education Goal Expense ID.<br />                Purpose: Provides access to the Education Goal Expense including description and annual cost.
     * @param {Number} educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses
     * @param {Number} id The ID of the Education Goal Expense used to retreive the Education Goal Expense
     * @param {module:api/EducationGoalsApi~educationGoalsGetEducationExpenseByEducationgoalidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationExpenseWithIdModel}
     */
    educationGoalsGetEducationExpenseByEducationgoalidId(educationGoalId, id, callback) {
      let postBody = null;
      // verify the required parameter 'educationGoalId' is set
      if (educationGoalId === undefined || educationGoalId === null) {
        throw new Error("Missing the required parameter 'educationGoalId' when calling educationGoalsGetEducationExpenseByEducationgoalidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsGetEducationExpenseByEducationgoalidId");
      }

      let pathParams = {
        'educationGoalId': educationGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{educationGoalId}/Expenses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid operation.
     * @callback module:api/EducationGoalsApi~educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationExpensesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Education Goal Expenses for the specified Education Goal ID.<br />                Purpose: Provides access to the Education Goal Expenses including description and annual cost.
     * @param {Number} educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses
     * @param {module:api/EducationGoalsApi~educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationExpensesModel}
     */
    educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid(educationGoalId, callback) {
      let postBody = null;
      // verify the required parameter 'educationGoalId' is set
      if (educationGoalId === undefined || educationGoalId === null) {
        throw new Error("Missing the required parameter 'educationGoalId' when calling educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid");
      }

      let pathParams = {
        'educationGoalId': educationGoalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationExpensesModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{educationGoalId}/Expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid operation.
     * @callback module:api/EducationGoalsApi~educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationGoalsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Education Goals for the specified Fact Finder ID.<br />                Purpose: Provides access to the Education Goals including description and projected cost.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Education Goals
     * @param {module:api/EducationGoalsApi~educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationGoalsModel}
     */
    educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationGoalsModel;
      return this.apiClient.callApi(
        '/api/EducationGoals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsPostByEducationgoalidModel operation.
     * @callback module:api/EducationGoalsApi~educationGoalsPostByEducationgoalidModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Education Goal Expense.<br />                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param {Number} educationGoalId The Education Goal ID used to locate the Goal to add the expense to
     * @param {module:model/EducationExpenseModel} model The Education Goal Expense to be added to the Fact Finder
     * @param {module:api/EducationGoalsApi~educationGoalsPostByEducationgoalidModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationExpenseWithIdModel}
     */
    educationGoalsPostByEducationgoalidModel(educationGoalId, model, callback) {
      let postBody = model;
      // verify the required parameter 'educationGoalId' is set
      if (educationGoalId === undefined || educationGoalId === null) {
        throw new Error("Missing the required parameter 'educationGoalId' when calling educationGoalsPostByEducationgoalidModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling educationGoalsPostByEducationgoalidModel");
      }

      let pathParams = {
        'educationGoalId': educationGoalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{educationGoalId}/Expenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsPostByModel operation.
     * @callback module:api/EducationGoalsApi~educationGoalsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Education Goal.<br />                Purpose: Allows for creation of Education Goals on a Fact Finder.
     * @param {module:model/EducationGoalModel} model The Education Goal to be added to the Fact Finder
     * @param {module:api/EducationGoalsApi~educationGoalsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationGoalWithIdModel}
     */
    educationGoalsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling educationGoalsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsPutByEducationgoalidIdModel operation.
     * @callback module:api/EducationGoalsApi~educationGoalsPutByEducationgoalidIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates an Education Goal Expense.<br />                Purpose: Allows for complete replacement of an Education Goal Expense on a Fact Finder.
     * @param {Number} educationGoalId The Education Goal ID used to locate the Goal to update the Expense under
     * @param {Number} id The existing Education Goal Expense ID used to identify which Education Goal Expense to update
     * @param {module:model/EducationExpenseModel} model The Education Goal Expense to be added to the Fact Finder
     * @param {module:api/EducationGoalsApi~educationGoalsPutByEducationgoalidIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationExpenseWithIdModel}
     */
    educationGoalsPutByEducationgoalidIdModel(educationGoalId, id, model, callback) {
      let postBody = model;
      // verify the required parameter 'educationGoalId' is set
      if (educationGoalId === undefined || educationGoalId === null) {
        throw new Error("Missing the required parameter 'educationGoalId' when calling educationGoalsPutByEducationgoalidIdModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsPutByEducationgoalidIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling educationGoalsPutByEducationgoalidIdModel");
      }

      let pathParams = {
        'educationGoalId': educationGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{educationGoalId}/Expenses/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the educationGoalsPutByIdModel operation.
     * @callback module:api/EducationGoalsApi~educationGoalsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Education Goal Expense.<br />                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param {Number} id The Education Goal ID used to locate the Goal to add the Expense to
     * @param {module:model/EducationGoalModel} model The Education Goal Expense to be added to the Fact Finder
     * @param {module:api/EducationGoalsApi~educationGoalsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationGoalWithIdModel}
     */
    educationGoalsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling educationGoalsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling educationGoalsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EducationGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/EducationGoals/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
