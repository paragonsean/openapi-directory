/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpenseModel from '../model/ExpenseModel';
import ExpenseWithIdModel from '../model/ExpenseWithIdModel';
import ExpensesModel from '../model/ExpensesModel';

/**
* Expenses service.
* @module api/ExpensesApi
* @version v1
*/
export default class ExpensesApi {

    /**
    * Constructs a new ExpensesApi. 
    * @alias module:api/ExpensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expensesDeleteById operation.
     * @callback module:api/ExpensesApi~expensesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes an Expense tied to a Fact Finder.<br />                Purpose: Allows for removal of an Expense from a Fact Finder.
     * @param {Number} id The Expense ID used to identify which Expense to remove
     * @param {module:api/ExpensesApi~expensesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expensesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expensesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Expenses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensesGetById operation.
     * @callback module:api/ExpensesApi~expensesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Expense for the specified Expense ID.<br />                Purpose: Provides access to the Expense including description and Expense type.
     * @param {Number} id The ID of the Expense used to retreive the Expense
     * @param {module:api/ExpensesApi~expensesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseWithIdModel}
     */
    expensesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expensesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/Expenses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensesGetExpensesByFactFinderIdByFactfinderid operation.
     * @callback module:api/ExpensesApi~expensesGetExpensesByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpensesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Expenses for the specified Fact Finder ID.<br />                Purpose: Provides access to the Expenses including description and Expense type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Expenses
     * @param {module:api/ExpensesApi~expensesGetExpensesByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpensesModel}
     */
    expensesGetExpensesByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling expensesGetExpensesByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpensesModel;
      return this.apiClient.callApi(
        '/api/Expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensesPostByModel operation.
     * @callback module:api/ExpensesApi~expensesPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Expense.<br />                Purpose: Allows for creation of Expenses on a Fact Finder.
     * @param {module:model/ExpenseModel} model The Expense to be added to the Fact Finder
     * @param {module:api/ExpensesApi~expensesPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseWithIdModel}
     */
    expensesPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling expensesPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/Expenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensesPutByIdModel operation.
     * @callback module:api/ExpensesApi~expensesPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates an Expense.<br />                Purpose: Allows for complete replacement of an Expense on a Fact Finder. <br /><br />                Note: Expense type cannot be changed for expenses prepopulated from NaviPlan.
     * @param {Number} id The existing Expense ID used to identify which Expense to update
     * @param {module:model/ExpenseModel} model The Expense to be updated on a Fact Finder
     * @param {module:api/ExpensesApi~expensesPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseWithIdModel}
     */
    expensesPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expensesPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling expensesPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/Expenses/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
