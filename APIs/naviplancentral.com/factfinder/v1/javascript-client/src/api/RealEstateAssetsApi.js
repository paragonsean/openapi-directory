/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RealEstateAssetModel from '../model/RealEstateAssetModel';
import RealEstateAssetWithIdModel from '../model/RealEstateAssetWithIdModel';
import RealEstateAssetsModel from '../model/RealEstateAssetsModel';

/**
* RealEstateAssets service.
* @module api/RealEstateAssetsApi
* @version v1
*/
export default class RealEstateAssetsApi {

    /**
    * Constructs a new RealEstateAssetsApi. 
    * @alias module:api/RealEstateAssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realEstateAssetsDeleteById operation.
     * @callback module:api/RealEstateAssetsApi~realEstateAssetsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Real Estate Asset tied to a Fact Finder.<br />                Purpose: Allows for removal of a Real Estate Asset from a Fact Finder.
     * @param {Number} id The Real Estate Asset ID used to identify which Real Estate Asset to remove
     * @param {module:api/RealEstateAssetsApi~realEstateAssetsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    realEstateAssetsDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realEstateAssetsDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/RealEstateAssets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realEstateAssetsGetById operation.
     * @callback module:api/RealEstateAssetsApi~realEstateAssetsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealEstateAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Real Estate Asset for the specified Real Estate Asset ID.<br />                Purpose: Provides access to the Real Estate Asset including description and market value.
     * @param {Number} id The ID of the Real Estate Asset used to retreive the Real Estate Asset
     * @param {module:api/RealEstateAssetsApi~realEstateAssetsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealEstateAssetWithIdModel}
     */
    realEstateAssetsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realEstateAssetsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RealEstateAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/RealEstateAssets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realEstateAssetsGetRealEstateAssetsByFactFinderIdByFactfinderid operation.
     * @callback module:api/RealEstateAssetsApi~realEstateAssetsGetRealEstateAssetsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealEstateAssetsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Real Estate Assets for the specified Fact Finder ID.<br />                Purpose: Provides access to the Real Estate Assets including description and market value.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Real Estate Assets
     * @param {module:api/RealEstateAssetsApi~realEstateAssetsGetRealEstateAssetsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealEstateAssetsModel}
     */
    realEstateAssetsGetRealEstateAssetsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling realEstateAssetsGetRealEstateAssetsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RealEstateAssetsModel;
      return this.apiClient.callApi(
        '/api/RealEstateAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realEstateAssetsPostByModel operation.
     * @callback module:api/RealEstateAssetsApi~realEstateAssetsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealEstateAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Real Estate Asset.<br />                Purpose: Allows for creation of Real Estate Assets on a Fact Finder.
     * @param {module:model/RealEstateAssetModel} model The Real Estate Asset to be added to the Fact Finder
     * @param {module:api/RealEstateAssetsApi~realEstateAssetsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealEstateAssetWithIdModel}
     */
    realEstateAssetsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling realEstateAssetsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RealEstateAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/RealEstateAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realEstateAssetsPutByIdModel operation.
     * @callback module:api/RealEstateAssetsApi~realEstateAssetsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealEstateAssetWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Real Estate Asset.<br />                Purpose: Allows for complete replacement of a Real Estate Asset on a Fact Finder.
     * @param {Number} id The existing Real Estate Asset ID used to identify which Real Estate Asset to update
     * @param {module:model/RealEstateAssetModel} model The Real Estate Asset to be updated on a Fact Finder
     * @param {module:api/RealEstateAssetsApi~realEstateAssetsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealEstateAssetWithIdModel}
     */
    realEstateAssetsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling realEstateAssetsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling realEstateAssetsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RealEstateAssetWithIdModel;
      return this.apiClient.callApi(
        '/api/RealEstateAssets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
