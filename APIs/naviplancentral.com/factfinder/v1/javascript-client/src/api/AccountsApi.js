/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountHoldingModel from '../model/AccountHoldingModel';
import AccountHoldingWithIdModel from '../model/AccountHoldingWithIdModel';
import AccountHoldingsModel from '../model/AccountHoldingsModel';
import AccountHoldingsWithoutIdModel from '../model/AccountHoldingsWithoutIdModel';
import AccountModel from '../model/AccountModel';
import AccountWithIdModel from '../model/AccountWithIdModel';
import AccountsModel from '../model/AccountsModel';
import SavingsStrategiesModel from '../model/SavingsStrategiesModel';
import SavingsStrategyModel from '../model/SavingsStrategyModel';
import SavingsStrategyWithIdModel from '../model/SavingsStrategyWithIdModel';

/**
* Accounts service.
* @module api/AccountsApi
* @version v1
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsDeleteAccountById operation.
     * @callback module:api/AccountsApi~accountsDeleteAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes an Account tied to a Fact Finder.<br />                Purpose: Allows for removal of an Account from a Fact Finder.
     * @param {Number} id The Account ID used to identify which Account to remove
     * @param {module:api/AccountsApi~accountsDeleteAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountsDeleteAccountById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsDeleteAccountById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsDeleteAccountHoldingByAccountidId operation.
     * @callback module:api/AccountsApi~accountsDeleteAccountHoldingByAccountidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.<br />                Purpose: Provides the ability to remove individual holdings from a specified Account.
     * @param {Number} accountId The ID of the Account used to retrieve the Account data that the specified holding belongs to.
     * @param {Number} id The ID of the Account Holding used to delete the Account Holding
     * @param {module:api/AccountsApi~accountsDeleteAccountHoldingByAccountidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountsDeleteAccountHoldingByAccountidId(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsDeleteAccountHoldingByAccountidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsDeleteAccountHoldingByAccountidId");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsDeleteSavingsStrategiesByAccountid operation.
     * @callback module:api/AccountsApi~accountsDeleteSavingsStrategiesByAccountidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all savings strategies tied to an account
     * @param {Number} accountId Id of the account that holds the savings strategies
     * @param {module:api/AccountsApi~accountsDeleteSavingsStrategiesByAccountidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountsDeleteSavingsStrategiesByAccountid(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsDeleteSavingsStrategiesByAccountid");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsDeleteSavingsStrategyByAccountidId operation.
     * @callback module:api/AccountsApi~accountsDeleteSavingsStrategyByAccountidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific savings strategy
     * @param {Number} accountId Id of the account that holds the savings strategy
     * @param {Number} id Id of the savings strategy to be deleted
     * @param {module:api/AccountsApi~accountsDeleteSavingsStrategyByAccountidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountsDeleteSavingsStrategyByAccountidId(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsDeleteSavingsStrategyByAccountidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsDeleteSavingsStrategyByAccountidId");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetAccountHoldingByAccountidId operation.
     * @callback module:api/AccountsApi~accountsGetAccountHoldingByAccountidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHoldingWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.<br />                Purpose: Provides access to the Account Holding information including description and market value.
     * @param {Number} accountId The ID of the Account used to retrieve the Account Holding data
     * @param {Number} id The ID of the Account Holding used to retrieve the Account Holding data
     * @param {module:api/AccountsApi~accountsGetAccountHoldingByAccountidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHoldingWithIdModel}
     */
    accountsGetAccountHoldingByAccountidId(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsGetAccountHoldingByAccountidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsGetAccountHoldingByAccountidId");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountHoldingWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetAccountHoldingsByAccountid operation.
     * @callback module:api/AccountsApi~accountsGetAccountHoldingsByAccountidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHoldingsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all holdings in the specified Account.
     * @param {Number} accountId The ID of the Account used to retrieve the Account Holding data
     * @param {module:api/AccountsApi~accountsGetAccountHoldingsByAccountidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHoldingsModel}
     */
    accountsGetAccountHoldingsByAccountid(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsGetAccountHoldingsByAccountid");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountHoldingsModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid operation.
     * @callback module:api/AccountsApi~accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.<br />                Purpose: Provides access to the Account information including description and market value.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Accounts
     * @param {Object} opts Optional parameters
     * @param {String} [externalSourceId] The external ID used to filter Accounts
     * @param {module:api/AccountsApi~accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsModel}
     */
    accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid(factFinderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId,
        'externalSourceId': opts['externalSourceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountsModel;
      return this.apiClient.callApi(
        '/api/Accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetById operation.
     * @callback module:api/AccountsApi~accountsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Account for the specified Account ID.<br />                Purpose: Provides access to the Account information including description and market value.
     * @param {Number} id The ID of the Account used to retrieve the Account data
     * @param {module:api/AccountsApi~accountsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountWithIdModel}
     */
    accountsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId operation.
     * @callback module:api/AccountsApi~accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavingsStrategyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific savings strategy for an account
     * @param {Number} accountId The id of the account to retrieve the savings strategies from
     * @param {Number} id The id of the savings strategy to get
     * @param {module:api/AccountsApi~accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavingsStrategyWithIdModel}
     */
    accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(accountId, id, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SavingsStrategyWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGetSavingsStrategiesByAccountIdByAccountid operation.
     * @callback module:api/AccountsApi~accountsGetSavingsStrategiesByAccountIdByAccountidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavingsStrategiesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the savings strategies for a specific account
     * @param {Number} accountId The id of the account to retrieve the savings strategies from
     * @param {module:api/AccountsApi~accountsGetSavingsStrategiesByAccountIdByAccountidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavingsStrategiesModel}
     */
    accountsGetSavingsStrategiesByAccountIdByAccountid(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsGetSavingsStrategiesByAccountIdByAccountid");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SavingsStrategiesModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPostAccountHoldingByAccountidModel operation.
     * @callback module:api/AccountsApi~accountsPostAccountHoldingByAccountidModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHoldingWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a holding and adds it to an existing Account.
     * @param {Number} accountId The existing Account ID used to identify which Account to add the holding to
     * @param {module:model/AccountHoldingModel} model The holding data
     * @param {module:api/AccountsApi~accountsPostAccountHoldingByAccountidModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHoldingWithIdModel}
     */
    accountsPostAccountHoldingByAccountidModel(accountId, model, callback) {
      let postBody = model;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsPostAccountHoldingByAccountidModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling accountsPostAccountHoldingByAccountidModel");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountHoldingWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPostByModel operation.
     * @callback module:api/AccountsApi~accountsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates an Account.<br />                Purpose: Allows for creation of Accounts on a Fact Finder.
     * @param {module:model/AccountModel} model The Account to be added to the Fact Finder
     * @param {module:api/AccountsApi~accountsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountWithIdModel}
     */
    accountsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling accountsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPostSavingsStrategyByAccountidSavingsstrategy operation.
     * @callback module:api/AccountsApi~accountsPostSavingsStrategyByAccountidSavingsstrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavingsStrategyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a savings strategy on a specific account
     * @param {Number} accountId Id of the account to create a savings strategy for
     * @param {module:model/SavingsStrategyModel} savingsStrategy Values for the strategy to be created
     * @param {module:api/AccountsApi~accountsPostSavingsStrategyByAccountidSavingsstrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavingsStrategyWithIdModel}
     */
    accountsPostSavingsStrategyByAccountidSavingsstrategy(accountId, savingsStrategy, callback) {
      let postBody = savingsStrategy;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsPostSavingsStrategyByAccountidSavingsstrategy");
      }
      // verify the required parameter 'savingsStrategy' is set
      if (savingsStrategy === undefined || savingsStrategy === null) {
        throw new Error("Missing the required parameter 'savingsStrategy' when calling accountsPostSavingsStrategyByAccountidSavingsstrategy");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = SavingsStrategyWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPutByAccountidIdHolding operation.
     * @callback module:api/AccountsApi~accountsPutByAccountidIdHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHoldingModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a holding associated with an account
     * @param {Number} accountId The account with the holding to be updated
     * @param {Number} id The id of the holding to update
     * @param {module:model/AccountHoldingModel} holding The holding values used to update the current holding
     * @param {module:api/AccountsApi~accountsPutByAccountidIdHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHoldingModel}
     */
    accountsPutByAccountidIdHolding(accountId, id, holding, callback) {
      let postBody = holding;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsPutByAccountidIdHolding");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsPutByAccountidIdHolding");
      }
      // verify the required parameter 'holding' is set
      if (holding === undefined || holding === null) {
        throw new Error("Missing the required parameter 'holding' when calling accountsPutByAccountidIdHolding");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountHoldingModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPutByIdModel operation.
     * @callback module:api/AccountsApi~accountsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates an Account, deletes associated saving strategies if the account type changes.<br />                Purpose: Allows for complete replacement of an Account on a Fact Finder.
     * @param {Number} id The existing Account ID used to identify which Account to update
     * @param {module:model/AccountModel} model The Account to be updated on a Fact Finder
     * @param {module:api/AccountsApi~accountsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountWithIdModel}
     */
    accountsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling accountsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPutHoldingsByAccountidHoldings operation.
     * @callback module:api/AccountsApi~accountsPutHoldingsByAccountidHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHoldingsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates all holdings associated with an account
     * @param {Number} accountId The account with the holding to be updated
     * @param {module:model/AccountHoldingsWithoutIdModel} holdings The list of holdings for an account
     * @param {module:api/AccountsApi~accountsPutHoldingsByAccountidHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHoldingsModel}
     */
    accountsPutHoldingsByAccountidHoldings(accountId, holdings, callback) {
      let postBody = holdings;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsPutHoldingsByAccountidHoldings");
      }
      // verify the required parameter 'holdings' is set
      if (holdings === undefined || holdings === null) {
        throw new Error("Missing the required parameter 'holdings' when calling accountsPutHoldingsByAccountidHoldings");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountHoldingsModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/Holdings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsPutSavingsStrategyByAccountidIdSavingsstrategy operation.
     * @callback module:api/AccountsApi~accountsPutSavingsStrategyByAccountidIdSavingsstrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavingsStrategyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific savings strategy
     * @param {Number} accountId Id of the account that holds the savings strategy
     * @param {Number} id Id of the savings strategy to update
     * @param {module:model/SavingsStrategyModel} savingsStrategy The model with which to update the savings strategy with
     * @param {module:api/AccountsApi~accountsPutSavingsStrategyByAccountidIdSavingsstrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavingsStrategyWithIdModel}
     */
    accountsPutSavingsStrategyByAccountidIdSavingsstrategy(accountId, id, savingsStrategy, callback) {
      let postBody = savingsStrategy;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy");
      }
      // verify the required parameter 'savingsStrategy' is set
      if (savingsStrategy === undefined || savingsStrategy === null) {
        throw new Error("Missing the required parameter 'savingsStrategy' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy");
      }

      let pathParams = {
        'accountId': accountId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = SavingsStrategyWithIdModel;
      return this.apiClient.callApi(
        '/api/Accounts/{accountId}/SavingsStrategies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
