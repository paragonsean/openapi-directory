/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RetirementExpenseModel from '../model/RetirementExpenseModel';
import RetirementExpenseWithIdModel from '../model/RetirementExpenseWithIdModel';
import RetirementExpensesModel from '../model/RetirementExpensesModel';
import RetirementGoalModel from '../model/RetirementGoalModel';
import RetirementGoalWithIdModel from '../model/RetirementGoalWithIdModel';
import RetirementGoalsModel from '../model/RetirementGoalsModel';

/**
* RetirementGoals service.
* @module api/RetirementGoalsApi
* @version v1
*/
export default class RetirementGoalsApi {

    /**
    * Constructs a new RetirementGoalsApi. 
    * @alias module:api/RetirementGoalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retirementGoalsDeleteById operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Retirement Goal tied to a Fact Finder.<br />                Purpose: Allows for removal of a Retirement Goal from a Fact Finder.
     * @param {Number} id The Retirement Goal ID used to identify which Retirement Goal to remove
     * @param {module:api/RetirementGoalsApi~retirementGoalsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retirementGoalsDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsDeleteByRetirementgoalidId operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsDeleteByRetirementgoalidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Retirement Goal Expense tied to a Fact Finder.<br />                Purpose: Allows for removal of a Retirement Goal Expense from a Fact Finder.
     * @param {Number} retirementGoalId The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under
     * @param {Number} id The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove
     * @param {module:api/RetirementGoalsApi~retirementGoalsDeleteByRetirementgoalidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retirementGoalsDeleteByRetirementgoalidId(retirementGoalId, id, callback) {
      let postBody = null;
      // verify the required parameter 'retirementGoalId' is set
      if (retirementGoalId === undefined || retirementGoalId === null) {
        throw new Error("Missing the required parameter 'retirementGoalId' when calling retirementGoalsDeleteByRetirementgoalidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsDeleteByRetirementgoalidId");
      }

      let pathParams = {
        'retirementGoalId': retirementGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{retirementGoalId}/Expenses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsGetById operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Retirement Goal for the specified Retirement Goal ID.<br />                Purpose: Provides access to the Retirement Goal including retirement date.
     * @param {Number} id The ID of the Retirement Goal used to retreive the Retirement Goal
     * @param {module:api/RetirementGoalsApi~retirementGoalsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementGoalWithIdModel}
     */
    retirementGoalsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsGetRetirementExpenseByRetirementgoalidId operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsGetRetirementExpenseByRetirementgoalidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Retirement Goal Expense for the specified Retirement Goal Expense ID.<br />                Purpose: Provides access to the Retirement Goal Expense including description and amount.
     * @param {Number} retirementGoalId The ID of the Retirement Goal used to retrieve the Retirement Goal Expense
     * @param {Number} id The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense
     * @param {module:api/RetirementGoalsApi~retirementGoalsGetRetirementExpenseByRetirementgoalidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementExpenseWithIdModel}
     */
    retirementGoalsGetRetirementExpenseByRetirementgoalidId(retirementGoalId, id, callback) {
      let postBody = null;
      // verify the required parameter 'retirementGoalId' is set
      if (retirementGoalId === undefined || retirementGoalId === null) {
        throw new Error("Missing the required parameter 'retirementGoalId' when calling retirementGoalsGetRetirementExpenseByRetirementgoalidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsGetRetirementExpenseByRetirementgoalidId");
      }

      let pathParams = {
        'retirementGoalId': retirementGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{retirementGoalId}/Expenses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementExpensesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Retirement Goal Expenses for the specified Retirement Goal ID.<br />                Purpose: Provides access to the Retirement Goal Expenses including description and amount.
     * @param {Number} retirementGoalId The ID of the Retirement Goal used to retrieve Retirement Goal Expenses
     * @param {module:api/RetirementGoalsApi~retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementExpensesModel}
     */
    retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid(retirementGoalId, callback) {
      let postBody = null;
      // verify the required parameter 'retirementGoalId' is set
      if (retirementGoalId === undefined || retirementGoalId === null) {
        throw new Error("Missing the required parameter 'retirementGoalId' when calling retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid");
      }

      let pathParams = {
        'retirementGoalId': retirementGoalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementExpensesModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{retirementGoalId}/Expenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementGoalsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Retirement Goals for the specified Fact Finder ID.<br />                Purpose: Provides access to the Retirement Goals including retirement date.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Retirement Goals
     * @param {module:api/RetirementGoalsApi~retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementGoalsModel}
     */
    retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementGoalsModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsPostByModel operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Retirement Goal.<br />                Purpose: Allows for creation of Retirement Goals on a Fact Finder.
     * @param {module:model/RetirementGoalModel} model The Retirement Goal to be added to the Fact Finder
     * @param {module:api/RetirementGoalsApi~retirementGoalsPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementGoalWithIdModel}
     */
    retirementGoalsPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retirementGoalsPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsPostByRetirementgoalidModel operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsPostByRetirementgoalidModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Retirement Goal Expense.<br />                Purpose: Allows for creation of Retirement Goal Expenses on a Fact Finder.
     * @param {Number} retirementGoalId The ID of the Retirement Goal to add the Retirement Goal Expense to
     * @param {module:model/RetirementExpenseModel} model The Retirement Goal Expense to be added to the Fact Finder
     * @param {module:api/RetirementGoalsApi~retirementGoalsPostByRetirementgoalidModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementExpenseWithIdModel}
     */
    retirementGoalsPostByRetirementgoalidModel(retirementGoalId, model, callback) {
      let postBody = model;
      // verify the required parameter 'retirementGoalId' is set
      if (retirementGoalId === undefined || retirementGoalId === null) {
        throw new Error("Missing the required parameter 'retirementGoalId' when calling retirementGoalsPostByRetirementgoalidModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retirementGoalsPostByRetirementgoalidModel");
      }

      let pathParams = {
        'retirementGoalId': retirementGoalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{retirementGoalId}/Expenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsPutByIdModel operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementGoalWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Retirement Goal.<br />                Purpose: Allows for complete replacement of a Retirement Goal on a Fact Finder.
     * @param {Number} id The existing Retirement Goal ID used to identify which Retirement Goal to update
     * @param {module:model/RetirementGoalModel} model The Retirement Goal to be updated on a Fact Finder
     * @param {module:api/RetirementGoalsApi~retirementGoalsPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementGoalWithIdModel}
     */
    retirementGoalsPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retirementGoalsPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementGoalWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementGoalsPutByRetirementgoalidIdModel operation.
     * @callback module:api/RetirementGoalsApi~retirementGoalsPutByRetirementgoalidIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementExpenseWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Retirement Goal Expense.<br />                Purpose: Allows for complete replacement of a Retirement Goal Expense on a Fact Finder.
     * @param {Number} retirementGoalId The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under
     * @param {Number} id The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update
     * @param {module:model/RetirementExpenseModel} model The Retirement Goal Expense to be updated on a Fact Finder
     * @param {module:api/RetirementGoalsApi~retirementGoalsPutByRetirementgoalidIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementExpenseWithIdModel}
     */
    retirementGoalsPutByRetirementgoalidIdModel(retirementGoalId, id, model, callback) {
      let postBody = model;
      // verify the required parameter 'retirementGoalId' is set
      if (retirementGoalId === undefined || retirementGoalId === null) {
        throw new Error("Missing the required parameter 'retirementGoalId' when calling retirementGoalsPutByRetirementgoalidIdModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retirementGoalsPutByRetirementgoalidIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retirementGoalsPutByRetirementgoalidIdModel");
      }

      let pathParams = {
        'retirementGoalId': retirementGoalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RetirementExpenseWithIdModel;
      return this.apiClient.callApi(
        '/api/RetirementGoals/{retirementGoalId}/Expenses/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
