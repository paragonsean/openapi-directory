/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FactFinderEntityModel from '../model/FactFinderEntityModel';
import FactFinderModel from '../model/FactFinderModel';
import FactFinderPopulatableEntityModel from '../model/FactFinderPopulatableEntityModel';
import FactFinderPopulationModel from '../model/FactFinderPopulationModel';
import FactFinderSnapshotWithIdModel from '../model/FactFinderSnapshotWithIdModel';
import FactFinderSnapshotsModel from '../model/FactFinderSnapshotsModel';
import FactFinderWithIdModel from '../model/FactFinderWithIdModel';

/**
* FactFinders service.
* @module api/FactFindersApi
* @version v1
*/
export default class FactFindersApi {

    /**
    * Constructs a new FactFindersApi. 
    * @alias module:api/FactFindersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the factFindersDeleteById operation.
     * @callback module:api/FactFindersApi~factFindersDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation deletes a single Fact Finder for the specified Fact Finder ID.<br />                Purpose: Deletes the fact finder.
     * @param {Number} id The ID of the Fact Finder to be deleted
     * @param {module:api/FactFindersApi~factFindersDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    factFindersDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFindersDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/FactFinders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersGetByHouseholdIdByHouseholdid operation.
     * @callback module:api/FactFindersApi~factFindersGetByHouseholdIdByHouseholdidCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FactFinderWithIdModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Fact Finders for the specified householdId,                 or if null, all households associated with the user.<br />                Purpose: Provides access to the Fact Finder including status.
     * @param {Object} opts Optional parameters
     * @param {Number} [householdId] The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user
     * @param {module:api/FactFindersApi~factFindersGetByHouseholdIdByHouseholdidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FactFinderWithIdModel>}
     */
    factFindersGetByHouseholdIdByHouseholdid(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'householdId': opts['householdId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [FactFinderWithIdModel];
      return this.apiClient.callApi(
        '/api/FactFinders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersGetById operation.
     * @callback module:api/FactFindersApi~factFindersGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Fact Finder for the specified Fact Finder ID.<br />                Purpose: Provides access to the Fact Finder including status.
     * @param {Number} id The ID of the Fact Finder used to retrieve the Fact Finder
     * @param {module:api/FactFindersApi~factFindersGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderWithIdModel}
     */
    factFindersGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFindersGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderWithIdModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersGetSnapshotsByFactfinderid operation.
     * @callback module:api/FactFindersApi~factFindersGetSnapshotsByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderSnapshotsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation retrieves Snapshots of a Fact Finder.<br />                Purpose: Allows for advisors to view all Snapshots taken of a Fact Finder.
     * @param {Number} factFinderId The ID of the Fact Finder to retrieve Snapshots for
     * @param {module:api/FactFindersApi~factFindersGetSnapshotsByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderSnapshotsModel}
     */
    factFindersGetSnapshotsByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling factFindersGetSnapshotsByFactfinderid");
      }

      let pathParams = {
        'factFinderId': factFinderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderSnapshotsModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{factFinderId}/Snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersPostByModel operation.
     * @callback module:api/FactFindersApi~factFindersPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a completely empty draft Fact Finder.<br />                Requirements: A householdId and list of modules must be provided.<br />                Purpose: Stages a Fact Finder for population.
     * @param {module:model/FactFinderEntityModel} model The Household the Fact Finder will belong to and the modules that are available.
     * @param {module:api/FactFindersApi~factFindersPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    factFindersPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling factFindersPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/FactFinders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersPostPopulateByModel operation.
     * @callback module:api/FactFindersApi~factFindersPostPopulateByModelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a new Populated Fact Finder.<br />                Requirements: A householdId and list of modules must be provided.<br />                Purpose: Creation of a Fact Finder.
     * @param {module:model/FactFinderPopulatableEntityModel} model The Household the Fact Finder will belong to and the modules that are available.               Optional PlanId to populate from
     * @param {module:api/FactFindersApi~factFindersPostPopulateByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    factFindersPostPopulateByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling factFindersPostPopulateByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/FactFinders/Populate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersPostSnapshotsByFactfinderid operation.
     * @callback module:api/FactFindersApi~factFindersPostSnapshotsByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Snapshot of a Fact Finder.<br />                Purpose: Allows for advisors to compare the current fact finder to a snapshot prior to acceptance.
     * @param {Number} factFinderId The ID of the Fact Finder used to create the Fact Finder Snapshot
     * @param {module:api/FactFindersApi~factFindersPostSnapshotsByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    factFindersPostSnapshotsByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling factFindersPostSnapshotsByFactfinderid");
      }

      let pathParams = {
        'factFinderId': factFinderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/FactFinders/{factFinderId}/Snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersPutByIdModel operation.
     * @callback module:api/FactFindersApi~factFindersPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Fact Finder.<br />                Purpose: Allows for the updating of a Fact Finder.
     * @param {Number} id The existing Fact Finder ID used to identify which Fact Finder to update
     * @param {module:model/FactFinderModel} model The Fact Finder to be updated
     * @param {module:api/FactFindersApi~factFindersPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderWithIdModel}
     */
    factFindersPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFindersPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling factFindersPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderWithIdModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factFindersPutPopulateFactFinderByIdModel operation.
     * @callback module:api/FactFindersApi~factFindersPutPopulateFactFinderByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactFinderWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation populates a fact finder.<br />                Purpose: Allows for the population of a Fact Finder based on a NaviPlan plan or client. This                         operation cannot be performed on a Fact Finder more than once.
     * @param {Number} id The existing Fact Finder ID used to identify which Fact Finder to populate.
     * @param {module:model/FactFinderPopulationModel} model The plan to populate a fact finder from. If not provided, the client id will be inferred.
     * @param {module:api/FactFindersApi~factFindersPutPopulateFactFinderByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactFinderWithIdModel}
     */
    factFindersPutPopulateFactFinderByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factFindersPutPopulateFactFinderByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling factFindersPutPopulateFactFinderByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = FactFinderWithIdModel;
      return this.apiClient.callApi(
        '/api/FactFinders/{id}/Populate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
