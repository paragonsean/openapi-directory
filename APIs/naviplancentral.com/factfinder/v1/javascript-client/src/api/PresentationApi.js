/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsWithSubEntitiesModel from '../model/AccountsWithSubEntitiesModel';
import DefinedBenefitPensionsModel from '../model/DefinedBenefitPensionsModel';
import IncomesModel from '../model/IncomesModel';
import LiabilitiesModel from '../model/LiabilitiesModel';
import LifeInsurancePoliciesWithSubEntitiesModel from '../model/LifeInsurancePoliciesWithSubEntitiesModel';
import OwnersModel from '../model/OwnersModel';
import RelationshipTypesModel from '../model/RelationshipTypesModel';

/**
* Presentation service.
* @module api/PresentationApi
* @version v1
*/
export default class PresentationApi {

    /**
    * Constructs a new PresentationApi. 
    * @alias module:api/PresentationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the presentationGetAccountsByFactfinderidExternalsourceid operation.
     * @callback module:api/PresentationApi~presentationGetAccountsByFactfinderidExternalsourceidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsWithSubEntitiesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as                             all of the holdings and savings strategies belonging to those accounts.<br />                Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Accounts
     * @param {Object} opts Optional parameters
     * @param {String} [externalSourceId] The external ID used to filter Accounts
     * @param {module:api/PresentationApi~presentationGetAccountsByFactfinderidExternalsourceidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsWithSubEntitiesModel}
     */
    presentationGetAccountsByFactfinderidExternalsourceid(factFinderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetAccountsByFactfinderidExternalsourceid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId,
        'externalSourceId': opts['externalSourceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = AccountsWithSubEntitiesModel;
      return this.apiClient.callApi(
        '/api/Presentation/Accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetDemographicOwnersByFactfinderid operation.
     * @callback module:api/PresentationApi~presentationGetDemographicOwnersByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnersModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves owner values for the fact finder based on demographics data                Purpose: Provides the list of valid options for owner, student, beneficiary, etc.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve owners.
     * @param {module:api/PresentationApi~presentationGetDemographicOwnersByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnersModel}
     */
    presentationGetDemographicOwnersByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetDemographicOwnersByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = OwnersModel;
      return this.apiClient.callApi(
        '/api/Presentation/Demographics/Owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetDemographicRelationships operation.
     * @callback module:api/PresentationApi~presentationGetDemographicRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipTypesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all relationship types relevant to demographics.<br />                Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.
     * @param {module:api/PresentationApi~presentationGetDemographicRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipTypesModel}
     */
    presentationGetDemographicRelationships(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RelationshipTypesModel;
      return this.apiClient.callApi(
        '/api/Presentation/Demographics/Relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetIncomesByFactfinderid operation.
     * @callback module:api/PresentationApi~presentationGetIncomesByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all current Incomes for the specified Fact Finder ID.<br />                Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Incomes
     * @param {module:api/PresentationApi~presentationGetIncomesByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomesModel}
     */
    presentationGetIncomesByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetIncomesByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = IncomesModel;
      return this.apiClient.callApi(
        '/api/Presentation/Incomes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetLiabilitiesByFactfinderid operation.
     * @callback module:api/PresentationApi~presentationGetLiabilitiesByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilitiesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.<br />                Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Liabilities
     * @param {module:api/PresentationApi~presentationGetLiabilitiesByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilitiesModel}
     */
    presentationGetLiabilitiesByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetLiabilitiesByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LiabilitiesModel;
      return this.apiClient.callApi(
        '/api/Presentation/Liabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetLifeInsurancePoliciesByFactfinderid operation.
     * @callback module:api/PresentationApi~presentationGetLifeInsurancePoliciesByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePoliciesWithSubEntitiesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.<br />                Purpose: Provides access to the Life Insurance Policies in a Fact Finder.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies.
     * @param {module:api/PresentationApi~presentationGetLifeInsurancePoliciesByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePoliciesWithSubEntitiesModel}
     */
    presentationGetLifeInsurancePoliciesByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetLifeInsurancePoliciesByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePoliciesWithSubEntitiesModel;
      return this.apiClient.callApi(
        '/api/Presentation/LifeInsurancePolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the presentationGetPensionsByFactfinderid operation.
     * @callback module:api/PresentationApi~presentationGetPensionsByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefinedBenefitPensionsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.<br />                Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Pensions.
     * @param {module:api/PresentationApi~presentationGetPensionsByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefinedBenefitPensionsModel}
     */
    presentationGetPensionsByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling presentationGetPensionsByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DefinedBenefitPensionsModel;
      return this.apiClient.callApi(
        '/api/Presentation/Pensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
