/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LifeInsurancePoliciesModel from '../model/LifeInsurancePoliciesModel';
import LifeInsurancePolicyModel from '../model/LifeInsurancePolicyModel';
import LifeInsurancePolicySubaccountModel from '../model/LifeInsurancePolicySubaccountModel';
import LifeInsurancePolicySubaccountWithIdModel from '../model/LifeInsurancePolicySubaccountWithIdModel';
import LifeInsurancePolicySubaccountsModel from '../model/LifeInsurancePolicySubaccountsModel';
import LifeInsurancePolicyWithIdModel from '../model/LifeInsurancePolicyWithIdModel';

/**
* LifeInsurancePolicies service.
* @module api/LifeInsurancePoliciesApi
* @version v1
*/
export default class LifeInsurancePoliciesApi {

    /**
    * Constructs a new LifeInsurancePoliciesApi. 
    * @alias module:api/LifeInsurancePoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lifeInsurancePoliciesDeleteById operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation removes a Life Insurance Policy tied to a Fact Finder.<br />                Purpose: Allows for removal of a Life Insurance Policy and associated subaccounts from a Fact Finder.
     * @param {Number} id The Life Insurance Policy ID used to identify which Life Insurance Policy to remove
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lifeInsurancePoliciesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: Deletes an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.<br />                Purpose: Allows for removal of a subaccount from a Life Insurance Policy.
     * @param {Number} lifeInsurancePolicyId The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount.
     * @param {Number} id The ID of the Life Insurance Policy Subaccount.
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId(lifeInsurancePolicyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'lifeInsurancePolicyId' is set
      if (lifeInsurancePolicyId === undefined || lifeInsurancePolicyId === null) {
        throw new Error("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId");
      }

      let pathParams = {
        'lifeInsurancePolicyId': lifeInsurancePolicyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesGetById operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves a single Life Insurance Policy for the specified Life Insurance Policy ID.<br />                Purpose: Provides access to the Life Insurance Policy including description and policy type.
     * @param {Number} id The ID of the Life Insurance Policy used to retreive the Life Insurance Policy
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicyWithIdModel}
     */
    lifeInsurancePoliciesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePoliciesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: This operation retrieves all Life Insurance Policies for the specified Fact Finder ID.<br />                Purpose: Provides access to the Life Insurance Policies including description and policy type.
     * @param {Number} factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePoliciesModel}
     */
    lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid(factFinderId, callback) {
      let postBody = null;
      // verify the required parameter 'factFinderId' is set
      if (factFinderId === undefined || factFinderId === null) {
        throw new Error("Missing the required parameter 'factFinderId' when calling lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid");
      }

      let pathParams = {
      };
      let queryParams = {
        'factFinderId': factFinderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePoliciesModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicySubaccountWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: Get a specific subaccount for an existing Life Insurance Policy.<br />                Purpose: Provides access to the Life Insurance Policy subaccount.
     * @param {Number} lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount.
     * @param {Number} id The ID of the Life Insurance Policy Subaccount.
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicySubaccountWithIdModel}
     */
    lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId(lifeInsurancePolicyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'lifeInsurancePolicyId' is set
      if (lifeInsurancePolicyId === undefined || lifeInsurancePolicyId === null) {
        throw new Error("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId");
      }

      let pathParams = {
        'lifeInsurancePolicyId': lifeInsurancePolicyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicySubaccountWithIdModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicySubaccountsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: Get all the subaccounts for an existing Life Insurance Policy.<br />                Purpose: Provides access to all the Life Insurance Policy subaccounts.
     * @param {Number} lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts.
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicySubaccountsModel}
     */
    lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid(lifeInsurancePolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'lifeInsurancePolicyId' is set
      if (lifeInsurancePolicyId === undefined || lifeInsurancePolicyId === null) {
        throw new Error("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid");
      }

      let pathParams = {
        'lifeInsurancePolicyId': lifeInsurancePolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicySubaccountsModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesPostByModel operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPostByModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation creates a Life Insurance Policy.<br />                Purpose: Allows for creation of Life Insurance Policies on a Fact Finder.
     * @param {module:model/LifeInsurancePolicyModel} model The Life Insurance Policy to be added to the Fact Finder
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPostByModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicyWithIdModel}
     */
    lifeInsurancePoliciesPostByModel(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifeInsurancePoliciesPostByModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicySubaccountWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: Creates a subaccount and adds it to an existing Life Insurance Policy.<br />                Purpose: Allows for creation of subaccount on a Life Insurance Policy.
     * @param {Number} lifeInsurancePolicyId The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount.
     * @param {module:model/LifeInsurancePolicySubaccountModel} model The Life Insurance Policy Subaccount model.
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicySubaccountWithIdModel}
     */
    lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel(lifeInsurancePolicyId, model, callback) {
      let postBody = model;
      // verify the required parameter 'lifeInsurancePolicyId' is set
      if (lifeInsurancePolicyId === undefined || lifeInsurancePolicyId === null) {
        throw new Error("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel");
      }

      let pathParams = {
        'lifeInsurancePolicyId': lifeInsurancePolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicySubaccountWithIdModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesPutByIdModel operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPutByIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicyWithIdModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: The operation updates a Life Insurance Policy, deletes associated sub-accounts if the policy type changes.<br />                Purpose: Allows for complete replacement of a Life Insurance Policy on a Fact Finder.
     * @param {Number} id The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update
     * @param {module:model/LifeInsurancePolicyModel} model The Life Insurance Policy to be updated on a Fact Finder
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPutByIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicyWithIdModel}
     */
    lifeInsurancePoliciesPutByIdModel(id, model, callback) {
      let postBody = model;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesPutByIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifeInsurancePoliciesPutByIdModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicyWithIdModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel operation.
     * @callback module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsurancePolicySubaccountModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Description: Updates an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.<br />                Purpose: Allows for complete replacement of a subaccount on a Life Insurance Policy.
     * @param {Number} lifeInsurancePolicyId The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount.
     * @param {Number} id The ID of the Life Insurance Policy Subaccount.
     * @param {module:model/LifeInsurancePolicySubaccountModel} model The Life Insurance Policy Subaccount model.
     * @param {module:api/LifeInsurancePoliciesApi~lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsurancePolicySubaccountModel}
     */
    lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel(lifeInsurancePolicyId, id, model, callback) {
      let postBody = model;
      // verify the required parameter 'lifeInsurancePolicyId' is set
      if (lifeInsurancePolicyId === undefined || lifeInsurancePolicyId === null) {
        throw new Error("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel");
      }

      let pathParams = {
        'lifeInsurancePolicyId': lifeInsurancePolicyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LifeInsurancePolicySubaccountModel;
      return this.apiClient.callApi(
        '/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
