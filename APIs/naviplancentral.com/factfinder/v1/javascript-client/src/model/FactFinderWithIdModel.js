/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactFinderModulesModel from './FactFinderModulesModel';
import ObjectLink from './ObjectLink';

/**
 * The FactFinderWithIdModel model module.
 * @module model/FactFinderWithIdModel
 * @version v1
 */
class FactFinderWithIdModel {
    /**
     * Constructs a new <code>FactFinderWithIdModel</code>.
     * @alias module:model/FactFinderWithIdModel
     */
    constructor() { 
        
        FactFinderWithIdModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FactFinderWithIdModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactFinderWithIdModel} obj Optional instance to populate.
     * @return {module:model/FactFinderWithIdModel} The populated <code>FactFinderWithIdModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactFinderWithIdModel();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('factFinderId')) {
                obj['factFinderId'] = ApiClient.convertToType(data['factFinderId'], 'Number');
            }
            if (data.hasOwnProperty('householdId')) {
                obj['householdId'] = ApiClient.convertToType(data['householdId'], 'Number');
            }
            if (data.hasOwnProperty('lastStatusUpdate')) {
                obj['lastStatusUpdate'] = ApiClient.convertToType(data['lastStatusUpdate'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ObjectLink]);
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = FactFinderModulesModel.constructFromObject(data['modules']);
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'Number');
            }
            if (data.hasOwnProperty('planLevel')) {
                obj['planLevel'] = ApiClient.convertToType(data['planLevel'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FactFinderWithIdModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FactFinderWithIdModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ObjectLink.validateJSON(item);
            };
        }
        // validate the optional field `modules`
        if (data['modules']) { // data not null
          FactFinderModulesModel.validateJSON(data['modules']);
        }
        // ensure the json data is a string
        if (data['planLevel'] && !(typeof data['planLevel'] === 'string' || data['planLevel'] instanceof String)) {
            throw new Error("Expected the field `planLevel` to be a primitive type in the JSON string but got " + data['planLevel']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/FactFinderWithIdModel.CountryCodeEnum} countryCode
 */
FactFinderWithIdModel.prototype['countryCode'] = undefined;

/**
 * @member {Date} created
 */
FactFinderWithIdModel.prototype['created'] = undefined;

/**
 * @member {Number} factFinderId
 */
FactFinderWithIdModel.prototype['factFinderId'] = undefined;

/**
 * @member {Number} householdId
 */
FactFinderWithIdModel.prototype['householdId'] = undefined;

/**
 * @member {Date} lastStatusUpdate
 */
FactFinderWithIdModel.prototype['lastStatusUpdate'] = undefined;

/**
 * @member {Array.<module:model/ObjectLink>} links
 */
FactFinderWithIdModel.prototype['links'] = undefined;

/**
 * @member {module:model/FactFinderModulesModel} modules
 */
FactFinderWithIdModel.prototype['modules'] = undefined;

/**
 * @member {Number} planId
 */
FactFinderWithIdModel.prototype['planId'] = undefined;

/**
 * @member {module:model/FactFinderWithIdModel.PlanLevelEnum} planLevel
 */
FactFinderWithIdModel.prototype['planLevel'] = undefined;

/**
 * @member {module:model/FactFinderWithIdModel.StatusEnum} status
 */
FactFinderWithIdModel.prototype['status'] = undefined;





/**
 * Allowed values for the <code>countryCode</code> property.
 * @enum {String}
 * @readonly
 */
FactFinderWithIdModel['CountryCodeEnum'] = {

    /**
     * value: "UnitedStates"
     * @const
     */
    "UnitedStates": "UnitedStates",

    /**
     * value: "Canada"
     * @const
     */
    "Canada": "Canada"
};


/**
 * Allowed values for the <code>planLevel</code> property.
 * @enum {String}
 * @readonly
 */
FactFinderWithIdModel['PlanLevelEnum'] = {

    /**
     * value: "Level2"
     * @const
     */
    "Level2": "Level2",

    /**
     * value: "Level1"
     * @const
     */
    "Level1": "Level1"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FactFinderWithIdModel['StatusEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "ClientSubmitted"
     * @const
     */
    "ClientSubmitted": "ClientSubmitted",

    /**
     * value: "AdvisorAccepted"
     * @const
     */
    "AdvisorAccepted": "AdvisorAccepted",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Draft"
     * @const
     */
    "Draft": "Draft",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};



export default FactFinderWithIdModel;

