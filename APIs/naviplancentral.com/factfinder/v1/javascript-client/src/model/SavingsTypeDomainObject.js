/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SavingsTypeDomainObject model module.
 * @module model/SavingsTypeDomainObject
 * @version v1
 */
class SavingsTypeDomainObject {
    /**
     * Constructs a new <code>SavingsTypeDomainObject</code>.
     * @alias module:model/SavingsTypeDomainObject
     */
    constructor() { 
        
        SavingsTypeDomainObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SavingsTypeDomainObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SavingsTypeDomainObject} obj Optional instance to populate.
     * @return {module:model/SavingsTypeDomainObject} The populated <code>SavingsTypeDomainObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SavingsTypeDomainObject();

            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('validAmountTypes')) {
                obj['validAmountTypes'] = ApiClient.convertToType(data['validAmountTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SavingsTypeDomainObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SavingsTypeDomainObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validAmountTypes'])) {
            throw new Error("Expected the field `validAmountTypes` to be an array in the JSON data but got " + data['validAmountTypes']);
        }

        return true;
    }


}



/**
 * @member {module:model/SavingsTypeDomainObject.TypeNameEnum} typeName
 */
SavingsTypeDomainObject.prototype['typeName'] = undefined;

/**
 * @member {Array.<module:model/SavingsTypeDomainObject.ValidAmountTypesEnum>} validAmountTypes
 */
SavingsTypeDomainObject.prototype['validAmountTypes'] = undefined;





/**
 * Allowed values for the <code>typeName</code> property.
 * @enum {String}
 * @readonly
 */
SavingsTypeDomainObject['TypeNameEnum'] = {

    /**
     * value: "PostTaxSavings"
     * @const
     */
    "PostTaxSavings": "PostTaxSavings",

    /**
     * value: "PreTaxSavings"
     * @const
     */
    "PreTaxSavings": "PreTaxSavings",

    /**
     * value: "EmployerSavings"
     * @const
     */
    "EmployerSavings": "EmployerSavings",

    /**
     * value: "MandatorySavings"
     * @const
     */
    "MandatorySavings": "MandatorySavings"
};


/**
 * Allowed values for the <code>validAmountTypes</code> property.
 * @enum {String}
 * @readonly
 */
SavingsTypeDomainObject['ValidAmountTypesEnum'] = {

    /**
     * value: "Dollar"
     * @const
     */
    "Dollar": "Dollar",

    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",

    /**
     * value: "Max"
     * @const
     */
    "Max": "Max"
};



export default SavingsTypeDomainObject;

