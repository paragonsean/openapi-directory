/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IFactFinderLiabilityDomainObject model module.
 * @module model/IFactFinderLiabilityDomainObject
 * @version v1
 */
class IFactFinderLiabilityDomainObject {
    /**
     * Constructs a new <code>IFactFinderLiabilityDomainObject</code>.
     * @alias module:model/IFactFinderLiabilityDomainObject
     */
    constructor() { 
        
        IFactFinderLiabilityDomainObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IFactFinderLiabilityDomainObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IFactFinderLiabilityDomainObject} obj Optional instance to populate.
     * @return {module:model/IFactFinderLiabilityDomainObject} The populated <code>IFactFinderLiabilityDomainObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IFactFinderLiabilityDomainObject();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('balanceAsOfDate')) {
                obj['balanceAsOfDate'] = ApiClient.convertToType(data['balanceAsOfDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalDestinationId')) {
                obj['externalDestinationId'] = ApiClient.convertToType(data['externalDestinationId'], 'String');
            }
            if (data.hasOwnProperty('externalSourceId')) {
                obj['externalSourceId'] = ApiClient.convertToType(data['externalSourceId'], 'String');
            }
            if (data.hasOwnProperty('factFinderId')) {
                obj['factFinderId'] = ApiClient.convertToType(data['factFinderId'], 'Number');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'Number');
            }
            if (data.hasOwnProperty('importSource')) {
                obj['importSource'] = ApiClient.convertToType(data['importSource'], 'String');
            }
            if (data.hasOwnProperty('interestRate')) {
                obj['interestRate'] = ApiClient.convertToType(data['interestRate'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('liabilityId')) {
                obj['liabilityId'] = ApiClient.convertToType(data['liabilityId'], 'Number');
            }
            if (data.hasOwnProperty('liabilityType')) {
                obj['liabilityType'] = ApiClient.convertToType(data['liabilityType'], 'Number');
            }
            if (data.hasOwnProperty('loanDate')) {
                obj['loanDate'] = ApiClient.convertToType(data['loanDate'], 'Date');
            }
            if (data.hasOwnProperty('originalPrincipal')) {
                obj['originalPrincipal'] = ApiClient.convertToType(data['originalPrincipal'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('payment')) {
                obj['payment'] = ApiClient.convertToType(data['payment'], 'Number');
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = ApiClient.convertToType(data['paymentType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IFactFinderLiabilityDomainObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IFactFinderLiabilityDomainObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalDestinationId'] && !(typeof data['externalDestinationId'] === 'string' || data['externalDestinationId'] instanceof String)) {
            throw new Error("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got " + data['externalDestinationId']);
        }
        // ensure the json data is a string
        if (data['externalSourceId'] && !(typeof data['externalSourceId'] === 'string' || data['externalSourceId'] instanceof String)) {
            throw new Error("Expected the field `externalSourceId` to be a primitive type in the JSON string but got " + data['externalSourceId']);
        }
        // ensure the json data is a string
        if (data['importSource'] && !(typeof data['importSource'] === 'string' || data['importSource'] instanceof String)) {
            throw new Error("Expected the field `importSource` to be a primitive type in the JSON string but got " + data['importSource']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['paymentType'] && !(typeof data['paymentType'] === 'string' || data['paymentType'] instanceof String)) {
            throw new Error("Expected the field `paymentType` to be a primitive type in the JSON string but got " + data['paymentType']);
        }

        return true;
    }


}



/**
 * @member {Number} balance
 */
IFactFinderLiabilityDomainObject.prototype['balance'] = undefined;

/**
 * @member {Date} balanceAsOfDate
 */
IFactFinderLiabilityDomainObject.prototype['balanceAsOfDate'] = undefined;

/**
 * @member {String} description
 */
IFactFinderLiabilityDomainObject.prototype['description'] = undefined;

/**
 * @member {String} externalDestinationId
 */
IFactFinderLiabilityDomainObject.prototype['externalDestinationId'] = undefined;

/**
 * @member {String} externalSourceId
 */
IFactFinderLiabilityDomainObject.prototype['externalSourceId'] = undefined;

/**
 * @member {Number} factFinderId
 */
IFactFinderLiabilityDomainObject.prototype['factFinderId'] = undefined;

/**
 * @member {Number} frequency
 */
IFactFinderLiabilityDomainObject.prototype['frequency'] = undefined;

/**
 * @member {String} importSource
 */
IFactFinderLiabilityDomainObject.prototype['importSource'] = undefined;

/**
 * @member {Number} interestRate
 */
IFactFinderLiabilityDomainObject.prototype['interestRate'] = undefined;

/**
 * @member {Date} lastUpdated
 */
IFactFinderLiabilityDomainObject.prototype['lastUpdated'] = undefined;

/**
 * @member {Number} liabilityId
 */
IFactFinderLiabilityDomainObject.prototype['liabilityId'] = undefined;

/**
 * @member {Number} liabilityType
 */
IFactFinderLiabilityDomainObject.prototype['liabilityType'] = undefined;

/**
 * @member {Date} loanDate
 */
IFactFinderLiabilityDomainObject.prototype['loanDate'] = undefined;

/**
 * @member {Number} originalPrincipal
 */
IFactFinderLiabilityDomainObject.prototype['originalPrincipal'] = undefined;

/**
 * @member {module:model/IFactFinderLiabilityDomainObject.OwnerEnum} owner
 */
IFactFinderLiabilityDomainObject.prototype['owner'] = undefined;

/**
 * @member {Number} payment
 */
IFactFinderLiabilityDomainObject.prototype['payment'] = undefined;

/**
 * @member {module:model/IFactFinderLiabilityDomainObject.PaymentTypeEnum} paymentType
 */
IFactFinderLiabilityDomainObject.prototype['paymentType'] = undefined;





/**
 * Allowed values for the <code>owner</code> property.
 * @enum {String}
 * @readonly
 */
IFactFinderLiabilityDomainObject['OwnerEnum'] = {

    /**
     * value: "Client"
     * @const
     */
    "Client": "Client",

    /**
     * value: "CoClient"
     * @const
     */
    "CoClient": "CoClient",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint"
};


/**
 * Allowed values for the <code>paymentType</code> property.
 * @enum {String}
 * @readonly
 */
IFactFinderLiabilityDomainObject['PaymentTypeEnum'] = {

    /**
     * value: "InterestOnly"
     * @const
     */
    "InterestOnly": "InterestOnly",

    /**
     * value: "PrincipalAndInterest"
     * @const
     */
    "PrincipalAndInterest": "PrincipalAndInterest",

    /**
     * value: "SetPrincipal"
     * @const
     */
    "SetPrincipal": "SetPrincipal",

    /**
     * value: "LastPeriod"
     * @const
     */
    "LastPeriod": "LastPeriod"
};



export default IFactFinderLiabilityDomainObject;

