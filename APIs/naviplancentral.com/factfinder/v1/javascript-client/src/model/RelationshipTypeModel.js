/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RelationshipTypeModel model module.
 * @module model/RelationshipTypeModel
 * @version v1
 */
class RelationshipTypeModel {
    /**
     * Constructs a new <code>RelationshipTypeModel</code>.
     * @alias module:model/RelationshipTypeModel
     */
    constructor() { 
        
        RelationshipTypeModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelationshipTypeModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipTypeModel} obj Optional instance to populate.
     * @return {module:model/RelationshipTypeModel} The populated <code>RelationshipTypeModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipTypeModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isChildType')) {
                obj['isChildType'] = ApiClient.convertToType(data['isChildType'], 'Boolean');
            }
            if (data.hasOwnProperty('relationshipType')) {
                obj['relationshipType'] = ApiClient.convertToType(data['relationshipType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipTypeModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipTypeModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relationshipType'] && !(typeof data['relationshipType'] === 'string' || data['relationshipType'] instanceof String)) {
            throw new Error("Expected the field `relationshipType` to be a primitive type in the JSON string but got " + data['relationshipType']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
RelationshipTypeModel.prototype['id'] = undefined;

/**
 * @member {Boolean} isChildType
 */
RelationshipTypeModel.prototype['isChildType'] = undefined;

/**
 * @member {module:model/RelationshipTypeModel.RelationshipTypeEnum} relationshipType
 */
RelationshipTypeModel.prototype['relationshipType'] = undefined;





/**
 * Allowed values for the <code>relationshipType</code> property.
 * @enum {String}
 * @readonly
 */
RelationshipTypeModel['RelationshipTypeEnum'] = {

    /**
     * value: "Son"
     * @const
     */
    "Son": "Son",

    /**
     * value: "Daughter"
     * @const
     */
    "Daughter": "Daughter",

    /**
     * value: "FosterSon"
     * @const
     */
    "FosterSon": "FosterSon",

    /**
     * value: "FosterDaughter"
     * @const
     */
    "FosterDaughter": "FosterDaughter",

    /**
     * value: "Grandson"
     * @const
     */
    "Grandson": "Grandson",

    /**
     * value: "Granddaughter"
     * @const
     */
    "Granddaughter": "Granddaughter",

    /**
     * value: "Nephew"
     * @const
     */
    "Nephew": "Nephew",

    /**
     * value: "Niece"
     * @const
     */
    "Niece": "Niece",

    /**
     * value: "MaleCousin"
     * @const
     */
    "MaleCousin": "MaleCousin",

    /**
     * value: "FemaleCousin"
     * @const
     */
    "FemaleCousin": "FemaleCousin",

    /**
     * value: "Father"
     * @const
     */
    "Father": "Father",

    /**
     * value: "Mother"
     * @const
     */
    "Mother": "Mother",

    /**
     * value: "Grandfather"
     * @const
     */
    "Grandfather": "Grandfather",

    /**
     * value: "Grandmother"
     * @const
     */
    "Grandmother": "Grandmother",

    /**
     * value: "Uncle"
     * @const
     */
    "Uncle": "Uncle",

    /**
     * value: "Aunt"
     * @const
     */
    "Aunt": "Aunt",

    /**
     * value: "Brother"
     * @const
     */
    "Brother": "Brother",

    /**
     * value: "Sister"
     * @const
     */
    "Sister": "Sister",

    /**
     * value: "SonInLaw"
     * @const
     */
    "SonInLaw": "SonInLaw",

    /**
     * value: "DaughterInLaw"
     * @const
     */
    "DaughterInLaw": "DaughterInLaw",

    /**
     * value: "MaleOther"
     * @const
     */
    "MaleOther": "MaleOther",

    /**
     * value: "FemaleOther"
     * @const
     */
    "FemaleOther": "FemaleOther"
};



export default RelationshipTypeModel;

