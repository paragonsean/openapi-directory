/**
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectLink from './ObjectLink';

/**
 * The DemographicsDependentWithIdModel model module.
 * @module model/DemographicsDependentWithIdModel
 * @version v1
 */
class DemographicsDependentWithIdModel {
    /**
     * Constructs a new <code>DemographicsDependentWithIdModel</code>.
     * @alias module:model/DemographicsDependentWithIdModel
     */
    constructor() { 
        
        DemographicsDependentWithIdModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DemographicsDependentWithIdModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DemographicsDependentWithIdModel} obj Optional instance to populate.
     * @return {module:model/DemographicsDependentWithIdModel} The populated <code>DemographicsDependentWithIdModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DemographicsDependentWithIdModel();

            if (data.hasOwnProperty('birthDate')) {
                obj['birthDate'] = ApiClient.convertToType(data['birthDate'], 'Date');
            }
            if (data.hasOwnProperty('demographicsId')) {
                obj['demographicsId'] = ApiClient.convertToType(data['demographicsId'], 'Number');
            }
            if (data.hasOwnProperty('dependentId')) {
                obj['dependentId'] = ApiClient.convertToType(data['dependentId'], 'Number');
            }
            if (data.hasOwnProperty('dependentOf')) {
                obj['dependentOf'] = ApiClient.convertToType(data['dependentOf'], 'String');
            }
            if (data.hasOwnProperty('externalDestinationId')) {
                obj['externalDestinationId'] = ApiClient.convertToType(data['externalDestinationId'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ObjectLink]);
            }
            if (data.hasOwnProperty('relationship')) {
                obj['relationship'] = ApiClient.convertToType(data['relationship'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DemographicsDependentWithIdModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DemographicsDependentWithIdModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dependentOf'] && !(typeof data['dependentOf'] === 'string' || data['dependentOf'] instanceof String)) {
            throw new Error("Expected the field `dependentOf` to be a primitive type in the JSON string but got " + data['dependentOf']);
        }
        // ensure the json data is a string
        if (data['externalDestinationId'] && !(typeof data['externalDestinationId'] === 'string' || data['externalDestinationId'] instanceof String)) {
            throw new Error("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got " + data['externalDestinationId']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ObjectLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relationship'] && !(typeof data['relationship'] === 'string' || data['relationship'] instanceof String)) {
            throw new Error("Expected the field `relationship` to be a primitive type in the JSON string but got " + data['relationship']);
        }

        return true;
    }


}



/**
 * @member {Date} birthDate
 */
DemographicsDependentWithIdModel.prototype['birthDate'] = undefined;

/**
 * @member {Number} demographicsId
 */
DemographicsDependentWithIdModel.prototype['demographicsId'] = undefined;

/**
 * @member {Number} dependentId
 */
DemographicsDependentWithIdModel.prototype['dependentId'] = undefined;

/**
 * @member {module:model/DemographicsDependentWithIdModel.DependentOfEnum} dependentOf
 */
DemographicsDependentWithIdModel.prototype['dependentOf'] = undefined;

/**
 * @member {String} externalDestinationId
 */
DemographicsDependentWithIdModel.prototype['externalDestinationId'] = undefined;

/**
 * @member {String} firstName
 */
DemographicsDependentWithIdModel.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
DemographicsDependentWithIdModel.prototype['lastName'] = undefined;

/**
 * @member {Array.<module:model/ObjectLink>} links
 */
DemographicsDependentWithIdModel.prototype['links'] = undefined;

/**
 * @member {module:model/DemographicsDependentWithIdModel.RelationshipEnum} relationship
 */
DemographicsDependentWithIdModel.prototype['relationship'] = undefined;





/**
 * Allowed values for the <code>dependentOf</code> property.
 * @enum {String}
 * @readonly
 */
DemographicsDependentWithIdModel['DependentOfEnum'] = {

    /**
     * value: "Client"
     * @const
     */
    "Client": "Client",

    /**
     * value: "CoClient"
     * @const
     */
    "CoClient": "CoClient",

    /**
     * value: "Joint"
     * @const
     */
    "Joint": "Joint",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>relationship</code> property.
 * @enum {String}
 * @readonly
 */
DemographicsDependentWithIdModel['RelationshipEnum'] = {

    /**
     * value: "Son"
     * @const
     */
    "Son": "Son",

    /**
     * value: "Daughter"
     * @const
     */
    "Daughter": "Daughter",

    /**
     * value: "FosterSon"
     * @const
     */
    "FosterSon": "FosterSon",

    /**
     * value: "FosterDaughter"
     * @const
     */
    "FosterDaughter": "FosterDaughter",

    /**
     * value: "Grandson"
     * @const
     */
    "Grandson": "Grandson",

    /**
     * value: "Granddaughter"
     * @const
     */
    "Granddaughter": "Granddaughter",

    /**
     * value: "Nephew"
     * @const
     */
    "Nephew": "Nephew",

    /**
     * value: "Niece"
     * @const
     */
    "Niece": "Niece",

    /**
     * value: "MaleCousin"
     * @const
     */
    "MaleCousin": "MaleCousin",

    /**
     * value: "FemaleCousin"
     * @const
     */
    "FemaleCousin": "FemaleCousin",

    /**
     * value: "Father"
     * @const
     */
    "Father": "Father",

    /**
     * value: "Mother"
     * @const
     */
    "Mother": "Mother",

    /**
     * value: "Grandfather"
     * @const
     */
    "Grandfather": "Grandfather",

    /**
     * value: "Grandmother"
     * @const
     */
    "Grandmother": "Grandmother",

    /**
     * value: "Uncle"
     * @const
     */
    "Uncle": "Uncle",

    /**
     * value: "Aunt"
     * @const
     */
    "Aunt": "Aunt",

    /**
     * value: "Brother"
     * @const
     */
    "Brother": "Brother",

    /**
     * value: "Sister"
     * @const
     */
    "Sister": "Sister",

    /**
     * value: "SonInLaw"
     * @const
     */
    "SonInLaw": "SonInLaw",

    /**
     * value: "DaughterInLaw"
     * @const
     */
    "DaughterInLaw": "DaughterInLaw",

    /**
     * value: "MaleOther"
     * @const
     */
    "MaleOther": "MaleOther",

    /**
     * value: "FemaleOther"
     * @const
     */
    "FemaleOther": "FemaleOther"
};



export default DemographicsDependentWithIdModel;

