/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountHoldingModel;
import org.openapitools.client.model.AccountHoldingWithIdModel;
import org.openapitools.client.model.AccountHoldingsModel;
import org.openapitools.client.model.AccountHoldingsWithoutIdModel;
import org.openapitools.client.model.AccountModel;
import org.openapitools.client.model.AccountWithIdModel;
import org.openapitools.client.model.AccountsModel;
import org.openapitools.client.model.SavingsStrategiesModel;
import org.openapitools.client.model.SavingsStrategyModel;
import org.openapitools.client.model.SavingsStrategyWithIdModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Description: The operation removes an Account tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Account from a Fact Finder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteAccountByIdTest() throws ApiException {
        Integer id = null;
        api.accountsDeleteAccountById(id);
        // TODO: test validations
    }

    /**
     * Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides the ability to remove individual holdings from a specified Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteAccountHoldingByAccountidIdTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        api.accountsDeleteAccountHoldingByAccountidId(accountId, id);
        // TODO: test validations
    }

    /**
     * Deletes all savings strategies tied to an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteSavingsStrategiesByAccountidTest() throws ApiException {
        Integer accountId = null;
        api.accountsDeleteSavingsStrategiesByAccountid(accountId);
        // TODO: test validations
    }

    /**
     * Deletes a specific savings strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteSavingsStrategyByAccountidIdTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        api.accountsDeleteSavingsStrategyByAccountidId(accountId, id);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides access to the Account Holding information including description and market value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetAccountHoldingByAccountidIdTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        AccountHoldingWithIdModel response = api.accountsGetAccountHoldingByAccountidId(accountId, id);
        // TODO: test validations
    }

    /**
     * Retrieves all holdings in the specified Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetAccountHoldingsByAccountidTest() throws ApiException {
        Integer accountId = null;
        AccountHoldingsModel response = api.accountsGetAccountHoldingsByAccountid(accountId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidTest() throws ApiException {
        Integer factFinderId = null;
        String externalSourceId = null;
        AccountsModel response = api.accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid(factFinderId, externalSourceId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves a single Account for the specified Account ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetByIdTest() throws ApiException {
        Integer id = null;
        AccountWithIdModel response = api.accountsGetById(id);
        // TODO: test validations
    }

    /**
     * Get a specific savings strategy for an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        SavingsStrategyWithIdModel response = api.accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(accountId, id);
        // TODO: test validations
    }

    /**
     * Get all of the savings strategies for a specific account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetSavingsStrategiesByAccountIdByAccountidTest() throws ApiException {
        Integer accountId = null;
        SavingsStrategiesModel response = api.accountsGetSavingsStrategiesByAccountIdByAccountid(accountId);
        // TODO: test validations
    }

    /**
     * Creates a holding and adds it to an existing Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPostAccountHoldingByAccountidModelTest() throws ApiException {
        Integer accountId = null;
        AccountHoldingModel model = null;
        AccountHoldingWithIdModel response = api.accountsPostAccountHoldingByAccountidModel(accountId, model);
        // TODO: test validations
    }

    /**
     * Description: The operation creates an Account.&lt;br /&gt;                Purpose: Allows for creation of Accounts on a Fact Finder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPostByModelTest() throws ApiException {
        AccountModel model = null;
        AccountWithIdModel response = api.accountsPostByModel(model);
        // TODO: test validations
    }

    /**
     * Creates a savings strategy on a specific account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPostSavingsStrategyByAccountidSavingsstrategyTest() throws ApiException {
        Integer accountId = null;
        SavingsStrategyModel savingsStrategy = null;
        SavingsStrategyWithIdModel response = api.accountsPostSavingsStrategyByAccountidSavingsstrategy(accountId, savingsStrategy);
        // TODO: test validations
    }

    /**
     * Updates a holding associated with an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPutByAccountidIdHoldingTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        AccountHoldingModel holding = null;
        AccountHoldingModel response = api.accountsPutByAccountidIdHolding(accountId, id, holding);
        // TODO: test validations
    }

    /**
     * Description: The operation updates an Account, deletes associated saving strategies if the account type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of an Account on a Fact Finder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPutByIdModelTest() throws ApiException {
        Integer id = null;
        AccountModel model = null;
        AccountWithIdModel response = api.accountsPutByIdModel(id, model);
        // TODO: test validations
    }

    /**
     * Updates all holdings associated with an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPutHoldingsByAccountidHoldingsTest() throws ApiException {
        Integer accountId = null;
        AccountHoldingsWithoutIdModel holdings = null;
        AccountHoldingsModel response = api.accountsPutHoldingsByAccountidHoldings(accountId, holdings);
        // TODO: test validations
    }

    /**
     * Updates a specific savings strategy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPutSavingsStrategyByAccountidIdSavingsstrategyTest() throws ApiException {
        Integer accountId = null;
        Integer id = null;
        SavingsStrategyModel savingsStrategy = null;
        SavingsStrategyWithIdModel response = api.accountsPutSavingsStrategyByAccountidIdSavingsstrategy(accountId, id, savingsStrategy);
        // TODO: test validations
    }

}
