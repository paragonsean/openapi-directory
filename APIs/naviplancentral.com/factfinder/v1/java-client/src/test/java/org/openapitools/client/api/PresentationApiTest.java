/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsWithSubEntitiesModel;
import org.openapitools.client.model.DefinedBenefitPensionsModel;
import org.openapitools.client.model.IncomesModel;
import org.openapitools.client.model.LiabilitiesModel;
import org.openapitools.client.model.LifeInsurancePoliciesWithSubEntitiesModel;
import org.openapitools.client.model.OwnersModel;
import org.openapitools.client.model.RelationshipTypesModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PresentationApi
 */
@Disabled
public class PresentationApiTest {

    private final PresentationApi api = new PresentationApi();

    /**
     * Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as                             all of the holdings and savings strategies belonging to those accounts.&lt;br /&gt;                Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetAccountsByFactfinderidExternalsourceidTest() throws ApiException {
        Integer factFinderId = null;
        String externalSourceId = null;
        AccountsWithSubEntitiesModel response = api.presentationGetAccountsByFactfinderidExternalsourceid(factFinderId, externalSourceId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves owner values for the fact finder based on demographics data                Purpose: Provides the list of valid options for owner, student, beneficiary, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetDemographicOwnersByFactfinderidTest() throws ApiException {
        Integer factFinderId = null;
        OwnersModel response = api.presentationGetDemographicOwnersByFactfinderid(factFinderId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all relationship types relevant to demographics.&lt;br /&gt;                Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetDemographicRelationshipsTest() throws ApiException {
        RelationshipTypesModel response = api.presentationGetDemographicRelationships();
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all current Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetIncomesByFactfinderidTest() throws ApiException {
        Integer factFinderId = null;
        IncomesModel response = api.presentationGetIncomesByFactfinderid(factFinderId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetLiabilitiesByFactfinderidTest() throws ApiException {
        Integer factFinderId = null;
        LiabilitiesModel response = api.presentationGetLiabilitiesByFactfinderid(factFinderId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies in a Fact Finder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetLifeInsurancePoliciesByFactfinderidTest() throws ApiException {
        Integer factFinderId = null;
        LifeInsurancePoliciesWithSubEntitiesModel response = api.presentationGetLifeInsurancePoliciesByFactfinderid(factFinderId);
        // TODO: test validations
    }

    /**
     * Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void presentationGetPensionsByFactfinderidTest() throws ApiException {
        Integer factFinderId = null;
        DefinedBenefitPensionsModel response = api.presentationGetPensionsByFactfinderid(factFinderId);
        // TODO: test validations
    }

}
