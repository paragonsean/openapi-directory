/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EducationExpenseModel;
import org.openapitools.client.model.EducationExpenseWithIdModel;
import org.openapitools.client.model.EducationExpensesModel;
import org.openapitools.client.model.EducationGoalModel;
import org.openapitools.client.model.EducationGoalWithIdModel;
import org.openapitools.client.model.EducationGoalsModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EducationGoalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EducationGoalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EducationGoalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for educationGoalsDeleteByEducationgoalidId
     * @param educationGoalId The Education Goal ID used to locate the Goal to delete the Expense under (required)
     * @param id The Education Goal Expense ID used to identify which Education Goal Expense to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsDeleteByEducationgoalidIdCall(Integer educationGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{educationGoalId}/Expenses/{id}"
            .replace("{" + "educationGoalId" + "}", localVarApiClient.escapeString(educationGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsDeleteByEducationgoalidIdValidateBeforeCall(Integer educationGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationGoalId' is set
        if (educationGoalId == null) {
            throw new ApiException("Missing the required parameter 'educationGoalId' when calling educationGoalsDeleteByEducationgoalidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsDeleteByEducationgoalidId(Async)");
        }

        return educationGoalsDeleteByEducationgoalidIdCall(educationGoalId, id, _callback);

    }

    /**
     * 
     * Description: The operation removes an Education Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal Expense from a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to delete the Expense under (required)
     * @param id The Education Goal Expense ID used to identify which Education Goal Expense to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public void educationGoalsDeleteByEducationgoalidId(Integer educationGoalId, Integer id) throws ApiException {
        educationGoalsDeleteByEducationgoalidIdWithHttpInfo(educationGoalId, id);
    }

    /**
     * 
     * Description: The operation removes an Education Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal Expense from a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to delete the Expense under (required)
     * @param id The Education Goal Expense ID used to identify which Education Goal Expense to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> educationGoalsDeleteByEducationgoalidIdWithHttpInfo(Integer educationGoalId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsDeleteByEducationgoalidIdValidateBeforeCall(educationGoalId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes an Education Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal Expense from a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to delete the Expense under (required)
     * @param id The Education Goal Expense ID used to identify which Education Goal Expense to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsDeleteByEducationgoalidIdAsync(Integer educationGoalId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsDeleteByEducationgoalidIdValidateBeforeCall(educationGoalId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsDeleteById
     * @param id The Education Goal ID used to identify which Education Goal to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsDeleteById(Async)");
        }

        return educationGoalsDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes an Education Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal from a Fact Finder.
     * @param id The Education Goal ID used to identify which Education Goal to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public void educationGoalsDeleteById(Integer id) throws ApiException {
        educationGoalsDeleteByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes an Education Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal from a Fact Finder.
     * @param id The Education Goal ID used to identify which Education Goal to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> educationGoalsDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes an Education Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Education Goal from a Fact Finder.
     * @param id The Education Goal ID used to identify which Education Goal to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsDeleteByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsGetById
     * @param id The ID of the Education Goal used to retreive the Education Goal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsGetById(Async)");
        }

        return educationGoalsGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Education Goal for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal including description and projected cost.
     * @param id The ID of the Education Goal used to retreive the Education Goal (required)
     * @return EducationGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationGoalWithIdModel educationGoalsGetById(Integer id) throws ApiException {
        ApiResponse<EducationGoalWithIdModel> localVarResp = educationGoalsGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Education Goal for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal including description and projected cost.
     * @param id The ID of the Education Goal used to retreive the Education Goal (required)
     * @return ApiResponse&lt;EducationGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationGoalWithIdModel> educationGoalsGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Education Goal for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal including description and projected cost.
     * @param id The ID of the Education Goal used to retreive the Education Goal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetByIdAsync(Integer id, final ApiCallback<EducationGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsGetEducationExpenseByEducationgoalidId
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param id The ID of the Education Goal Expense used to retreive the Education Goal Expense (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationExpenseByEducationgoalidIdCall(Integer educationGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{educationGoalId}/Expenses/{id}"
            .replace("{" + "educationGoalId" + "}", localVarApiClient.escapeString(educationGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsGetEducationExpenseByEducationgoalidIdValidateBeforeCall(Integer educationGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationGoalId' is set
        if (educationGoalId == null) {
            throw new ApiException("Missing the required parameter 'educationGoalId' when calling educationGoalsGetEducationExpenseByEducationgoalidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsGetEducationExpenseByEducationgoalidId(Async)");
        }

        return educationGoalsGetEducationExpenseByEducationgoalidIdCall(educationGoalId, id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Education Goal Expense for the specified Education Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expense including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param id The ID of the Education Goal Expense used to retreive the Education Goal Expense (required)
     * @return EducationExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationExpenseWithIdModel educationGoalsGetEducationExpenseByEducationgoalidId(Integer educationGoalId, Integer id) throws ApiException {
        ApiResponse<EducationExpenseWithIdModel> localVarResp = educationGoalsGetEducationExpenseByEducationgoalidIdWithHttpInfo(educationGoalId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Education Goal Expense for the specified Education Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expense including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param id The ID of the Education Goal Expense used to retreive the Education Goal Expense (required)
     * @return ApiResponse&lt;EducationExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationExpenseWithIdModel> educationGoalsGetEducationExpenseByEducationgoalidIdWithHttpInfo(Integer educationGoalId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsGetEducationExpenseByEducationgoalidIdValidateBeforeCall(educationGoalId, id, null);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Education Goal Expense for the specified Education Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expense including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param id The ID of the Education Goal Expense used to retreive the Education Goal Expense (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationExpenseByEducationgoalidIdAsync(Integer educationGoalId, Integer id, final ApiCallback<EducationExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsGetEducationExpenseByEducationgoalidIdValidateBeforeCall(educationGoalId, id, _callback);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCall(Integer educationGoalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{educationGoalId}/Expenses"
            .replace("{" + "educationGoalId" + "}", localVarApiClient.escapeString(educationGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidValidateBeforeCall(Integer educationGoalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationGoalId' is set
        if (educationGoalId == null) {
            throw new ApiException("Missing the required parameter 'educationGoalId' when calling educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid(Async)");
        }

        return educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidCall(educationGoalId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Education Goal Expenses for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expenses including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @return EducationExpensesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationExpensesModel educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalid(Integer educationGoalId) throws ApiException {
        ApiResponse<EducationExpensesModel> localVarResp = educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidWithHttpInfo(educationGoalId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Education Goal Expenses for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expenses including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @return ApiResponse&lt;EducationExpensesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationExpensesModel> educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidWithHttpInfo(Integer educationGoalId) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidValidateBeforeCall(educationGoalId, null);
        Type localVarReturnType = new TypeToken<EducationExpensesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Education Goal Expenses for the specified Education Goal ID.&lt;br /&gt;                Purpose: Provides access to the Education Goal Expenses including description and annual cost.
     * @param educationGoalId The ID of the Education Goal used to retrieve Education Goal Expenses (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidAsync(Integer educationGoalId, final ApiCallback<EducationExpensesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsGetEducationExpensesByEducationGoalIdByEducationgoalidValidateBeforeCall(educationGoalId, _callback);
        Type localVarReturnType = new TypeToken<EducationExpensesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Education Goals (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/EducationGoals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid(Async)");
        }

        return educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Education Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Education Goals including description and projected cost.
     * @param factFinderId The ID of the Fact Finder used to retrieve Education Goals (required)
     * @return EducationGoalsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationGoalsModel educationGoalsGetEducationGoalsByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<EducationGoalsModel> localVarResp = educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Education Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Education Goals including description and projected cost.
     * @param factFinderId The ID of the Fact Finder used to retrieve Education Goals (required)
     * @return ApiResponse&lt;EducationGoalsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationGoalsModel> educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<EducationGoalsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Education Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Education Goals including description and projected cost.
     * @param factFinderId The ID of the Fact Finder used to retrieve Education Goals (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<EducationGoalsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsGetEducationGoalsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<EducationGoalsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsPostByEducationgoalidModel
     * @param educationGoalId The Education Goal ID used to locate the Goal to add the expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPostByEducationgoalidModelCall(Integer educationGoalId, EducationExpenseModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{educationGoalId}/Expenses"
            .replace("{" + "educationGoalId" + "}", localVarApiClient.escapeString(educationGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsPostByEducationgoalidModelValidateBeforeCall(Integer educationGoalId, EducationExpenseModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationGoalId' is set
        if (educationGoalId == null) {
            throw new ApiException("Missing the required parameter 'educationGoalId' when calling educationGoalsPostByEducationgoalidModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling educationGoalsPostByEducationgoalidModel(Async)");
        }

        return educationGoalsPostByEducationgoalidModelCall(educationGoalId, model, _callback);

    }

    /**
     * 
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to add the expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return EducationExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationExpenseWithIdModel educationGoalsPostByEducationgoalidModel(Integer educationGoalId, EducationExpenseModel model) throws ApiException {
        ApiResponse<EducationExpenseWithIdModel> localVarResp = educationGoalsPostByEducationgoalidModelWithHttpInfo(educationGoalId, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to add the expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return ApiResponse&lt;EducationExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationExpenseWithIdModel> educationGoalsPostByEducationgoalidModelWithHttpInfo(Integer educationGoalId, EducationExpenseModel model) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsPostByEducationgoalidModelValidateBeforeCall(educationGoalId, model, null);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to add the expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPostByEducationgoalidModelAsync(Integer educationGoalId, EducationExpenseModel model, final ApiCallback<EducationExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsPostByEducationgoalidModelValidateBeforeCall(educationGoalId, model, _callback);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsPostByModel
     * @param model The Education Goal to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPostByModelCall(EducationGoalModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/EducationGoals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsPostByModelValidateBeforeCall(EducationGoalModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling educationGoalsPostByModel(Async)");
        }

        return educationGoalsPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates an Education Goal.&lt;br /&gt;                Purpose: Allows for creation of Education Goals on a Fact Finder.
     * @param model The Education Goal to be added to the Fact Finder (required)
     * @return EducationGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationGoalWithIdModel educationGoalsPostByModel(EducationGoalModel model) throws ApiException {
        ApiResponse<EducationGoalWithIdModel> localVarResp = educationGoalsPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates an Education Goal.&lt;br /&gt;                Purpose: Allows for creation of Education Goals on a Fact Finder.
     * @param model The Education Goal to be added to the Fact Finder (required)
     * @return ApiResponse&lt;EducationGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationGoalWithIdModel> educationGoalsPostByModelWithHttpInfo(EducationGoalModel model) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates an Education Goal.&lt;br /&gt;                Purpose: Allows for creation of Education Goals on a Fact Finder.
     * @param model The Education Goal to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPostByModelAsync(EducationGoalModel model, final ApiCallback<EducationGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsPutByEducationgoalidIdModel
     * @param educationGoalId The Education Goal ID used to locate the Goal to update the Expense under (required)
     * @param id The existing Education Goal Expense ID used to identify which Education Goal Expense to update (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPutByEducationgoalidIdModelCall(Integer educationGoalId, Integer id, EducationExpenseModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{educationGoalId}/Expenses/{id}"
            .replace("{" + "educationGoalId" + "}", localVarApiClient.escapeString(educationGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsPutByEducationgoalidIdModelValidateBeforeCall(Integer educationGoalId, Integer id, EducationExpenseModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'educationGoalId' is set
        if (educationGoalId == null) {
            throw new ApiException("Missing the required parameter 'educationGoalId' when calling educationGoalsPutByEducationgoalidIdModel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsPutByEducationgoalidIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling educationGoalsPutByEducationgoalidIdModel(Async)");
        }

        return educationGoalsPutByEducationgoalidIdModelCall(educationGoalId, id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of an Education Goal Expense on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to update the Expense under (required)
     * @param id The existing Education Goal Expense ID used to identify which Education Goal Expense to update (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return EducationExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationExpenseWithIdModel educationGoalsPutByEducationgoalidIdModel(Integer educationGoalId, Integer id, EducationExpenseModel model) throws ApiException {
        ApiResponse<EducationExpenseWithIdModel> localVarResp = educationGoalsPutByEducationgoalidIdModelWithHttpInfo(educationGoalId, id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of an Education Goal Expense on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to update the Expense under (required)
     * @param id The existing Education Goal Expense ID used to identify which Education Goal Expense to update (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return ApiResponse&lt;EducationExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationExpenseWithIdModel> educationGoalsPutByEducationgoalidIdModelWithHttpInfo(Integer educationGoalId, Integer id, EducationExpenseModel model) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsPutByEducationgoalidIdModelValidateBeforeCall(educationGoalId, id, model, null);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of an Education Goal Expense on a Fact Finder.
     * @param educationGoalId The Education Goal ID used to locate the Goal to update the Expense under (required)
     * @param id The existing Education Goal Expense ID used to identify which Education Goal Expense to update (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPutByEducationgoalidIdModelAsync(Integer educationGoalId, Integer id, EducationExpenseModel model, final ApiCallback<EducationExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsPutByEducationgoalidIdModelValidateBeforeCall(educationGoalId, id, model, _callback);
        Type localVarReturnType = new TypeToken<EducationExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for educationGoalsPutByIdModel
     * @param id The Education Goal ID used to locate the Goal to add the Expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPutByIdModelCall(Integer id, EducationGoalModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/EducationGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call educationGoalsPutByIdModelValidateBeforeCall(Integer id, EducationGoalModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling educationGoalsPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling educationGoalsPutByIdModel(Async)");
        }

        return educationGoalsPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param id The Education Goal ID used to locate the Goal to add the Expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return EducationGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public EducationGoalWithIdModel educationGoalsPutByIdModel(Integer id, EducationGoalModel model) throws ApiException {
        ApiResponse<EducationGoalWithIdModel> localVarResp = educationGoalsPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param id The Education Goal ID used to locate the Goal to add the Expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @return ApiResponse&lt;EducationGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EducationGoalWithIdModel> educationGoalsPutByIdModelWithHttpInfo(Integer id, EducationGoalModel model) throws ApiException {
        okhttp3.Call localVarCall = educationGoalsPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates an Education Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.
     * @param id The Education Goal ID used to locate the Goal to add the Expense to (required)
     * @param model The Education Goal Expense to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Education Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Education Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Education Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call educationGoalsPutByIdModelAsync(Integer id, EducationGoalModel model, final ApiCallback<EducationGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = educationGoalsPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<EducationGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
