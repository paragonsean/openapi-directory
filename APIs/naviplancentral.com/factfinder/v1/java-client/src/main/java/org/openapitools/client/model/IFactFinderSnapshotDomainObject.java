/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IAccountWithSubEntitiesDomainObject;
import org.openapitools.client.model.ICriticalIllnessInsurancePolicyDomainObject;
import org.openapitools.client.model.IDemographicsWithDependentsDomainObject;
import org.openapitools.client.model.IDisabilityInsurancePolicyDomainObject;
import org.openapitools.client.model.IEducationGoalWithExpensesDomainObject;
import org.openapitools.client.model.IExpenseDomainObject;
import org.openapitools.client.model.IFactFinderDefinedBenefitPensionDomainObject;
import org.openapitools.client.model.IFactFinderLiabilityDomainObject;
import org.openapitools.client.model.IFactFinderLifestyleAssetDomainObject;
import org.openapitools.client.model.IIncomeDomainObject;
import org.openapitools.client.model.ILifeInsurancePolicyDomainObject;
import org.openapitools.client.model.ILongTermCareInsurancePolicyDomainObject;
import org.openapitools.client.model.IMajorPurchaseGoalDomainObject;
import org.openapitools.client.model.IRealEstateAssetDomainObject;
import org.openapitools.client.model.IRetirementGoalWithExpensesDomainObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IFactFinderSnapshotDomainObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IFactFinderSnapshotDomainObject {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<IAccountWithSubEntitiesDomainObject> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITICAL_ILLNESS_INSURANCE_POLICIES = "criticalIllnessInsurancePolicies";
  @SerializedName(SERIALIZED_NAME_CRITICAL_ILLNESS_INSURANCE_POLICIES)
  private List<ICriticalIllnessInsurancePolicyDomainObject> criticalIllnessInsurancePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFINED_BENEFIT_PENSIONS = "definedBenefitPensions";
  @SerializedName(SERIALIZED_NAME_DEFINED_BENEFIT_PENSIONS)
  private List<IFactFinderDefinedBenefitPensionDomainObject> definedBenefitPensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEMOGRAPHICS = "demographics";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHICS)
  private IDemographicsWithDependentsDomainObject demographics;

  public static final String SERIALIZED_NAME_DISABILITY_INSURANCE_POLICIES = "disabilityInsurancePolicies";
  @SerializedName(SERIALIZED_NAME_DISABILITY_INSURANCE_POLICIES)
  private List<IDisabilityInsurancePolicyDomainObject> disabilityInsurancePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_EDUCATION_GOALS = "educationGoals";
  @SerializedName(SERIALIZED_NAME_EDUCATION_GOALS)
  private List<IEducationGoalWithExpensesDomainObject> educationGoals = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPENSES = "expenses";
  @SerializedName(SERIALIZED_NAME_EXPENSES)
  private List<IExpenseDomainObject> expenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCOMES = "incomes";
  @SerializedName(SERIALIZED_NAME_INCOMES)
  private List<IIncomeDomainObject> incomes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIABILITIES = "liabilities";
  @SerializedName(SERIALIZED_NAME_LIABILITIES)
  private List<IFactFinderLiabilityDomainObject> liabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFE_INSURANCE_POLICIES = "lifeInsurancePolicies";
  @SerializedName(SERIALIZED_NAME_LIFE_INSURANCE_POLICIES)
  private List<ILifeInsurancePolicyDomainObject> lifeInsurancePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFESTYLE_ASSETS = "lifestyleAssets";
  @SerializedName(SERIALIZED_NAME_LIFESTYLE_ASSETS)
  private List<IFactFinderLifestyleAssetDomainObject> lifestyleAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_TERM_CARE_INSURANCE_POLICIES = "longTermCareInsurancePolicies";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CARE_INSURANCE_POLICIES)
  private List<ILongTermCareInsurancePolicyDomainObject> longTermCareInsurancePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAJOR_PURCHASE_GOALS = "majorPurchaseGoals";
  @SerializedName(SERIALIZED_NAME_MAJOR_PURCHASE_GOALS)
  private List<IMajorPurchaseGoalDomainObject> majorPurchaseGoals = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAN_YEAR = "planYear";
  @SerializedName(SERIALIZED_NAME_PLAN_YEAR)
  private Integer planYear;

  public static final String SERIALIZED_NAME_REAL_ESTATE_ASSETS = "realEstateAssets";
  @SerializedName(SERIALIZED_NAME_REAL_ESTATE_ASSETS)
  private List<IRealEstateAssetDomainObject> realEstateAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETIREMENT_GOAL = "retirementGoal";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_GOAL)
  private IRetirementGoalWithExpensesDomainObject retirementGoal;

  public IFactFinderSnapshotDomainObject() {
  }

  public IFactFinderSnapshotDomainObject accounts(List<IAccountWithSubEntitiesDomainObject> accounts) {
    this.accounts = accounts;
    return this;
  }

  public IFactFinderSnapshotDomainObject addAccountsItem(IAccountWithSubEntitiesDomainObject accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * Get accounts
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<IAccountWithSubEntitiesDomainObject> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<IAccountWithSubEntitiesDomainObject> accounts) {
    this.accounts = accounts;
  }


  public IFactFinderSnapshotDomainObject criticalIllnessInsurancePolicies(List<ICriticalIllnessInsurancePolicyDomainObject> criticalIllnessInsurancePolicies) {
    this.criticalIllnessInsurancePolicies = criticalIllnessInsurancePolicies;
    return this;
  }

  public IFactFinderSnapshotDomainObject addCriticalIllnessInsurancePoliciesItem(ICriticalIllnessInsurancePolicyDomainObject criticalIllnessInsurancePoliciesItem) {
    if (this.criticalIllnessInsurancePolicies == null) {
      this.criticalIllnessInsurancePolicies = new ArrayList<>();
    }
    this.criticalIllnessInsurancePolicies.add(criticalIllnessInsurancePoliciesItem);
    return this;
  }

  /**
   * Get criticalIllnessInsurancePolicies
   * @return criticalIllnessInsurancePolicies
   */
  @javax.annotation.Nullable
  public List<ICriticalIllnessInsurancePolicyDomainObject> getCriticalIllnessInsurancePolicies() {
    return criticalIllnessInsurancePolicies;
  }

  public void setCriticalIllnessInsurancePolicies(List<ICriticalIllnessInsurancePolicyDomainObject> criticalIllnessInsurancePolicies) {
    this.criticalIllnessInsurancePolicies = criticalIllnessInsurancePolicies;
  }


  public IFactFinderSnapshotDomainObject definedBenefitPensions(List<IFactFinderDefinedBenefitPensionDomainObject> definedBenefitPensions) {
    this.definedBenefitPensions = definedBenefitPensions;
    return this;
  }

  public IFactFinderSnapshotDomainObject addDefinedBenefitPensionsItem(IFactFinderDefinedBenefitPensionDomainObject definedBenefitPensionsItem) {
    if (this.definedBenefitPensions == null) {
      this.definedBenefitPensions = new ArrayList<>();
    }
    this.definedBenefitPensions.add(definedBenefitPensionsItem);
    return this;
  }

  /**
   * Get definedBenefitPensions
   * @return definedBenefitPensions
   */
  @javax.annotation.Nullable
  public List<IFactFinderDefinedBenefitPensionDomainObject> getDefinedBenefitPensions() {
    return definedBenefitPensions;
  }

  public void setDefinedBenefitPensions(List<IFactFinderDefinedBenefitPensionDomainObject> definedBenefitPensions) {
    this.definedBenefitPensions = definedBenefitPensions;
  }


  public IFactFinderSnapshotDomainObject demographics(IDemographicsWithDependentsDomainObject demographics) {
    this.demographics = demographics;
    return this;
  }

  /**
   * Get demographics
   * @return demographics
   */
  @javax.annotation.Nullable
  public IDemographicsWithDependentsDomainObject getDemographics() {
    return demographics;
  }

  public void setDemographics(IDemographicsWithDependentsDomainObject demographics) {
    this.demographics = demographics;
  }


  public IFactFinderSnapshotDomainObject disabilityInsurancePolicies(List<IDisabilityInsurancePolicyDomainObject> disabilityInsurancePolicies) {
    this.disabilityInsurancePolicies = disabilityInsurancePolicies;
    return this;
  }

  public IFactFinderSnapshotDomainObject addDisabilityInsurancePoliciesItem(IDisabilityInsurancePolicyDomainObject disabilityInsurancePoliciesItem) {
    if (this.disabilityInsurancePolicies == null) {
      this.disabilityInsurancePolicies = new ArrayList<>();
    }
    this.disabilityInsurancePolicies.add(disabilityInsurancePoliciesItem);
    return this;
  }

  /**
   * Get disabilityInsurancePolicies
   * @return disabilityInsurancePolicies
   */
  @javax.annotation.Nullable
  public List<IDisabilityInsurancePolicyDomainObject> getDisabilityInsurancePolicies() {
    return disabilityInsurancePolicies;
  }

  public void setDisabilityInsurancePolicies(List<IDisabilityInsurancePolicyDomainObject> disabilityInsurancePolicies) {
    this.disabilityInsurancePolicies = disabilityInsurancePolicies;
  }


  public IFactFinderSnapshotDomainObject educationGoals(List<IEducationGoalWithExpensesDomainObject> educationGoals) {
    this.educationGoals = educationGoals;
    return this;
  }

  public IFactFinderSnapshotDomainObject addEducationGoalsItem(IEducationGoalWithExpensesDomainObject educationGoalsItem) {
    if (this.educationGoals == null) {
      this.educationGoals = new ArrayList<>();
    }
    this.educationGoals.add(educationGoalsItem);
    return this;
  }

  /**
   * Get educationGoals
   * @return educationGoals
   */
  @javax.annotation.Nullable
  public List<IEducationGoalWithExpensesDomainObject> getEducationGoals() {
    return educationGoals;
  }

  public void setEducationGoals(List<IEducationGoalWithExpensesDomainObject> educationGoals) {
    this.educationGoals = educationGoals;
  }


  public IFactFinderSnapshotDomainObject expenses(List<IExpenseDomainObject> expenses) {
    this.expenses = expenses;
    return this;
  }

  public IFactFinderSnapshotDomainObject addExpensesItem(IExpenseDomainObject expensesItem) {
    if (this.expenses == null) {
      this.expenses = new ArrayList<>();
    }
    this.expenses.add(expensesItem);
    return this;
  }

  /**
   * Get expenses
   * @return expenses
   */
  @javax.annotation.Nullable
  public List<IExpenseDomainObject> getExpenses() {
    return expenses;
  }

  public void setExpenses(List<IExpenseDomainObject> expenses) {
    this.expenses = expenses;
  }


  public IFactFinderSnapshotDomainObject incomes(List<IIncomeDomainObject> incomes) {
    this.incomes = incomes;
    return this;
  }

  public IFactFinderSnapshotDomainObject addIncomesItem(IIncomeDomainObject incomesItem) {
    if (this.incomes == null) {
      this.incomes = new ArrayList<>();
    }
    this.incomes.add(incomesItem);
    return this;
  }

  /**
   * Get incomes
   * @return incomes
   */
  @javax.annotation.Nullable
  public List<IIncomeDomainObject> getIncomes() {
    return incomes;
  }

  public void setIncomes(List<IIncomeDomainObject> incomes) {
    this.incomes = incomes;
  }


  public IFactFinderSnapshotDomainObject liabilities(List<IFactFinderLiabilityDomainObject> liabilities) {
    this.liabilities = liabilities;
    return this;
  }

  public IFactFinderSnapshotDomainObject addLiabilitiesItem(IFactFinderLiabilityDomainObject liabilitiesItem) {
    if (this.liabilities == null) {
      this.liabilities = new ArrayList<>();
    }
    this.liabilities.add(liabilitiesItem);
    return this;
  }

  /**
   * Get liabilities
   * @return liabilities
   */
  @javax.annotation.Nullable
  public List<IFactFinderLiabilityDomainObject> getLiabilities() {
    return liabilities;
  }

  public void setLiabilities(List<IFactFinderLiabilityDomainObject> liabilities) {
    this.liabilities = liabilities;
  }


  public IFactFinderSnapshotDomainObject lifeInsurancePolicies(List<ILifeInsurancePolicyDomainObject> lifeInsurancePolicies) {
    this.lifeInsurancePolicies = lifeInsurancePolicies;
    return this;
  }

  public IFactFinderSnapshotDomainObject addLifeInsurancePoliciesItem(ILifeInsurancePolicyDomainObject lifeInsurancePoliciesItem) {
    if (this.lifeInsurancePolicies == null) {
      this.lifeInsurancePolicies = new ArrayList<>();
    }
    this.lifeInsurancePolicies.add(lifeInsurancePoliciesItem);
    return this;
  }

  /**
   * Get lifeInsurancePolicies
   * @return lifeInsurancePolicies
   */
  @javax.annotation.Nullable
  public List<ILifeInsurancePolicyDomainObject> getLifeInsurancePolicies() {
    return lifeInsurancePolicies;
  }

  public void setLifeInsurancePolicies(List<ILifeInsurancePolicyDomainObject> lifeInsurancePolicies) {
    this.lifeInsurancePolicies = lifeInsurancePolicies;
  }


  public IFactFinderSnapshotDomainObject lifestyleAssets(List<IFactFinderLifestyleAssetDomainObject> lifestyleAssets) {
    this.lifestyleAssets = lifestyleAssets;
    return this;
  }

  public IFactFinderSnapshotDomainObject addLifestyleAssetsItem(IFactFinderLifestyleAssetDomainObject lifestyleAssetsItem) {
    if (this.lifestyleAssets == null) {
      this.lifestyleAssets = new ArrayList<>();
    }
    this.lifestyleAssets.add(lifestyleAssetsItem);
    return this;
  }

  /**
   * Get lifestyleAssets
   * @return lifestyleAssets
   */
  @javax.annotation.Nullable
  public List<IFactFinderLifestyleAssetDomainObject> getLifestyleAssets() {
    return lifestyleAssets;
  }

  public void setLifestyleAssets(List<IFactFinderLifestyleAssetDomainObject> lifestyleAssets) {
    this.lifestyleAssets = lifestyleAssets;
  }


  public IFactFinderSnapshotDomainObject longTermCareInsurancePolicies(List<ILongTermCareInsurancePolicyDomainObject> longTermCareInsurancePolicies) {
    this.longTermCareInsurancePolicies = longTermCareInsurancePolicies;
    return this;
  }

  public IFactFinderSnapshotDomainObject addLongTermCareInsurancePoliciesItem(ILongTermCareInsurancePolicyDomainObject longTermCareInsurancePoliciesItem) {
    if (this.longTermCareInsurancePolicies == null) {
      this.longTermCareInsurancePolicies = new ArrayList<>();
    }
    this.longTermCareInsurancePolicies.add(longTermCareInsurancePoliciesItem);
    return this;
  }

  /**
   * Get longTermCareInsurancePolicies
   * @return longTermCareInsurancePolicies
   */
  @javax.annotation.Nullable
  public List<ILongTermCareInsurancePolicyDomainObject> getLongTermCareInsurancePolicies() {
    return longTermCareInsurancePolicies;
  }

  public void setLongTermCareInsurancePolicies(List<ILongTermCareInsurancePolicyDomainObject> longTermCareInsurancePolicies) {
    this.longTermCareInsurancePolicies = longTermCareInsurancePolicies;
  }


  public IFactFinderSnapshotDomainObject majorPurchaseGoals(List<IMajorPurchaseGoalDomainObject> majorPurchaseGoals) {
    this.majorPurchaseGoals = majorPurchaseGoals;
    return this;
  }

  public IFactFinderSnapshotDomainObject addMajorPurchaseGoalsItem(IMajorPurchaseGoalDomainObject majorPurchaseGoalsItem) {
    if (this.majorPurchaseGoals == null) {
      this.majorPurchaseGoals = new ArrayList<>();
    }
    this.majorPurchaseGoals.add(majorPurchaseGoalsItem);
    return this;
  }

  /**
   * Get majorPurchaseGoals
   * @return majorPurchaseGoals
   */
  @javax.annotation.Nullable
  public List<IMajorPurchaseGoalDomainObject> getMajorPurchaseGoals() {
    return majorPurchaseGoals;
  }

  public void setMajorPurchaseGoals(List<IMajorPurchaseGoalDomainObject> majorPurchaseGoals) {
    this.majorPurchaseGoals = majorPurchaseGoals;
  }


  public IFactFinderSnapshotDomainObject planYear(Integer planYear) {
    this.planYear = planYear;
    return this;
  }

  /**
   * Get planYear
   * @return planYear
   */
  @javax.annotation.Nullable
  public Integer getPlanYear() {
    return planYear;
  }

  public void setPlanYear(Integer planYear) {
    this.planYear = planYear;
  }


  public IFactFinderSnapshotDomainObject realEstateAssets(List<IRealEstateAssetDomainObject> realEstateAssets) {
    this.realEstateAssets = realEstateAssets;
    return this;
  }

  public IFactFinderSnapshotDomainObject addRealEstateAssetsItem(IRealEstateAssetDomainObject realEstateAssetsItem) {
    if (this.realEstateAssets == null) {
      this.realEstateAssets = new ArrayList<>();
    }
    this.realEstateAssets.add(realEstateAssetsItem);
    return this;
  }

  /**
   * Get realEstateAssets
   * @return realEstateAssets
   */
  @javax.annotation.Nullable
  public List<IRealEstateAssetDomainObject> getRealEstateAssets() {
    return realEstateAssets;
  }

  public void setRealEstateAssets(List<IRealEstateAssetDomainObject> realEstateAssets) {
    this.realEstateAssets = realEstateAssets;
  }


  public IFactFinderSnapshotDomainObject retirementGoal(IRetirementGoalWithExpensesDomainObject retirementGoal) {
    this.retirementGoal = retirementGoal;
    return this;
  }

  /**
   * Get retirementGoal
   * @return retirementGoal
   */
  @javax.annotation.Nullable
  public IRetirementGoalWithExpensesDomainObject getRetirementGoal() {
    return retirementGoal;
  }

  public void setRetirementGoal(IRetirementGoalWithExpensesDomainObject retirementGoal) {
    this.retirementGoal = retirementGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFactFinderSnapshotDomainObject ifactFinderSnapshotDomainObject = (IFactFinderSnapshotDomainObject) o;
    return Objects.equals(this.accounts, ifactFinderSnapshotDomainObject.accounts) &&
        Objects.equals(this.criticalIllnessInsurancePolicies, ifactFinderSnapshotDomainObject.criticalIllnessInsurancePolicies) &&
        Objects.equals(this.definedBenefitPensions, ifactFinderSnapshotDomainObject.definedBenefitPensions) &&
        Objects.equals(this.demographics, ifactFinderSnapshotDomainObject.demographics) &&
        Objects.equals(this.disabilityInsurancePolicies, ifactFinderSnapshotDomainObject.disabilityInsurancePolicies) &&
        Objects.equals(this.educationGoals, ifactFinderSnapshotDomainObject.educationGoals) &&
        Objects.equals(this.expenses, ifactFinderSnapshotDomainObject.expenses) &&
        Objects.equals(this.incomes, ifactFinderSnapshotDomainObject.incomes) &&
        Objects.equals(this.liabilities, ifactFinderSnapshotDomainObject.liabilities) &&
        Objects.equals(this.lifeInsurancePolicies, ifactFinderSnapshotDomainObject.lifeInsurancePolicies) &&
        Objects.equals(this.lifestyleAssets, ifactFinderSnapshotDomainObject.lifestyleAssets) &&
        Objects.equals(this.longTermCareInsurancePolicies, ifactFinderSnapshotDomainObject.longTermCareInsurancePolicies) &&
        Objects.equals(this.majorPurchaseGoals, ifactFinderSnapshotDomainObject.majorPurchaseGoals) &&
        Objects.equals(this.planYear, ifactFinderSnapshotDomainObject.planYear) &&
        Objects.equals(this.realEstateAssets, ifactFinderSnapshotDomainObject.realEstateAssets) &&
        Objects.equals(this.retirementGoal, ifactFinderSnapshotDomainObject.retirementGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, criticalIllnessInsurancePolicies, definedBenefitPensions, demographics, disabilityInsurancePolicies, educationGoals, expenses, incomes, liabilities, lifeInsurancePolicies, lifestyleAssets, longTermCareInsurancePolicies, majorPurchaseGoals, planYear, realEstateAssets, retirementGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFactFinderSnapshotDomainObject {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    criticalIllnessInsurancePolicies: ").append(toIndentedString(criticalIllnessInsurancePolicies)).append("\n");
    sb.append("    definedBenefitPensions: ").append(toIndentedString(definedBenefitPensions)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("    disabilityInsurancePolicies: ").append(toIndentedString(disabilityInsurancePolicies)).append("\n");
    sb.append("    educationGoals: ").append(toIndentedString(educationGoals)).append("\n");
    sb.append("    expenses: ").append(toIndentedString(expenses)).append("\n");
    sb.append("    incomes: ").append(toIndentedString(incomes)).append("\n");
    sb.append("    liabilities: ").append(toIndentedString(liabilities)).append("\n");
    sb.append("    lifeInsurancePolicies: ").append(toIndentedString(lifeInsurancePolicies)).append("\n");
    sb.append("    lifestyleAssets: ").append(toIndentedString(lifestyleAssets)).append("\n");
    sb.append("    longTermCareInsurancePolicies: ").append(toIndentedString(longTermCareInsurancePolicies)).append("\n");
    sb.append("    majorPurchaseGoals: ").append(toIndentedString(majorPurchaseGoals)).append("\n");
    sb.append("    planYear: ").append(toIndentedString(planYear)).append("\n");
    sb.append("    realEstateAssets: ").append(toIndentedString(realEstateAssets)).append("\n");
    sb.append("    retirementGoal: ").append(toIndentedString(retirementGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("criticalIllnessInsurancePolicies");
    openapiFields.add("definedBenefitPensions");
    openapiFields.add("demographics");
    openapiFields.add("disabilityInsurancePolicies");
    openapiFields.add("educationGoals");
    openapiFields.add("expenses");
    openapiFields.add("incomes");
    openapiFields.add("liabilities");
    openapiFields.add("lifeInsurancePolicies");
    openapiFields.add("lifestyleAssets");
    openapiFields.add("longTermCareInsurancePolicies");
    openapiFields.add("majorPurchaseGoals");
    openapiFields.add("planYear");
    openapiFields.add("realEstateAssets");
    openapiFields.add("retirementGoal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IFactFinderSnapshotDomainObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IFactFinderSnapshotDomainObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IFactFinderSnapshotDomainObject is not found in the empty JSON string", IFactFinderSnapshotDomainObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IFactFinderSnapshotDomainObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IFactFinderSnapshotDomainObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            IAccountWithSubEntitiesDomainObject.validateJsonElement(jsonArrayaccounts.get(i));
          };
        }
      }
      if (jsonObj.get("criticalIllnessInsurancePolicies") != null && !jsonObj.get("criticalIllnessInsurancePolicies").isJsonNull()) {
        JsonArray jsonArraycriticalIllnessInsurancePolicies = jsonObj.getAsJsonArray("criticalIllnessInsurancePolicies");
        if (jsonArraycriticalIllnessInsurancePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("criticalIllnessInsurancePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `criticalIllnessInsurancePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("criticalIllnessInsurancePolicies").toString()));
          }

          // validate the optional field `criticalIllnessInsurancePolicies` (array)
          for (int i = 0; i < jsonArraycriticalIllnessInsurancePolicies.size(); i++) {
            ICriticalIllnessInsurancePolicyDomainObject.validateJsonElement(jsonArraycriticalIllnessInsurancePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("definedBenefitPensions") != null && !jsonObj.get("definedBenefitPensions").isJsonNull()) {
        JsonArray jsonArraydefinedBenefitPensions = jsonObj.getAsJsonArray("definedBenefitPensions");
        if (jsonArraydefinedBenefitPensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("definedBenefitPensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `definedBenefitPensions` to be an array in the JSON string but got `%s`", jsonObj.get("definedBenefitPensions").toString()));
          }

          // validate the optional field `definedBenefitPensions` (array)
          for (int i = 0; i < jsonArraydefinedBenefitPensions.size(); i++) {
            IFactFinderDefinedBenefitPensionDomainObject.validateJsonElement(jsonArraydefinedBenefitPensions.get(i));
          };
        }
      }
      // validate the optional field `demographics`
      if (jsonObj.get("demographics") != null && !jsonObj.get("demographics").isJsonNull()) {
        IDemographicsWithDependentsDomainObject.validateJsonElement(jsonObj.get("demographics"));
      }
      if (jsonObj.get("disabilityInsurancePolicies") != null && !jsonObj.get("disabilityInsurancePolicies").isJsonNull()) {
        JsonArray jsonArraydisabilityInsurancePolicies = jsonObj.getAsJsonArray("disabilityInsurancePolicies");
        if (jsonArraydisabilityInsurancePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disabilityInsurancePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disabilityInsurancePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("disabilityInsurancePolicies").toString()));
          }

          // validate the optional field `disabilityInsurancePolicies` (array)
          for (int i = 0; i < jsonArraydisabilityInsurancePolicies.size(); i++) {
            IDisabilityInsurancePolicyDomainObject.validateJsonElement(jsonArraydisabilityInsurancePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("educationGoals") != null && !jsonObj.get("educationGoals").isJsonNull()) {
        JsonArray jsonArrayeducationGoals = jsonObj.getAsJsonArray("educationGoals");
        if (jsonArrayeducationGoals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educationGoals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educationGoals` to be an array in the JSON string but got `%s`", jsonObj.get("educationGoals").toString()));
          }

          // validate the optional field `educationGoals` (array)
          for (int i = 0; i < jsonArrayeducationGoals.size(); i++) {
            IEducationGoalWithExpensesDomainObject.validateJsonElement(jsonArrayeducationGoals.get(i));
          };
        }
      }
      if (jsonObj.get("expenses") != null && !jsonObj.get("expenses").isJsonNull()) {
        JsonArray jsonArrayexpenses = jsonObj.getAsJsonArray("expenses");
        if (jsonArrayexpenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expenses` to be an array in the JSON string but got `%s`", jsonObj.get("expenses").toString()));
          }

          // validate the optional field `expenses` (array)
          for (int i = 0; i < jsonArrayexpenses.size(); i++) {
            IExpenseDomainObject.validateJsonElement(jsonArrayexpenses.get(i));
          };
        }
      }
      if (jsonObj.get("incomes") != null && !jsonObj.get("incomes").isJsonNull()) {
        JsonArray jsonArrayincomes = jsonObj.getAsJsonArray("incomes");
        if (jsonArrayincomes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("incomes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `incomes` to be an array in the JSON string but got `%s`", jsonObj.get("incomes").toString()));
          }

          // validate the optional field `incomes` (array)
          for (int i = 0; i < jsonArrayincomes.size(); i++) {
            IIncomeDomainObject.validateJsonElement(jsonArrayincomes.get(i));
          };
        }
      }
      if (jsonObj.get("liabilities") != null && !jsonObj.get("liabilities").isJsonNull()) {
        JsonArray jsonArrayliabilities = jsonObj.getAsJsonArray("liabilities");
        if (jsonArrayliabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("liabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `liabilities` to be an array in the JSON string but got `%s`", jsonObj.get("liabilities").toString()));
          }

          // validate the optional field `liabilities` (array)
          for (int i = 0; i < jsonArrayliabilities.size(); i++) {
            IFactFinderLiabilityDomainObject.validateJsonElement(jsonArrayliabilities.get(i));
          };
        }
      }
      if (jsonObj.get("lifeInsurancePolicies") != null && !jsonObj.get("lifeInsurancePolicies").isJsonNull()) {
        JsonArray jsonArraylifeInsurancePolicies = jsonObj.getAsJsonArray("lifeInsurancePolicies");
        if (jsonArraylifeInsurancePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lifeInsurancePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lifeInsurancePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("lifeInsurancePolicies").toString()));
          }

          // validate the optional field `lifeInsurancePolicies` (array)
          for (int i = 0; i < jsonArraylifeInsurancePolicies.size(); i++) {
            ILifeInsurancePolicyDomainObject.validateJsonElement(jsonArraylifeInsurancePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("lifestyleAssets") != null && !jsonObj.get("lifestyleAssets").isJsonNull()) {
        JsonArray jsonArraylifestyleAssets = jsonObj.getAsJsonArray("lifestyleAssets");
        if (jsonArraylifestyleAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lifestyleAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lifestyleAssets` to be an array in the JSON string but got `%s`", jsonObj.get("lifestyleAssets").toString()));
          }

          // validate the optional field `lifestyleAssets` (array)
          for (int i = 0; i < jsonArraylifestyleAssets.size(); i++) {
            IFactFinderLifestyleAssetDomainObject.validateJsonElement(jsonArraylifestyleAssets.get(i));
          };
        }
      }
      if (jsonObj.get("longTermCareInsurancePolicies") != null && !jsonObj.get("longTermCareInsurancePolicies").isJsonNull()) {
        JsonArray jsonArraylongTermCareInsurancePolicies = jsonObj.getAsJsonArray("longTermCareInsurancePolicies");
        if (jsonArraylongTermCareInsurancePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("longTermCareInsurancePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `longTermCareInsurancePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("longTermCareInsurancePolicies").toString()));
          }

          // validate the optional field `longTermCareInsurancePolicies` (array)
          for (int i = 0; i < jsonArraylongTermCareInsurancePolicies.size(); i++) {
            ILongTermCareInsurancePolicyDomainObject.validateJsonElement(jsonArraylongTermCareInsurancePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("majorPurchaseGoals") != null && !jsonObj.get("majorPurchaseGoals").isJsonNull()) {
        JsonArray jsonArraymajorPurchaseGoals = jsonObj.getAsJsonArray("majorPurchaseGoals");
        if (jsonArraymajorPurchaseGoals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("majorPurchaseGoals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `majorPurchaseGoals` to be an array in the JSON string but got `%s`", jsonObj.get("majorPurchaseGoals").toString()));
          }

          // validate the optional field `majorPurchaseGoals` (array)
          for (int i = 0; i < jsonArraymajorPurchaseGoals.size(); i++) {
            IMajorPurchaseGoalDomainObject.validateJsonElement(jsonArraymajorPurchaseGoals.get(i));
          };
        }
      }
      if (jsonObj.get("realEstateAssets") != null && !jsonObj.get("realEstateAssets").isJsonNull()) {
        JsonArray jsonArrayrealEstateAssets = jsonObj.getAsJsonArray("realEstateAssets");
        if (jsonArrayrealEstateAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("realEstateAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `realEstateAssets` to be an array in the JSON string but got `%s`", jsonObj.get("realEstateAssets").toString()));
          }

          // validate the optional field `realEstateAssets` (array)
          for (int i = 0; i < jsonArrayrealEstateAssets.size(); i++) {
            IRealEstateAssetDomainObject.validateJsonElement(jsonArrayrealEstateAssets.get(i));
          };
        }
      }
      // validate the optional field `retirementGoal`
      if (jsonObj.get("retirementGoal") != null && !jsonObj.get("retirementGoal").isJsonNull()) {
        IRetirementGoalWithExpensesDomainObject.validateJsonElement(jsonObj.get("retirementGoal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IFactFinderSnapshotDomainObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IFactFinderSnapshotDomainObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IFactFinderSnapshotDomainObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IFactFinderSnapshotDomainObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IFactFinderSnapshotDomainObject>() {
           @Override
           public void write(JsonWriter out, IFactFinderSnapshotDomainObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IFactFinderSnapshotDomainObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IFactFinderSnapshotDomainObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IFactFinderSnapshotDomainObject
   * @throws IOException if the JSON string is invalid with respect to IFactFinderSnapshotDomainObject
   */
  public static IFactFinderSnapshotDomainObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IFactFinderSnapshotDomainObject.class);
  }

  /**
   * Convert an instance of IFactFinderSnapshotDomainObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

