/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LifeInsurancePoliciesModel;
import org.openapitools.client.model.LifeInsurancePolicyModel;
import org.openapitools.client.model.LifeInsurancePolicySubaccountModel;
import org.openapitools.client.model.LifeInsurancePolicySubaccountWithIdModel;
import org.openapitools.client.model.LifeInsurancePolicySubaccountsModel;
import org.openapitools.client.model.LifeInsurancePolicyWithIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LifeInsurancePoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LifeInsurancePoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LifeInsurancePoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lifeInsurancePoliciesDeleteById
     * @param id The Life Insurance Policy ID used to identify which Life Insurance Policy to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesDeleteById(Async)");
        }

        return lifeInsurancePoliciesDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes a Life Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Life Insurance Policy and associated subaccounts from a Fact Finder.
     * @param id The Life Insurance Policy ID used to identify which Life Insurance Policy to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public void lifeInsurancePoliciesDeleteById(Integer id) throws ApiException {
        lifeInsurancePoliciesDeleteByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes a Life Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Life Insurance Policy and associated subaccounts from a Fact Finder.
     * @param id The Life Insurance Policy ID used to identify which Life Insurance Policy to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> lifeInsurancePoliciesDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes a Life Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Life Insurance Policy and associated subaccounts from a Fact Finder.
     * @param id The Life Insurance Policy ID used to identify which Life Insurance Policy to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesDeleteByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdCall(Integer lifeInsurancePolicyId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}"
            .replace("{" + "lifeInsurancePolicyId" + "}", localVarApiClient.escapeString(lifeInsurancePolicyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(Integer lifeInsurancePolicyId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifeInsurancePolicyId' is set
        if (lifeInsurancePolicyId == null) {
            throw new ApiException("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId(Async)");
        }

        return lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdCall(lifeInsurancePolicyId, id, _callback);

    }

    /**
     * 
     * Description: Deletes an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for removal of a subaccount from a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public void lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidId(Integer lifeInsurancePolicyId, Integer id) throws ApiException {
        lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdWithHttpInfo(lifeInsurancePolicyId, id);
    }

    /**
     * 
     * Description: Deletes an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for removal of a subaccount from a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdWithHttpInfo(Integer lifeInsurancePolicyId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(lifeInsurancePolicyId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: Deletes an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for removal of a subaccount from a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdAsync(Integer lifeInsurancePolicyId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesDeleteSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(lifeInsurancePolicyId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesGetById
     * @param id The ID of the Life Insurance Policy used to retreive the Life Insurance Policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesGetById(Async)");
        }

        return lifeInsurancePoliciesGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Life Insurance Policy for the specified Life Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy including description and policy type.
     * @param id The ID of the Life Insurance Policy used to retreive the Life Insurance Policy (required)
     * @return LifeInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicyWithIdModel lifeInsurancePoliciesGetById(Integer id) throws ApiException {
        ApiResponse<LifeInsurancePolicyWithIdModel> localVarResp = lifeInsurancePoliciesGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Life Insurance Policy for the specified Life Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy including description and policy type.
     * @param id The ID of the Life Insurance Policy used to retreive the Life Insurance Policy (required)
     * @return ApiResponse&lt;LifeInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicyWithIdModel> lifeInsurancePoliciesGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Life Insurance Policy for the specified Life Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy including description and policy type.
     * @param id The ID of the Life Insurance Policy used to retreive the Life Insurance Policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetByIdAsync(Integer id, final ApiCallback<LifeInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid(Async)");
        }

        return lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Life Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies (required)
     * @return LifeInsurancePoliciesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePoliciesModel lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<LifeInsurancePoliciesModel> localVarResp = lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Life Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies (required)
     * @return ApiResponse&lt;LifeInsurancePoliciesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePoliciesModel> lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePoliciesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Life Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<LifeInsurancePoliciesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesGetLifeInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePoliciesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdCall(Integer lifeInsurancePolicyId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}"
            .replace("{" + "lifeInsurancePolicyId" + "}", localVarApiClient.escapeString(lifeInsurancePolicyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(Integer lifeInsurancePolicyId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifeInsurancePolicyId' is set
        if (lifeInsurancePolicyId == null) {
            throw new ApiException("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId(Async)");
        }

        return lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdCall(lifeInsurancePolicyId, id, _callback);

    }

    /**
     * 
     * Description: Get a specific subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy subaccount.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @return LifeInsurancePolicySubaccountWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicySubaccountWithIdModel lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidId(Integer lifeInsurancePolicyId, Integer id) throws ApiException {
        ApiResponse<LifeInsurancePolicySubaccountWithIdModel> localVarResp = lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdWithHttpInfo(lifeInsurancePolicyId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: Get a specific subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy subaccount.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @return ApiResponse&lt;LifeInsurancePolicySubaccountWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicySubaccountWithIdModel> lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdWithHttpInfo(Integer lifeInsurancePolicyId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(lifeInsurancePolicyId, id, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: Get a specific subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policy subaccount.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdAsync(Integer lifeInsurancePolicyId, Integer id, final ApiCallback<LifeInsurancePolicySubaccountWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesGetSubaccountByLifeinsurancepolicyidIdValidateBeforeCall(lifeInsurancePolicyId, id, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidCall(Integer lifeInsurancePolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts"
            .replace("{" + "lifeInsurancePolicyId" + "}", localVarApiClient.escapeString(lifeInsurancePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidValidateBeforeCall(Integer lifeInsurancePolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifeInsurancePolicyId' is set
        if (lifeInsurancePolicyId == null) {
            throw new ApiException("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid(Async)");
        }

        return lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidCall(lifeInsurancePolicyId, _callback);

    }

    /**
     * 
     * Description: Get all the subaccounts for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to all the Life Insurance Policy subaccounts.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts. (required)
     * @return LifeInsurancePolicySubaccountsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicySubaccountsModel lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyid(Integer lifeInsurancePolicyId) throws ApiException {
        ApiResponse<LifeInsurancePolicySubaccountsModel> localVarResp = lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidWithHttpInfo(lifeInsurancePolicyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: Get all the subaccounts for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to all the Life Insurance Policy subaccounts.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts. (required)
     * @return ApiResponse&lt;LifeInsurancePolicySubaccountsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicySubaccountsModel> lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidWithHttpInfo(Integer lifeInsurancePolicyId) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidValidateBeforeCall(lifeInsurancePolicyId, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: Get all the subaccounts for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Provides access to all the Life Insurance Policy subaccounts.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidAsync(Integer lifeInsurancePolicyId, final ApiCallback<LifeInsurancePolicySubaccountsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesGetSubaccountsByLifeinsurancepolicyidValidateBeforeCall(lifeInsurancePolicyId, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesPostByModel
     * @param model The Life Insurance Policy to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPostByModelCall(LifeInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesPostByModelValidateBeforeCall(LifeInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling lifeInsurancePoliciesPostByModel(Async)");
        }

        return lifeInsurancePoliciesPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates a Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Life Insurance Policies on a Fact Finder.
     * @param model The Life Insurance Policy to be added to the Fact Finder (required)
     * @return LifeInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicyWithIdModel lifeInsurancePoliciesPostByModel(LifeInsurancePolicyModel model) throws ApiException {
        ApiResponse<LifeInsurancePolicyWithIdModel> localVarResp = lifeInsurancePoliciesPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Life Insurance Policies on a Fact Finder.
     * @param model The Life Insurance Policy to be added to the Fact Finder (required)
     * @return ApiResponse&lt;LifeInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicyWithIdModel> lifeInsurancePoliciesPostByModelWithHttpInfo(LifeInsurancePolicyModel model) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Life Insurance Policies on a Fact Finder.
     * @param model The Life Insurance Policy to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPostByModelAsync(LifeInsurancePolicyModel model, final ApiCallback<LifeInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelCall(Integer lifeInsurancePolicyId, LifeInsurancePolicySubaccountModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts"
            .replace("{" + "lifeInsurancePolicyId" + "}", localVarApiClient.escapeString(lifeInsurancePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelValidateBeforeCall(Integer lifeInsurancePolicyId, LifeInsurancePolicySubaccountModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifeInsurancePolicyId' is set
        if (lifeInsurancePolicyId == null) {
            throw new ApiException("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel(Async)");
        }

        return lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelCall(lifeInsurancePolicyId, model, _callback);

    }

    /**
     * 
     * Description: Creates a subaccount and adds it to an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @return LifeInsurancePolicySubaccountWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicySubaccountWithIdModel lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModel(Integer lifeInsurancePolicyId, LifeInsurancePolicySubaccountModel model) throws ApiException {
        ApiResponse<LifeInsurancePolicySubaccountWithIdModel> localVarResp = lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelWithHttpInfo(lifeInsurancePolicyId, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: Creates a subaccount and adds it to an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @return ApiResponse&lt;LifeInsurancePolicySubaccountWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicySubaccountWithIdModel> lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelWithHttpInfo(Integer lifeInsurancePolicyId, LifeInsurancePolicySubaccountModel model) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelValidateBeforeCall(lifeInsurancePolicyId, model, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: Creates a subaccount and adds it to an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelAsync(Integer lifeInsurancePolicyId, LifeInsurancePolicySubaccountModel model, final ApiCallback<LifeInsurancePolicySubaccountWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesPostSubaccountByLifeinsurancepolicyidModelValidateBeforeCall(lifeInsurancePolicyId, model, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesPutByIdModel
     * @param id The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update (required)
     * @param model The Life Insurance Policy to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPutByIdModelCall(Integer id, LifeInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesPutByIdModelValidateBeforeCall(Integer id, LifeInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling lifeInsurancePoliciesPutByIdModel(Async)");
        }

        return lifeInsurancePoliciesPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Life Insurance Policy, deletes associated sub-accounts if the policy type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of a Life Insurance Policy on a Fact Finder.
     * @param id The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update (required)
     * @param model The Life Insurance Policy to be updated on a Fact Finder (required)
     * @return LifeInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicyWithIdModel lifeInsurancePoliciesPutByIdModel(Integer id, LifeInsurancePolicyModel model) throws ApiException {
        ApiResponse<LifeInsurancePolicyWithIdModel> localVarResp = lifeInsurancePoliciesPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Life Insurance Policy, deletes associated sub-accounts if the policy type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of a Life Insurance Policy on a Fact Finder.
     * @param id The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update (required)
     * @param model The Life Insurance Policy to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;LifeInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicyWithIdModel> lifeInsurancePoliciesPutByIdModelWithHttpInfo(Integer id, LifeInsurancePolicyModel model) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Life Insurance Policy, deletes associated sub-accounts if the policy type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of a Life Insurance Policy on a Fact Finder.
     * @param id The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update (required)
     * @param model The Life Insurance Policy to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPutByIdModelAsync(Integer id, LifeInsurancePolicyModel model, final ApiCallback<LifeInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelCall(Integer lifeInsurancePolicyId, Integer id, LifeInsurancePolicySubaccountModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}"
            .replace("{" + "lifeInsurancePolicyId" + "}", localVarApiClient.escapeString(lifeInsurancePolicyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelValidateBeforeCall(Integer lifeInsurancePolicyId, Integer id, LifeInsurancePolicySubaccountModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifeInsurancePolicyId' is set
        if (lifeInsurancePolicyId == null) {
            throw new ApiException("Missing the required parameter 'lifeInsurancePolicyId' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel(Async)");
        }

        return lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelCall(lifeInsurancePolicyId, id, model, _callback);

    }

    /**
     * 
     * Description: Updates an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @return LifeInsurancePolicySubaccountModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePolicySubaccountModel lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModel(Integer lifeInsurancePolicyId, Integer id, LifeInsurancePolicySubaccountModel model) throws ApiException {
        ApiResponse<LifeInsurancePolicySubaccountModel> localVarResp = lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelWithHttpInfo(lifeInsurancePolicyId, id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: Updates an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @return ApiResponse&lt;LifeInsurancePolicySubaccountModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePolicySubaccountModel> lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelWithHttpInfo(Integer lifeInsurancePolicyId, Integer id, LifeInsurancePolicySubaccountModel model) throws ApiException {
        okhttp3.Call localVarCall = lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelValidateBeforeCall(lifeInsurancePolicyId, id, model, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: Updates an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a subaccount on a Life Insurance Policy.
     * @param lifeInsurancePolicyId The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount. (required)
     * @param id The ID of the Life Insurance Policy Subaccount. (required)
     * @param model The Life Insurance Policy Subaccount model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy Subaccount not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelAsync(Integer lifeInsurancePolicyId, Integer id, LifeInsurancePolicySubaccountModel model, final ApiCallback<LifeInsurancePolicySubaccountModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = lifeInsurancePoliciesPutSubaccountByLifeinsurancepolicyidIdModelValidateBeforeCall(lifeInsurancePolicyId, id, model, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePolicySubaccountModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
