/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CriticalIllnessInsurancePoliciesModel;
import org.openapitools.client.model.CriticalIllnessInsurancePolicyModel;
import org.openapitools.client.model.CriticalIllnessInsurancePolicyWithIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CriticalIllnessInsurancePoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CriticalIllnessInsurancePoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CriticalIllnessInsurancePoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for criticalIllnessInsurancePoliciesDeleteById
     * @param id The Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CriticalIllnessInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticalIllnessInsurancePoliciesDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling criticalIllnessInsurancePoliciesDeleteById(Async)");
        }

        return criticalIllnessInsurancePoliciesDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes a Critical Illness Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Critical Illness Insurance Policy from a Fact Finder.
     * @param id The Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public void criticalIllnessInsurancePoliciesDeleteById(Integer id) throws ApiException {
        criticalIllnessInsurancePoliciesDeleteByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes a Critical Illness Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Critical Illness Insurance Policy from a Fact Finder.
     * @param id The Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> criticalIllnessInsurancePoliciesDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes a Critical Illness Insurance Policy tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Critical Illness Insurance Policy from a Fact Finder.
     * @param id The Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesDeleteByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for criticalIllnessInsurancePoliciesGetById
     * @param id The ID of the Critical Illness Insurance Policy used to retreive the Critical Illness Insurance Policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CriticalIllnessInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticalIllnessInsurancePoliciesGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling criticalIllnessInsurancePoliciesGetById(Async)");
        }

        return criticalIllnessInsurancePoliciesGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Critical Illness Insurance Policy for the specified Critical Illness Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policy including description and policy type.
     * @param id The ID of the Critical Illness Insurance Policy used to retreive the Critical Illness Insurance Policy (required)
     * @return CriticalIllnessInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public CriticalIllnessInsurancePolicyWithIdModel criticalIllnessInsurancePoliciesGetById(Integer id) throws ApiException {
        ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> localVarResp = criticalIllnessInsurancePoliciesGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Critical Illness Insurance Policy for the specified Critical Illness Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policy including description and policy type.
     * @param id The ID of the Critical Illness Insurance Policy used to retreive the Critical Illness Insurance Policy (required)
     * @return ApiResponse&lt;CriticalIllnessInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> criticalIllnessInsurancePoliciesGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Critical Illness Insurance Policy for the specified Critical Illness Insurance Policy ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policy including description and policy type.
     * @param id The ID of the Critical Illness Insurance Policy used to retreive the Critical Illness Insurance Policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesGetByIdAsync(Integer id, final ApiCallback<CriticalIllnessInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Critical Illness Insurance Policies (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CriticalIllnessInsurancePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderid(Async)");
        }

        return criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Critical Illness Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Critical Illness Insurance Policies (required)
     * @return CriticalIllnessInsurancePoliciesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public CriticalIllnessInsurancePoliciesModel criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<CriticalIllnessInsurancePoliciesModel> localVarResp = criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Critical Illness Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Critical Illness Insurance Policies (required)
     * @return ApiResponse&lt;CriticalIllnessInsurancePoliciesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CriticalIllnessInsurancePoliciesModel> criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePoliciesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Critical Illness Insurance Policies for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Critical Illness Insurance Policies including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Critical Illness Insurance Policies (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<CriticalIllnessInsurancePoliciesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesGetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePoliciesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for criticalIllnessInsurancePoliciesPostByModel
     * @param model The Critical Illness Insurance Policy to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesPostByModelCall(CriticalIllnessInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/CriticalIllnessInsurancePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticalIllnessInsurancePoliciesPostByModelValidateBeforeCall(CriticalIllnessInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling criticalIllnessInsurancePoliciesPostByModel(Async)");
        }

        return criticalIllnessInsurancePoliciesPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Critical Illness Insurance Policies on a Fact Finder.
     * @param model The Critical Illness Insurance Policy to be added to the Fact Finder (required)
     * @return CriticalIllnessInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public CriticalIllnessInsurancePolicyWithIdModel criticalIllnessInsurancePoliciesPostByModel(CriticalIllnessInsurancePolicyModel model) throws ApiException {
        ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> localVarResp = criticalIllnessInsurancePoliciesPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Critical Illness Insurance Policies on a Fact Finder.
     * @param model The Critical Illness Insurance Policy to be added to the Fact Finder (required)
     * @return ApiResponse&lt;CriticalIllnessInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> criticalIllnessInsurancePoliciesPostByModelWithHttpInfo(CriticalIllnessInsurancePolicyModel model) throws ApiException {
        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for creation of Critical Illness Insurance Policies on a Fact Finder.
     * @param model The Critical Illness Insurance Policy to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesPostByModelAsync(CriticalIllnessInsurancePolicyModel model, final ApiCallback<CriticalIllnessInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for criticalIllnessInsurancePoliciesPutByIdModel
     * @param id The existing Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to update (required)
     * @param model The Critical Illness Insurance Policy to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesPutByIdModelCall(Integer id, CriticalIllnessInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/CriticalIllnessInsurancePolicies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criticalIllnessInsurancePoliciesPutByIdModelValidateBeforeCall(Integer id, CriticalIllnessInsurancePolicyModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling criticalIllnessInsurancePoliciesPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling criticalIllnessInsurancePoliciesPutByIdModel(Async)");
        }

        return criticalIllnessInsurancePoliciesPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a Critical Illness Insurance Policy on a Fact Finder.
     * @param id The existing Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to update (required)
     * @param model The Critical Illness Insurance Policy to be updated on a Fact Finder (required)
     * @return CriticalIllnessInsurancePolicyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public CriticalIllnessInsurancePolicyWithIdModel criticalIllnessInsurancePoliciesPutByIdModel(Integer id, CriticalIllnessInsurancePolicyModel model) throws ApiException {
        ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> localVarResp = criticalIllnessInsurancePoliciesPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a Critical Illness Insurance Policy on a Fact Finder.
     * @param id The existing Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to update (required)
     * @param model The Critical Illness Insurance Policy to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;CriticalIllnessInsurancePolicyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CriticalIllnessInsurancePolicyWithIdModel> criticalIllnessInsurancePoliciesPutByIdModelWithHttpInfo(Integer id, CriticalIllnessInsurancePolicyModel model) throws ApiException {
        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Critical Illness Insurance Policy.&lt;br /&gt;                Purpose: Allows for complete replacement of a Critical Illness Insurance Policy on a Fact Finder.
     * @param id The existing Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to update (required)
     * @param model The Critical Illness Insurance Policy to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Critical Illness Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Critical Illness Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Critical Illness Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criticalIllnessInsurancePoliciesPutByIdModelAsync(Integer id, CriticalIllnessInsurancePolicyModel model, final ApiCallback<CriticalIllnessInsurancePolicyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = criticalIllnessInsurancePoliciesPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<CriticalIllnessInsurancePolicyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
