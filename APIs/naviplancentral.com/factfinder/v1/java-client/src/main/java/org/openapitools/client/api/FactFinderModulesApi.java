/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FactFinderModuleModel;
import org.openapitools.client.model.FactFinderModuleWithIdModel;
import org.openapitools.client.model.FactFinderModulesModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FactFinderModulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FactFinderModulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FactFinderModulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for factFinderModulesGetByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Modules (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesGetByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{factFinderId}/Modules"
            .replace("{" + "factFinderId" + "}", localVarApiClient.escapeString(factFinderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFinderModulesGetByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling factFinderModulesGetByFactfinderid(Async)");
        }

        return factFinderModulesGetByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Fact Finder Modules for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Modules including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Modules (required)
     * @return FactFinderModulesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderModulesModel factFinderModulesGetByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<FactFinderModulesModel> localVarResp = factFinderModulesGetByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Fact Finder Modules for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Modules including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Modules (required)
     * @return ApiResponse&lt;FactFinderModulesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderModulesModel> factFinderModulesGetByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = factFinderModulesGetByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<FactFinderModulesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Fact Finder Modules for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Modules including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Modules (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesGetByFactfinderidAsync(Integer factFinderId, final ApiCallback<FactFinderModulesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFinderModulesGetByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<FactFinderModulesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFinderModulesGetByFactfinderidId
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Module (required)
     * @param id The ID of the Fact Finder Module used to retreive the Fact Finder Module (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesGetByFactfinderidIdCall(Integer factFinderId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{factFinderId}/Modules/{id}"
            .replace("{" + "factFinderId" + "}", localVarApiClient.escapeString(factFinderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFinderModulesGetByFactfinderidIdValidateBeforeCall(Integer factFinderId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling factFinderModulesGetByFactfinderidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFinderModulesGetByFactfinderidId(Async)");
        }

        return factFinderModulesGetByFactfinderidIdCall(factFinderId, id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Fact Finder Module for the specified Fact Finder Module ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Module including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Module (required)
     * @param id The ID of the Fact Finder Module used to retreive the Fact Finder Module (required)
     * @return FactFinderModuleWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderModuleWithIdModel factFinderModulesGetByFactfinderidId(Integer factFinderId, Integer id) throws ApiException {
        ApiResponse<FactFinderModuleWithIdModel> localVarResp = factFinderModulesGetByFactfinderidIdWithHttpInfo(factFinderId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Fact Finder Module for the specified Fact Finder Module ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Module including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Module (required)
     * @param id The ID of the Fact Finder Module used to retreive the Fact Finder Module (required)
     * @return ApiResponse&lt;FactFinderModuleWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderModuleWithIdModel> factFinderModulesGetByFactfinderidIdWithHttpInfo(Integer factFinderId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = factFinderModulesGetByFactfinderidIdValidateBeforeCall(factFinderId, id, null);
        Type localVarReturnType = new TypeToken<FactFinderModuleWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Fact Finder Module for the specified Fact Finder Module ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder Module including description and policy type.
     * @param factFinderId The ID of the Fact Finder used to retrieve Fact Finder Module (required)
     * @param id The ID of the Fact Finder Module used to retreive the Fact Finder Module (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesGetByFactfinderidIdAsync(Integer factFinderId, Integer id, final ApiCallback<FactFinderModuleWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFinderModulesGetByFactfinderidIdValidateBeforeCall(factFinderId, id, _callback);
        Type localVarReturnType = new TypeToken<FactFinderModuleWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFinderModulesPutByModelFactfinderidId
     * @param factFinderId The ID of the Fact Finder used to identify the Fact Finder Module to update (required)
     * @param id The existing Fact Finder Module ID used to identify which Fact Finder Module to update (required)
     * @param model The Fact Finder Module to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesPutByModelFactfinderidIdCall(Integer factFinderId, Integer id, FactFinderModuleModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{factFinderId}/Modules/{id}"
            .replace("{" + "factFinderId" + "}", localVarApiClient.escapeString(factFinderId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFinderModulesPutByModelFactfinderidIdValidateBeforeCall(Integer factFinderId, Integer id, FactFinderModuleModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling factFinderModulesPutByModelFactfinderidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFinderModulesPutByModelFactfinderidId(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling factFinderModulesPutByModelFactfinderidId(Async)");
        }

        return factFinderModulesPutByModelFactfinderidIdCall(factFinderId, id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Fact Finder Module.&lt;br /&gt;                Purpose: Allows for complete replacement of a Fact Finder Module on a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to identify the Fact Finder Module to update (required)
     * @param id The existing Fact Finder Module ID used to identify which Fact Finder Module to update (required)
     * @param model The Fact Finder Module to be updated on a Fact Finder (required)
     * @return FactFinderModuleWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderModuleWithIdModel factFinderModulesPutByModelFactfinderidId(Integer factFinderId, Integer id, FactFinderModuleModel model) throws ApiException {
        ApiResponse<FactFinderModuleWithIdModel> localVarResp = factFinderModulesPutByModelFactfinderidIdWithHttpInfo(factFinderId, id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Fact Finder Module.&lt;br /&gt;                Purpose: Allows for complete replacement of a Fact Finder Module on a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to identify the Fact Finder Module to update (required)
     * @param id The existing Fact Finder Module ID used to identify which Fact Finder Module to update (required)
     * @param model The Fact Finder Module to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;FactFinderModuleWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderModuleWithIdModel> factFinderModulesPutByModelFactfinderidIdWithHttpInfo(Integer factFinderId, Integer id, FactFinderModuleModel model) throws ApiException {
        okhttp3.Call localVarCall = factFinderModulesPutByModelFactfinderidIdValidateBeforeCall(factFinderId, id, model, null);
        Type localVarReturnType = new TypeToken<FactFinderModuleWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Fact Finder Module.&lt;br /&gt;                Purpose: Allows for complete replacement of a Fact Finder Module on a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to identify the Fact Finder Module to update (required)
     * @param id The existing Fact Finder Module ID used to identify which Fact Finder Module to update (required)
     * @param model The Fact Finder Module to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder Module data access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder Module not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFinderModulesPutByModelFactfinderidIdAsync(Integer factFinderId, Integer id, FactFinderModuleModel model, final ApiCallback<FactFinderModuleWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFinderModulesPutByModelFactfinderidIdValidateBeforeCall(factFinderId, id, model, _callback);
        Type localVarReturnType = new TypeToken<FactFinderModuleWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
