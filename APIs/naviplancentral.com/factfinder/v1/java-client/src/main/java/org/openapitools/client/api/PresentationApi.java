/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsWithSubEntitiesModel;
import org.openapitools.client.model.DefinedBenefitPensionsModel;
import org.openapitools.client.model.IncomesModel;
import org.openapitools.client.model.LiabilitiesModel;
import org.openapitools.client.model.LifeInsurancePoliciesWithSubEntitiesModel;
import org.openapitools.client.model.OwnersModel;
import org.openapitools.client.model.RelationshipTypesModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PresentationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PresentationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PresentationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for presentationGetAccountsByFactfinderidExternalsourceid
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetAccountsByFactfinderidExternalsourceidCall(Integer factFinderId, String externalSourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        if (externalSourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalSourceId", externalSourceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetAccountsByFactfinderidExternalsourceidValidateBeforeCall(Integer factFinderId, String externalSourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetAccountsByFactfinderidExternalsourceid(Async)");
        }

        return presentationGetAccountsByFactfinderidExternalsourceidCall(factFinderId, externalSourceId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as                             all of the holdings and savings strategies belonging to those accounts.&lt;br /&gt;                Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @return AccountsWithSubEntitiesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountsWithSubEntitiesModel presentationGetAccountsByFactfinderidExternalsourceid(Integer factFinderId, String externalSourceId) throws ApiException {
        ApiResponse<AccountsWithSubEntitiesModel> localVarResp = presentationGetAccountsByFactfinderidExternalsourceidWithHttpInfo(factFinderId, externalSourceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as                             all of the holdings and savings strategies belonging to those accounts.&lt;br /&gt;                Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @return ApiResponse&lt;AccountsWithSubEntitiesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsWithSubEntitiesModel> presentationGetAccountsByFactfinderidExternalsourceidWithHttpInfo(Integer factFinderId, String externalSourceId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetAccountsByFactfinderidExternalsourceidValidateBeforeCall(factFinderId, externalSourceId, null);
        Type localVarReturnType = new TypeToken<AccountsWithSubEntitiesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as                             all of the holdings and savings strategies belonging to those accounts.&lt;br /&gt;                Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetAccountsByFactfinderidExternalsourceidAsync(Integer factFinderId, String externalSourceId, final ApiCallback<AccountsWithSubEntitiesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetAccountsByFactfinderidExternalsourceidValidateBeforeCall(factFinderId, externalSourceId, _callback);
        Type localVarReturnType = new TypeToken<AccountsWithSubEntitiesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetDemographicOwnersByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve owners. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetDemographicOwnersByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Demographics/Owners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetDemographicOwnersByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetDemographicOwnersByFactfinderid(Async)");
        }

        return presentationGetDemographicOwnersByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves owner values for the fact finder based on demographics data                Purpose: Provides the list of valid options for owner, student, beneficiary, etc.
     * @param factFinderId The ID of the Fact Finder used to retrieve owners. (required)
     * @return OwnersModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public OwnersModel presentationGetDemographicOwnersByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<OwnersModel> localVarResp = presentationGetDemographicOwnersByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves owner values for the fact finder based on demographics data                Purpose: Provides the list of valid options for owner, student, beneficiary, etc.
     * @param factFinderId The ID of the Fact Finder used to retrieve owners. (required)
     * @return ApiResponse&lt;OwnersModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OwnersModel> presentationGetDemographicOwnersByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetDemographicOwnersByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<OwnersModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves owner values for the fact finder based on demographics data                Purpose: Provides the list of valid options for owner, student, beneficiary, etc.
     * @param factFinderId The ID of the Fact Finder used to retrieve owners. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetDemographicOwnersByFactfinderidAsync(Integer factFinderId, final ApiCallback<OwnersModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetDemographicOwnersByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<OwnersModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetDemographicRelationships
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetDemographicRelationshipsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Demographics/Relationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetDemographicRelationshipsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return presentationGetDemographicRelationshipsCall(_callback);

    }

    /**
     * 
     * Description: This operation retrieves all relationship types relevant to demographics.&lt;br /&gt;                Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.
     * @return RelationshipTypesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipTypesModel presentationGetDemographicRelationships() throws ApiException {
        ApiResponse<RelationshipTypesModel> localVarResp = presentationGetDemographicRelationshipsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all relationship types relevant to demographics.&lt;br /&gt;                Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.
     * @return ApiResponse&lt;RelationshipTypesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipTypesModel> presentationGetDemographicRelationshipsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = presentationGetDemographicRelationshipsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RelationshipTypesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all relationship types relevant to demographics.&lt;br /&gt;                Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetDemographicRelationshipsAsync(final ApiCallback<RelationshipTypesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetDemographicRelationshipsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RelationshipTypesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetIncomesByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetIncomesByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Incomes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetIncomesByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetIncomesByFactfinderid(Async)");
        }

        return presentationGetIncomesByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all current Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @return IncomesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public IncomesModel presentationGetIncomesByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<IncomesModel> localVarResp = presentationGetIncomesByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all current Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @return ApiResponse&lt;IncomesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomesModel> presentationGetIncomesByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetIncomesByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<IncomesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all current Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetIncomesByFactfinderidAsync(Integer factFinderId, final ApiCallback<IncomesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetIncomesByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<IncomesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetLiabilitiesByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Liabilities (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Liability data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Liability. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Liability not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetLiabilitiesByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Liabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetLiabilitiesByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetLiabilitiesByFactfinderid(Async)");
        }

        return presentationGetLiabilitiesByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Liabilities (required)
     * @return LiabilitiesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Liability data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Liability. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Liability not found. </td><td>  -  </td></tr>
     </table>
     */
    public LiabilitiesModel presentationGetLiabilitiesByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<LiabilitiesModel> localVarResp = presentationGetLiabilitiesByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Liabilities (required)
     * @return ApiResponse&lt;LiabilitiesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Liability data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Liability. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Liability not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiabilitiesModel> presentationGetLiabilitiesByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetLiabilitiesByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<LiabilitiesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.
     * @param factFinderId The ID of the Fact Finder used to retrieve Liabilities (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Liability data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Liability. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Liability not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetLiabilitiesByFactfinderidAsync(Integer factFinderId, final ApiCallback<LiabilitiesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetLiabilitiesByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<LiabilitiesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetLifeInsurancePoliciesByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetLifeInsurancePoliciesByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/LifeInsurancePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetLifeInsurancePoliciesByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetLifeInsurancePoliciesByFactfinderid(Async)");
        }

        return presentationGetLifeInsurancePoliciesByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies in a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies. (required)
     * @return LifeInsurancePoliciesWithSubEntitiesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public LifeInsurancePoliciesWithSubEntitiesModel presentationGetLifeInsurancePoliciesByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<LifeInsurancePoliciesWithSubEntitiesModel> localVarResp = presentationGetLifeInsurancePoliciesByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies in a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies. (required)
     * @return ApiResponse&lt;LifeInsurancePoliciesWithSubEntitiesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LifeInsurancePoliciesWithSubEntitiesModel> presentationGetLifeInsurancePoliciesByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetLifeInsurancePoliciesByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<LifeInsurancePoliciesWithSubEntitiesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Life Insurance Policies in a Fact Finder.
     * @param factFinderId The ID of the Fact Finder used to retrieve Life Insurance Policies. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Life Insurance Policy data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Life Insurance Policy. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Life Insurance Policy not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetLifeInsurancePoliciesByFactfinderidAsync(Integer factFinderId, final ApiCallback<LifeInsurancePoliciesWithSubEntitiesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetLifeInsurancePoliciesByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<LifeInsurancePoliciesWithSubEntitiesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationGetPensionsByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Pensions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Defined Benefit Pension data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Defined Benefit Pension. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Defined Benefit Pension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetPensionsByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Presentation/Pensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationGetPensionsByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling presentationGetPensionsByFactfinderid(Async)");
        }

        return presentationGetPensionsByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.
     * @param factFinderId The ID of the Fact Finder used to retrieve Pensions. (required)
     * @return DefinedBenefitPensionsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Defined Benefit Pension data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Defined Benefit Pension. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Defined Benefit Pension not found. </td><td>  -  </td></tr>
     </table>
     */
    public DefinedBenefitPensionsModel presentationGetPensionsByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<DefinedBenefitPensionsModel> localVarResp = presentationGetPensionsByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.
     * @param factFinderId The ID of the Fact Finder used to retrieve Pensions. (required)
     * @return ApiResponse&lt;DefinedBenefitPensionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Defined Benefit Pension data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Defined Benefit Pension. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Defined Benefit Pension not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefinedBenefitPensionsModel> presentationGetPensionsByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = presentationGetPensionsByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<DefinedBenefitPensionsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.
     * @param factFinderId The ID of the Fact Finder used to retrieve Pensions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Defined Benefit Pension data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Defined Benefit Pension. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Defined Benefit Pension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationGetPensionsByFactfinderidAsync(Integer factFinderId, final ApiCallback<DefinedBenefitPensionsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationGetPensionsByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<DefinedBenefitPensionsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
