/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FactFinderEntityModel;
import org.openapitools.client.model.FactFinderModel;
import org.openapitools.client.model.FactFinderPopulatableEntityModel;
import org.openapitools.client.model.FactFinderPopulationModel;
import org.openapitools.client.model.FactFinderSnapshotWithIdModel;
import org.openapitools.client.model.FactFinderSnapshotsModel;
import org.openapitools.client.model.FactFinderWithIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FactFindersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FactFindersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FactFindersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for factFindersDeleteById
     * @param id The ID of the Fact Finder to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFindersDeleteById(Async)");
        }

        return factFindersDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation deletes a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Deletes the fact finder.
     * @param id The ID of the Fact Finder to be deleted (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public Object factFindersDeleteById(Integer id) throws ApiException {
        ApiResponse<Object> localVarResp = factFindersDeleteByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation deletes a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Deletes the fact finder.
     * @param id The ID of the Fact Finder to be deleted (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> factFindersDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = factFindersDeleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation deletes a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Deletes the fact finder.
     * @param id The ID of the Fact Finder to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersDeleteByIdAsync(Integer id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersDeleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersGetByHouseholdIdByHouseholdid
     * @param householdId The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetByHouseholdIdByHouseholdidCall(Integer householdId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (householdId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("householdId", householdId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersGetByHouseholdIdByHouseholdidValidateBeforeCall(Integer householdId, final ApiCallback _callback) throws ApiException {
        return factFindersGetByHouseholdIdByHouseholdidCall(householdId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Fact Finders for the specified householdId,                 or if null, all households associated with the user.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param householdId The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user (optional)
     * @return List&lt;FactFinderWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<FactFinderWithIdModel> factFindersGetByHouseholdIdByHouseholdid(Integer householdId) throws ApiException {
        ApiResponse<List<FactFinderWithIdModel>> localVarResp = factFindersGetByHouseholdIdByHouseholdidWithHttpInfo(householdId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Fact Finders for the specified householdId,                 or if null, all households associated with the user.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param householdId The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user (optional)
     * @return ApiResponse&lt;List&lt;FactFinderWithIdModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FactFinderWithIdModel>> factFindersGetByHouseholdIdByHouseholdidWithHttpInfo(Integer householdId) throws ApiException {
        okhttp3.Call localVarCall = factFindersGetByHouseholdIdByHouseholdidValidateBeforeCall(householdId, null);
        Type localVarReturnType = new TypeToken<List<FactFinderWithIdModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Fact Finders for the specified householdId,                 or if null, all households associated with the user.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param householdId The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetByHouseholdIdByHouseholdidAsync(Integer householdId, final ApiCallback<List<FactFinderWithIdModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersGetByHouseholdIdByHouseholdidValidateBeforeCall(householdId, _callback);
        Type localVarReturnType = new TypeToken<List<FactFinderWithIdModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersGetById
     * @param id The ID of the Fact Finder used to retrieve the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFindersGetById(Async)");
        }

        return factFindersGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param id The ID of the Fact Finder used to retrieve the Fact Finder (required)
     * @return FactFinderWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderWithIdModel factFindersGetById(Integer id) throws ApiException {
        ApiResponse<FactFinderWithIdModel> localVarResp = factFindersGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param id The ID of the Fact Finder used to retrieve the Fact Finder (required)
     * @return ApiResponse&lt;FactFinderWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderWithIdModel> factFindersGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = factFindersGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Fact Finder for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Fact Finder including status.
     * @param id The ID of the Fact Finder used to retrieve the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetByIdAsync(Integer id, final ApiCallback<FactFinderWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersGetSnapshotsByFactfinderid
     * @param factFinderId The ID of the Fact Finder to retrieve Snapshots for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetSnapshotsByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{factFinderId}/Snapshots"
            .replace("{" + "factFinderId" + "}", localVarApiClient.escapeString(factFinderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersGetSnapshotsByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling factFindersGetSnapshotsByFactfinderid(Async)");
        }

        return factFindersGetSnapshotsByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: The operation retrieves Snapshots of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to view all Snapshots taken of a Fact Finder.
     * @param factFinderId The ID of the Fact Finder to retrieve Snapshots for (required)
     * @return FactFinderSnapshotsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderSnapshotsModel factFindersGetSnapshotsByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<FactFinderSnapshotsModel> localVarResp = factFindersGetSnapshotsByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation retrieves Snapshots of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to view all Snapshots taken of a Fact Finder.
     * @param factFinderId The ID of the Fact Finder to retrieve Snapshots for (required)
     * @return ApiResponse&lt;FactFinderSnapshotsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderSnapshotsModel> factFindersGetSnapshotsByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = factFindersGetSnapshotsByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<FactFinderSnapshotsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation retrieves Snapshots of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to view all Snapshots taken of a Fact Finder.
     * @param factFinderId The ID of the Fact Finder to retrieve Snapshots for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersGetSnapshotsByFactfinderidAsync(Integer factFinderId, final ApiCallback<FactFinderSnapshotsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersGetSnapshotsByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<FactFinderSnapshotsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersPostByModel
     * @param model The Household the Fact Finder will belong to and the modules that are available. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostByModelCall(FactFinderEntityModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/FactFinders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersPostByModelValidateBeforeCall(FactFinderEntityModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling factFindersPostByModel(Async)");
        }

        return factFindersPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates a completely empty draft Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Stages a Fact Finder for population.
     * @param model The Household the Fact Finder will belong to and the modules that are available. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public Object factFindersPostByModel(FactFinderEntityModel model) throws ApiException {
        ApiResponse<Object> localVarResp = factFindersPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a completely empty draft Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Stages a Fact Finder for population.
     * @param model The Household the Fact Finder will belong to and the modules that are available. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> factFindersPostByModelWithHttpInfo(FactFinderEntityModel model) throws ApiException {
        okhttp3.Call localVarCall = factFindersPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a completely empty draft Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Stages a Fact Finder for population.
     * @param model The Household the Fact Finder will belong to and the modules that are available. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostByModelAsync(FactFinderEntityModel model, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersPostPopulateByModel
     * @param model The Household the Fact Finder will belong to and the modules that are available.               Optional PlanId to populate from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostPopulateByModelCall(FactFinderPopulatableEntityModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/FactFinders/Populate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersPostPopulateByModelValidateBeforeCall(FactFinderPopulatableEntityModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling factFindersPostPopulateByModel(Async)");
        }

        return factFindersPostPopulateByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates a new Populated Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Creation of a Fact Finder.
     * @param model The Household the Fact Finder will belong to and the modules that are available.               Optional PlanId to populate from (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public Object factFindersPostPopulateByModel(FactFinderPopulatableEntityModel model) throws ApiException {
        ApiResponse<Object> localVarResp = factFindersPostPopulateByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a new Populated Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Creation of a Fact Finder.
     * @param model The Household the Fact Finder will belong to and the modules that are available.               Optional PlanId to populate from (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> factFindersPostPopulateByModelWithHttpInfo(FactFinderPopulatableEntityModel model) throws ApiException {
        okhttp3.Call localVarCall = factFindersPostPopulateByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a new Populated Fact Finder.&lt;br /&gt;                Requirements: A householdId and list of modules must be provided.&lt;br /&gt;                Purpose: Creation of a Fact Finder.
     * @param model The Household the Fact Finder will belong to and the modules that are available.               Optional PlanId to populate from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostPopulateByModelAsync(FactFinderPopulatableEntityModel model, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersPostPopulateByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersPostSnapshotsByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to create the Fact Finder Snapshot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostSnapshotsByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{factFinderId}/Snapshots"
            .replace("{" + "factFinderId" + "}", localVarApiClient.escapeString(factFinderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersPostSnapshotsByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling factFindersPostSnapshotsByFactfinderid(Async)");
        }

        return factFindersPostSnapshotsByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: The operation creates a Snapshot of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to compare the current fact finder to a snapshot prior to acceptance.
     * @param factFinderId The ID of the Fact Finder used to create the Fact Finder Snapshot (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public Object factFindersPostSnapshotsByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<Object> localVarResp = factFindersPostSnapshotsByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Snapshot of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to compare the current fact finder to a snapshot prior to acceptance.
     * @param factFinderId The ID of the Fact Finder used to create the Fact Finder Snapshot (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> factFindersPostSnapshotsByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = factFindersPostSnapshotsByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Snapshot of a Fact Finder.&lt;br /&gt;                Purpose: Allows for advisors to compare the current fact finder to a snapshot prior to acceptance.
     * @param factFinderId The ID of the Fact Finder used to create the Fact Finder Snapshot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPostSnapshotsByFactfinderidAsync(Integer factFinderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersPostSnapshotsByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersPutByIdModel
     * @param id The existing Fact Finder ID used to identify which Fact Finder to update (required)
     * @param model The Fact Finder to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPutByIdModelCall(Integer id, FactFinderModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersPutByIdModelValidateBeforeCall(Integer id, FactFinderModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFindersPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling factFindersPutByIdModel(Async)");
        }

        return factFindersPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Fact Finder.&lt;br /&gt;                Purpose: Allows for the updating of a Fact Finder.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to update (required)
     * @param model The Fact Finder to be updated (required)
     * @return FactFinderWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderWithIdModel factFindersPutByIdModel(Integer id, FactFinderModel model) throws ApiException {
        ApiResponse<FactFinderWithIdModel> localVarResp = factFindersPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Fact Finder.&lt;br /&gt;                Purpose: Allows for the updating of a Fact Finder.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to update (required)
     * @param model The Fact Finder to be updated (required)
     * @return ApiResponse&lt;FactFinderWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderWithIdModel> factFindersPutByIdModelWithHttpInfo(Integer id, FactFinderModel model) throws ApiException {
        okhttp3.Call localVarCall = factFindersPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Fact Finder.&lt;br /&gt;                Purpose: Allows for the updating of a Fact Finder.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to update (required)
     * @param model The Fact Finder to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPutByIdModelAsync(Integer id, FactFinderModel model, final ApiCallback<FactFinderWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for factFindersPutPopulateFactFinderByIdModel
     * @param id The existing Fact Finder ID used to identify which Fact Finder to populate. (required)
     * @param model The plan to populate a fact finder from. If not provided, the client id will be inferred. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fact Finder was successfully populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Fact Finder already populated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPutPopulateFactFinderByIdModelCall(Integer id, FactFinderPopulationModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/FactFinders/{id}/Populate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call factFindersPutPopulateFactFinderByIdModelValidateBeforeCall(Integer id, FactFinderPopulationModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factFindersPutPopulateFactFinderByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling factFindersPutPopulateFactFinderByIdModel(Async)");
        }

        return factFindersPutPopulateFactFinderByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation populates a fact finder.&lt;br /&gt;                Purpose: Allows for the population of a Fact Finder based on a NaviPlan plan or client. This                         operation cannot be performed on a Fact Finder more than once.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to populate. (required)
     * @param model The plan to populate a fact finder from. If not provided, the client id will be inferred. (required)
     * @return FactFinderWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fact Finder was successfully populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Fact Finder already populated. </td><td>  -  </td></tr>
     </table>
     */
    public FactFinderWithIdModel factFindersPutPopulateFactFinderByIdModel(Integer id, FactFinderPopulationModel model) throws ApiException {
        ApiResponse<FactFinderWithIdModel> localVarResp = factFindersPutPopulateFactFinderByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation populates a fact finder.&lt;br /&gt;                Purpose: Allows for the population of a Fact Finder based on a NaviPlan plan or client. This                         operation cannot be performed on a Fact Finder more than once.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to populate. (required)
     * @param model The plan to populate a fact finder from. If not provided, the client id will be inferred. (required)
     * @return ApiResponse&lt;FactFinderWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fact Finder was successfully populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Fact Finder already populated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FactFinderWithIdModel> factFindersPutPopulateFactFinderByIdModelWithHttpInfo(Integer id, FactFinderPopulationModel model) throws ApiException {
        okhttp3.Call localVarCall = factFindersPutPopulateFactFinderByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation populates a fact finder.&lt;br /&gt;                Purpose: Allows for the population of a Fact Finder based on a NaviPlan plan or client. This                         operation cannot be performed on a Fact Finder more than once.
     * @param id The existing Fact Finder ID used to identify which Fact Finder to populate. (required)
     * @param model The plan to populate a fact finder from. If not provided, the client id will be inferred. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fact Finder was successfully populated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Fact Finder data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Fact Finder. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Fact Finder not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Fact Finder already populated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call factFindersPutPopulateFactFinderByIdModelAsync(Integer id, FactFinderPopulationModel model, final ApiCallback<FactFinderWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = factFindersPutPopulateFactFinderByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<FactFinderWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
