/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DemographicsDependentWithIdModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DemographicsDependentWithIdModel {
  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_DEMOGRAPHICS_ID = "demographicsId";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHICS_ID)
  private Integer demographicsId;

  public static final String SERIALIZED_NAME_DEPENDENT_ID = "dependentId";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_ID)
  private Integer dependentId;

  /**
   * Gets or Sets dependentOf
   */
  @JsonAdapter(DependentOfEnum.Adapter.class)
  public enum DependentOfEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient"),
    
    JOINT("Joint"),
    
    OTHER("Other");

    private String value;

    DependentOfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DependentOfEnum fromValue(String value) {
      for (DependentOfEnum b : DependentOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DependentOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DependentOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DependentOfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DependentOfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DependentOfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPENDENT_OF = "dependentOf";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_OF)
  private DependentOfEnum dependentOf;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  /**
   * Gets or Sets relationship
   */
  @JsonAdapter(RelationshipEnum.Adapter.class)
  public enum RelationshipEnum {
    SON("Son"),
    
    DAUGHTER("Daughter"),
    
    FOSTER_SON("FosterSon"),
    
    FOSTER_DAUGHTER("FosterDaughter"),
    
    GRANDSON("Grandson"),
    
    GRANDDAUGHTER("Granddaughter"),
    
    NEPHEW("Nephew"),
    
    NIECE("Niece"),
    
    MALE_COUSIN("MaleCousin"),
    
    FEMALE_COUSIN("FemaleCousin"),
    
    FATHER("Father"),
    
    MOTHER("Mother"),
    
    GRANDFATHER("Grandfather"),
    
    GRANDMOTHER("Grandmother"),
    
    UNCLE("Uncle"),
    
    AUNT("Aunt"),
    
    BROTHER("Brother"),
    
    SISTER("Sister"),
    
    SON_IN_LAW("SonInLaw"),
    
    DAUGHTER_IN_LAW("DaughterInLaw"),
    
    MALE_OTHER("MaleOther"),
    
    FEMALE_OTHER("FemaleOther");

    private String value;

    RelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipEnum fromValue(String value) {
      for (RelationshipEnum b : RelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private RelationshipEnum relationship;

  public DemographicsDependentWithIdModel() {
  }

  public DemographicsDependentWithIdModel birthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }


  public DemographicsDependentWithIdModel demographicsId(Integer demographicsId) {
    this.demographicsId = demographicsId;
    return this;
  }

  /**
   * Get demographicsId
   * @return demographicsId
   */
  @javax.annotation.Nullable
  public Integer getDemographicsId() {
    return demographicsId;
  }

  public void setDemographicsId(Integer demographicsId) {
    this.demographicsId = demographicsId;
  }


  public DemographicsDependentWithIdModel dependentId(Integer dependentId) {
    this.dependentId = dependentId;
    return this;
  }

  /**
   * Get dependentId
   * @return dependentId
   */
  @javax.annotation.Nullable
  public Integer getDependentId() {
    return dependentId;
  }

  public void setDependentId(Integer dependentId) {
    this.dependentId = dependentId;
  }


  public DemographicsDependentWithIdModel dependentOf(DependentOfEnum dependentOf) {
    this.dependentOf = dependentOf;
    return this;
  }

  /**
   * Get dependentOf
   * @return dependentOf
   */
  @javax.annotation.Nullable
  public DependentOfEnum getDependentOf() {
    return dependentOf;
  }

  public void setDependentOf(DependentOfEnum dependentOf) {
    this.dependentOf = dependentOf;
  }


  public DemographicsDependentWithIdModel externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public DemographicsDependentWithIdModel firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public DemographicsDependentWithIdModel lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public DemographicsDependentWithIdModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public DemographicsDependentWithIdModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  public DemographicsDependentWithIdModel relationship(RelationshipEnum relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * Get relationship
   * @return relationship
   */
  @javax.annotation.Nullable
  public RelationshipEnum getRelationship() {
    return relationship;
  }

  public void setRelationship(RelationshipEnum relationship) {
    this.relationship = relationship;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsDependentWithIdModel demographicsDependentWithIdModel = (DemographicsDependentWithIdModel) o;
    return Objects.equals(this.birthDate, demographicsDependentWithIdModel.birthDate) &&
        Objects.equals(this.demographicsId, demographicsDependentWithIdModel.demographicsId) &&
        Objects.equals(this.dependentId, demographicsDependentWithIdModel.dependentId) &&
        Objects.equals(this.dependentOf, demographicsDependentWithIdModel.dependentOf) &&
        Objects.equals(this.externalDestinationId, demographicsDependentWithIdModel.externalDestinationId) &&
        Objects.equals(this.firstName, demographicsDependentWithIdModel.firstName) &&
        Objects.equals(this.lastName, demographicsDependentWithIdModel.lastName) &&
        Objects.equals(this.links, demographicsDependentWithIdModel.links) &&
        Objects.equals(this.relationship, demographicsDependentWithIdModel.relationship);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthDate, demographicsId, dependentId, dependentOf, externalDestinationId, firstName, lastName, links, relationship);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsDependentWithIdModel {\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    demographicsId: ").append(toIndentedString(demographicsId)).append("\n");
    sb.append("    dependentId: ").append(toIndentedString(dependentId)).append("\n");
    sb.append("    dependentOf: ").append(toIndentedString(dependentOf)).append("\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birthDate");
    openapiFields.add("demographicsId");
    openapiFields.add("dependentId");
    openapiFields.add("dependentOf");
    openapiFields.add("externalDestinationId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("links");
    openapiFields.add("relationship");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DemographicsDependentWithIdModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DemographicsDependentWithIdModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DemographicsDependentWithIdModel is not found in the empty JSON string", DemographicsDependentWithIdModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DemographicsDependentWithIdModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DemographicsDependentWithIdModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dependentOf") != null && !jsonObj.get("dependentOf").isJsonNull()) && !jsonObj.get("dependentOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependentOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependentOf").toString()));
      }
      // validate the optional field `dependentOf`
      if (jsonObj.get("dependentOf") != null && !jsonObj.get("dependentOf").isJsonNull()) {
        DependentOfEnum.validateJsonElement(jsonObj.get("dependentOf"));
      }
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) && !jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      // validate the optional field `relationship`
      if (jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) {
        RelationshipEnum.validateJsonElement(jsonObj.get("relationship"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DemographicsDependentWithIdModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DemographicsDependentWithIdModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DemographicsDependentWithIdModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DemographicsDependentWithIdModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DemographicsDependentWithIdModel>() {
           @Override
           public void write(JsonWriter out, DemographicsDependentWithIdModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DemographicsDependentWithIdModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DemographicsDependentWithIdModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DemographicsDependentWithIdModel
   * @throws IOException if the JSON string is invalid with respect to DemographicsDependentWithIdModel
   */
  public static DemographicsDependentWithIdModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DemographicsDependentWithIdModel.class);
  }

  /**
   * Convert an instance of DemographicsDependentWithIdModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

