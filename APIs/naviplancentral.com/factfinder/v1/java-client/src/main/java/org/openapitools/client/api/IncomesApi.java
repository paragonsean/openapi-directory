/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IncomeModel;
import org.openapitools.client.model.IncomeWithIdModel;
import org.openapitools.client.model.IncomesModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncomesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IncomesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncomesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for incomesDeleteById
     * @param id The Income ID used to identify which Income to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Incomes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomesDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling incomesDeleteById(Async)");
        }

        return incomesDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes an Income tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Income from a Fact Finder.
     * @param id The Income ID used to identify which Income to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public void incomesDeleteById(Integer id) throws ApiException {
        incomesDeleteByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes an Income tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Income from a Fact Finder.
     * @param id The Income ID used to identify which Income to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> incomesDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = incomesDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes an Income tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Income from a Fact Finder.
     * @param id The Income ID used to identify which Income to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesDeleteByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomesDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomesGetById
     * @param id The ID of the Income used to retreive the Income (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Incomes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomesGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling incomesGetById(Async)");
        }

        return incomesGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Income for the specified Income ID.&lt;br /&gt;                Purpose: Provides access to the Income including annual amount and start date.
     * @param id The ID of the Income used to retreive the Income (required)
     * @return IncomeWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public IncomeWithIdModel incomesGetById(Integer id) throws ApiException {
        ApiResponse<IncomeWithIdModel> localVarResp = incomesGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Income for the specified Income ID.&lt;br /&gt;                Purpose: Provides access to the Income including annual amount and start date.
     * @param id The ID of the Income used to retreive the Income (required)
     * @return ApiResponse&lt;IncomeWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomeWithIdModel> incomesGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = incomesGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Income for the specified Income ID.&lt;br /&gt;                Purpose: Provides access to the Income including annual amount and start date.
     * @param id The ID of the Income used to retreive the Income (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesGetByIdAsync(Integer id, final ApiCallback<IncomeWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomesGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomesGetIncomesByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesGetIncomesByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Incomes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomesGetIncomesByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling incomesGetIncomesByFactFinderIdByFactfinderid(Async)");
        }

        return incomesGetIncomesByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes including annual amount and start date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @return IncomesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public IncomesModel incomesGetIncomesByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<IncomesModel> localVarResp = incomesGetIncomesByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes including annual amount and start date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @return ApiResponse&lt;IncomesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomesModel> incomesGetIncomesByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = incomesGetIncomesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<IncomesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Incomes for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Incomes including annual amount and start date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Incomes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesGetIncomesByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<IncomesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomesGetIncomesByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<IncomesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomesPostByModel
     * @param model The Income to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesPostByModelCall(IncomeModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Incomes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomesPostByModelValidateBeforeCall(IncomeModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling incomesPostByModel(Async)");
        }

        return incomesPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates an Income.&lt;br /&gt;                Purpose: Allows for creation of Incomes on a Fact Finder.
     * @param model The Income to be added to the Fact Finder (required)
     * @return IncomeWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public IncomeWithIdModel incomesPostByModel(IncomeModel model) throws ApiException {
        ApiResponse<IncomeWithIdModel> localVarResp = incomesPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates an Income.&lt;br /&gt;                Purpose: Allows for creation of Incomes on a Fact Finder.
     * @param model The Income to be added to the Fact Finder (required)
     * @return ApiResponse&lt;IncomeWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomeWithIdModel> incomesPostByModelWithHttpInfo(IncomeModel model) throws ApiException {
        okhttp3.Call localVarCall = incomesPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates an Income.&lt;br /&gt;                Purpose: Allows for creation of Incomes on a Fact Finder.
     * @param model The Income to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesPostByModelAsync(IncomeModel model, final ApiCallback<IncomeWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomesPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomesPutByIdModel
     * @param id The existing Income ID used to identify which Income to update (required)
     * @param model The Income to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesPutByIdModelCall(Integer id, IncomeModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Incomes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomesPutByIdModelValidateBeforeCall(Integer id, IncomeModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling incomesPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling incomesPutByIdModel(Async)");
        }

        return incomesPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates an Income.&lt;br /&gt;                Purpose: Allows for complete replacement of an Income on a Fact Finder.
     * @param id The existing Income ID used to identify which Income to update (required)
     * @param model The Income to be updated on a Fact Finder (required)
     * @return IncomeWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public IncomeWithIdModel incomesPutByIdModel(Integer id, IncomeModel model) throws ApiException {
        ApiResponse<IncomeWithIdModel> localVarResp = incomesPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates an Income.&lt;br /&gt;                Purpose: Allows for complete replacement of an Income on a Fact Finder.
     * @param id The existing Income ID used to identify which Income to update (required)
     * @param model The Income to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;IncomeWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomeWithIdModel> incomesPutByIdModelWithHttpInfo(Integer id, IncomeModel model) throws ApiException {
        okhttp3.Call localVarCall = incomesPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates an Income.&lt;br /&gt;                Purpose: Allows for complete replacement of an Income on a Fact Finder.
     * @param id The existing Income ID used to identify which Income to update (required)
     * @param model The Income to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Income data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Income. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Income not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomesPutByIdModelAsync(Integer id, IncomeModel model, final ApiCallback<IncomeWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomesPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<IncomeWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
