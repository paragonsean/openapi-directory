/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DemographicsDependentModel;
import org.openapitools.client.model.DemographicsDependentWithIdModel;
import org.openapitools.client.model.DemographicsDependentsModel;
import org.openapitools.client.model.DemographicsModel;
import org.openapitools.client.model.DemographicsWithIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DemographicsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DemographicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DemographicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for demographicsDeleteDependentByDemographicidId
     * @param demographicId The ID of the Demographic information used to identify which Dependent to remove (required)
     * @param id The Dependent ID used to identify which Dependent to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsDeleteDependentByDemographicidIdCall(Integer demographicId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Demographics/{demographicId}/Dependents/{id}"
            .replace("{" + "demographicId" + "}", localVarApiClient.escapeString(demographicId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsDeleteDependentByDemographicidIdValidateBeforeCall(Integer demographicId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'demographicId' is set
        if (demographicId == null) {
            throw new ApiException("Missing the required parameter 'demographicId' when calling demographicsDeleteDependentByDemographicidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demographicsDeleteDependentByDemographicidId(Async)");
        }

        return demographicsDeleteDependentByDemographicidIdCall(demographicId, id, _callback);

    }

    /**
     * 
     * Description: The operation removes a Dependent tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Dependent from a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to remove (required)
     * @param id The Dependent ID used to identify which Dependent to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public void demographicsDeleteDependentByDemographicidId(Integer demographicId, Integer id) throws ApiException {
        demographicsDeleteDependentByDemographicidIdWithHttpInfo(demographicId, id);
    }

    /**
     * 
     * Description: The operation removes a Dependent tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Dependent from a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to remove (required)
     * @param id The Dependent ID used to identify which Dependent to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> demographicsDeleteDependentByDemographicidIdWithHttpInfo(Integer demographicId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = demographicsDeleteDependentByDemographicidIdValidateBeforeCall(demographicId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes a Dependent tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Dependent from a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to remove (required)
     * @param id The Dependent ID used to identify which Dependent to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsDeleteDependentByDemographicidIdAsync(Integer demographicId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsDeleteDependentByDemographicidIdValidateBeforeCall(demographicId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsGetById
     * @param id The ID of the Demographic information used to retreive the Demographic information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Demographics/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demographicsGetById(Async)");
        }

        return demographicsGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves Demographic information for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param id The ID of the Demographic information used to retreive the Demographic information (required)
     * @return DemographicsWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsWithIdModel demographicsGetById(Integer id) throws ApiException {
        ApiResponse<DemographicsWithIdModel> localVarResp = demographicsGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves Demographic information for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param id The ID of the Demographic information used to retreive the Demographic information (required)
     * @return ApiResponse&lt;DemographicsWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsWithIdModel> demographicsGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = demographicsGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves Demographic information for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param id The ID of the Demographic information used to retreive the Demographic information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetByIdAsync(Integer id, final ApiCallback<DemographicsWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsGetDemographicsByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Demographic information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDemographicsByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Demographics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsGetDemographicsByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling demographicsGetDemographicsByFactFinderIdByFactfinderid(Async)");
        }

        return demographicsGetDemographicsByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Demographic information for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param factFinderId The ID of the Fact Finder used to retrieve Demographic information (required)
     * @return DemographicsWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsWithIdModel demographicsGetDemographicsByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<DemographicsWithIdModel> localVarResp = demographicsGetDemographicsByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Demographic information for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param factFinderId The ID of the Fact Finder used to retrieve Demographic information (required)
     * @return ApiResponse&lt;DemographicsWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsWithIdModel> demographicsGetDemographicsByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = demographicsGetDemographicsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Demographic information for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Demographic information including city and state.
     * @param factFinderId The ID of the Fact Finder used to retrieve Demographic information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDemographicsByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<DemographicsWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsGetDemographicsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsGetDependentByDemographicidId
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param id The ID of the Dependent used to retreive the Dependent (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDependentByDemographicidIdCall(Integer demographicId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Demographics/{demographicId}/Dependents/{id}"
            .replace("{" + "demographicId" + "}", localVarApiClient.escapeString(demographicId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsGetDependentByDemographicidIdValidateBeforeCall(Integer demographicId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'demographicId' is set
        if (demographicId == null) {
            throw new ApiException("Missing the required parameter 'demographicId' when calling demographicsGetDependentByDemographicidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demographicsGetDependentByDemographicidId(Async)");
        }

        return demographicsGetDependentByDemographicidIdCall(demographicId, id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Dependent for the specified Dependent ID.&lt;br /&gt;                Purpose: Provides access to the Dependent including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param id The ID of the Dependent used to retreive the Dependent (required)
     * @return DemographicsDependentWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsDependentWithIdModel demographicsGetDependentByDemographicidId(Integer demographicId, Integer id) throws ApiException {
        ApiResponse<DemographicsDependentWithIdModel> localVarResp = demographicsGetDependentByDemographicidIdWithHttpInfo(demographicId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Dependent for the specified Dependent ID.&lt;br /&gt;                Purpose: Provides access to the Dependent including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param id The ID of the Dependent used to retreive the Dependent (required)
     * @return ApiResponse&lt;DemographicsDependentWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsDependentWithIdModel> demographicsGetDependentByDemographicidIdWithHttpInfo(Integer demographicId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = demographicsGetDependentByDemographicidIdValidateBeforeCall(demographicId, id, null);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Dependent for the specified Dependent ID.&lt;br /&gt;                Purpose: Provides access to the Dependent including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param id The ID of the Dependent used to retreive the Dependent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDependentByDemographicidIdAsync(Integer demographicId, Integer id, final ApiCallback<DemographicsDependentWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsGetDependentByDemographicidIdValidateBeforeCall(demographicId, id, _callback);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsGetDependentsByDemographicid
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDependentsByDemographicidCall(Integer demographicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Demographics/{demographicId}/Dependents"
            .replace("{" + "demographicId" + "}", localVarApiClient.escapeString(demographicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsGetDependentsByDemographicidValidateBeforeCall(Integer demographicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'demographicId' is set
        if (demographicId == null) {
            throw new ApiException("Missing the required parameter 'demographicId' when calling demographicsGetDependentsByDemographicid(Async)");
        }

        return demographicsGetDependentsByDemographicidCall(demographicId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Dependents for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Dependents including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @return DemographicsDependentsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsDependentsModel demographicsGetDependentsByDemographicid(Integer demographicId) throws ApiException {
        ApiResponse<DemographicsDependentsModel> localVarResp = demographicsGetDependentsByDemographicidWithHttpInfo(demographicId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Dependents for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Dependents including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @return ApiResponse&lt;DemographicsDependentsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsDependentsModel> demographicsGetDependentsByDemographicidWithHttpInfo(Integer demographicId) throws ApiException {
        okhttp3.Call localVarCall = demographicsGetDependentsByDemographicidValidateBeforeCall(demographicId, null);
        Type localVarReturnType = new TypeToken<DemographicsDependentsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Dependents for the specified Demographic information ID.&lt;br /&gt;                Purpose: Provides access to the Dependents including first and last name.
     * @param demographicId The ID of the Demographic information used to retrieve Dependents (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsGetDependentsByDemographicidAsync(Integer demographicId, final ApiCallback<DemographicsDependentsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsGetDependentsByDemographicidValidateBeforeCall(demographicId, _callback);
        Type localVarReturnType = new TypeToken<DemographicsDependentsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsPostByDemographicidModel
     * @param demographicId The ID of the Demographic information to add the Dependent to (required)
     * @param model The Dependent to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPostByDemographicidModelCall(Integer demographicId, DemographicsDependentModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Demographics/{demographicId}/Dependents"
            .replace("{" + "demographicId" + "}", localVarApiClient.escapeString(demographicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsPostByDemographicidModelValidateBeforeCall(Integer demographicId, DemographicsDependentModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'demographicId' is set
        if (demographicId == null) {
            throw new ApiException("Missing the required parameter 'demographicId' when calling demographicsPostByDemographicidModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling demographicsPostByDemographicidModel(Async)");
        }

        return demographicsPostByDemographicidModelCall(demographicId, model, _callback);

    }

    /**
     * 
     * Description: The operation creates a Dependent.&lt;br /&gt;                Purpose: Allows for creation of Dependents on a Fact Finder.
     * @param demographicId The ID of the Demographic information to add the Dependent to (required)
     * @param model The Dependent to be added to the Fact Finder (required)
     * @return DemographicsDependentWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsDependentWithIdModel demographicsPostByDemographicidModel(Integer demographicId, DemographicsDependentModel model) throws ApiException {
        ApiResponse<DemographicsDependentWithIdModel> localVarResp = demographicsPostByDemographicidModelWithHttpInfo(demographicId, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Dependent.&lt;br /&gt;                Purpose: Allows for creation of Dependents on a Fact Finder.
     * @param demographicId The ID of the Demographic information to add the Dependent to (required)
     * @param model The Dependent to be added to the Fact Finder (required)
     * @return ApiResponse&lt;DemographicsDependentWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsDependentWithIdModel> demographicsPostByDemographicidModelWithHttpInfo(Integer demographicId, DemographicsDependentModel model) throws ApiException {
        okhttp3.Call localVarCall = demographicsPostByDemographicidModelValidateBeforeCall(demographicId, model, null);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Dependent.&lt;br /&gt;                Purpose: Allows for creation of Dependents on a Fact Finder.
     * @param demographicId The ID of the Demographic information to add the Dependent to (required)
     * @param model The Dependent to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPostByDemographicidModelAsync(Integer demographicId, DemographicsDependentModel model, final ApiCallback<DemographicsDependentWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsPostByDemographicidModelValidateBeforeCall(demographicId, model, _callback);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsPostByModel
     * @param model The Demographic information to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPostByModelCall(DemographicsModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Demographics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsPostByModelValidateBeforeCall(DemographicsModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling demographicsPostByModel(Async)");
        }

        return demographicsPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates Demographic information.&lt;br /&gt;                Purpose: Allows for creation of Demographic information on a Fact Finder.
     * @param model The Demographic information to be added to the Fact Finder (required)
     * @return DemographicsWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsWithIdModel demographicsPostByModel(DemographicsModel model) throws ApiException {
        ApiResponse<DemographicsWithIdModel> localVarResp = demographicsPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates Demographic information.&lt;br /&gt;                Purpose: Allows for creation of Demographic information on a Fact Finder.
     * @param model The Demographic information to be added to the Fact Finder (required)
     * @return ApiResponse&lt;DemographicsWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsWithIdModel> demographicsPostByModelWithHttpInfo(DemographicsModel model) throws ApiException {
        okhttp3.Call localVarCall = demographicsPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates Demographic information.&lt;br /&gt;                Purpose: Allows for creation of Demographic information on a Fact Finder.
     * @param model The Demographic information to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPostByModelAsync(DemographicsModel model, final ApiCallback<DemographicsWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsPutByDemographicidIdModel
     * @param demographicId The ID of the Demographic information used to identify which Dependent to update (required)
     * @param id The existing Dependent ID used to identify which Dependent to update (required)
     * @param model The Dependent to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPutByDemographicidIdModelCall(Integer demographicId, Integer id, DemographicsDependentModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Demographics/{demographicId}/Dependents/{id}"
            .replace("{" + "demographicId" + "}", localVarApiClient.escapeString(demographicId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsPutByDemographicidIdModelValidateBeforeCall(Integer demographicId, Integer id, DemographicsDependentModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'demographicId' is set
        if (demographicId == null) {
            throw new ApiException("Missing the required parameter 'demographicId' when calling demographicsPutByDemographicidIdModel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demographicsPutByDemographicidIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling demographicsPutByDemographicidIdModel(Async)");
        }

        return demographicsPutByDemographicidIdModelCall(demographicId, id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Dependent.&lt;br /&gt;                Purpose: Allows for complete replacement of a Dependent on a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to update (required)
     * @param id The existing Dependent ID used to identify which Dependent to update (required)
     * @param model The Dependent to be updated on a Fact Finder (required)
     * @return DemographicsDependentWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsDependentWithIdModel demographicsPutByDemographicidIdModel(Integer demographicId, Integer id, DemographicsDependentModel model) throws ApiException {
        ApiResponse<DemographicsDependentWithIdModel> localVarResp = demographicsPutByDemographicidIdModelWithHttpInfo(demographicId, id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Dependent.&lt;br /&gt;                Purpose: Allows for complete replacement of a Dependent on a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to update (required)
     * @param id The existing Dependent ID used to identify which Dependent to update (required)
     * @param model The Dependent to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;DemographicsDependentWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsDependentWithIdModel> demographicsPutByDemographicidIdModelWithHttpInfo(Integer demographicId, Integer id, DemographicsDependentModel model) throws ApiException {
        okhttp3.Call localVarCall = demographicsPutByDemographicidIdModelValidateBeforeCall(demographicId, id, model, null);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Dependent.&lt;br /&gt;                Purpose: Allows for complete replacement of a Dependent on a Fact Finder.
     * @param demographicId The ID of the Demographic information used to identify which Dependent to update (required)
     * @param id The existing Dependent ID used to identify which Dependent to update (required)
     * @param model The Dependent to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Dependent information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Dependent information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dependent information not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPutByDemographicidIdModelAsync(Integer demographicId, Integer id, DemographicsDependentModel model, final ApiCallback<DemographicsDependentWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsPutByDemographicidIdModelValidateBeforeCall(demographicId, id, model, _callback);
        Type localVarReturnType = new TypeToken<DemographicsDependentWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demographicsPutByIdModel
     * @param id The existing Demographic information ID used to identify which Demographic information to update (required)
     * @param model The Demographic information to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPutByIdModelCall(Integer id, DemographicsModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Demographics/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demographicsPutByIdModelValidateBeforeCall(Integer id, DemographicsModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demographicsPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling demographicsPutByIdModel(Async)");
        }

        return demographicsPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates Demographic information.&lt;br /&gt;                Purpose: Allows for complete replacement of Demographic information on a Fact Finder.
     * @param id The existing Demographic information ID used to identify which Demographic information to update (required)
     * @param model The Demographic information to be updated on a Fact Finder (required)
     * @return DemographicsWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsWithIdModel demographicsPutByIdModel(Integer id, DemographicsModel model) throws ApiException {
        ApiResponse<DemographicsWithIdModel> localVarResp = demographicsPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates Demographic information.&lt;br /&gt;                Purpose: Allows for complete replacement of Demographic information on a Fact Finder.
     * @param id The existing Demographic information ID used to identify which Demographic information to update (required)
     * @param model The Demographic information to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;DemographicsWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsWithIdModel> demographicsPutByIdModelWithHttpInfo(Integer id, DemographicsModel model) throws ApiException {
        okhttp3.Call localVarCall = demographicsPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates Demographic information.&lt;br /&gt;                Purpose: Allows for complete replacement of Demographic information on a Fact Finder.
     * @param id The existing Demographic information ID used to identify which Demographic information to update (required)
     * @param model The Demographic information to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Demographic information data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Demographic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Demographic information not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request cannot be completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demographicsPutByIdModelAsync(Integer id, DemographicsModel model, final ApiCallback<DemographicsWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = demographicsPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<DemographicsWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
