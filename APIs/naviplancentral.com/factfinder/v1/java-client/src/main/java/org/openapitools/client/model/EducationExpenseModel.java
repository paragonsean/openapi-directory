/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EducationExpenseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EducationExpenseModel {
  public static final String SERIALIZED_NAME_ANNUAL_COST = "annualCost";
  @SerializedName(SERIALIZED_NAME_ANNUAL_COST)
  private Double annualCost;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  /**
   * Gets or Sets member
   */
  @JsonAdapter(MemberEnum.Adapter.class)
  public enum MemberEnum {
    CLIENT("Client"),
    
    CO_CLIENT("CoClient"),
    
    DEPENDENT("Dependent");

    private String value;

    MemberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemberEnum fromValue(String value) {
      for (MemberEnum b : MemberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MemberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private MemberEnum member;

  public static final String SERIALIZED_NAME_MEMBER_DEPENDENT_ID = "memberDependentId";
  @SerializedName(SERIALIZED_NAME_MEMBER_DEPENDENT_ID)
  private Integer memberDependentId;

  public static final String SERIALIZED_NAME_START_YEAR = "startYear";
  @SerializedName(SERIALIZED_NAME_START_YEAR)
  private OffsetDateTime startYear;

  public static final String SERIALIZED_NAME_YEARS = "years";
  @SerializedName(SERIALIZED_NAME_YEARS)
  private Integer years;

  public EducationExpenseModel() {
  }

  public EducationExpenseModel annualCost(Double annualCost) {
    this.annualCost = annualCost;
    return this;
  }

  /**
   * Get annualCost
   * @return annualCost
   */
  @javax.annotation.Nullable
  public Double getAnnualCost() {
    return annualCost;
  }

  public void setAnnualCost(Double annualCost) {
    this.annualCost = annualCost;
  }


  public EducationExpenseModel externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public EducationExpenseModel member(MemberEnum member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public MemberEnum getMember() {
    return member;
  }

  public void setMember(MemberEnum member) {
    this.member = member;
  }


  public EducationExpenseModel memberDependentId(Integer memberDependentId) {
    this.memberDependentId = memberDependentId;
    return this;
  }

  /**
   * Get memberDependentId
   * @return memberDependentId
   */
  @javax.annotation.Nullable
  public Integer getMemberDependentId() {
    return memberDependentId;
  }

  public void setMemberDependentId(Integer memberDependentId) {
    this.memberDependentId = memberDependentId;
  }


  public EducationExpenseModel startYear(OffsetDateTime startYear) {
    this.startYear = startYear;
    return this;
  }

  /**
   * Get startYear
   * @return startYear
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartYear() {
    return startYear;
  }

  public void setStartYear(OffsetDateTime startYear) {
    this.startYear = startYear;
  }


  public EducationExpenseModel years(Integer years) {
    this.years = years;
    return this;
  }

  /**
   * Get years
   * minimum: 1
   * maximum: 99
   * @return years
   */
  @javax.annotation.Nullable
  public Integer getYears() {
    return years;
  }

  public void setYears(Integer years) {
    this.years = years;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EducationExpenseModel educationExpenseModel = (EducationExpenseModel) o;
    return Objects.equals(this.annualCost, educationExpenseModel.annualCost) &&
        Objects.equals(this.externalDestinationId, educationExpenseModel.externalDestinationId) &&
        Objects.equals(this.member, educationExpenseModel.member) &&
        Objects.equals(this.memberDependentId, educationExpenseModel.memberDependentId) &&
        Objects.equals(this.startYear, educationExpenseModel.startYear) &&
        Objects.equals(this.years, educationExpenseModel.years);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualCost, externalDestinationId, member, memberDependentId, startYear, years);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EducationExpenseModel {\n");
    sb.append("    annualCost: ").append(toIndentedString(annualCost)).append("\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    memberDependentId: ").append(toIndentedString(memberDependentId)).append("\n");
    sb.append("    startYear: ").append(toIndentedString(startYear)).append("\n");
    sb.append("    years: ").append(toIndentedString(years)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualCost");
    openapiFields.add("externalDestinationId");
    openapiFields.add("member");
    openapiFields.add("memberDependentId");
    openapiFields.add("startYear");
    openapiFields.add("years");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EducationExpenseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EducationExpenseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EducationExpenseModel is not found in the empty JSON string", EducationExpenseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EducationExpenseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EducationExpenseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
      if ((jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) && !jsonObj.get("member").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member").toString()));
      }
      // validate the optional field `member`
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        MemberEnum.validateJsonElement(jsonObj.get("member"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EducationExpenseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EducationExpenseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EducationExpenseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EducationExpenseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EducationExpenseModel>() {
           @Override
           public void write(JsonWriter out, EducationExpenseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EducationExpenseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EducationExpenseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EducationExpenseModel
   * @throws IOException if the JSON string is invalid with respect to EducationExpenseModel
   */
  public static EducationExpenseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EducationExpenseModel.class);
  }

  /**
   * Convert an instance of EducationExpenseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

