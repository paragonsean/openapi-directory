/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IEducationExpenseDomainObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IEducationGoalWithExpensesDomainObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IEducationGoalWithExpensesDomainObject {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDUCATION_EXPENSES = "educationExpenses";
  @SerializedName(SERIALIZED_NAME_EDUCATION_EXPENSES)
  private List<IEducationExpenseDomainObject> educationExpenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_EDUCATION_GOAL_ID = "educationGoalId";
  @SerializedName(SERIALIZED_NAME_EDUCATION_GOAL_ID)
  private Integer educationGoalId;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  public static final String SERIALIZED_NAME_FACT_FINDER_ID = "factFinderId";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_ID)
  private Integer factFinderId;

  public static final String SERIALIZED_NAME_PROJECTED_COST = "projectedCost";
  @SerializedName(SERIALIZED_NAME_PROJECTED_COST)
  private Double projectedCost;

  public IEducationGoalWithExpensesDomainObject() {
  }

  public IEducationGoalWithExpensesDomainObject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public IEducationGoalWithExpensesDomainObject educationExpenses(List<IEducationExpenseDomainObject> educationExpenses) {
    this.educationExpenses = educationExpenses;
    return this;
  }

  public IEducationGoalWithExpensesDomainObject addEducationExpensesItem(IEducationExpenseDomainObject educationExpensesItem) {
    if (this.educationExpenses == null) {
      this.educationExpenses = new ArrayList<>();
    }
    this.educationExpenses.add(educationExpensesItem);
    return this;
  }

  /**
   * Get educationExpenses
   * @return educationExpenses
   */
  @javax.annotation.Nullable
  public List<IEducationExpenseDomainObject> getEducationExpenses() {
    return educationExpenses;
  }

  public void setEducationExpenses(List<IEducationExpenseDomainObject> educationExpenses) {
    this.educationExpenses = educationExpenses;
  }


  public IEducationGoalWithExpensesDomainObject educationGoalId(Integer educationGoalId) {
    this.educationGoalId = educationGoalId;
    return this;
  }

  /**
   * Get educationGoalId
   * @return educationGoalId
   */
  @javax.annotation.Nullable
  public Integer getEducationGoalId() {
    return educationGoalId;
  }

  public void setEducationGoalId(Integer educationGoalId) {
    this.educationGoalId = educationGoalId;
  }


  public IEducationGoalWithExpensesDomainObject externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public IEducationGoalWithExpensesDomainObject factFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
    return this;
  }

  /**
   * Get factFinderId
   * @return factFinderId
   */
  @javax.annotation.Nullable
  public Integer getFactFinderId() {
    return factFinderId;
  }

  public void setFactFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
  }


  public IEducationGoalWithExpensesDomainObject projectedCost(Double projectedCost) {
    this.projectedCost = projectedCost;
    return this;
  }

  /**
   * Get projectedCost
   * @return projectedCost
   */
  @javax.annotation.Nullable
  public Double getProjectedCost() {
    return projectedCost;
  }

  public void setProjectedCost(Double projectedCost) {
    this.projectedCost = projectedCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IEducationGoalWithExpensesDomainObject ieducationGoalWithExpensesDomainObject = (IEducationGoalWithExpensesDomainObject) o;
    return Objects.equals(this.description, ieducationGoalWithExpensesDomainObject.description) &&
        Objects.equals(this.educationExpenses, ieducationGoalWithExpensesDomainObject.educationExpenses) &&
        Objects.equals(this.educationGoalId, ieducationGoalWithExpensesDomainObject.educationGoalId) &&
        Objects.equals(this.externalDestinationId, ieducationGoalWithExpensesDomainObject.externalDestinationId) &&
        Objects.equals(this.factFinderId, ieducationGoalWithExpensesDomainObject.factFinderId) &&
        Objects.equals(this.projectedCost, ieducationGoalWithExpensesDomainObject.projectedCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, educationExpenses, educationGoalId, externalDestinationId, factFinderId, projectedCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IEducationGoalWithExpensesDomainObject {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    educationExpenses: ").append(toIndentedString(educationExpenses)).append("\n");
    sb.append("    educationGoalId: ").append(toIndentedString(educationGoalId)).append("\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    factFinderId: ").append(toIndentedString(factFinderId)).append("\n");
    sb.append("    projectedCost: ").append(toIndentedString(projectedCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("educationExpenses");
    openapiFields.add("educationGoalId");
    openapiFields.add("externalDestinationId");
    openapiFields.add("factFinderId");
    openapiFields.add("projectedCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IEducationGoalWithExpensesDomainObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IEducationGoalWithExpensesDomainObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IEducationGoalWithExpensesDomainObject is not found in the empty JSON string", IEducationGoalWithExpensesDomainObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IEducationGoalWithExpensesDomainObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IEducationGoalWithExpensesDomainObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("educationExpenses") != null && !jsonObj.get("educationExpenses").isJsonNull()) {
        JsonArray jsonArrayeducationExpenses = jsonObj.getAsJsonArray("educationExpenses");
        if (jsonArrayeducationExpenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educationExpenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educationExpenses` to be an array in the JSON string but got `%s`", jsonObj.get("educationExpenses").toString()));
          }

          // validate the optional field `educationExpenses` (array)
          for (int i = 0; i < jsonArrayeducationExpenses.size(); i++) {
            IEducationExpenseDomainObject.validateJsonElement(jsonArrayeducationExpenses.get(i));
          };
        }
      }
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IEducationGoalWithExpensesDomainObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IEducationGoalWithExpensesDomainObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IEducationGoalWithExpensesDomainObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IEducationGoalWithExpensesDomainObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IEducationGoalWithExpensesDomainObject>() {
           @Override
           public void write(JsonWriter out, IEducationGoalWithExpensesDomainObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IEducationGoalWithExpensesDomainObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IEducationGoalWithExpensesDomainObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IEducationGoalWithExpensesDomainObject
   * @throws IOException if the JSON string is invalid with respect to IEducationGoalWithExpensesDomainObject
   */
  public static IEducationGoalWithExpensesDomainObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IEducationGoalWithExpensesDomainObject.class);
  }

  /**
   * Convert an instance of IEducationGoalWithExpensesDomainObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

