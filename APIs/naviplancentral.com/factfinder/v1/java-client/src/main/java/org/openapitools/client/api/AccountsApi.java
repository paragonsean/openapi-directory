/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountHoldingModel;
import org.openapitools.client.model.AccountHoldingWithIdModel;
import org.openapitools.client.model.AccountHoldingsModel;
import org.openapitools.client.model.AccountHoldingsWithoutIdModel;
import org.openapitools.client.model.AccountModel;
import org.openapitools.client.model.AccountWithIdModel;
import org.openapitools.client.model.AccountsModel;
import org.openapitools.client.model.SavingsStrategiesModel;
import org.openapitools.client.model.SavingsStrategyModel;
import org.openapitools.client.model.SavingsStrategyWithIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsDeleteAccountById
     * @param id The Account ID used to identify which Account to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAccountByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteAccountByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsDeleteAccountById(Async)");
        }

        return accountsDeleteAccountByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes an Account tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Account from a Fact Finder.
     * @param id The Account ID used to identify which Account to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDeleteAccountById(Integer id) throws ApiException {
        accountsDeleteAccountByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes an Account tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Account from a Fact Finder.
     * @param id The Account ID used to identify which Account to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteAccountByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteAccountByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes an Account tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of an Account from a Fact Finder.
     * @param id The Account ID used to identify which Account to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAccountByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteAccountByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDeleteAccountHoldingByAccountidId
     * @param accountId The ID of the Account used to retrieve the Account data that the specified holding belongs to. (required)
     * @param id The ID of the Account Holding used to delete the Account Holding (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAccountHoldingByAccountidIdCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteAccountHoldingByAccountidIdValidateBeforeCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsDeleteAccountHoldingByAccountidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsDeleteAccountHoldingByAccountidId(Async)");
        }

        return accountsDeleteAccountHoldingByAccountidIdCall(accountId, id, _callback);

    }

    /**
     * 
     * Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides the ability to remove individual holdings from a specified Account.
     * @param accountId The ID of the Account used to retrieve the Account data that the specified holding belongs to. (required)
     * @param id The ID of the Account Holding used to delete the Account Holding (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDeleteAccountHoldingByAccountidId(Integer accountId, Integer id) throws ApiException {
        accountsDeleteAccountHoldingByAccountidIdWithHttpInfo(accountId, id);
    }

    /**
     * 
     * Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides the ability to remove individual holdings from a specified Account.
     * @param accountId The ID of the Account used to retrieve the Account data that the specified holding belongs to. (required)
     * @param id The ID of the Account Holding used to delete the Account Holding (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteAccountHoldingByAccountidIdWithHttpInfo(Integer accountId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteAccountHoldingByAccountidIdValidateBeforeCall(accountId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides the ability to remove individual holdings from a specified Account.
     * @param accountId The ID of the Account used to retrieve the Account data that the specified holding belongs to. (required)
     * @param id The ID of the Account Holding used to delete the Account Holding (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAccountHoldingByAccountidIdAsync(Integer accountId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteAccountHoldingByAccountidIdValidateBeforeCall(accountId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDeleteSavingsStrategiesByAccountid
     * @param accountId Id of the account that holds the savings strategies (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteSavingsStrategiesByAccountidCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteSavingsStrategiesByAccountidValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsDeleteSavingsStrategiesByAccountid(Async)");
        }

        return accountsDeleteSavingsStrategiesByAccountidCall(accountId, _callback);

    }

    /**
     * 
     * Deletes all savings strategies tied to an account
     * @param accountId Id of the account that holds the savings strategies (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDeleteSavingsStrategiesByAccountid(Integer accountId) throws ApiException {
        accountsDeleteSavingsStrategiesByAccountidWithHttpInfo(accountId);
    }

    /**
     * 
     * Deletes all savings strategies tied to an account
     * @param accountId Id of the account that holds the savings strategies (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteSavingsStrategiesByAccountidWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteSavingsStrategiesByAccountidValidateBeforeCall(accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes all savings strategies tied to an account
     * @param accountId Id of the account that holds the savings strategies (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteSavingsStrategiesByAccountidAsync(Integer accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteSavingsStrategiesByAccountidValidateBeforeCall(accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDeleteSavingsStrategyByAccountidId
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteSavingsStrategyByAccountidIdCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteSavingsStrategyByAccountidIdValidateBeforeCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsDeleteSavingsStrategyByAccountidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsDeleteSavingsStrategyByAccountidId(Async)");
        }

        return accountsDeleteSavingsStrategyByAccountidIdCall(accountId, id, _callback);

    }

    /**
     * 
     * Deletes a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDeleteSavingsStrategyByAccountidId(Integer accountId, Integer id) throws ApiException {
        accountsDeleteSavingsStrategyByAccountidIdWithHttpInfo(accountId, id);
    }

    /**
     * 
     * Deletes a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteSavingsStrategyByAccountidIdWithHttpInfo(Integer accountId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteSavingsStrategyByAccountidIdValidateBeforeCall(accountId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteSavingsStrategyByAccountidIdAsync(Integer accountId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteSavingsStrategyByAccountidIdValidateBeforeCall(accountId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetAccountHoldingByAccountidId
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param id The ID of the Account Holding used to retrieve the Account Holding data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountHoldingByAccountidIdCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetAccountHoldingByAccountidIdValidateBeforeCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsGetAccountHoldingByAccountidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsGetAccountHoldingByAccountidId(Async)");
        }

        return accountsGetAccountHoldingByAccountidIdCall(accountId, id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides access to the Account Holding information including description and market value.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param id The ID of the Account Holding used to retrieve the Account Holding data (required)
     * @return AccountHoldingWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountHoldingWithIdModel accountsGetAccountHoldingByAccountidId(Integer accountId, Integer id) throws ApiException {
        ApiResponse<AccountHoldingWithIdModel> localVarResp = accountsGetAccountHoldingByAccountidIdWithHttpInfo(accountId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides access to the Account Holding information including description and market value.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param id The ID of the Account Holding used to retrieve the Account Holding data (required)
     * @return ApiResponse&lt;AccountHoldingWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHoldingWithIdModel> accountsGetAccountHoldingByAccountidIdWithHttpInfo(Integer accountId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsGetAccountHoldingByAccountidIdValidateBeforeCall(accountId, id, null);
        Type localVarReturnType = new TypeToken<AccountHoldingWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.&lt;br /&gt;                Purpose: Provides access to the Account Holding information including description and market value.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param id The ID of the Account Holding used to retrieve the Account Holding data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountHoldingByAccountidIdAsync(Integer accountId, Integer id, final ApiCallback<AccountHoldingWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetAccountHoldingByAccountidIdValidateBeforeCall(accountId, id, _callback);
        Type localVarReturnType = new TypeToken<AccountHoldingWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetAccountHoldingsByAccountid
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountHoldingsByAccountidCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetAccountHoldingsByAccountidValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsGetAccountHoldingsByAccountid(Async)");
        }

        return accountsGetAccountHoldingsByAccountidCall(accountId, _callback);

    }

    /**
     * 
     * Retrieves all holdings in the specified Account.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @return AccountHoldingsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountHoldingsModel accountsGetAccountHoldingsByAccountid(Integer accountId) throws ApiException {
        ApiResponse<AccountHoldingsModel> localVarResp = accountsGetAccountHoldingsByAccountidWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all holdings in the specified Account.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @return ApiResponse&lt;AccountHoldingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHoldingsModel> accountsGetAccountHoldingsByAccountidWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = accountsGetAccountHoldingsByAccountidValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountHoldingsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all holdings in the specified Account.
     * @param accountId The ID of the Account used to retrieve the Account Holding data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountHoldingsByAccountidAsync(Integer accountId, final ApiCallback<AccountHoldingsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetAccountHoldingsByAccountidValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountHoldingsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidCall(Integer factFinderId, String externalSourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        if (externalSourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalSourceId", externalSourceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidValidateBeforeCall(Integer factFinderId, String externalSourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid(Async)");
        }

        return accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidCall(factFinderId, externalSourceId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @return AccountsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountsModel accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceid(Integer factFinderId, String externalSourceId) throws ApiException {
        ApiResponse<AccountsModel> localVarResp = accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidWithHttpInfo(factFinderId, externalSourceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @return ApiResponse&lt;AccountsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsModel> accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidWithHttpInfo(Integer factFinderId, String externalSourceId) throws ApiException {
        okhttp3.Call localVarCall = accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidValidateBeforeCall(factFinderId, externalSourceId, null);
        Type localVarReturnType = new TypeToken<AccountsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param factFinderId The ID of the Fact Finder used to retrieve Accounts (required)
     * @param externalSourceId The external ID used to filter Accounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidAsync(Integer factFinderId, String externalSourceId, final ApiCallback<AccountsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetAccountsByFactFinderIdByFactfinderidExternalsourceidValidateBeforeCall(factFinderId, externalSourceId, _callback);
        Type localVarReturnType = new TypeToken<AccountsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetById
     * @param id The ID of the Account used to retrieve the Account data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsGetById(Async)");
        }

        return accountsGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Account for the specified Account ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param id The ID of the Account used to retrieve the Account data (required)
     * @return AccountWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountWithIdModel accountsGetById(Integer id) throws ApiException {
        ApiResponse<AccountWithIdModel> localVarResp = accountsGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Account for the specified Account ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param id The ID of the Account used to retrieve the Account data (required)
     * @return ApiResponse&lt;AccountWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountWithIdModel> accountsGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Account for the specified Account ID.&lt;br /&gt;                Purpose: Provides access to the Account information including description and market value.
     * @param id The ID of the Account used to retrieve the Account data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetByIdAsync(Integer id, final ApiCallback<AccountWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param id The id of the savings strategy to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdValidateBeforeCall(Integer accountId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(Async)");
        }

        return accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdCall(accountId, id, _callback);

    }

    /**
     * 
     * Get a specific savings strategy for an account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param id The id of the savings strategy to get (required)
     * @return SavingsStrategyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public SavingsStrategyWithIdModel accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId(Integer accountId, Integer id) throws ApiException {
        ApiResponse<SavingsStrategyWithIdModel> localVarResp = accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdWithHttpInfo(accountId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a specific savings strategy for an account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param id The id of the savings strategy to get (required)
     * @return ApiResponse&lt;SavingsStrategyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavingsStrategyWithIdModel> accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdWithHttpInfo(Integer accountId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdValidateBeforeCall(accountId, id, null);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a specific savings strategy for an account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param id The id of the savings strategy to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdAsync(Integer accountId, Integer id, final ApiCallback<SavingsStrategyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidIdValidateBeforeCall(accountId, id, _callback);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGetSavingsStrategiesByAccountIdByAccountid
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetSavingsStrategiesByAccountIdByAccountidCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetSavingsStrategiesByAccountIdByAccountidValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsGetSavingsStrategiesByAccountIdByAccountid(Async)");
        }

        return accountsGetSavingsStrategiesByAccountIdByAccountidCall(accountId, _callback);

    }

    /**
     * 
     * Get all of the savings strategies for a specific account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @return SavingsStrategiesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public SavingsStrategiesModel accountsGetSavingsStrategiesByAccountIdByAccountid(Integer accountId) throws ApiException {
        ApiResponse<SavingsStrategiesModel> localVarResp = accountsGetSavingsStrategiesByAccountIdByAccountidWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all of the savings strategies for a specific account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @return ApiResponse&lt;SavingsStrategiesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavingsStrategiesModel> accountsGetSavingsStrategiesByAccountIdByAccountidWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = accountsGetSavingsStrategiesByAccountIdByAccountidValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SavingsStrategiesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all of the savings strategies for a specific account
     * @param accountId The id of the account to retrieve the savings strategies from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetSavingsStrategiesByAccountIdByAccountidAsync(Integer accountId, final ApiCallback<SavingsStrategiesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetSavingsStrategiesByAccountIdByAccountidValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SavingsStrategiesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPostAccountHoldingByAccountidModel
     * @param accountId The existing Account ID used to identify which Account to add the holding to (required)
     * @param model The holding data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostAccountHoldingByAccountidModelCall(Integer accountId, AccountHoldingModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPostAccountHoldingByAccountidModelValidateBeforeCall(Integer accountId, AccountHoldingModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsPostAccountHoldingByAccountidModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling accountsPostAccountHoldingByAccountidModel(Async)");
        }

        return accountsPostAccountHoldingByAccountidModelCall(accountId, model, _callback);

    }

    /**
     * 
     * Creates a holding and adds it to an existing Account.
     * @param accountId The existing Account ID used to identify which Account to add the holding to (required)
     * @param model The holding data (required)
     * @return AccountHoldingWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountHoldingWithIdModel accountsPostAccountHoldingByAccountidModel(Integer accountId, AccountHoldingModel model) throws ApiException {
        ApiResponse<AccountHoldingWithIdModel> localVarResp = accountsPostAccountHoldingByAccountidModelWithHttpInfo(accountId, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a holding and adds it to an existing Account.
     * @param accountId The existing Account ID used to identify which Account to add the holding to (required)
     * @param model The holding data (required)
     * @return ApiResponse&lt;AccountHoldingWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHoldingWithIdModel> accountsPostAccountHoldingByAccountidModelWithHttpInfo(Integer accountId, AccountHoldingModel model) throws ApiException {
        okhttp3.Call localVarCall = accountsPostAccountHoldingByAccountidModelValidateBeforeCall(accountId, model, null);
        Type localVarReturnType = new TypeToken<AccountHoldingWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a holding and adds it to an existing Account.
     * @param accountId The existing Account ID used to identify which Account to add the holding to (required)
     * @param model The holding data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostAccountHoldingByAccountidModelAsync(Integer accountId, AccountHoldingModel model, final ApiCallback<AccountHoldingWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPostAccountHoldingByAccountidModelValidateBeforeCall(accountId, model, _callback);
        Type localVarReturnType = new TypeToken<AccountHoldingWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPostByModel
     * @param model The Account to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostByModelCall(AccountModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPostByModelValidateBeforeCall(AccountModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling accountsPostByModel(Async)");
        }

        return accountsPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates an Account.&lt;br /&gt;                Purpose: Allows for creation of Accounts on a Fact Finder.
     * @param model The Account to be added to the Fact Finder (required)
     * @return AccountWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountWithIdModel accountsPostByModel(AccountModel model) throws ApiException {
        ApiResponse<AccountWithIdModel> localVarResp = accountsPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates an Account.&lt;br /&gt;                Purpose: Allows for creation of Accounts on a Fact Finder.
     * @param model The Account to be added to the Fact Finder (required)
     * @return ApiResponse&lt;AccountWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountWithIdModel> accountsPostByModelWithHttpInfo(AccountModel model) throws ApiException {
        okhttp3.Call localVarCall = accountsPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates an Account.&lt;br /&gt;                Purpose: Allows for creation of Accounts on a Fact Finder.
     * @param model The Account to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostByModelAsync(AccountModel model, final ApiCallback<AccountWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPostSavingsStrategyByAccountidSavingsstrategy
     * @param accountId Id of the account to create a savings strategy for (required)
     * @param savingsStrategy Values for the strategy to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostSavingsStrategyByAccountidSavingsstrategyCall(Integer accountId, SavingsStrategyModel savingsStrategy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = savingsStrategy;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPostSavingsStrategyByAccountidSavingsstrategyValidateBeforeCall(Integer accountId, SavingsStrategyModel savingsStrategy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsPostSavingsStrategyByAccountidSavingsstrategy(Async)");
        }

        // verify the required parameter 'savingsStrategy' is set
        if (savingsStrategy == null) {
            throw new ApiException("Missing the required parameter 'savingsStrategy' when calling accountsPostSavingsStrategyByAccountidSavingsstrategy(Async)");
        }

        return accountsPostSavingsStrategyByAccountidSavingsstrategyCall(accountId, savingsStrategy, _callback);

    }

    /**
     * 
     * Creates a savings strategy on a specific account
     * @param accountId Id of the account to create a savings strategy for (required)
     * @param savingsStrategy Values for the strategy to be created (required)
     * @return SavingsStrategyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public SavingsStrategyWithIdModel accountsPostSavingsStrategyByAccountidSavingsstrategy(Integer accountId, SavingsStrategyModel savingsStrategy) throws ApiException {
        ApiResponse<SavingsStrategyWithIdModel> localVarResp = accountsPostSavingsStrategyByAccountidSavingsstrategyWithHttpInfo(accountId, savingsStrategy);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a savings strategy on a specific account
     * @param accountId Id of the account to create a savings strategy for (required)
     * @param savingsStrategy Values for the strategy to be created (required)
     * @return ApiResponse&lt;SavingsStrategyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavingsStrategyWithIdModel> accountsPostSavingsStrategyByAccountidSavingsstrategyWithHttpInfo(Integer accountId, SavingsStrategyModel savingsStrategy) throws ApiException {
        okhttp3.Call localVarCall = accountsPostSavingsStrategyByAccountidSavingsstrategyValidateBeforeCall(accountId, savingsStrategy, null);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a savings strategy on a specific account
     * @param accountId Id of the account to create a savings strategy for (required)
     * @param savingsStrategy Values for the strategy to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPostSavingsStrategyByAccountidSavingsstrategyAsync(Integer accountId, SavingsStrategyModel savingsStrategy, final ApiCallback<SavingsStrategyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPostSavingsStrategyByAccountidSavingsstrategyValidateBeforeCall(accountId, savingsStrategy, _callback);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPutByAccountidIdHolding
     * @param accountId The account with the holding to be updated (required)
     * @param id The id of the holding to update (required)
     * @param holding The holding values used to update the current holding (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutByAccountidIdHoldingCall(Integer accountId, Integer id, AccountHoldingModel holding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holding;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPutByAccountidIdHoldingValidateBeforeCall(Integer accountId, Integer id, AccountHoldingModel holding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsPutByAccountidIdHolding(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsPutByAccountidIdHolding(Async)");
        }

        // verify the required parameter 'holding' is set
        if (holding == null) {
            throw new ApiException("Missing the required parameter 'holding' when calling accountsPutByAccountidIdHolding(Async)");
        }

        return accountsPutByAccountidIdHoldingCall(accountId, id, holding, _callback);

    }

    /**
     * 
     * Updates a holding associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param id The id of the holding to update (required)
     * @param holding The holding values used to update the current holding (required)
     * @return AccountHoldingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountHoldingModel accountsPutByAccountidIdHolding(Integer accountId, Integer id, AccountHoldingModel holding) throws ApiException {
        ApiResponse<AccountHoldingModel> localVarResp = accountsPutByAccountidIdHoldingWithHttpInfo(accountId, id, holding);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a holding associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param id The id of the holding to update (required)
     * @param holding The holding values used to update the current holding (required)
     * @return ApiResponse&lt;AccountHoldingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHoldingModel> accountsPutByAccountidIdHoldingWithHttpInfo(Integer accountId, Integer id, AccountHoldingModel holding) throws ApiException {
        okhttp3.Call localVarCall = accountsPutByAccountidIdHoldingValidateBeforeCall(accountId, id, holding, null);
        Type localVarReturnType = new TypeToken<AccountHoldingModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a holding associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param id The id of the holding to update (required)
     * @param holding The holding values used to update the current holding (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutByAccountidIdHoldingAsync(Integer accountId, Integer id, AccountHoldingModel holding, final ApiCallback<AccountHoldingModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPutByAccountidIdHoldingValidateBeforeCall(accountId, id, holding, _callback);
        Type localVarReturnType = new TypeToken<AccountHoldingModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPutByIdModel
     * @param id The existing Account ID used to identify which Account to update (required)
     * @param model The Account to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutByIdModelCall(Integer id, AccountModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Accounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPutByIdModelValidateBeforeCall(Integer id, AccountModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling accountsPutByIdModel(Async)");
        }

        return accountsPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates an Account, deletes associated saving strategies if the account type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of an Account on a Fact Finder.
     * @param id The existing Account ID used to identify which Account to update (required)
     * @param model The Account to be updated on a Fact Finder (required)
     * @return AccountWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountWithIdModel accountsPutByIdModel(Integer id, AccountModel model) throws ApiException {
        ApiResponse<AccountWithIdModel> localVarResp = accountsPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates an Account, deletes associated saving strategies if the account type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of an Account on a Fact Finder.
     * @param id The existing Account ID used to identify which Account to update (required)
     * @param model The Account to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;AccountWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountWithIdModel> accountsPutByIdModelWithHttpInfo(Integer id, AccountModel model) throws ApiException {
        okhttp3.Call localVarCall = accountsPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates an Account, deletes associated saving strategies if the account type changes.&lt;br /&gt;                Purpose: Allows for complete replacement of an Account on a Fact Finder.
     * @param id The existing Account ID used to identify which Account to update (required)
     * @param model The Account to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutByIdModelAsync(Integer id, AccountModel model, final ApiCallback<AccountWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<AccountWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPutHoldingsByAccountidHoldings
     * @param accountId The account with the holding to be updated (required)
     * @param holdings The list of holdings for an account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutHoldingsByAccountidHoldingsCall(Integer accountId, AccountHoldingsWithoutIdModel holdings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holdings;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/Holdings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPutHoldingsByAccountidHoldingsValidateBeforeCall(Integer accountId, AccountHoldingsWithoutIdModel holdings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsPutHoldingsByAccountidHoldings(Async)");
        }

        // verify the required parameter 'holdings' is set
        if (holdings == null) {
            throw new ApiException("Missing the required parameter 'holdings' when calling accountsPutHoldingsByAccountidHoldings(Async)");
        }

        return accountsPutHoldingsByAccountidHoldingsCall(accountId, holdings, _callback);

    }

    /**
     * 
     * Updates all holdings associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param holdings The list of holdings for an account (required)
     * @return AccountHoldingsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountHoldingsModel accountsPutHoldingsByAccountidHoldings(Integer accountId, AccountHoldingsWithoutIdModel holdings) throws ApiException {
        ApiResponse<AccountHoldingsModel> localVarResp = accountsPutHoldingsByAccountidHoldingsWithHttpInfo(accountId, holdings);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates all holdings associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param holdings The list of holdings for an account (required)
     * @return ApiResponse&lt;AccountHoldingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHoldingsModel> accountsPutHoldingsByAccountidHoldingsWithHttpInfo(Integer accountId, AccountHoldingsWithoutIdModel holdings) throws ApiException {
        okhttp3.Call localVarCall = accountsPutHoldingsByAccountidHoldingsValidateBeforeCall(accountId, holdings, null);
        Type localVarReturnType = new TypeToken<AccountHoldingsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates all holdings associated with an account
     * @param accountId The account with the holding to be updated (required)
     * @param holdings The list of holdings for an account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutHoldingsByAccountidHoldingsAsync(Integer accountId, AccountHoldingsWithoutIdModel holdings, final ApiCallback<AccountHoldingsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPutHoldingsByAccountidHoldingsValidateBeforeCall(accountId, holdings, _callback);
        Type localVarReturnType = new TypeToken<AccountHoldingsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPutSavingsStrategyByAccountidIdSavingsstrategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to update (required)
     * @param savingsStrategy The model with which to update the savings strategy with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutSavingsStrategyByAccountidIdSavingsstrategyCall(Integer accountId, Integer id, SavingsStrategyModel savingsStrategy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = savingsStrategy;

        // create path and map variables
        String localVarPath = "/api/Accounts/{accountId}/SavingsStrategies/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPutSavingsStrategyByAccountidIdSavingsstrategyValidateBeforeCall(Integer accountId, Integer id, SavingsStrategyModel savingsStrategy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy(Async)");
        }

        // verify the required parameter 'savingsStrategy' is set
        if (savingsStrategy == null) {
            throw new ApiException("Missing the required parameter 'savingsStrategy' when calling accountsPutSavingsStrategyByAccountidIdSavingsstrategy(Async)");
        }

        return accountsPutSavingsStrategyByAccountidIdSavingsstrategyCall(accountId, id, savingsStrategy, _callback);

    }

    /**
     * 
     * Updates a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to update (required)
     * @param savingsStrategy The model with which to update the savings strategy with (required)
     * @return SavingsStrategyWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public SavingsStrategyWithIdModel accountsPutSavingsStrategyByAccountidIdSavingsstrategy(Integer accountId, Integer id, SavingsStrategyModel savingsStrategy) throws ApiException {
        ApiResponse<SavingsStrategyWithIdModel> localVarResp = accountsPutSavingsStrategyByAccountidIdSavingsstrategyWithHttpInfo(accountId, id, savingsStrategy);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to update (required)
     * @param savingsStrategy The model with which to update the savings strategy with (required)
     * @return ApiResponse&lt;SavingsStrategyWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavingsStrategyWithIdModel> accountsPutSavingsStrategyByAccountidIdSavingsstrategyWithHttpInfo(Integer accountId, Integer id, SavingsStrategyModel savingsStrategy) throws ApiException {
        okhttp3.Call localVarCall = accountsPutSavingsStrategyByAccountidIdSavingsstrategyValidateBeforeCall(accountId, id, savingsStrategy, null);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific savings strategy
     * @param accountId Id of the account that holds the savings strategy (required)
     * @param id Id of the savings strategy to update (required)
     * @param savingsStrategy The model with which to update the savings strategy with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Account data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPutSavingsStrategyByAccountidIdSavingsstrategyAsync(Integer accountId, Integer id, SavingsStrategyModel savingsStrategy, final ApiCallback<SavingsStrategyWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPutSavingsStrategyByAccountidIdSavingsstrategyValidateBeforeCall(accountId, id, savingsStrategy, _callback);
        Type localVarReturnType = new TypeToken<SavingsStrategyWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
