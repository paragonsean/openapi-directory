/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SavingsStrategyModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsStrategyModel {
  public static final String SERIALIZED_NAME_EMPLOYER_SAVINGS_AMOUNT = "employerSavingsAmount";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_SAVINGS_AMOUNT)
  private Double employerSavingsAmount;

  /**
   * Gets or Sets employerSavingsAmountType
   */
  @JsonAdapter(EmployerSavingsAmountTypeEnum.Adapter.class)
  public enum EmployerSavingsAmountTypeEnum {
    DOLLAR("Dollar"),
    
    PERCENT("Percent"),
    
    MAX("Max");

    private String value;

    EmployerSavingsAmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployerSavingsAmountTypeEnum fromValue(String value) {
      for (EmployerSavingsAmountTypeEnum b : EmployerSavingsAmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployerSavingsAmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployerSavingsAmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployerSavingsAmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployerSavingsAmountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmployerSavingsAmountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYER_SAVINGS_AMOUNT_TYPE = "employerSavingsAmountType";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_SAVINGS_AMOUNT_TYPE)
  private EmployerSavingsAmountTypeEnum employerSavingsAmountType;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  public static final String SERIALIZED_NAME_FREQUENCY_ID = "frequencyId";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_ID)
  private Integer frequencyId;

  public static final String SERIALIZED_NAME_MANDATORY_AMOUNT = "mandatoryAmount";
  @SerializedName(SERIALIZED_NAME_MANDATORY_AMOUNT)
  private Double mandatoryAmount;

  /**
   * Gets or Sets mandatoryAmountType
   */
  @JsonAdapter(MandatoryAmountTypeEnum.Adapter.class)
  public enum MandatoryAmountTypeEnum {
    DOLLAR("Dollar"),
    
    PERCENT("Percent"),
    
    MAX("Max");

    private String value;

    MandatoryAmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MandatoryAmountTypeEnum fromValue(String value) {
      for (MandatoryAmountTypeEnum b : MandatoryAmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MandatoryAmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MandatoryAmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MandatoryAmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MandatoryAmountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MandatoryAmountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANDATORY_AMOUNT_TYPE = "mandatoryAmountType";
  @SerializedName(SERIALIZED_NAME_MANDATORY_AMOUNT_TYPE)
  private MandatoryAmountTypeEnum mandatoryAmountType;

  public static final String SERIALIZED_NAME_POST_TAX_SAVINGS_AMOUNT = "postTaxSavingsAmount";
  @SerializedName(SERIALIZED_NAME_POST_TAX_SAVINGS_AMOUNT)
  private Double postTaxSavingsAmount;

  /**
   * Gets or Sets postTaxSavingsAmountType
   */
  @JsonAdapter(PostTaxSavingsAmountTypeEnum.Adapter.class)
  public enum PostTaxSavingsAmountTypeEnum {
    DOLLAR("Dollar"),
    
    PERCENT("Percent"),
    
    MAX("Max");

    private String value;

    PostTaxSavingsAmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PostTaxSavingsAmountTypeEnum fromValue(String value) {
      for (PostTaxSavingsAmountTypeEnum b : PostTaxSavingsAmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PostTaxSavingsAmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PostTaxSavingsAmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PostTaxSavingsAmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PostTaxSavingsAmountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PostTaxSavingsAmountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POST_TAX_SAVINGS_AMOUNT_TYPE = "postTaxSavingsAmountType";
  @SerializedName(SERIALIZED_NAME_POST_TAX_SAVINGS_AMOUNT_TYPE)
  private PostTaxSavingsAmountTypeEnum postTaxSavingsAmountType;

  public static final String SERIALIZED_NAME_PRE_TAX_SAVINGS_AMOUNT = "preTaxSavingsAmount";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_SAVINGS_AMOUNT)
  private Double preTaxSavingsAmount;

  /**
   * Gets or Sets preTaxSavingsAmountType
   */
  @JsonAdapter(PreTaxSavingsAmountTypeEnum.Adapter.class)
  public enum PreTaxSavingsAmountTypeEnum {
    DOLLAR("Dollar"),
    
    PERCENT("Percent"),
    
    MAX("Max");

    private String value;

    PreTaxSavingsAmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreTaxSavingsAmountTypeEnum fromValue(String value) {
      for (PreTaxSavingsAmountTypeEnum b : PreTaxSavingsAmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreTaxSavingsAmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreTaxSavingsAmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreTaxSavingsAmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreTaxSavingsAmountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreTaxSavingsAmountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRE_TAX_SAVINGS_AMOUNT_TYPE = "preTaxSavingsAmountType";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_SAVINGS_AMOUNT_TYPE)
  private PreTaxSavingsAmountTypeEnum preTaxSavingsAmountType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public SavingsStrategyModel() {
  }

  public SavingsStrategyModel employerSavingsAmount(Double employerSavingsAmount) {
    this.employerSavingsAmount = employerSavingsAmount;
    return this;
  }

  /**
   * Get employerSavingsAmount
   * @return employerSavingsAmount
   */
  @javax.annotation.Nullable
  public Double getEmployerSavingsAmount() {
    return employerSavingsAmount;
  }

  public void setEmployerSavingsAmount(Double employerSavingsAmount) {
    this.employerSavingsAmount = employerSavingsAmount;
  }


  public SavingsStrategyModel employerSavingsAmountType(EmployerSavingsAmountTypeEnum employerSavingsAmountType) {
    this.employerSavingsAmountType = employerSavingsAmountType;
    return this;
  }

  /**
   * Get employerSavingsAmountType
   * @return employerSavingsAmountType
   */
  @javax.annotation.Nullable
  public EmployerSavingsAmountTypeEnum getEmployerSavingsAmountType() {
    return employerSavingsAmountType;
  }

  public void setEmployerSavingsAmountType(EmployerSavingsAmountTypeEnum employerSavingsAmountType) {
    this.employerSavingsAmountType = employerSavingsAmountType;
  }


  public SavingsStrategyModel endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public SavingsStrategyModel externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public SavingsStrategyModel frequencyId(Integer frequencyId) {
    this.frequencyId = frequencyId;
    return this;
  }

  /**
   * Get frequencyId
   * @return frequencyId
   */
  @javax.annotation.Nullable
  public Integer getFrequencyId() {
    return frequencyId;
  }

  public void setFrequencyId(Integer frequencyId) {
    this.frequencyId = frequencyId;
  }


  public SavingsStrategyModel mandatoryAmount(Double mandatoryAmount) {
    this.mandatoryAmount = mandatoryAmount;
    return this;
  }

  /**
   * Get mandatoryAmount
   * @return mandatoryAmount
   */
  @javax.annotation.Nullable
  public Double getMandatoryAmount() {
    return mandatoryAmount;
  }

  public void setMandatoryAmount(Double mandatoryAmount) {
    this.mandatoryAmount = mandatoryAmount;
  }


  public SavingsStrategyModel mandatoryAmountType(MandatoryAmountTypeEnum mandatoryAmountType) {
    this.mandatoryAmountType = mandatoryAmountType;
    return this;
  }

  /**
   * Get mandatoryAmountType
   * @return mandatoryAmountType
   */
  @javax.annotation.Nullable
  public MandatoryAmountTypeEnum getMandatoryAmountType() {
    return mandatoryAmountType;
  }

  public void setMandatoryAmountType(MandatoryAmountTypeEnum mandatoryAmountType) {
    this.mandatoryAmountType = mandatoryAmountType;
  }


  public SavingsStrategyModel postTaxSavingsAmount(Double postTaxSavingsAmount) {
    this.postTaxSavingsAmount = postTaxSavingsAmount;
    return this;
  }

  /**
   * Get postTaxSavingsAmount
   * @return postTaxSavingsAmount
   */
  @javax.annotation.Nullable
  public Double getPostTaxSavingsAmount() {
    return postTaxSavingsAmount;
  }

  public void setPostTaxSavingsAmount(Double postTaxSavingsAmount) {
    this.postTaxSavingsAmount = postTaxSavingsAmount;
  }


  public SavingsStrategyModel postTaxSavingsAmountType(PostTaxSavingsAmountTypeEnum postTaxSavingsAmountType) {
    this.postTaxSavingsAmountType = postTaxSavingsAmountType;
    return this;
  }

  /**
   * Get postTaxSavingsAmountType
   * @return postTaxSavingsAmountType
   */
  @javax.annotation.Nullable
  public PostTaxSavingsAmountTypeEnum getPostTaxSavingsAmountType() {
    return postTaxSavingsAmountType;
  }

  public void setPostTaxSavingsAmountType(PostTaxSavingsAmountTypeEnum postTaxSavingsAmountType) {
    this.postTaxSavingsAmountType = postTaxSavingsAmountType;
  }


  public SavingsStrategyModel preTaxSavingsAmount(Double preTaxSavingsAmount) {
    this.preTaxSavingsAmount = preTaxSavingsAmount;
    return this;
  }

  /**
   * Get preTaxSavingsAmount
   * @return preTaxSavingsAmount
   */
  @javax.annotation.Nullable
  public Double getPreTaxSavingsAmount() {
    return preTaxSavingsAmount;
  }

  public void setPreTaxSavingsAmount(Double preTaxSavingsAmount) {
    this.preTaxSavingsAmount = preTaxSavingsAmount;
  }


  public SavingsStrategyModel preTaxSavingsAmountType(PreTaxSavingsAmountTypeEnum preTaxSavingsAmountType) {
    this.preTaxSavingsAmountType = preTaxSavingsAmountType;
    return this;
  }

  /**
   * Get preTaxSavingsAmountType
   * @return preTaxSavingsAmountType
   */
  @javax.annotation.Nullable
  public PreTaxSavingsAmountTypeEnum getPreTaxSavingsAmountType() {
    return preTaxSavingsAmountType;
  }

  public void setPreTaxSavingsAmountType(PreTaxSavingsAmountTypeEnum preTaxSavingsAmountType) {
    this.preTaxSavingsAmountType = preTaxSavingsAmountType;
  }


  public SavingsStrategyModel startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsStrategyModel savingsStrategyModel = (SavingsStrategyModel) o;
    return Objects.equals(this.employerSavingsAmount, savingsStrategyModel.employerSavingsAmount) &&
        Objects.equals(this.employerSavingsAmountType, savingsStrategyModel.employerSavingsAmountType) &&
        Objects.equals(this.endDate, savingsStrategyModel.endDate) &&
        Objects.equals(this.externalDestinationId, savingsStrategyModel.externalDestinationId) &&
        Objects.equals(this.frequencyId, savingsStrategyModel.frequencyId) &&
        Objects.equals(this.mandatoryAmount, savingsStrategyModel.mandatoryAmount) &&
        Objects.equals(this.mandatoryAmountType, savingsStrategyModel.mandatoryAmountType) &&
        Objects.equals(this.postTaxSavingsAmount, savingsStrategyModel.postTaxSavingsAmount) &&
        Objects.equals(this.postTaxSavingsAmountType, savingsStrategyModel.postTaxSavingsAmountType) &&
        Objects.equals(this.preTaxSavingsAmount, savingsStrategyModel.preTaxSavingsAmount) &&
        Objects.equals(this.preTaxSavingsAmountType, savingsStrategyModel.preTaxSavingsAmountType) &&
        Objects.equals(this.startDate, savingsStrategyModel.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employerSavingsAmount, employerSavingsAmountType, endDate, externalDestinationId, frequencyId, mandatoryAmount, mandatoryAmountType, postTaxSavingsAmount, postTaxSavingsAmountType, preTaxSavingsAmount, preTaxSavingsAmountType, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsStrategyModel {\n");
    sb.append("    employerSavingsAmount: ").append(toIndentedString(employerSavingsAmount)).append("\n");
    sb.append("    employerSavingsAmountType: ").append(toIndentedString(employerSavingsAmountType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    frequencyId: ").append(toIndentedString(frequencyId)).append("\n");
    sb.append("    mandatoryAmount: ").append(toIndentedString(mandatoryAmount)).append("\n");
    sb.append("    mandatoryAmountType: ").append(toIndentedString(mandatoryAmountType)).append("\n");
    sb.append("    postTaxSavingsAmount: ").append(toIndentedString(postTaxSavingsAmount)).append("\n");
    sb.append("    postTaxSavingsAmountType: ").append(toIndentedString(postTaxSavingsAmountType)).append("\n");
    sb.append("    preTaxSavingsAmount: ").append(toIndentedString(preTaxSavingsAmount)).append("\n");
    sb.append("    preTaxSavingsAmountType: ").append(toIndentedString(preTaxSavingsAmountType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employerSavingsAmount");
    openapiFields.add("employerSavingsAmountType");
    openapiFields.add("endDate");
    openapiFields.add("externalDestinationId");
    openapiFields.add("frequencyId");
    openapiFields.add("mandatoryAmount");
    openapiFields.add("mandatoryAmountType");
    openapiFields.add("postTaxSavingsAmount");
    openapiFields.add("postTaxSavingsAmountType");
    openapiFields.add("preTaxSavingsAmount");
    openapiFields.add("preTaxSavingsAmountType");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsStrategyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsStrategyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsStrategyModel is not found in the empty JSON string", SavingsStrategyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsStrategyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsStrategyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("employerSavingsAmountType") != null && !jsonObj.get("employerSavingsAmountType").isJsonNull()) && !jsonObj.get("employerSavingsAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerSavingsAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerSavingsAmountType").toString()));
      }
      // validate the optional field `employerSavingsAmountType`
      if (jsonObj.get("employerSavingsAmountType") != null && !jsonObj.get("employerSavingsAmountType").isJsonNull()) {
        EmployerSavingsAmountTypeEnum.validateJsonElement(jsonObj.get("employerSavingsAmountType"));
      }
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
      if ((jsonObj.get("mandatoryAmountType") != null && !jsonObj.get("mandatoryAmountType").isJsonNull()) && !jsonObj.get("mandatoryAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatoryAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandatoryAmountType").toString()));
      }
      // validate the optional field `mandatoryAmountType`
      if (jsonObj.get("mandatoryAmountType") != null && !jsonObj.get("mandatoryAmountType").isJsonNull()) {
        MandatoryAmountTypeEnum.validateJsonElement(jsonObj.get("mandatoryAmountType"));
      }
      if ((jsonObj.get("postTaxSavingsAmountType") != null && !jsonObj.get("postTaxSavingsAmountType").isJsonNull()) && !jsonObj.get("postTaxSavingsAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postTaxSavingsAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postTaxSavingsAmountType").toString()));
      }
      // validate the optional field `postTaxSavingsAmountType`
      if (jsonObj.get("postTaxSavingsAmountType") != null && !jsonObj.get("postTaxSavingsAmountType").isJsonNull()) {
        PostTaxSavingsAmountTypeEnum.validateJsonElement(jsonObj.get("postTaxSavingsAmountType"));
      }
      if ((jsonObj.get("preTaxSavingsAmountType") != null && !jsonObj.get("preTaxSavingsAmountType").isJsonNull()) && !jsonObj.get("preTaxSavingsAmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preTaxSavingsAmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preTaxSavingsAmountType").toString()));
      }
      // validate the optional field `preTaxSavingsAmountType`
      if (jsonObj.get("preTaxSavingsAmountType") != null && !jsonObj.get("preTaxSavingsAmountType").isJsonNull()) {
        PreTaxSavingsAmountTypeEnum.validateJsonElement(jsonObj.get("preTaxSavingsAmountType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsStrategyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsStrategyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsStrategyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsStrategyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsStrategyModel>() {
           @Override
           public void write(JsonWriter out, SavingsStrategyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsStrategyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsStrategyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsStrategyModel
   * @throws IOException if the JSON string is invalid with respect to SavingsStrategyModel
   */
  public static SavingsStrategyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsStrategyModel.class);
  }

  /**
   * Convert an instance of SavingsStrategyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

