/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IFactFinderSnapshotDomainObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FactFinderSnapshotWithIdModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FactFinderSnapshotWithIdModel {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FACT_FINDER_DATA = "factFinderData";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_DATA)
  private IFactFinderSnapshotDomainObject factFinderData;

  public static final String SERIALIZED_NAME_FACT_FINDER_ID = "factFinderId";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_ID)
  private Integer factFinderId;

  /**
   * Gets or Sets factFinderStatus
   */
  @JsonAdapter(FactFinderStatusEnum.Adapter.class)
  public enum FactFinderStatusEnum {
    NEW("New"),
    
    IN_PROGRESS("InProgress"),
    
    CLIENT_SUBMITTED("ClientSubmitted"),
    
    ADVISOR_ACCEPTED("AdvisorAccepted"),
    
    CANCELED("Canceled"),
    
    DRAFT("Draft"),
    
    DELETED("Deleted");

    private String value;

    FactFinderStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FactFinderStatusEnum fromValue(String value) {
      for (FactFinderStatusEnum b : FactFinderStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FactFinderStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FactFinderStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FactFinderStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FactFinderStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FactFinderStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FACT_FINDER_STATUS = "factFinderStatus";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_STATUS)
  private FactFinderStatusEnum factFinderStatus;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private Integer snapshotId;

  public FactFinderSnapshotWithIdModel() {
  }

  public FactFinderSnapshotWithIdModel created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public FactFinderSnapshotWithIdModel factFinderData(IFactFinderSnapshotDomainObject factFinderData) {
    this.factFinderData = factFinderData;
    return this;
  }

  /**
   * Get factFinderData
   * @return factFinderData
   */
  @javax.annotation.Nullable
  public IFactFinderSnapshotDomainObject getFactFinderData() {
    return factFinderData;
  }

  public void setFactFinderData(IFactFinderSnapshotDomainObject factFinderData) {
    this.factFinderData = factFinderData;
  }


  public FactFinderSnapshotWithIdModel factFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
    return this;
  }

  /**
   * Get factFinderId
   * @return factFinderId
   */
  @javax.annotation.Nullable
  public Integer getFactFinderId() {
    return factFinderId;
  }

  public void setFactFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
  }


  public FactFinderSnapshotWithIdModel factFinderStatus(FactFinderStatusEnum factFinderStatus) {
    this.factFinderStatus = factFinderStatus;
    return this;
  }

  /**
   * Get factFinderStatus
   * @return factFinderStatus
   */
  @javax.annotation.Nullable
  public FactFinderStatusEnum getFactFinderStatus() {
    return factFinderStatus;
  }

  public void setFactFinderStatus(FactFinderStatusEnum factFinderStatus) {
    this.factFinderStatus = factFinderStatus;
  }


  public FactFinderSnapshotWithIdModel snapshotId(Integer snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public Integer getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(Integer snapshotId) {
    this.snapshotId = snapshotId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactFinderSnapshotWithIdModel factFinderSnapshotWithIdModel = (FactFinderSnapshotWithIdModel) o;
    return Objects.equals(this.created, factFinderSnapshotWithIdModel.created) &&
        Objects.equals(this.factFinderData, factFinderSnapshotWithIdModel.factFinderData) &&
        Objects.equals(this.factFinderId, factFinderSnapshotWithIdModel.factFinderId) &&
        Objects.equals(this.factFinderStatus, factFinderSnapshotWithIdModel.factFinderStatus) &&
        Objects.equals(this.snapshotId, factFinderSnapshotWithIdModel.snapshotId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, factFinderData, factFinderId, factFinderStatus, snapshotId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactFinderSnapshotWithIdModel {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    factFinderData: ").append(toIndentedString(factFinderData)).append("\n");
    sb.append("    factFinderId: ").append(toIndentedString(factFinderId)).append("\n");
    sb.append("    factFinderStatus: ").append(toIndentedString(factFinderStatus)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("factFinderData");
    openapiFields.add("factFinderId");
    openapiFields.add("factFinderStatus");
    openapiFields.add("snapshotId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FactFinderSnapshotWithIdModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FactFinderSnapshotWithIdModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FactFinderSnapshotWithIdModel is not found in the empty JSON string", FactFinderSnapshotWithIdModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FactFinderSnapshotWithIdModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FactFinderSnapshotWithIdModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `factFinderData`
      if (jsonObj.get("factFinderData") != null && !jsonObj.get("factFinderData").isJsonNull()) {
        IFactFinderSnapshotDomainObject.validateJsonElement(jsonObj.get("factFinderData"));
      }
      if ((jsonObj.get("factFinderStatus") != null && !jsonObj.get("factFinderStatus").isJsonNull()) && !jsonObj.get("factFinderStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factFinderStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factFinderStatus").toString()));
      }
      // validate the optional field `factFinderStatus`
      if (jsonObj.get("factFinderStatus") != null && !jsonObj.get("factFinderStatus").isJsonNull()) {
        FactFinderStatusEnum.validateJsonElement(jsonObj.get("factFinderStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FactFinderSnapshotWithIdModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FactFinderSnapshotWithIdModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FactFinderSnapshotWithIdModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FactFinderSnapshotWithIdModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FactFinderSnapshotWithIdModel>() {
           @Override
           public void write(JsonWriter out, FactFinderSnapshotWithIdModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FactFinderSnapshotWithIdModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FactFinderSnapshotWithIdModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FactFinderSnapshotWithIdModel
   * @throws IOException if the JSON string is invalid with respect to FactFinderSnapshotWithIdModel
   */
  public static FactFinderSnapshotWithIdModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FactFinderSnapshotWithIdModel.class);
  }

  /**
   * Convert an instance of FactFinderSnapshotWithIdModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

