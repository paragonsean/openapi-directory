/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IRetirementExpenseDomainObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRetirementGoalWithExpensesDomainObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IRetirementGoalWithExpensesDomainObject {
  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  public static final String SERIALIZED_NAME_FACT_FINDER_ID = "factFinderId";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_ID)
  private Integer factFinderId;

  public static final String SERIALIZED_NAME_HEAD1_RETIREMENT_DATE = "head1RetirementDate";
  @SerializedName(SERIALIZED_NAME_HEAD1_RETIREMENT_DATE)
  private OffsetDateTime head1RetirementDate;

  public static final String SERIALIZED_NAME_HEAD2_RETIREMENT_DATE = "head2RetirementDate";
  @SerializedName(SERIALIZED_NAME_HEAD2_RETIREMENT_DATE)
  private OffsetDateTime head2RetirementDate;

  public static final String SERIALIZED_NAME_RETIREMENT_EXPENSES = "retirementExpenses";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_EXPENSES)
  private List<IRetirementExpenseDomainObject> retirementExpenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETIREMENT_GOAL_ID = "retirementGoalId";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_GOAL_ID)
  private Integer retirementGoalId;

  public IRetirementGoalWithExpensesDomainObject() {
  }

  public IRetirementGoalWithExpensesDomainObject externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public IRetirementGoalWithExpensesDomainObject factFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
    return this;
  }

  /**
   * Get factFinderId
   * @return factFinderId
   */
  @javax.annotation.Nullable
  public Integer getFactFinderId() {
    return factFinderId;
  }

  public void setFactFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
  }


  public IRetirementGoalWithExpensesDomainObject head1RetirementDate(OffsetDateTime head1RetirementDate) {
    this.head1RetirementDate = head1RetirementDate;
    return this;
  }

  /**
   * Get head1RetirementDate
   * @return head1RetirementDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHead1RetirementDate() {
    return head1RetirementDate;
  }

  public void setHead1RetirementDate(OffsetDateTime head1RetirementDate) {
    this.head1RetirementDate = head1RetirementDate;
  }


  public IRetirementGoalWithExpensesDomainObject head2RetirementDate(OffsetDateTime head2RetirementDate) {
    this.head2RetirementDate = head2RetirementDate;
    return this;
  }

  /**
   * Get head2RetirementDate
   * @return head2RetirementDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHead2RetirementDate() {
    return head2RetirementDate;
  }

  public void setHead2RetirementDate(OffsetDateTime head2RetirementDate) {
    this.head2RetirementDate = head2RetirementDate;
  }


  public IRetirementGoalWithExpensesDomainObject retirementExpenses(List<IRetirementExpenseDomainObject> retirementExpenses) {
    this.retirementExpenses = retirementExpenses;
    return this;
  }

  public IRetirementGoalWithExpensesDomainObject addRetirementExpensesItem(IRetirementExpenseDomainObject retirementExpensesItem) {
    if (this.retirementExpenses == null) {
      this.retirementExpenses = new ArrayList<>();
    }
    this.retirementExpenses.add(retirementExpensesItem);
    return this;
  }

  /**
   * Get retirementExpenses
   * @return retirementExpenses
   */
  @javax.annotation.Nullable
  public List<IRetirementExpenseDomainObject> getRetirementExpenses() {
    return retirementExpenses;
  }

  public void setRetirementExpenses(List<IRetirementExpenseDomainObject> retirementExpenses) {
    this.retirementExpenses = retirementExpenses;
  }


  public IRetirementGoalWithExpensesDomainObject retirementGoalId(Integer retirementGoalId) {
    this.retirementGoalId = retirementGoalId;
    return this;
  }

  /**
   * Get retirementGoalId
   * @return retirementGoalId
   */
  @javax.annotation.Nullable
  public Integer getRetirementGoalId() {
    return retirementGoalId;
  }

  public void setRetirementGoalId(Integer retirementGoalId) {
    this.retirementGoalId = retirementGoalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRetirementGoalWithExpensesDomainObject iretirementGoalWithExpensesDomainObject = (IRetirementGoalWithExpensesDomainObject) o;
    return Objects.equals(this.externalDestinationId, iretirementGoalWithExpensesDomainObject.externalDestinationId) &&
        Objects.equals(this.factFinderId, iretirementGoalWithExpensesDomainObject.factFinderId) &&
        Objects.equals(this.head1RetirementDate, iretirementGoalWithExpensesDomainObject.head1RetirementDate) &&
        Objects.equals(this.head2RetirementDate, iretirementGoalWithExpensesDomainObject.head2RetirementDate) &&
        Objects.equals(this.retirementExpenses, iretirementGoalWithExpensesDomainObject.retirementExpenses) &&
        Objects.equals(this.retirementGoalId, iretirementGoalWithExpensesDomainObject.retirementGoalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalDestinationId, factFinderId, head1RetirementDate, head2RetirementDate, retirementExpenses, retirementGoalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRetirementGoalWithExpensesDomainObject {\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    factFinderId: ").append(toIndentedString(factFinderId)).append("\n");
    sb.append("    head1RetirementDate: ").append(toIndentedString(head1RetirementDate)).append("\n");
    sb.append("    head2RetirementDate: ").append(toIndentedString(head2RetirementDate)).append("\n");
    sb.append("    retirementExpenses: ").append(toIndentedString(retirementExpenses)).append("\n");
    sb.append("    retirementGoalId: ").append(toIndentedString(retirementGoalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalDestinationId");
    openapiFields.add("factFinderId");
    openapiFields.add("head1RetirementDate");
    openapiFields.add("head2RetirementDate");
    openapiFields.add("retirementExpenses");
    openapiFields.add("retirementGoalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRetirementGoalWithExpensesDomainObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRetirementGoalWithExpensesDomainObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRetirementGoalWithExpensesDomainObject is not found in the empty JSON string", IRetirementGoalWithExpensesDomainObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRetirementGoalWithExpensesDomainObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRetirementGoalWithExpensesDomainObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
      if (jsonObj.get("retirementExpenses") != null && !jsonObj.get("retirementExpenses").isJsonNull()) {
        JsonArray jsonArrayretirementExpenses = jsonObj.getAsJsonArray("retirementExpenses");
        if (jsonArrayretirementExpenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("retirementExpenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `retirementExpenses` to be an array in the JSON string but got `%s`", jsonObj.get("retirementExpenses").toString()));
          }

          // validate the optional field `retirementExpenses` (array)
          for (int i = 0; i < jsonArrayretirementExpenses.size(); i++) {
            IRetirementExpenseDomainObject.validateJsonElement(jsonArrayretirementExpenses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRetirementGoalWithExpensesDomainObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRetirementGoalWithExpensesDomainObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRetirementGoalWithExpensesDomainObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRetirementGoalWithExpensesDomainObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IRetirementGoalWithExpensesDomainObject>() {
           @Override
           public void write(JsonWriter out, IRetirementGoalWithExpensesDomainObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRetirementGoalWithExpensesDomainObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRetirementGoalWithExpensesDomainObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRetirementGoalWithExpensesDomainObject
   * @throws IOException if the JSON string is invalid with respect to IRetirementGoalWithExpensesDomainObject
   */
  public static IRetirementGoalWithExpensesDomainObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRetirementGoalWithExpensesDomainObject.class);
  }

  /**
   * Convert an instance of IRetirementGoalWithExpensesDomainObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

