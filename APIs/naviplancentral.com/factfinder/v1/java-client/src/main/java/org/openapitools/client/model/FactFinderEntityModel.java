/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FactFinderEntityModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FactFinderEntityModel {
  public static final String SERIALIZED_NAME_HOUSEHOLD_ID = "householdId";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLD_ID)
  private Integer householdId;

  /**
   * Gets or Sets modules
   */
  @JsonAdapter(ModulesEnum.Adapter.class)
  public enum ModulesEnum {
    DEMOGRAPHICS("Demographics"),
    
    ASSETS("Assets"),
    
    LIABILITIES("Liabilities"),
    
    INCOMES("Incomes"),
    
    EXPENSES("Expenses"),
    
    INSURANCE("Insurance"),
    
    RETIREMENT("Retirement"),
    
    EDUCATION("Education"),
    
    MAJOR_PURCHASE("MajorPurchase");

    private String value;

    ModulesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModulesEnum fromValue(String value) {
      for (ModulesEnum b : ModulesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModulesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModulesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModulesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModulesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModulesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<ModulesEnum> modules = new ArrayList<>();

  /**
   * Gets or Sets planLevel
   */
  @JsonAdapter(PlanLevelEnum.Adapter.class)
  public enum PlanLevelEnum {
    LEVEL2("Level2"),
    
    LEVEL1("Level1");

    private String value;

    PlanLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanLevelEnum fromValue(String value) {
      for (PlanLevelEnum b : PlanLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlanLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlanLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlanLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAN_LEVEL = "planLevel";
  @SerializedName(SERIALIZED_NAME_PLAN_LEVEL)
  private PlanLevelEnum planLevel;

  public FactFinderEntityModel() {
  }

  public FactFinderEntityModel householdId(Integer householdId) {
    this.householdId = householdId;
    return this;
  }

  /**
   * Get householdId
   * minimum: 0
   * maximum: 2147483647
   * @return householdId
   */
  @javax.annotation.Nonnull
  public Integer getHouseholdId() {
    return householdId;
  }

  public void setHouseholdId(Integer householdId) {
    this.householdId = householdId;
  }


  public FactFinderEntityModel modules(List<ModulesEnum> modules) {
    this.modules = modules;
    return this;
  }

  public FactFinderEntityModel addModulesItem(ModulesEnum modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<ModulesEnum> getModules() {
    return modules;
  }

  public void setModules(List<ModulesEnum> modules) {
    this.modules = modules;
  }


  public FactFinderEntityModel planLevel(PlanLevelEnum planLevel) {
    this.planLevel = planLevel;
    return this;
  }

  /**
   * Get planLevel
   * @return planLevel
   */
  @javax.annotation.Nullable
  public PlanLevelEnum getPlanLevel() {
    return planLevel;
  }

  public void setPlanLevel(PlanLevelEnum planLevel) {
    this.planLevel = planLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactFinderEntityModel factFinderEntityModel = (FactFinderEntityModel) o;
    return Objects.equals(this.householdId, factFinderEntityModel.householdId) &&
        Objects.equals(this.modules, factFinderEntityModel.modules) &&
        Objects.equals(this.planLevel, factFinderEntityModel.planLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(householdId, modules, planLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactFinderEntityModel {\n");
    sb.append("    householdId: ").append(toIndentedString(householdId)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    planLevel: ").append(toIndentedString(planLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("householdId");
    openapiFields.add("modules");
    openapiFields.add("planLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("householdId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FactFinderEntityModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FactFinderEntityModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FactFinderEntityModel is not found in the empty JSON string", FactFinderEntityModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FactFinderEntityModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FactFinderEntityModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FactFinderEntityModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull() && !jsonObj.get("modules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
      }
      if ((jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) && !jsonObj.get("planLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planLevel").toString()));
      }
      // validate the optional field `planLevel`
      if (jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) {
        PlanLevelEnum.validateJsonElement(jsonObj.get("planLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FactFinderEntityModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FactFinderEntityModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FactFinderEntityModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FactFinderEntityModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FactFinderEntityModel>() {
           @Override
           public void write(JsonWriter out, FactFinderEntityModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FactFinderEntityModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FactFinderEntityModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FactFinderEntityModel
   * @throws IOException if the JSON string is invalid with respect to FactFinderEntityModel
   */
  public static FactFinderEntityModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FactFinderEntityModel.class);
  }

  /**
   * Convert an instance of FactFinderEntityModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

