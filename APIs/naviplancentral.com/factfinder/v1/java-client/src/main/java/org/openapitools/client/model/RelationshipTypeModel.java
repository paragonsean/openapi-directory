/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RelationshipTypeModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipTypeModel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_CHILD_TYPE = "isChildType";
  @SerializedName(SERIALIZED_NAME_IS_CHILD_TYPE)
  private Boolean isChildType;

  /**
   * Gets or Sets relationshipType
   */
  @JsonAdapter(RelationshipTypeEnum.Adapter.class)
  public enum RelationshipTypeEnum {
    SON("Son"),
    
    DAUGHTER("Daughter"),
    
    FOSTER_SON("FosterSon"),
    
    FOSTER_DAUGHTER("FosterDaughter"),
    
    GRANDSON("Grandson"),
    
    GRANDDAUGHTER("Granddaughter"),
    
    NEPHEW("Nephew"),
    
    NIECE("Niece"),
    
    MALE_COUSIN("MaleCousin"),
    
    FEMALE_COUSIN("FemaleCousin"),
    
    FATHER("Father"),
    
    MOTHER("Mother"),
    
    GRANDFATHER("Grandfather"),
    
    GRANDMOTHER("Grandmother"),
    
    UNCLE("Uncle"),
    
    AUNT("Aunt"),
    
    BROTHER("Brother"),
    
    SISTER("Sister"),
    
    SON_IN_LAW("SonInLaw"),
    
    DAUGHTER_IN_LAW("DaughterInLaw"),
    
    MALE_OTHER("MaleOther"),
    
    FEMALE_OTHER("FemaleOther");

    private String value;

    RelationshipTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipTypeEnum fromValue(String value) {
      for (RelationshipTypeEnum b : RelationshipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP_TYPE = "relationshipType";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_TYPE)
  private RelationshipTypeEnum relationshipType;

  public RelationshipTypeModel() {
  }

  public RelationshipTypeModel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RelationshipTypeModel isChildType(Boolean isChildType) {
    this.isChildType = isChildType;
    return this;
  }

  /**
   * Get isChildType
   * @return isChildType
   */
  @javax.annotation.Nullable
  public Boolean getIsChildType() {
    return isChildType;
  }

  public void setIsChildType(Boolean isChildType) {
    this.isChildType = isChildType;
  }


  public RelationshipTypeModel relationshipType(RelationshipTypeEnum relationshipType) {
    this.relationshipType = relationshipType;
    return this;
  }

  /**
   * Get relationshipType
   * @return relationshipType
   */
  @javax.annotation.Nullable
  public RelationshipTypeEnum getRelationshipType() {
    return relationshipType;
  }

  public void setRelationshipType(RelationshipTypeEnum relationshipType) {
    this.relationshipType = relationshipType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipTypeModel relationshipTypeModel = (RelationshipTypeModel) o;
    return Objects.equals(this.id, relationshipTypeModel.id) &&
        Objects.equals(this.isChildType, relationshipTypeModel.isChildType) &&
        Objects.equals(this.relationshipType, relationshipTypeModel.relationshipType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isChildType, relationshipType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipTypeModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isChildType: ").append(toIndentedString(isChildType)).append("\n");
    sb.append("    relationshipType: ").append(toIndentedString(relationshipType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isChildType");
    openapiFields.add("relationshipType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipTypeModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipTypeModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipTypeModel is not found in the empty JSON string", RelationshipTypeModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipTypeModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipTypeModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("relationshipType") != null && !jsonObj.get("relationshipType").isJsonNull()) && !jsonObj.get("relationshipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipType").toString()));
      }
      // validate the optional field `relationshipType`
      if (jsonObj.get("relationshipType") != null && !jsonObj.get("relationshipType").isJsonNull()) {
        RelationshipTypeEnum.validateJsonElement(jsonObj.get("relationshipType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipTypeModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipTypeModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipTypeModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipTypeModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipTypeModel>() {
           @Override
           public void write(JsonWriter out, RelationshipTypeModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipTypeModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipTypeModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipTypeModel
   * @throws IOException if the JSON string is invalid with respect to RelationshipTypeModel
   */
  public static RelationshipTypeModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipTypeModel.class);
  }

  /**
   * Convert an instance of RelationshipTypeModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

