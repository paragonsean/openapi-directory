/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FactFinderModulesModel;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FactFinderWithIdModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FactFinderWithIdModel {
  /**
   * Gets or Sets countryCode
   */
  @JsonAdapter(CountryCodeEnum.Adapter.class)
  public enum CountryCodeEnum {
    UNITED_STATES("UnitedStates"),
    
    CANADA("Canada");

    private String value;

    CountryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryCodeEnum fromValue(String value) {
      for (CountryCodeEnum b : CountryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private CountryCodeEnum countryCode;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FACT_FINDER_ID = "factFinderId";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_ID)
  private Integer factFinderId;

  public static final String SERIALIZED_NAME_HOUSEHOLD_ID = "householdId";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLD_ID)
  private Integer householdId;

  public static final String SERIALIZED_NAME_LAST_STATUS_UPDATE = "lastStatusUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_UPDATE)
  private OffsetDateTime lastStatusUpdate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private FactFinderModulesModel modules;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private Integer planId;

  /**
   * Gets or Sets planLevel
   */
  @JsonAdapter(PlanLevelEnum.Adapter.class)
  public enum PlanLevelEnum {
    LEVEL2("Level2"),
    
    LEVEL1("Level1");

    private String value;

    PlanLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlanLevelEnum fromValue(String value) {
      for (PlanLevelEnum b : PlanLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlanLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlanLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlanLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAN_LEVEL = "planLevel";
  @SerializedName(SERIALIZED_NAME_PLAN_LEVEL)
  private PlanLevelEnum planLevel;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("New"),
    
    IN_PROGRESS("InProgress"),
    
    CLIENT_SUBMITTED("ClientSubmitted"),
    
    ADVISOR_ACCEPTED("AdvisorAccepted"),
    
    CANCELED("Canceled"),
    
    DRAFT("Draft"),
    
    DELETED("Deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public FactFinderWithIdModel() {
  }

  public FactFinderWithIdModel countryCode(CountryCodeEnum countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public CountryCodeEnum getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(CountryCodeEnum countryCode) {
    this.countryCode = countryCode;
  }


  public FactFinderWithIdModel created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public FactFinderWithIdModel factFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
    return this;
  }

  /**
   * Get factFinderId
   * @return factFinderId
   */
  @javax.annotation.Nullable
  public Integer getFactFinderId() {
    return factFinderId;
  }

  public void setFactFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
  }


  public FactFinderWithIdModel householdId(Integer householdId) {
    this.householdId = householdId;
    return this;
  }

  /**
   * Get householdId
   * @return householdId
   */
  @javax.annotation.Nullable
  public Integer getHouseholdId() {
    return householdId;
  }

  public void setHouseholdId(Integer householdId) {
    this.householdId = householdId;
  }


  public FactFinderWithIdModel lastStatusUpdate(OffsetDateTime lastStatusUpdate) {
    this.lastStatusUpdate = lastStatusUpdate;
    return this;
  }

  /**
   * Get lastStatusUpdate
   * @return lastStatusUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusUpdate() {
    return lastStatusUpdate;
  }

  public void setLastStatusUpdate(OffsetDateTime lastStatusUpdate) {
    this.lastStatusUpdate = lastStatusUpdate;
  }


  public FactFinderWithIdModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public FactFinderWithIdModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  public FactFinderWithIdModel modules(FactFinderModulesModel modules) {
    this.modules = modules;
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public FactFinderModulesModel getModules() {
    return modules;
  }

  public void setModules(FactFinderModulesModel modules) {
    this.modules = modules;
  }


  public FactFinderWithIdModel planId(Integer planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Get planId
   * @return planId
   */
  @javax.annotation.Nullable
  public Integer getPlanId() {
    return planId;
  }

  public void setPlanId(Integer planId) {
    this.planId = planId;
  }


  public FactFinderWithIdModel planLevel(PlanLevelEnum planLevel) {
    this.planLevel = planLevel;
    return this;
  }

  /**
   * Get planLevel
   * @return planLevel
   */
  @javax.annotation.Nullable
  public PlanLevelEnum getPlanLevel() {
    return planLevel;
  }

  public void setPlanLevel(PlanLevelEnum planLevel) {
    this.planLevel = planLevel;
  }


  public FactFinderWithIdModel status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactFinderWithIdModel factFinderWithIdModel = (FactFinderWithIdModel) o;
    return Objects.equals(this.countryCode, factFinderWithIdModel.countryCode) &&
        Objects.equals(this.created, factFinderWithIdModel.created) &&
        Objects.equals(this.factFinderId, factFinderWithIdModel.factFinderId) &&
        Objects.equals(this.householdId, factFinderWithIdModel.householdId) &&
        Objects.equals(this.lastStatusUpdate, factFinderWithIdModel.lastStatusUpdate) &&
        Objects.equals(this.links, factFinderWithIdModel.links) &&
        Objects.equals(this.modules, factFinderWithIdModel.modules) &&
        Objects.equals(this.planId, factFinderWithIdModel.planId) &&
        Objects.equals(this.planLevel, factFinderWithIdModel.planLevel) &&
        Objects.equals(this.status, factFinderWithIdModel.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, created, factFinderId, householdId, lastStatusUpdate, links, modules, planId, planLevel, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactFinderWithIdModel {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    factFinderId: ").append(toIndentedString(factFinderId)).append("\n");
    sb.append("    householdId: ").append(toIndentedString(householdId)).append("\n");
    sb.append("    lastStatusUpdate: ").append(toIndentedString(lastStatusUpdate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    planLevel: ").append(toIndentedString(planLevel)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("created");
    openapiFields.add("factFinderId");
    openapiFields.add("householdId");
    openapiFields.add("lastStatusUpdate");
    openapiFields.add("links");
    openapiFields.add("modules");
    openapiFields.add("planId");
    openapiFields.add("planLevel");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FactFinderWithIdModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FactFinderWithIdModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FactFinderWithIdModel is not found in the empty JSON string", FactFinderWithIdModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FactFinderWithIdModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FactFinderWithIdModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `countryCode`
      if (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) {
        CountryCodeEnum.validateJsonElement(jsonObj.get("countryCode"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      // validate the optional field `modules`
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull()) {
        FactFinderModulesModel.validateJsonElement(jsonObj.get("modules"));
      }
      if ((jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) && !jsonObj.get("planLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planLevel").toString()));
      }
      // validate the optional field `planLevel`
      if (jsonObj.get("planLevel") != null && !jsonObj.get("planLevel").isJsonNull()) {
        PlanLevelEnum.validateJsonElement(jsonObj.get("planLevel"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FactFinderWithIdModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FactFinderWithIdModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FactFinderWithIdModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FactFinderWithIdModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FactFinderWithIdModel>() {
           @Override
           public void write(JsonWriter out, FactFinderWithIdModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FactFinderWithIdModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FactFinderWithIdModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FactFinderWithIdModel
   * @throws IOException if the JSON string is invalid with respect to FactFinderWithIdModel
   */
  public static FactFinderWithIdModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FactFinderWithIdModel.class);
  }

  /**
   * Convert an instance of FactFinderWithIdModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

