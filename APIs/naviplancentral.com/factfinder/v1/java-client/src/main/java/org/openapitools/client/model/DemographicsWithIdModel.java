/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FamilyHeadModel;
import org.openapitools.client.model.ObjectLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DemographicsWithIdModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:23.008234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DemographicsWithIdModel {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEMOGRAPHICS_ID = "demographicsId";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHICS_ID)
  private Integer demographicsId;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTINATION_ID = "externalDestinationId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTINATION_ID)
  private String externalDestinationId;

  public static final String SERIALIZED_NAME_EXTERNAL_SOURCE_ID = "externalSourceId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SOURCE_ID)
  private String externalSourceId;

  public static final String SERIALIZED_NAME_FACT_FINDER_ID = "factFinderId";
  @SerializedName(SERIALIZED_NAME_FACT_FINDER_ID)
  private Integer factFinderId;

  public static final String SERIALIZED_NAME_HEAD1 = "head1";
  @SerializedName(SERIALIZED_NAME_HEAD1)
  private FamilyHeadModel head1;

  public static final String SERIALIZED_NAME_HEAD2 = "head2";
  @SerializedName(SERIALIZED_NAME_HEAD2)
  private FamilyHeadModel head2;

  public static final String SERIALIZED_NAME_JOINT_ANALYSIS = "jointAnalysis";
  @SerializedName(SERIALIZED_NAME_JOINT_ANALYSIS)
  private Boolean jointAnalysis;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ObjectLink> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCK_RETIREMENT = "lockRetirement";
  @SerializedName(SERIALIZED_NAME_LOCK_RETIREMENT)
  private Boolean lockRetirement;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public DemographicsWithIdModel() {
  }

  public DemographicsWithIdModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public DemographicsWithIdModel created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public DemographicsWithIdModel demographicsId(Integer demographicsId) {
    this.demographicsId = demographicsId;
    return this;
  }

  /**
   * Get demographicsId
   * @return demographicsId
   */
  @javax.annotation.Nullable
  public Integer getDemographicsId() {
    return demographicsId;
  }

  public void setDemographicsId(Integer demographicsId) {
    this.demographicsId = demographicsId;
  }


  public DemographicsWithIdModel externalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
    return this;
  }

  /**
   * Get externalDestinationId
   * @return externalDestinationId
   */
  @javax.annotation.Nullable
  public String getExternalDestinationId() {
    return externalDestinationId;
  }

  public void setExternalDestinationId(String externalDestinationId) {
    this.externalDestinationId = externalDestinationId;
  }


  public DemographicsWithIdModel externalSourceId(String externalSourceId) {
    this.externalSourceId = externalSourceId;
    return this;
  }

  /**
   * Get externalSourceId
   * @return externalSourceId
   */
  @javax.annotation.Nullable
  public String getExternalSourceId() {
    return externalSourceId;
  }

  public void setExternalSourceId(String externalSourceId) {
    this.externalSourceId = externalSourceId;
  }


  public DemographicsWithIdModel factFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
    return this;
  }

  /**
   * Get factFinderId
   * @return factFinderId
   */
  @javax.annotation.Nullable
  public Integer getFactFinderId() {
    return factFinderId;
  }

  public void setFactFinderId(Integer factFinderId) {
    this.factFinderId = factFinderId;
  }


  public DemographicsWithIdModel head1(FamilyHeadModel head1) {
    this.head1 = head1;
    return this;
  }

  /**
   * Get head1
   * @return head1
   */
  @javax.annotation.Nullable
  public FamilyHeadModel getHead1() {
    return head1;
  }

  public void setHead1(FamilyHeadModel head1) {
    this.head1 = head1;
  }


  public DemographicsWithIdModel head2(FamilyHeadModel head2) {
    this.head2 = head2;
    return this;
  }

  /**
   * Get head2
   * @return head2
   */
  @javax.annotation.Nullable
  public FamilyHeadModel getHead2() {
    return head2;
  }

  public void setHead2(FamilyHeadModel head2) {
    this.head2 = head2;
  }


  public DemographicsWithIdModel jointAnalysis(Boolean jointAnalysis) {
    this.jointAnalysis = jointAnalysis;
    return this;
  }

  /**
   * Get jointAnalysis
   * @return jointAnalysis
   */
  @javax.annotation.Nullable
  public Boolean getJointAnalysis() {
    return jointAnalysis;
  }

  public void setJointAnalysis(Boolean jointAnalysis) {
    this.jointAnalysis = jointAnalysis;
  }


  public DemographicsWithIdModel links(List<ObjectLink> links) {
    this.links = links;
    return this;
  }

  public DemographicsWithIdModel addLinksItem(ObjectLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<ObjectLink> getLinks() {
    return links;
  }

  public void setLinks(List<ObjectLink> links) {
    this.links = links;
  }


  public DemographicsWithIdModel lockRetirement(Boolean lockRetirement) {
    this.lockRetirement = lockRetirement;
    return this;
  }

  /**
   * Get lockRetirement
   * @return lockRetirement
   */
  @javax.annotation.Nullable
  public Boolean getLockRetirement() {
    return lockRetirement;
  }

  public void setLockRetirement(Boolean lockRetirement) {
    this.lockRetirement = lockRetirement;
  }


  public DemographicsWithIdModel state(Integer state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsWithIdModel demographicsWithIdModel = (DemographicsWithIdModel) o;
    return Objects.equals(this.city, demographicsWithIdModel.city) &&
        Objects.equals(this.created, demographicsWithIdModel.created) &&
        Objects.equals(this.demographicsId, demographicsWithIdModel.demographicsId) &&
        Objects.equals(this.externalDestinationId, demographicsWithIdModel.externalDestinationId) &&
        Objects.equals(this.externalSourceId, demographicsWithIdModel.externalSourceId) &&
        Objects.equals(this.factFinderId, demographicsWithIdModel.factFinderId) &&
        Objects.equals(this.head1, demographicsWithIdModel.head1) &&
        Objects.equals(this.head2, demographicsWithIdModel.head2) &&
        Objects.equals(this.jointAnalysis, demographicsWithIdModel.jointAnalysis) &&
        Objects.equals(this.links, demographicsWithIdModel.links) &&
        Objects.equals(this.lockRetirement, demographicsWithIdModel.lockRetirement) &&
        Objects.equals(this.state, demographicsWithIdModel.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, created, demographicsId, externalDestinationId, externalSourceId, factFinderId, head1, head2, jointAnalysis, links, lockRetirement, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsWithIdModel {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    demographicsId: ").append(toIndentedString(demographicsId)).append("\n");
    sb.append("    externalDestinationId: ").append(toIndentedString(externalDestinationId)).append("\n");
    sb.append("    externalSourceId: ").append(toIndentedString(externalSourceId)).append("\n");
    sb.append("    factFinderId: ").append(toIndentedString(factFinderId)).append("\n");
    sb.append("    head1: ").append(toIndentedString(head1)).append("\n");
    sb.append("    head2: ").append(toIndentedString(head2)).append("\n");
    sb.append("    jointAnalysis: ").append(toIndentedString(jointAnalysis)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    lockRetirement: ").append(toIndentedString(lockRetirement)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("created");
    openapiFields.add("demographicsId");
    openapiFields.add("externalDestinationId");
    openapiFields.add("externalSourceId");
    openapiFields.add("factFinderId");
    openapiFields.add("head1");
    openapiFields.add("head2");
    openapiFields.add("jointAnalysis");
    openapiFields.add("links");
    openapiFields.add("lockRetirement");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DemographicsWithIdModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DemographicsWithIdModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DemographicsWithIdModel is not found in the empty JSON string", DemographicsWithIdModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DemographicsWithIdModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DemographicsWithIdModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("externalDestinationId") != null && !jsonObj.get("externalDestinationId").isJsonNull()) && !jsonObj.get("externalDestinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestinationId").toString()));
      }
      if ((jsonObj.get("externalSourceId") != null && !jsonObj.get("externalSourceId").isJsonNull()) && !jsonObj.get("externalSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalSourceId").toString()));
      }
      // validate the optional field `head1`
      if (jsonObj.get("head1") != null && !jsonObj.get("head1").isJsonNull()) {
        FamilyHeadModel.validateJsonElement(jsonObj.get("head1"));
      }
      // validate the optional field `head2`
      if (jsonObj.get("head2") != null && !jsonObj.get("head2").isJsonNull()) {
        FamilyHeadModel.validateJsonElement(jsonObj.get("head2"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ObjectLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DemographicsWithIdModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DemographicsWithIdModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DemographicsWithIdModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DemographicsWithIdModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DemographicsWithIdModel>() {
           @Override
           public void write(JsonWriter out, DemographicsWithIdModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DemographicsWithIdModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DemographicsWithIdModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DemographicsWithIdModel
   * @throws IOException if the JSON string is invalid with respect to DemographicsWithIdModel
   */
  public static DemographicsWithIdModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DemographicsWithIdModel.class);
  }

  /**
   * Convert an instance of DemographicsWithIdModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

