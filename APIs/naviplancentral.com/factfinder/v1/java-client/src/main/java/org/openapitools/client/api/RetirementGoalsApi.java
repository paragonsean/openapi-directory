/*
 * Advicent.FactFinderService
 * An API for accessing the NaviPlan Fact Finder.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RetirementExpenseModel;
import org.openapitools.client.model.RetirementExpenseWithIdModel;
import org.openapitools.client.model.RetirementExpensesModel;
import org.openapitools.client.model.RetirementGoalModel;
import org.openapitools.client.model.RetirementGoalWithIdModel;
import org.openapitools.client.model.RetirementGoalsModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RetirementGoalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetirementGoalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RetirementGoalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retirementGoalsDeleteById
     * @param id The Retirement Goal ID used to identify which Retirement Goal to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsDeleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsDeleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsDeleteById(Async)");
        }

        return retirementGoalsDeleteByIdCall(id, _callback);

    }

    /**
     * 
     * Description: The operation removes a Retirement Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal from a Fact Finder.
     * @param id The Retirement Goal ID used to identify which Retirement Goal to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public void retirementGoalsDeleteById(Integer id) throws ApiException {
        retirementGoalsDeleteByIdWithHttpInfo(id);
    }

    /**
     * 
     * Description: The operation removes a Retirement Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal from a Fact Finder.
     * @param id The Retirement Goal ID used to identify which Retirement Goal to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retirementGoalsDeleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsDeleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes a Retirement Goal tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal from a Fact Finder.
     * @param id The Retirement Goal ID used to identify which Retirement Goal to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsDeleteByIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsDeleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsDeleteByRetirementgoalidId
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under (required)
     * @param id The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsDeleteByRetirementgoalidIdCall(Integer retirementGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{retirementGoalId}/Expenses/{id}"
            .replace("{" + "retirementGoalId" + "}", localVarApiClient.escapeString(retirementGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsDeleteByRetirementgoalidIdValidateBeforeCall(Integer retirementGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retirementGoalId' is set
        if (retirementGoalId == null) {
            throw new ApiException("Missing the required parameter 'retirementGoalId' when calling retirementGoalsDeleteByRetirementgoalidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsDeleteByRetirementgoalidId(Async)");
        }

        return retirementGoalsDeleteByRetirementgoalidIdCall(retirementGoalId, id, _callback);

    }

    /**
     * 
     * Description: The operation removes a Retirement Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal Expense from a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under (required)
     * @param id The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public void retirementGoalsDeleteByRetirementgoalidId(Integer retirementGoalId, Integer id) throws ApiException {
        retirementGoalsDeleteByRetirementgoalidIdWithHttpInfo(retirementGoalId, id);
    }

    /**
     * 
     * Description: The operation removes a Retirement Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal Expense from a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under (required)
     * @param id The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retirementGoalsDeleteByRetirementgoalidIdWithHttpInfo(Integer retirementGoalId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsDeleteByRetirementgoalidIdValidateBeforeCall(retirementGoalId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Description: The operation removes a Retirement Goal Expense tied to a Fact Finder.&lt;br /&gt;                Purpose: Allows for removal of a Retirement Goal Expense from a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under (required)
     * @param id The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsDeleteByRetirementgoalidIdAsync(Integer retirementGoalId, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsDeleteByRetirementgoalidIdValidateBeforeCall(retirementGoalId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsGetById
     * @param id The ID of the Retirement Goal used to retreive the Retirement Goal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsGetByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsGetById(Async)");
        }

        return retirementGoalsGetByIdCall(id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Retirement Goal for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal including retirement date.
     * @param id The ID of the Retirement Goal used to retreive the Retirement Goal (required)
     * @return RetirementGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementGoalWithIdModel retirementGoalsGetById(Integer id) throws ApiException {
        ApiResponse<RetirementGoalWithIdModel> localVarResp = retirementGoalsGetByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Retirement Goal for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal including retirement date.
     * @param id The ID of the Retirement Goal used to retreive the Retirement Goal (required)
     * @return ApiResponse&lt;RetirementGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementGoalWithIdModel> retirementGoalsGetByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsGetByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Retirement Goal for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal including retirement date.
     * @param id The ID of the Retirement Goal used to retreive the Retirement Goal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetByIdAsync(Integer id, final ApiCallback<RetirementGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsGetByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsGetRetirementExpenseByRetirementgoalidId
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve the Retirement Goal Expense (required)
     * @param id The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementExpenseByRetirementgoalidIdCall(Integer retirementGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{retirementGoalId}/Expenses/{id}"
            .replace("{" + "retirementGoalId" + "}", localVarApiClient.escapeString(retirementGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsGetRetirementExpenseByRetirementgoalidIdValidateBeforeCall(Integer retirementGoalId, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retirementGoalId' is set
        if (retirementGoalId == null) {
            throw new ApiException("Missing the required parameter 'retirementGoalId' when calling retirementGoalsGetRetirementExpenseByRetirementgoalidId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsGetRetirementExpenseByRetirementgoalidId(Async)");
        }

        return retirementGoalsGetRetirementExpenseByRetirementgoalidIdCall(retirementGoalId, id, _callback);

    }

    /**
     * 
     * Description: This operation retrieves a single Retirement Goal Expense for the specified Retirement Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expense including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve the Retirement Goal Expense (required)
     * @param id The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense (required)
     * @return RetirementExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementExpenseWithIdModel retirementGoalsGetRetirementExpenseByRetirementgoalidId(Integer retirementGoalId, Integer id) throws ApiException {
        ApiResponse<RetirementExpenseWithIdModel> localVarResp = retirementGoalsGetRetirementExpenseByRetirementgoalidIdWithHttpInfo(retirementGoalId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves a single Retirement Goal Expense for the specified Retirement Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expense including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve the Retirement Goal Expense (required)
     * @param id The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense (required)
     * @return ApiResponse&lt;RetirementExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementExpenseWithIdModel> retirementGoalsGetRetirementExpenseByRetirementgoalidIdWithHttpInfo(Integer retirementGoalId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsGetRetirementExpenseByRetirementgoalidIdValidateBeforeCall(retirementGoalId, id, null);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves a single Retirement Goal Expense for the specified Retirement Goal Expense ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expense including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve the Retirement Goal Expense (required)
     * @param id The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementExpenseByRetirementgoalidIdAsync(Integer retirementGoalId, Integer id, final ApiCallback<RetirementExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsGetRetirementExpenseByRetirementgoalidIdValidateBeforeCall(retirementGoalId, id, _callback);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve Retirement Goal Expenses (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCall(Integer retirementGoalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{retirementGoalId}/Expenses"
            .replace("{" + "retirementGoalId" + "}", localVarApiClient.escapeString(retirementGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidValidateBeforeCall(Integer retirementGoalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retirementGoalId' is set
        if (retirementGoalId == null) {
            throw new ApiException("Missing the required parameter 'retirementGoalId' when calling retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid(Async)");
        }

        return retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidCall(retirementGoalId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Retirement Goal Expenses for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expenses including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve Retirement Goal Expenses (required)
     * @return RetirementExpensesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementExpensesModel retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalid(Integer retirementGoalId) throws ApiException {
        ApiResponse<RetirementExpensesModel> localVarResp = retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidWithHttpInfo(retirementGoalId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Retirement Goal Expenses for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expenses including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve Retirement Goal Expenses (required)
     * @return ApiResponse&lt;RetirementExpensesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementExpensesModel> retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidWithHttpInfo(Integer retirementGoalId) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidValidateBeforeCall(retirementGoalId, null);
        Type localVarReturnType = new TypeToken<RetirementExpensesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Retirement Goal Expenses for the specified Retirement Goal ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goal Expenses including description and amount.
     * @param retirementGoalId The ID of the Retirement Goal used to retrieve Retirement Goal Expenses (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidAsync(Integer retirementGoalId, final ApiCallback<RetirementExpensesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsGetRetirementExpensesByRetirementGoalIdByRetirementgoalidValidateBeforeCall(retirementGoalId, _callback);
        Type localVarReturnType = new TypeToken<RetirementExpensesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid
     * @param factFinderId The ID of the Fact Finder used to retrieve Retirement Goals (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factFinderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("factFinderId", factFinderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidValidateBeforeCall(Integer factFinderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'factFinderId' is set
        if (factFinderId == null) {
            throw new ApiException("Missing the required parameter 'factFinderId' when calling retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid(Async)");
        }

        return retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidCall(factFinderId, _callback);

    }

    /**
     * 
     * Description: This operation retrieves all Retirement Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goals including retirement date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Retirement Goals (required)
     * @return RetirementGoalsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementGoalsModel retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderid(Integer factFinderId) throws ApiException {
        ApiResponse<RetirementGoalsModel> localVarResp = retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidWithHttpInfo(factFinderId);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: This operation retrieves all Retirement Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goals including retirement date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Retirement Goals (required)
     * @return ApiResponse&lt;RetirementGoalsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementGoalsModel> retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidWithHttpInfo(Integer factFinderId) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, null);
        Type localVarReturnType = new TypeToken<RetirementGoalsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: This operation retrieves all Retirement Goals for the specified Fact Finder ID.&lt;br /&gt;                Purpose: Provides access to the Retirement Goals including retirement date.
     * @param factFinderId The ID of the Fact Finder used to retrieve Retirement Goals (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidAsync(Integer factFinderId, final ApiCallback<RetirementGoalsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsGetRetirementGoalsByFactFinderIdByFactfinderidValidateBeforeCall(factFinderId, _callback);
        Type localVarReturnType = new TypeToken<RetirementGoalsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsPostByModel
     * @param model The Retirement Goal to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPostByModelCall(RetirementGoalModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsPostByModelValidateBeforeCall(RetirementGoalModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling retirementGoalsPostByModel(Async)");
        }

        return retirementGoalsPostByModelCall(model, _callback);

    }

    /**
     * 
     * Description: The operation creates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goals on a Fact Finder.
     * @param model The Retirement Goal to be added to the Fact Finder (required)
     * @return RetirementGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementGoalWithIdModel retirementGoalsPostByModel(RetirementGoalModel model) throws ApiException {
        ApiResponse<RetirementGoalWithIdModel> localVarResp = retirementGoalsPostByModelWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goals on a Fact Finder.
     * @param model The Retirement Goal to be added to the Fact Finder (required)
     * @return ApiResponse&lt;RetirementGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementGoalWithIdModel> retirementGoalsPostByModelWithHttpInfo(RetirementGoalModel model) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsPostByModelValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goals on a Fact Finder.
     * @param model The Retirement Goal to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPostByModelAsync(RetirementGoalModel model, final ApiCallback<RetirementGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsPostByModelValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsPostByRetirementgoalidModel
     * @param retirementGoalId The ID of the Retirement Goal to add the Retirement Goal Expense to (required)
     * @param model The Retirement Goal Expense to be added to the Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPostByRetirementgoalidModelCall(Integer retirementGoalId, RetirementExpenseModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{retirementGoalId}/Expenses"
            .replace("{" + "retirementGoalId" + "}", localVarApiClient.escapeString(retirementGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsPostByRetirementgoalidModelValidateBeforeCall(Integer retirementGoalId, RetirementExpenseModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retirementGoalId' is set
        if (retirementGoalId == null) {
            throw new ApiException("Missing the required parameter 'retirementGoalId' when calling retirementGoalsPostByRetirementgoalidModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling retirementGoalsPostByRetirementgoalidModel(Async)");
        }

        return retirementGoalsPostByRetirementgoalidModelCall(retirementGoalId, model, _callback);

    }

    /**
     * 
     * Description: The operation creates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goal Expenses on a Fact Finder.
     * @param retirementGoalId The ID of the Retirement Goal to add the Retirement Goal Expense to (required)
     * @param model The Retirement Goal Expense to be added to the Fact Finder (required)
     * @return RetirementExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementExpenseWithIdModel retirementGoalsPostByRetirementgoalidModel(Integer retirementGoalId, RetirementExpenseModel model) throws ApiException {
        ApiResponse<RetirementExpenseWithIdModel> localVarResp = retirementGoalsPostByRetirementgoalidModelWithHttpInfo(retirementGoalId, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation creates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goal Expenses on a Fact Finder.
     * @param retirementGoalId The ID of the Retirement Goal to add the Retirement Goal Expense to (required)
     * @param model The Retirement Goal Expense to be added to the Fact Finder (required)
     * @return ApiResponse&lt;RetirementExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementExpenseWithIdModel> retirementGoalsPostByRetirementgoalidModelWithHttpInfo(Integer retirementGoalId, RetirementExpenseModel model) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsPostByRetirementgoalidModelValidateBeforeCall(retirementGoalId, model, null);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation creates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for creation of Retirement Goal Expenses on a Fact Finder.
     * @param retirementGoalId The ID of the Retirement Goal to add the Retirement Goal Expense to (required)
     * @param model The Retirement Goal Expense to be added to the Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPostByRetirementgoalidModelAsync(Integer retirementGoalId, RetirementExpenseModel model, final ApiCallback<RetirementExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsPostByRetirementgoalidModelValidateBeforeCall(retirementGoalId, model, _callback);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsPutByIdModel
     * @param id The existing Retirement Goal ID used to identify which Retirement Goal to update (required)
     * @param model The Retirement Goal to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPutByIdModelCall(Integer id, RetirementGoalModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsPutByIdModelValidateBeforeCall(Integer id, RetirementGoalModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsPutByIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling retirementGoalsPutByIdModel(Async)");
        }

        return retirementGoalsPutByIdModelCall(id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal on a Fact Finder.
     * @param id The existing Retirement Goal ID used to identify which Retirement Goal to update (required)
     * @param model The Retirement Goal to be updated on a Fact Finder (required)
     * @return RetirementGoalWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementGoalWithIdModel retirementGoalsPutByIdModel(Integer id, RetirementGoalModel model) throws ApiException {
        ApiResponse<RetirementGoalWithIdModel> localVarResp = retirementGoalsPutByIdModelWithHttpInfo(id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal on a Fact Finder.
     * @param id The existing Retirement Goal ID used to identify which Retirement Goal to update (required)
     * @param model The Retirement Goal to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;RetirementGoalWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementGoalWithIdModel> retirementGoalsPutByIdModelWithHttpInfo(Integer id, RetirementGoalModel model) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsPutByIdModelValidateBeforeCall(id, model, null);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Retirement Goal.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal on a Fact Finder.
     * @param id The existing Retirement Goal ID used to identify which Retirement Goal to update (required)
     * @param model The Retirement Goal to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPutByIdModelAsync(Integer id, RetirementGoalModel model, final ApiCallback<RetirementGoalWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsPutByIdModelValidateBeforeCall(id, model, _callback);
        Type localVarReturnType = new TypeToken<RetirementGoalWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retirementGoalsPutByRetirementgoalidIdModel
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under (required)
     * @param id The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update (required)
     * @param model The Retirement Goal Expense to be updated on a Fact Finder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPutByRetirementgoalidIdModelCall(Integer retirementGoalId, Integer id, RetirementExpenseModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/RetirementGoals/{retirementGoalId}/Expenses/{id}"
            .replace("{" + "retirementGoalId" + "}", localVarApiClient.escapeString(retirementGoalId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retirementGoalsPutByRetirementgoalidIdModelValidateBeforeCall(Integer retirementGoalId, Integer id, RetirementExpenseModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retirementGoalId' is set
        if (retirementGoalId == null) {
            throw new ApiException("Missing the required parameter 'retirementGoalId' when calling retirementGoalsPutByRetirementgoalidIdModel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retirementGoalsPutByRetirementgoalidIdModel(Async)");
        }

        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling retirementGoalsPutByRetirementgoalidIdModel(Async)");
        }

        return retirementGoalsPutByRetirementgoalidIdModelCall(retirementGoalId, id, model, _callback);

    }

    /**
     * 
     * Description: The operation updates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal Expense on a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under (required)
     * @param id The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update (required)
     * @param model The Retirement Goal Expense to be updated on a Fact Finder (required)
     * @return RetirementExpenseWithIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public RetirementExpenseWithIdModel retirementGoalsPutByRetirementgoalidIdModel(Integer retirementGoalId, Integer id, RetirementExpenseModel model) throws ApiException {
        ApiResponse<RetirementExpenseWithIdModel> localVarResp = retirementGoalsPutByRetirementgoalidIdModelWithHttpInfo(retirementGoalId, id, model);
        return localVarResp.getData();
    }

    /**
     * 
     * Description: The operation updates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal Expense on a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under (required)
     * @param id The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update (required)
     * @param model The Retirement Goal Expense to be updated on a Fact Finder (required)
     * @return ApiResponse&lt;RetirementExpenseWithIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetirementExpenseWithIdModel> retirementGoalsPutByRetirementgoalidIdModelWithHttpInfo(Integer retirementGoalId, Integer id, RetirementExpenseModel model) throws ApiException {
        okhttp3.Call localVarCall = retirementGoalsPutByRetirementgoalidIdModelValidateBeforeCall(retirementGoalId, id, model, null);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description: The operation updates a Retirement Goal Expense.&lt;br /&gt;                Purpose: Allows for complete replacement of a Retirement Goal Expense on a Fact Finder.
     * @param retirementGoalId The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under (required)
     * @param id The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update (required)
     * @param model The Retirement Goal Expense to be updated on a Fact Finder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for Retirement Goal Expense data access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request is restricted for access to Retirement Goal Expense. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Retirement Goal Expense not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retirementGoalsPutByRetirementgoalidIdModelAsync(Integer retirementGoalId, Integer id, RetirementExpenseModel model, final ApiCallback<RetirementExpenseWithIdModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = retirementGoalsPutByRetirementgoalidIdModelValidateBeforeCall(retirementGoalId, id, model, _callback);
        Type localVarReturnType = new TypeToken<RetirementExpenseWithIdModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
