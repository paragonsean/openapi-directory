# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, os: str=None, url: str=None):
        """DestinationModel - a model defined in OpenAPI

        :param country: The country of this DestinationModel.
        :param os: The os of this DestinationModel.
        :param url: The url of this DestinationModel.
        """
        self.openapi_types = {
            'country': str,
            'os': str,
            'url': str
        }

        self.attribute_map = {
            'country': 'country',
            'os': 'os',
            'url': 'url'
        }

        self._country = country
        self._os = os
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationModel of this DestinationModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this DestinationModel.

        ISO alpha-2 [country code](//en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)

        :return: The country of this DestinationModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DestinationModel.

        ISO alpha-2 [country code](//en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)

        :param country: The country of this DestinationModel.
        :type country: str
        """

        self._country = country

    @property
    def os(self):
        """Gets the os of this DestinationModel.

        Please check the [supported OS list](#tag/OperatingSystems)

        :return: The os of this DestinationModel.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DestinationModel.

        Please check the [supported OS list](#tag/OperatingSystems)

        :param os: The os of this DestinationModel.
        :type os: str
        """

        self._os = os

    @property
    def url(self):
        """Gets the url of this DestinationModel.


        :return: The url of this DestinationModel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DestinationModel.


        :param url: The url of this DestinationModel.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
