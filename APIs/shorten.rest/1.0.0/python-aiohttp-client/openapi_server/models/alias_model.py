# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_model import DestinationModel
from openapi_server.models.meta_tag_model import MetaTagModel
from openapi_server.models.snippet_model import SnippetModel
from openapi_server import util


class AliasModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, destinations: List[DestinationModel]=None, domain_name: str=None, metatags: List[MetaTagModel]=None, name: str=None, snippets: List[SnippetModel]=None, updated_at: int=None):
        """AliasModel - a model defined in OpenAPI

        :param created_at: The created_at of this AliasModel.
        :param destinations: The destinations of this AliasModel.
        :param domain_name: The domain_name of this AliasModel.
        :param metatags: The metatags of this AliasModel.
        :param name: The name of this AliasModel.
        :param snippets: The snippets of this AliasModel.
        :param updated_at: The updated_at of this AliasModel.
        """
        self.openapi_types = {
            'created_at': int,
            'destinations': List[DestinationModel],
            'domain_name': str,
            'metatags': List[MetaTagModel],
            'name': str,
            'snippets': List[SnippetModel],
            'updated_at': int
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'destinations': 'destinations',
            'domain_name': 'domainName',
            'metatags': 'metatags',
            'name': 'name',
            'snippets': 'snippets',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._destinations = destinations
        self._domain_name = domain_name
        self._metatags = metatags
        self._name = name
        self._snippets = snippets
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AliasModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AliasModel of this AliasModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AliasModel.


        :return: The created_at of this AliasModel.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AliasModel.


        :param created_at: The created_at of this AliasModel.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def destinations(self):
        """Gets the destinations of this AliasModel.


        :return: The destinations of this AliasModel.
        :rtype: List[DestinationModel]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this AliasModel.


        :param destinations: The destinations of this AliasModel.
        :type destinations: List[DestinationModel]
        """

        self._destinations = destinations

    @property
    def domain_name(self):
        """Gets the domain_name of this AliasModel.


        :return: The domain_name of this AliasModel.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this AliasModel.


        :param domain_name: The domain_name of this AliasModel.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def metatags(self):
        """Gets the metatags of this AliasModel.


        :return: The metatags of this AliasModel.
        :rtype: List[MetaTagModel]
        """
        return self._metatags

    @metatags.setter
    def metatags(self, metatags):
        """Sets the metatags of this AliasModel.


        :param metatags: The metatags of this AliasModel.
        :type metatags: List[MetaTagModel]
        """

        self._metatags = metatags

    @property
    def name(self):
        """Gets the name of this AliasModel.


        :return: The name of this AliasModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AliasModel.


        :param name: The name of this AliasModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def snippets(self):
        """Gets the snippets of this AliasModel.


        :return: The snippets of this AliasModel.
        :rtype: List[SnippetModel]
        """
        return self._snippets

    @snippets.setter
    def snippets(self, snippets):
        """Sets the snippets of this AliasModel.


        :param snippets: The snippets of this AliasModel.
        :type snippets: List[SnippetModel]
        """

        self._snippets = snippets

    @property
    def updated_at(self):
        """Gets the updated_at of this AliasModel.


        :return: The updated_at of this AliasModel.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AliasModel.


        :param updated_at: The updated_at of this AliasModel.
        :type updated_at: int
        """

        self._updated_at = updated_at
