/*
 * Shorten.REST API Documentation
 * ## Introduction   The Shorten.rest API allows you to programmatically create short URLs (an &apos;alias&apos;) for longer URL (a &apos;destination&apos;).  Each alias you create can be used to redirect the end user (person clicking on the link) to one or more destination URLs  A default destination is always set and specific destinations can be set to redirect the end user to preferred destinations based on the user&apos;s geographical location (country) and device Operating System.  In order to use the Shorten.Rest URL Shortening API you can choose to bind your own branded domain, sub-domain or to use our default domain - Short.FYI    ### Destination Matching    When creating or editing a short URL (&apos;alias&apos;) you can choose to specify a destination for each country and OS ([Supported OSes list](#tag/OperatingSystems)) combination.    When a user clicks on the short link, Shorten.rest will examine the end user's country (determined by User's IP) and OS (User agent) and match the most suitable destination for each user.    (*) If no destination is set for a specific request combination Shorten.rest will use the default destination that exists within each short URL    (**) BRANDED DOMAINS: If the requested alias does not exist in our database - Shorten.rest will redirect the user to the default fallback you set within your dashboard under the ‘Alias Not Found Page Url’ value for a custom domain.    (***) Operating System (OS) destinations are stronger than a country destination!   For example - if you have a custom landing page that is targeting people in the USA and a second landing page that is hyper focused for people who use iOS devices - a person clicking on your link in the USA that is on an iPhone will be redirected to the iOS landing page, while all other devices will be redirected to the USA landing page.    | OS  | Country  | Destination | | :------------: |:---------------:| -----| | iOS      |  | YourDestination.com/ios | |       | US        |   YourDestination.com/usa |    Shorten.rest will choose the YourDestination.com/ios url as the most suitable destination.   ### Branded Domain Attributes    When setting up your custom domain you can include optional metatags and snippets ([Supported snippets list](#tag/Snippets)). These parameters (such as retargeting, tracking and conversion pixels) are populated and fired on click - at the time of the redirect.    By default the parameters you set in the domain setting will be included in all Short URLs associated with that domain.    You can always override the domain defaults for each URL by passing the appropriate variables when creating or updating a short URL    ### Setting a Custom string for an Alias (short.fyi/alias)    While creating a short URL you can specify which domain to use. You can choose to use your own branded domain or our default domain - Short.fyi.    Each Alias is unique within a domain they are related to. This means that if multiple accounts use you the same domain (for example short.fyi), if an alias is already taken you may not create a new destination for it.   That said - If you would like to use a specific alias which is already taken - the only way to do so is to create it on a new domain you own and have attached to your Shorten.rest account.    ### Random Aliases    By default - unless you specify a vanity URI for your alias each URL that is shortened on our platform will have a random string generated by the API. This means that if the &apos;alias&apos; attribute of a /aliases POST request is not provided, or is an empty string, a random string of seven characters will be generated and returned as part of the POST response.    You can also place the @**rnd** macro within the alias field when you create a new alias, for example /vanity/@rnd, which might return an alias like /vanity/ZMAefRt, or /vanity@rnd, which might produce something like /vanityMRtvxadf. Only the first @rnd in an alias attribute will be replaced.    ### NOTES    ( * ) All methods of the Shorten.REST API require that your API key be provided in **x-api-key** header.    (**) All API parameters are case sensitive
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AliasModel;
import org.openapitools.client.model.CreateAliasModel;
import org.openapitools.client.model.CreateAliasResponseModel;
import org.openapitools.client.model.GetAliasesModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AliasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AliasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AliasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAlias
     * @param createAliasModel alias properties (required)
     * @param domainName domain which alias will belong to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (optional, default to @rnd)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response contains aliasName, domainName and full generated short link </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAliasCall(CreateAliasModel createAliasModel, String domainName, String aliasName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAliasModel;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (aliasName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliasName", aliasName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAliasValidateBeforeCall(CreateAliasModel createAliasModel, String domainName, String aliasName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAliasModel' is set
        if (createAliasModel == null) {
            throw new ApiException("Missing the required parameter 'createAliasModel' when calling createAlias(Async)");
        }

        return createAliasCall(createAliasModel, domainName, aliasName, _callback);

    }

    /**
     * Create alias
     * This POST method creates a new alias under a specified domain. If no domain is specified in the request the alias will be attached to the default domain Short.fyi    **NOTE:** You can override the domain level Meta Tags and Tracking Snippets by specifying them for each URL. Any variables you add to a specific URL will always override domain level settings.
     * @param createAliasModel alias properties (required)
     * @param domainName domain which alias will belong to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (optional, default to @rnd)
     * @return CreateAliasResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response contains aliasName, domainName and full generated short link </td><td>  -  </td></tr>
     </table>
     */
    public CreateAliasResponseModel createAlias(CreateAliasModel createAliasModel, String domainName, String aliasName) throws ApiException {
        ApiResponse<CreateAliasResponseModel> localVarResp = createAliasWithHttpInfo(createAliasModel, domainName, aliasName);
        return localVarResp.getData();
    }

    /**
     * Create alias
     * This POST method creates a new alias under a specified domain. If no domain is specified in the request the alias will be attached to the default domain Short.fyi    **NOTE:** You can override the domain level Meta Tags and Tracking Snippets by specifying them for each URL. Any variables you add to a specific URL will always override domain level settings.
     * @param createAliasModel alias properties (required)
     * @param domainName domain which alias will belong to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (optional, default to @rnd)
     * @return ApiResponse&lt;CreateAliasResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response contains aliasName, domainName and full generated short link </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAliasResponseModel> createAliasWithHttpInfo(CreateAliasModel createAliasModel, String domainName, String aliasName) throws ApiException {
        okhttp3.Call localVarCall = createAliasValidateBeforeCall(createAliasModel, domainName, aliasName, null);
        Type localVarReturnType = new TypeToken<CreateAliasResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create alias (asynchronously)
     * This POST method creates a new alias under a specified domain. If no domain is specified in the request the alias will be attached to the default domain Short.fyi    **NOTE:** You can override the domain level Meta Tags and Tracking Snippets by specifying them for each URL. Any variables you add to a specific URL will always override domain level settings.
     * @param createAliasModel alias properties (required)
     * @param domainName domain which alias will belong to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (optional, default to @rnd)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response contains aliasName, domainName and full generated short link </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAliasAsync(CreateAliasModel createAliasModel, String domainName, String aliasName, final ApiCallback<CreateAliasResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAliasValidateBeforeCall(createAliasModel, domainName, aliasName, _callback);
        Type localVarReturnType = new TypeToken<CreateAliasResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlias
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAliasCall(String aliasName, String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (aliasName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliasName", aliasName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAliasValidateBeforeCall(String aliasName, String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling deleteAlias(Async)");
        }

        return deleteAliasCall(aliasName, domainName, _callback);

    }

    /**
     * Delete alias
     * Deletes a single alias by providing alias and domain. If no domain is provided the API will search for the matching alias within the Short.fyi domain
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlias(String aliasName, String domainName) throws ApiException {
        deleteAliasWithHttpInfo(aliasName, domainName);
    }

    /**
     * Delete alias
     * Deletes a single alias by providing alias and domain. If no domain is provided the API will search for the matching alias within the Short.fyi domain
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAliasWithHttpInfo(String aliasName, String domainName) throws ApiException {
        okhttp3.Call localVarCall = deleteAliasValidateBeforeCall(aliasName, domainName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete alias (asynchronously)
     * Deletes a single alias by providing alias and domain. If no domain is provided the API will search for the matching alias within the Short.fyi domain
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAliasAsync(String aliasName, String domainName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAliasValidateBeforeCall(aliasName, domainName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlias
     * @param aliasName alias value (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias model or **null** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAliasCall(String aliasName, String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (aliasName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliasName", aliasName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasValidateBeforeCall(String aliasName, String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling getAlias(Async)");
        }

        return getAliasCall(aliasName, domainName, _callback);

    }

    /**
     * Get alias
     * Get detailed information for a single alias by providing its alias and domain name
     * @param aliasName alias value (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @return AliasModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias model or **null** </td><td>  -  </td></tr>
     </table>
     */
    public AliasModel getAlias(String aliasName, String domainName) throws ApiException {
        ApiResponse<AliasModel> localVarResp = getAliasWithHttpInfo(aliasName, domainName);
        return localVarResp.getData();
    }

    /**
     * Get alias
     * Get detailed information for a single alias by providing its alias and domain name
     * @param aliasName alias value (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @return ApiResponse&lt;AliasModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias model or **null** </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AliasModel> getAliasWithHttpInfo(String aliasName, String domainName) throws ApiException {
        okhttp3.Call localVarCall = getAliasValidateBeforeCall(aliasName, domainName, null);
        Type localVarReturnType = new TypeToken<AliasModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get alias (asynchronously)
     * Get detailed information for a single alias by providing its alias and domain name
     * @param aliasName alias value (without &#x60;/&#x60; at the beginning) (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alias model or **null** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAliasAsync(String aliasName, String domainName, final ApiCallback<AliasModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasValidateBeforeCall(aliasName, domainName, _callback);
        Type localVarReturnType = new TypeToken<AliasModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAliases
     * @param domainName The domain name to get the aliases for (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param continueFrom An ID returned by a previous query to continue aliases retrieval (see lastId in response) (optional)
     * @param limit Number of results to return per request (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of aliases with lastId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAliasesCall(String domainName, String continueFrom, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (continueFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continueFrom", continueFrom));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasesValidateBeforeCall(String domainName, String continueFrom, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAliasesCall(domainName, continueFrom, limit, _callback);

    }

    /**
     * Get aliases by domain
     * Obtain a list of all alias names associated with your account and given domain. Result array is in descending order by creation date.    If no domain is specified you will receive a list of all the alias names you have created using the Short.fyi domain.    If there are more results than the limit for the request the response will return you a value in lastId property you can specify it in the continueFrom query parameter to get the next batch of records.
     * @param domainName The domain name to get the aliases for (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param continueFrom An ID returned by a previous query to continue aliases retrieval (see lastId in response) (optional)
     * @param limit Number of results to return per request (optional, default to 1000)
     * @return GetAliasesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of aliases with lastId </td><td>  -  </td></tr>
     </table>
     */
    public GetAliasesModel getAliases(String domainName, String continueFrom, Integer limit) throws ApiException {
        ApiResponse<GetAliasesModel> localVarResp = getAliasesWithHttpInfo(domainName, continueFrom, limit);
        return localVarResp.getData();
    }

    /**
     * Get aliases by domain
     * Obtain a list of all alias names associated with your account and given domain. Result array is in descending order by creation date.    If no domain is specified you will receive a list of all the alias names you have created using the Short.fyi domain.    If there are more results than the limit for the request the response will return you a value in lastId property you can specify it in the continueFrom query parameter to get the next batch of records.
     * @param domainName The domain name to get the aliases for (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param continueFrom An ID returned by a previous query to continue aliases retrieval (see lastId in response) (optional)
     * @param limit Number of results to return per request (optional, default to 1000)
     * @return ApiResponse&lt;GetAliasesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of aliases with lastId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAliasesModel> getAliasesWithHttpInfo(String domainName, String continueFrom, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAliasesValidateBeforeCall(domainName, continueFrom, limit, null);
        Type localVarReturnType = new TypeToken<GetAliasesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get aliases by domain (asynchronously)
     * Obtain a list of all alias names associated with your account and given domain. Result array is in descending order by creation date.    If no domain is specified you will receive a list of all the alias names you have created using the Short.fyi domain.    If there are more results than the limit for the request the response will return you a value in lastId property you can specify it in the continueFrom query parameter to get the next batch of records.
     * @param domainName The domain name to get the aliases for (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param continueFrom An ID returned by a previous query to continue aliases retrieval (see lastId in response) (optional)
     * @param limit Number of results to return per request (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of aliases with lastId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAliasesAsync(String domainName, String continueFrom, Integer limit, final ApiCallback<GetAliasesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasesValidateBeforeCall(domainName, continueFrom, limit, _callback);
        Type localVarReturnType = new TypeToken<GetAliasesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAlias
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param createAliasModel alias properties you wish to be updated (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAliasCall(String aliasName, CreateAliasModel createAliasModel, String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAliasModel;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (aliasName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliasName", aliasName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAliasValidateBeforeCall(String aliasName, CreateAliasModel createAliasModel, String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasName' is set
        if (aliasName == null) {
            throw new ApiException("Missing the required parameter 'aliasName' when calling updateAlias(Async)");
        }

        // verify the required parameter 'createAliasModel' is set
        if (createAliasModel == null) {
            throw new ApiException("Missing the required parameter 'createAliasModel' when calling updateAlias(Async)");
        }

        return updateAliasCall(aliasName, createAliasModel, domainName, _callback);

    }

    /**
     * Update alias
     * Update a single short URL by providing its alias and domain as a parameter, and the data you wish to update in the body of the request. If no domain is provided you will receive the alias found attached to the Short.fyi domain (if it exists and is linked to your account!)   ### NOTE:    ( * )If you add a metatag or a snippet with a same name to an alias and the domain it&#39;s related to, the value will be taken from the alias and not the domain    ( ** ) When you update any array property (like destinations) the block is updated **completely** so you have to specify the old records to avoid deleting them   ( *** ) The method updates only the specified properties so if there was no change in one of them you don&#39;t have to send it.
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param createAliasModel alias properties you wish to be updated (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public void updateAlias(String aliasName, CreateAliasModel createAliasModel, String domainName) throws ApiException {
        updateAliasWithHttpInfo(aliasName, createAliasModel, domainName);
    }

    /**
     * Update alias
     * Update a single short URL by providing its alias and domain as a parameter, and the data you wish to update in the body of the request. If no domain is provided you will receive the alias found attached to the Short.fyi domain (if it exists and is linked to your account!)   ### NOTE:    ( * )If you add a metatag or a snippet with a same name to an alias and the domain it&#39;s related to, the value will be taken from the alias and not the domain    ( ** ) When you update any array property (like destinations) the block is updated **completely** so you have to specify the old records to avoid deleting them   ( *** ) The method updates only the specified properties so if there was no change in one of them you don&#39;t have to send it.
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param createAliasModel alias properties you wish to be updated (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAliasWithHttpInfo(String aliasName, CreateAliasModel createAliasModel, String domainName) throws ApiException {
        okhttp3.Call localVarCall = updateAliasValidateBeforeCall(aliasName, createAliasModel, domainName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update alias (asynchronously)
     * Update a single short URL by providing its alias and domain as a parameter, and the data you wish to update in the body of the request. If no domain is provided you will receive the alias found attached to the Short.fyi domain (if it exists and is linked to your account!)   ### NOTE:    ( * )If you add a metatag or a snippet with a same name to an alias and the domain it&#39;s related to, the value will be taken from the alias and not the domain    ( ** ) When you update any array property (like destinations) the block is updated **completely** so you have to specify the old records to avoid deleting them   ( *** ) The method updates only the specified properties so if there was no change in one of them you don&#39;t have to send it.
     * @param aliasName alias (without &#x60;/&#x60; at the beginning) (required)
     * @param createAliasModel alias properties you wish to be updated (required)
     * @param domainName domain which alias belongs to (string without &#x60;http/https&#x60; or &#x60;/&#x60;) (optional, default to short.fyi)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAliasAsync(String aliasName, CreateAliasModel createAliasModel, String domainName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAliasValidateBeforeCall(aliasName, createAliasModel, domainName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
