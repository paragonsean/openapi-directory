/*
 * Shorten.REST API Documentation
 * ## Introduction   The Shorten.rest API allows you to programmatically create short URLs (an &apos;alias&apos;) for longer URL (a &apos;destination&apos;).  Each alias you create can be used to redirect the end user (person clicking on the link) to one or more destination URLs  A default destination is always set and specific destinations can be set to redirect the end user to preferred destinations based on the user&apos;s geographical location (country) and device Operating System.  In order to use the Shorten.Rest URL Shortening API you can choose to bind your own branded domain, sub-domain or to use our default domain - Short.FYI    ### Destination Matching    When creating or editing a short URL (&apos;alias&apos;) you can choose to specify a destination for each country and OS ([Supported OSes list](#tag/OperatingSystems)) combination.    When a user clicks on the short link, Shorten.rest will examine the end user's country (determined by User's IP) and OS (User agent) and match the most suitable destination for each user.    (*) If no destination is set for a specific request combination Shorten.rest will use the default destination that exists within each short URL    (**) BRANDED DOMAINS: If the requested alias does not exist in our database - Shorten.rest will redirect the user to the default fallback you set within your dashboard under the ‘Alias Not Found Page Url’ value for a custom domain.    (***) Operating System (OS) destinations are stronger than a country destination!   For example - if you have a custom landing page that is targeting people in the USA and a second landing page that is hyper focused for people who use iOS devices - a person clicking on your link in the USA that is on an iPhone will be redirected to the iOS landing page, while all other devices will be redirected to the USA landing page.    | OS  | Country  | Destination | | :------------: |:---------------:| -----| | iOS      |  | YourDestination.com/ios | |       | US        |   YourDestination.com/usa |    Shorten.rest will choose the YourDestination.com/ios url as the most suitable destination.   ### Branded Domain Attributes    When setting up your custom domain you can include optional metatags and snippets ([Supported snippets list](#tag/Snippets)). These parameters (such as retargeting, tracking and conversion pixels) are populated and fired on click - at the time of the redirect.    By default the parameters you set in the domain setting will be included in all Short URLs associated with that domain.    You can always override the domain defaults for each URL by passing the appropriate variables when creating or updating a short URL    ### Setting a Custom string for an Alias (short.fyi/alias)    While creating a short URL you can specify which domain to use. You can choose to use your own branded domain or our default domain - Short.fyi.    Each Alias is unique within a domain they are related to. This means that if multiple accounts use you the same domain (for example short.fyi), if an alias is already taken you may not create a new destination for it.   That said - If you would like to use a specific alias which is already taken - the only way to do so is to create it on a new domain you own and have attached to your Shorten.rest account.    ### Random Aliases    By default - unless you specify a vanity URI for your alias each URL that is shortened on our platform will have a random string generated by the API. This means that if the &apos;alias&apos; attribute of a /aliases POST request is not provided, or is an empty string, a random string of seven characters will be generated and returned as part of the POST response.    You can also place the @**rnd** macro within the alias field when you create a new alias, for example /vanity/@rnd, which might return an alias like /vanity/ZMAefRt, or /vanity@rnd, which might produce something like /vanityMRtvxadf. Only the first @rnd in an alias attribute will be replaced.    ### NOTES    ( * ) All methods of the Shorten.REST API require that your API key be provided in **x-api-key** header.    (**) All API parameters are case sensitive
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClickModelPg;
import org.openapitools.client.model.ClicksFilterModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStatistics
     * @param clicksFilterModel Filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of Click models, also returns lastId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsCall(ClicksFilterModel clicksFilterModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clicksFilterModel;

        // create path and map variables
        String localVarPath = "/clicks/pg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsValidateBeforeCall(ClicksFilterModel clicksFilterModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clicksFilterModel' is set
        if (clicksFilterModel == null) {
            throw new ApiException("Missing the required parameter 'clicksFilterModel' when calling getStatistics(Async)");
        }

        return getStatisticsCall(clicksFilterModel, _callback);

    }

    /**
     * Get clicks statistics
     * Retrieve the raw click statistics for your account. Clicks are retrieved by creation date in descending order.
     * @param clicksFilterModel Filter (required)
     * @return ClickModelPg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of Click models, also returns lastId </td><td>  -  </td></tr>
     </table>
     */
    public ClickModelPg getStatistics(ClicksFilterModel clicksFilterModel) throws ApiException {
        ApiResponse<ClickModelPg> localVarResp = getStatisticsWithHttpInfo(clicksFilterModel);
        return localVarResp.getData();
    }

    /**
     * Get clicks statistics
     * Retrieve the raw click statistics for your account. Clicks are retrieved by creation date in descending order.
     * @param clicksFilterModel Filter (required)
     * @return ApiResponse&lt;ClickModelPg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of Click models, also returns lastId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClickModelPg> getStatisticsWithHttpInfo(ClicksFilterModel clicksFilterModel) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(clicksFilterModel, null);
        Type localVarReturnType = new TypeToken<ClickModelPg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get clicks statistics (asynchronously)
     * Retrieve the raw click statistics for your account. Clicks are retrieved by creation date in descending order.
     * @param clicksFilterModel Filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns Array of Click models, also returns lastId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsAsync(ClicksFilterModel clicksFilterModel, final ApiCallback<ClickModelPg> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(clicksFilterModel, _callback);
        Type localVarReturnType = new TypeToken<ClickModelPg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
