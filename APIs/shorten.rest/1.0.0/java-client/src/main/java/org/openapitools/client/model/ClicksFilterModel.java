/*
 * Shorten.REST API Documentation
 * ## Introduction   The Shorten.rest API allows you to programmatically create short URLs (an &apos;alias&apos;) for longer URL (a &apos;destination&apos;).  Each alias you create can be used to redirect the end user (person clicking on the link) to one or more destination URLs  A default destination is always set and specific destinations can be set to redirect the end user to preferred destinations based on the user&apos;s geographical location (country) and device Operating System.  In order to use the Shorten.Rest URL Shortening API you can choose to bind your own branded domain, sub-domain or to use our default domain - Short.FYI    ### Destination Matching    When creating or editing a short URL (&apos;alias&apos;) you can choose to specify a destination for each country and OS ([Supported OSes list](#tag/OperatingSystems)) combination.    When a user clicks on the short link, Shorten.rest will examine the end user's country (determined by User's IP) and OS (User agent) and match the most suitable destination for each user.    (*) If no destination is set for a specific request combination Shorten.rest will use the default destination that exists within each short URL    (**) BRANDED DOMAINS: If the requested alias does not exist in our database - Shorten.rest will redirect the user to the default fallback you set within your dashboard under the ‘Alias Not Found Page Url’ value for a custom domain.    (***) Operating System (OS) destinations are stronger than a country destination!   For example - if you have a custom landing page that is targeting people in the USA and a second landing page that is hyper focused for people who use iOS devices - a person clicking on your link in the USA that is on an iPhone will be redirected to the iOS landing page, while all other devices will be redirected to the USA landing page.    | OS  | Country  | Destination | | :------------: |:---------------:| -----| | iOS      |  | YourDestination.com/ios | |       | US        |   YourDestination.com/usa |    Shorten.rest will choose the YourDestination.com/ios url as the most suitable destination.   ### Branded Domain Attributes    When setting up your custom domain you can include optional metatags and snippets ([Supported snippets list](#tag/Snippets)). These parameters (such as retargeting, tracking and conversion pixels) are populated and fired on click - at the time of the redirect.    By default the parameters you set in the domain setting will be included in all Short URLs associated with that domain.    You can always override the domain defaults for each URL by passing the appropriate variables when creating or updating a short URL    ### Setting a Custom string for an Alias (short.fyi/alias)    While creating a short URL you can specify which domain to use. You can choose to use your own branded domain or our default domain - Short.fyi.    Each Alias is unique within a domain they are related to. This means that if multiple accounts use you the same domain (for example short.fyi), if an alias is already taken you may not create a new destination for it.   That said - If you would like to use a specific alias which is already taken - the only way to do so is to create it on a new domain you own and have attached to your Shorten.rest account.    ### Random Aliases    By default - unless you specify a vanity URI for your alias each URL that is shortened on our platform will have a random string generated by the API. This means that if the &apos;alias&apos; attribute of a /aliases POST request is not provided, or is an empty string, a random string of seven characters will be generated and returned as part of the POST response.    You can also place the @**rnd** macro within the alias field when you create a new alias, for example /vanity/@rnd, which might return an alias like /vanity/ZMAefRt, or /vanity@rnd, which might produce something like /vanityMRtvxadf. Only the first @rnd in an alias attribute will be replaced.    ### NOTES    ( * ) All methods of the Shorten.REST API require that your API key be provided in **x-api-key** header.    (**) All API parameters are case sensitive
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClicksFilterModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:00.137658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClicksFilterModel {
  public static final String SERIALIZED_NAME_ALIAS_ID = "aliasId";
  @SerializedName(SERIALIZED_NAME_ALIAS_ID)
  private String aliasId;

  public static final String SERIALIZED_NAME_DATE_FROM = "dateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "dateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_LAST_ID = "lastId";
  @SerializedName(SERIALIZED_NAME_LAST_ID)
  private Integer lastId;

  public ClicksFilterModel() {
  }

  public ClicksFilterModel aliasId(String aliasId) {
    this.aliasId = aliasId;
    return this;
  }

  /**
   * Alias Id
   * @return aliasId
   */
  @javax.annotation.Nullable
  public String getAliasId() {
    return aliasId;
  }

  public void setAliasId(String aliasId) {
    this.aliasId = aliasId;
  }


  public ClicksFilterModel dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * date From
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public ClicksFilterModel dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * date To
   * @return dateTo
   */
  @javax.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }


  public ClicksFilterModel domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ClicksFilterModel lastId(Integer lastId) {
    this.lastId = lastId;
    return this;
  }

  /**
   * last Id
   * @return lastId
   */
  @javax.annotation.Nullable
  public Integer getLastId() {
    return lastId;
  }

  public void setLastId(Integer lastId) {
    this.lastId = lastId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClicksFilterModel clicksFilterModel = (ClicksFilterModel) o;
    return Objects.equals(this.aliasId, clicksFilterModel.aliasId) &&
        Objects.equals(this.dateFrom, clicksFilterModel.dateFrom) &&
        Objects.equals(this.dateTo, clicksFilterModel.dateTo) &&
        Objects.equals(this.domain, clicksFilterModel.domain) &&
        Objects.equals(this.lastId, clicksFilterModel.lastId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliasId, dateFrom, dateTo, domain, lastId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClicksFilterModel {\n");
    sb.append("    aliasId: ").append(toIndentedString(aliasId)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    lastId: ").append(toIndentedString(lastId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliasId");
    openapiFields.add("dateFrom");
    openapiFields.add("dateTo");
    openapiFields.add("domain");
    openapiFields.add("lastId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClicksFilterModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClicksFilterModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClicksFilterModel is not found in the empty JSON string", ClicksFilterModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClicksFilterModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClicksFilterModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aliasId") != null && !jsonObj.get("aliasId").isJsonNull()) && !jsonObj.get("aliasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasId").toString()));
      }
      if ((jsonObj.get("dateFrom") != null && !jsonObj.get("dateFrom").isJsonNull()) && !jsonObj.get("dateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFrom").toString()));
      }
      if ((jsonObj.get("dateTo") != null && !jsonObj.get("dateTo").isJsonNull()) && !jsonObj.get("dateTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTo").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClicksFilterModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClicksFilterModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClicksFilterModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClicksFilterModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ClicksFilterModel>() {
           @Override
           public void write(JsonWriter out, ClicksFilterModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClicksFilterModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClicksFilterModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClicksFilterModel
   * @throws IOException if the JSON string is invalid with respect to ClicksFilterModel
   */
  public static ClicksFilterModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClicksFilterModel.class);
  }

  /**
   * Convert an instance of ClicksFilterModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

