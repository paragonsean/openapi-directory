# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrdersData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, count: float=None, _date: str=None, paid: float=None, pending: float=None, total: float=None):
        """OrdersData - a model defined in OpenAPI

        :param average: The average of this OrdersData.
        :param count: The count of this OrdersData.
        :param _date: The _date of this OrdersData.
        :param paid: The paid of this OrdersData.
        :param pending: The pending of this OrdersData.
        :param total: The total of this OrdersData.
        """
        self.openapi_types = {
            'average': float,
            'count': float,
            '_date': str,
            'paid': float,
            'pending': float,
            'total': float
        }

        self.attribute_map = {
            'average': 'average',
            'count': 'count',
            '_date': 'date',
            'paid': 'paid',
            'pending': 'pending',
            'total': 'total'
        }

        self._average = average
        self._count = count
        self.__date = _date
        self._paid = paid
        self._pending = pending
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersData of this OrdersData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this OrdersData.


        :return: The average of this OrdersData.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this OrdersData.


        :param average: The average of this OrdersData.
        :type average: float
        """

        self._average = average

    @property
    def count(self):
        """Gets the count of this OrdersData.


        :return: The count of this OrdersData.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OrdersData.


        :param count: The count of this OrdersData.
        :type count: float
        """

        self._count = count

    @property
    def _date(self):
        """Gets the _date of this OrdersData.


        :return: The _date of this OrdersData.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OrdersData.


        :param _date: The _date of this OrdersData.
        :type _date: str
        """

        self.__date = _date

    @property
    def paid(self):
        """Gets the paid of this OrdersData.

        Total amount paid.

        :return: The paid of this OrdersData.
        :rtype: float
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this OrdersData.

        Total amount paid.

        :param paid: The paid of this OrdersData.
        :type paid: float
        """

        self._paid = paid

    @property
    def pending(self):
        """Gets the pending of this OrdersData.


        :return: The pending of this OrdersData.
        :rtype: float
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this OrdersData.


        :param pending: The pending of this OrdersData.
        :type pending: float
        """

        self._pending = pending

    @property
    def total(self):
        """Gets the total of this OrdersData.


        :return: The total of this OrdersData.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrdersData.


        :param total: The total of this OrdersData.
        :type total: float
        """

        self._total = total
