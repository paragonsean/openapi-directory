# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HookFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, event: str=None, id: int=None, name: str=None, url: str=None):
        """HookFields - a model defined in OpenAPI

        :param created_at: The created_at of this HookFields.
        :param event: The event of this HookFields.
        :param id: The id of this HookFields.
        :param name: The name of this HookFields.
        :param url: The url of this HookFields.
        """
        self.openapi_types = {
            'created_at': str,
            'event': str,
            'id': int,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'event': 'event',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._created_at = created_at
        self._event = event
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookFields of this HookFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this HookFields.

        Hook creation date

        :return: The created_at of this HookFields.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HookFields.

        Hook creation date

        :param created_at: The created_at of this HookFields.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this HookFields.

        Event associated with Hook

        :return: The event of this HookFields.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HookFields.

        Event associated with Hook

        :param event: The event of this HookFields.
        :type event: str
        """

        self._event = event

    @property
    def id(self):
        """Gets the id of this HookFields.

        Unique identifier of the Hook

        :return: The id of this HookFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HookFields.

        Unique identifier of the Hook

        :param id: The id of this HookFields.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HookFields.

        Hook name

        :return: The name of this HookFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HookFields.

        Hook name

        :param name: The name of this HookFields.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this HookFields.

        Hook URL to be notified

        :return: The url of this HookFields.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HookFields.

        Hook URL to be notified

        :param url: The url of this HookFields.
        :type url: str
        """

        self._url = url
