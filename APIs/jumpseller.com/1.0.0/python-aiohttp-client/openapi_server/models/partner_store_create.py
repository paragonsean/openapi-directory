# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartnerStoreCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aff: str=None, email: str=None, locale: str='en', password: str=None, plan_name: str='pro', reject_duplicates: bool=False, store_name: str=None):
        """PartnerStoreCreate - a model defined in OpenAPI

        :param aff: The aff of this PartnerStoreCreate.
        :param email: The email of this PartnerStoreCreate.
        :param locale: The locale of this PartnerStoreCreate.
        :param password: The password of this PartnerStoreCreate.
        :param plan_name: The plan_name of this PartnerStoreCreate.
        :param reject_duplicates: The reject_duplicates of this PartnerStoreCreate.
        :param store_name: The store_name of this PartnerStoreCreate.
        """
        self.openapi_types = {
            'aff': str,
            'email': str,
            'locale': str,
            'password': str,
            'plan_name': str,
            'reject_duplicates': bool,
            'store_name': str
        }

        self.attribute_map = {
            'aff': 'aff',
            'email': 'email',
            'locale': 'locale',
            'password': 'password',
            'plan_name': 'plan_name',
            'reject_duplicates': 'reject_duplicates',
            'store_name': 'store_name'
        }

        self._aff = aff
        self._email = email
        self._locale = locale
        self._password = password
        self._plan_name = plan_name
        self._reject_duplicates = reject_duplicates
        self._store_name = store_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartnerStoreCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartnerStoreCreate of this PartnerStoreCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aff(self):
        """Gets the aff of this PartnerStoreCreate.

        Partner code.

        :return: The aff of this PartnerStoreCreate.
        :rtype: str
        """
        return self._aff

    @aff.setter
    def aff(self, aff):
        """Sets the aff of this PartnerStoreCreate.

        Partner code.

        :param aff: The aff of this PartnerStoreCreate.
        :type aff: str
        """

        self._aff = aff

    @property
    def email(self):
        """Gets the email of this PartnerStoreCreate.

        New Store administrator email.

        :return: The email of this PartnerStoreCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PartnerStoreCreate.

        New Store administrator email.

        :param email: The email of this PartnerStoreCreate.
        :type email: str
        """

        self._email = email

    @property
    def locale(self):
        """Gets the locale of this PartnerStoreCreate.

        ISO3166-2 code for the store langauge.

        :return: The locale of this PartnerStoreCreate.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PartnerStoreCreate.

        ISO3166-2 code for the store langauge.

        :param locale: The locale of this PartnerStoreCreate.
        :type locale: str
        """

        self._locale = locale

    @property
    def password(self):
        """Gets the password of this PartnerStoreCreate.

        New Store administrator password.

        :return: The password of this PartnerStoreCreate.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PartnerStoreCreate.

        New Store administrator password.

        :param password: The password of this PartnerStoreCreate.
        :type password: str
        """

        self._password = password

    @property
    def plan_name(self):
        """Gets the plan_name of this PartnerStoreCreate.

        New Store plan name.

        :return: The plan_name of this PartnerStoreCreate.
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this PartnerStoreCreate.

        New Store plan name.

        :param plan_name: The plan_name of this PartnerStoreCreate.
        :type plan_name: str
        """
        allowed_values = ["pro", "plus", "premium"]  # noqa: E501
        if plan_name not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_name` ({0}), must be one of {1}"
                .format(plan_name, allowed_values)
            )

        self._plan_name = plan_name

    @property
    def reject_duplicates(self):
        """Gets the reject_duplicates of this PartnerStoreCreate.

        Indicates whether the request should fail if the Store name provided is already in use.

        :return: The reject_duplicates of this PartnerStoreCreate.
        :rtype: bool
        """
        return self._reject_duplicates

    @reject_duplicates.setter
    def reject_duplicates(self, reject_duplicates):
        """Sets the reject_duplicates of this PartnerStoreCreate.

        Indicates whether the request should fail if the Store name provided is already in use.

        :param reject_duplicates: The reject_duplicates of this PartnerStoreCreate.
        :type reject_duplicates: bool
        """

        self._reject_duplicates = reject_duplicates

    @property
    def store_name(self):
        """Gets the store_name of this PartnerStoreCreate.

        New Store name.

        :return: The store_name of this PartnerStoreCreate.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this PartnerStoreCreate.

        New Store name.

        :param store_name: The store_name of this PartnerStoreCreate.
        :type store_name: str
        """

        self._store_name = store_name
