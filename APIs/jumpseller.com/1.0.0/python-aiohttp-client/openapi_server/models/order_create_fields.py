# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_fields_with_billing_address_and_shipping_address_fields import CustomerFieldsWithBillingAddressAndShippingAddressFields
from openapi_server.models.order_product_order_create import OrderProductOrderCreate
from openapi_server import util


class OrderCreateFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: CustomerFieldsWithBillingAddressAndShippingAddressFields=None, products: List[OrderProductOrderCreate]=None, shipping_method_id: int=None, shipping_method_name: str=None, shipping_price: float=None, status: str=None):
        """OrderCreateFields - a model defined in OpenAPI

        :param customer: The customer of this OrderCreateFields.
        :param products: The products of this OrderCreateFields.
        :param shipping_method_id: The shipping_method_id of this OrderCreateFields.
        :param shipping_method_name: The shipping_method_name of this OrderCreateFields.
        :param shipping_price: The shipping_price of this OrderCreateFields.
        :param status: The status of this OrderCreateFields.
        """
        self.openapi_types = {
            'customer': CustomerFieldsWithBillingAddressAndShippingAddressFields,
            'products': List[OrderProductOrderCreate],
            'shipping_method_id': int,
            'shipping_method_name': str,
            'shipping_price': float,
            'status': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'products': 'products',
            'shipping_method_id': 'shipping_method_id',
            'shipping_method_name': 'shipping_method_name',
            'shipping_price': 'shipping_price',
            'status': 'status'
        }

        self._customer = customer
        self._products = products
        self._shipping_method_id = shipping_method_id
        self._shipping_method_name = shipping_method_name
        self._shipping_price = shipping_price
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderCreateFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderCreateFields of this OrderCreateFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this OrderCreateFields.


        :return: The customer of this OrderCreateFields.
        :rtype: CustomerFieldsWithBillingAddressAndShippingAddressFields
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this OrderCreateFields.


        :param customer: The customer of this OrderCreateFields.
        :type customer: CustomerFieldsWithBillingAddressAndShippingAddressFields
        """

        self._customer = customer

    @property
    def products(self):
        """Gets the products of this OrderCreateFields.


        :return: The products of this OrderCreateFields.
        :rtype: List[OrderProductOrderCreate]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this OrderCreateFields.


        :param products: The products of this OrderCreateFields.
        :type products: List[OrderProductOrderCreate]
        """

        self._products = products

    @property
    def shipping_method_id(self):
        """Gets the shipping_method_id of this OrderCreateFields.

        Shipping method id

        :return: The shipping_method_id of this OrderCreateFields.
        :rtype: int
        """
        return self._shipping_method_id

    @shipping_method_id.setter
    def shipping_method_id(self, shipping_method_id):
        """Sets the shipping_method_id of this OrderCreateFields.

        Shipping method id

        :param shipping_method_id: The shipping_method_id of this OrderCreateFields.
        :type shipping_method_id: int
        """

        self._shipping_method_id = shipping_method_id

    @property
    def shipping_method_name(self):
        """Gets the shipping_method_name of this OrderCreateFields.

        Shipping method name e.g. Royal Mail

        :return: The shipping_method_name of this OrderCreateFields.
        :rtype: str
        """
        return self._shipping_method_name

    @shipping_method_name.setter
    def shipping_method_name(self, shipping_method_name):
        """Sets the shipping_method_name of this OrderCreateFields.

        Shipping method name e.g. Royal Mail

        :param shipping_method_name: The shipping_method_name of this OrderCreateFields.
        :type shipping_method_name: str
        """

        self._shipping_method_name = shipping_method_name

    @property
    def shipping_price(self):
        """Gets the shipping_price of this OrderCreateFields.

        Shipping method's price (applicable if shipping_method_name is provided instead of a shipping_method_id)

        :return: The shipping_price of this OrderCreateFields.
        :rtype: float
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this OrderCreateFields.

        Shipping method's price (applicable if shipping_method_name is provided instead of a shipping_method_id)

        :param shipping_price: The shipping_price of this OrderCreateFields.
        :type shipping_price: float
        """

        self._shipping_price = shipping_price

    @property
    def status(self):
        """Gets the status of this OrderCreateFields.

        Status of the Order

        :return: The status of this OrderCreateFields.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderCreateFields.

        Status of the Order

        :param status: The status of this OrderCreateFields.
        :type status: str
        """
        allowed_values = ["Abandoned", "Canceled", "Pending Payment", "Paid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
