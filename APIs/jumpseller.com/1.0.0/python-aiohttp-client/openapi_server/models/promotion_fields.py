# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.id import Id
from openapi_server import util


class PromotionFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begins_at: str=None, categories: List[Id]=None, code: str=None, condition_price: float=None, condition_qty: int=None, cumulative: bool=False, customer_categories: List[Id]=None, discount_amount_fix: float=None, discount_amount_percent: float=None, discount_target: str=None, enabled: bool=True, expires_at: str=None, id: int=None, lasts: str=None, max_times_used: int=None, name: str=None, products: List[Id]=None, products_x: List[Id]=None, quantity_x: int=None, status: str=None, times_used: int=None):
        """PromotionFields - a model defined in OpenAPI

        :param begins_at: The begins_at of this PromotionFields.
        :param categories: The categories of this PromotionFields.
        :param code: The code of this PromotionFields.
        :param condition_price: The condition_price of this PromotionFields.
        :param condition_qty: The condition_qty of this PromotionFields.
        :param cumulative: The cumulative of this PromotionFields.
        :param customer_categories: The customer_categories of this PromotionFields.
        :param discount_amount_fix: The discount_amount_fix of this PromotionFields.
        :param discount_amount_percent: The discount_amount_percent of this PromotionFields.
        :param discount_target: The discount_target of this PromotionFields.
        :param enabled: The enabled of this PromotionFields.
        :param expires_at: The expires_at of this PromotionFields.
        :param id: The id of this PromotionFields.
        :param lasts: The lasts of this PromotionFields.
        :param max_times_used: The max_times_used of this PromotionFields.
        :param name: The name of this PromotionFields.
        :param products: The products of this PromotionFields.
        :param products_x: The products_x of this PromotionFields.
        :param quantity_x: The quantity_x of this PromotionFields.
        :param status: The status of this PromotionFields.
        :param times_used: The times_used of this PromotionFields.
        """
        self.openapi_types = {
            'begins_at': str,
            'categories': List[Id],
            'code': str,
            'condition_price': float,
            'condition_qty': int,
            'cumulative': bool,
            'customer_categories': List[Id],
            'discount_amount_fix': float,
            'discount_amount_percent': float,
            'discount_target': str,
            'enabled': bool,
            'expires_at': str,
            'id': int,
            'lasts': str,
            'max_times_used': int,
            'name': str,
            'products': List[Id],
            'products_x': List[Id],
            'quantity_x': int,
            'status': str,
            'times_used': int
        }

        self.attribute_map = {
            'begins_at': 'begins_at',
            'categories': 'categories',
            'code': 'code',
            'condition_price': 'condition_price',
            'condition_qty': 'condition_qty',
            'cumulative': 'cumulative',
            'customer_categories': 'customer_categories',
            'discount_amount_fix': 'discount_amount_fix',
            'discount_amount_percent': 'discount_amount_percent',
            'discount_target': 'discount_target',
            'enabled': 'enabled',
            'expires_at': 'expires_at',
            'id': 'id',
            'lasts': 'lasts',
            'max_times_used': 'max_times_used',
            'name': 'name',
            'products': 'products',
            'products_x': 'products_x',
            'quantity_x': 'quantity_x',
            'status': 'status',
            'times_used': 'times_used'
        }

        self._begins_at = begins_at
        self._categories = categories
        self._code = code
        self._condition_price = condition_price
        self._condition_qty = condition_qty
        self._cumulative = cumulative
        self._customer_categories = customer_categories
        self._discount_amount_fix = discount_amount_fix
        self._discount_amount_percent = discount_amount_percent
        self._discount_target = discount_target
        self._enabled = enabled
        self._expires_at = expires_at
        self._id = id
        self._lasts = lasts
        self._max_times_used = max_times_used
        self._name = name
        self._products = products
        self._products_x = products_x
        self._quantity_x = quantity_x
        self._status = status
        self._times_used = times_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionFields of this PromotionFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begins_at(self):
        """Gets the begins_at of this PromotionFields.

        Creation date of the promotion (requires 'lasts' param - 'date')

        :return: The begins_at of this PromotionFields.
        :rtype: str
        """
        return self._begins_at

    @begins_at.setter
    def begins_at(self, begins_at):
        """Sets the begins_at of this PromotionFields.

        Creation date of the promotion (requires 'lasts' param - 'date')

        :param begins_at: The begins_at of this PromotionFields.
        :type begins_at: str
        """

        self._begins_at = begins_at

    @property
    def categories(self):
        """Gets the categories of this PromotionFields.

        Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')

        :return: The categories of this PromotionFields.
        :rtype: List[Id]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this PromotionFields.

        Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')

        :param categories: The categories of this PromotionFields.
        :type categories: List[Id]
        """

        self._categories = categories

    @property
    def code(self):
        """Gets the code of this PromotionFields.

        Code of the promotion

        :return: The code of this PromotionFields.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PromotionFields.

        Code of the promotion

        :param code: The code of this PromotionFields.
        :type code: str
        """

        self._code = code

    @property
    def condition_price(self):
        """Gets the condition_price of this PromotionFields.

        Minimum order amount to validate the promotion

        :return: The condition_price of this PromotionFields.
        :rtype: float
        """
        return self._condition_price

    @condition_price.setter
    def condition_price(self, condition_price):
        """Sets the condition_price of this PromotionFields.

        Minimum order amount to validate the promotion

        :param condition_price: The condition_price of this PromotionFields.
        :type condition_price: float
        """

        self._condition_price = condition_price

    @property
    def condition_qty(self):
        """Gets the condition_qty of this PromotionFields.

        Minimum quantity of ordered itens to validate the promotion

        :return: The condition_qty of this PromotionFields.
        :rtype: int
        """
        return self._condition_qty

    @condition_qty.setter
    def condition_qty(self, condition_qty):
        """Sets the condition_qty of this PromotionFields.

        Minimum quantity of ordered itens to validate the promotion

        :param condition_qty: The condition_qty of this PromotionFields.
        :type condition_qty: int
        """

        self._condition_qty = condition_qty

    @property
    def cumulative(self):
        """Gets the cumulative of this PromotionFields.

        True if the promotion can be acumulated with others

        :return: The cumulative of this PromotionFields.
        :rtype: bool
        """
        return self._cumulative

    @cumulative.setter
    def cumulative(self, cumulative):
        """Sets the cumulative of this PromotionFields.

        True if the promotion can be acumulated with others

        :param cumulative: The cumulative of this PromotionFields.
        :type cumulative: bool
        """

        self._cumulative = cumulative

    @property
    def customer_categories(self):
        """Gets the customer_categories of this PromotionFields.

        Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')

        :return: The customer_categories of this PromotionFields.
        :rtype: List[Id]
        """
        return self._customer_categories

    @customer_categories.setter
    def customer_categories(self, customer_categories):
        """Sets the customer_categories of this PromotionFields.

        Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')

        :param customer_categories: The customer_categories of this PromotionFields.
        :type customer_categories: List[Id]
        """

        self._customer_categories = customer_categories

    @property
    def discount_amount_fix(self):
        """Gets the discount_amount_fix of this PromotionFields.

        Fixed discount amount of the promotion

        :return: The discount_amount_fix of this PromotionFields.
        :rtype: float
        """
        return self._discount_amount_fix

    @discount_amount_fix.setter
    def discount_amount_fix(self, discount_amount_fix):
        """Sets the discount_amount_fix of this PromotionFields.

        Fixed discount amount of the promotion

        :param discount_amount_fix: The discount_amount_fix of this PromotionFields.
        :type discount_amount_fix: float
        """

        self._discount_amount_fix = discount_amount_fix

    @property
    def discount_amount_percent(self):
        """Gets the discount_amount_percent of this PromotionFields.

        Percentual discount amount of the promotion

        :return: The discount_amount_percent of this PromotionFields.
        :rtype: float
        """
        return self._discount_amount_percent

    @discount_amount_percent.setter
    def discount_amount_percent(self, discount_amount_percent):
        """Sets the discount_amount_percent of this PromotionFields.

        Percentual discount amount of the promotion

        :param discount_amount_percent: The discount_amount_percent of this PromotionFields.
        :type discount_amount_percent: float
        """

        self._discount_amount_percent = discount_amount_percent

    @property
    def discount_target(self):
        """Gets the discount_target of this PromotionFields.

        Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)

        :return: The discount_target of this PromotionFields.
        :rtype: str
        """
        return self._discount_target

    @discount_target.setter
    def discount_target(self, discount_target):
        """Sets the discount_target of this PromotionFields.

        Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)

        :param discount_target: The discount_target of this PromotionFields.
        :type discount_target: str
        """

        self._discount_target = discount_target

    @property
    def enabled(self):
        """Gets the enabled of this PromotionFields.

        If the promotion is currently enabled

        :return: The enabled of this PromotionFields.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PromotionFields.

        If the promotion is currently enabled

        :param enabled: The enabled of this PromotionFields.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def expires_at(self):
        """Gets the expires_at of this PromotionFields.

        Expiration date of the promotion (requires 'lasts' param - 'date')

        :return: The expires_at of this PromotionFields.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PromotionFields.

        Expiration date of the promotion (requires 'lasts' param - 'date')

        :param expires_at: The expires_at of this PromotionFields.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this PromotionFields.

        Unique identifier of the product

        :return: The id of this PromotionFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionFields.

        Unique identifier of the product

        :param id: The id of this PromotionFields.
        :type id: int
        """

        self._id = id

    @property
    def lasts(self):
        """Gets the lasts of this PromotionFields.

        Controls when the promotion will expire ('none', 'date', 'max_times_used')

        :return: The lasts of this PromotionFields.
        :rtype: str
        """
        return self._lasts

    @lasts.setter
    def lasts(self, lasts):
        """Sets the lasts of this PromotionFields.

        Controls when the promotion will expire ('none', 'date', 'max_times_used')

        :param lasts: The lasts of this PromotionFields.
        :type lasts: str
        """

        self._lasts = lasts

    @property
    def max_times_used(self):
        """Gets the max_times_used of this PromotionFields.

        Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')

        :return: The max_times_used of this PromotionFields.
        :rtype: int
        """
        return self._max_times_used

    @max_times_used.setter
    def max_times_used(self, max_times_used):
        """Sets the max_times_used of this PromotionFields.

        Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')

        :param max_times_used: The max_times_used of this PromotionFields.
        :type max_times_used: int
        """

        self._max_times_used = max_times_used

    @property
    def name(self):
        """Gets the name of this PromotionFields.

        Name of the product

        :return: The name of this PromotionFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionFields.

        Name of the product

        :param name: The name of this PromotionFields.
        :type name: str
        """

        self._name = name

    @property
    def products(self):
        """Gets the products of this PromotionFields.

        Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')

        :return: The products of this PromotionFields.
        :rtype: List[Id]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this PromotionFields.

        Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')

        :param products: The products of this PromotionFields.
        :type products: List[Id]
        """

        self._products = products

    @property
    def products_x(self):
        """Gets the products_x of this PromotionFields.

        Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')

        :return: The products_x of this PromotionFields.
        :rtype: List[Id]
        """
        return self._products_x

    @products_x.setter
    def products_x(self, products_x):
        """Sets the products_x of this PromotionFields.

        Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')

        :param products_x: The products_x of this PromotionFields.
        :type products_x: List[Id]
        """

        self._products_x = products_x

    @property
    def quantity_x(self):
        """Gets the quantity_x of this PromotionFields.

        Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')

        :return: The quantity_x of this PromotionFields.
        :rtype: int
        """
        return self._quantity_x

    @quantity_x.setter
    def quantity_x(self, quantity_x):
        """Sets the quantity_x of this PromotionFields.

        Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')

        :param quantity_x: The quantity_x of this PromotionFields.
        :type quantity_x: int
        """

        self._quantity_x = quantity_x

    @property
    def status(self):
        """Gets the status of this PromotionFields.

        Status of the promotion ('active', 'expired')

        :return: The status of this PromotionFields.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PromotionFields.

        Status of the promotion ('active', 'expired')

        :param status: The status of this PromotionFields.
        :type status: str
        """

        self._status = status

    @property
    def times_used(self):
        """Gets the times_used of this PromotionFields.

        Amount of times the promotion was used

        :return: The times_used of this PromotionFields.
        :rtype: int
        """
        return self._times_used

    @times_used.setter
    def times_used(self, times_used):
        """Sets the times_used of this PromotionFields.

        Amount of times the promotion was used

        :param times_used: The times_used of this PromotionFields.
        :type times_used: int
        """

        self._times_used = times_used
