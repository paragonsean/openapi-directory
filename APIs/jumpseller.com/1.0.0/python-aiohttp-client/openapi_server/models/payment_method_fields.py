# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentMethodFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, type: str=None):
        """PaymentMethodFields - a model defined in OpenAPI

        :param id: The id of this PaymentMethodFields.
        :param name: The name of this PaymentMethodFields.
        :param type: The type of this PaymentMethodFields.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodFields of this PaymentMethodFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PaymentMethodFields.

        Unique identifier of the Payment Method

        :return: The id of this PaymentMethodFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethodFields.

        Unique identifier of the Payment Method

        :param id: The id of this PaymentMethodFields.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PaymentMethodFields.

        Name of the Payment Method

        :return: The name of this PaymentMethodFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethodFields.

        Name of the Payment Method

        :param name: The name of this PaymentMethodFields.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PaymentMethodFields.

        Type of the Payment Method

        :return: The type of this PaymentMethodFields.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethodFields.

        Type of the Payment Method

        :param type: The type of this PaymentMethodFields.
        :type type: str
        """
        allowed_values = ["manual", "paypal", "pagseguro", "moneybookers", "webpay_cl", "easypay", "easypaycc", "easypayboleto", "ideal_basic", "hipay", "khipu", "mercado_pago", "ifthenpay", "eupago", "stripe", "payu", "servipag"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
