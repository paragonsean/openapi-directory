# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orders_data import OrdersData
from openapi_server import util


class StoreStatsOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, count: int=None, data: List[OrdersData]=None, total: float=None):
        """StoreStatsOrders - a model defined in OpenAPI

        :param average: The average of this StoreStatsOrders.
        :param count: The count of this StoreStatsOrders.
        :param data: The data of this StoreStatsOrders.
        :param total: The total of this StoreStatsOrders.
        """
        self.openapi_types = {
            'average': float,
            'count': int,
            'data': List[OrdersData],
            'total': float
        }

        self.attribute_map = {
            'average': 'average',
            'count': 'count',
            'data': 'data',
            'total': 'total'
        }

        self._average = average
        self._count = count
        self._data = data
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreStatsOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreStats_orders of this StoreStatsOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this StoreStatsOrders.

        Average order amount.

        :return: The average of this StoreStatsOrders.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this StoreStatsOrders.

        Average order amount.

        :param average: The average of this StoreStatsOrders.
        :type average: float
        """

        self._average = average

    @property
    def count(self):
        """Gets the count of this StoreStatsOrders.

        Total number of orders.

        :return: The count of this StoreStatsOrders.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StoreStatsOrders.

        Total number of orders.

        :param count: The count of this StoreStatsOrders.
        :type count: int
        """

        self._count = count

    @property
    def data(self):
        """Gets the data of this StoreStatsOrders.

        Orders data.

        :return: The data of this StoreStatsOrders.
        :rtype: List[OrdersData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StoreStatsOrders.

        Orders data.

        :param data: The data of this StoreStatsOrders.
        :type data: List[OrdersData]
        """

        self._data = data

    @property
    def total(self):
        """Gets the total of this StoreStatsOrders.

        Total amount from all orders.

        :return: The total of this StoreStatsOrders.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this StoreStatsOrders.

        Total amount from all orders.

        :param total: The total of this StoreStatsOrders.
        :type total: float
        """

        self._total = total
