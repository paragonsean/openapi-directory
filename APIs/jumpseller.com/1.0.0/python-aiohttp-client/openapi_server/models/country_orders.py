# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region_orders import RegionOrders
from openapi_server import util


class CountryOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, count: int=None, country: str=None, orders: List[RegionOrders]=None):
        """CountryOrders - a model defined in OpenAPI

        :param code: The code of this CountryOrders.
        :param count: The count of this CountryOrders.
        :param country: The country of this CountryOrders.
        :param orders: The orders of this CountryOrders.
        """
        self.openapi_types = {
            'code': str,
            'count': int,
            'country': str,
            'orders': List[RegionOrders]
        }

        self.attribute_map = {
            'code': 'code',
            'count': 'count',
            'country': 'country',
            'orders': 'orders'
        }

        self._code = code
        self._count = count
        self._country = country
        self._orders = orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryOrders of this CountryOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CountryOrders.


        :return: The code of this CountryOrders.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CountryOrders.


        :param code: The code of this CountryOrders.
        :type code: str
        """

        self._code = code

    @property
    def count(self):
        """Gets the count of this CountryOrders.

        Number of country orders.

        :return: The count of this CountryOrders.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CountryOrders.

        Number of country orders.

        :param count: The count of this CountryOrders.
        :type count: int
        """

        self._count = count

    @property
    def country(self):
        """Gets the country of this CountryOrders.


        :return: The country of this CountryOrders.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryOrders.


        :param country: The country of this CountryOrders.
        :type country: str
        """

        self._country = country

    @property
    def orders(self):
        """Gets the orders of this CountryOrders.

        Orders per region.

        :return: The orders of this CountryOrders.
        :rtype: List[RegionOrders]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this CountryOrders.

        Orders per region.

        :param orders: The orders of this CountryOrders.
        :type orders: List[RegionOrders]
        """

        self._orders = orders
