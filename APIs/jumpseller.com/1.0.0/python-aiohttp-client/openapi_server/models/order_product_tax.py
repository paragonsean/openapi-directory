# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderProductTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed: bool=False, id: int=None, name: str=None, rate: float=None, tax_on_product_price: bool=False):
        """OrderProductTax - a model defined in OpenAPI

        :param fixed: The fixed of this OrderProductTax.
        :param id: The id of this OrderProductTax.
        :param name: The name of this OrderProductTax.
        :param rate: The rate of this OrderProductTax.
        :param tax_on_product_price: The tax_on_product_price of this OrderProductTax.
        """
        self.openapi_types = {
            'fixed': bool,
            'id': int,
            'name': str,
            'rate': float,
            'tax_on_product_price': bool
        }

        self.attribute_map = {
            'fixed': 'fixed',
            'id': 'id',
            'name': 'name',
            'rate': 'rate',
            'tax_on_product_price': 'tax_on_product_price'
        }

        self._fixed = fixed
        self._id = id
        self._name = name
        self._rate = rate
        self._tax_on_product_price = tax_on_product_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderProductTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderProductTax of this OrderProductTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed(self):
        """Gets the fixed of this OrderProductTax.

        False if rate is a percentage and true if rate is monetary

        :return: The fixed of this OrderProductTax.
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this OrderProductTax.

        False if rate is a percentage and true if rate is monetary

        :param fixed: The fixed of this OrderProductTax.
        :type fixed: bool
        """

        self._fixed = fixed

    @property
    def id(self):
        """Gets the id of this OrderProductTax.

        Unique identifier of the Order Product Tax

        :return: The id of this OrderProductTax.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderProductTax.

        Unique identifier of the Order Product Tax

        :param id: The id of this OrderProductTax.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrderProductTax.

        Name of the category that the tax is associated with or the tax name

        :return: The name of this OrderProductTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderProductTax.

        Name of the category that the tax is associated with or the tax name

        :param name: The name of this OrderProductTax.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this OrderProductTax.

        Tax rate

        :return: The rate of this OrderProductTax.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this OrderProductTax.

        Tax rate

        :param rate: The rate of this OrderProductTax.
        :type rate: float
        """

        self._rate = rate

    @property
    def tax_on_product_price(self):
        """Gets the tax_on_product_price of this OrderProductTax.

        False if tax is not included on product price

        :return: The tax_on_product_price of this OrderProductTax.
        :rtype: bool
        """
        return self._tax_on_product_price

    @tax_on_product_price.setter
    def tax_on_product_price(self, tax_on_product_price):
        """Sets the tax_on_product_price of this OrderProductTax.

        False if tax is not included on product price

        :param tax_on_product_price: The tax_on_product_price of this OrderProductTax.
        :type tax_on_product_price: bool
        """

        self._tax_on_product_price = tax_on_product_price
