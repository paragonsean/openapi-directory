# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_address import BillingAddress
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server import util


class CustomerFieldsWithPasswordNoID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: BillingAddress=None, customer_category: List[int]=None, email: str=None, password: str=None, phone: str=None, shipping_address: ShippingAddress=None, status: str=None):
        """CustomerFieldsWithPasswordNoID - a model defined in OpenAPI

        :param billing_address: The billing_address of this CustomerFieldsWithPasswordNoID.
        :param customer_category: The customer_category of this CustomerFieldsWithPasswordNoID.
        :param email: The email of this CustomerFieldsWithPasswordNoID.
        :param password: The password of this CustomerFieldsWithPasswordNoID.
        :param phone: The phone of this CustomerFieldsWithPasswordNoID.
        :param shipping_address: The shipping_address of this CustomerFieldsWithPasswordNoID.
        :param status: The status of this CustomerFieldsWithPasswordNoID.
        """
        self.openapi_types = {
            'billing_address': BillingAddress,
            'customer_category': List[int],
            'email': str,
            'password': str,
            'phone': str,
            'shipping_address': ShippingAddress,
            'status': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'customer_category': 'customer_category',
            'email': 'email',
            'password': 'password',
            'phone': 'phone',
            'shipping_address': 'shipping_address',
            'status': 'status'
        }

        self._billing_address = billing_address
        self._customer_category = customer_category
        self._email = email
        self._password = password
        self._phone = phone
        self._shipping_address = shipping_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerFieldsWithPasswordNoID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerFieldsWithPasswordNoID of this CustomerFieldsWithPasswordNoID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this CustomerFieldsWithPasswordNoID.


        :return: The billing_address of this CustomerFieldsWithPasswordNoID.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CustomerFieldsWithPasswordNoID.


        :param billing_address: The billing_address of this CustomerFieldsWithPasswordNoID.
        :type billing_address: BillingAddress
        """

        self._billing_address = billing_address

    @property
    def customer_category(self):
        """Gets the customer_category of this CustomerFieldsWithPasswordNoID.


        :return: The customer_category of this CustomerFieldsWithPasswordNoID.
        :rtype: List[int]
        """
        return self._customer_category

    @customer_category.setter
    def customer_category(self, customer_category):
        """Sets the customer_category of this CustomerFieldsWithPasswordNoID.


        :param customer_category: The customer_category of this CustomerFieldsWithPasswordNoID.
        :type customer_category: List[int]
        """

        self._customer_category = customer_category

    @property
    def email(self):
        """Gets the email of this CustomerFieldsWithPasswordNoID.

        Email of the Customer

        :return: The email of this CustomerFieldsWithPasswordNoID.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerFieldsWithPasswordNoID.

        Email of the Customer

        :param email: The email of this CustomerFieldsWithPasswordNoID.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this CustomerFieldsWithPasswordNoID.

        Password

        :return: The password of this CustomerFieldsWithPasswordNoID.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomerFieldsWithPasswordNoID.

        Password

        :param password: The password of this CustomerFieldsWithPasswordNoID.
        :type password: str
        """

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this CustomerFieldsWithPasswordNoID.

        Phone of the Customer

        :return: The phone of this CustomerFieldsWithPasswordNoID.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerFieldsWithPasswordNoID.

        Phone of the Customer

        :param phone: The phone of this CustomerFieldsWithPasswordNoID.
        :type phone: str
        """

        self._phone = phone

    @property
    def shipping_address(self):
        """Gets the shipping_address of this CustomerFieldsWithPasswordNoID.


        :return: The shipping_address of this CustomerFieldsWithPasswordNoID.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this CustomerFieldsWithPasswordNoID.


        :param shipping_address: The shipping_address of this CustomerFieldsWithPasswordNoID.
        :type shipping_address: ShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this CustomerFieldsWithPasswordNoID.

        Status of the Customer

        :return: The status of this CustomerFieldsWithPasswordNoID.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerFieldsWithPasswordNoID.

        Status of the Customer

        :param status: The status of this CustomerFieldsWithPasswordNoID.
        :type status: str
        """
        allowed_values = ["approved", "pending", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
