# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_fields import CategoryFields
from openapi_server import util


class ProductEditFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, categories: List[CategoryFields]=None, description: str=None, diameter: float=None, featured: bool=False, google_product_category: str=None, height: float=None, length: float=None, meta_description: str=None, name: str=None, package_format: str='box', page_title: str=None, permalink: str=None, price: float=None, shipping_required: bool=True, sku: str=None, status: str='available', stock: int=100, stock_unlimited: bool=None, weight: float=1, width: float=None):
        """ProductEditFields - a model defined in OpenAPI

        :param barcode: The barcode of this ProductEditFields.
        :param categories: The categories of this ProductEditFields.
        :param description: The description of this ProductEditFields.
        :param diameter: The diameter of this ProductEditFields.
        :param featured: The featured of this ProductEditFields.
        :param google_product_category: The google_product_category of this ProductEditFields.
        :param height: The height of this ProductEditFields.
        :param length: The length of this ProductEditFields.
        :param meta_description: The meta_description of this ProductEditFields.
        :param name: The name of this ProductEditFields.
        :param package_format: The package_format of this ProductEditFields.
        :param page_title: The page_title of this ProductEditFields.
        :param permalink: The permalink of this ProductEditFields.
        :param price: The price of this ProductEditFields.
        :param shipping_required: The shipping_required of this ProductEditFields.
        :param sku: The sku of this ProductEditFields.
        :param status: The status of this ProductEditFields.
        :param stock: The stock of this ProductEditFields.
        :param stock_unlimited: The stock_unlimited of this ProductEditFields.
        :param weight: The weight of this ProductEditFields.
        :param width: The width of this ProductEditFields.
        """
        self.openapi_types = {
            'barcode': str,
            'categories': List[CategoryFields],
            'description': str,
            'diameter': float,
            'featured': bool,
            'google_product_category': str,
            'height': float,
            'length': float,
            'meta_description': str,
            'name': str,
            'package_format': str,
            'page_title': str,
            'permalink': str,
            'price': float,
            'shipping_required': bool,
            'sku': str,
            'status': str,
            'stock': int,
            'stock_unlimited': bool,
            'weight': float,
            'width': float
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'categories': 'categories',
            'description': 'description',
            'diameter': 'diameter',
            'featured': 'featured',
            'google_product_category': 'google_product_category',
            'height': 'height',
            'length': 'length',
            'meta_description': 'meta_description',
            'name': 'name',
            'package_format': 'package_format',
            'page_title': 'page_title',
            'permalink': 'permalink',
            'price': 'price',
            'shipping_required': 'shipping_required',
            'sku': 'sku',
            'status': 'status',
            'stock': 'stock',
            'stock_unlimited': 'stock_unlimited',
            'weight': 'weight',
            'width': 'width'
        }

        self._barcode = barcode
        self._categories = categories
        self._description = description
        self._diameter = diameter
        self._featured = featured
        self._google_product_category = google_product_category
        self._height = height
        self._length = length
        self._meta_description = meta_description
        self._name = name
        self._package_format = package_format
        self._page_title = page_title
        self._permalink = permalink
        self._price = price
        self._shipping_required = shipping_required
        self._sku = sku
        self._status = status
        self._stock = stock
        self._stock_unlimited = stock_unlimited
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductEditFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductEditFields of this ProductEditFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this ProductEditFields.

        Barcode of the product

        :return: The barcode of this ProductEditFields.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductEditFields.

        Barcode of the product

        :param barcode: The barcode of this ProductEditFields.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def categories(self):
        """Gets the categories of this ProductEditFields.


        :return: The categories of this ProductEditFields.
        :rtype: List[CategoryFields]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProductEditFields.


        :param categories: The categories of this ProductEditFields.
        :type categories: List[CategoryFields]
        """

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this ProductEditFields.

        Description of the product

        :return: The description of this ProductEditFields.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductEditFields.

        Description of the product

        :param description: The description of this ProductEditFields.
        :type description: str
        """

        self._description = description

    @property
    def diameter(self):
        """Gets the diameter of this ProductEditFields.

        Diameter of the product

        :return: The diameter of this ProductEditFields.
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this ProductEditFields.

        Diameter of the product

        :param diameter: The diameter of this ProductEditFields.
        :type diameter: float
        """

        self._diameter = diameter

    @property
    def featured(self):
        """Gets the featured of this ProductEditFields.

        True if the product is featured

        :return: The featured of this ProductEditFields.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this ProductEditFields.

        True if the product is featured

        :param featured: The featured of this ProductEditFields.
        :type featured: bool
        """

        self._featured = featured

    @property
    def google_product_category(self):
        """Gets the google_product_category of this ProductEditFields.

        Category of a Product based on the Google product taxonomy

        :return: The google_product_category of this ProductEditFields.
        :rtype: str
        """
        return self._google_product_category

    @google_product_category.setter
    def google_product_category(self, google_product_category):
        """Sets the google_product_category of this ProductEditFields.

        Category of a Product based on the Google product taxonomy

        :param google_product_category: The google_product_category of this ProductEditFields.
        :type google_product_category: str
        """

        self._google_product_category = google_product_category

    @property
    def height(self):
        """Gets the height of this ProductEditFields.

        Height of the product

        :return: The height of this ProductEditFields.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductEditFields.

        Height of the product

        :param height: The height of this ProductEditFields.
        :type height: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this ProductEditFields.

        Length of the product

        :return: The length of this ProductEditFields.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ProductEditFields.

        Length of the product

        :param length: The length of this ProductEditFields.
        :type length: float
        """

        self._length = length

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductEditFields.

        SEO meta description of the product

        :return: The meta_description of this ProductEditFields.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductEditFields.

        SEO meta description of the product

        :param meta_description: The meta_description of this ProductEditFields.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def name(self):
        """Gets the name of this ProductEditFields.

        Name of the product

        :return: The name of this ProductEditFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductEditFields.

        Name of the product

        :param name: The name of this ProductEditFields.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def package_format(self):
        """Gets the package_format of this ProductEditFields.

        Format the product package

        :return: The package_format of this ProductEditFields.
        :rtype: str
        """
        return self._package_format

    @package_format.setter
    def package_format(self, package_format):
        """Sets the package_format of this ProductEditFields.

        Format the product package

        :param package_format: The package_format of this ProductEditFields.
        :type package_format: str
        """
        allowed_values = ["box", "cylinder"]  # noqa: E501
        if package_format not in allowed_values:
            raise ValueError(
                "Invalid value for `package_format` ({0}), must be one of {1}"
                .format(package_format, allowed_values)
            )

        self._package_format = package_format

    @property
    def page_title(self):
        """Gets the page_title of this ProductEditFields.

        SEO title of the product

        :return: The page_title of this ProductEditFields.
        :rtype: str
        """
        return self._page_title

    @page_title.setter
    def page_title(self, page_title):
        """Sets the page_title of this ProductEditFields.

        SEO title of the product

        :param page_title: The page_title of this ProductEditFields.
        :type page_title: str
        """

        self._page_title = page_title

    @property
    def permalink(self):
        """Gets the permalink of this ProductEditFields.

        Product unique URL path

        :return: The permalink of this ProductEditFields.
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this ProductEditFields.

        Product unique URL path

        :param permalink: The permalink of this ProductEditFields.
        :type permalink: str
        """

        self._permalink = permalink

    @property
    def price(self):
        """Gets the price of this ProductEditFields.

        Price of the product

        :return: The price of this ProductEditFields.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductEditFields.

        Price of the product

        :param price: The price of this ProductEditFields.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def shipping_required(self):
        """Gets the shipping_required of this ProductEditFields.

        False if the product is digital

        :return: The shipping_required of this ProductEditFields.
        :rtype: bool
        """
        return self._shipping_required

    @shipping_required.setter
    def shipping_required(self, shipping_required):
        """Sets the shipping_required of this ProductEditFields.

        False if the product is digital

        :param shipping_required: The shipping_required of this ProductEditFields.
        :type shipping_required: bool
        """

        self._shipping_required = shipping_required

    @property
    def sku(self):
        """Gets the sku of this ProductEditFields.

        Stock Keeping Unit of the product

        :return: The sku of this ProductEditFields.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductEditFields.

        Stock Keeping Unit of the product

        :param sku: The sku of this ProductEditFields.
        :type sku: str
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this ProductEditFields.

        Status of the product

        :return: The status of this ProductEditFields.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductEditFields.

        Status of the product

        :param status: The status of this ProductEditFields.
        :type status: str
        """
        allowed_values = ["available", "not-available", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stock(self):
        """Gets the stock of this ProductEditFields.

        Quantity in stock for the product

        :return: The stock of this ProductEditFields.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this ProductEditFields.

        Quantity in stock for the product

        :param stock: The stock of this ProductEditFields.
        :type stock: int
        """

        self._stock = stock

    @property
    def stock_unlimited(self):
        """Gets the stock_unlimited of this ProductEditFields.

        True if the Product has unlimited stock

        :return: The stock_unlimited of this ProductEditFields.
        :rtype: bool
        """
        return self._stock_unlimited

    @stock_unlimited.setter
    def stock_unlimited(self, stock_unlimited):
        """Sets the stock_unlimited of this ProductEditFields.

        True if the Product has unlimited stock

        :param stock_unlimited: The stock_unlimited of this ProductEditFields.
        :type stock_unlimited: bool
        """

        self._stock_unlimited = stock_unlimited

    @property
    def weight(self):
        """Gets the weight of this ProductEditFields.

        Weight of the product

        :return: The weight of this ProductEditFields.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductEditFields.

        Weight of the product

        :param weight: The weight of this ProductEditFields.
        :type weight: float
        """

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this ProductEditFields.

        Width of the product

        :return: The width of this ProductEditFields.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductEditFields.

        Width of the product

        :param width: The width of this ProductEditFields.
        :type width: float
        """

        self._width = width
