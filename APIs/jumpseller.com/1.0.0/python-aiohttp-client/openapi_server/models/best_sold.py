# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BestSold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, product_id: int=None, product_name: str=None, total: float=None):
        """BestSold - a model defined in OpenAPI

        :param count: The count of this BestSold.
        :param product_id: The product_id of this BestSold.
        :param product_name: The product_name of this BestSold.
        :param total: The total of this BestSold.
        """
        self.openapi_types = {
            'count': int,
            'product_id': int,
            'product_name': str,
            'total': float
        }

        self.attribute_map = {
            'count': 'count',
            'product_id': 'product_id',
            'product_name': 'product_name',
            'total': 'total'
        }

        self._count = count
        self._product_id = product_id
        self._product_name = product_name
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BestSold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BestSold of this BestSold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this BestSold.

        Quantity sold.

        :return: The count of this BestSold.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BestSold.

        Quantity sold.

        :param count: The count of this BestSold.
        :type count: int
        """

        self._count = count

    @property
    def product_id(self):
        """Gets the product_id of this BestSold.


        :return: The product_id of this BestSold.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this BestSold.


        :param product_id: The product_id of this BestSold.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this BestSold.


        :return: The product_name of this BestSold.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this BestSold.


        :param product_name: The product_name of this BestSold.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def total(self):
        """Gets the total of this BestSold.

        Total sold amount.

        :return: The total of this BestSold.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BestSold.

        Total sold amount.

        :param total: The total of this BestSold.
        :type total: float
        """

        self._total = total
