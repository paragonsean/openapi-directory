# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_fields import ImageFields
from openapi_server.models.product_option_variant_edit import ProductOptionVariantEdit
from openapi_server import util


class VariantFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, image: ImageFields=None, options: List[ProductOptionVariantEdit]=None, price: float=None, sku: str=None, stock: int=100, stock_unlimited: bool=None):
        """VariantFields - a model defined in OpenAPI

        :param id: The id of this VariantFields.
        :param image: The image of this VariantFields.
        :param options: The options of this VariantFields.
        :param price: The price of this VariantFields.
        :param sku: The sku of this VariantFields.
        :param stock: The stock of this VariantFields.
        :param stock_unlimited: The stock_unlimited of this VariantFields.
        """
        self.openapi_types = {
            'id': int,
            'image': ImageFields,
            'options': List[ProductOptionVariantEdit],
            'price': float,
            'sku': str,
            'stock': int,
            'stock_unlimited': bool
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'options': 'options',
            'price': 'price',
            'sku': 'sku',
            'stock': 'stock',
            'stock_unlimited': 'stock_unlimited'
        }

        self._id = id
        self._image = image
        self._options = options
        self._price = price
        self._sku = sku
        self._stock = stock
        self._stock_unlimited = stock_unlimited

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariantFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VariantFields of this VariantFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VariantFields.

        Unique identifier of the product

        :return: The id of this VariantFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariantFields.

        Unique identifier of the product

        :param id: The id of this VariantFields.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this VariantFields.


        :return: The image of this VariantFields.
        :rtype: ImageFields
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VariantFields.


        :param image: The image of this VariantFields.
        :type image: ImageFields
        """

        self._image = image

    @property
    def options(self):
        """Gets the options of this VariantFields.


        :return: The options of this VariantFields.
        :rtype: List[ProductOptionVariantEdit]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this VariantFields.


        :param options: The options of this VariantFields.
        :type options: List[ProductOptionVariantEdit]
        """

        self._options = options

    @property
    def price(self):
        """Gets the price of this VariantFields.

        Price of the product

        :return: The price of this VariantFields.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VariantFields.

        Price of the product

        :param price: The price of this VariantFields.
        :type price: float
        """

        self._price = price

    @property
    def sku(self):
        """Gets the sku of this VariantFields.

        Stock Keeping Unit of the Product's Variant

        :return: The sku of this VariantFields.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this VariantFields.

        Stock Keeping Unit of the Product's Variant

        :param sku: The sku of this VariantFields.
        :type sku: str
        """

        self._sku = sku

    @property
    def stock(self):
        """Gets the stock of this VariantFields.

        Quantity in stock for the Product's Variant

        :return: The stock of this VariantFields.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this VariantFields.

        Quantity in stock for the Product's Variant

        :param stock: The stock of this VariantFields.
        :type stock: int
        """

        self._stock = stock

    @property
    def stock_unlimited(self):
        """Gets the stock_unlimited of this VariantFields.

        True if the Product's Variant has unlimited stock

        :return: The stock_unlimited of this VariantFields.
        :rtype: bool
        """
        return self._stock_unlimited

    @stock_unlimited.setter
    def stock_unlimited(self, stock_unlimited):
        """Sets the stock_unlimited of this VariantFields.

        True if the Product's Variant has unlimited stock

        :param stock_unlimited: The stock_unlimited of this VariantFields.
        :type stock_unlimited: bool
        """

        self._stock_unlimited = stock_unlimited
