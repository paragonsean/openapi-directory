# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_product_tax import OrderProductTax
from openapi_server import util


class OrderProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount: float=None, id: int=None, image: str=None, name: str=None, price: float=None, qty: int=None, sku: str=None, taxes: List[OrderProductTax]=None, variant_id: int=None, weight: float=1):
        """OrderProduct - a model defined in OpenAPI

        :param discount: The discount of this OrderProduct.
        :param id: The id of this OrderProduct.
        :param image: The image of this OrderProduct.
        :param name: The name of this OrderProduct.
        :param price: The price of this OrderProduct.
        :param qty: The qty of this OrderProduct.
        :param sku: The sku of this OrderProduct.
        :param taxes: The taxes of this OrderProduct.
        :param variant_id: The variant_id of this OrderProduct.
        :param weight: The weight of this OrderProduct.
        """
        self.openapi_types = {
            'discount': float,
            'id': int,
            'image': str,
            'name': str,
            'price': float,
            'qty': int,
            'sku': str,
            'taxes': List[OrderProductTax],
            'variant_id': int,
            'weight': float
        }

        self.attribute_map = {
            'discount': 'discount',
            'id': 'id',
            'image': 'image',
            'name': 'name',
            'price': 'price',
            'qty': 'qty',
            'sku': 'sku',
            'taxes': 'taxes',
            'variant_id': 'variant_id',
            'weight': 'weight'
        }

        self._discount = discount
        self._id = id
        self._image = image
        self._name = name
        self._price = price
        self._qty = qty
        self._sku = sku
        self._taxes = taxes
        self._variant_id = variant_id
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderProduct of this OrderProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount(self):
        """Gets the discount of this OrderProduct.

        Discount of the Order Product

        :return: The discount of this OrderProduct.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderProduct.

        Discount of the Order Product

        :param discount: The discount of this OrderProduct.
        :type discount: float
        """

        self._discount = discount

    @property
    def id(self):
        """Gets the id of this OrderProduct.

        Unique identifier of the original Product

        :return: The id of this OrderProduct.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderProduct.

        Unique identifier of the original Product

        :param id: The id of this OrderProduct.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this OrderProduct.

        Image URL of the Order Product

        :return: The image of this OrderProduct.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OrderProduct.

        Image URL of the Order Product

        :param image: The image of this OrderProduct.
        :type image: str
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this OrderProduct.

        Name of the Order Product

        :return: The name of this OrderProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderProduct.

        Name of the Order Product

        :param name: The name of this OrderProduct.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this OrderProduct.

        Price of the Order Product

        :return: The price of this OrderProduct.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderProduct.

        Price of the Order Product

        :param price: The price of this OrderProduct.
        :type price: float
        """

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this OrderProduct.

        Price of the Order Product

        :return: The qty of this OrderProduct.
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this OrderProduct.

        Price of the Order Product

        :param qty: The qty of this OrderProduct.
        :type qty: int
        """

        self._qty = qty

    @property
    def sku(self):
        """Gets the sku of this OrderProduct.

        Stock Keeping Unit of the Order Product

        :return: The sku of this OrderProduct.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OrderProduct.

        Stock Keeping Unit of the Order Product

        :param sku: The sku of this OrderProduct.
        :type sku: str
        """

        self._sku = sku

    @property
    def taxes(self):
        """Gets the taxes of this OrderProduct.


        :return: The taxes of this OrderProduct.
        :rtype: List[OrderProductTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this OrderProduct.


        :param taxes: The taxes of this OrderProduct.
        :type taxes: List[OrderProductTax]
        """

        self._taxes = taxes

    @property
    def variant_id(self):
        """Gets the variant_id of this OrderProduct.

        Unique identifier of the original Product Variant

        :return: The variant_id of this OrderProduct.
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this OrderProduct.

        Unique identifier of the original Product Variant

        :param variant_id: The variant_id of this OrderProduct.
        :type variant_id: int
        """

        self._variant_id = variant_id

    @property
    def weight(self):
        """Gets the weight of this OrderProduct.

        Weight of the Order Product

        :return: The weight of this OrderProduct.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this OrderProduct.

        Weight of the Order Product

        :param weight: The weight of this OrderProduct.
        :type weight: float
        """

        self._weight = weight
