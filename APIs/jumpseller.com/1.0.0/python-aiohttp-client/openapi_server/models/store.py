# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_address import StoreAddress
from openapi_server import util


class Store(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: StoreAddress=None, code: str=None, country: str=None, currency: str=None, email: str=None, hooks_token: str=None, logo: str=None, name: str=None, timezone: str=None, url: str=None, weight_unit: str=None):
        """Store - a model defined in OpenAPI

        :param address: The address of this Store.
        :param code: The code of this Store.
        :param country: The country of this Store.
        :param currency: The currency of this Store.
        :param email: The email of this Store.
        :param hooks_token: The hooks_token of this Store.
        :param logo: The logo of this Store.
        :param name: The name of this Store.
        :param timezone: The timezone of this Store.
        :param url: The url of this Store.
        :param weight_unit: The weight_unit of this Store.
        """
        self.openapi_types = {
            'address': StoreAddress,
            'code': str,
            'country': str,
            'currency': str,
            'email': str,
            'hooks_token': str,
            'logo': str,
            'name': str,
            'timezone': str,
            'url': str,
            'weight_unit': str
        }

        self.attribute_map = {
            'address': 'address',
            'code': 'code',
            'country': 'country',
            'currency': 'currency',
            'email': 'email',
            'hooks_token': 'hooks_token',
            'logo': 'logo',
            'name': 'name',
            'timezone': 'timezone',
            'url': 'url',
            'weight_unit': 'weight_unit'
        }

        self._address = address
        self._code = code
        self._country = country
        self._currency = currency
        self._email = email
        self._hooks_token = hooks_token
        self._logo = logo
        self._name = name
        self._timezone = timezone
        self._url = url
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Store of this Store.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Store.


        :return: The address of this Store.
        :rtype: StoreAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Store.


        :param address: The address of this Store.
        :type address: StoreAddress
        """

        self._address = address

    @property
    def code(self):
        """Gets the code of this Store.

        Store Code

        :return: The code of this Store.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Store.

        Store Code

        :param code: The code of this Store.
        :type code: str
        """

        self._code = code

    @property
    def country(self):
        """Gets the country of this Store.

        Store Country

        :return: The country of this Store.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Store.

        Store Country

        :param country: The country of this Store.
        :type country: str
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this Store.

        Store Currency

        :return: The currency of this Store.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Store.

        Store Currency

        :param currency: The currency of this Store.
        :type currency: str
        """

        self._currency = currency

    @property
    def email(self):
        """Gets the email of this Store.

        Store Admin Email

        :return: The email of this Store.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Store.

        Store Admin Email

        :param email: The email of this Store.
        :type email: str
        """

        self._email = email

    @property
    def hooks_token(self):
        """Gets the hooks_token of this Store.

        Store Hooks Auth token

        :return: The hooks_token of this Store.
        :rtype: str
        """
        return self._hooks_token

    @hooks_token.setter
    def hooks_token(self, hooks_token):
        """Sets the hooks_token of this Store.

        Store Hooks Auth token

        :param hooks_token: The hooks_token of this Store.
        :type hooks_token: str
        """

        self._hooks_token = hooks_token

    @property
    def logo(self):
        """Gets the logo of this Store.

        Store Logo URL

        :return: The logo of this Store.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Store.

        Store Logo URL

        :param logo: The logo of this Store.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Store.

        Store Name

        :return: The name of this Store.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Store.

        Store Name

        :param name: The name of this Store.
        :type name: str
        """

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this Store.

        Store Timezone

        :return: The timezone of this Store.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Store.

        Store Timezone

        :param timezone: The timezone of this Store.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def url(self):
        """Gets the url of this Store.

        Store URL

        :return: The url of this Store.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Store.

        Store URL

        :param url: The url of this Store.
        :type url: str
        """

        self._url = url

    @property
    def weight_unit(self):
        """Gets the weight_unit of this Store.

        Store Weight Unit

        :return: The weight_unit of this Store.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this Store.

        Store Weight Unit

        :param weight_unit: The weight_unit of this Store.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
