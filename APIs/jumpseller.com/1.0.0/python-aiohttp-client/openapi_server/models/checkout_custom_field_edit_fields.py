# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckoutCustomFieldEditFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, custom_field_select_options: List[str]=None, deletable: bool=False, label: str=None, position: int=None, required: bool=False, type: str=None):
        """CheckoutCustomFieldEditFields - a model defined in OpenAPI

        :param area: The area of this CheckoutCustomFieldEditFields.
        :param custom_field_select_options: The custom_field_select_options of this CheckoutCustomFieldEditFields.
        :param deletable: The deletable of this CheckoutCustomFieldEditFields.
        :param label: The label of this CheckoutCustomFieldEditFields.
        :param position: The position of this CheckoutCustomFieldEditFields.
        :param required: The required of this CheckoutCustomFieldEditFields.
        :param type: The type of this CheckoutCustomFieldEditFields.
        """
        self.openapi_types = {
            'area': str,
            'custom_field_select_options': List[str],
            'deletable': bool,
            'label': str,
            'position': int,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'area': 'area',
            'custom_field_select_options': 'custom_field_select_options',
            'deletable': 'deletable',
            'label': 'label',
            'position': 'position',
            'required': 'required',
            'type': 'type'
        }

        self._area = area
        self._custom_field_select_options = custom_field_select_options
        self._deletable = deletable
        self._label = label
        self._position = position
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutCustomFieldEditFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutCustomFieldEditFields of this CheckoutCustomFieldEditFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this CheckoutCustomFieldEditFields.

        Area of the CheckoutCustomField

        :return: The area of this CheckoutCustomFieldEditFields.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CheckoutCustomFieldEditFields.

        Area of the CheckoutCustomField

        :param area: The area of this CheckoutCustomFieldEditFields.
        :type area: str
        """
        allowed_values = ["contact", "billing_shipping", "other"]  # noqa: E501
        if area not in allowed_values:
            raise ValueError(
                "Invalid value for `area` ({0}), must be one of {1}"
                .format(area, allowed_values)
            )

        self._area = area

    @property
    def custom_field_select_options(self):
        """Gets the custom_field_select_options of this CheckoutCustomFieldEditFields.

        The values for the CheckoutCustomField selection

        :return: The custom_field_select_options of this CheckoutCustomFieldEditFields.
        :rtype: List[str]
        """
        return self._custom_field_select_options

    @custom_field_select_options.setter
    def custom_field_select_options(self, custom_field_select_options):
        """Sets the custom_field_select_options of this CheckoutCustomFieldEditFields.

        The values for the CheckoutCustomField selection

        :param custom_field_select_options: The custom_field_select_options of this CheckoutCustomFieldEditFields.
        :type custom_field_select_options: List[str]
        """

        self._custom_field_select_options = custom_field_select_options

    @property
    def deletable(self):
        """Gets the deletable of this CheckoutCustomFieldEditFields.

        True if the CheckoutCustomField can be removed from the store

        :return: The deletable of this CheckoutCustomFieldEditFields.
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this CheckoutCustomFieldEditFields.

        True if the CheckoutCustomField can be removed from the store

        :param deletable: The deletable of this CheckoutCustomFieldEditFields.
        :type deletable: bool
        """

        self._deletable = deletable

    @property
    def label(self):
        """Gets the label of this CheckoutCustomFieldEditFields.

        Label given to the CheckoutCustomField

        :return: The label of this CheckoutCustomFieldEditFields.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CheckoutCustomFieldEditFields.

        Label given to the CheckoutCustomField

        :param label: The label of this CheckoutCustomFieldEditFields.
        :type label: str
        """

        self._label = label

    @property
    def position(self):
        """Gets the position of this CheckoutCustomFieldEditFields.

        Position of the CheckoutCustomField

        :return: The position of this CheckoutCustomFieldEditFields.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CheckoutCustomFieldEditFields.

        Position of the CheckoutCustomField

        :param position: The position of this CheckoutCustomFieldEditFields.
        :type position: int
        """

        self._position = position

    @property
    def required(self):
        """Gets the required of this CheckoutCustomFieldEditFields.

        True if the CheckoutCustomField is mandatory

        :return: The required of this CheckoutCustomFieldEditFields.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CheckoutCustomFieldEditFields.

        True if the CheckoutCustomField is mandatory

        :param required: The required of this CheckoutCustomFieldEditFields.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this CheckoutCustomFieldEditFields.

        Type of the CheckoutCustomField

        :return: The type of this CheckoutCustomFieldEditFields.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckoutCustomFieldEditFields.

        Type of the CheckoutCustomField

        :param type: The type of this CheckoutCustomFieldEditFields.
        :type type: str
        """
        allowed_values = ["text", "select", "input", "checkbox", "date"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
