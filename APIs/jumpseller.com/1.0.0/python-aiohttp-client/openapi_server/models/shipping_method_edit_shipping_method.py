# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingMethodEditShippingMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, city: str=None, fetch_services_url: str=None, name: str=None, postal: str=None, state: str=None, token: str=None):
        """ShippingMethodEditShippingMethod - a model defined in OpenAPI

        :param callback_url: The callback_url of this ShippingMethodEditShippingMethod.
        :param city: The city of this ShippingMethodEditShippingMethod.
        :param fetch_services_url: The fetch_services_url of this ShippingMethodEditShippingMethod.
        :param name: The name of this ShippingMethodEditShippingMethod.
        :param postal: The postal of this ShippingMethodEditShippingMethod.
        :param state: The state of this ShippingMethodEditShippingMethod.
        :param token: The token of this ShippingMethodEditShippingMethod.
        """
        self.openapi_types = {
            'callback_url': str,
            'city': str,
            'fetch_services_url': str,
            'name': str,
            'postal': str,
            'state': str,
            'token': str
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'city': 'city',
            'fetch_services_url': 'fetch_services_url',
            'name': 'name',
            'postal': 'postal',
            'state': 'state',
            'token': 'token'
        }

        self._callback_url = callback_url
        self._city = city
        self._fetch_services_url = fetch_services_url
        self._name = name
        self._postal = postal
        self._state = state
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingMethodEditShippingMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingMethodEdit_shipping_method of this ShippingMethodEditShippingMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this ShippingMethodEditShippingMethod.

        URL that receives the shipping data and returns rates

        :return: The callback_url of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ShippingMethodEditShippingMethod.

        URL that receives the shipping data and returns rates

        :param callback_url: The callback_url of this ShippingMethodEditShippingMethod.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def city(self):
        """Gets the city of this ShippingMethodEditShippingMethod.

        City/Municipality name of origin

        :return: The city of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingMethodEditShippingMethod.

        City/Municipality name of origin

        :param city: The city of this ShippingMethodEditShippingMethod.
        :type city: str
        """

        self._city = city

    @property
    def fetch_services_url(self):
        """Gets the fetch_services_url of this ShippingMethodEditShippingMethod.

        URL that returns available shipping services

        :return: The fetch_services_url of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._fetch_services_url

    @fetch_services_url.setter
    def fetch_services_url(self, fetch_services_url):
        """Sets the fetch_services_url of this ShippingMethodEditShippingMethod.

        URL that returns available shipping services

        :param fetch_services_url: The fetch_services_url of this ShippingMethodEditShippingMethod.
        :type fetch_services_url: str
        """

        self._fetch_services_url = fetch_services_url

    @property
    def name(self):
        """Gets the name of this ShippingMethodEditShippingMethod.

        Name of the Shipping Method

        :return: The name of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShippingMethodEditShippingMethod.

        Name of the Shipping Method

        :param name: The name of this ShippingMethodEditShippingMethod.
        :type name: str
        """

        self._name = name

    @property
    def postal(self):
        """Gets the postal of this ShippingMethodEditShippingMethod.

        Postal/Zipcode of origin

        :return: The postal of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this ShippingMethodEditShippingMethod.

        Postal/Zipcode of origin

        :param postal: The postal of this ShippingMethodEditShippingMethod.
        :type postal: str
        """

        self._postal = postal

    @property
    def state(self):
        """Gets the state of this ShippingMethodEditShippingMethod.

        State/Region code of origin

        :return: The state of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ShippingMethodEditShippingMethod.

        State/Region code of origin

        :param state: The state of this ShippingMethodEditShippingMethod.
        :type state: str
        """

        self._state = state

    @property
    def token(self):
        """Gets the token of this ShippingMethodEditShippingMethod.

        Token used to authentica on the the fetch_services_url

        :return: The token of this ShippingMethodEditShippingMethod.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ShippingMethodEditShippingMethod.

        Token used to authentica on the the fetch_services_url

        :param token: The token of this ShippingMethodEditShippingMethod.
        :type token: str
        """

        self._token = token
