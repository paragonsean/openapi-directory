# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.best_sold import BestSold
from openapi_server.models.daily_visits import DailyVisits
from openapi_server.models.payment_method_freq import PaymentMethodFreq
from openapi_server.models.referrer import Referrer
from openapi_server.models.shipping_method_freq import ShippingMethodFreq
from openapi_server.models.store_stats_conversions import StoreStatsConversions
from openapi_server.models.store_stats_new_vs_returning_customers import StoreStatsNewVsReturningCustomers
from openapi_server.models.store_stats_orders import StoreStatsOrders
from openapi_server.models.store_stats_region_orders import StoreStatsRegionOrders
from openapi_server.models.traffic_type import TrafficType
from openapi_server import util


class StoreStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_sold: List[BestSold]=None, conversions: StoreStatsConversions=None, currency: str=None, daily_visits: List[DailyVisits]=None, _from: str=None, new_vs_returning_customers: StoreStatsNewVsReturningCustomers=None, new_vs_returning_orders: StoreStatsNewVsReturningCustomers=None, orders: StoreStatsOrders=None, payment_methods: List[PaymentMethodFreq]=None, referrers: List[Referrer]=None, region_orders: StoreStatsRegionOrders=None, search_frequencies_all: List[object]=None, search_frequencies_without_results: List[object]=None, shipping_methods: List[ShippingMethodFreq]=None, to: str=None, traffic_type: List[TrafficType]=None, visits: int=None):
        """StoreStats - a model defined in OpenAPI

        :param best_sold: The best_sold of this StoreStats.
        :param conversions: The conversions of this StoreStats.
        :param currency: The currency of this StoreStats.
        :param daily_visits: The daily_visits of this StoreStats.
        :param _from: The _from of this StoreStats.
        :param new_vs_returning_customers: The new_vs_returning_customers of this StoreStats.
        :param new_vs_returning_orders: The new_vs_returning_orders of this StoreStats.
        :param orders: The orders of this StoreStats.
        :param payment_methods: The payment_methods of this StoreStats.
        :param referrers: The referrers of this StoreStats.
        :param region_orders: The region_orders of this StoreStats.
        :param search_frequencies_all: The search_frequencies_all of this StoreStats.
        :param search_frequencies_without_results: The search_frequencies_without_results of this StoreStats.
        :param shipping_methods: The shipping_methods of this StoreStats.
        :param to: The to of this StoreStats.
        :param traffic_type: The traffic_type of this StoreStats.
        :param visits: The visits of this StoreStats.
        """
        self.openapi_types = {
            'best_sold': List[BestSold],
            'conversions': StoreStatsConversions,
            'currency': str,
            'daily_visits': List[DailyVisits],
            '_from': str,
            'new_vs_returning_customers': StoreStatsNewVsReturningCustomers,
            'new_vs_returning_orders': StoreStatsNewVsReturningCustomers,
            'orders': StoreStatsOrders,
            'payment_methods': List[PaymentMethodFreq],
            'referrers': List[Referrer],
            'region_orders': StoreStatsRegionOrders,
            'search_frequencies_all': List[object],
            'search_frequencies_without_results': List[object],
            'shipping_methods': List[ShippingMethodFreq],
            'to': str,
            'traffic_type': List[TrafficType],
            'visits': int
        }

        self.attribute_map = {
            'best_sold': 'best_sold',
            'conversions': 'conversions',
            'currency': 'currency',
            'daily_visits': 'daily_visits',
            '_from': 'from',
            'new_vs_returning_customers': 'new_vs_returning_customers',
            'new_vs_returning_orders': 'new_vs_returning_orders',
            'orders': 'orders',
            'payment_methods': 'payment_methods',
            'referrers': 'referrers',
            'region_orders': 'region_orders',
            'search_frequencies_all': 'search_frequencies_all',
            'search_frequencies_without_results': 'search_frequencies_without_results',
            'shipping_methods': 'shipping_methods',
            'to': 'to',
            'traffic_type': 'traffic_type',
            'visits': 'visits'
        }

        self._best_sold = best_sold
        self._conversions = conversions
        self._currency = currency
        self._daily_visits = daily_visits
        self.__from = _from
        self._new_vs_returning_customers = new_vs_returning_customers
        self._new_vs_returning_orders = new_vs_returning_orders
        self._orders = orders
        self._payment_methods = payment_methods
        self._referrers = referrers
        self._region_orders = region_orders
        self._search_frequencies_all = search_frequencies_all
        self._search_frequencies_without_results = search_frequencies_without_results
        self._shipping_methods = shipping_methods
        self._to = to
        self._traffic_type = traffic_type
        self._visits = visits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreStats of this StoreStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_sold(self):
        """Gets the best_sold of this StoreStats.

        Top 10 best sold products.

        :return: The best_sold of this StoreStats.
        :rtype: List[BestSold]
        """
        return self._best_sold

    @best_sold.setter
    def best_sold(self, best_sold):
        """Sets the best_sold of this StoreStats.

        Top 10 best sold products.

        :param best_sold: The best_sold of this StoreStats.
        :type best_sold: List[BestSold]
        """

        self._best_sold = best_sold

    @property
    def conversions(self):
        """Gets the conversions of this StoreStats.


        :return: The conversions of this StoreStats.
        :rtype: StoreStatsConversions
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this StoreStats.


        :param conversions: The conversions of this StoreStats.
        :type conversions: StoreStatsConversions
        """

        self._conversions = conversions

    @property
    def currency(self):
        """Gets the currency of this StoreStats.

        Store currency.

        :return: The currency of this StoreStats.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this StoreStats.

        Store currency.

        :param currency: The currency of this StoreStats.
        :type currency: str
        """

        self._currency = currency

    @property
    def daily_visits(self):
        """Gets the daily_visits of this StoreStats.

        Visits per day.

        :return: The daily_visits of this StoreStats.
        :rtype: List[DailyVisits]
        """
        return self._daily_visits

    @daily_visits.setter
    def daily_visits(self, daily_visits):
        """Sets the daily_visits of this StoreStats.

        Visits per day.

        :param daily_visits: The daily_visits of this StoreStats.
        :type daily_visits: List[DailyVisits]
        """

        self._daily_visits = daily_visits

    @property
    def _from(self):
        """Gets the _from of this StoreStats.

        Statistics start date.

        :return: The _from of this StoreStats.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this StoreStats.

        Statistics start date.

        :param _from: The _from of this StoreStats.
        :type _from: str
        """

        self.__from = _from

    @property
    def new_vs_returning_customers(self):
        """Gets the new_vs_returning_customers of this StoreStats.


        :return: The new_vs_returning_customers of this StoreStats.
        :rtype: StoreStatsNewVsReturningCustomers
        """
        return self._new_vs_returning_customers

    @new_vs_returning_customers.setter
    def new_vs_returning_customers(self, new_vs_returning_customers):
        """Sets the new_vs_returning_customers of this StoreStats.


        :param new_vs_returning_customers: The new_vs_returning_customers of this StoreStats.
        :type new_vs_returning_customers: StoreStatsNewVsReturningCustomers
        """

        self._new_vs_returning_customers = new_vs_returning_customers

    @property
    def new_vs_returning_orders(self):
        """Gets the new_vs_returning_orders of this StoreStats.


        :return: The new_vs_returning_orders of this StoreStats.
        :rtype: StoreStatsNewVsReturningCustomers
        """
        return self._new_vs_returning_orders

    @new_vs_returning_orders.setter
    def new_vs_returning_orders(self, new_vs_returning_orders):
        """Sets the new_vs_returning_orders of this StoreStats.


        :param new_vs_returning_orders: The new_vs_returning_orders of this StoreStats.
        :type new_vs_returning_orders: StoreStatsNewVsReturningCustomers
        """

        self._new_vs_returning_orders = new_vs_returning_orders

    @property
    def orders(self):
        """Gets the orders of this StoreStats.


        :return: The orders of this StoreStats.
        :rtype: StoreStatsOrders
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this StoreStats.


        :param orders: The orders of this StoreStats.
        :type orders: StoreStatsOrders
        """

        self._orders = orders

    @property
    def payment_methods(self):
        """Gets the payment_methods of this StoreStats.

        Store payment methods and their frequency.

        :return: The payment_methods of this StoreStats.
        :rtype: List[PaymentMethodFreq]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this StoreStats.

        Store payment methods and their frequency.

        :param payment_methods: The payment_methods of this StoreStats.
        :type payment_methods: List[PaymentMethodFreq]
        """

        self._payment_methods = payment_methods

    @property
    def referrers(self):
        """Gets the referrers of this StoreStats.

        Top 10 referrer sources and their frequency.

        :return: The referrers of this StoreStats.
        :rtype: List[Referrer]
        """
        return self._referrers

    @referrers.setter
    def referrers(self, referrers):
        """Sets the referrers of this StoreStats.

        Top 10 referrer sources and their frequency.

        :param referrers: The referrers of this StoreStats.
        :type referrers: List[Referrer]
        """

        self._referrers = referrers

    @property
    def region_orders(self):
        """Gets the region_orders of this StoreStats.


        :return: The region_orders of this StoreStats.
        :rtype: StoreStatsRegionOrders
        """
        return self._region_orders

    @region_orders.setter
    def region_orders(self, region_orders):
        """Sets the region_orders of this StoreStats.


        :param region_orders: The region_orders of this StoreStats.
        :type region_orders: StoreStatsRegionOrders
        """

        self._region_orders = region_orders

    @property
    def search_frequencies_all(self):
        """Gets the search_frequencies_all of this StoreStats.

        Number of times each search was conducted under the form of an aggregation query.

        :return: The search_frequencies_all of this StoreStats.
        :rtype: List[object]
        """
        return self._search_frequencies_all

    @search_frequencies_all.setter
    def search_frequencies_all(self, search_frequencies_all):
        """Sets the search_frequencies_all of this StoreStats.

        Number of times each search was conducted under the form of an aggregation query.

        :param search_frequencies_all: The search_frequencies_all of this StoreStats.
        :type search_frequencies_all: List[object]
        """

        self._search_frequencies_all = search_frequencies_all

    @property
    def search_frequencies_without_results(self):
        """Gets the search_frequencies_without_results of this StoreStats.

        Number of times each search with zero results was conducted under the form of an aggregation query.

        :return: The search_frequencies_without_results of this StoreStats.
        :rtype: List[object]
        """
        return self._search_frequencies_without_results

    @search_frequencies_without_results.setter
    def search_frequencies_without_results(self, search_frequencies_without_results):
        """Sets the search_frequencies_without_results of this StoreStats.

        Number of times each search with zero results was conducted under the form of an aggregation query.

        :param search_frequencies_without_results: The search_frequencies_without_results of this StoreStats.
        :type search_frequencies_without_results: List[object]
        """

        self._search_frequencies_without_results = search_frequencies_without_results

    @property
    def shipping_methods(self):
        """Gets the shipping_methods of this StoreStats.

        Store shipping methods and their frequency.

        :return: The shipping_methods of this StoreStats.
        :rtype: List[ShippingMethodFreq]
        """
        return self._shipping_methods

    @shipping_methods.setter
    def shipping_methods(self, shipping_methods):
        """Sets the shipping_methods of this StoreStats.

        Store shipping methods and their frequency.

        :param shipping_methods: The shipping_methods of this StoreStats.
        :type shipping_methods: List[ShippingMethodFreq]
        """

        self._shipping_methods = shipping_methods

    @property
    def to(self):
        """Gets the to of this StoreStats.

        Statistics end date.

        :return: The to of this StoreStats.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this StoreStats.

        Statistics end date.

        :param to: The to of this StoreStats.
        :type to: str
        """

        self._to = to

    @property
    def traffic_type(self):
        """Gets the traffic_type of this StoreStats.

        Type of store traffic and its frequency.

        :return: The traffic_type of this StoreStats.
        :rtype: List[TrafficType]
        """
        return self._traffic_type

    @traffic_type.setter
    def traffic_type(self, traffic_type):
        """Sets the traffic_type of this StoreStats.

        Type of store traffic and its frequency.

        :param traffic_type: The traffic_type of this StoreStats.
        :type traffic_type: List[TrafficType]
        """

        self._traffic_type = traffic_type

    @property
    def visits(self):
        """Gets the visits of this StoreStats.

        Total number of visits.

        :return: The visits of this StoreStats.
        :rtype: int
        """
        return self._visits

    @visits.setter
    def visits(self, visits):
        """Sets the visits of this StoreStats.

        Total number of visits.

        :param visits: The visits of this StoreStats.
        :type visits: int
        """

        self._visits = visits
