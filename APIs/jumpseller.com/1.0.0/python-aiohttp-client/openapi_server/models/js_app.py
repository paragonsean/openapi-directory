# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JSApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element: str=None, template: str=None, url: str=None):
        """JSApp - a model defined in OpenAPI

        :param element: The element of this JSApp.
        :param template: The template of this JSApp.
        :param url: The url of this JSApp.
        """
        self.openapi_types = {
            'element': str,
            'template': str,
            'url': str
        }

        self.attribute_map = {
            'element': 'element',
            'template': 'template',
            'url': 'url'
        }

        self._element = element
        self._template = template
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSApp of this JSApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element(self):
        """Gets the element of this JSApp.

        Element of Template to inject HTML

        :return: The element of this JSApp.
        :rtype: str
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this JSApp.

        Element of Template to inject HTML

        :param element: The element of this JSApp.
        :type element: str
        """

        self._element = element

    @property
    def template(self):
        """Gets the template of this JSApp.

        Template of Store Theme to inject HTML

        :return: The template of this JSApp.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this JSApp.

        Template of Store Theme to inject HTML

        :param template: The template of this JSApp.
        :type template: str
        """

        self._template = template

    @property
    def url(self):
        """Gets the url of this JSApp.

        Url of the HTML to inject

        :return: The url of this JSApp.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JSApp.

        Url of the HTML to inject

        :param url: The url of this JSApp.
        :type url: str
        """

        self._url = url
