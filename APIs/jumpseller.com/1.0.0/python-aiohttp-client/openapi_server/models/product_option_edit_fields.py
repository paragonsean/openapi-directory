# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductOptionEditFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, option_type: str=None, position: int=None):
        """ProductOptionEditFields - a model defined in OpenAPI

        :param name: The name of this ProductOptionEditFields.
        :param option_type: The option_type of this ProductOptionEditFields.
        :param position: The position of this ProductOptionEditFields.
        """
        self.openapi_types = {
            'name': str,
            'option_type': str,
            'position': int
        }

        self.attribute_map = {
            'name': 'name',
            'option_type': 'option_type',
            'position': 'position'
        }

        self._name = name
        self._option_type = option_type
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductOptionEditFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductOptionEditFields of this ProductOptionEditFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProductOptionEditFields.

        Name of the product option

        :return: The name of this ProductOptionEditFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductOptionEditFields.

        Name of the product option

        :param name: The name of this ProductOptionEditFields.
        :type name: str
        """

        self._name = name

    @property
    def option_type(self):
        """Gets the option_type of this ProductOptionEditFields.

        Type of the product option

        :return: The option_type of this ProductOptionEditFields.
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this ProductOptionEditFields.

        Type of the product option

        :param option_type: The option_type of this ProductOptionEditFields.
        :type option_type: str
        """
        allowed_values = ["option", "input", "text", "file"]  # noqa: E501
        if option_type not in allowed_values:
            raise ValueError(
                "Invalid value for `option_type` ({0}), must be one of {1}"
                .format(option_type, allowed_values)
            )

        self._option_type = option_type

    @property
    def position(self):
        """Gets the position of this ProductOptionEditFields.

        Position of the product option

        :return: The position of this ProductOptionEditFields.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProductOptionEditFields.

        Position of the product option

        :param position: The position of this ProductOptionEditFields.
        :type position: int
        """

        self._position = position
