# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_orders import CountryOrders
from openapi_server import util


class StoreStatsRegionOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_mode: str=None, regions_orders: List[CountryOrders]=None):
        """StoreStatsRegionOrders - a model defined in OpenAPI

        :param display_mode: The display_mode of this StoreStatsRegionOrders.
        :param regions_orders: The regions_orders of this StoreStatsRegionOrders.
        """
        self.openapi_types = {
            'display_mode': str,
            'regions_orders': List[CountryOrders]
        }

        self.attribute_map = {
            'display_mode': 'display_mode',
            'regions_orders': 'regions_orders'
        }

        self._display_mode = display_mode
        self._regions_orders = regions_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreStatsRegionOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreStats_region_orders of this StoreStatsRegionOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_mode(self):
        """Gets the display_mode of this StoreStatsRegionOrders.

        Can be 'regions' when orders are specific of 1 country or 'auto'.

        :return: The display_mode of this StoreStatsRegionOrders.
        :rtype: str
        """
        return self._display_mode

    @display_mode.setter
    def display_mode(self, display_mode):
        """Sets the display_mode of this StoreStatsRegionOrders.

        Can be 'regions' when orders are specific of 1 country or 'auto'.

        :param display_mode: The display_mode of this StoreStatsRegionOrders.
        :type display_mode: str
        """

        self._display_mode = display_mode

    @property
    def regions_orders(self):
        """Gets the regions_orders of this StoreStatsRegionOrders.

        Orders per country and region(inside the country).

        :return: The regions_orders of this StoreStatsRegionOrders.
        :rtype: List[CountryOrders]
        """
        return self._regions_orders

    @regions_orders.setter
    def regions_orders(self, regions_orders):
        """Sets the regions_orders of this StoreStatsRegionOrders.

        Orders per country and region(inside the country).

        :param regions_orders: The regions_orders of this StoreStatsRegionOrders.
        :type regions_orders: List[CountryOrders]
        """

        self._regions_orders = regions_orders
