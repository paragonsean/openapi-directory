# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shipping_service import ShippingService
from openapi_server import util


class ShippingMethodFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, city: str=None, fetch_services_url: str=None, id: int=None, name: str=None, postal: str=None, services: List[ShippingService]=None, state: str=None, type: str=None):
        """ShippingMethodFields - a model defined in OpenAPI

        :param callback_url: The callback_url of this ShippingMethodFields.
        :param city: The city of this ShippingMethodFields.
        :param fetch_services_url: The fetch_services_url of this ShippingMethodFields.
        :param id: The id of this ShippingMethodFields.
        :param name: The name of this ShippingMethodFields.
        :param postal: The postal of this ShippingMethodFields.
        :param services: The services of this ShippingMethodFields.
        :param state: The state of this ShippingMethodFields.
        :param type: The type of this ShippingMethodFields.
        """
        self.openapi_types = {
            'callback_url': str,
            'city': str,
            'fetch_services_url': str,
            'id': int,
            'name': str,
            'postal': str,
            'services': List[ShippingService],
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'city': 'city',
            'fetch_services_url': 'fetch_services_url',
            'id': 'id',
            'name': 'name',
            'postal': 'postal',
            'services': 'services',
            'state': 'state',
            'type': 'type'
        }

        self._callback_url = callback_url
        self._city = city
        self._fetch_services_url = fetch_services_url
        self._id = id
        self._name = name
        self._postal = postal
        self._services = services
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingMethodFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingMethodFields of this ShippingMethodFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this ShippingMethodFields.

        URL that receives the shipping data and returns rates

        :return: The callback_url of this ShippingMethodFields.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ShippingMethodFields.

        URL that receives the shipping data and returns rates

        :param callback_url: The callback_url of this ShippingMethodFields.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def city(self):
        """Gets the city of this ShippingMethodFields.

        City/Municipality name of origin

        :return: The city of this ShippingMethodFields.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingMethodFields.

        City/Municipality name of origin

        :param city: The city of this ShippingMethodFields.
        :type city: str
        """

        self._city = city

    @property
    def fetch_services_url(self):
        """Gets the fetch_services_url of this ShippingMethodFields.

        URL that returns available shipping services

        :return: The fetch_services_url of this ShippingMethodFields.
        :rtype: str
        """
        return self._fetch_services_url

    @fetch_services_url.setter
    def fetch_services_url(self, fetch_services_url):
        """Sets the fetch_services_url of this ShippingMethodFields.

        URL that returns available shipping services

        :param fetch_services_url: The fetch_services_url of this ShippingMethodFields.
        :type fetch_services_url: str
        """

        self._fetch_services_url = fetch_services_url

    @property
    def id(self):
        """Gets the id of this ShippingMethodFields.

        Unique identifier of the Shipping Method

        :return: The id of this ShippingMethodFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShippingMethodFields.

        Unique identifier of the Shipping Method

        :param id: The id of this ShippingMethodFields.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ShippingMethodFields.

        Name of the Shipping Method

        :return: The name of this ShippingMethodFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShippingMethodFields.

        Name of the Shipping Method

        :param name: The name of this ShippingMethodFields.
        :type name: str
        """

        self._name = name

    @property
    def postal(self):
        """Gets the postal of this ShippingMethodFields.

        Postal/Zipcode of origin

        :return: The postal of this ShippingMethodFields.
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this ShippingMethodFields.

        Postal/Zipcode of origin

        :param postal: The postal of this ShippingMethodFields.
        :type postal: str
        """

        self._postal = postal

    @property
    def services(self):
        """Gets the services of this ShippingMethodFields.


        :return: The services of this ShippingMethodFields.
        :rtype: List[ShippingService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ShippingMethodFields.


        :param services: The services of this ShippingMethodFields.
        :type services: List[ShippingService]
        """

        self._services = services

    @property
    def state(self):
        """Gets the state of this ShippingMethodFields.

        State/Region code of origin

        :return: The state of this ShippingMethodFields.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ShippingMethodFields.

        State/Region code of origin

        :param state: The state of this ShippingMethodFields.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this ShippingMethodFields.

        Type of the Shipping Method

        :return: The type of this ShippingMethodFields.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShippingMethodFields.

        Type of the Shipping Method

        :param type: The type of this ShippingMethodFields.
        :type type: str
        """
        allowed_values = ["free", "tables", "correiosbr", "correos_chile", "chilexpress", "flat", "ups", "external"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
