# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer import Customer
from openapi_server.models.order_additional_fields import OrderAdditionalFields
from openapi_server.models.order_billing_address import OrderBillingAddress
from openapi_server.models.order_product import OrderProduct
from openapi_server.models.order_shipping_address import OrderShippingAddress
from openapi_server.models.order_shipping_tax import OrderShippingTax
from openapi_server.models.traffic_source import TrafficSource
from openapi_server import util


class OrderFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: List[OrderAdditionalFields]=None, additional_information: str=None, billing_address: OrderBillingAddress=None, checkout_url: str=None, coupons: str=None, created_at: str=None, currency: str=None, customer: Customer=None, discount: float=None, duplicate_url: str=None, external_shipping_rate_id: str=None, id: int=None, payment_information: str=None, payment_method_name: str=None, payment_method_type: str=None, products: List[OrderProduct]=None, recovery_url: str=None, shipment_status: str=None, shipping: float=None, shipping_address: OrderShippingAddress=None, shipping_discount: float=None, shipping_method_id: int=None, shipping_method_name: str=None, shipping_option: str=None, shipping_required: bool=True, shipping_tax: float=None, shipping_taxes: List[OrderShippingTax]=None, source: TrafficSource=None, status: str=None, subtotal: float=None, tax: float=None, total: float=None, tracking_company: str=None, tracking_number: str=None, tracking_url: str=None):
        """OrderFields - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this OrderFields.
        :param additional_information: The additional_information of this OrderFields.
        :param billing_address: The billing_address of this OrderFields.
        :param checkout_url: The checkout_url of this OrderFields.
        :param coupons: The coupons of this OrderFields.
        :param created_at: The created_at of this OrderFields.
        :param currency: The currency of this OrderFields.
        :param customer: The customer of this OrderFields.
        :param discount: The discount of this OrderFields.
        :param duplicate_url: The duplicate_url of this OrderFields.
        :param external_shipping_rate_id: The external_shipping_rate_id of this OrderFields.
        :param id: The id of this OrderFields.
        :param payment_information: The payment_information of this OrderFields.
        :param payment_method_name: The payment_method_name of this OrderFields.
        :param payment_method_type: The payment_method_type of this OrderFields.
        :param products: The products of this OrderFields.
        :param recovery_url: The recovery_url of this OrderFields.
        :param shipment_status: The shipment_status of this OrderFields.
        :param shipping: The shipping of this OrderFields.
        :param shipping_address: The shipping_address of this OrderFields.
        :param shipping_discount: The shipping_discount of this OrderFields.
        :param shipping_method_id: The shipping_method_id of this OrderFields.
        :param shipping_method_name: The shipping_method_name of this OrderFields.
        :param shipping_option: The shipping_option of this OrderFields.
        :param shipping_required: The shipping_required of this OrderFields.
        :param shipping_tax: The shipping_tax of this OrderFields.
        :param shipping_taxes: The shipping_taxes of this OrderFields.
        :param source: The source of this OrderFields.
        :param status: The status of this OrderFields.
        :param subtotal: The subtotal of this OrderFields.
        :param tax: The tax of this OrderFields.
        :param total: The total of this OrderFields.
        :param tracking_company: The tracking_company of this OrderFields.
        :param tracking_number: The tracking_number of this OrderFields.
        :param tracking_url: The tracking_url of this OrderFields.
        """
        self.openapi_types = {
            'additional_fields': List[OrderAdditionalFields],
            'additional_information': str,
            'billing_address': OrderBillingAddress,
            'checkout_url': str,
            'coupons': str,
            'created_at': str,
            'currency': str,
            'customer': Customer,
            'discount': float,
            'duplicate_url': str,
            'external_shipping_rate_id': str,
            'id': int,
            'payment_information': str,
            'payment_method_name': str,
            'payment_method_type': str,
            'products': List[OrderProduct],
            'recovery_url': str,
            'shipment_status': str,
            'shipping': float,
            'shipping_address': OrderShippingAddress,
            'shipping_discount': float,
            'shipping_method_id': int,
            'shipping_method_name': str,
            'shipping_option': str,
            'shipping_required': bool,
            'shipping_tax': float,
            'shipping_taxes': List[OrderShippingTax],
            'source': TrafficSource,
            'status': str,
            'subtotal': float,
            'tax': float,
            'total': float,
            'tracking_company': str,
            'tracking_number': str,
            'tracking_url': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'additional_information': 'additional_information',
            'billing_address': 'billing_address',
            'checkout_url': 'checkout_url',
            'coupons': 'coupons',
            'created_at': 'created_at',
            'currency': 'currency',
            'customer': 'customer',
            'discount': 'discount',
            'duplicate_url': 'duplicate_url',
            'external_shipping_rate_id': 'external_shipping_rate_id',
            'id': 'id',
            'payment_information': 'payment_information',
            'payment_method_name': 'payment_method_name',
            'payment_method_type': 'payment_method_type',
            'products': 'products',
            'recovery_url': 'recovery_url',
            'shipment_status': 'shipment_status',
            'shipping': 'shipping',
            'shipping_address': 'shipping_address',
            'shipping_discount': 'shipping_discount',
            'shipping_method_id': 'shipping_method_id',
            'shipping_method_name': 'shipping_method_name',
            'shipping_option': 'shipping_option',
            'shipping_required': 'shipping_required',
            'shipping_tax': 'shipping_tax',
            'shipping_taxes': 'shipping_taxes',
            'source': 'source',
            'status': 'status',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total': 'total',
            'tracking_company': 'tracking_company',
            'tracking_number': 'tracking_number',
            'tracking_url': 'tracking_url'
        }

        self._additional_fields = additional_fields
        self._additional_information = additional_information
        self._billing_address = billing_address
        self._checkout_url = checkout_url
        self._coupons = coupons
        self._created_at = created_at
        self._currency = currency
        self._customer = customer
        self._discount = discount
        self._duplicate_url = duplicate_url
        self._external_shipping_rate_id = external_shipping_rate_id
        self._id = id
        self._payment_information = payment_information
        self._payment_method_name = payment_method_name
        self._payment_method_type = payment_method_type
        self._products = products
        self._recovery_url = recovery_url
        self._shipment_status = shipment_status
        self._shipping = shipping
        self._shipping_address = shipping_address
        self._shipping_discount = shipping_discount
        self._shipping_method_id = shipping_method_id
        self._shipping_method_name = shipping_method_name
        self._shipping_option = shipping_option
        self._shipping_required = shipping_required
        self._shipping_tax = shipping_tax
        self._shipping_taxes = shipping_taxes
        self._source = source
        self._status = status
        self._subtotal = subtotal
        self._tax = tax
        self._total = total
        self._tracking_company = tracking_company
        self._tracking_number = tracking_number
        self._tracking_url = tracking_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFields of this OrderFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderFields.

        Array of additional fields for the given Order

        :return: The additional_fields of this OrderFields.
        :rtype: List[OrderAdditionalFields]
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderFields.

        Array of additional fields for the given Order

        :param additional_fields: The additional_fields of this OrderFields.
        :type additional_fields: List[OrderAdditionalFields]
        """

        self._additional_fields = additional_fields

    @property
    def additional_information(self):
        """Gets the additional_information of this OrderFields.

        Additional information for the given Order

        :return: The additional_information of this OrderFields.
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this OrderFields.

        Additional information for the given Order

        :param additional_information: The additional_information of this OrderFields.
        :type additional_information: str
        """

        self._additional_information = additional_information

    @property
    def billing_address(self):
        """Gets the billing_address of this OrderFields.


        :return: The billing_address of this OrderFields.
        :rtype: OrderBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrderFields.


        :param billing_address: The billing_address of this OrderFields.
        :type billing_address: OrderBillingAddress
        """

        self._billing_address = billing_address

    @property
    def checkout_url(self):
        """Gets the checkout_url of this OrderFields.

        Store Checkout Order URL for the given Order

        :return: The checkout_url of this OrderFields.
        :rtype: str
        """
        return self._checkout_url

    @checkout_url.setter
    def checkout_url(self, checkout_url):
        """Sets the checkout_url of this OrderFields.

        Store Checkout Order URL for the given Order

        :param checkout_url: The checkout_url of this OrderFields.
        :type checkout_url: str
        """

        self._checkout_url = checkout_url

    @property
    def coupons(self):
        """Gets the coupons of this OrderFields.

        Promotion Coupons used on the given Order

        :return: The coupons of this OrderFields.
        :rtype: str
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this OrderFields.

        Promotion Coupons used on the given Order

        :param coupons: The coupons of this OrderFields.
        :type coupons: str
        """

        self._coupons = coupons

    @property
    def created_at(self):
        """Gets the created_at of this OrderFields.

        Order date

        :return: The created_at of this OrderFields.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrderFields.

        Order date

        :param created_at: The created_at of this OrderFields.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this OrderFields.

        Currency of the Order

        :return: The currency of this OrderFields.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderFields.

        Currency of the Order

        :param currency: The currency of this OrderFields.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this OrderFields.


        :return: The customer of this OrderFields.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this OrderFields.


        :param customer: The customer of this OrderFields.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def discount(self):
        """Gets the discount of this OrderFields.

        Discount value for the given Order

        :return: The discount of this OrderFields.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderFields.

        Discount value for the given Order

        :param discount: The discount of this OrderFields.
        :type discount: float
        """

        self._discount = discount

    @property
    def duplicate_url(self):
        """Gets the duplicate_url of this OrderFields.

        Duplicate Order URL for the given Order

        :return: The duplicate_url of this OrderFields.
        :rtype: str
        """
        return self._duplicate_url

    @duplicate_url.setter
    def duplicate_url(self, duplicate_url):
        """Sets the duplicate_url of this OrderFields.

        Duplicate Order URL for the given Order

        :param duplicate_url: The duplicate_url of this OrderFields.
        :type duplicate_url: str
        """

        self._duplicate_url = duplicate_url

    @property
    def external_shipping_rate_id(self):
        """Gets the external_shipping_rate_id of this OrderFields.

        Rate id for selected External Shipping Method rate

        :return: The external_shipping_rate_id of this OrderFields.
        :rtype: str
        """
        return self._external_shipping_rate_id

    @external_shipping_rate_id.setter
    def external_shipping_rate_id(self, external_shipping_rate_id):
        """Sets the external_shipping_rate_id of this OrderFields.

        Rate id for selected External Shipping Method rate

        :param external_shipping_rate_id: The external_shipping_rate_id of this OrderFields.
        :type external_shipping_rate_id: str
        """

        self._external_shipping_rate_id = external_shipping_rate_id

    @property
    def id(self):
        """Gets the id of this OrderFields.

        Unique identifier of the Order

        :return: The id of this OrderFields.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderFields.

        Unique identifier of the Order

        :param id: The id of this OrderFields.
        :type id: int
        """

        self._id = id

    @property
    def payment_information(self):
        """Gets the payment_information of this OrderFields.

        Payment information for the given Order

        :return: The payment_information of this OrderFields.
        :rtype: str
        """
        return self._payment_information

    @payment_information.setter
    def payment_information(self, payment_information):
        """Sets the payment_information of this OrderFields.

        Payment information for the given Order

        :param payment_information: The payment_information of this OrderFields.
        :type payment_information: str
        """

        self._payment_information = payment_information

    @property
    def payment_method_name(self):
        """Gets the payment_method_name of this OrderFields.

        Payment Method name used e.g. PayPal

        :return: The payment_method_name of this OrderFields.
        :rtype: str
        """
        return self._payment_method_name

    @payment_method_name.setter
    def payment_method_name(self, payment_method_name):
        """Sets the payment_method_name of this OrderFields.

        Payment Method name used e.g. PayPal

        :param payment_method_name: The payment_method_name of this OrderFields.
        :type payment_method_name: str
        """

        self._payment_method_name = payment_method_name

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this OrderFields.

        Payment Method type used e.g. paypal

        :return: The payment_method_type of this OrderFields.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this OrderFields.

        Payment Method type used e.g. paypal

        :param payment_method_type: The payment_method_type of this OrderFields.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def products(self):
        """Gets the products of this OrderFields.


        :return: The products of this OrderFields.
        :rtype: List[OrderProduct]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this OrderFields.


        :param products: The products of this OrderFields.
        :type products: List[OrderProduct]
        """

        self._products = products

    @property
    def recovery_url(self):
        """Gets the recovery_url of this OrderFields.

        Recovery Order URL for the given Order

        :return: The recovery_url of this OrderFields.
        :rtype: str
        """
        return self._recovery_url

    @recovery_url.setter
    def recovery_url(self, recovery_url):
        """Sets the recovery_url of this OrderFields.

        Recovery Order URL for the given Order

        :param recovery_url: The recovery_url of this OrderFields.
        :type recovery_url: str
        """

        self._recovery_url = recovery_url

    @property
    def shipment_status(self):
        """Gets the shipment_status of this OrderFields.

        Shipment Status for Order Fulfillment.

        :return: The shipment_status of this OrderFields.
        :rtype: str
        """
        return self._shipment_status

    @shipment_status.setter
    def shipment_status(self, shipment_status):
        """Sets the shipment_status of this OrderFields.

        Shipment Status for Order Fulfillment.

        :param shipment_status: The shipment_status of this OrderFields.
        :type shipment_status: str
        """
        allowed_values = ["delivered", "requested", "in_transit", "failed", "pickup_available"]  # noqa: E501
        if shipment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `shipment_status` ({0}), must be one of {1}"
                .format(shipment_status, allowed_values)
            )

        self._shipment_status = shipment_status

    @property
    def shipping(self):
        """Gets the shipping of this OrderFields.

        Shipping value for the given Order

        :return: The shipping of this OrderFields.
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrderFields.

        Shipping value for the given Order

        :param shipping: The shipping of this OrderFields.
        :type shipping: float
        """

        self._shipping = shipping

    @property
    def shipping_address(self):
        """Gets the shipping_address of this OrderFields.


        :return: The shipping_address of this OrderFields.
        :rtype: OrderShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this OrderFields.


        :param shipping_address: The shipping_address of this OrderFields.
        :type shipping_address: OrderShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def shipping_discount(self):
        """Gets the shipping_discount of this OrderFields.

        Shipping Discount value for the given order

        :return: The shipping_discount of this OrderFields.
        :rtype: float
        """
        return self._shipping_discount

    @shipping_discount.setter
    def shipping_discount(self, shipping_discount):
        """Sets the shipping_discount of this OrderFields.

        Shipping Discount value for the given order

        :param shipping_discount: The shipping_discount of this OrderFields.
        :type shipping_discount: float
        """

        self._shipping_discount = shipping_discount

    @property
    def shipping_method_id(self):
        """Gets the shipping_method_id of this OrderFields.

        Shipping method e.g. Royal Mail

        :return: The shipping_method_id of this OrderFields.
        :rtype: int
        """
        return self._shipping_method_id

    @shipping_method_id.setter
    def shipping_method_id(self, shipping_method_id):
        """Sets the shipping_method_id of this OrderFields.

        Shipping method e.g. Royal Mail

        :param shipping_method_id: The shipping_method_id of this OrderFields.
        :type shipping_method_id: int
        """

        self._shipping_method_id = shipping_method_id

    @property
    def shipping_method_name(self):
        """Gets the shipping_method_name of this OrderFields.

        Shipping method e.g. Royal Mail

        :return: The shipping_method_name of this OrderFields.
        :rtype: str
        """
        return self._shipping_method_name

    @shipping_method_name.setter
    def shipping_method_name(self, shipping_method_name):
        """Sets the shipping_method_name of this OrderFields.

        Shipping method e.g. Royal Mail

        :param shipping_method_name: The shipping_method_name of this OrderFields.
        :type shipping_method_name: str
        """

        self._shipping_method_name = shipping_method_name

    @property
    def shipping_option(self):
        """Gets the shipping_option of this OrderFields.

        Shipping option for this order.

        :return: The shipping_option of this OrderFields.
        :rtype: str
        """
        return self._shipping_option

    @shipping_option.setter
    def shipping_option(self, shipping_option):
        """Sets the shipping_option of this OrderFields.

        Shipping option for this order.

        :param shipping_option: The shipping_option of this OrderFields.
        :type shipping_option: str
        """
        allowed_values = ["delivery", "store_pickup", "no_shipping"]  # noqa: E501
        if shipping_option not in allowed_values:
            raise ValueError(
                "Invalid value for `shipping_option` ({0}), must be one of {1}"
                .format(shipping_option, allowed_values)
            )

        self._shipping_option = shipping_option

    @property
    def shipping_required(self):
        """Gets the shipping_required of this OrderFields.

        False if the order is digital.

        :return: The shipping_required of this OrderFields.
        :rtype: bool
        """
        return self._shipping_required

    @shipping_required.setter
    def shipping_required(self, shipping_required):
        """Sets the shipping_required of this OrderFields.

        False if the order is digital.

        :param shipping_required: The shipping_required of this OrderFields.
        :type shipping_required: bool
        """

        self._shipping_required = shipping_required

    @property
    def shipping_tax(self):
        """Gets the shipping_tax of this OrderFields.

        Shipping Tax value for the given order

        :return: The shipping_tax of this OrderFields.
        :rtype: float
        """
        return self._shipping_tax

    @shipping_tax.setter
    def shipping_tax(self, shipping_tax):
        """Sets the shipping_tax of this OrderFields.

        Shipping Tax value for the given order

        :param shipping_tax: The shipping_tax of this OrderFields.
        :type shipping_tax: float
        """

        self._shipping_tax = shipping_tax

    @property
    def shipping_taxes(self):
        """Gets the shipping_taxes of this OrderFields.


        :return: The shipping_taxes of this OrderFields.
        :rtype: List[OrderShippingTax]
        """
        return self._shipping_taxes

    @shipping_taxes.setter
    def shipping_taxes(self, shipping_taxes):
        """Sets the shipping_taxes of this OrderFields.


        :param shipping_taxes: The shipping_taxes of this OrderFields.
        :type shipping_taxes: List[OrderShippingTax]
        """

        self._shipping_taxes = shipping_taxes

    @property
    def source(self):
        """Gets the source of this OrderFields.


        :return: The source of this OrderFields.
        :rtype: TrafficSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OrderFields.


        :param source: The source of this OrderFields.
        :type source: TrafficSource
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this OrderFields.

        Status of the Order

        :return: The status of this OrderFields.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderFields.

        Status of the Order

        :param status: The status of this OrderFields.
        :type status: str
        """
        allowed_values = ["Abandoned", "Canceled", "Pending Payment", "Paid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subtotal(self):
        """Gets the subtotal of this OrderFields.

        Subtotal value for the given Order. Excluding taxes, shipping and discounts

        :return: The subtotal of this OrderFields.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OrderFields.

        Subtotal value for the given Order. Excluding taxes, shipping and discounts

        :param subtotal: The subtotal of this OrderFields.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this OrderFields.

        Tax value for the given order

        :return: The tax of this OrderFields.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OrderFields.

        Tax value for the given order

        :param tax: The tax of this OrderFields.
        :type tax: float
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this OrderFields.

        Total value for the given Order. Including taxes, shipping and discounts

        :return: The total of this OrderFields.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderFields.

        Total value for the given Order. Including taxes, shipping and discounts

        :param total: The total of this OrderFields.
        :type total: float
        """

        self._total = total

    @property
    def tracking_company(self):
        """Gets the tracking_company of this OrderFields.

        Company Used for Order Fulfillment.

        :return: The tracking_company of this OrderFields.
        :rtype: str
        """
        return self._tracking_company

    @tracking_company.setter
    def tracking_company(self, tracking_company):
        """Sets the tracking_company of this OrderFields.

        Company Used for Order Fulfillment.

        :param tracking_company: The tracking_company of this OrderFields.
        :type tracking_company: str
        """

        self._tracking_company = tracking_company

    @property
    def tracking_number(self):
        """Gets the tracking_number of this OrderFields.

        Tracking Number for Order Fulfillment.

        :return: The tracking_number of this OrderFields.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this OrderFields.

        Tracking Number for Order Fulfillment.

        :param tracking_number: The tracking_number of this OrderFields.
        :type tracking_number: str
        """

        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """Gets the tracking_url of this OrderFields.

        Tracking URL for Order Fulfillment.

        :return: The tracking_url of this OrderFields.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this OrderFields.

        Tracking URL for Order Fulfillment.

        :param tracking_url: The tracking_url of this OrderFields.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url
