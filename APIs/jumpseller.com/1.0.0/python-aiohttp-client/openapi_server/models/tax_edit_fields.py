# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxEditFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, country: str=None, fixed: bool=False, name: str=None, region: str=None, shipping: bool=False, tax: float=None):
        """TaxEditFields - a model defined in OpenAPI

        :param category_id: The category_id of this TaxEditFields.
        :param country: The country of this TaxEditFields.
        :param fixed: The fixed of this TaxEditFields.
        :param name: The name of this TaxEditFields.
        :param region: The region of this TaxEditFields.
        :param shipping: The shipping of this TaxEditFields.
        :param tax: The tax of this TaxEditFields.
        """
        self.openapi_types = {
            'category_id': int,
            'country': str,
            'fixed': bool,
            'name': str,
            'region': str,
            'shipping': bool,
            'tax': float
        }

        self.attribute_map = {
            'category_id': 'category_id',
            'country': 'country',
            'fixed': 'fixed',
            'name': 'name',
            'region': 'region',
            'shipping': 'shipping',
            'tax': 'tax'
        }

        self._category_id = category_id
        self._country = country
        self._fixed = fixed
        self._name = name
        self._region = region
        self._shipping = shipping
        self._tax = tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxEditFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxEditFields of this TaxEditFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this TaxEditFields.

        Unique identifier of the category of the Tax

        :return: The category_id of this TaxEditFields.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this TaxEditFields.

        Unique identifier of the category of the Tax

        :param category_id: The category_id of this TaxEditFields.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def country(self):
        """Gets the country of this TaxEditFields.

        Country where the Tax applies

        :return: The country of this TaxEditFields.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxEditFields.

        Country where the Tax applies

        :param country: The country of this TaxEditFields.
        :type country: str
        """

        self._country = country

    @property
    def fixed(self):
        """Gets the fixed of this TaxEditFields.

        True if the tax has a fixed valued amount

        :return: The fixed of this TaxEditFields.
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this TaxEditFields.

        True if the tax has a fixed valued amount

        :param fixed: The fixed of this TaxEditFields.
        :type fixed: bool
        """

        self._fixed = fixed

    @property
    def name(self):
        """Gets the name of this TaxEditFields.

        Name that identifies tax

        :return: The name of this TaxEditFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxEditFields.

        Name that identifies tax

        :param name: The name of this TaxEditFields.
        :type name: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this TaxEditFields.

        Region where the Tax applies

        :return: The region of this TaxEditFields.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TaxEditFields.

        Region where the Tax applies

        :param region: The region of this TaxEditFields.
        :type region: str
        """

        self._region = region

    @property
    def shipping(self):
        """Gets the shipping of this TaxEditFields.

        True if the tax should be applied to shipping costs

        :return: The shipping of this TaxEditFields.
        :rtype: bool
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this TaxEditFields.

        True if the tax should be applied to shipping costs

        :param shipping: The shipping of this TaxEditFields.
        :type shipping: bool
        """

        self._shipping = shipping

    @property
    def tax(self):
        """Gets the tax of this TaxEditFields.

        Tax value for the given Tax

        :return: The tax of this TaxEditFields.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this TaxEditFields.

        Tax value for the given Tax

        :param tax: The tax of this TaxEditFields.
        :type tax: float
        """

        self._tax = tax
