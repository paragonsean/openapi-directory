# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, country_code: str=None, postal: str=None, region: str=None, region_code: str=None):
        """StoreAddress - a model defined in OpenAPI

        :param address: The address of this StoreAddress.
        :param city: The city of this StoreAddress.
        :param country: The country of this StoreAddress.
        :param country_code: The country_code of this StoreAddress.
        :param postal: The postal of this StoreAddress.
        :param region: The region of this StoreAddress.
        :param region_code: The region_code of this StoreAddress.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'country_code': str,
            'postal': str,
            'region': str,
            'region_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'country_code': 'country_code',
            'postal': 'postal',
            'region': 'region',
            'region_code': 'region_code'
        }

        self._address = address
        self._city = city
        self._country = country
        self._country_code = country_code
        self._postal = postal
        self._region = region
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreAddress of this StoreAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this StoreAddress.

        Address of the Store's Address

        :return: The address of this StoreAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StoreAddress.

        Address of the Store's Address

        :param address: The address of this StoreAddress.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this StoreAddress.

        City of the Store's Address

        :return: The city of this StoreAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StoreAddress.

        City of the Store's Address

        :param city: The city of this StoreAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this StoreAddress.

        Country of the Store's Address (ISO 3166-1 alpha-2)

        :return: The country of this StoreAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StoreAddress.

        Country of the Store's Address (ISO 3166-1 alpha-2)

        :param country: The country of this StoreAddress.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this StoreAddress.

        Country code of the Store's Address

        :return: The country_code of this StoreAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StoreAddress.

        Country code of the Store's Address

        :param country_code: The country_code of this StoreAddress.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def postal(self):
        """Gets the postal of this StoreAddress.

        Postal code of the Store's Address

        :return: The postal of this StoreAddress.
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this StoreAddress.

        Postal code of the Store's Address

        :param postal: The postal of this StoreAddress.
        :type postal: str
        """

        self._postal = postal

    @property
    def region(self):
        """Gets the region of this StoreAddress.

        Region of the Store's Address

        :return: The region of this StoreAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this StoreAddress.

        Region of the Store's Address

        :param region: The region of this StoreAddress.
        :type region: str
        """

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this StoreAddress.

        Region code of the Store's Address

        :return: The region_code of this StoreAddress.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this StoreAddress.

        Region code of the Store's Address

        :param region_code: The region_code of this StoreAddress.
        :type region_code: str
        """

        self._region_code = region_code
