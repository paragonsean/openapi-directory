# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HookEditFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, url: str=None):
        """HookEditFields - a model defined in OpenAPI

        :param event: The event of this HookEditFields.
        :param url: The url of this HookEditFields.
        """
        self.openapi_types = {
            'event': str,
            'url': str
        }

        self.attribute_map = {
            'event': 'event',
            'url': 'url'
        }

        self._event = event
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookEditFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookEditFields of this HookEditFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this HookEditFields.

        Event associated with Hook

        :return: The event of this HookEditFields.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HookEditFields.

        Event associated with Hook

        :param event: The event of this HookEditFields.
        :type event: str
        """
        allowed_values = ["order_updated", "order_pending_payment", "order_paid", "order_shipped", "order_canceled", "order_abandoned", "product_created", "product_updated", "product_deleted", "customer_created", "customer_updated", "customer_deleted"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def url(self):
        """Gets the url of this HookEditFields.

        Hook URL to be notified

        :return: The url of this HookEditFields.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HookEditFields.

        Hook URL to be notified

        :param url: The url of this HookEditFields.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
