/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommentsResponse;
import org.openapitools.client.model.StatusResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Remove a comment.
     *
     * Remove a comment either on the authenticated user&#39;s media object or authored by the authenticated user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaMediaIdCommentsCommentIdDeleteTest() throws ApiException {
        String mediaId = null;
        String commentId = null;
        StatusResponse response = api.mediaMediaIdCommentsCommentIdDelete(mediaId, commentId);
        // TODO: test validations
    }

    /**
     * Get a list of recent comments on a media object.
     *
     * Get a list of recent comments on a media object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaMediaIdCommentsGetTest() throws ApiException {
        String mediaId = null;
        CommentsResponse response = api.mediaMediaIdCommentsGet(mediaId);
        // TODO: test validations
    }

    /**
     * Create a comment on a media object.
     *
     * Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaMediaIdCommentsPostTest() throws ApiException {
        String mediaId = null;
        String text = null;
        StatusResponse response = api.mediaMediaIdCommentsPost(mediaId, text);
        // TODO: test validations
    }

}
