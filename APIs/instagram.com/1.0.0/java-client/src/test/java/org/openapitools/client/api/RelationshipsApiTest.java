/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RelationshipPostResponse;
import org.openapitools.client.model.RelationshipResponse;
import org.openapitools.client.model.UsersInfoResponse;
import org.openapitools.client.model.UsersPagingResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RelationshipsApi
 */
@Disabled
public class RelationshipsApiTest {

    private final RelationshipsApi api = new RelationshipsApi();

    /**
     * List the users who have requested this user&#39;s permission to follow.
     *
     * List the users who have requested this user&#39;s permission to follow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSelfRequestedByGetTest() throws ApiException {
        UsersInfoResponse response = api.usersSelfRequestedByGet();
        // TODO: test validations
    }

    /**
     * Get the list of users this user is followed by.
     *
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdFollowedByGetTest() throws ApiException {
        String userId = null;
        UsersPagingResponse response = api.usersUserIdFollowedByGet(userId);
        // TODO: test validations
    }

    /**
     * Get the list of users this user follows.
     *
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdFollowsGetTest() throws ApiException {
        String userId = null;
        UsersPagingResponse response = api.usersUserIdFollowsGet(userId);
        // TODO: test validations
    }

    /**
     * Get information about a relationship to another user.
     *
     * Get information about a relationship to another user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdRelationshipGetTest() throws ApiException {
        String userId = null;
        RelationshipResponse response = api.usersUserIdRelationshipGet(userId);
        // TODO: test validations
    }

    /**
     * Modify the relationship between the current user and the target user.
     *
     * Modify the relationship between the current user and the target user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdRelationshipPostTest() throws ApiException {
        String userId = null;
        String action = null;
        RelationshipPostResponse response = api.usersUserIdRelationshipPost(userId, action);
        // TODO: test validations
    }

}
