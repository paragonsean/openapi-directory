/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LocationInfoResponse;
import org.openapitools.client.model.LocationSearchResponse;
import org.openapitools.client.model.MediaListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Get information about a location.
     *
     * Get information about a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsLocationIdGetTest() throws ApiException {
        String locationId = null;
        LocationInfoResponse response = api.locationsLocationIdGet(locationId);
        // TODO: test validations
    }

    /**
     * Get a list of recent media objects from a given location.
     *
     * Get a list of recent media objects from a given location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsLocationIdMediaRecentGetTest() throws ApiException {
        String locationId = null;
        Long minTimestamp = null;
        Long maxTimestamp = null;
        String minId = null;
        String maxId = null;
        MediaListResponse response = api.locationsLocationIdMediaRecentGet(locationId, minTimestamp, maxTimestamp, minId, maxId);
        // TODO: test validations
    }

    /**
     * Search for a location by geographic coordinate.
     *
     * Search for a location by geographic coordinate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsSearchGetTest() throws ApiException {
        Integer distance = null;
        String facebookPlacesId = null;
        String foursquareId = null;
        Double lat = null;
        Double lng = null;
        String foursquareV2Id = null;
        LocationSearchResponse response = api.locationsSearchGet(distance, facebookPlacesId, foursquareId, lat, lng, foursquareV2Id);
        // TODO: test validations
    }

}
