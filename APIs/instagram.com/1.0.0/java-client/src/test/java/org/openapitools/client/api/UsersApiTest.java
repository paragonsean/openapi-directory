/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MediaListResponse;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.UsersInfoResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Search for a user by name.
     *
     * Search for a user by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSearchGetTest() throws ApiException {
        String q = null;
        Integer count = null;
        UsersInfoResponse response = api.usersSearchGet(q, count);
        // TODO: test validations
    }

    /**
     * See the authenticated user&#39;s feed.
     *
     * See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSelfFeedGetTest() throws ApiException {
        Integer count = null;
        String minId = null;
        String maxId = null;
        MediaListResponse response = api.usersSelfFeedGet(count, minId, maxId);
        // TODO: test validations
    }

    /**
     * See the list of media liked by the authenticated user.
     *
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSelfMediaLikedGetTest() throws ApiException {
        Integer count = null;
        String maxLikeId = null;
        MediaListResponse response = api.usersSelfMediaLikedGet(count, maxLikeId);
        // TODO: test validations
    }

    /**
     * Get basic information about a user.
     *
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        String userId = null;
        UserResponse response = api.usersUserIdGet(userId);
        // TODO: test validations
    }

    /**
     * Get the most recent media published by a user.
     *
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdMediaRecentGetTest() throws ApiException {
        String userId = null;
        Integer count = null;
        Long maxTimestamp = null;
        Long minTimestamp = null;
        String minId = null;
        String maxId = null;
        MediaListResponse response = api.usersUserIdMediaRecentGet(userId, count, maxTimestamp, minTimestamp, minId, maxId);
        // TODO: test validations
    }

}
