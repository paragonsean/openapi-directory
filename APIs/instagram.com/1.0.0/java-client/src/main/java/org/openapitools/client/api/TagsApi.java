/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TagInfoResponse;
import org.openapitools.client.model.TagMediaListResponse;
import org.openapitools.client.model.TagSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tagsSearchGet
     * @param q A valid tag name without a leading \\#. (eg. snowy, nofilter) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found tags and their statistics. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsSearchGetCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsSearchGetValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling tagsSearchGet(Async)");
        }

        return tagsSearchGetCall(q, _callback);

    }

    /**
     * Search for tags by name.
     * Search for tags by name.
     * @param q A valid tag name without a leading \\#. (eg. snowy, nofilter) (required)
     * @return TagSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found tags and their statistics. </td><td>  -  </td></tr>
     </table>
     */
    public TagSearchResponse tagsSearchGet(String q) throws ApiException {
        ApiResponse<TagSearchResponse> localVarResp = tagsSearchGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Search for tags by name.
     * Search for tags by name.
     * @param q A valid tag name without a leading \\#. (eg. snowy, nofilter) (required)
     * @return ApiResponse&lt;TagSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found tags and their statistics. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagSearchResponse> tagsSearchGetWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = tagsSearchGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<TagSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for tags by name. (asynchronously)
     * Search for tags by name.
     * @param q A valid tag name without a leading \\#. (eg. snowy, nofilter) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found tags and their statistics. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsSearchGetAsync(String q, final ApiCallback<TagSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsSearchGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<TagSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsTagNameGet
     * @param tagName The tag name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag information response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsTagNameGetCall(String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag-name}"
            .replace("{" + "tag-name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsTagNameGetValidateBeforeCall(String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling tagsTagNameGet(Async)");
        }

        return tagsTagNameGetCall(tagName, _callback);

    }

    /**
     * Get information about a tag object.
     * Get information about a tag object.
     * @param tagName The tag name. (required)
     * @return TagInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag information response. </td><td>  -  </td></tr>
     </table>
     */
    public TagInfoResponse tagsTagNameGet(String tagName) throws ApiException {
        ApiResponse<TagInfoResponse> localVarResp = tagsTagNameGetWithHttpInfo(tagName);
        return localVarResp.getData();
    }

    /**
     * Get information about a tag object.
     * Get information about a tag object.
     * @param tagName The tag name. (required)
     * @return ApiResponse&lt;TagInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag information response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagInfoResponse> tagsTagNameGetWithHttpInfo(String tagName) throws ApiException {
        okhttp3.Call localVarCall = tagsTagNameGetValidateBeforeCall(tagName, null);
        Type localVarReturnType = new TypeToken<TagInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a tag object. (asynchronously)
     * Get information about a tag object.
     * @param tagName The tag name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag information response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsTagNameGetAsync(String tagName, final ApiCallback<TagInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsTagNameGetValidateBeforeCall(tagName, _callback);
        Type localVarReturnType = new TypeToken<TagInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsTagNameMediaRecentGet
     * @param tagName The tag name. (required)
     * @param count Count of tagged media to return. (optional)
     * @param minTagId Return media before this &#x60;min_tag_id&#x60;. (optional)
     * @param maxTagId Return media after this &#x60;max_tag_id&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries with this tag. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsTagNameMediaRecentGetCall(String tagName, Integer count, String minTagId, String maxTagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag-name}/media/recent"
            .replace("{" + "tag-name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minTagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_tag_id", minTagId));
        }

        if (maxTagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_tag_id", maxTagId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsTagNameMediaRecentGetValidateBeforeCall(String tagName, Integer count, String minTagId, String maxTagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling tagsTagNameMediaRecentGet(Async)");
        }

        return tagsTagNameMediaRecentGetCall(tagName, count, minTagId, maxTagId, _callback);

    }

    /**
     * Get a list of recently tagged media.
     * Get a list of recently tagged media. Use the &#x60;max_tag_id&#x60; and &#x60;min_tag_id&#x60; parameters in the pagination response to paginate through these objects. 
     * @param tagName The tag name. (required)
     * @param count Count of tagged media to return. (optional)
     * @param minTagId Return media before this &#x60;min_tag_id&#x60;. (optional)
     * @param maxTagId Return media after this &#x60;max_tag_id&#x60;. (optional)
     * @return TagMediaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries with this tag. </td><td>  -  </td></tr>
     </table>
     */
    public TagMediaListResponse tagsTagNameMediaRecentGet(String tagName, Integer count, String minTagId, String maxTagId) throws ApiException {
        ApiResponse<TagMediaListResponse> localVarResp = tagsTagNameMediaRecentGetWithHttpInfo(tagName, count, minTagId, maxTagId);
        return localVarResp.getData();
    }

    /**
     * Get a list of recently tagged media.
     * Get a list of recently tagged media. Use the &#x60;max_tag_id&#x60; and &#x60;min_tag_id&#x60; parameters in the pagination response to paginate through these objects. 
     * @param tagName The tag name. (required)
     * @param count Count of tagged media to return. (optional)
     * @param minTagId Return media before this &#x60;min_tag_id&#x60;. (optional)
     * @param maxTagId Return media after this &#x60;max_tag_id&#x60;. (optional)
     * @return ApiResponse&lt;TagMediaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries with this tag. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagMediaListResponse> tagsTagNameMediaRecentGetWithHttpInfo(String tagName, Integer count, String minTagId, String maxTagId) throws ApiException {
        okhttp3.Call localVarCall = tagsTagNameMediaRecentGetValidateBeforeCall(tagName, count, minTagId, maxTagId, null);
        Type localVarReturnType = new TypeToken<TagMediaListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of recently tagged media. (asynchronously)
     * Get a list of recently tagged media. Use the &#x60;max_tag_id&#x60; and &#x60;min_tag_id&#x60; parameters in the pagination response to paginate through these objects. 
     * @param tagName The tag name. (required)
     * @param count Count of tagged media to return. (optional)
     * @param minTagId Return media before this &#x60;min_tag_id&#x60;. (optional)
     * @param maxTagId Return media after this &#x60;max_tag_id&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries with this tag. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsTagNameMediaRecentGetAsync(String tagName, Integer count, String minTagId, String maxTagId, final ApiCallback<TagMediaListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsTagNameMediaRecentGetValidateBeforeCall(tagName, count, minTagId, maxTagId, _callback);
        Type localVarReturnType = new TypeToken<TagMediaListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
