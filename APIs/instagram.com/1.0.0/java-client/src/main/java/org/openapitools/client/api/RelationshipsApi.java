/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RelationshipPostResponse;
import org.openapitools.client.model.RelationshipResponse;
import org.openapitools.client.model.UsersInfoResponse;
import org.openapitools.client.model.UsersPagingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationshipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RelationshipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationshipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersSelfRequestedByGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users who have requested this user&#39;s permission to follow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSelfRequestedByGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/self/requested-by";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSelfRequestedByGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersSelfRequestedByGetCall(_callback);

    }

    /**
     * List the users who have requested this user&#39;s permission to follow.
     * List the users who have requested this user&#39;s permission to follow.
     * @return UsersInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users who have requested this user&#39;s permission to follow. </td><td>  -  </td></tr>
     </table>
     */
    public UsersInfoResponse usersSelfRequestedByGet() throws ApiException {
        ApiResponse<UsersInfoResponse> localVarResp = usersSelfRequestedByGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List the users who have requested this user&#39;s permission to follow.
     * List the users who have requested this user&#39;s permission to follow.
     * @return ApiResponse&lt;UsersInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users who have requested this user&#39;s permission to follow. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersInfoResponse> usersSelfRequestedByGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersSelfRequestedByGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users who have requested this user&#39;s permission to follow. (asynchronously)
     * List the users who have requested this user&#39;s permission to follow.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users who have requested this user&#39;s permission to follow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSelfRequestedByGetAsync(final ApiCallback<UsersInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSelfRequestedByGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdFollowedByGet
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user is followed by. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdFollowedByGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/followed-by"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdFollowedByGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdFollowedByGet(Async)");
        }

        return usersUserIdFollowedByGetCall(userId, _callback);

    }

    /**
     * Get the list of users this user is followed by.
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return UsersPagingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user is followed by. </td><td>  -  </td></tr>
     </table>
     */
    public UsersPagingResponse usersUserIdFollowedByGet(String userId) throws ApiException {
        ApiResponse<UsersPagingResponse> localVarResp = usersUserIdFollowedByGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get the list of users this user is followed by.
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return ApiResponse&lt;UsersPagingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user is followed by. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersPagingResponse> usersUserIdFollowedByGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdFollowedByGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UsersPagingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of users this user is followed by. (asynchronously)
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user is followed by. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdFollowedByGetAsync(String userId, final ApiCallback<UsersPagingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdFollowedByGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UsersPagingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdFollowsGet
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user follows. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdFollowsGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/follows"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdFollowsGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdFollowsGet(Async)");
        }

        return usersUserIdFollowsGetCall(userId, _callback);

    }

    /**
     * Get the list of users this user follows.
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return UsersPagingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user follows. </td><td>  -  </td></tr>
     </table>
     */
    public UsersPagingResponse usersUserIdFollowsGet(String userId) throws ApiException {
        ApiResponse<UsersPagingResponse> localVarResp = usersUserIdFollowsGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get the list of users this user follows.
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return ApiResponse&lt;UsersPagingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user follows. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersPagingResponse> usersUserIdFollowsGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdFollowsGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UsersPagingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of users this user follows. (asynchronously)
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users this user follows. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdFollowsGetAsync(String userId, final ApiCallback<UsersPagingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdFollowsGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UsersPagingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdRelationshipGet
     * @param userId The ID of a user to get information about. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdRelationshipGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/relationship"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdRelationshipGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdRelationshipGet(Async)");
        }

        return usersUserIdRelationshipGetCall(userId, _callback);

    }

    /**
     * Get information about a relationship to another user.
     * Get information about a relationship to another user.
     * @param userId The ID of a user to get information about. (required)
     * @return RelationshipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipResponse usersUserIdRelationshipGet(String userId) throws ApiException {
        ApiResponse<RelationshipResponse> localVarResp = usersUserIdRelationshipGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get information about a relationship to another user.
     * Get information about a relationship to another user.
     * @param userId The ID of a user to get information about. (required)
     * @return ApiResponse&lt;RelationshipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipResponse> usersUserIdRelationshipGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdRelationshipGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<RelationshipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a relationship to another user. (asynchronously)
     * Get information about a relationship to another user.
     * @param userId The ID of a user to get information about. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdRelationshipGetAsync(String userId, final ApiCallback<RelationshipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdRelationshipGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<RelationshipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdRelationshipPost
     * @param userId The ID of the target user. (required)
     * @param action Type of action to apply for relationship with the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdRelationshipPostCall(String userId, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/relationship"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdRelationshipPostValidateBeforeCall(String userId, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdRelationshipPost(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling usersUserIdRelationshipPost(Async)");
        }

        return usersUserIdRelationshipPostCall(userId, action, _callback);

    }

    /**
     * Modify the relationship between the current user and the target user.
     * Modify the relationship between the current user and the target user.
     * @param userId The ID of the target user. (required)
     * @param action Type of action to apply for relationship with the user. (required)
     * @return RelationshipPostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipPostResponse usersUserIdRelationshipPost(String userId, String action) throws ApiException {
        ApiResponse<RelationshipPostResponse> localVarResp = usersUserIdRelationshipPostWithHttpInfo(userId, action);
        return localVarResp.getData();
    }

    /**
     * Modify the relationship between the current user and the target user.
     * Modify the relationship between the current user and the target user.
     * @param userId The ID of the target user. (required)
     * @param action Type of action to apply for relationship with the user. (required)
     * @return ApiResponse&lt;RelationshipPostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipPostResponse> usersUserIdRelationshipPostWithHttpInfo(String userId, String action) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdRelationshipPostValidateBeforeCall(userId, action, null);
        Type localVarReturnType = new TypeToken<RelationshipPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the relationship between the current user and the target user. (asynchronously)
     * Modify the relationship between the current user and the target user.
     * @param userId The ID of the target user. (required)
     * @param action Type of action to apply for relationship with the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Relationship information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdRelationshipPostAsync(String userId, String action, final ApiCallback<RelationshipPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdRelationshipPostValidateBeforeCall(userId, action, _callback);
        Type localVarReturnType = new TypeToken<RelationshipPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
