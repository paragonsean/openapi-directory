/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MediaListResponse;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.UsersInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersSearchGet
     * @param q A query string. (required)
     * @param count Number of users to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetCall(String q, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSearchGetValidateBeforeCall(String q, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling usersSearchGet(Async)");
        }

        return usersSearchGetCall(q, count, _callback);

    }

    /**
     * Search for a user by name.
     * Search for a user by name.
     * @param q A query string. (required)
     * @param count Number of users to return. (optional)
     * @return UsersInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found users. </td><td>  -  </td></tr>
     </table>
     */
    public UsersInfoResponse usersSearchGet(String q, Integer count) throws ApiException {
        ApiResponse<UsersInfoResponse> localVarResp = usersSearchGetWithHttpInfo(q, count);
        return localVarResp.getData();
    }

    /**
     * Search for a user by name.
     * Search for a user by name.
     * @param q A query string. (required)
     * @param count Number of users to return. (optional)
     * @return ApiResponse&lt;UsersInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found users. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersInfoResponse> usersSearchGetWithHttpInfo(String q, Integer count) throws ApiException {
        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(q, count, null);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a user by name. (asynchronously)
     * Search for a user by name.
     * @param q A query string. (required)
     * @param count Number of users to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetAsync(String q, Integer count, final ApiCallback<UsersInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(q, count, _callback);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSelfFeedGet
     * @param count Count of media to return. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users feed entries. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call usersSelfFeedGetCall(Integer count, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/self/feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSelfFeedGetValidateBeforeCall(Integer count, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        return usersSelfFeedGetCall(count, minId, maxId, _callback);

    }

    /**
     * See the authenticated user&#39;s feed.
     * See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param count Count of media to return. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return MediaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users feed entries. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MediaListResponse usersSelfFeedGet(Integer count, String minId, String maxId) throws ApiException {
        ApiResponse<MediaListResponse> localVarResp = usersSelfFeedGetWithHttpInfo(count, minId, maxId);
        return localVarResp.getData();
    }

    /**
     * See the authenticated user&#39;s feed.
     * See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param count Count of media to return. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return ApiResponse&lt;MediaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users feed entries. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MediaListResponse> usersSelfFeedGetWithHttpInfo(Integer count, String minId, String maxId) throws ApiException {
        okhttp3.Call localVarCall = usersSelfFeedGetValidateBeforeCall(count, minId, maxId, null);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * See the authenticated user&#39;s feed. (asynchronously)
     * See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param count Count of media to return. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users feed entries. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call usersSelfFeedGetAsync(Integer count, String minId, String maxId, final ApiCallback<MediaListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSelfFeedGetValidateBeforeCall(count, minId, maxId, _callback);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSelfMediaLikedGet
     * @param count Count of media to return. (optional)
     * @param maxLikeId Return media liked before this id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSelfMediaLikedGetCall(Integer count, String maxLikeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/self/media/liked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxLikeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_like_id", maxLikeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSelfMediaLikedGetValidateBeforeCall(Integer count, String maxLikeId, final ApiCallback _callback) throws ApiException {
        return usersSelfMediaLikedGetCall(count, maxLikeId, _callback);

    }

    /**
     * See the list of media liked by the authenticated user.
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     * @param count Count of media to return. (optional)
     * @param maxLikeId Return media liked before this id. (optional)
     * @return MediaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public MediaListResponse usersSelfMediaLikedGet(Integer count, String maxLikeId) throws ApiException {
        ApiResponse<MediaListResponse> localVarResp = usersSelfMediaLikedGetWithHttpInfo(count, maxLikeId);
        return localVarResp.getData();
    }

    /**
     * See the list of media liked by the authenticated user.
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     * @param count Count of media to return. (optional)
     * @param maxLikeId Return media liked before this id. (optional)
     * @return ApiResponse&lt;MediaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaListResponse> usersSelfMediaLikedGetWithHttpInfo(Integer count, String maxLikeId) throws ApiException {
        okhttp3.Call localVarCall = usersSelfMediaLikedGetValidateBeforeCall(count, maxLikeId, null);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * See the list of media liked by the authenticated user. (asynchronously)
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     * @param count Count of media to return. (optional)
     * @param maxLikeId Return media liked before this id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSelfMediaLikedGetAsync(Integer count, String maxLikeId, final ApiCallback<MediaListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSelfMediaLikedGetValidateBeforeCall(count, maxLikeId, _callback);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdGet
     * @param userId The ID of a user to get information about, or **self** to retrieve information about authenticated user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User basic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found, user with such ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdGet(Async)");
        }

        return usersUserIdGetCall(userId, _callback);

    }

    /**
     * Get basic information about a user.
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get information about, or **self** to retrieve information about authenticated user. (required)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User basic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found, user with such ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse usersUserIdGet(String userId) throws ApiException {
        ApiResponse<UserResponse> localVarResp = usersUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get basic information about a user.
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get information about, or **self** to retrieve information about authenticated user. (required)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User basic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found, user with such ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> usersUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basic information about a user. (asynchronously)
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get information about, or **self** to retrieve information about authenticated user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User basic information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found, user with such ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetAsync(String userId, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdMediaRecentGet
     * @param userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. (required)
     * @param count Count of media to return. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdMediaRecentGetCall(String userId, Integer count, Long maxTimestamp, Long minTimestamp, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/media/recent"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_timestamp", maxTimestamp));
        }

        if (minTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_timestamp", minTimestamp));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdMediaRecentGetValidateBeforeCall(String userId, Integer count, Long maxTimestamp, Long minTimestamp, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdMediaRecentGet(Async)");
        }

        return usersUserIdMediaRecentGetCall(userId, count, maxTimestamp, minTimestamp, minId, maxId, _callback);

    }

    /**
     * Get the most recent media published by a user.
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. (required)
     * @param count Count of media to return. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return MediaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public MediaListResponse usersUserIdMediaRecentGet(String userId, Integer count, Long maxTimestamp, Long minTimestamp, String minId, String maxId) throws ApiException {
        ApiResponse<MediaListResponse> localVarResp = usersUserIdMediaRecentGetWithHttpInfo(userId, count, maxTimestamp, minTimestamp, minId, maxId);
        return localVarResp.getData();
    }

    /**
     * Get the most recent media published by a user.
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. (required)
     * @param count Count of media to return. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return ApiResponse&lt;MediaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaListResponse> usersUserIdMediaRecentGetWithHttpInfo(String userId, Integer count, Long maxTimestamp, Long minTimestamp, String minId, String maxId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdMediaRecentGetValidateBeforeCall(userId, count, maxTimestamp, minTimestamp, minId, maxId, null);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the most recent media published by a user. (asynchronously)
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     * @param userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. (required)
     * @param count Count of media to return. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users media entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdMediaRecentGetAsync(String userId, Integer count, Long maxTimestamp, Long minTimestamp, String minId, String maxId, final ApiCallback<MediaListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdMediaRecentGetValidateBeforeCall(userId, count, maxTimestamp, minTimestamp, minId, maxId, _callback);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
