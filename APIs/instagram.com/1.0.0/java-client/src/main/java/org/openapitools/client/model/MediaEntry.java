/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CaptionData;
import org.openapitools.client.model.CommentsCollection;
import org.openapitools.client.model.ImagesData;
import org.openapitools.client.model.LikesCollection;
import org.openapitools.client.model.LocationInfo;
import org.openapitools.client.model.UserInPhoto;
import org.openapitools.client.model.UserShortInfo;
import org.openapitools.client.model.VideosData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:38.005667-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaEntry {
  public static final String SERIALIZED_NAME_ATTRIBUTION = "attribution";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION)
  private String attribution;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private CaptionData caption;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private CommentsCollection comments;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private ImagesData images;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private LikesCollection likes;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationInfo location;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  /**
   * Type of this media entry
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMAGE("image"),
    
    VIDEO("video");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserShortInfo user;

  public static final String SERIALIZED_NAME_USER_HAS_LIKED = "user_has_liked";
  @SerializedName(SERIALIZED_NAME_USER_HAS_LIKED)
  private Boolean userHasLiked;

  public static final String SERIALIZED_NAME_USERS_IN_PHOTO = "users_in_photo";
  @SerializedName(SERIALIZED_NAME_USERS_IN_PHOTO)
  private List<UserInPhoto> usersInPhoto = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private VideosData videos;

  public MediaEntry() {
  }

  public MediaEntry attribution(String attribution) {
    this.attribution = attribution;
    return this;
  }

  /**
   * ??? Unknown ???
   * @return attribution
   */
  @javax.annotation.Nullable
  public String getAttribution() {
    return attribution;
  }

  public void setAttribution(String attribution) {
    this.attribution = attribution;
  }


  public MediaEntry caption(CaptionData caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public CaptionData getCaption() {
    return caption;
  }

  public void setCaption(CaptionData caption) {
    this.caption = caption;
  }


  public MediaEntry comments(CommentsCollection comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public CommentsCollection getComments() {
    return comments;
  }

  public void setComments(CommentsCollection comments) {
    this.comments = comments;
  }


  public MediaEntry createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Media creation UNIX timestamp
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public MediaEntry filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Filter of this media entry
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public MediaEntry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of a media entry
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MediaEntry images(ImagesData images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public ImagesData getImages() {
    return images;
  }

  public void setImages(ImagesData images) {
    this.images = images;
  }


  public MediaEntry likes(LikesCollection likes) {
    this.likes = likes;
    return this;
  }

  /**
   * Get likes
   * @return likes
   */
  @javax.annotation.Nullable
  public LikesCollection getLikes() {
    return likes;
  }

  public void setLikes(LikesCollection likes) {
    this.likes = likes;
  }


  public MediaEntry link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Fixed URL of this media entry
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public MediaEntry location(LocationInfo location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public LocationInfo getLocation() {
    return location;
  }

  public void setLocation(LocationInfo location) {
    this.location = location;
  }


  public MediaEntry tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public MediaEntry addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * List of tags assigned to this media
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public MediaEntry type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this media entry
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MediaEntry user(UserShortInfo user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserShortInfo getUser() {
    return user;
  }

  public void setUser(UserShortInfo user) {
    this.user = user;
  }


  public MediaEntry userHasLiked(Boolean userHasLiked) {
    this.userHasLiked = userHasLiked;
    return this;
  }

  /**
   * Indicates whether authenticated user has liked this media or not
   * @return userHasLiked
   */
  @javax.annotation.Nullable
  public Boolean getUserHasLiked() {
    return userHasLiked;
  }

  public void setUserHasLiked(Boolean userHasLiked) {
    this.userHasLiked = userHasLiked;
  }


  public MediaEntry usersInPhoto(List<UserInPhoto> usersInPhoto) {
    this.usersInPhoto = usersInPhoto;
    return this;
  }

  public MediaEntry addUsersInPhotoItem(UserInPhoto usersInPhotoItem) {
    if (this.usersInPhoto == null) {
      this.usersInPhoto = new ArrayList<>();
    }
    this.usersInPhoto.add(usersInPhotoItem);
    return this;
  }

  /**
   * Users located on this media entry
   * @return usersInPhoto
   */
  @javax.annotation.Nullable
  public List<UserInPhoto> getUsersInPhoto() {
    return usersInPhoto;
  }

  public void setUsersInPhoto(List<UserInPhoto> usersInPhoto) {
    this.usersInPhoto = usersInPhoto;
  }


  public MediaEntry videos(VideosData videos) {
    this.videos = videos;
    return this;
  }

  /**
   * Get videos
   * @return videos
   */
  @javax.annotation.Nullable
  public VideosData getVideos() {
    return videos;
  }

  public void setVideos(VideosData videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaEntry mediaEntry = (MediaEntry) o;
    return Objects.equals(this.attribution, mediaEntry.attribution) &&
        Objects.equals(this.caption, mediaEntry.caption) &&
        Objects.equals(this.comments, mediaEntry.comments) &&
        Objects.equals(this.createdTime, mediaEntry.createdTime) &&
        Objects.equals(this.filter, mediaEntry.filter) &&
        Objects.equals(this.id, mediaEntry.id) &&
        Objects.equals(this.images, mediaEntry.images) &&
        Objects.equals(this.likes, mediaEntry.likes) &&
        Objects.equals(this.link, mediaEntry.link) &&
        Objects.equals(this.location, mediaEntry.location) &&
        Objects.equals(this.tags, mediaEntry.tags) &&
        Objects.equals(this.type, mediaEntry.type) &&
        Objects.equals(this.user, mediaEntry.user) &&
        Objects.equals(this.userHasLiked, mediaEntry.userHasLiked) &&
        Objects.equals(this.usersInPhoto, mediaEntry.usersInPhoto) &&
        Objects.equals(this.videos, mediaEntry.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribution, caption, comments, createdTime, filter, id, images, likes, link, location, tags, type, user, userHasLiked, usersInPhoto, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaEntry {\n");
    sb.append("    attribution: ").append(toIndentedString(attribution)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userHasLiked: ").append(toIndentedString(userHasLiked)).append("\n");
    sb.append("    usersInPhoto: ").append(toIndentedString(usersInPhoto)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribution");
    openapiFields.add("caption");
    openapiFields.add("comments");
    openapiFields.add("created_time");
    openapiFields.add("filter");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("likes");
    openapiFields.add("link");
    openapiFields.add("location");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("user");
    openapiFields.add("user_has_liked");
    openapiFields.add("users_in_photo");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaEntry is not found in the empty JSON string", MediaEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attribution") != null && !jsonObj.get("attribution").isJsonNull()) && !jsonObj.get("attribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribution").toString()));
      }
      // validate the optional field `caption`
      if (jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) {
        CaptionData.validateJsonElement(jsonObj.get("caption"));
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        CommentsCollection.validateJsonElement(jsonObj.get("comments"));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        ImagesData.validateJsonElement(jsonObj.get("images"));
      }
      // validate the optional field `likes`
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        LikesCollection.validateJsonElement(jsonObj.get("likes"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationInfo.validateJsonElement(jsonObj.get("location"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserShortInfo.validateJsonElement(jsonObj.get("user"));
      }
      if (jsonObj.get("users_in_photo") != null && !jsonObj.get("users_in_photo").isJsonNull()) {
        JsonArray jsonArrayusersInPhoto = jsonObj.getAsJsonArray("users_in_photo");
        if (jsonArrayusersInPhoto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users_in_photo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users_in_photo` to be an array in the JSON string but got `%s`", jsonObj.get("users_in_photo").toString()));
          }

          // validate the optional field `users_in_photo` (array)
          for (int i = 0; i < jsonArrayusersInPhoto.size(); i++) {
            UserInPhoto.validateJsonElement(jsonArrayusersInPhoto.get(i));
          };
        }
      }
      // validate the optional field `videos`
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        VideosData.validateJsonElement(jsonObj.get("videos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaEntry>() {
           @Override
           public void write(JsonWriter out, MediaEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaEntry
   * @throws IOException if the JSON string is invalid with respect to MediaEntry
   */
  public static MediaEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaEntry.class);
  }

  /**
   * Convert an instance of MediaEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

