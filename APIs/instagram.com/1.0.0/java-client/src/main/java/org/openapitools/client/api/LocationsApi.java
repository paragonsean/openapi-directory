/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LocationInfoResponse;
import org.openapitools.client.model.LocationSearchResponse;
import org.openapitools.client.model.MediaListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for locationsLocationIdGet
     * @param locationId The location ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Location information response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsLocationIdGetCall(String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations/{location-id}"
            .replace("{" + "location-id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsLocationIdGetValidateBeforeCall(String locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling locationsLocationIdGet(Async)");
        }

        return locationsLocationIdGetCall(locationId, _callback);

    }

    /**
     * Get information about a location.
     * Get information about a location.
     * @param locationId The location ID. (required)
     * @return LocationInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Location information response. </td><td>  -  </td></tr>
     </table>
     */
    public LocationInfoResponse locationsLocationIdGet(String locationId) throws ApiException {
        ApiResponse<LocationInfoResponse> localVarResp = locationsLocationIdGetWithHttpInfo(locationId);
        return localVarResp.getData();
    }

    /**
     * Get information about a location.
     * Get information about a location.
     * @param locationId The location ID. (required)
     * @return ApiResponse&lt;LocationInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Location information response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationInfoResponse> locationsLocationIdGetWithHttpInfo(String locationId) throws ApiException {
        okhttp3.Call localVarCall = locationsLocationIdGetValidateBeforeCall(locationId, null);
        Type localVarReturnType = new TypeToken<LocationInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a location. (asynchronously)
     * Get information about a location.
     * @param locationId The location ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Location information response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsLocationIdGetAsync(String locationId, final ApiCallback<LocationInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsLocationIdGetValidateBeforeCall(locationId, _callback);
        Type localVarReturnType = new TypeToken<LocationInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsLocationIdMediaRecentGet
     * @param locationId The location ID. (required)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minId Return media before this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media after this &#x60;max_id&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries from this location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsLocationIdMediaRecentGetCall(String locationId, Long minTimestamp, Long maxTimestamp, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations/{location-id}/media/recent"
            .replace("{" + "location-id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_timestamp", minTimestamp));
        }

        if (maxTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_timestamp", maxTimestamp));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsLocationIdMediaRecentGetValidateBeforeCall(String locationId, Long minTimestamp, Long maxTimestamp, String minId, String maxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling locationsLocationIdMediaRecentGet(Async)");
        }

        return locationsLocationIdMediaRecentGetCall(locationId, minTimestamp, maxTimestamp, minId, maxId, _callback);

    }

    /**
     * Get a list of recent media objects from a given location.
     * Get a list of recent media objects from a given location.
     * @param locationId The location ID. (required)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minId Return media before this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media after this &#x60;max_id&#x60;. (optional)
     * @return MediaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries from this location. </td><td>  -  </td></tr>
     </table>
     */
    public MediaListResponse locationsLocationIdMediaRecentGet(String locationId, Long minTimestamp, Long maxTimestamp, String minId, String maxId) throws ApiException {
        ApiResponse<MediaListResponse> localVarResp = locationsLocationIdMediaRecentGetWithHttpInfo(locationId, minTimestamp, maxTimestamp, minId, maxId);
        return localVarResp.getData();
    }

    /**
     * Get a list of recent media objects from a given location.
     * Get a list of recent media objects from a given location.
     * @param locationId The location ID. (required)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minId Return media before this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media after this &#x60;max_id&#x60;. (optional)
     * @return ApiResponse&lt;MediaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries from this location. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaListResponse> locationsLocationIdMediaRecentGetWithHttpInfo(String locationId, Long minTimestamp, Long maxTimestamp, String minId, String maxId) throws ApiException {
        okhttp3.Call localVarCall = locationsLocationIdMediaRecentGetValidateBeforeCall(locationId, minTimestamp, maxTimestamp, minId, maxId, null);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of recent media objects from a given location. (asynchronously)
     * Get a list of recent media objects from a given location.
     * @param locationId The location ID. (required)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minId Return media before this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media after this &#x60;max_id&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of media entries from this location. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsLocationIdMediaRecentGetAsync(String locationId, Long minTimestamp, Long maxTimestamp, String minId, String maxId, final ApiCallback<MediaListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsLocationIdMediaRecentGetValidateBeforeCall(locationId, minTimestamp, maxTimestamp, minId, maxId, _callback);
        Type localVarReturnType = new TypeToken<MediaListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsSearchGet
     * @param distance Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     * @param facebookPlacesId Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     * @param foursquareId Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     * @param foursquareV2Id Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found locations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsSearchGetCall(Integer distance, String facebookPlacesId, String foursquareId, Double lat, Double lng, String foursquareV2Id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        if (facebookPlacesId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facebook_places_id", facebookPlacesId));
        }

        if (foursquareId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foursquare_id", foursquareId));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (foursquareV2Id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foursquare_v2_id", foursquareV2Id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsSearchGetValidateBeforeCall(Integer distance, String facebookPlacesId, String foursquareId, Double lat, Double lng, String foursquareV2Id, final ApiCallback _callback) throws ApiException {
        return locationsSearchGetCall(distance, facebookPlacesId, foursquareId, lat, lng, foursquareV2Id, _callback);

    }

    /**
     * Search for a location by geographic coordinate.
     * Search for a location by geographic coordinate.
     * @param distance Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     * @param facebookPlacesId Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     * @param foursquareId Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     * @param foursquareV2Id Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     * @return LocationSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found locations. </td><td>  -  </td></tr>
     </table>
     */
    public LocationSearchResponse locationsSearchGet(Integer distance, String facebookPlacesId, String foursquareId, Double lat, Double lng, String foursquareV2Id) throws ApiException {
        ApiResponse<LocationSearchResponse> localVarResp = locationsSearchGetWithHttpInfo(distance, facebookPlacesId, foursquareId, lat, lng, foursquareV2Id);
        return localVarResp.getData();
    }

    /**
     * Search for a location by geographic coordinate.
     * Search for a location by geographic coordinate.
     * @param distance Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     * @param facebookPlacesId Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     * @param foursquareId Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     * @param foursquareV2Id Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     * @return ApiResponse&lt;LocationSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found locations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationSearchResponse> locationsSearchGetWithHttpInfo(Integer distance, String facebookPlacesId, String foursquareId, Double lat, Double lng, String foursquareV2Id) throws ApiException {
        okhttp3.Call localVarCall = locationsSearchGetValidateBeforeCall(distance, facebookPlacesId, foursquareId, lat, lng, foursquareV2Id, null);
        Type localVarReturnType = new TypeToken<LocationSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a location by geographic coordinate. (asynchronously)
     * Search for a location by geographic coordinate.
     * @param distance Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     * @param facebookPlacesId Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     * @param foursquareId Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     * @param foursquareV2Id Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of found locations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsSearchGetAsync(Integer distance, String facebookPlacesId, String foursquareId, Double lat, Double lng, String foursquareV2Id, final ApiCallback<LocationSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsSearchGetValidateBeforeCall(distance, facebookPlacesId, foursquareId, lat, lng, foursquareV2Id, _callback);
        Type localVarReturnType = new TypeToken<LocationSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
