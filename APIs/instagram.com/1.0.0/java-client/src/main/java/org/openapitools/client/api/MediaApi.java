/*
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MediaEntryResponse;
import org.openapitools.client.model.MediaSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mediaMediaIdGet
     * @param mediaId The ID of the media resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaMediaIdGetCall(String mediaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/{media-id}"
            .replace("{" + "media-id" + "}", localVarApiClient.escapeString(mediaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaMediaIdGetValidateBeforeCall(String mediaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaId' is set
        if (mediaId == null) {
            throw new ApiException("Missing the required parameter 'mediaId' when calling mediaMediaIdGet(Async)");
        }

        return mediaMediaIdGetCall(mediaId, _callback);

    }

    /**
     * Get information about a media object.
     * Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     * @param mediaId The ID of the media resource. (required)
     * @return MediaEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaEntryResponse mediaMediaIdGet(String mediaId) throws ApiException {
        ApiResponse<MediaEntryResponse> localVarResp = mediaMediaIdGetWithHttpInfo(mediaId);
        return localVarResp.getData();
    }

    /**
     * Get information about a media object.
     * Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     * @param mediaId The ID of the media resource. (required)
     * @return ApiResponse&lt;MediaEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaEntryResponse> mediaMediaIdGetWithHttpInfo(String mediaId) throws ApiException {
        okhttp3.Call localVarCall = mediaMediaIdGetValidateBeforeCall(mediaId, null);
        Type localVarReturnType = new TypeToken<MediaEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a media object. (asynchronously)
     * Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     * @param mediaId The ID of the media resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaMediaIdGetAsync(String mediaId, final ApiCallback<MediaEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaMediaIdGetValidateBeforeCall(mediaId, _callback);
        Type localVarReturnType = new TypeToken<MediaEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaPopularGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call mediaPopularGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/popular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaPopularGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mediaPopularGetCall(_callback);

    }

    /**
     * Get a list of currently popular media.
     * Get a list of what media is most popular at the moment. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @return MediaSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MediaSearchResponse mediaPopularGet() throws ApiException {
        ApiResponse<MediaSearchResponse> localVarResp = mediaPopularGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of currently popular media.
     * Get a list of what media is most popular at the moment. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @return ApiResponse&lt;MediaSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MediaSearchResponse> mediaPopularGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mediaPopularGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MediaSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of currently popular media. (asynchronously)
     * Get a list of what media is most popular at the moment. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call mediaPopularGetAsync(final ApiCallback<MediaSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaPopularGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MediaSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaSearchGet
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (required)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (required)
     * @param minTimestamp A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     * @param maxTimestamp A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     * @param distance Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information) in a given area. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaSearchGetCall(Double lat, Double lng, Long minTimestamp, Long maxTimestamp, Integer distance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (minTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_timestamp", minTimestamp));
        }

        if (maxTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_timestamp", maxTimestamp));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaSearchGetValidateBeforeCall(Double lat, Double lng, Long minTimestamp, Long maxTimestamp, Integer distance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling mediaSearchGet(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling mediaSearchGet(Async)");
        }

        return mediaSearchGetCall(lat, lng, minTimestamp, maxTimestamp, distance, _callback);

    }

    /**
     * Search for media in a given area.
     * Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types. 
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (required)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (required)
     * @param minTimestamp A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     * @param maxTimestamp A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     * @param distance Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     * @return MediaSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information) in a given area. </td><td>  -  </td></tr>
     </table>
     */
    public MediaSearchResponse mediaSearchGet(Double lat, Double lng, Long minTimestamp, Long maxTimestamp, Integer distance) throws ApiException {
        ApiResponse<MediaSearchResponse> localVarResp = mediaSearchGetWithHttpInfo(lat, lng, minTimestamp, maxTimestamp, distance);
        return localVarResp.getData();
    }

    /**
     * Search for media in a given area.
     * Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types. 
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (required)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (required)
     * @param minTimestamp A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     * @param maxTimestamp A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     * @param distance Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     * @return ApiResponse&lt;MediaSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information) in a given area. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaSearchResponse> mediaSearchGetWithHttpInfo(Double lat, Double lng, Long minTimestamp, Long maxTimestamp, Integer distance) throws ApiException {
        okhttp3.Call localVarCall = mediaSearchGetValidateBeforeCall(lat, lng, minTimestamp, maxTimestamp, distance, null);
        Type localVarReturnType = new TypeToken<MediaSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for media in a given area. (asynchronously)
     * Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types. 
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (required)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (required)
     * @param minTimestamp A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     * @param maxTimestamp A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     * @param distance Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found media resources (without likes information) in a given area. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaSearchGetAsync(Double lat, Double lng, Long minTimestamp, Long maxTimestamp, Integer distance, final ApiCallback<MediaSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaSearchGetValidateBeforeCall(lat, lng, minTimestamp, maxTimestamp, distance, _callback);
        Type localVarReturnType = new TypeToken<MediaSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaShortcodeShortcodeGet
     * @param shortcode The short code of the media resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaShortcodeShortcodeGetCall(String shortcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media/shortcode/{shortcode}"
            .replace("{" + "shortcode" + "}", localVarApiClient.escapeString(shortcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "instagram_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaShortcodeShortcodeGetValidateBeforeCall(String shortcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortcode' is set
        if (shortcode == null) {
            throw new ApiException("Missing the required parameter 'shortcode' when calling mediaShortcodeShortcodeGet(Async)");
        }

        return mediaShortcodeShortcodeGetCall(shortcode, _callback);

    }

    /**
     * Get information about a media object.
     * This endpoint returns the same response as &#x60;GET /media/{media-id}&#x60;.  A media object&#39;s shortcode can be found in its shortlink URL. An example shortlink is &#x60;http://instagram.com/p/D/&#x60;, its corresponding shortcode is &#x60;D&#x60;. 
     * @param shortcode The short code of the media resource. (required)
     * @return MediaEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaEntryResponse mediaShortcodeShortcodeGet(String shortcode) throws ApiException {
        ApiResponse<MediaEntryResponse> localVarResp = mediaShortcodeShortcodeGetWithHttpInfo(shortcode);
        return localVarResp.getData();
    }

    /**
     * Get information about a media object.
     * This endpoint returns the same response as &#x60;GET /media/{media-id}&#x60;.  A media object&#39;s shortcode can be found in its shortlink URL. An example shortlink is &#x60;http://instagram.com/p/D/&#x60;, its corresponding shortcode is &#x60;D&#x60;. 
     * @param shortcode The short code of the media resource. (required)
     * @return ApiResponse&lt;MediaEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaEntryResponse> mediaShortcodeShortcodeGetWithHttpInfo(String shortcode) throws ApiException {
        okhttp3.Call localVarCall = mediaShortcodeShortcodeGetValidateBeforeCall(shortcode, null);
        Type localVarReturnType = new TypeToken<MediaEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a media object. (asynchronously)
     * This endpoint returns the same response as &#x60;GET /media/{media-id}&#x60;.  A media object&#39;s shortcode can be found in its shortlink URL. An example shortlink is &#x60;http://instagram.com/p/D/&#x60;, its corresponding shortcode is &#x60;D&#x60;. 
     * @param shortcode The short code of the media resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Media resource information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaShortcodeShortcodeGetAsync(String shortcode, final ApiCallback<MediaEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaShortcodeShortcodeGetValidateBeforeCall(shortcode, _callback);
        Type localVarReturnType = new TypeToken<MediaEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
