/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentsResponse from '../model/CommentsResponse';
import StatusResponse from '../model/StatusResponse';

/**
* Comments service.
* @module api/CommentsApi
* @version 1.0.0
*/
export default class CommentsApi {

    /**
    * Constructs a new CommentsApi. 
    * @alias module:api/CommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaMediaIdCommentsCommentIdDelete operation.
     * @callback module:api/CommentsApi~mediaMediaIdCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a comment.
     * Remove a comment either on the authenticated user's media object or authored by the authenticated user. 
     * @param {String} mediaId The ID of the media resource.
     * @param {String} commentId The ID of the comment entry.
     * @param {module:api/CommentsApi~mediaMediaIdCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusResponse}
     */
    mediaMediaIdCommentsCommentIdDelete(mediaId, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdCommentsCommentIdDelete");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling mediaMediaIdCommentsCommentIdDelete");
      }

      let pathParams = {
        'media-id': mediaId,
        'comment-id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/comments/{comment-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdCommentsGet operation.
     * @callback module:api/CommentsApi~mediaMediaIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recent comments on a media object.
     * Get a list of recent comments on a media object.
     * @param {String} mediaId The ID of the media resource.
     * @param {module:api/CommentsApi~mediaMediaIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentsResponse}
     */
    mediaMediaIdCommentsGet(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdCommentsGet");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentsResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdCommentsPost operation.
     * @callback module:api/CommentsApi~mediaMediaIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a comment on a media object.
     * Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. 
     * @param {String} mediaId The ID of the media resource.
     * @param {String} text Text to post as a comment on the media object as specified in `media-id`.
     * @param {module:api/CommentsApi~mediaMediaIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusResponse}
     */
    mediaMediaIdCommentsPost(mediaId, text, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdCommentsPost");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling mediaMediaIdCommentsPost");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
