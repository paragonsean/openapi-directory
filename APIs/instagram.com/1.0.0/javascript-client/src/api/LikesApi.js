/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StatusResponse from '../model/StatusResponse';
import UsersInfoResponse from '../model/UsersInfoResponse';

/**
* Likes service.
* @module api/LikesApi
* @version 1.0.0
*/
export default class LikesApi {

    /**
    * Constructs a new LikesApi. 
    * @alias module:api/LikesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaMediaIdLikesDelete operation.
     * @callback module:api/LikesApi~mediaMediaIdLikesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a like on this media by the current user.
     * Remove a like on this media by the currently authenticated user.
     * @param {String} mediaId The ID of the media resource.
     * @param {module:api/LikesApi~mediaMediaIdLikesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusResponse}
     */
    mediaMediaIdLikesDelete(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdLikesDelete");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/likes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdLikesGet operation.
     * @callback module:api/LikesApi~mediaMediaIdLikesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of users who have liked this media.
     * Get a list of users who have liked this media.
     * @param {String} mediaId The ID of the media resource.
     * @param {module:api/LikesApi~mediaMediaIdLikesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersInfoResponse}
     */
    mediaMediaIdLikesGet(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdLikesGet");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersInfoResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/likes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaIdLikesPost operation.
     * @callback module:api/LikesApi~mediaMediaIdLikesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a like on this media by the current user.
     * Set a like on this media by the currently authenticated user.
     * @param {String} mediaId The ID of the media resource.
     * @param {module:api/LikesApi~mediaMediaIdLikesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusResponse}
     */
    mediaMediaIdLikesPost(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdLikesPost");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;
      return this.apiClient.callApi(
        '/media/{media-id}/likes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
