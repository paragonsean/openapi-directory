/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RelationshipPostResponse from '../model/RelationshipPostResponse';
import RelationshipResponse from '../model/RelationshipResponse';
import UsersInfoResponse from '../model/UsersInfoResponse';
import UsersPagingResponse from '../model/UsersPagingResponse';

/**
* Relationships service.
* @module api/RelationshipsApi
* @version 1.0.0
*/
export default class RelationshipsApi {

    /**
    * Constructs a new RelationshipsApi. 
    * @alias module:api/RelationshipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersSelfRequestedByGet operation.
     * @callback module:api/RelationshipsApi~usersSelfRequestedByGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users who have requested this user's permission to follow.
     * List the users who have requested this user's permission to follow.
     * @param {module:api/RelationshipsApi~usersSelfRequestedByGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersInfoResponse}
     */
    usersSelfRequestedByGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersInfoResponse;
      return this.apiClient.callApi(
        '/users/self/requested-by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdFollowedByGet operation.
     * @callback module:api/RelationshipsApi~usersUserIdFollowedByGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of users this user is followed by.
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the `user-id`. 
     * @param {String} userId The ID of a user, or **self** to retrieve information about authenticated user.
     * @param {module:api/RelationshipsApi~usersUserIdFollowedByGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPagingResponse}
     */
    usersUserIdFollowedByGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdFollowedByGet");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPagingResponse;
      return this.apiClient.callApi(
        '/users/{user-id}/followed-by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdFollowsGet operation.
     * @callback module:api/RelationshipsApi~usersUserIdFollowsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of users this user follows.
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the `user-id`. 
     * @param {String} userId The ID of a user, or **self** to retrieve information about authenticated user.
     * @param {module:api/RelationshipsApi~usersUserIdFollowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPagingResponse}
     */
    usersUserIdFollowsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdFollowsGet");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPagingResponse;
      return this.apiClient.callApi(
        '/users/{user-id}/follows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdRelationshipGet operation.
     * @callback module:api/RelationshipsApi~usersUserIdRelationshipGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a relationship to another user.
     * Get information about a relationship to another user.
     * @param {String} userId The ID of a user to get information about.
     * @param {module:api/RelationshipsApi~usersUserIdRelationshipGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipResponse}
     */
    usersUserIdRelationshipGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdRelationshipGet");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipResponse;
      return this.apiClient.callApi(
        '/users/{user-id}/relationship', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdRelationshipPost operation.
     * @callback module:api/RelationshipsApi~usersUserIdRelationshipPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the relationship between the current user and the target user.
     * Modify the relationship between the current user and the target user.
     * @param {String} userId The ID of the target user.
     * @param {module:model/String} action Type of action to apply for relationship with the user.
     * @param {module:api/RelationshipsApi~usersUserIdRelationshipPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipPostResponse}
     */
    usersUserIdRelationshipPost(userId, action, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdRelationshipPost");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling usersUserIdRelationshipPost");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
        'action': action
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipPostResponse;
      return this.apiClient.callApi(
        '/users/{user-id}/relationship', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
