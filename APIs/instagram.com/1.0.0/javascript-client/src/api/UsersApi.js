/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaListResponse from '../model/MediaListResponse';
import UserResponse from '../model/UserResponse';
import UsersInfoResponse from '../model/UsersInfoResponse';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersSearchGet operation.
     * @callback module:api/UsersApi~usersSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a user by name.
     * Search for a user by name.
     * @param {String} q A query string.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Number of users to return.
     * @param {module:api/UsersApi~usersSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersInfoResponse}
     */
    usersSearchGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling usersSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersInfoResponse;
      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSelfFeedGet operation.
     * @callback module:api/UsersApi~usersSelfFeedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See the authenticated user's feed.
     * See the authenticated user's feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Count of media to return.
     * @param {String} [minId] Return media later than this `min_id`.
     * @param {String} [maxId] Return media earlier than this `max_id`.
     * @param {module:api/UsersApi~usersSelfFeedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaListResponse}
     */
    usersSelfFeedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'min_id': opts['minId'],
        'max_id': opts['maxId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaListResponse;
      return this.apiClient.callApi(
        '/users/self/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSelfMediaLikedGet operation.
     * @callback module:api/UsersApi~usersSelfMediaLikedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See the list of media liked by the authenticated user.
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Count of media to return.
     * @param {String} [maxLikeId] Return media liked before this id.
     * @param {module:api/UsersApi~usersSelfMediaLikedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaListResponse}
     */
    usersSelfMediaLikedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'max_like_id': opts['maxLikeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaListResponse;
      return this.apiClient.callApi(
        '/users/self/media/liked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/UsersApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basic information about a user.
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. 
     * @param {String} userId The ID of a user to get information about, or **self** to retrieve information about authenticated user.
     * @param {module:api/UsersApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdMediaRecentGet operation.
     * @callback module:api/UsersApi~usersUserIdMediaRecentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the most recent media published by a user.
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. 
     * @param {String} userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Count of media to return.
     * @param {Number} [maxTimestamp] Return media before this UNIX timestamp.
     * @param {Number} [minTimestamp] Return media after this UNIX timestamp.
     * @param {String} [minId] Return media later than this `min_id`.
     * @param {String} [maxId] Return media earlier than this `max_id`.
     * @param {module:api/UsersApi~usersUserIdMediaRecentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaListResponse}
     */
    usersUserIdMediaRecentGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdMediaRecentGet");
      }

      let pathParams = {
        'user-id': userId
      };
      let queryParams = {
        'count': opts['count'],
        'max_timestamp': opts['maxTimestamp'],
        'min_timestamp': opts['minTimestamp'],
        'min_id': opts['minId'],
        'max_id': opts['maxId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaListResponse;
      return this.apiClient.callApi(
        '/users/{user-id}/media/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
