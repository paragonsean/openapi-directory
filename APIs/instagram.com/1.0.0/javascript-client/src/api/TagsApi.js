/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TagInfoResponse from '../model/TagInfoResponse';
import TagMediaListResponse from '../model/TagMediaListResponse';
import TagSearchResponse from '../model/TagSearchResponse';

/**
* Tags service.
* @module api/TagsApi
* @version 1.0.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsSearchGet operation.
     * @callback module:api/TagsApi~tagsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tags by name.
     * Search for tags by name.
     * @param {String} q A valid tag name without a leading \\#. (eg. snowy, nofilter)
     * @param {module:api/TagsApi~tagsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagSearchResponse}
     */
    tagsSearchGet(q, callback) {
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling tagsSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagSearchResponse;
      return this.apiClient.callApi(
        '/tags/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagNameGet operation.
     * @callback module:api/TagsApi~tagsTagNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a tag object.
     * Get information about a tag object.
     * @param {String} tagName The tag name.
     * @param {module:api/TagsApi~tagsTagNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagInfoResponse}
     */
    tagsTagNameGet(tagName, callback) {
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsTagNameGet");
      }

      let pathParams = {
        'tag-name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagInfoResponse;
      return this.apiClient.callApi(
        '/tags/{tag-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagNameMediaRecentGet operation.
     * @callback module:api/TagsApi~tagsTagNameMediaRecentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagMediaListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently tagged media.
     * Get a list of recently tagged media. Use the `max_tag_id` and `min_tag_id` parameters in the pagination response to paginate through these objects. 
     * @param {String} tagName The tag name.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Count of tagged media to return.
     * @param {String} [minTagId] Return media before this `min_tag_id`.
     * @param {String} [maxTagId] Return media after this `max_tag_id`.
     * @param {module:api/TagsApi~tagsTagNameMediaRecentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagMediaListResponse}
     */
    tagsTagNameMediaRecentGet(tagName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagsTagNameMediaRecentGet");
      }

      let pathParams = {
        'tag-name': tagName
      };
      let queryParams = {
        'count': opts['count'],
        'min_tag_id': opts['minTagId'],
        'max_tag_id': opts['maxTagId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagMediaListResponse;
      return this.apiClient.callApi(
        '/tags/{tag-name}/media/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
