/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaEntryResponse from '../model/MediaEntryResponse';
import MediaSearchResponse from '../model/MediaSearchResponse';

/**
* Media service.
* @module api/MediaApi
* @version 1.0.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaMediaIdGet operation.
     * @callback module:api/MediaApi~mediaMediaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a media object.
     * Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     * @param {String} mediaId The ID of the media resource.
     * @param {module:api/MediaApi~mediaMediaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaEntryResponse}
     */
    mediaMediaIdGet(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaMediaIdGet");
      }

      let pathParams = {
        'media-id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaEntryResponse;
      return this.apiClient.callApi(
        '/media/{media-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaPopularGet operation.
     * @callback module:api/MediaApi~mediaPopularGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of currently popular media.
     * Get a list of what media is most popular at the moment. Can return mix of `image` and `video` types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     * @param {module:api/MediaApi~mediaPopularGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaSearchResponse}
     */
    mediaPopularGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaSearchResponse;
      return this.apiClient.callApi(
        '/media/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaSearchGet operation.
     * @callback module:api/MediaApi~mediaSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for media in a given area.
     * Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of `image` and `video` types. 
     * @param {Number} lat Latitude of the center search coordinate. If used, `lng` is required.
     * @param {Number} lng Longitude of the center search coordinate. If used, `lat` is required.
     * @param {Object} opts Optional parameters
     * @param {Number} [minTimestamp] A unix timestamp. All media returned will be taken later than this timestamp.
     * @param {Number} [maxTimestamp] A unix timestamp. All media returned will be taken earlier than this timestamp.
     * @param {Number} [distance] Default is 1km (distance=1000), max distance is 5km.
     * @param {module:api/MediaApi~mediaSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaSearchResponse}
     */
    mediaSearchGet(lat, lng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling mediaSearchGet");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling mediaSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'min_timestamp': opts['minTimestamp'],
        'max_timestamp': opts['maxTimestamp'],
        'distance': opts['distance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaSearchResponse;
      return this.apiClient.callApi(
        '/media/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaShortcodeShortcodeGet operation.
     * @callback module:api/MediaApi~mediaShortcodeShortcodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a media object.
     * This endpoint returns the same response as `GET /media/{media-id}`.  A media object's shortcode can be found in its shortlink URL. An example shortlink is `http://instagram.com/p/D/`, its corresponding shortcode is `D`. 
     * @param {String} shortcode The short code of the media resource.
     * @param {module:api/MediaApi~mediaShortcodeShortcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaEntryResponse}
     */
    mediaShortcodeShortcodeGet(shortcode, callback) {
      let postBody = null;
      // verify the required parameter 'shortcode' is set
      if (shortcode === undefined || shortcode === null) {
        throw new Error("Missing the required parameter 'shortcode' when calling mediaShortcodeShortcodeGet");
      }

      let pathParams = {
        'shortcode': shortcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaEntryResponse;
      return this.apiClient.callApi(
        '/media/shortcode/{shortcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
