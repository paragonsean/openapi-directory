/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LocationInfoResponse from '../model/LocationInfoResponse';
import LocationSearchResponse from '../model/LocationSearchResponse';
import MediaListResponse from '../model/MediaListResponse';

/**
* Locations service.
* @module api/LocationsApi
* @version 1.0.0
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the locationsLocationIdGet operation.
     * @callback module:api/LocationsApi~locationsLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a location.
     * Get information about a location.
     * @param {String} locationId The location ID.
     * @param {module:api/LocationsApi~locationsLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationInfoResponse}
     */
    locationsLocationIdGet(locationId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling locationsLocationIdGet");
      }

      let pathParams = {
        'location-id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationInfoResponse;
      return this.apiClient.callApi(
        '/locations/{location-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsLocationIdMediaRecentGet operation.
     * @callback module:api/LocationsApi~locationsLocationIdMediaRecentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recent media objects from a given location.
     * Get a list of recent media objects from a given location.
     * @param {String} locationId The location ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [minTimestamp] Return media after this UNIX timestamp.
     * @param {Number} [maxTimestamp] Return media before this UNIX timestamp.
     * @param {String} [minId] Return media before this `min_id`.
     * @param {String} [maxId] Return media after this `max_id`.
     * @param {module:api/LocationsApi~locationsLocationIdMediaRecentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaListResponse}
     */
    locationsLocationIdMediaRecentGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling locationsLocationIdMediaRecentGet");
      }

      let pathParams = {
        'location-id': locationId
      };
      let queryParams = {
        'min_timestamp': opts['minTimestamp'],
        'max_timestamp': opts['maxTimestamp'],
        'min_id': opts['minId'],
        'max_id': opts['maxId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaListResponse;
      return this.apiClient.callApi(
        '/locations/{location-id}/media/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsSearchGet operation.
     * @callback module:api/LocationsApi~locationsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a location by geographic coordinate.
     * Search for a location by geographic coordinate.
     * @param {Object} opts Optional parameters
     * @param {Number} [distance] Default is 1000m (distance=1000), max distance is 5000.
     * @param {String} [facebookPlacesId] Returns a location mapped off of a Facebook places id. If used, a Foursquare id and `lat`, `lng` are not required.
     * @param {String} [foursquareId] Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use `lat` and `lng`. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API. 
     * @param {Number} [lat] Latitude of the center search coordinate. If used, `lng` is required.
     * @param {Number} [lng] Longitude of the center search coordinate. If used, `lat` is required.
     * @param {String} [foursquareV2Id] Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use `lat` and `lng`. 
     * @param {module:api/LocationsApi~locationsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationSearchResponse}
     */
    locationsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'distance': opts['distance'],
        'facebook_places_id': opts['facebookPlacesId'],
        'foursquare_id': opts['foursquareId'],
        'lat': opts['lat'],
        'lng': opts['lng'],
        'foursquare_v2_id': opts['foursquareV2Id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'instagram_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationSearchResponse;
      return this.apiClient.callApi(
        '/locations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
