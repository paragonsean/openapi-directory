/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RelationshipInfo model module.
 * @module model/RelationshipInfo
 * @version 1.0.0
 */
class RelationshipInfo {
    /**
     * Constructs a new <code>RelationshipInfo</code>.
     * @alias module:model/RelationshipInfo
     */
    constructor() { 
        
        RelationshipInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelationshipInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipInfo} obj Optional instance to populate.
     * @return {module:model/RelationshipInfo} The populated <code>RelationshipInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipInfo();

            if (data.hasOwnProperty('incoming_status')) {
                obj['incoming_status'] = ApiClient.convertToType(data['incoming_status'], 'String');
            }
            if (data.hasOwnProperty('outgoing_status')) {
                obj['outgoing_status'] = ApiClient.convertToType(data['outgoing_status'], 'String');
            }
            if (data.hasOwnProperty('target_user_is_private')) {
                obj['target_user_is_private'] = ApiClient.convertToType(data['target_user_is_private'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['incoming_status'] && !(typeof data['incoming_status'] === 'string' || data['incoming_status'] instanceof String)) {
            throw new Error("Expected the field `incoming_status` to be a primitive type in the JSON string but got " + data['incoming_status']);
        }
        // ensure the json data is a string
        if (data['outgoing_status'] && !(typeof data['outgoing_status'] === 'string' || data['outgoing_status'] instanceof String)) {
            throw new Error("Expected the field `outgoing_status` to be a primitive type in the JSON string but got " + data['outgoing_status']);
        }

        return true;
    }


}



/**
 * Status of incoming relationship
 * @member {module:model/RelationshipInfo.IncomingStatusEnum} incoming_status
 */
RelationshipInfo.prototype['incoming_status'] = undefined;

/**
 * Status of outgoing relationship
 * @member {module:model/RelationshipInfo.OutgoingStatusEnum} outgoing_status
 */
RelationshipInfo.prototype['outgoing_status'] = undefined;

/**
 * Indicates whether target user is private or not
 * @member {Boolean} target_user_is_private
 */
RelationshipInfo.prototype['target_user_is_private'] = undefined;





/**
 * Allowed values for the <code>incoming_status</code> property.
 * @enum {String}
 * @readonly
 */
RelationshipInfo['IncomingStatusEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "followed_by"
     * @const
     */
    "followed_by": "followed_by",

    /**
     * value: "requested_by"
     * @const
     */
    "requested_by": "requested_by"
};


/**
 * Allowed values for the <code>outgoing_status</code> property.
 * @enum {String}
 * @readonly
 */
RelationshipInfo['OutgoingStatusEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "follows"
     * @const
     */
    "follows": "follows",

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested"
};



export default RelationshipInfo;

