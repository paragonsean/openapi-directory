/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaptionData from './CaptionData';
import CommentsCollection from './CommentsCollection';
import ImagesData from './ImagesData';
import LikesCollection from './LikesCollection';
import LocationInfo from './LocationInfo';
import UserInPhoto from './UserInPhoto';
import UserShortInfo from './UserShortInfo';
import VideosData from './VideosData';

/**
 * The MediaEntry model module.
 * @module model/MediaEntry
 * @version 1.0.0
 */
class MediaEntry {
    /**
     * Constructs a new <code>MediaEntry</code>.
     * @alias module:model/MediaEntry
     */
    constructor() { 
        
        MediaEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaEntry} obj Optional instance to populate.
     * @return {module:model/MediaEntry} The populated <code>MediaEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaEntry();

            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = CaptionData.constructFromObject(data['caption']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = CommentsCollection.constructFromObject(data['comments']);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ImagesData.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('likes')) {
                obj['likes'] = LikesCollection.constructFromObject(data['likes']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationInfo.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserShortInfo.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_has_liked')) {
                obj['user_has_liked'] = ApiClient.convertToType(data['user_has_liked'], 'Boolean');
            }
            if (data.hasOwnProperty('users_in_photo')) {
                obj['users_in_photo'] = ApiClient.convertToType(data['users_in_photo'], [UserInPhoto]);
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = VideosData.constructFromObject(data['videos']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // validate the optional field `caption`
        if (data['caption']) { // data not null
          CaptionData.validateJSON(data['caption']);
        }
        // validate the optional field `comments`
        if (data['comments']) { // data not null
          CommentsCollection.validateJSON(data['comments']);
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          ImagesData.validateJSON(data['images']);
        }
        // validate the optional field `likes`
        if (data['likes']) { // data not null
          LikesCollection.validateJSON(data['likes']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          LocationInfo.validateJSON(data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserShortInfo.validateJSON(data['user']);
        }
        if (data['users_in_photo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users_in_photo'])) {
                throw new Error("Expected the field `users_in_photo` to be an array in the JSON data but got " + data['users_in_photo']);
            }
            // validate the optional field `users_in_photo` (array)
            for (const item of data['users_in_photo']) {
                UserInPhoto.validateJSON(item);
            };
        }
        // validate the optional field `videos`
        if (data['videos']) { // data not null
          VideosData.validateJSON(data['videos']);
        }

        return true;
    }


}



/**
 * ??? Unknown ???
 * @member {String} attribution
 */
MediaEntry.prototype['attribution'] = undefined;

/**
 * @member {module:model/CaptionData} caption
 */
MediaEntry.prototype['caption'] = undefined;

/**
 * @member {module:model/CommentsCollection} comments
 */
MediaEntry.prototype['comments'] = undefined;

/**
 * Media creation UNIX timestamp
 * @member {String} created_time
 */
MediaEntry.prototype['created_time'] = undefined;

/**
 * Filter of this media entry
 * @member {String} filter
 */
MediaEntry.prototype['filter'] = undefined;

/**
 * ID of a media entry
 * @member {String} id
 */
MediaEntry.prototype['id'] = undefined;

/**
 * @member {module:model/ImagesData} images
 */
MediaEntry.prototype['images'] = undefined;

/**
 * @member {module:model/LikesCollection} likes
 */
MediaEntry.prototype['likes'] = undefined;

/**
 * Fixed URL of this media entry
 * @member {String} link
 */
MediaEntry.prototype['link'] = undefined;

/**
 * @member {module:model/LocationInfo} location
 */
MediaEntry.prototype['location'] = undefined;

/**
 * List of tags assigned to this media
 * @member {Array.<String>} tags
 */
MediaEntry.prototype['tags'] = undefined;

/**
 * Type of this media entry
 * @member {module:model/MediaEntry.TypeEnum} type
 */
MediaEntry.prototype['type'] = undefined;

/**
 * @member {module:model/UserShortInfo} user
 */
MediaEntry.prototype['user'] = undefined;

/**
 * Indicates whether authenticated user has liked this media or not
 * @member {Boolean} user_has_liked
 */
MediaEntry.prototype['user_has_liked'] = undefined;

/**
 * Users located on this media entry
 * @member {Array.<module:model/UserInPhoto>} users_in_photo
 */
MediaEntry.prototype['users_in_photo'] = undefined;

/**
 * @member {module:model/VideosData} videos
 */
MediaEntry.prototype['videos'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MediaEntry['TypeEnum'] = {

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "video"
     * @const
     */
    "video": "video"
};



export default MediaEntry;

