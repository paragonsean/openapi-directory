# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caption_data import CaptionData
from openapi_server.models.comments_collection import CommentsCollection
from openapi_server.models.images_data import ImagesData
from openapi_server.models.likes_collection import LikesCollection
from openapi_server.models.location_info import LocationInfo
from openapi_server.models.user_in_photo import UserInPhoto
from openapi_server.models.user_short_info import UserShortInfo
from openapi_server.models.videos_data import VideosData
from openapi_server import util


class MediaEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution: str=None, caption: CaptionData=None, comments: CommentsCollection=None, created_time: str=None, filter: str=None, id: str=None, images: ImagesData=None, likes: LikesCollection=None, link: str=None, location: LocationInfo=None, tags: List[str]=None, type: str=None, user: UserShortInfo=None, user_has_liked: bool=None, users_in_photo: List[UserInPhoto]=None, videos: VideosData=None):
        """MediaEntry - a model defined in OpenAPI

        :param attribution: The attribution of this MediaEntry.
        :param caption: The caption of this MediaEntry.
        :param comments: The comments of this MediaEntry.
        :param created_time: The created_time of this MediaEntry.
        :param filter: The filter of this MediaEntry.
        :param id: The id of this MediaEntry.
        :param images: The images of this MediaEntry.
        :param likes: The likes of this MediaEntry.
        :param link: The link of this MediaEntry.
        :param location: The location of this MediaEntry.
        :param tags: The tags of this MediaEntry.
        :param type: The type of this MediaEntry.
        :param user: The user of this MediaEntry.
        :param user_has_liked: The user_has_liked of this MediaEntry.
        :param users_in_photo: The users_in_photo of this MediaEntry.
        :param videos: The videos of this MediaEntry.
        """
        self.openapi_types = {
            'attribution': str,
            'caption': CaptionData,
            'comments': CommentsCollection,
            'created_time': str,
            'filter': str,
            'id': str,
            'images': ImagesData,
            'likes': LikesCollection,
            'link': str,
            'location': LocationInfo,
            'tags': List[str],
            'type': str,
            'user': UserShortInfo,
            'user_has_liked': bool,
            'users_in_photo': List[UserInPhoto],
            'videos': VideosData
        }

        self.attribute_map = {
            'attribution': 'attribution',
            'caption': 'caption',
            'comments': 'comments',
            'created_time': 'created_time',
            'filter': 'filter',
            'id': 'id',
            'images': 'images',
            'likes': 'likes',
            'link': 'link',
            'location': 'location',
            'tags': 'tags',
            'type': 'type',
            'user': 'user',
            'user_has_liked': 'user_has_liked',
            'users_in_photo': 'users_in_photo',
            'videos': 'videos'
        }

        self._attribution = attribution
        self._caption = caption
        self._comments = comments
        self._created_time = created_time
        self._filter = filter
        self._id = id
        self._images = images
        self._likes = likes
        self._link = link
        self._location = location
        self._tags = tags
        self._type = type
        self._user = user
        self._user_has_liked = user_has_liked
        self._users_in_photo = users_in_photo
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaEntry of this MediaEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution(self):
        """Gets the attribution of this MediaEntry.

        ??? Unknown ???

        :return: The attribution of this MediaEntry.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this MediaEntry.

        ??? Unknown ???

        :param attribution: The attribution of this MediaEntry.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def caption(self):
        """Gets the caption of this MediaEntry.


        :return: The caption of this MediaEntry.
        :rtype: CaptionData
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this MediaEntry.


        :param caption: The caption of this MediaEntry.
        :type caption: CaptionData
        """

        self._caption = caption

    @property
    def comments(self):
        """Gets the comments of this MediaEntry.


        :return: The comments of this MediaEntry.
        :rtype: CommentsCollection
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this MediaEntry.


        :param comments: The comments of this MediaEntry.
        :type comments: CommentsCollection
        """

        self._comments = comments

    @property
    def created_time(self):
        """Gets the created_time of this MediaEntry.

        Media creation UNIX timestamp

        :return: The created_time of this MediaEntry.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this MediaEntry.

        Media creation UNIX timestamp

        :param created_time: The created_time of this MediaEntry.
        :type created_time: str
        """

        self._created_time = created_time

    @property
    def filter(self):
        """Gets the filter of this MediaEntry.

        Filter of this media entry

        :return: The filter of this MediaEntry.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MediaEntry.

        Filter of this media entry

        :param filter: The filter of this MediaEntry.
        :type filter: str
        """

        self._filter = filter

    @property
    def id(self):
        """Gets the id of this MediaEntry.

        ID of a media entry

        :return: The id of this MediaEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaEntry.

        ID of a media entry

        :param id: The id of this MediaEntry.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this MediaEntry.


        :return: The images of this MediaEntry.
        :rtype: ImagesData
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this MediaEntry.


        :param images: The images of this MediaEntry.
        :type images: ImagesData
        """

        self._images = images

    @property
    def likes(self):
        """Gets the likes of this MediaEntry.


        :return: The likes of this MediaEntry.
        :rtype: LikesCollection
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this MediaEntry.


        :param likes: The likes of this MediaEntry.
        :type likes: LikesCollection
        """

        self._likes = likes

    @property
    def link(self):
        """Gets the link of this MediaEntry.

        Fixed URL of this media entry

        :return: The link of this MediaEntry.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MediaEntry.

        Fixed URL of this media entry

        :param link: The link of this MediaEntry.
        :type link: str
        """

        self._link = link

    @property
    def location(self):
        """Gets the location of this MediaEntry.


        :return: The location of this MediaEntry.
        :rtype: LocationInfo
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MediaEntry.


        :param location: The location of this MediaEntry.
        :type location: LocationInfo
        """

        self._location = location

    @property
    def tags(self):
        """Gets the tags of this MediaEntry.

        List of tags assigned to this media

        :return: The tags of this MediaEntry.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MediaEntry.

        List of tags assigned to this media

        :param tags: The tags of this MediaEntry.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this MediaEntry.

        Type of this media entry

        :return: The type of this MediaEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaEntry.

        Type of this media entry

        :param type: The type of this MediaEntry.
        :type type: str
        """
        allowed_values = ["image", "video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this MediaEntry.


        :return: The user of this MediaEntry.
        :rtype: UserShortInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MediaEntry.


        :param user: The user of this MediaEntry.
        :type user: UserShortInfo
        """

        self._user = user

    @property
    def user_has_liked(self):
        """Gets the user_has_liked of this MediaEntry.

        Indicates whether authenticated user has liked this media or not

        :return: The user_has_liked of this MediaEntry.
        :rtype: bool
        """
        return self._user_has_liked

    @user_has_liked.setter
    def user_has_liked(self, user_has_liked):
        """Sets the user_has_liked of this MediaEntry.

        Indicates whether authenticated user has liked this media or not

        :param user_has_liked: The user_has_liked of this MediaEntry.
        :type user_has_liked: bool
        """

        self._user_has_liked = user_has_liked

    @property
    def users_in_photo(self):
        """Gets the users_in_photo of this MediaEntry.

        Users located on this media entry

        :return: The users_in_photo of this MediaEntry.
        :rtype: List[UserInPhoto]
        """
        return self._users_in_photo

    @users_in_photo.setter
    def users_in_photo(self, users_in_photo):
        """Sets the users_in_photo of this MediaEntry.

        Users located on this media entry

        :param users_in_photo: The users_in_photo of this MediaEntry.
        :type users_in_photo: List[UserInPhoto]
        """

        self._users_in_photo = users_in_photo

    @property
    def videos(self):
        """Gets the videos of this MediaEntry.


        :return: The videos of this MediaEntry.
        :rtype: VideosData
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this MediaEntry.


        :param videos: The videos of this MediaEntry.
        :type videos: VideosData
        """

        self._videos = videos
