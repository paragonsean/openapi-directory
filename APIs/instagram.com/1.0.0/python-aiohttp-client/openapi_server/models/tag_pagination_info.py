# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagPaginationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecation_warning: str=None, min_tag_id: str=None, next_max_id: str=None, next_max_tag_id: str=None, next_min_id: str=None, next_url: str=None):
        """TagPaginationInfo - a model defined in OpenAPI

        :param deprecation_warning: The deprecation_warning of this TagPaginationInfo.
        :param min_tag_id: The min_tag_id of this TagPaginationInfo.
        :param next_max_id: The next_max_id of this TagPaginationInfo.
        :param next_max_tag_id: The next_max_tag_id of this TagPaginationInfo.
        :param next_min_id: The next_min_id of this TagPaginationInfo.
        :param next_url: The next_url of this TagPaginationInfo.
        """
        self.openapi_types = {
            'deprecation_warning': str,
            'min_tag_id': str,
            'next_max_id': str,
            'next_max_tag_id': str,
            'next_min_id': str,
            'next_url': str
        }

        self.attribute_map = {
            'deprecation_warning': 'deprecation_warning',
            'min_tag_id': 'min_tag_id',
            'next_max_id': 'next_max_id',
            'next_max_tag_id': 'next_max_tag_id',
            'next_min_id': 'next_min_id',
            'next_url': 'next_url'
        }

        self._deprecation_warning = deprecation_warning
        self._min_tag_id = min_tag_id
        self._next_max_id = next_max_id
        self._next_max_tag_id = next_max_tag_id
        self._next_min_id = next_min_id
        self._next_url = next_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagPaginationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagPaginationInfo of this TagPaginationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecation_warning(self):
        """Gets the deprecation_warning of this TagPaginationInfo.

        The deprication warning, if information is available

        :return: The deprecation_warning of this TagPaginationInfo.
        :rtype: str
        """
        return self._deprecation_warning

    @deprecation_warning.setter
    def deprecation_warning(self, deprecation_warning):
        """Sets the deprecation_warning of this TagPaginationInfo.

        The deprication warning, if information is available

        :param deprecation_warning: The deprecation_warning of this TagPaginationInfo.
        :type deprecation_warning: str
        """

        self._deprecation_warning = deprecation_warning

    @property
    def min_tag_id(self):
        """Gets the min_tag_id of this TagPaginationInfo.

        The min ID of a tag for the next page

        :return: The min_tag_id of this TagPaginationInfo.
        :rtype: str
        """
        return self._min_tag_id

    @min_tag_id.setter
    def min_tag_id(self, min_tag_id):
        """Sets the min_tag_id of this TagPaginationInfo.

        The min ID of a tag for the next page

        :param min_tag_id: The min_tag_id of this TagPaginationInfo.
        :type min_tag_id: str
        """

        self._min_tag_id = min_tag_id

    @property
    def next_max_id(self):
        """Gets the next_max_id of this TagPaginationInfo.

        Depricated. Use min_tag_id instead

        :return: The next_max_id of this TagPaginationInfo.
        :rtype: str
        """
        return self._next_max_id

    @next_max_id.setter
    def next_max_id(self, next_max_id):
        """Sets the next_max_id of this TagPaginationInfo.

        Depricated. Use min_tag_id instead

        :param next_max_id: The next_max_id of this TagPaginationInfo.
        :type next_max_id: str
        """

        self._next_max_id = next_max_id

    @property
    def next_max_tag_id(self):
        """Gets the next_max_tag_id of this TagPaginationInfo.

        The max ID of a tag for the next page

        :return: The next_max_tag_id of this TagPaginationInfo.
        :rtype: str
        """
        return self._next_max_tag_id

    @next_max_tag_id.setter
    def next_max_tag_id(self, next_max_tag_id):
        """Sets the next_max_tag_id of this TagPaginationInfo.

        The max ID of a tag for the next page

        :param next_max_tag_id: The next_max_tag_id of this TagPaginationInfo.
        :type next_max_tag_id: str
        """

        self._next_max_tag_id = next_max_tag_id

    @property
    def next_min_id(self):
        """Gets the next_min_id of this TagPaginationInfo.

        Depricated. Use max_tag_id instead

        :return: The next_min_id of this TagPaginationInfo.
        :rtype: str
        """
        return self._next_min_id

    @next_min_id.setter
    def next_min_id(self, next_min_id):
        """Sets the next_min_id of this TagPaginationInfo.

        Depricated. Use max_tag_id instead

        :param next_min_id: The next_min_id of this TagPaginationInfo.
        :type next_min_id: str
        """

        self._next_min_id = next_min_id

    @property
    def next_url(self):
        """Gets the next_url of this TagPaginationInfo.

        URL to retrieve next page of entries

        :return: The next_url of this TagPaginationInfo.
        :rtype: str
        """
        return self._next_url

    @next_url.setter
    def next_url(self, next_url):
        """Sets the next_url of this TagPaginationInfo.

        URL to retrieve next page of entries

        :param next_url: The next_url of this TagPaginationInfo.
        :type next_url: str
        """

        self._next_url = next_url
