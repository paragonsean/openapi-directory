/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaApi_H
#define OAI_OAIMediaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMediaEntryResponse.h"
#include "OAIMediaSearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaApi : public QObject {
    Q_OBJECT

public:
    OAIMediaApi(const int timeOut = 0);
    ~OAIMediaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  media_id QString [required]
    */
    virtual void mediaMediaIdGet(const QString &media_id);


    Q_DECL_DEPRECATED virtual void mediaPopularGet();

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  min_timestamp qint64 [optional]
    * @param[in]  max_timestamp qint64 [optional]
    * @param[in]  distance qint32 [optional]
    */
    virtual void mediaSearchGet(const double &lat, const double &lng, const ::OpenAPI::OptionalParam<qint64> &min_timestamp = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_timestamp = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &distance = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  shortcode QString [required]
    */
    virtual void mediaShortcodeShortcodeGet(const QString &shortcode);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mediaMediaIdGetCallback(OAIHttpRequestWorker *worker);
    void mediaPopularGetCallback(OAIHttpRequestWorker *worker);
    void mediaSearchGetCallback(OAIHttpRequestWorker *worker);
    void mediaShortcodeShortcodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mediaMediaIdGetSignal(OAIMediaEntryResponse summary);
    void mediaPopularGetSignal(OAIMediaSearchResponse summary);
    void mediaSearchGetSignal(OAIMediaSearchResponse summary);
    void mediaShortcodeShortcodeGetSignal(OAIMediaEntryResponse summary);


    void mediaMediaIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaEntryResponse summary);
    void mediaPopularGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaSearchResponse summary);
    void mediaSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaSearchResponse summary);
    void mediaShortcodeShortcodeGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaEntryResponse summary);

    Q_DECL_DEPRECATED_X("Use mediaMediaIdGetSignalError() instead")
    void mediaMediaIdGetSignalE(OAIMediaEntryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdGetSignalError(OAIMediaEntryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaPopularGetSignalError() instead")
    void mediaPopularGetSignalE(OAIMediaSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaPopularGetSignalError(OAIMediaSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaSearchGetSignalError() instead")
    void mediaSearchGetSignalE(OAIMediaSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaSearchGetSignalError(OAIMediaSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaShortcodeShortcodeGetSignalError() instead")
    void mediaShortcodeShortcodeGetSignalE(OAIMediaEntryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaShortcodeShortcodeGetSignalError(OAIMediaEntryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mediaMediaIdGetSignalErrorFull() instead")
    void mediaMediaIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaPopularGetSignalErrorFull() instead")
    void mediaPopularGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaPopularGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaSearchGetSignalErrorFull() instead")
    void mediaSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaShortcodeShortcodeGetSignalErrorFull() instead")
    void mediaShortcodeShortcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaShortcodeShortcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
