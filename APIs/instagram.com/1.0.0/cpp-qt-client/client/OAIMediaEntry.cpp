/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaEntry::OAIMediaEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaEntry::OAIMediaEntry() {
    this->initializeModel();
}

OAIMediaEntry::~OAIMediaEntry() {}

void OAIMediaEntry::initializeModel() {

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_has_liked_isSet = false;
    m_user_has_liked_isValid = false;

    m_users_in_photo_isSet = false;
    m_users_in_photo_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIMediaEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaEntry::fromJsonObject(QJsonObject json) {

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_has_liked_isValid = ::OpenAPI::fromJsonValue(m_user_has_liked, json[QString("user_has_liked")]);
    m_user_has_liked_isSet = !json[QString("user_has_liked")].isNull() && m_user_has_liked_isValid;

    m_users_in_photo_isValid = ::OpenAPI::fromJsonValue(m_users_in_photo, json[QString("users_in_photo")]);
    m_users_in_photo_isSet = !json[QString("users_in_photo")].isNull() && m_users_in_photo_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIMediaEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_caption.isSet()) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_likes.isSet()) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_has_liked_isSet) {
        obj.insert(QString("user_has_liked"), ::OpenAPI::toJsonValue(m_user_has_liked));
    }
    if (m_users_in_photo.size() > 0) {
        obj.insert(QString("users_in_photo"), ::OpenAPI::toJsonValue(m_users_in_photo));
    }
    if (m_videos.isSet()) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QString OAIMediaEntry::getAttribution() const {
    return m_attribution;
}
void OAIMediaEntry::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIMediaEntry::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIMediaEntry::is_attribution_Valid() const{
    return m_attribution_isValid;
}

OAICaptionData OAIMediaEntry::getCaption() const {
    return m_caption;
}
void OAIMediaEntry::setCaption(const OAICaptionData &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIMediaEntry::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIMediaEntry::is_caption_Valid() const{
    return m_caption_isValid;
}

OAICommentsCollection OAIMediaEntry::getComments() const {
    return m_comments;
}
void OAIMediaEntry::setComments(const OAICommentsCollection &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIMediaEntry::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIMediaEntry::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIMediaEntry::getCreatedTime() const {
    return m_created_time;
}
void OAIMediaEntry::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIMediaEntry::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIMediaEntry::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIMediaEntry::getFilter() const {
    return m_filter;
}
void OAIMediaEntry::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMediaEntry::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMediaEntry::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIMediaEntry::getId() const {
    return m_id;
}
void OAIMediaEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMediaEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMediaEntry::is_id_Valid() const{
    return m_id_isValid;
}

OAIImagesData OAIMediaEntry::getImages() const {
    return m_images;
}
void OAIMediaEntry::setImages(const OAIImagesData &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIMediaEntry::is_images_Set() const{
    return m_images_isSet;
}

bool OAIMediaEntry::is_images_Valid() const{
    return m_images_isValid;
}

OAILikesCollection OAIMediaEntry::getLikes() const {
    return m_likes;
}
void OAIMediaEntry::setLikes(const OAILikesCollection &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIMediaEntry::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIMediaEntry::is_likes_Valid() const{
    return m_likes_isValid;
}

QString OAIMediaEntry::getLink() const {
    return m_link;
}
void OAIMediaEntry::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIMediaEntry::is_link_Set() const{
    return m_link_isSet;
}

bool OAIMediaEntry::is_link_Valid() const{
    return m_link_isValid;
}

OAILocationInfo OAIMediaEntry::getLocation() const {
    return m_location;
}
void OAIMediaEntry::setLocation(const OAILocationInfo &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMediaEntry::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMediaEntry::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAIMediaEntry::getTags() const {
    return m_tags;
}
void OAIMediaEntry::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMediaEntry::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMediaEntry::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIMediaEntry::getType() const {
    return m_type;
}
void OAIMediaEntry::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMediaEntry::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMediaEntry::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserShortInfo OAIMediaEntry::getUser() const {
    return m_user;
}
void OAIMediaEntry::setUser(const OAIUserShortInfo &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMediaEntry::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMediaEntry::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIMediaEntry::isUserHasLiked() const {
    return m_user_has_liked;
}
void OAIMediaEntry::setUserHasLiked(const bool &user_has_liked) {
    m_user_has_liked = user_has_liked;
    m_user_has_liked_isSet = true;
}

bool OAIMediaEntry::is_user_has_liked_Set() const{
    return m_user_has_liked_isSet;
}

bool OAIMediaEntry::is_user_has_liked_Valid() const{
    return m_user_has_liked_isValid;
}

QList<OAIUserInPhoto> OAIMediaEntry::getUsersInPhoto() const {
    return m_users_in_photo;
}
void OAIMediaEntry::setUsersInPhoto(const QList<OAIUserInPhoto> &users_in_photo) {
    m_users_in_photo = users_in_photo;
    m_users_in_photo_isSet = true;
}

bool OAIMediaEntry::is_users_in_photo_Set() const{
    return m_users_in_photo_isSet;
}

bool OAIMediaEntry::is_users_in_photo_Valid() const{
    return m_users_in_photo_isValid;
}

OAIVideosData OAIMediaEntry::getVideos() const {
    return m_videos;
}
void OAIMediaEntry::setVideos(const OAIVideosData &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIMediaEntry::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIMediaEntry::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIMediaEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_has_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_in_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
