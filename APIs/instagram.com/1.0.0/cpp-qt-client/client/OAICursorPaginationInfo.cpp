/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICursorPaginationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICursorPaginationInfo::OAICursorPaginationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICursorPaginationInfo::OAICursorPaginationInfo() {
    this->initializeModel();
}

OAICursorPaginationInfo::~OAICursorPaginationInfo() {}

void OAICursorPaginationInfo::initializeModel() {

    m_next_cursor_isSet = false;
    m_next_cursor_isValid = false;

    m_next_url_isSet = false;
    m_next_url_isValid = false;
}

void OAICursorPaginationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICursorPaginationInfo::fromJsonObject(QJsonObject json) {

    m_next_cursor_isValid = ::OpenAPI::fromJsonValue(m_next_cursor, json[QString("next_cursor")]);
    m_next_cursor_isSet = !json[QString("next_cursor")].isNull() && m_next_cursor_isValid;

    m_next_url_isValid = ::OpenAPI::fromJsonValue(m_next_url, json[QString("next_url")]);
    m_next_url_isSet = !json[QString("next_url")].isNull() && m_next_url_isValid;
}

QString OAICursorPaginationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICursorPaginationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_next_cursor_isSet) {
        obj.insert(QString("next_cursor"), ::OpenAPI::toJsonValue(m_next_cursor));
    }
    if (m_next_url_isSet) {
        obj.insert(QString("next_url"), ::OpenAPI::toJsonValue(m_next_url));
    }
    return obj;
}

QString OAICursorPaginationInfo::getNextCursor() const {
    return m_next_cursor;
}
void OAICursorPaginationInfo::setNextCursor(const QString &next_cursor) {
    m_next_cursor = next_cursor;
    m_next_cursor_isSet = true;
}

bool OAICursorPaginationInfo::is_next_cursor_Set() const{
    return m_next_cursor_isSet;
}

bool OAICursorPaginationInfo::is_next_cursor_Valid() const{
    return m_next_cursor_isValid;
}

QString OAICursorPaginationInfo::getNextUrl() const {
    return m_next_url;
}
void OAICursorPaginationInfo::setNextUrl(const QString &next_url) {
    m_next_url = next_url;
    m_next_url_isSet = true;
}

bool OAICursorPaginationInfo::is_next_url_Set() const{
    return m_next_url_isSet;
}

bool OAICursorPaginationInfo::is_next_url_Valid() const{
    return m_next_url_isValid;
}

bool OAICursorPaginationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICursorPaginationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
