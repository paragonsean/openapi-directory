/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILocationInfoResponse.h"
#include "OAILocationSearchResponse.h"
#include "OAIMediaListResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [required]
    */
    virtual void locationsLocationIdGet(const QString &location_id);

    /**
    * @param[in]  location_id QString [required]
    * @param[in]  min_timestamp qint64 [optional]
    * @param[in]  max_timestamp qint64 [optional]
    * @param[in]  min_id QString [optional]
    * @param[in]  max_id QString [optional]
    */
    virtual void locationsLocationIdMediaRecentGet(const QString &location_id, const ::OpenAPI::OptionalParam<qint64> &min_timestamp = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_timestamp = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distance qint32 [optional]
    * @param[in]  facebook_places_id QString [optional]
    * @param[in]  foursquare_id QString [optional]
    * @param[in]  lat double [optional]
    * @param[in]  lng double [optional]
    * @param[in]  foursquare_v2_id QString [optional]
    */
    virtual void locationsSearchGet(const ::OpenAPI::OptionalParam<qint32> &distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &facebook_places_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foursquare_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &lng = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &foursquare_v2_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void locationsLocationIdGetCallback(OAIHttpRequestWorker *worker);
    void locationsLocationIdMediaRecentGetCallback(OAIHttpRequestWorker *worker);
    void locationsSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void locationsLocationIdGetSignal(OAILocationInfoResponse summary);
    void locationsLocationIdMediaRecentGetSignal(OAIMediaListResponse summary);
    void locationsSearchGetSignal(OAILocationSearchResponse summary);


    void locationsLocationIdGetSignalFull(OAIHttpRequestWorker *worker, OAILocationInfoResponse summary);
    void locationsLocationIdMediaRecentGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaListResponse summary);
    void locationsSearchGetSignalFull(OAIHttpRequestWorker *worker, OAILocationSearchResponse summary);

    Q_DECL_DEPRECATED_X("Use locationsLocationIdGetSignalError() instead")
    void locationsLocationIdGetSignalE(OAILocationInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsLocationIdGetSignalError(OAILocationInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsLocationIdMediaRecentGetSignalError() instead")
    void locationsLocationIdMediaRecentGetSignalE(OAIMediaListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsLocationIdMediaRecentGetSignalError(OAIMediaListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsSearchGetSignalError() instead")
    void locationsSearchGetSignalE(OAILocationSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsSearchGetSignalError(OAILocationSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use locationsLocationIdGetSignalErrorFull() instead")
    void locationsLocationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsLocationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsLocationIdMediaRecentGetSignalErrorFull() instead")
    void locationsLocationIdMediaRecentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsLocationIdMediaRecentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsSearchGetSignalErrorFull() instead")
    void locationsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
