/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagPaginationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagPaginationInfo::OAITagPaginationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagPaginationInfo::OAITagPaginationInfo() {
    this->initializeModel();
}

OAITagPaginationInfo::~OAITagPaginationInfo() {}

void OAITagPaginationInfo::initializeModel() {

    m_deprecation_warning_isSet = false;
    m_deprecation_warning_isValid = false;

    m_min_tag_id_isSet = false;
    m_min_tag_id_isValid = false;

    m_next_max_id_isSet = false;
    m_next_max_id_isValid = false;

    m_next_max_tag_id_isSet = false;
    m_next_max_tag_id_isValid = false;

    m_next_min_id_isSet = false;
    m_next_min_id_isValid = false;

    m_next_url_isSet = false;
    m_next_url_isValid = false;
}

void OAITagPaginationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagPaginationInfo::fromJsonObject(QJsonObject json) {

    m_deprecation_warning_isValid = ::OpenAPI::fromJsonValue(m_deprecation_warning, json[QString("deprecation_warning")]);
    m_deprecation_warning_isSet = !json[QString("deprecation_warning")].isNull() && m_deprecation_warning_isValid;

    m_min_tag_id_isValid = ::OpenAPI::fromJsonValue(m_min_tag_id, json[QString("min_tag_id")]);
    m_min_tag_id_isSet = !json[QString("min_tag_id")].isNull() && m_min_tag_id_isValid;

    m_next_max_id_isValid = ::OpenAPI::fromJsonValue(m_next_max_id, json[QString("next_max_id")]);
    m_next_max_id_isSet = !json[QString("next_max_id")].isNull() && m_next_max_id_isValid;

    m_next_max_tag_id_isValid = ::OpenAPI::fromJsonValue(m_next_max_tag_id, json[QString("next_max_tag_id")]);
    m_next_max_tag_id_isSet = !json[QString("next_max_tag_id")].isNull() && m_next_max_tag_id_isValid;

    m_next_min_id_isValid = ::OpenAPI::fromJsonValue(m_next_min_id, json[QString("next_min_id")]);
    m_next_min_id_isSet = !json[QString("next_min_id")].isNull() && m_next_min_id_isValid;

    m_next_url_isValid = ::OpenAPI::fromJsonValue(m_next_url, json[QString("next_url")]);
    m_next_url_isSet = !json[QString("next_url")].isNull() && m_next_url_isValid;
}

QString OAITagPaginationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagPaginationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecation_warning_isSet) {
        obj.insert(QString("deprecation_warning"), ::OpenAPI::toJsonValue(m_deprecation_warning));
    }
    if (m_min_tag_id_isSet) {
        obj.insert(QString("min_tag_id"), ::OpenAPI::toJsonValue(m_min_tag_id));
    }
    if (m_next_max_id_isSet) {
        obj.insert(QString("next_max_id"), ::OpenAPI::toJsonValue(m_next_max_id));
    }
    if (m_next_max_tag_id_isSet) {
        obj.insert(QString("next_max_tag_id"), ::OpenAPI::toJsonValue(m_next_max_tag_id));
    }
    if (m_next_min_id_isSet) {
        obj.insert(QString("next_min_id"), ::OpenAPI::toJsonValue(m_next_min_id));
    }
    if (m_next_url_isSet) {
        obj.insert(QString("next_url"), ::OpenAPI::toJsonValue(m_next_url));
    }
    return obj;
}

QString OAITagPaginationInfo::getDeprecationWarning() const {
    return m_deprecation_warning;
}
void OAITagPaginationInfo::setDeprecationWarning(const QString &deprecation_warning) {
    m_deprecation_warning = deprecation_warning;
    m_deprecation_warning_isSet = true;
}

bool OAITagPaginationInfo::is_deprecation_warning_Set() const{
    return m_deprecation_warning_isSet;
}

bool OAITagPaginationInfo::is_deprecation_warning_Valid() const{
    return m_deprecation_warning_isValid;
}

QString OAITagPaginationInfo::getMinTagId() const {
    return m_min_tag_id;
}
void OAITagPaginationInfo::setMinTagId(const QString &min_tag_id) {
    m_min_tag_id = min_tag_id;
    m_min_tag_id_isSet = true;
}

bool OAITagPaginationInfo::is_min_tag_id_Set() const{
    return m_min_tag_id_isSet;
}

bool OAITagPaginationInfo::is_min_tag_id_Valid() const{
    return m_min_tag_id_isValid;
}

QString OAITagPaginationInfo::getNextMaxId() const {
    return m_next_max_id;
}
void OAITagPaginationInfo::setNextMaxId(const QString &next_max_id) {
    m_next_max_id = next_max_id;
    m_next_max_id_isSet = true;
}

bool OAITagPaginationInfo::is_next_max_id_Set() const{
    return m_next_max_id_isSet;
}

bool OAITagPaginationInfo::is_next_max_id_Valid() const{
    return m_next_max_id_isValid;
}

QString OAITagPaginationInfo::getNextMaxTagId() const {
    return m_next_max_tag_id;
}
void OAITagPaginationInfo::setNextMaxTagId(const QString &next_max_tag_id) {
    m_next_max_tag_id = next_max_tag_id;
    m_next_max_tag_id_isSet = true;
}

bool OAITagPaginationInfo::is_next_max_tag_id_Set() const{
    return m_next_max_tag_id_isSet;
}

bool OAITagPaginationInfo::is_next_max_tag_id_Valid() const{
    return m_next_max_tag_id_isValid;
}

QString OAITagPaginationInfo::getNextMinId() const {
    return m_next_min_id;
}
void OAITagPaginationInfo::setNextMinId(const QString &next_min_id) {
    m_next_min_id = next_min_id;
    m_next_min_id_isSet = true;
}

bool OAITagPaginationInfo::is_next_min_id_Set() const{
    return m_next_min_id_isSet;
}

bool OAITagPaginationInfo::is_next_min_id_Valid() const{
    return m_next_min_id_isValid;
}

QString OAITagPaginationInfo::getNextUrl() const {
    return m_next_url;
}
void OAITagPaginationInfo::setNextUrl(const QString &next_url) {
    m_next_url = next_url;
    m_next_url_isSet = true;
}

bool OAITagPaginationInfo::is_next_url_Set() const{
    return m_next_url_isSet;
}

bool OAITagPaginationInfo::is_next_url_Valid() const{
    return m_next_url_isValid;
}

bool OAITagPaginationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecation_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_max_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_max_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_min_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagPaginationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
