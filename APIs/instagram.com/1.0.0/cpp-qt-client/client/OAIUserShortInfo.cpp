/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserShortInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserShortInfo::OAIUserShortInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserShortInfo::OAIUserShortInfo() {
    this->initializeModel();
}

OAIUserShortInfo::~OAIUserShortInfo() {}

void OAIUserShortInfo::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_profile_picture_isSet = false;
    m_profile_picture_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserShortInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserShortInfo::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_profile_picture_isValid = ::OpenAPI::fromJsonValue(m_profile_picture, json[QString("profile_picture")]);
    m_profile_picture_isSet = !json[QString("profile_picture")].isNull() && m_profile_picture_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserShortInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserShortInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_profile_picture_isSet) {
        obj.insert(QString("profile_picture"), ::OpenAPI::toJsonValue(m_profile_picture));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUserShortInfo::getFullName() const {
    return m_full_name;
}
void OAIUserShortInfo::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUserShortInfo::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUserShortInfo::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIUserShortInfo::getId() const {
    return m_id;
}
void OAIUserShortInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserShortInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserShortInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserShortInfo::getProfilePicture() const {
    return m_profile_picture;
}
void OAIUserShortInfo::setProfilePicture(const QString &profile_picture) {
    m_profile_picture = profile_picture;
    m_profile_picture_isSet = true;
}

bool OAIUserShortInfo::is_profile_picture_Set() const{
    return m_profile_picture_isSet;
}

bool OAIUserShortInfo::is_profile_picture_Valid() const{
    return m_profile_picture_isValid;
}

QString OAIUserShortInfo::getUsername() const {
    return m_username;
}
void OAIUserShortInfo::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserShortInfo::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserShortInfo::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserShortInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserShortInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
