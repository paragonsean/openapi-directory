/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCounts::OAIUserCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCounts::OAIUserCounts() {
    this->initializeModel();
}

OAIUserCounts::~OAIUserCounts() {}

void OAIUserCounts::initializeModel() {

    m_followed_by_isSet = false;
    m_followed_by_isValid = false;

    m_follows_isSet = false;
    m_follows_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;
}

void OAIUserCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCounts::fromJsonObject(QJsonObject json) {

    m_followed_by_isValid = ::OpenAPI::fromJsonValue(m_followed_by, json[QString("followed_by")]);
    m_followed_by_isSet = !json[QString("followed_by")].isNull() && m_followed_by_isValid;

    m_follows_isValid = ::OpenAPI::fromJsonValue(m_follows, json[QString("follows")]);
    m_follows_isSet = !json[QString("follows")].isNull() && m_follows_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;
}

QString OAIUserCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_followed_by_isSet) {
        obj.insert(QString("followed_by"), ::OpenAPI::toJsonValue(m_followed_by));
    }
    if (m_follows_isSet) {
        obj.insert(QString("follows"), ::OpenAPI::toJsonValue(m_follows));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    return obj;
}

qint32 OAIUserCounts::getFollowedBy() const {
    return m_followed_by;
}
void OAIUserCounts::setFollowedBy(const qint32 &followed_by) {
    m_followed_by = followed_by;
    m_followed_by_isSet = true;
}

bool OAIUserCounts::is_followed_by_Set() const{
    return m_followed_by_isSet;
}

bool OAIUserCounts::is_followed_by_Valid() const{
    return m_followed_by_isValid;
}

qint32 OAIUserCounts::getFollows() const {
    return m_follows;
}
void OAIUserCounts::setFollows(const qint32 &follows) {
    m_follows = follows;
    m_follows_isSet = true;
}

bool OAIUserCounts::is_follows_Set() const{
    return m_follows_isSet;
}

bool OAIUserCounts::is_follows_Valid() const{
    return m_follows_isValid;
}

qint32 OAIUserCounts::getMedia() const {
    return m_media;
}
void OAIUserCounts::setMedia(const qint32 &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIUserCounts::is_media_Set() const{
    return m_media_isSet;
}

bool OAIUserCounts::is_media_Valid() const{
    return m_media_isValid;
}

bool OAIUserCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_followed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
