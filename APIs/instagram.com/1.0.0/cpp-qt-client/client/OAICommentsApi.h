/**
 * Instagram API
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommentsApi_H
#define OAI_OAICommentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommentsResponse.h"
#include "OAIStatusResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommentsApi : public QObject {
    Q_OBJECT

public:
    OAICommentsApi(const int timeOut = 0);
    ~OAICommentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  media_id QString [required]
    * @param[in]  comment_id QString [required]
    */
    virtual void mediaMediaIdCommentsCommentIdDelete(const QString &media_id, const QString &comment_id);

    /**
    * @param[in]  media_id QString [required]
    */
    virtual void mediaMediaIdCommentsGet(const QString &media_id);

    /**
    * @param[in]  media_id QString [required]
    * @param[in]  text QString [required]
    */
    virtual void mediaMediaIdCommentsPost(const QString &media_id, const QString &text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mediaMediaIdCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void mediaMediaIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void mediaMediaIdCommentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mediaMediaIdCommentsCommentIdDeleteSignal(OAIStatusResponse summary);
    void mediaMediaIdCommentsGetSignal(OAICommentsResponse summary);
    void mediaMediaIdCommentsPostSignal(OAIStatusResponse summary);


    void mediaMediaIdCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIStatusResponse summary);
    void mediaMediaIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAICommentsResponse summary);
    void mediaMediaIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAIStatusResponse summary);

    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsCommentIdDeleteSignalError() instead")
    void mediaMediaIdCommentsCommentIdDeleteSignalE(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsCommentIdDeleteSignalError(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsGetSignalError() instead")
    void mediaMediaIdCommentsGetSignalE(OAICommentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsGetSignalError(OAICommentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsPostSignalError() instead")
    void mediaMediaIdCommentsPostSignalE(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsPostSignalError(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsCommentIdDeleteSignalErrorFull() instead")
    void mediaMediaIdCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsGetSignalErrorFull() instead")
    void mediaMediaIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaMediaIdCommentsPostSignalErrorFull() instead")
    void mediaMediaIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaMediaIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
