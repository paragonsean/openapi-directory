# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChapterSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chapter_number: int=None, chapter_summary: str=None, name: str=None, name_meaning: str=None, name_translation: str=None, name_transliterated: str=None, verses_count: int=None):
        """ChapterSchema - a model defined in OpenAPI

        :param chapter_number: The chapter_number of this ChapterSchema.
        :param chapter_summary: The chapter_summary of this ChapterSchema.
        :param name: The name of this ChapterSchema.
        :param name_meaning: The name_meaning of this ChapterSchema.
        :param name_translation: The name_translation of this ChapterSchema.
        :param name_transliterated: The name_transliterated of this ChapterSchema.
        :param verses_count: The verses_count of this ChapterSchema.
        """
        self.openapi_types = {
            'chapter_number': int,
            'chapter_summary': str,
            'name': str,
            'name_meaning': str,
            'name_translation': str,
            'name_transliterated': str,
            'verses_count': int
        }

        self.attribute_map = {
            'chapter_number': 'chapter_number',
            'chapter_summary': 'chapter_summary',
            'name': 'name',
            'name_meaning': 'name_meaning',
            'name_translation': 'name_translation',
            'name_transliterated': 'name_transliterated',
            'verses_count': 'verses_count'
        }

        self._chapter_number = chapter_number
        self._chapter_summary = chapter_summary
        self._name = name
        self._name_meaning = name_meaning
        self._name_translation = name_translation
        self._name_transliterated = name_transliterated
        self._verses_count = verses_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChapterSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChapterSchema of this ChapterSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chapter_number(self):
        """Gets the chapter_number of this ChapterSchema.


        :return: The chapter_number of this ChapterSchema.
        :rtype: int
        """
        return self._chapter_number

    @chapter_number.setter
    def chapter_number(self, chapter_number):
        """Sets the chapter_number of this ChapterSchema.


        :param chapter_number: The chapter_number of this ChapterSchema.
        :type chapter_number: int
        """

        self._chapter_number = chapter_number

    @property
    def chapter_summary(self):
        """Gets the chapter_summary of this ChapterSchema.


        :return: The chapter_summary of this ChapterSchema.
        :rtype: str
        """
        return self._chapter_summary

    @chapter_summary.setter
    def chapter_summary(self, chapter_summary):
        """Sets the chapter_summary of this ChapterSchema.


        :param chapter_summary: The chapter_summary of this ChapterSchema.
        :type chapter_summary: str
        """

        self._chapter_summary = chapter_summary

    @property
    def name(self):
        """Gets the name of this ChapterSchema.


        :return: The name of this ChapterSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChapterSchema.


        :param name: The name of this ChapterSchema.
        :type name: str
        """

        self._name = name

    @property
    def name_meaning(self):
        """Gets the name_meaning of this ChapterSchema.


        :return: The name_meaning of this ChapterSchema.
        :rtype: str
        """
        return self._name_meaning

    @name_meaning.setter
    def name_meaning(self, name_meaning):
        """Sets the name_meaning of this ChapterSchema.


        :param name_meaning: The name_meaning of this ChapterSchema.
        :type name_meaning: str
        """

        self._name_meaning = name_meaning

    @property
    def name_translation(self):
        """Gets the name_translation of this ChapterSchema.


        :return: The name_translation of this ChapterSchema.
        :rtype: str
        """
        return self._name_translation

    @name_translation.setter
    def name_translation(self, name_translation):
        """Sets the name_translation of this ChapterSchema.


        :param name_translation: The name_translation of this ChapterSchema.
        :type name_translation: str
        """

        self._name_translation = name_translation

    @property
    def name_transliterated(self):
        """Gets the name_transliterated of this ChapterSchema.


        :return: The name_transliterated of this ChapterSchema.
        :rtype: str
        """
        return self._name_transliterated

    @name_transliterated.setter
    def name_transliterated(self, name_transliterated):
        """Sets the name_transliterated of this ChapterSchema.


        :param name_transliterated: The name_transliterated of this ChapterSchema.
        :type name_transliterated: str
        """

        self._name_transliterated = name_transliterated

    @property
    def verses_count(self):
        """Gets the verses_count of this ChapterSchema.


        :return: The verses_count of this ChapterSchema.
        :rtype: int
        """
        return self._verses_count

    @verses_count.setter
    def verses_count(self, verses_count):
        """Sets the verses_count of this ChapterSchema.


        :param verses_count: The verses_count of this ChapterSchema.
        :type verses_count: int
        """

        self._verses_count = verses_count
