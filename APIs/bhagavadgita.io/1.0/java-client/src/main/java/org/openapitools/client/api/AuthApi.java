/*
 * Bhagavad Gita API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authOauthTokenPost
     * @param clientId Your app&#39;s client_id. Get from API dashboard. (required)
     * @param clientSecret Your app&#39;s client_secret. Get from API dashboard. (required)
     * @param grantType Grant Type. (required)
     * @param scope The resources that you would like to access. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success: Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The request was unacceptable due to wrong parameter(s). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access_token used. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request Failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong on our end. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authOauthTokenPostCall(String clientId, String clientSecret, String grantType, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authOauthTokenPostValidateBeforeCall(String clientId, String clientSecret, String grantType, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authOauthTokenPost(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling authOauthTokenPost(Async)");
        }

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling authOauthTokenPost(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling authOauthTokenPost(Async)");
        }

        return authOauthTokenPostCall(clientId, clientSecret, grantType, scope, _callback);

    }

    /**
     * Send client credentials and get an access token.
     * 
     * @param clientId Your app&#39;s client_id. Get from API dashboard. (required)
     * @param clientSecret Your app&#39;s client_secret. Get from API dashboard. (required)
     * @param grantType Grant Type. (required)
     * @param scope The resources that you would like to access. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success: Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The request was unacceptable due to wrong parameter(s). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access_token used. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request Failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong on our end. </td><td>  -  </td></tr>
     </table>
     */
    public void authOauthTokenPost(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        authOauthTokenPostWithHttpInfo(clientId, clientSecret, grantType, scope);
    }

    /**
     * Send client credentials and get an access token.
     * 
     * @param clientId Your app&#39;s client_id. Get from API dashboard. (required)
     * @param clientSecret Your app&#39;s client_secret. Get from API dashboard. (required)
     * @param grantType Grant Type. (required)
     * @param scope The resources that you would like to access. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success: Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The request was unacceptable due to wrong parameter(s). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access_token used. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request Failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong on our end. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authOauthTokenPostWithHttpInfo(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        okhttp3.Call localVarCall = authOauthTokenPostValidateBeforeCall(clientId, clientSecret, grantType, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send client credentials and get an access token. (asynchronously)
     * 
     * @param clientId Your app&#39;s client_id. Get from API dashboard. (required)
     * @param clientSecret Your app&#39;s client_secret. Get from API dashboard. (required)
     * @param grantType Grant Type. (required)
     * @param scope The resources that you would like to access. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success: Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The request was unacceptable due to wrong parameter(s). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access_token used. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request Failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong on our end. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authOauthTokenPostAsync(String clientId, String clientSecret, String grantType, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authOauthTokenPostValidateBeforeCall(clientId, clientSecret, grantType, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
