/*
 * Bhagavad Gita API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChapterSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:30.401411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChapterSchema {
  public static final String SERIALIZED_NAME_CHAPTER_NUMBER = "chapter_number";
  @SerializedName(SERIALIZED_NAME_CHAPTER_NUMBER)
  private Integer chapterNumber;

  public static final String SERIALIZED_NAME_CHAPTER_SUMMARY = "chapter_summary";
  @SerializedName(SERIALIZED_NAME_CHAPTER_SUMMARY)
  private String chapterSummary;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_MEANING = "name_meaning";
  @SerializedName(SERIALIZED_NAME_NAME_MEANING)
  private String nameMeaning;

  public static final String SERIALIZED_NAME_NAME_TRANSLATION = "name_translation";
  @SerializedName(SERIALIZED_NAME_NAME_TRANSLATION)
  private String nameTranslation;

  public static final String SERIALIZED_NAME_NAME_TRANSLITERATED = "name_transliterated";
  @SerializedName(SERIALIZED_NAME_NAME_TRANSLITERATED)
  private String nameTransliterated;

  public static final String SERIALIZED_NAME_VERSES_COUNT = "verses_count";
  @SerializedName(SERIALIZED_NAME_VERSES_COUNT)
  private Integer versesCount;

  public ChapterSchema() {
  }

  public ChapterSchema chapterNumber(Integer chapterNumber) {
    this.chapterNumber = chapterNumber;
    return this;
  }

  /**
   * Get chapterNumber
   * @return chapterNumber
   */
  @javax.annotation.Nullable
  public Integer getChapterNumber() {
    return chapterNumber;
  }

  public void setChapterNumber(Integer chapterNumber) {
    this.chapterNumber = chapterNumber;
  }


  public ChapterSchema chapterSummary(String chapterSummary) {
    this.chapterSummary = chapterSummary;
    return this;
  }

  /**
   * Get chapterSummary
   * @return chapterSummary
   */
  @javax.annotation.Nullable
  public String getChapterSummary() {
    return chapterSummary;
  }

  public void setChapterSummary(String chapterSummary) {
    this.chapterSummary = chapterSummary;
  }


  public ChapterSchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ChapterSchema nameMeaning(String nameMeaning) {
    this.nameMeaning = nameMeaning;
    return this;
  }

  /**
   * Get nameMeaning
   * @return nameMeaning
   */
  @javax.annotation.Nullable
  public String getNameMeaning() {
    return nameMeaning;
  }

  public void setNameMeaning(String nameMeaning) {
    this.nameMeaning = nameMeaning;
  }


  public ChapterSchema nameTranslation(String nameTranslation) {
    this.nameTranslation = nameTranslation;
    return this;
  }

  /**
   * Get nameTranslation
   * @return nameTranslation
   */
  @javax.annotation.Nullable
  public String getNameTranslation() {
    return nameTranslation;
  }

  public void setNameTranslation(String nameTranslation) {
    this.nameTranslation = nameTranslation;
  }


  public ChapterSchema nameTransliterated(String nameTransliterated) {
    this.nameTransliterated = nameTransliterated;
    return this;
  }

  /**
   * Get nameTransliterated
   * @return nameTransliterated
   */
  @javax.annotation.Nullable
  public String getNameTransliterated() {
    return nameTransliterated;
  }

  public void setNameTransliterated(String nameTransliterated) {
    this.nameTransliterated = nameTransliterated;
  }


  public ChapterSchema versesCount(Integer versesCount) {
    this.versesCount = versesCount;
    return this;
  }

  /**
   * Get versesCount
   * @return versesCount
   */
  @javax.annotation.Nullable
  public Integer getVersesCount() {
    return versesCount;
  }

  public void setVersesCount(Integer versesCount) {
    this.versesCount = versesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChapterSchema chapterSchema = (ChapterSchema) o;
    return Objects.equals(this.chapterNumber, chapterSchema.chapterNumber) &&
        Objects.equals(this.chapterSummary, chapterSchema.chapterSummary) &&
        Objects.equals(this.name, chapterSchema.name) &&
        Objects.equals(this.nameMeaning, chapterSchema.nameMeaning) &&
        Objects.equals(this.nameTranslation, chapterSchema.nameTranslation) &&
        Objects.equals(this.nameTransliterated, chapterSchema.nameTransliterated) &&
        Objects.equals(this.versesCount, chapterSchema.versesCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chapterNumber, chapterSummary, name, nameMeaning, nameTranslation, nameTransliterated, versesCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChapterSchema {\n");
    sb.append("    chapterNumber: ").append(toIndentedString(chapterNumber)).append("\n");
    sb.append("    chapterSummary: ").append(toIndentedString(chapterSummary)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameMeaning: ").append(toIndentedString(nameMeaning)).append("\n");
    sb.append("    nameTranslation: ").append(toIndentedString(nameTranslation)).append("\n");
    sb.append("    nameTransliterated: ").append(toIndentedString(nameTransliterated)).append("\n");
    sb.append("    versesCount: ").append(toIndentedString(versesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chapter_number");
    openapiFields.add("chapter_summary");
    openapiFields.add("name");
    openapiFields.add("name_meaning");
    openapiFields.add("name_translation");
    openapiFields.add("name_transliterated");
    openapiFields.add("verses_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChapterSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChapterSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChapterSchema is not found in the empty JSON string", ChapterSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChapterSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChapterSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chapter_summary") != null && !jsonObj.get("chapter_summary").isJsonNull()) && !jsonObj.get("chapter_summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chapter_summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chapter_summary").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_meaning") != null && !jsonObj.get("name_meaning").isJsonNull()) && !jsonObj.get("name_meaning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_meaning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_meaning").toString()));
      }
      if ((jsonObj.get("name_translation") != null && !jsonObj.get("name_translation").isJsonNull()) && !jsonObj.get("name_translation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_translation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_translation").toString()));
      }
      if ((jsonObj.get("name_transliterated") != null && !jsonObj.get("name_transliterated").isJsonNull()) && !jsonObj.get("name_transliterated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_transliterated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_transliterated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChapterSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChapterSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChapterSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChapterSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ChapterSchema>() {
           @Override
           public void write(JsonWriter out, ChapterSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChapterSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChapterSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChapterSchema
   * @throws IOException if the JSON string is invalid with respect to ChapterSchema
   */
  public static ChapterSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChapterSchema.class);
  }

  /**
   * Convert an instance of ChapterSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

