/**
 * Bhagavad Gita API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerseSchema::OAIVerseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerseSchema::OAIVerseSchema() {
    this->initializeModel();
}

OAIVerseSchema::~OAIVerseSchema() {}

void OAIVerseSchema::initializeModel() {

    m_meaning_isSet = false;
    m_meaning_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_transliteration_isSet = false;
    m_transliteration_isValid = false;

    m_verse_number_isSet = false;
    m_verse_number_isValid = false;

    m_word_meanings_isSet = false;
    m_word_meanings_isValid = false;
}

void OAIVerseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerseSchema::fromJsonObject(QJsonObject json) {

    m_meaning_isValid = ::OpenAPI::fromJsonValue(m_meaning, json[QString("meaning")]);
    m_meaning_isSet = !json[QString("meaning")].isNull() && m_meaning_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_transliteration_isValid = ::OpenAPI::fromJsonValue(m_transliteration, json[QString("transliteration")]);
    m_transliteration_isSet = !json[QString("transliteration")].isNull() && m_transliteration_isValid;

    m_verse_number_isValid = ::OpenAPI::fromJsonValue(m_verse_number, json[QString("verse_number")]);
    m_verse_number_isSet = !json[QString("verse_number")].isNull() && m_verse_number_isValid;

    m_word_meanings_isValid = ::OpenAPI::fromJsonValue(m_word_meanings, json[QString("word_meanings")]);
    m_word_meanings_isSet = !json[QString("word_meanings")].isNull() && m_word_meanings_isValid;
}

QString OAIVerseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_meaning_isSet) {
        obj.insert(QString("meaning"), ::OpenAPI::toJsonValue(m_meaning));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_transliteration_isSet) {
        obj.insert(QString("transliteration"), ::OpenAPI::toJsonValue(m_transliteration));
    }
    if (m_verse_number_isSet) {
        obj.insert(QString("verse_number"), ::OpenAPI::toJsonValue(m_verse_number));
    }
    if (m_word_meanings_isSet) {
        obj.insert(QString("word_meanings"), ::OpenAPI::toJsonValue(m_word_meanings));
    }
    return obj;
}

QString OAIVerseSchema::getMeaning() const {
    return m_meaning;
}
void OAIVerseSchema::setMeaning(const QString &meaning) {
    m_meaning = meaning;
    m_meaning_isSet = true;
}

bool OAIVerseSchema::is_meaning_Set() const{
    return m_meaning_isSet;
}

bool OAIVerseSchema::is_meaning_Valid() const{
    return m_meaning_isValid;
}

QString OAIVerseSchema::getText() const {
    return m_text;
}
void OAIVerseSchema::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIVerseSchema::is_text_Set() const{
    return m_text_isSet;
}

bool OAIVerseSchema::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIVerseSchema::getTransliteration() const {
    return m_transliteration;
}
void OAIVerseSchema::setTransliteration(const QString &transliteration) {
    m_transliteration = transliteration;
    m_transliteration_isSet = true;
}

bool OAIVerseSchema::is_transliteration_Set() const{
    return m_transliteration_isSet;
}

bool OAIVerseSchema::is_transliteration_Valid() const{
    return m_transliteration_isValid;
}

QString OAIVerseSchema::getVerseNumber() const {
    return m_verse_number;
}
void OAIVerseSchema::setVerseNumber(const QString &verse_number) {
    m_verse_number = verse_number;
    m_verse_number_isSet = true;
}

bool OAIVerseSchema::is_verse_number_Set() const{
    return m_verse_number_isSet;
}

bool OAIVerseSchema::is_verse_number_Valid() const{
    return m_verse_number_isValid;
}

QString OAIVerseSchema::getWordMeanings() const {
    return m_word_meanings;
}
void OAIVerseSchema::setWordMeanings(const QString &word_meanings) {
    m_word_meanings = word_meanings;
    m_word_meanings_isSet = true;
}

bool OAIVerseSchema::is_word_meanings_Set() const{
    return m_word_meanings_isSet;
}

bool OAIVerseSchema::is_word_meanings_Valid() const{
    return m_word_meanings_isValid;
}

bool OAIVerseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meaning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transliteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verse_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_meanings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
