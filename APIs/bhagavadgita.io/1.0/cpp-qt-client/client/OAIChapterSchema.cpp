/**
 * Bhagavad Gita API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChapterSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChapterSchema::OAIChapterSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChapterSchema::OAIChapterSchema() {
    this->initializeModel();
}

OAIChapterSchema::~OAIChapterSchema() {}

void OAIChapterSchema::initializeModel() {

    m_chapter_number_isSet = false;
    m_chapter_number_isValid = false;

    m_chapter_summary_isSet = false;
    m_chapter_summary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_meaning_isSet = false;
    m_name_meaning_isValid = false;

    m_name_translation_isSet = false;
    m_name_translation_isValid = false;

    m_name_transliterated_isSet = false;
    m_name_transliterated_isValid = false;

    m_verses_count_isSet = false;
    m_verses_count_isValid = false;
}

void OAIChapterSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChapterSchema::fromJsonObject(QJsonObject json) {

    m_chapter_number_isValid = ::OpenAPI::fromJsonValue(m_chapter_number, json[QString("chapter_number")]);
    m_chapter_number_isSet = !json[QString("chapter_number")].isNull() && m_chapter_number_isValid;

    m_chapter_summary_isValid = ::OpenAPI::fromJsonValue(m_chapter_summary, json[QString("chapter_summary")]);
    m_chapter_summary_isSet = !json[QString("chapter_summary")].isNull() && m_chapter_summary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_meaning_isValid = ::OpenAPI::fromJsonValue(m_name_meaning, json[QString("name_meaning")]);
    m_name_meaning_isSet = !json[QString("name_meaning")].isNull() && m_name_meaning_isValid;

    m_name_translation_isValid = ::OpenAPI::fromJsonValue(m_name_translation, json[QString("name_translation")]);
    m_name_translation_isSet = !json[QString("name_translation")].isNull() && m_name_translation_isValid;

    m_name_transliterated_isValid = ::OpenAPI::fromJsonValue(m_name_transliterated, json[QString("name_transliterated")]);
    m_name_transliterated_isSet = !json[QString("name_transliterated")].isNull() && m_name_transliterated_isValid;

    m_verses_count_isValid = ::OpenAPI::fromJsonValue(m_verses_count, json[QString("verses_count")]);
    m_verses_count_isSet = !json[QString("verses_count")].isNull() && m_verses_count_isValid;
}

QString OAIChapterSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChapterSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_chapter_number_isSet) {
        obj.insert(QString("chapter_number"), ::OpenAPI::toJsonValue(m_chapter_number));
    }
    if (m_chapter_summary_isSet) {
        obj.insert(QString("chapter_summary"), ::OpenAPI::toJsonValue(m_chapter_summary));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_meaning_isSet) {
        obj.insert(QString("name_meaning"), ::OpenAPI::toJsonValue(m_name_meaning));
    }
    if (m_name_translation_isSet) {
        obj.insert(QString("name_translation"), ::OpenAPI::toJsonValue(m_name_translation));
    }
    if (m_name_transliterated_isSet) {
        obj.insert(QString("name_transliterated"), ::OpenAPI::toJsonValue(m_name_transliterated));
    }
    if (m_verses_count_isSet) {
        obj.insert(QString("verses_count"), ::OpenAPI::toJsonValue(m_verses_count));
    }
    return obj;
}

qint32 OAIChapterSchema::getChapterNumber() const {
    return m_chapter_number;
}
void OAIChapterSchema::setChapterNumber(const qint32 &chapter_number) {
    m_chapter_number = chapter_number;
    m_chapter_number_isSet = true;
}

bool OAIChapterSchema::is_chapter_number_Set() const{
    return m_chapter_number_isSet;
}

bool OAIChapterSchema::is_chapter_number_Valid() const{
    return m_chapter_number_isValid;
}

QString OAIChapterSchema::getChapterSummary() const {
    return m_chapter_summary;
}
void OAIChapterSchema::setChapterSummary(const QString &chapter_summary) {
    m_chapter_summary = chapter_summary;
    m_chapter_summary_isSet = true;
}

bool OAIChapterSchema::is_chapter_summary_Set() const{
    return m_chapter_summary_isSet;
}

bool OAIChapterSchema::is_chapter_summary_Valid() const{
    return m_chapter_summary_isValid;
}

QString OAIChapterSchema::getName() const {
    return m_name;
}
void OAIChapterSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChapterSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChapterSchema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIChapterSchema::getNameMeaning() const {
    return m_name_meaning;
}
void OAIChapterSchema::setNameMeaning(const QString &name_meaning) {
    m_name_meaning = name_meaning;
    m_name_meaning_isSet = true;
}

bool OAIChapterSchema::is_name_meaning_Set() const{
    return m_name_meaning_isSet;
}

bool OAIChapterSchema::is_name_meaning_Valid() const{
    return m_name_meaning_isValid;
}

QString OAIChapterSchema::getNameTranslation() const {
    return m_name_translation;
}
void OAIChapterSchema::setNameTranslation(const QString &name_translation) {
    m_name_translation = name_translation;
    m_name_translation_isSet = true;
}

bool OAIChapterSchema::is_name_translation_Set() const{
    return m_name_translation_isSet;
}

bool OAIChapterSchema::is_name_translation_Valid() const{
    return m_name_translation_isValid;
}

QString OAIChapterSchema::getNameTransliterated() const {
    return m_name_transliterated;
}
void OAIChapterSchema::setNameTransliterated(const QString &name_transliterated) {
    m_name_transliterated = name_transliterated;
    m_name_transliterated_isSet = true;
}

bool OAIChapterSchema::is_name_transliterated_Set() const{
    return m_name_transliterated_isSet;
}

bool OAIChapterSchema::is_name_transliterated_Valid() const{
    return m_name_transliterated_isValid;
}

qint32 OAIChapterSchema::getVersesCount() const {
    return m_verses_count;
}
void OAIChapterSchema::setVersesCount(const qint32 &verses_count) {
    m_verses_count = verses_count;
    m_verses_count_isSet = true;
}

bool OAIChapterSchema::is_verses_count_Set() const{
    return m_verses_count_isSet;
}

bool OAIChapterSchema::is_verses_count_Valid() const{
    return m_verses_count_isValid;
}

bool OAIChapterSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chapter_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_meaning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_transliterated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verses_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChapterSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
