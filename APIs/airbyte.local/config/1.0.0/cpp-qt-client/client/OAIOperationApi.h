/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOperationApi_H
#define OAI_OAIOperationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckOperationRead.h"
#include "OAIConnectionIdRequestBody.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIOperationCreate.h"
#include "OAIOperationIdRequestBody.h"
#include "OAIOperationRead.h"
#include "OAIOperationReadList.h"
#include "OAIOperationUpdate.h"
#include "OAIOperatorConfiguration.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOperationApi : public QObject {
    Q_OBJECT

public:
    OAIOperationApi(const int timeOut = 0);
    ~OAIOperationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_operator_configuration OAIOperatorConfiguration [required]
    */
    virtual void checkOperation(const OAIOperatorConfiguration &oai_operator_configuration);

    /**
    * @param[in]  oai_operation_create OAIOperationCreate [required]
    */
    virtual void createOperation(const OAIOperationCreate &oai_operation_create);

    /**
    * @param[in]  oai_operation_id_request_body OAIOperationIdRequestBody [required]
    */
    virtual void deleteOperation(const OAIOperationIdRequestBody &oai_operation_id_request_body);

    /**
    * @param[in]  oai_operation_id_request_body OAIOperationIdRequestBody [required]
    */
    virtual void getOperation(const OAIOperationIdRequestBody &oai_operation_id_request_body);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void listOperationsForConnection(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_operation_update OAIOperationUpdate [required]
    */
    virtual void updateOperation(const OAIOperationUpdate &oai_operation_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkOperationCallback(OAIHttpRequestWorker *worker);
    void createOperationCallback(OAIHttpRequestWorker *worker);
    void deleteOperationCallback(OAIHttpRequestWorker *worker);
    void getOperationCallback(OAIHttpRequestWorker *worker);
    void listOperationsForConnectionCallback(OAIHttpRequestWorker *worker);
    void updateOperationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkOperationSignal(OAICheckOperationRead summary);
    void createOperationSignal(OAIOperationRead summary);
    void deleteOperationSignal();
    void getOperationSignal(OAIOperationRead summary);
    void listOperationsForConnectionSignal(OAIOperationReadList summary);
    void updateOperationSignal(OAIOperationRead summary);


    void checkOperationSignalFull(OAIHttpRequestWorker *worker, OAICheckOperationRead summary);
    void createOperationSignalFull(OAIHttpRequestWorker *worker, OAIOperationRead summary);
    void deleteOperationSignalFull(OAIHttpRequestWorker *worker);
    void getOperationSignalFull(OAIHttpRequestWorker *worker, OAIOperationRead summary);
    void listOperationsForConnectionSignalFull(OAIHttpRequestWorker *worker, OAIOperationReadList summary);
    void updateOperationSignalFull(OAIHttpRequestWorker *worker, OAIOperationRead summary);

    Q_DECL_DEPRECATED_X("Use checkOperationSignalError() instead")
    void checkOperationSignalE(OAICheckOperationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkOperationSignalError(OAICheckOperationRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOperationSignalError() instead")
    void createOperationSignalE(OAIOperationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOperationSignalError(OAIOperationRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOperationSignalError() instead")
    void deleteOperationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOperationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationSignalError() instead")
    void getOperationSignalE(OAIOperationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationSignalError(OAIOperationRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsForConnectionSignalError() instead")
    void listOperationsForConnectionSignalE(OAIOperationReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsForConnectionSignalError(OAIOperationReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOperationSignalError() instead")
    void updateOperationSignalE(OAIOperationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOperationSignalError(OAIOperationRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkOperationSignalErrorFull() instead")
    void checkOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOperationSignalErrorFull() instead")
    void createOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOperationSignalErrorFull() instead")
    void deleteOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationSignalErrorFull() instead")
    void getOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsForConnectionSignalErrorFull() instead")
    void listOperationsForConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsForConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOperationSignalErrorFull() instead")
    void updateOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
