/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceRead::OAIWorkspaceRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceRead::OAIWorkspaceRead() {
    this->initializeModel();
}

OAIWorkspaceRead::~OAIWorkspaceRead() {}

void OAIWorkspaceRead::initializeModel() {

    m_anonymous_data_collection_isSet = false;
    m_anonymous_data_collection_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_default_geography_isSet = false;
    m_default_geography_isValid = false;

    m_display_setup_wizard_isSet = false;
    m_display_setup_wizard_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_feedback_done_isSet = false;
    m_feedback_done_isValid = false;

    m_first_completed_sync_isSet = false;
    m_first_completed_sync_isValid = false;

    m_initial_setup_complete_isSet = false;
    m_initial_setup_complete_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_security_updates_isSet = false;
    m_security_updates_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_webhook_configs_isSet = false;
    m_webhook_configs_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIWorkspaceRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceRead::fromJsonObject(QJsonObject json) {

    m_anonymous_data_collection_isValid = ::OpenAPI::fromJsonValue(m_anonymous_data_collection, json[QString("anonymousDataCollection")]);
    m_anonymous_data_collection_isSet = !json[QString("anonymousDataCollection")].isNull() && m_anonymous_data_collection_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_default_geography_isValid = ::OpenAPI::fromJsonValue(m_default_geography, json[QString("defaultGeography")]);
    m_default_geography_isSet = !json[QString("defaultGeography")].isNull() && m_default_geography_isValid;

    m_display_setup_wizard_isValid = ::OpenAPI::fromJsonValue(m_display_setup_wizard, json[QString("displaySetupWizard")]);
    m_display_setup_wizard_isSet = !json[QString("displaySetupWizard")].isNull() && m_display_setup_wizard_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_feedback_done_isValid = ::OpenAPI::fromJsonValue(m_feedback_done, json[QString("feedbackDone")]);
    m_feedback_done_isSet = !json[QString("feedbackDone")].isNull() && m_feedback_done_isValid;

    m_first_completed_sync_isValid = ::OpenAPI::fromJsonValue(m_first_completed_sync, json[QString("firstCompletedSync")]);
    m_first_completed_sync_isSet = !json[QString("firstCompletedSync")].isNull() && m_first_completed_sync_isValid;

    m_initial_setup_complete_isValid = ::OpenAPI::fromJsonValue(m_initial_setup_complete, json[QString("initialSetupComplete")]);
    m_initial_setup_complete_isSet = !json[QString("initialSetupComplete")].isNull() && m_initial_setup_complete_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_news_isValid = ::OpenAPI::fromJsonValue(m_news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_security_updates_isValid = ::OpenAPI::fromJsonValue(m_security_updates, json[QString("securityUpdates")]);
    m_security_updates_isSet = !json[QString("securityUpdates")].isNull() && m_security_updates_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_webhook_configs_isValid = ::OpenAPI::fromJsonValue(m_webhook_configs, json[QString("webhookConfigs")]);
    m_webhook_configs_isSet = !json[QString("webhookConfigs")].isNull() && m_webhook_configs_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIWorkspaceRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceRead::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_data_collection_isSet) {
        obj.insert(QString("anonymousDataCollection"), ::OpenAPI::toJsonValue(m_anonymous_data_collection));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_default_geography.isSet()) {
        obj.insert(QString("defaultGeography"), ::OpenAPI::toJsonValue(m_default_geography));
    }
    if (m_display_setup_wizard_isSet) {
        obj.insert(QString("displaySetupWizard"), ::OpenAPI::toJsonValue(m_display_setup_wizard));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_feedback_done_isSet) {
        obj.insert(QString("feedbackDone"), ::OpenAPI::toJsonValue(m_feedback_done));
    }
    if (m_first_completed_sync_isSet) {
        obj.insert(QString("firstCompletedSync"), ::OpenAPI::toJsonValue(m_first_completed_sync));
    }
    if (m_initial_setup_complete_isSet) {
        obj.insert(QString("initialSetupComplete"), ::OpenAPI::toJsonValue(m_initial_setup_complete));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_news_isSet) {
        obj.insert(QString("news"), ::OpenAPI::toJsonValue(m_news));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_security_updates_isSet) {
        obj.insert(QString("securityUpdates"), ::OpenAPI::toJsonValue(m_security_updates));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_webhook_configs.size() > 0) {
        obj.insert(QString("webhookConfigs"), ::OpenAPI::toJsonValue(m_webhook_configs));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

bool OAIWorkspaceRead::isAnonymousDataCollection() const {
    return m_anonymous_data_collection;
}
void OAIWorkspaceRead::setAnonymousDataCollection(const bool &anonymous_data_collection) {
    m_anonymous_data_collection = anonymous_data_collection;
    m_anonymous_data_collection_isSet = true;
}

bool OAIWorkspaceRead::is_anonymous_data_collection_Set() const{
    return m_anonymous_data_collection_isSet;
}

bool OAIWorkspaceRead::is_anonymous_data_collection_Valid() const{
    return m_anonymous_data_collection_isValid;
}

QString OAIWorkspaceRead::getCustomerId() const {
    return m_customer_id;
}
void OAIWorkspaceRead::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIWorkspaceRead::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIWorkspaceRead::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIGeography OAIWorkspaceRead::getDefaultGeography() const {
    return m_default_geography;
}
void OAIWorkspaceRead::setDefaultGeography(const OAIGeography &default_geography) {
    m_default_geography = default_geography;
    m_default_geography_isSet = true;
}

bool OAIWorkspaceRead::is_default_geography_Set() const{
    return m_default_geography_isSet;
}

bool OAIWorkspaceRead::is_default_geography_Valid() const{
    return m_default_geography_isValid;
}

bool OAIWorkspaceRead::isDisplaySetupWizard() const {
    return m_display_setup_wizard;
}
void OAIWorkspaceRead::setDisplaySetupWizard(const bool &display_setup_wizard) {
    m_display_setup_wizard = display_setup_wizard;
    m_display_setup_wizard_isSet = true;
}

bool OAIWorkspaceRead::is_display_setup_wizard_Set() const{
    return m_display_setup_wizard_isSet;
}

bool OAIWorkspaceRead::is_display_setup_wizard_Valid() const{
    return m_display_setup_wizard_isValid;
}

QString OAIWorkspaceRead::getEmail() const {
    return m_email;
}
void OAIWorkspaceRead::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIWorkspaceRead::is_email_Set() const{
    return m_email_isSet;
}

bool OAIWorkspaceRead::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIWorkspaceRead::isFeedbackDone() const {
    return m_feedback_done;
}
void OAIWorkspaceRead::setFeedbackDone(const bool &feedback_done) {
    m_feedback_done = feedback_done;
    m_feedback_done_isSet = true;
}

bool OAIWorkspaceRead::is_feedback_done_Set() const{
    return m_feedback_done_isSet;
}

bool OAIWorkspaceRead::is_feedback_done_Valid() const{
    return m_feedback_done_isValid;
}

bool OAIWorkspaceRead::isFirstCompletedSync() const {
    return m_first_completed_sync;
}
void OAIWorkspaceRead::setFirstCompletedSync(const bool &first_completed_sync) {
    m_first_completed_sync = first_completed_sync;
    m_first_completed_sync_isSet = true;
}

bool OAIWorkspaceRead::is_first_completed_sync_Set() const{
    return m_first_completed_sync_isSet;
}

bool OAIWorkspaceRead::is_first_completed_sync_Valid() const{
    return m_first_completed_sync_isValid;
}

bool OAIWorkspaceRead::isInitialSetupComplete() const {
    return m_initial_setup_complete;
}
void OAIWorkspaceRead::setInitialSetupComplete(const bool &initial_setup_complete) {
    m_initial_setup_complete = initial_setup_complete;
    m_initial_setup_complete_isSet = true;
}

bool OAIWorkspaceRead::is_initial_setup_complete_Set() const{
    return m_initial_setup_complete_isSet;
}

bool OAIWorkspaceRead::is_initial_setup_complete_Valid() const{
    return m_initial_setup_complete_isValid;
}

QString OAIWorkspaceRead::getName() const {
    return m_name;
}
void OAIWorkspaceRead::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkspaceRead::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkspaceRead::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWorkspaceRead::isNews() const {
    return m_news;
}
void OAIWorkspaceRead::setNews(const bool &news) {
    m_news = news;
    m_news_isSet = true;
}

bool OAIWorkspaceRead::is_news_Set() const{
    return m_news_isSet;
}

bool OAIWorkspaceRead::is_news_Valid() const{
    return m_news_isValid;
}

QList<OAINotification> OAIWorkspaceRead::getNotifications() const {
    return m_notifications;
}
void OAIWorkspaceRead::setNotifications(const QList<OAINotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIWorkspaceRead::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIWorkspaceRead::is_notifications_Valid() const{
    return m_notifications_isValid;
}

bool OAIWorkspaceRead::isSecurityUpdates() const {
    return m_security_updates;
}
void OAIWorkspaceRead::setSecurityUpdates(const bool &security_updates) {
    m_security_updates = security_updates;
    m_security_updates_isSet = true;
}

bool OAIWorkspaceRead::is_security_updates_Set() const{
    return m_security_updates_isSet;
}

bool OAIWorkspaceRead::is_security_updates_Valid() const{
    return m_security_updates_isValid;
}

QString OAIWorkspaceRead::getSlug() const {
    return m_slug;
}
void OAIWorkspaceRead::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIWorkspaceRead::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIWorkspaceRead::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<OAIWebhookConfigRead> OAIWorkspaceRead::getWebhookConfigs() const {
    return m_webhook_configs;
}
void OAIWorkspaceRead::setWebhookConfigs(const QList<OAIWebhookConfigRead> &webhook_configs) {
    m_webhook_configs = webhook_configs;
    m_webhook_configs_isSet = true;
}

bool OAIWorkspaceRead::is_webhook_configs_Set() const{
    return m_webhook_configs_isSet;
}

bool OAIWorkspaceRead::is_webhook_configs_Valid() const{
    return m_webhook_configs_isValid;
}

QString OAIWorkspaceRead::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIWorkspaceRead::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIWorkspaceRead::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIWorkspaceRead::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIWorkspaceRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_data_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_geography.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_setup_wizard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_completed_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_setup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_id_isValid && m_initial_setup_complete_isValid && m_name_isValid && m_slug_isValid && m_workspace_id_isValid && true;
}

} // namespace OpenAPI
