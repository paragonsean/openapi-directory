/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionApi_H
#define OAI_OAIConnectionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionCreate.h"
#include "OAIConnectionIdRequestBody.h"
#include "OAIConnectionRead.h"
#include "OAIConnectionReadList.h"
#include "OAIConnectionSearch.h"
#include "OAIConnectionUpdate.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAIJobInfoRead.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIWorkspaceIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionApi(const int timeOut = 0);
    ~OAIConnectionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_connection_create OAIConnectionCreate [required]
    */
    virtual void createConnection(const OAIConnectionCreate &oai_connection_create);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void deleteConnection(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void getConnection(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [required]
    */
    virtual void listAllConnectionsForWorkspace(const OAIWorkspaceIdRequestBody &oai_workspace_id_request_body);

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [required]
    */
    virtual void listConnectionsForWorkspace(const OAIWorkspaceIdRequestBody &oai_workspace_id_request_body);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void resetConnection(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_connection_search OAIConnectionSearch [required]
    */
    virtual void searchConnections(const OAIConnectionSearch &oai_connection_search);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void syncConnection(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_connection_update OAIConnectionUpdate [required]
    */
    virtual void updateConnection(const OAIConnectionUpdate &oai_connection_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConnectionCallback(OAIHttpRequestWorker *worker);
    void deleteConnectionCallback(OAIHttpRequestWorker *worker);
    void getConnectionCallback(OAIHttpRequestWorker *worker);
    void listAllConnectionsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void listConnectionsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void resetConnectionCallback(OAIHttpRequestWorker *worker);
    void searchConnectionsCallback(OAIHttpRequestWorker *worker);
    void syncConnectionCallback(OAIHttpRequestWorker *worker);
    void updateConnectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConnectionSignal(OAIConnectionRead summary);
    void deleteConnectionSignal();
    void getConnectionSignal(OAIConnectionRead summary);
    void listAllConnectionsForWorkspaceSignal(OAIConnectionReadList summary);
    void listConnectionsForWorkspaceSignal(OAIConnectionReadList summary);
    void resetConnectionSignal(OAIJobInfoRead summary);
    void searchConnectionsSignal(OAIConnectionReadList summary);
    void syncConnectionSignal(OAIJobInfoRead summary);
    void updateConnectionSignal(OAIConnectionRead summary);


    void createConnectionSignalFull(OAIHttpRequestWorker *worker, OAIConnectionRead summary);
    void deleteConnectionSignalFull(OAIHttpRequestWorker *worker);
    void getConnectionSignalFull(OAIHttpRequestWorker *worker, OAIConnectionRead summary);
    void listAllConnectionsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIConnectionReadList summary);
    void listConnectionsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIConnectionReadList summary);
    void resetConnectionSignalFull(OAIHttpRequestWorker *worker, OAIJobInfoRead summary);
    void searchConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionReadList summary);
    void syncConnectionSignalFull(OAIHttpRequestWorker *worker, OAIJobInfoRead summary);
    void updateConnectionSignalFull(OAIHttpRequestWorker *worker, OAIConnectionRead summary);

    Q_DECL_DEPRECATED_X("Use createConnectionSignalError() instead")
    void createConnectionSignalE(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionSignalError(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionSignalError() instead")
    void deleteConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionSignalError() instead")
    void getConnectionSignalE(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionSignalError(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllConnectionsForWorkspaceSignalError() instead")
    void listAllConnectionsForWorkspaceSignalE(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllConnectionsForWorkspaceSignalError(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionsForWorkspaceSignalError() instead")
    void listConnectionsForWorkspaceSignalE(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionsForWorkspaceSignalError(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetConnectionSignalError() instead")
    void resetConnectionSignalE(OAIJobInfoRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetConnectionSignalError(OAIJobInfoRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchConnectionsSignalError() instead")
    void searchConnectionsSignalE(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchConnectionsSignalError(OAIConnectionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncConnectionSignalError() instead")
    void syncConnectionSignalE(OAIJobInfoRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncConnectionSignalError(OAIJobInfoRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionSignalError() instead")
    void updateConnectionSignalE(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionSignalError(OAIConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConnectionSignalErrorFull() instead")
    void createConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionSignalErrorFull() instead")
    void deleteConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionSignalErrorFull() instead")
    void getConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllConnectionsForWorkspaceSignalErrorFull() instead")
    void listAllConnectionsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllConnectionsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionsForWorkspaceSignalErrorFull() instead")
    void listConnectionsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetConnectionSignalErrorFull() instead")
    void resetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchConnectionsSignalErrorFull() instead")
    void searchConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncConnectionSignalErrorFull() instead")
    void syncConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionSignalErrorFull() instead")
    void updateConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
