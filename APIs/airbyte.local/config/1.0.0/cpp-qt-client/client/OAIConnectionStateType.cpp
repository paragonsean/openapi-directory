/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionStateType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionStateType::OAIConnectionStateType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionStateType::OAIConnectionStateType() {
    this->initializeModel();
}

OAIConnectionStateType::~OAIConnectionStateType() {}

void OAIConnectionStateType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConnectionStateType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConnectionStateType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("global", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionStateType::GLOBAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stream", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionStateType::STREAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("legacy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionStateType::LEGACY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("not_set", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionStateType::NOT_SET;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConnectionStateType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConnectionStateType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConnectionStateType::GLOBAL:
            val = "global";
            break;
        case eOAIConnectionStateType::STREAM:
            val = "stream";
            break;
        case eOAIConnectionStateType::LEGACY:
            val = "legacy";
            break;
        case eOAIConnectionStateType::NOT_SET:
            val = "not_set";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConnectionStateType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConnectionStateType::eOAIConnectionStateType OAIConnectionStateType::getValue() const {
    return m_value;
}

void OAIConnectionStateType::setValue(const OAIConnectionStateType::eOAIConnectionStateType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConnectionStateType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConnectionStateType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
