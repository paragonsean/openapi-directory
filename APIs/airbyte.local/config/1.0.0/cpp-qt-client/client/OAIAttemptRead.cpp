/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttemptRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttemptRead::OAIAttemptRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttemptRead::OAIAttemptRead() {
    this->initializeModel();
}

OAIAttemptRead::~OAIAttemptRead() {}

void OAIAttemptRead::initializeModel() {

    m_bytes_synced_isSet = false;
    m_bytes_synced_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_failure_summary_isSet = false;
    m_failure_summary_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_records_synced_isSet = false;
    m_records_synced_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stream_stats_isSet = false;
    m_stream_stats_isValid = false;

    m_total_stats_isSet = false;
    m_total_stats_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIAttemptRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttemptRead::fromJsonObject(QJsonObject json) {

    m_bytes_synced_isValid = ::OpenAPI::fromJsonValue(m_bytes_synced, json[QString("bytesSynced")]);
    m_bytes_synced_isSet = !json[QString("bytesSynced")].isNull() && m_bytes_synced_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_failure_summary_isValid = ::OpenAPI::fromJsonValue(m_failure_summary, json[QString("failureSummary")]);
    m_failure_summary_isSet = !json[QString("failureSummary")].isNull() && m_failure_summary_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_records_synced_isValid = ::OpenAPI::fromJsonValue(m_records_synced, json[QString("recordsSynced")]);
    m_records_synced_isSet = !json[QString("recordsSynced")].isNull() && m_records_synced_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stream_stats_isValid = ::OpenAPI::fromJsonValue(m_stream_stats, json[QString("streamStats")]);
    m_stream_stats_isSet = !json[QString("streamStats")].isNull() && m_stream_stats_isValid;

    m_total_stats_isValid = ::OpenAPI::fromJsonValue(m_total_stats, json[QString("totalStats")]);
    m_total_stats_isSet = !json[QString("totalStats")].isNull() && m_total_stats_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIAttemptRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttemptRead::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_synced_isSet) {
        obj.insert(QString("bytesSynced"), ::OpenAPI::toJsonValue(m_bytes_synced));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_failure_summary.isSet()) {
        obj.insert(QString("failureSummary"), ::OpenAPI::toJsonValue(m_failure_summary));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_records_synced_isSet) {
        obj.insert(QString("recordsSynced"), ::OpenAPI::toJsonValue(m_records_synced));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stream_stats.size() > 0) {
        obj.insert(QString("streamStats"), ::OpenAPI::toJsonValue(m_stream_stats));
    }
    if (m_total_stats.isSet()) {
        obj.insert(QString("totalStats"), ::OpenAPI::toJsonValue(m_total_stats));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint64 OAIAttemptRead::getBytesSynced() const {
    return m_bytes_synced;
}
void OAIAttemptRead::setBytesSynced(const qint64 &bytes_synced) {
    m_bytes_synced = bytes_synced;
    m_bytes_synced_isSet = true;
}

bool OAIAttemptRead::is_bytes_synced_Set() const{
    return m_bytes_synced_isSet;
}

bool OAIAttemptRead::is_bytes_synced_Valid() const{
    return m_bytes_synced_isValid;
}

qint64 OAIAttemptRead::getCreatedAt() const {
    return m_created_at;
}
void OAIAttemptRead::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttemptRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttemptRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIAttemptRead::getEndedAt() const {
    return m_ended_at;
}
void OAIAttemptRead::setEndedAt(const qint64 &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIAttemptRead::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIAttemptRead::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

OAIAttemptFailureSummary OAIAttemptRead::getFailureSummary() const {
    return m_failure_summary;
}
void OAIAttemptRead::setFailureSummary(const OAIAttemptFailureSummary &failure_summary) {
    m_failure_summary = failure_summary;
    m_failure_summary_isSet = true;
}

bool OAIAttemptRead::is_failure_summary_Set() const{
    return m_failure_summary_isSet;
}

bool OAIAttemptRead::is_failure_summary_Valid() const{
    return m_failure_summary_isValid;
}

qint64 OAIAttemptRead::getId() const {
    return m_id;
}
void OAIAttemptRead::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttemptRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttemptRead::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIAttemptRead::getRecordsSynced() const {
    return m_records_synced;
}
void OAIAttemptRead::setRecordsSynced(const qint64 &records_synced) {
    m_records_synced = records_synced;
    m_records_synced_isSet = true;
}

bool OAIAttemptRead::is_records_synced_Set() const{
    return m_records_synced_isSet;
}

bool OAIAttemptRead::is_records_synced_Valid() const{
    return m_records_synced_isValid;
}

OAIAttemptStatus OAIAttemptRead::getStatus() const {
    return m_status;
}
void OAIAttemptRead::setStatus(const OAIAttemptStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAttemptRead::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAttemptRead::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIAttemptStreamStats> OAIAttemptRead::getStreamStats() const {
    return m_stream_stats;
}
void OAIAttemptRead::setStreamStats(const QList<OAIAttemptStreamStats> &stream_stats) {
    m_stream_stats = stream_stats;
    m_stream_stats_isSet = true;
}

bool OAIAttemptRead::is_stream_stats_Set() const{
    return m_stream_stats_isSet;
}

bool OAIAttemptRead::is_stream_stats_Valid() const{
    return m_stream_stats_isValid;
}

OAIAttemptStats OAIAttemptRead::getTotalStats() const {
    return m_total_stats;
}
void OAIAttemptRead::setTotalStats(const OAIAttemptStats &total_stats) {
    m_total_stats = total_stats;
    m_total_stats_isSet = true;
}

bool OAIAttemptRead::is_total_stats_Set() const{
    return m_total_stats_isSet;
}

bool OAIAttemptRead::is_total_stats_Valid() const{
    return m_total_stats_isValid;
}

qint64 OAIAttemptRead::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAttemptRead::setUpdatedAt(const qint64 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAttemptRead::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAttemptRead::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIAttemptRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_synced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_synced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttemptRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_status_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
