/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDestinationDefinitionCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDestinationDefinitionCreate::OAICustomDestinationDefinitionCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDestinationDefinitionCreate::OAICustomDestinationDefinitionCreate() {
    this->initializeModel();
}

OAICustomDestinationDefinitionCreate::~OAICustomDestinationDefinitionCreate() {}

void OAICustomDestinationDefinitionCreate::initializeModel() {

    m_destination_definition_isSet = false;
    m_destination_definition_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAICustomDestinationDefinitionCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDestinationDefinitionCreate::fromJsonObject(QJsonObject json) {

    m_destination_definition_isValid = ::OpenAPI::fromJsonValue(m_destination_definition, json[QString("destinationDefinition")]);
    m_destination_definition_isSet = !json[QString("destinationDefinition")].isNull() && m_destination_definition_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAICustomDestinationDefinitionCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDestinationDefinitionCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_definition.isSet()) {
        obj.insert(QString("destinationDefinition"), ::OpenAPI::toJsonValue(m_destination_definition));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

OAIDestinationDefinitionCreate OAICustomDestinationDefinitionCreate::getDestinationDefinition() const {
    return m_destination_definition;
}
void OAICustomDestinationDefinitionCreate::setDestinationDefinition(const OAIDestinationDefinitionCreate &destination_definition) {
    m_destination_definition = destination_definition;
    m_destination_definition_isSet = true;
}

bool OAICustomDestinationDefinitionCreate::is_destination_definition_Set() const{
    return m_destination_definition_isSet;
}

bool OAICustomDestinationDefinitionCreate::is_destination_definition_Valid() const{
    return m_destination_definition_isValid;
}

QString OAICustomDestinationDefinitionCreate::getWorkspaceId() const {
    return m_workspace_id;
}
void OAICustomDestinationDefinitionCreate::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAICustomDestinationDefinitionCreate::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAICustomDestinationDefinitionCreate::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAICustomDestinationDefinitionCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDestinationDefinitionCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_definition_isValid && m_workspace_id_isValid && true;
}

} // namespace OpenAPI
