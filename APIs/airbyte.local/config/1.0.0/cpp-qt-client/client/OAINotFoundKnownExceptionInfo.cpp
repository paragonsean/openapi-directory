/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotFoundKnownExceptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotFoundKnownExceptionInfo::OAINotFoundKnownExceptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotFoundKnownExceptionInfo::OAINotFoundKnownExceptionInfo() {
    this->initializeModel();
}

OAINotFoundKnownExceptionInfo::~OAINotFoundKnownExceptionInfo() {}

void OAINotFoundKnownExceptionInfo::initializeModel() {

    m_exception_class_name_isSet = false;
    m_exception_class_name_isValid = false;

    m_exception_stack_isSet = false;
    m_exception_stack_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_root_cause_exception_class_name_isSet = false;
    m_root_cause_exception_class_name_isValid = false;

    m_root_cause_exception_stack_isSet = false;
    m_root_cause_exception_stack_isValid = false;
}

void OAINotFoundKnownExceptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotFoundKnownExceptionInfo::fromJsonObject(QJsonObject json) {

    m_exception_class_name_isValid = ::OpenAPI::fromJsonValue(m_exception_class_name, json[QString("exceptionClassName")]);
    m_exception_class_name_isSet = !json[QString("exceptionClassName")].isNull() && m_exception_class_name_isValid;

    m_exception_stack_isValid = ::OpenAPI::fromJsonValue(m_exception_stack, json[QString("exceptionStack")]);
    m_exception_stack_isSet = !json[QString("exceptionStack")].isNull() && m_exception_stack_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_root_cause_exception_class_name_isValid = ::OpenAPI::fromJsonValue(m_root_cause_exception_class_name, json[QString("rootCauseExceptionClassName")]);
    m_root_cause_exception_class_name_isSet = !json[QString("rootCauseExceptionClassName")].isNull() && m_root_cause_exception_class_name_isValid;

    m_root_cause_exception_stack_isValid = ::OpenAPI::fromJsonValue(m_root_cause_exception_stack, json[QString("rootCauseExceptionStack")]);
    m_root_cause_exception_stack_isSet = !json[QString("rootCauseExceptionStack")].isNull() && m_root_cause_exception_stack_isValid;
}

QString OAINotFoundKnownExceptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotFoundKnownExceptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_exception_class_name_isSet) {
        obj.insert(QString("exceptionClassName"), ::OpenAPI::toJsonValue(m_exception_class_name));
    }
    if (m_exception_stack.size() > 0) {
        obj.insert(QString("exceptionStack"), ::OpenAPI::toJsonValue(m_exception_stack));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_root_cause_exception_class_name_isSet) {
        obj.insert(QString("rootCauseExceptionClassName"), ::OpenAPI::toJsonValue(m_root_cause_exception_class_name));
    }
    if (m_root_cause_exception_stack.size() > 0) {
        obj.insert(QString("rootCauseExceptionStack"), ::OpenAPI::toJsonValue(m_root_cause_exception_stack));
    }
    return obj;
}

QString OAINotFoundKnownExceptionInfo::getExceptionClassName() const {
    return m_exception_class_name;
}
void OAINotFoundKnownExceptionInfo::setExceptionClassName(const QString &exception_class_name) {
    m_exception_class_name = exception_class_name;
    m_exception_class_name_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_exception_class_name_Set() const{
    return m_exception_class_name_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_exception_class_name_Valid() const{
    return m_exception_class_name_isValid;
}

QList<QString> OAINotFoundKnownExceptionInfo::getExceptionStack() const {
    return m_exception_stack;
}
void OAINotFoundKnownExceptionInfo::setExceptionStack(const QList<QString> &exception_stack) {
    m_exception_stack = exception_stack;
    m_exception_stack_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_exception_stack_Set() const{
    return m_exception_stack_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_exception_stack_Valid() const{
    return m_exception_stack_isValid;
}

QString OAINotFoundKnownExceptionInfo::getId() const {
    return m_id;
}
void OAINotFoundKnownExceptionInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINotFoundKnownExceptionInfo::getMessage() const {
    return m_message;
}
void OAINotFoundKnownExceptionInfo::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_message_Valid() const{
    return m_message_isValid;
}

QString OAINotFoundKnownExceptionInfo::getRootCauseExceptionClassName() const {
    return m_root_cause_exception_class_name;
}
void OAINotFoundKnownExceptionInfo::setRootCauseExceptionClassName(const QString &root_cause_exception_class_name) {
    m_root_cause_exception_class_name = root_cause_exception_class_name;
    m_root_cause_exception_class_name_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_root_cause_exception_class_name_Set() const{
    return m_root_cause_exception_class_name_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_root_cause_exception_class_name_Valid() const{
    return m_root_cause_exception_class_name_isValid;
}

QList<QString> OAINotFoundKnownExceptionInfo::getRootCauseExceptionStack() const {
    return m_root_cause_exception_stack;
}
void OAINotFoundKnownExceptionInfo::setRootCauseExceptionStack(const QList<QString> &root_cause_exception_stack) {
    m_root_cause_exception_stack = root_cause_exception_stack;
    m_root_cause_exception_stack_isSet = true;
}

bool OAINotFoundKnownExceptionInfo::is_root_cause_exception_stack_Set() const{
    return m_root_cause_exception_stack_isSet;
}

bool OAINotFoundKnownExceptionInfo::is_root_cause_exception_stack_Valid() const{
    return m_root_cause_exception_stack_isValid;
}

bool OAINotFoundKnownExceptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_stack.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_exception_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_cause_exception_stack.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotFoundKnownExceptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
