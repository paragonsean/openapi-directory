/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebBackendConnectionRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebBackendConnectionRead::OAIWebBackendConnectionRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebBackendConnectionRead::OAIWebBackendConnectionRead() {
    this->initializeModel();
}

OAIWebBackendConnectionRead::~OAIWebBackendConnectionRead() {}

void OAIWebBackendConnectionRead::initializeModel() {

    m_catalog_diff_isSet = false;
    m_catalog_diff_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_geography_isSet = false;
    m_geography_isValid = false;

    m_is_syncing_isSet = false;
    m_is_syncing_isValid = false;

    m_latest_sync_job_created_at_isSet = false;
    m_latest_sync_job_created_at_isValid = false;

    m_latest_sync_job_status_isSet = false;
    m_latest_sync_job_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_definition_isSet = false;
    m_namespace_definition_isValid = false;

    m_namespace_format_isSet = false;
    m_namespace_format_isValid = false;

    m_non_breaking_changes_preference_isSet = false;
    m_non_breaking_changes_preference_isValid = false;

    m_notify_schema_changes_isSet = false;
    m_notify_schema_changes_isValid = false;

    m_operation_ids_isSet = false;
    m_operation_ids_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_schedule_data_isSet = false;
    m_schedule_data_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schema_change_isSet = false;
    m_schema_change_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sync_catalog_isSet = false;
    m_sync_catalog_isValid = false;
}

void OAIWebBackendConnectionRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebBackendConnectionRead::fromJsonObject(QJsonObject json) {

    m_catalog_diff_isValid = ::OpenAPI::fromJsonValue(m_catalog_diff, json[QString("catalogDiff")]);
    m_catalog_diff_isSet = !json[QString("catalogDiff")].isNull() && m_catalog_diff_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalogId")]);
    m_catalog_id_isSet = !json[QString("catalogId")].isNull() && m_catalog_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destinationId")]);
    m_destination_id_isSet = !json[QString("destinationId")].isNull() && m_destination_id_isValid;

    m_geography_isValid = ::OpenAPI::fromJsonValue(m_geography, json[QString("geography")]);
    m_geography_isSet = !json[QString("geography")].isNull() && m_geography_isValid;

    m_is_syncing_isValid = ::OpenAPI::fromJsonValue(m_is_syncing, json[QString("isSyncing")]);
    m_is_syncing_isSet = !json[QString("isSyncing")].isNull() && m_is_syncing_isValid;

    m_latest_sync_job_created_at_isValid = ::OpenAPI::fromJsonValue(m_latest_sync_job_created_at, json[QString("latestSyncJobCreatedAt")]);
    m_latest_sync_job_created_at_isSet = !json[QString("latestSyncJobCreatedAt")].isNull() && m_latest_sync_job_created_at_isValid;

    m_latest_sync_job_status_isValid = ::OpenAPI::fromJsonValue(m_latest_sync_job_status, json[QString("latestSyncJobStatus")]);
    m_latest_sync_job_status_isSet = !json[QString("latestSyncJobStatus")].isNull() && m_latest_sync_job_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_namespace_definition_isValid = ::OpenAPI::fromJsonValue(m_namespace_definition, json[QString("namespaceDefinition")]);
    m_namespace_definition_isSet = !json[QString("namespaceDefinition")].isNull() && m_namespace_definition_isValid;

    m_namespace_format_isValid = ::OpenAPI::fromJsonValue(m_namespace_format, json[QString("namespaceFormat")]);
    m_namespace_format_isSet = !json[QString("namespaceFormat")].isNull() && m_namespace_format_isValid;

    m_non_breaking_changes_preference_isValid = ::OpenAPI::fromJsonValue(m_non_breaking_changes_preference, json[QString("nonBreakingChangesPreference")]);
    m_non_breaking_changes_preference_isSet = !json[QString("nonBreakingChangesPreference")].isNull() && m_non_breaking_changes_preference_isValid;

    m_notify_schema_changes_isValid = ::OpenAPI::fromJsonValue(m_notify_schema_changes, json[QString("notifySchemaChanges")]);
    m_notify_schema_changes_isSet = !json[QString("notifySchemaChanges")].isNull() && m_notify_schema_changes_isValid;

    m_operation_ids_isValid = ::OpenAPI::fromJsonValue(m_operation_ids, json[QString("operationIds")]);
    m_operation_ids_isSet = !json[QString("operationIds")].isNull() && m_operation_ids_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("resourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("resourceRequirements")].isNull() && m_resource_requirements_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_schedule_data_isValid = ::OpenAPI::fromJsonValue(m_schedule_data, json[QString("scheduleData")]);
    m_schedule_data_isSet = !json[QString("scheduleData")].isNull() && m_schedule_data_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("scheduleType")]);
    m_schedule_type_isSet = !json[QString("scheduleType")].isNull() && m_schedule_type_isValid;

    m_schema_change_isValid = ::OpenAPI::fromJsonValue(m_schema_change, json[QString("schemaChange")]);
    m_schema_change_isSet = !json[QString("schemaChange")].isNull() && m_schema_change_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sync_catalog_isValid = ::OpenAPI::fromJsonValue(m_sync_catalog, json[QString("syncCatalog")]);
    m_sync_catalog_isSet = !json[QString("syncCatalog")].isNull() && m_sync_catalog_isValid;
}

QString OAIWebBackendConnectionRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebBackendConnectionRead::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_diff.isSet()) {
        obj.insert(QString("catalogDiff"), ::OpenAPI::toJsonValue(m_catalog_diff));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_id_isSet) {
        obj.insert(QString("destinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_geography.isSet()) {
        obj.insert(QString("geography"), ::OpenAPI::toJsonValue(m_geography));
    }
    if (m_is_syncing_isSet) {
        obj.insert(QString("isSyncing"), ::OpenAPI::toJsonValue(m_is_syncing));
    }
    if (m_latest_sync_job_created_at_isSet) {
        obj.insert(QString("latestSyncJobCreatedAt"), ::OpenAPI::toJsonValue(m_latest_sync_job_created_at));
    }
    if (m_latest_sync_job_status.isSet()) {
        obj.insert(QString("latestSyncJobStatus"), ::OpenAPI::toJsonValue(m_latest_sync_job_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_definition.isSet()) {
        obj.insert(QString("namespaceDefinition"), ::OpenAPI::toJsonValue(m_namespace_definition));
    }
    if (m_namespace_format_isSet) {
        obj.insert(QString("namespaceFormat"), ::OpenAPI::toJsonValue(m_namespace_format));
    }
    if (m_non_breaking_changes_preference.isSet()) {
        obj.insert(QString("nonBreakingChangesPreference"), ::OpenAPI::toJsonValue(m_non_breaking_changes_preference));
    }
    if (m_notify_schema_changes_isSet) {
        obj.insert(QString("notifySchemaChanges"), ::OpenAPI::toJsonValue(m_notify_schema_changes));
    }
    if (m_operation_ids.size() > 0) {
        obj.insert(QString("operationIds"), ::OpenAPI::toJsonValue(m_operation_ids));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("resourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_schedule_data.isSet()) {
        obj.insert(QString("scheduleData"), ::OpenAPI::toJsonValue(m_schedule_data));
    }
    if (m_schedule_type.isSet()) {
        obj.insert(QString("scheduleType"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schema_change.isSet()) {
        obj.insert(QString("schemaChange"), ::OpenAPI::toJsonValue(m_schema_change));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sync_catalog.isSet()) {
        obj.insert(QString("syncCatalog"), ::OpenAPI::toJsonValue(m_sync_catalog));
    }
    return obj;
}

OAICatalogDiff OAIWebBackendConnectionRead::getCatalogDiff() const {
    return m_catalog_diff;
}
void OAIWebBackendConnectionRead::setCatalogDiff(const OAICatalogDiff &catalog_diff) {
    m_catalog_diff = catalog_diff;
    m_catalog_diff_isSet = true;
}

bool OAIWebBackendConnectionRead::is_catalog_diff_Set() const{
    return m_catalog_diff_isSet;
}

bool OAIWebBackendConnectionRead::is_catalog_diff_Valid() const{
    return m_catalog_diff_isValid;
}

QString OAIWebBackendConnectionRead::getCatalogId() const {
    return m_catalog_id;
}
void OAIWebBackendConnectionRead::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIWebBackendConnectionRead::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIWebBackendConnectionRead::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAIWebBackendConnectionRead::getConnectionId() const {
    return m_connection_id;
}
void OAIWebBackendConnectionRead::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIWebBackendConnectionRead::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIWebBackendConnectionRead::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIDestinationRead OAIWebBackendConnectionRead::getDestination() const {
    return m_destination;
}
void OAIWebBackendConnectionRead::setDestination(const OAIDestinationRead &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIWebBackendConnectionRead::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIWebBackendConnectionRead::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIWebBackendConnectionRead::getDestinationId() const {
    return m_destination_id;
}
void OAIWebBackendConnectionRead::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIWebBackendConnectionRead::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIWebBackendConnectionRead::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

OAIGeography OAIWebBackendConnectionRead::getGeography() const {
    return m_geography;
}
void OAIWebBackendConnectionRead::setGeography(const OAIGeography &geography) {
    m_geography = geography;
    m_geography_isSet = true;
}

bool OAIWebBackendConnectionRead::is_geography_Set() const{
    return m_geography_isSet;
}

bool OAIWebBackendConnectionRead::is_geography_Valid() const{
    return m_geography_isValid;
}

bool OAIWebBackendConnectionRead::isIsSyncing() const {
    return m_is_syncing;
}
void OAIWebBackendConnectionRead::setIsSyncing(const bool &is_syncing) {
    m_is_syncing = is_syncing;
    m_is_syncing_isSet = true;
}

bool OAIWebBackendConnectionRead::is_is_syncing_Set() const{
    return m_is_syncing_isSet;
}

bool OAIWebBackendConnectionRead::is_is_syncing_Valid() const{
    return m_is_syncing_isValid;
}

qint64 OAIWebBackendConnectionRead::getLatestSyncJobCreatedAt() const {
    return m_latest_sync_job_created_at;
}
void OAIWebBackendConnectionRead::setLatestSyncJobCreatedAt(const qint64 &latest_sync_job_created_at) {
    m_latest_sync_job_created_at = latest_sync_job_created_at;
    m_latest_sync_job_created_at_isSet = true;
}

bool OAIWebBackendConnectionRead::is_latest_sync_job_created_at_Set() const{
    return m_latest_sync_job_created_at_isSet;
}

bool OAIWebBackendConnectionRead::is_latest_sync_job_created_at_Valid() const{
    return m_latest_sync_job_created_at_isValid;
}

OAIJobStatus OAIWebBackendConnectionRead::getLatestSyncJobStatus() const {
    return m_latest_sync_job_status;
}
void OAIWebBackendConnectionRead::setLatestSyncJobStatus(const OAIJobStatus &latest_sync_job_status) {
    m_latest_sync_job_status = latest_sync_job_status;
    m_latest_sync_job_status_isSet = true;
}

bool OAIWebBackendConnectionRead::is_latest_sync_job_status_Set() const{
    return m_latest_sync_job_status_isSet;
}

bool OAIWebBackendConnectionRead::is_latest_sync_job_status_Valid() const{
    return m_latest_sync_job_status_isValid;
}

QString OAIWebBackendConnectionRead::getName() const {
    return m_name;
}
void OAIWebBackendConnectionRead::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebBackendConnectionRead::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebBackendConnectionRead::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespaceDefinitionType OAIWebBackendConnectionRead::getNamespaceDefinition() const {
    return m_namespace_definition;
}
void OAIWebBackendConnectionRead::setNamespaceDefinition(const OAINamespaceDefinitionType &namespace_definition) {
    m_namespace_definition = namespace_definition;
    m_namespace_definition_isSet = true;
}

bool OAIWebBackendConnectionRead::is_namespace_definition_Set() const{
    return m_namespace_definition_isSet;
}

bool OAIWebBackendConnectionRead::is_namespace_definition_Valid() const{
    return m_namespace_definition_isValid;
}

QString OAIWebBackendConnectionRead::getNamespaceFormat() const {
    return m_namespace_format;
}
void OAIWebBackendConnectionRead::setNamespaceFormat(const QString &namespace_format) {
    m_namespace_format = namespace_format;
    m_namespace_format_isSet = true;
}

bool OAIWebBackendConnectionRead::is_namespace_format_Set() const{
    return m_namespace_format_isSet;
}

bool OAIWebBackendConnectionRead::is_namespace_format_Valid() const{
    return m_namespace_format_isValid;
}

OAINonBreakingChangesPreference OAIWebBackendConnectionRead::getNonBreakingChangesPreference() const {
    return m_non_breaking_changes_preference;
}
void OAIWebBackendConnectionRead::setNonBreakingChangesPreference(const OAINonBreakingChangesPreference &non_breaking_changes_preference) {
    m_non_breaking_changes_preference = non_breaking_changes_preference;
    m_non_breaking_changes_preference_isSet = true;
}

bool OAIWebBackendConnectionRead::is_non_breaking_changes_preference_Set() const{
    return m_non_breaking_changes_preference_isSet;
}

bool OAIWebBackendConnectionRead::is_non_breaking_changes_preference_Valid() const{
    return m_non_breaking_changes_preference_isValid;
}

bool OAIWebBackendConnectionRead::isNotifySchemaChanges() const {
    return m_notify_schema_changes;
}
void OAIWebBackendConnectionRead::setNotifySchemaChanges(const bool &notify_schema_changes) {
    m_notify_schema_changes = notify_schema_changes;
    m_notify_schema_changes_isSet = true;
}

bool OAIWebBackendConnectionRead::is_notify_schema_changes_Set() const{
    return m_notify_schema_changes_isSet;
}

bool OAIWebBackendConnectionRead::is_notify_schema_changes_Valid() const{
    return m_notify_schema_changes_isValid;
}

QList<QString> OAIWebBackendConnectionRead::getOperationIds() const {
    return m_operation_ids;
}
void OAIWebBackendConnectionRead::setOperationIds(const QList<QString> &operation_ids) {
    m_operation_ids = operation_ids;
    m_operation_ids_isSet = true;
}

bool OAIWebBackendConnectionRead::is_operation_ids_Set() const{
    return m_operation_ids_isSet;
}

bool OAIWebBackendConnectionRead::is_operation_ids_Valid() const{
    return m_operation_ids_isValid;
}

QList<OAIOperationRead> OAIWebBackendConnectionRead::getOperations() const {
    return m_operations;
}
void OAIWebBackendConnectionRead::setOperations(const QList<OAIOperationRead> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIWebBackendConnectionRead::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIWebBackendConnectionRead::is_operations_Valid() const{
    return m_operations_isValid;
}

QString OAIWebBackendConnectionRead::getPrefix() const {
    return m_prefix;
}
void OAIWebBackendConnectionRead::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIWebBackendConnectionRead::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIWebBackendConnectionRead::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIResourceRequirements OAIWebBackendConnectionRead::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIWebBackendConnectionRead::setResourceRequirements(const OAIResourceRequirements &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIWebBackendConnectionRead::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIWebBackendConnectionRead::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

OAIConnectionSchedule OAIWebBackendConnectionRead::getSchedule() const {
    return m_schedule;
}
void OAIWebBackendConnectionRead::setSchedule(const OAIConnectionSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIWebBackendConnectionRead::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIWebBackendConnectionRead::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAIConnectionScheduleData OAIWebBackendConnectionRead::getScheduleData() const {
    return m_schedule_data;
}
void OAIWebBackendConnectionRead::setScheduleData(const OAIConnectionScheduleData &schedule_data) {
    m_schedule_data = schedule_data;
    m_schedule_data_isSet = true;
}

bool OAIWebBackendConnectionRead::is_schedule_data_Set() const{
    return m_schedule_data_isSet;
}

bool OAIWebBackendConnectionRead::is_schedule_data_Valid() const{
    return m_schedule_data_isValid;
}

OAIConnectionScheduleType OAIWebBackendConnectionRead::getScheduleType() const {
    return m_schedule_type;
}
void OAIWebBackendConnectionRead::setScheduleType(const OAIConnectionScheduleType &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIWebBackendConnectionRead::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIWebBackendConnectionRead::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

OAISchemaChange OAIWebBackendConnectionRead::getSchemaChange() const {
    return m_schema_change;
}
void OAIWebBackendConnectionRead::setSchemaChange(const OAISchemaChange &schema_change) {
    m_schema_change = schema_change;
    m_schema_change_isSet = true;
}

bool OAIWebBackendConnectionRead::is_schema_change_Set() const{
    return m_schema_change_isSet;
}

bool OAIWebBackendConnectionRead::is_schema_change_Valid() const{
    return m_schema_change_isValid;
}

OAISourceRead OAIWebBackendConnectionRead::getSource() const {
    return m_source;
}
void OAIWebBackendConnectionRead::setSource(const OAISourceRead &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWebBackendConnectionRead::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWebBackendConnectionRead::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIWebBackendConnectionRead::getSourceId() const {
    return m_source_id;
}
void OAIWebBackendConnectionRead::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIWebBackendConnectionRead::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIWebBackendConnectionRead::is_source_id_Valid() const{
    return m_source_id_isValid;
}

OAIConnectionStatus OAIWebBackendConnectionRead::getStatus() const {
    return m_status;
}
void OAIWebBackendConnectionRead::setStatus(const OAIConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebBackendConnectionRead::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebBackendConnectionRead::is_status_Valid() const{
    return m_status_isValid;
}

OAIAirbyteCatalog OAIWebBackendConnectionRead::getSyncCatalog() const {
    return m_sync_catalog;
}
void OAIWebBackendConnectionRead::setSyncCatalog(const OAIAirbyteCatalog &sync_catalog) {
    m_sync_catalog = sync_catalog;
    m_sync_catalog_isSet = true;
}

bool OAIWebBackendConnectionRead::is_sync_catalog_Set() const{
    return m_sync_catalog_isSet;
}

bool OAIWebBackendConnectionRead::is_sync_catalog_Valid() const{
    return m_sync_catalog_isValid;
}

bool OAIWebBackendConnectionRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geography.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_syncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_sync_job_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_sync_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_breaking_changes_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_schema_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebBackendConnectionRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_id_isValid && m_destination_isValid && m_destination_id_isValid && m_is_syncing_isValid && m_name_isValid && m_non_breaking_changes_preference_isValid && m_notify_schema_changes_isValid && m_schema_change_isValid && m_source_isValid && m_source_id_isValid && m_status_isValid && m_sync_catalog_isValid && true;
}

} // namespace OpenAPI
