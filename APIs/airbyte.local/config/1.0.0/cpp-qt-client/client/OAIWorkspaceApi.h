/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspaceApi_H
#define OAI_OAIWorkspaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionIdRequestBody.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAISlugRequestBody.h"
#include "OAIWorkspaceCreate.h"
#include "OAIWorkspaceGiveFeedback.h"
#include "OAIWorkspaceIdRequestBody.h"
#include "OAIWorkspaceRead.h"
#include "OAIWorkspaceReadList.h"
#include "OAIWorkspaceUpdate.h"
#include "OAIWorkspaceUpdateName.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspaceApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspaceApi(const int timeOut = 0);
    ~OAIWorkspaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_workspace_create OAIWorkspaceCreate [required]
    */
    virtual void createWorkspace(const OAIWorkspaceCreate &oai_workspace_create);

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [required]
    */
    virtual void deleteWorkspace(const OAIWorkspaceIdRequestBody &oai_workspace_id_request_body);

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [required]
    */
    virtual void getWorkspace(const OAIWorkspaceIdRequestBody &oai_workspace_id_request_body);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void getWorkspaceByConnectionId(const OAIConnectionIdRequestBody &oai_connection_id_request_body);

    /**
    * @param[in]  oai_slug_request_body OAISlugRequestBody [required]
    */
    virtual void getWorkspaceBySlug(const OAISlugRequestBody &oai_slug_request_body);


    virtual void listWorkspaces();

    /**
    * @param[in]  oai_workspace_update OAIWorkspaceUpdate [required]
    */
    virtual void updateWorkspace(const OAIWorkspaceUpdate &oai_workspace_update);

    /**
    * @param[in]  oai_workspace_give_feedback OAIWorkspaceGiveFeedback [required]
    */
    virtual void updateWorkspaceFeedback(const OAIWorkspaceGiveFeedback &oai_workspace_give_feedback);

    /**
    * @param[in]  oai_workspace_update_name OAIWorkspaceUpdateName [required]
    */
    virtual void updateWorkspaceName(const OAIWorkspaceUpdateName &oai_workspace_update_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkspaceCallback(OAIHttpRequestWorker *worker);
    void deleteWorkspaceCallback(OAIHttpRequestWorker *worker);
    void getWorkspaceCallback(OAIHttpRequestWorker *worker);
    void getWorkspaceByConnectionIdCallback(OAIHttpRequestWorker *worker);
    void getWorkspaceBySlugCallback(OAIHttpRequestWorker *worker);
    void listWorkspacesCallback(OAIHttpRequestWorker *worker);
    void updateWorkspaceCallback(OAIHttpRequestWorker *worker);
    void updateWorkspaceFeedbackCallback(OAIHttpRequestWorker *worker);
    void updateWorkspaceNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkspaceSignal(OAIWorkspaceRead summary);
    void deleteWorkspaceSignal();
    void getWorkspaceSignal(OAIWorkspaceRead summary);
    void getWorkspaceByConnectionIdSignal(OAIWorkspaceRead summary);
    void getWorkspaceBySlugSignal(OAIWorkspaceRead summary);
    void listWorkspacesSignal(OAIWorkspaceReadList summary);
    void updateWorkspaceSignal(OAIWorkspaceRead summary);
    void updateWorkspaceFeedbackSignal();
    void updateWorkspaceNameSignal(OAIWorkspaceRead summary);


    void createWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);
    void deleteWorkspaceSignalFull(OAIHttpRequestWorker *worker);
    void getWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);
    void getWorkspaceByConnectionIdSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);
    void getWorkspaceBySlugSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);
    void listWorkspacesSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceReadList summary);
    void updateWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);
    void updateWorkspaceFeedbackSignalFull(OAIHttpRequestWorker *worker);
    void updateWorkspaceNameSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceRead summary);

    Q_DECL_DEPRECATED_X("Use createWorkspaceSignalError() instead")
    void createWorkspaceSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkspaceSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkspaceSignalError() instead")
    void deleteWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceSignalError() instead")
    void getWorkspaceSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceByConnectionIdSignalError() instead")
    void getWorkspaceByConnectionIdSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceByConnectionIdSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceBySlugSignalError() instead")
    void getWorkspaceBySlugSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceBySlugSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkspacesSignalError() instead")
    void listWorkspacesSignalE(OAIWorkspaceReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkspacesSignalError(OAIWorkspaceReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceSignalError() instead")
    void updateWorkspaceSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceFeedbackSignalError() instead")
    void updateWorkspaceFeedbackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceFeedbackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceNameSignalError() instead")
    void updateWorkspaceNameSignalE(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceNameSignalError(OAIWorkspaceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkspaceSignalErrorFull() instead")
    void createWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkspaceSignalErrorFull() instead")
    void deleteWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceSignalErrorFull() instead")
    void getWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceByConnectionIdSignalErrorFull() instead")
    void getWorkspaceByConnectionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceByConnectionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkspaceBySlugSignalErrorFull() instead")
    void getWorkspaceBySlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkspaceBySlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkspacesSignalErrorFull() instead")
    void listWorkspacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkspacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceSignalErrorFull() instead")
    void updateWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceFeedbackSignalErrorFull() instead")
    void updateWorkspaceFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceNameSignalErrorFull() instead")
    void updateWorkspaceNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
