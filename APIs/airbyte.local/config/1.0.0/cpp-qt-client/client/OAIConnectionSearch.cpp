/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionSearch::OAIConnectionSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionSearch::OAIConnectionSearch() {
    this->initializeModel();
}

OAIConnectionSearch::~OAIConnectionSearch() {}

void OAIConnectionSearch::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_definition_isSet = false;
    m_namespace_definition_isValid = false;

    m_namespace_format_isSet = false;
    m_namespace_format_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_schedule_data_isSet = false;
    m_schedule_data_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIConnectionSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionSearch::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destinationId")]);
    m_destination_id_isSet = !json[QString("destinationId")].isNull() && m_destination_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_namespace_definition_isValid = ::OpenAPI::fromJsonValue(m_namespace_definition, json[QString("namespaceDefinition")]);
    m_namespace_definition_isSet = !json[QString("namespaceDefinition")].isNull() && m_namespace_definition_isValid;

    m_namespace_format_isValid = ::OpenAPI::fromJsonValue(m_namespace_format, json[QString("namespaceFormat")]);
    m_namespace_format_isSet = !json[QString("namespaceFormat")].isNull() && m_namespace_format_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_schedule_data_isValid = ::OpenAPI::fromJsonValue(m_schedule_data, json[QString("scheduleData")]);
    m_schedule_data_isSet = !json[QString("scheduleData")].isNull() && m_schedule_data_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("scheduleType")]);
    m_schedule_type_isSet = !json[QString("scheduleType")].isNull() && m_schedule_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIConnectionSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_id_isSet) {
        obj.insert(QString("destinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_definition.isSet()) {
        obj.insert(QString("namespaceDefinition"), ::OpenAPI::toJsonValue(m_namespace_definition));
    }
    if (m_namespace_format_isSet) {
        obj.insert(QString("namespaceFormat"), ::OpenAPI::toJsonValue(m_namespace_format));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_schedule_data.isSet()) {
        obj.insert(QString("scheduleData"), ::OpenAPI::toJsonValue(m_schedule_data));
    }
    if (m_schedule_type.isSet()) {
        obj.insert(QString("scheduleType"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIConnectionSearch::getConnectionId() const {
    return m_connection_id;
}
void OAIConnectionSearch::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIConnectionSearch::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIConnectionSearch::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIDestinationSearch OAIConnectionSearch::getDestination() const {
    return m_destination;
}
void OAIConnectionSearch::setDestination(const OAIDestinationSearch &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConnectionSearch::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConnectionSearch::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIConnectionSearch::getDestinationId() const {
    return m_destination_id;
}
void OAIConnectionSearch::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIConnectionSearch::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIConnectionSearch::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

QString OAIConnectionSearch::getName() const {
    return m_name;
}
void OAIConnectionSearch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionSearch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionSearch::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespaceDefinitionType OAIConnectionSearch::getNamespaceDefinition() const {
    return m_namespace_definition;
}
void OAIConnectionSearch::setNamespaceDefinition(const OAINamespaceDefinitionType &namespace_definition) {
    m_namespace_definition = namespace_definition;
    m_namespace_definition_isSet = true;
}

bool OAIConnectionSearch::is_namespace_definition_Set() const{
    return m_namespace_definition_isSet;
}

bool OAIConnectionSearch::is_namespace_definition_Valid() const{
    return m_namespace_definition_isValid;
}

QString OAIConnectionSearch::getNamespaceFormat() const {
    return m_namespace_format;
}
void OAIConnectionSearch::setNamespaceFormat(const QString &namespace_format) {
    m_namespace_format = namespace_format;
    m_namespace_format_isSet = true;
}

bool OAIConnectionSearch::is_namespace_format_Set() const{
    return m_namespace_format_isSet;
}

bool OAIConnectionSearch::is_namespace_format_Valid() const{
    return m_namespace_format_isValid;
}

QString OAIConnectionSearch::getPrefix() const {
    return m_prefix;
}
void OAIConnectionSearch::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIConnectionSearch::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIConnectionSearch::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIConnectionSchedule OAIConnectionSearch::getSchedule() const {
    return m_schedule;
}
void OAIConnectionSearch::setSchedule(const OAIConnectionSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIConnectionSearch::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIConnectionSearch::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAIConnectionScheduleData OAIConnectionSearch::getScheduleData() const {
    return m_schedule_data;
}
void OAIConnectionSearch::setScheduleData(const OAIConnectionScheduleData &schedule_data) {
    m_schedule_data = schedule_data;
    m_schedule_data_isSet = true;
}

bool OAIConnectionSearch::is_schedule_data_Set() const{
    return m_schedule_data_isSet;
}

bool OAIConnectionSearch::is_schedule_data_Valid() const{
    return m_schedule_data_isValid;
}

OAIConnectionScheduleType OAIConnectionSearch::getScheduleType() const {
    return m_schedule_type;
}
void OAIConnectionSearch::setScheduleType(const OAIConnectionScheduleType &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIConnectionSearch::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIConnectionSearch::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

OAISourceSearch OAIConnectionSearch::getSource() const {
    return m_source;
}
void OAIConnectionSearch::setSource(const OAISourceSearch &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConnectionSearch::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConnectionSearch::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIConnectionSearch::getSourceId() const {
    return m_source_id;
}
void OAIConnectionSearch::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIConnectionSearch::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIConnectionSearch::is_source_id_Valid() const{
    return m_source_id_isValid;
}

OAIConnectionStatus OAIConnectionSearch::getStatus() const {
    return m_status;
}
void OAIConnectionSearch::setStatus(const OAIConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnectionSearch::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnectionSearch::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIConnectionSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
