/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRead::OAIJobRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRead::OAIJobRead() {
    this->initializeModel();
}

OAIJobRead::~OAIJobRead() {}

void OAIJobRead::initializeModel() {

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reset_config_isSet = false;
    m_reset_config_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIJobRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobRead::fromJsonObject(QJsonObject json) {

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reset_config_isValid = ::OpenAPI::fromJsonValue(m_reset_config, json[QString("resetConfig")]);
    m_reset_config_isSet = !json[QString("resetConfig")].isNull() && m_reset_config_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIJobRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobRead::asJsonObject() const {
    QJsonObject obj;
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_config_type.isSet()) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reset_config.isSet()) {
        obj.insert(QString("resetConfig"), ::OpenAPI::toJsonValue(m_reset_config));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIJobRead::getConfigId() const {
    return m_config_id;
}
void OAIJobRead::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAIJobRead::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAIJobRead::is_config_id_Valid() const{
    return m_config_id_isValid;
}

OAIJobConfigType OAIJobRead::getConfigType() const {
    return m_config_type;
}
void OAIJobRead::setConfigType(const OAIJobConfigType &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAIJobRead::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAIJobRead::is_config_type_Valid() const{
    return m_config_type_isValid;
}

qint64 OAIJobRead::getCreatedAt() const {
    return m_created_at;
}
void OAIJobRead::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIJobRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIJobRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIJobRead::getId() const {
    return m_id;
}
void OAIJobRead::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobRead::is_id_Valid() const{
    return m_id_isValid;
}

OAIResetConfig OAIJobRead::getResetConfig() const {
    return m_reset_config;
}
void OAIJobRead::setResetConfig(const OAIResetConfig &reset_config) {
    m_reset_config = reset_config;
    m_reset_config_isSet = true;
}

bool OAIJobRead::is_reset_config_Set() const{
    return m_reset_config_isSet;
}

bool OAIJobRead::is_reset_config_Valid() const{
    return m_reset_config_isValid;
}

qint64 OAIJobRead::getStartedAt() const {
    return m_started_at;
}
void OAIJobRead::setStartedAt(const qint64 &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJobRead::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJobRead::is_started_at_Valid() const{
    return m_started_at_isValid;
}

OAIJobStatus OAIJobRead::getStatus() const {
    return m_status;
}
void OAIJobRead::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobRead::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobRead::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIJobRead::getUpdatedAt() const {
    return m_updated_at;
}
void OAIJobRead::setUpdatedAt(const qint64 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIJobRead::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIJobRead::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIJobRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_id_isValid && m_config_type_isValid && m_created_at_isValid && m_id_isValid && m_status_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
