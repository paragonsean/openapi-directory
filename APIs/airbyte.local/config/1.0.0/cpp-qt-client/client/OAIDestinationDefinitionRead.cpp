/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationDefinitionRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationDefinitionRead::OAIDestinationDefinitionRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationDefinitionRead::OAIDestinationDefinitionRead() {
    this->initializeModel();
}

OAIDestinationDefinitionRead::~OAIDestinationDefinitionRead() {}

void OAIDestinationDefinitionRead::initializeModel() {

    m_destination_definition_id_isSet = false;
    m_destination_definition_id_isValid = false;

    m_docker_image_tag_isSet = false;
    m_docker_image_tag_isValid = false;

    m_docker_repository_isSet = false;
    m_docker_repository_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_normalization_config_isSet = false;
    m_normalization_config_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_stage_isSet = false;
    m_release_stage_isValid = false;

    m_resource_requirements_isSet = false;
    m_resource_requirements_isValid = false;

    m_supports_dbt_isSet = false;
    m_supports_dbt_isValid = false;
}

void OAIDestinationDefinitionRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationDefinitionRead::fromJsonObject(QJsonObject json) {

    m_destination_definition_id_isValid = ::OpenAPI::fromJsonValue(m_destination_definition_id, json[QString("destinationDefinitionId")]);
    m_destination_definition_id_isSet = !json[QString("destinationDefinitionId")].isNull() && m_destination_definition_id_isValid;

    m_docker_image_tag_isValid = ::OpenAPI::fromJsonValue(m_docker_image_tag, json[QString("dockerImageTag")]);
    m_docker_image_tag_isSet = !json[QString("dockerImageTag")].isNull() && m_docker_image_tag_isValid;

    m_docker_repository_isValid = ::OpenAPI::fromJsonValue(m_docker_repository, json[QString("dockerRepository")]);
    m_docker_repository_isSet = !json[QString("dockerRepository")].isNull() && m_docker_repository_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_normalization_config_isValid = ::OpenAPI::fromJsonValue(m_normalization_config, json[QString("normalizationConfig")]);
    m_normalization_config_isSet = !json[QString("normalizationConfig")].isNull() && m_normalization_config_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_release_stage_isValid = ::OpenAPI::fromJsonValue(m_release_stage, json[QString("releaseStage")]);
    m_release_stage_isSet = !json[QString("releaseStage")].isNull() && m_release_stage_isValid;

    m_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_resource_requirements, json[QString("resourceRequirements")]);
    m_resource_requirements_isSet = !json[QString("resourceRequirements")].isNull() && m_resource_requirements_isValid;

    m_supports_dbt_isValid = ::OpenAPI::fromJsonValue(m_supports_dbt, json[QString("supportsDbt")]);
    m_supports_dbt_isSet = !json[QString("supportsDbt")].isNull() && m_supports_dbt_isValid;
}

QString OAIDestinationDefinitionRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationDefinitionRead::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_definition_id_isSet) {
        obj.insert(QString("destinationDefinitionId"), ::OpenAPI::toJsonValue(m_destination_definition_id));
    }
    if (m_docker_image_tag_isSet) {
        obj.insert(QString("dockerImageTag"), ::OpenAPI::toJsonValue(m_docker_image_tag));
    }
    if (m_docker_repository_isSet) {
        obj.insert(QString("dockerRepository"), ::OpenAPI::toJsonValue(m_docker_repository));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_normalization_config.isSet()) {
        obj.insert(QString("normalizationConfig"), ::OpenAPI::toJsonValue(m_normalization_config));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_stage.isSet()) {
        obj.insert(QString("releaseStage"), ::OpenAPI::toJsonValue(m_release_stage));
    }
    if (m_resource_requirements.isSet()) {
        obj.insert(QString("resourceRequirements"), ::OpenAPI::toJsonValue(m_resource_requirements));
    }
    if (m_supports_dbt_isSet) {
        obj.insert(QString("supportsDbt"), ::OpenAPI::toJsonValue(m_supports_dbt));
    }
    return obj;
}

QString OAIDestinationDefinitionRead::getDestinationDefinitionId() const {
    return m_destination_definition_id;
}
void OAIDestinationDefinitionRead::setDestinationDefinitionId(const QString &destination_definition_id) {
    m_destination_definition_id = destination_definition_id;
    m_destination_definition_id_isSet = true;
}

bool OAIDestinationDefinitionRead::is_destination_definition_id_Set() const{
    return m_destination_definition_id_isSet;
}

bool OAIDestinationDefinitionRead::is_destination_definition_id_Valid() const{
    return m_destination_definition_id_isValid;
}

QString OAIDestinationDefinitionRead::getDockerImageTag() const {
    return m_docker_image_tag;
}
void OAIDestinationDefinitionRead::setDockerImageTag(const QString &docker_image_tag) {
    m_docker_image_tag = docker_image_tag;
    m_docker_image_tag_isSet = true;
}

bool OAIDestinationDefinitionRead::is_docker_image_tag_Set() const{
    return m_docker_image_tag_isSet;
}

bool OAIDestinationDefinitionRead::is_docker_image_tag_Valid() const{
    return m_docker_image_tag_isValid;
}

QString OAIDestinationDefinitionRead::getDockerRepository() const {
    return m_docker_repository;
}
void OAIDestinationDefinitionRead::setDockerRepository(const QString &docker_repository) {
    m_docker_repository = docker_repository;
    m_docker_repository_isSet = true;
}

bool OAIDestinationDefinitionRead::is_docker_repository_Set() const{
    return m_docker_repository_isSet;
}

bool OAIDestinationDefinitionRead::is_docker_repository_Valid() const{
    return m_docker_repository_isValid;
}

QString OAIDestinationDefinitionRead::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIDestinationDefinitionRead::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIDestinationDefinitionRead::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIDestinationDefinitionRead::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIDestinationDefinitionRead::getIcon() const {
    return m_icon;
}
void OAIDestinationDefinitionRead::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestinationDefinitionRead::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestinationDefinitionRead::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIDestinationDefinitionRead::getName() const {
    return m_name;
}
void OAIDestinationDefinitionRead::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDestinationDefinitionRead::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDestinationDefinitionRead::is_name_Valid() const{
    return m_name_isValid;
}

OAINormalizationDestinationDefinitionConfig OAIDestinationDefinitionRead::getNormalizationConfig() const {
    return m_normalization_config;
}
void OAIDestinationDefinitionRead::setNormalizationConfig(const OAINormalizationDestinationDefinitionConfig &normalization_config) {
    m_normalization_config = normalization_config;
    m_normalization_config_isSet = true;
}

bool OAIDestinationDefinitionRead::is_normalization_config_Set() const{
    return m_normalization_config_isSet;
}

bool OAIDestinationDefinitionRead::is_normalization_config_Valid() const{
    return m_normalization_config_isValid;
}

QString OAIDestinationDefinitionRead::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIDestinationDefinitionRead::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIDestinationDefinitionRead::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIDestinationDefinitionRead::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

QDate OAIDestinationDefinitionRead::getReleaseDate() const {
    return m_release_date;
}
void OAIDestinationDefinitionRead::setReleaseDate(const QDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIDestinationDefinitionRead::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIDestinationDefinitionRead::is_release_date_Valid() const{
    return m_release_date_isValid;
}

OAIReleaseStage OAIDestinationDefinitionRead::getReleaseStage() const {
    return m_release_stage;
}
void OAIDestinationDefinitionRead::setReleaseStage(const OAIReleaseStage &release_stage) {
    m_release_stage = release_stage;
    m_release_stage_isSet = true;
}

bool OAIDestinationDefinitionRead::is_release_stage_Set() const{
    return m_release_stage_isSet;
}

bool OAIDestinationDefinitionRead::is_release_stage_Valid() const{
    return m_release_stage_isValid;
}

OAIActorDefinitionResourceRequirements OAIDestinationDefinitionRead::getResourceRequirements() const {
    return m_resource_requirements;
}
void OAIDestinationDefinitionRead::setResourceRequirements(const OAIActorDefinitionResourceRequirements &resource_requirements) {
    m_resource_requirements = resource_requirements;
    m_resource_requirements_isSet = true;
}

bool OAIDestinationDefinitionRead::is_resource_requirements_Set() const{
    return m_resource_requirements_isSet;
}

bool OAIDestinationDefinitionRead::is_resource_requirements_Valid() const{
    return m_resource_requirements_isValid;
}

bool OAIDestinationDefinitionRead::isSupportsDbt() const {
    return m_supports_dbt;
}
void OAIDestinationDefinitionRead::setSupportsDbt(const bool &supports_dbt) {
    m_supports_dbt = supports_dbt;
    m_supports_dbt_isSet = true;
}

bool OAIDestinationDefinitionRead::is_supports_dbt_Set() const{
    return m_supports_dbt_isSet;
}

bool OAIDestinationDefinitionRead::is_supports_dbt_Valid() const{
    return m_supports_dbt_isValid;
}

bool OAIDestinationDefinitionRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_dbt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationDefinitionRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_definition_id_isValid && m_docker_image_tag_isValid && m_docker_repository_isValid && m_documentation_url_isValid && m_name_isValid && m_normalization_config_isValid && m_supports_dbt_isValid && true;
}

} // namespace OpenAPI
