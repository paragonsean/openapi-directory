/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttemptFailureReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttemptFailureReason::OAIAttemptFailureReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttemptFailureReason::OAIAttemptFailureReason() {
    this->initializeModel();
}

OAIAttemptFailureReason::~OAIAttemptFailureReason() {}

void OAIAttemptFailureReason::initializeModel() {

    m_external_message_isSet = false;
    m_external_message_isValid = false;

    m_failure_origin_isSet = false;
    m_failure_origin_isValid = false;

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;

    m_internal_message_isSet = false;
    m_internal_message_isValid = false;

    m_retryable_isSet = false;
    m_retryable_isValid = false;

    m_stacktrace_isSet = false;
    m_stacktrace_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIAttemptFailureReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttemptFailureReason::fromJsonObject(QJsonObject json) {

    m_external_message_isValid = ::OpenAPI::fromJsonValue(m_external_message, json[QString("externalMessage")]);
    m_external_message_isSet = !json[QString("externalMessage")].isNull() && m_external_message_isValid;

    m_failure_origin_isValid = ::OpenAPI::fromJsonValue(m_failure_origin, json[QString("failureOrigin")]);
    m_failure_origin_isSet = !json[QString("failureOrigin")].isNull() && m_failure_origin_isValid;

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("failureType")]);
    m_failure_type_isSet = !json[QString("failureType")].isNull() && m_failure_type_isValid;

    m_internal_message_isValid = ::OpenAPI::fromJsonValue(m_internal_message, json[QString("internalMessage")]);
    m_internal_message_isSet = !json[QString("internalMessage")].isNull() && m_internal_message_isValid;

    m_retryable_isValid = ::OpenAPI::fromJsonValue(m_retryable, json[QString("retryable")]);
    m_retryable_isSet = !json[QString("retryable")].isNull() && m_retryable_isValid;

    m_stacktrace_isValid = ::OpenAPI::fromJsonValue(m_stacktrace, json[QString("stacktrace")]);
    m_stacktrace_isSet = !json[QString("stacktrace")].isNull() && m_stacktrace_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIAttemptFailureReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttemptFailureReason::asJsonObject() const {
    QJsonObject obj;
    if (m_external_message_isSet) {
        obj.insert(QString("externalMessage"), ::OpenAPI::toJsonValue(m_external_message));
    }
    if (m_failure_origin.isSet()) {
        obj.insert(QString("failureOrigin"), ::OpenAPI::toJsonValue(m_failure_origin));
    }
    if (m_failure_type.isSet()) {
        obj.insert(QString("failureType"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    if (m_internal_message_isSet) {
        obj.insert(QString("internalMessage"), ::OpenAPI::toJsonValue(m_internal_message));
    }
    if (m_retryable_isSet) {
        obj.insert(QString("retryable"), ::OpenAPI::toJsonValue(m_retryable));
    }
    if (m_stacktrace_isSet) {
        obj.insert(QString("stacktrace"), ::OpenAPI::toJsonValue(m_stacktrace));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIAttemptFailureReason::getExternalMessage() const {
    return m_external_message;
}
void OAIAttemptFailureReason::setExternalMessage(const QString &external_message) {
    m_external_message = external_message;
    m_external_message_isSet = true;
}

bool OAIAttemptFailureReason::is_external_message_Set() const{
    return m_external_message_isSet;
}

bool OAIAttemptFailureReason::is_external_message_Valid() const{
    return m_external_message_isValid;
}

OAIAttemptFailureOrigin OAIAttemptFailureReason::getFailureOrigin() const {
    return m_failure_origin;
}
void OAIAttemptFailureReason::setFailureOrigin(const OAIAttemptFailureOrigin &failure_origin) {
    m_failure_origin = failure_origin;
    m_failure_origin_isSet = true;
}

bool OAIAttemptFailureReason::is_failure_origin_Set() const{
    return m_failure_origin_isSet;
}

bool OAIAttemptFailureReason::is_failure_origin_Valid() const{
    return m_failure_origin_isValid;
}

OAIAttemptFailureType OAIAttemptFailureReason::getFailureType() const {
    return m_failure_type;
}
void OAIAttemptFailureReason::setFailureType(const OAIAttemptFailureType &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIAttemptFailureReason::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIAttemptFailureReason::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

QString OAIAttemptFailureReason::getInternalMessage() const {
    return m_internal_message;
}
void OAIAttemptFailureReason::setInternalMessage(const QString &internal_message) {
    m_internal_message = internal_message;
    m_internal_message_isSet = true;
}

bool OAIAttemptFailureReason::is_internal_message_Set() const{
    return m_internal_message_isSet;
}

bool OAIAttemptFailureReason::is_internal_message_Valid() const{
    return m_internal_message_isValid;
}

bool OAIAttemptFailureReason::isRetryable() const {
    return m_retryable;
}
void OAIAttemptFailureReason::setRetryable(const bool &retryable) {
    m_retryable = retryable;
    m_retryable_isSet = true;
}

bool OAIAttemptFailureReason::is_retryable_Set() const{
    return m_retryable_isSet;
}

bool OAIAttemptFailureReason::is_retryable_Valid() const{
    return m_retryable_isValid;
}

QString OAIAttemptFailureReason::getStacktrace() const {
    return m_stacktrace;
}
void OAIAttemptFailureReason::setStacktrace(const QString &stacktrace) {
    m_stacktrace = stacktrace;
    m_stacktrace_isSet = true;
}

bool OAIAttemptFailureReason::is_stacktrace_Set() const{
    return m_stacktrace_isSet;
}

bool OAIAttemptFailureReason::is_stacktrace_Valid() const{
    return m_stacktrace_isValid;
}

qint64 OAIAttemptFailureReason::getTimestamp() const {
    return m_timestamp;
}
void OAIAttemptFailureReason::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAttemptFailureReason::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAttemptFailureReason::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIAttemptFailureReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retryable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacktrace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttemptFailureReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && true;
}

} // namespace OpenAPI
