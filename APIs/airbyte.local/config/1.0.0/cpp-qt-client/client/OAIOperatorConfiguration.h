/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOperatorConfiguration.h
 *
 * 
 */

#ifndef OAIOperatorConfiguration_H
#define OAIOperatorConfiguration_H

#include <QJsonObject>

#include "OAIOperatorDbt.h"
#include "OAIOperatorNormalization.h"
#include "OAIOperatorType.h"
#include "OAIOperatorWebhook.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOperatorDbt;
class OAIOperatorNormalization;
class OAIOperatorWebhook;

class OAIOperatorConfiguration : public OAIObject {
public:
    OAIOperatorConfiguration();
    OAIOperatorConfiguration(QString json);
    ~OAIOperatorConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOperatorDbt getDbt() const;
    void setDbt(const OAIOperatorDbt &dbt);
    bool is_dbt_Set() const;
    bool is_dbt_Valid() const;

    OAIOperatorNormalization getNormalization() const;
    void setNormalization(const OAIOperatorNormalization &normalization);
    bool is_normalization_Set() const;
    bool is_normalization_Valid() const;

    OAIOperatorType getOperatorType() const;
    void setOperatorType(const OAIOperatorType &operator_type);
    bool is_operator_type_Set() const;
    bool is_operator_type_Valid() const;

    OAIOperatorWebhook getWebhook() const;
    void setWebhook(const OAIOperatorWebhook &webhook);
    bool is_webhook_Set() const;
    bool is_webhook_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOperatorDbt m_dbt;
    bool m_dbt_isSet;
    bool m_dbt_isValid;

    OAIOperatorNormalization m_normalization;
    bool m_normalization_isSet;
    bool m_normalization_isValid;

    OAIOperatorType m_operator_type;
    bool m_operator_type_isSet;
    bool m_operator_type_isValid;

    OAIOperatorWebhook m_webhook;
    bool m_webhook_isSet;
    bool m_webhook_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOperatorConfiguration)

#endif // OAIOperatorConfiguration_H
