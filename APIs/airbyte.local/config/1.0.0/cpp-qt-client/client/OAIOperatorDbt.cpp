/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperatorDbt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperatorDbt::OAIOperatorDbt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperatorDbt::OAIOperatorDbt() {
    this->initializeModel();
}

OAIOperatorDbt::~OAIOperatorDbt() {}

void OAIOperatorDbt::initializeModel() {

    m_dbt_arguments_isSet = false;
    m_dbt_arguments_isValid = false;

    m_docker_image_isSet = false;
    m_docker_image_isValid = false;

    m_git_repo_branch_isSet = false;
    m_git_repo_branch_isValid = false;

    m_git_repo_url_isSet = false;
    m_git_repo_url_isValid = false;
}

void OAIOperatorDbt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperatorDbt::fromJsonObject(QJsonObject json) {

    m_dbt_arguments_isValid = ::OpenAPI::fromJsonValue(m_dbt_arguments, json[QString("dbtArguments")]);
    m_dbt_arguments_isSet = !json[QString("dbtArguments")].isNull() && m_dbt_arguments_isValid;

    m_docker_image_isValid = ::OpenAPI::fromJsonValue(m_docker_image, json[QString("dockerImage")]);
    m_docker_image_isSet = !json[QString("dockerImage")].isNull() && m_docker_image_isValid;

    m_git_repo_branch_isValid = ::OpenAPI::fromJsonValue(m_git_repo_branch, json[QString("gitRepoBranch")]);
    m_git_repo_branch_isSet = !json[QString("gitRepoBranch")].isNull() && m_git_repo_branch_isValid;

    m_git_repo_url_isValid = ::OpenAPI::fromJsonValue(m_git_repo_url, json[QString("gitRepoUrl")]);
    m_git_repo_url_isSet = !json[QString("gitRepoUrl")].isNull() && m_git_repo_url_isValid;
}

QString OAIOperatorDbt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperatorDbt::asJsonObject() const {
    QJsonObject obj;
    if (m_dbt_arguments_isSet) {
        obj.insert(QString("dbtArguments"), ::OpenAPI::toJsonValue(m_dbt_arguments));
    }
    if (m_docker_image_isSet) {
        obj.insert(QString("dockerImage"), ::OpenAPI::toJsonValue(m_docker_image));
    }
    if (m_git_repo_branch_isSet) {
        obj.insert(QString("gitRepoBranch"), ::OpenAPI::toJsonValue(m_git_repo_branch));
    }
    if (m_git_repo_url_isSet) {
        obj.insert(QString("gitRepoUrl"), ::OpenAPI::toJsonValue(m_git_repo_url));
    }
    return obj;
}

QString OAIOperatorDbt::getDbtArguments() const {
    return m_dbt_arguments;
}
void OAIOperatorDbt::setDbtArguments(const QString &dbt_arguments) {
    m_dbt_arguments = dbt_arguments;
    m_dbt_arguments_isSet = true;
}

bool OAIOperatorDbt::is_dbt_arguments_Set() const{
    return m_dbt_arguments_isSet;
}

bool OAIOperatorDbt::is_dbt_arguments_Valid() const{
    return m_dbt_arguments_isValid;
}

QString OAIOperatorDbt::getDockerImage() const {
    return m_docker_image;
}
void OAIOperatorDbt::setDockerImage(const QString &docker_image) {
    m_docker_image = docker_image;
    m_docker_image_isSet = true;
}

bool OAIOperatorDbt::is_docker_image_Set() const{
    return m_docker_image_isSet;
}

bool OAIOperatorDbt::is_docker_image_Valid() const{
    return m_docker_image_isValid;
}

QString OAIOperatorDbt::getGitRepoBranch() const {
    return m_git_repo_branch;
}
void OAIOperatorDbt::setGitRepoBranch(const QString &git_repo_branch) {
    m_git_repo_branch = git_repo_branch;
    m_git_repo_branch_isSet = true;
}

bool OAIOperatorDbt::is_git_repo_branch_Set() const{
    return m_git_repo_branch_isSet;
}

bool OAIOperatorDbt::is_git_repo_branch_Valid() const{
    return m_git_repo_branch_isValid;
}

QString OAIOperatorDbt::getGitRepoUrl() const {
    return m_git_repo_url;
}
void OAIOperatorDbt::setGitRepoUrl(const QString &git_repo_url) {
    m_git_repo_url = git_repo_url;
    m_git_repo_url_isSet = true;
}

bool OAIOperatorDbt::is_git_repo_url_Set() const{
    return m_git_repo_url_isSet;
}

bool OAIOperatorDbt::is_git_repo_url_Valid() const{
    return m_git_repo_url_isValid;
}

bool OAIOperatorDbt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dbt_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_repo_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperatorDbt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_git_repo_url_isValid && true;
}

} // namespace OpenAPI
