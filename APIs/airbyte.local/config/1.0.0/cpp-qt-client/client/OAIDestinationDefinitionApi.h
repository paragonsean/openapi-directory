/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDestinationDefinitionApi_H
#define OAI_OAIDestinationDefinitionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomDestinationDefinitionCreate.h"
#include "OAIDestinationDefinitionIdRequestBody.h"
#include "OAIDestinationDefinitionIdWithWorkspaceId.h"
#include "OAIDestinationDefinitionRead.h"
#include "OAIDestinationDefinitionReadList.h"
#include "OAIDestinationDefinitionUpdate.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIPrivateDestinationDefinitionRead.h"
#include "OAIPrivateDestinationDefinitionReadList.h"
#include "OAIWorkspaceIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDestinationDefinitionApi : public QObject {
    Q_OBJECT

public:
    OAIDestinationDefinitionApi(const int timeOut = 0);
    ~OAIDestinationDefinitionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_custom_destination_definition_create OAICustomDestinationDefinitionCreate [optional]
    */
    virtual void createCustomDestinationDefinition(const ::OpenAPI::OptionalParam<OAICustomDestinationDefinitionCreate> &oai_custom_destination_definition_create = ::OpenAPI::OptionalParam<OAICustomDestinationDefinitionCreate>());

    /**
    * @param[in]  oai_destination_definition_id_request_body OAIDestinationDefinitionIdRequestBody [required]
    */
    virtual void deleteDestinationDefinition(const OAIDestinationDefinitionIdRequestBody &oai_destination_definition_id_request_body);

    /**
    * @param[in]  oai_destination_definition_id_request_body OAIDestinationDefinitionIdRequestBody [required]
    */
    virtual void getDestinationDefinition(const OAIDestinationDefinitionIdRequestBody &oai_destination_definition_id_request_body);

    /**
    * @param[in]  oai_destination_definition_id_with_workspace_id OAIDestinationDefinitionIdWithWorkspaceId [required]
    */
    virtual void getDestinationDefinitionForWorkspace(const OAIDestinationDefinitionIdWithWorkspaceId &oai_destination_definition_id_with_workspace_id);

    /**
    * @param[in]  oai_destination_definition_id_with_workspace_id OAIDestinationDefinitionIdWithWorkspaceId [required]
    */
    virtual void grantDestinationDefinitionToWorkspace(const OAIDestinationDefinitionIdWithWorkspaceId &oai_destination_definition_id_with_workspace_id);


    virtual void listDestinationDefinitions();

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [optional]
    */
    virtual void listDestinationDefinitionsForWorkspace(const ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody> &oai_workspace_id_request_body = ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody>());


    virtual void listLatestDestinationDefinitions();

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [optional]
    */
    virtual void listPrivateDestinationDefinitions(const ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody> &oai_workspace_id_request_body = ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody>());

    /**
    * @param[in]  oai_destination_definition_id_with_workspace_id OAIDestinationDefinitionIdWithWorkspaceId [required]
    */
    virtual void revokeDestinationDefinitionFromWorkspace(const OAIDestinationDefinitionIdWithWorkspaceId &oai_destination_definition_id_with_workspace_id);

    /**
    * @param[in]  oai_destination_definition_update OAIDestinationDefinitionUpdate [required]
    */
    virtual void updateDestinationDefinition(const OAIDestinationDefinitionUpdate &oai_destination_definition_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomDestinationDefinitionCallback(OAIHttpRequestWorker *worker);
    void deleteDestinationDefinitionCallback(OAIHttpRequestWorker *worker);
    void getDestinationDefinitionCallback(OAIHttpRequestWorker *worker);
    void getDestinationDefinitionForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void grantDestinationDefinitionToWorkspaceCallback(OAIHttpRequestWorker *worker);
    void listDestinationDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listDestinationDefinitionsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void listLatestDestinationDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listPrivateDestinationDefinitionsCallback(OAIHttpRequestWorker *worker);
    void revokeDestinationDefinitionFromWorkspaceCallback(OAIHttpRequestWorker *worker);
    void updateDestinationDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomDestinationDefinitionSignal(OAIDestinationDefinitionRead summary);
    void deleteDestinationDefinitionSignal();
    void getDestinationDefinitionSignal(OAIDestinationDefinitionRead summary);
    void getDestinationDefinitionForWorkspaceSignal(OAIDestinationDefinitionRead summary);
    void grantDestinationDefinitionToWorkspaceSignal(OAIPrivateDestinationDefinitionRead summary);
    void listDestinationDefinitionsSignal(OAIDestinationDefinitionReadList summary);
    void listDestinationDefinitionsForWorkspaceSignal(OAIDestinationDefinitionReadList summary);
    void listLatestDestinationDefinitionsSignal(OAIDestinationDefinitionReadList summary);
    void listPrivateDestinationDefinitionsSignal(OAIPrivateDestinationDefinitionReadList summary);
    void revokeDestinationDefinitionFromWorkspaceSignal();
    void updateDestinationDefinitionSignal(OAIDestinationDefinitionRead summary);


    void createCustomDestinationDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionRead summary);
    void deleteDestinationDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void getDestinationDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionRead summary);
    void getDestinationDefinitionForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionRead summary);
    void grantDestinationDefinitionToWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPrivateDestinationDefinitionRead summary);
    void listDestinationDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionReadList summary);
    void listDestinationDefinitionsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionReadList summary);
    void listLatestDestinationDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionReadList summary);
    void listPrivateDestinationDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIPrivateDestinationDefinitionReadList summary);
    void revokeDestinationDefinitionFromWorkspaceSignalFull(OAIHttpRequestWorker *worker);
    void updateDestinationDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDestinationDefinitionRead summary);

    Q_DECL_DEPRECATED_X("Use createCustomDestinationDefinitionSignalError() instead")
    void createCustomDestinationDefinitionSignalE(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomDestinationDefinitionSignalError(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDestinationDefinitionSignalError() instead")
    void deleteDestinationDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDestinationDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationDefinitionSignalError() instead")
    void getDestinationDefinitionSignalE(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationDefinitionSignalError(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationDefinitionForWorkspaceSignalError() instead")
    void getDestinationDefinitionForWorkspaceSignalE(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationDefinitionForWorkspaceSignalError(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantDestinationDefinitionToWorkspaceSignalError() instead")
    void grantDestinationDefinitionToWorkspaceSignalE(OAIPrivateDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void grantDestinationDefinitionToWorkspaceSignalError(OAIPrivateDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDestinationDefinitionsSignalError() instead")
    void listDestinationDefinitionsSignalE(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDestinationDefinitionsSignalError(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDestinationDefinitionsForWorkspaceSignalError() instead")
    void listDestinationDefinitionsForWorkspaceSignalE(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDestinationDefinitionsForWorkspaceSignalError(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestDestinationDefinitionsSignalError() instead")
    void listLatestDestinationDefinitionsSignalE(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestDestinationDefinitionsSignalError(OAIDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrivateDestinationDefinitionsSignalError() instead")
    void listPrivateDestinationDefinitionsSignalE(OAIPrivateDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrivateDestinationDefinitionsSignalError(OAIPrivateDestinationDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeDestinationDefinitionFromWorkspaceSignalError() instead")
    void revokeDestinationDefinitionFromWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeDestinationDefinitionFromWorkspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDestinationDefinitionSignalError() instead")
    void updateDestinationDefinitionSignalE(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDestinationDefinitionSignalError(OAIDestinationDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomDestinationDefinitionSignalErrorFull() instead")
    void createCustomDestinationDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomDestinationDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDestinationDefinitionSignalErrorFull() instead")
    void deleteDestinationDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDestinationDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationDefinitionSignalErrorFull() instead")
    void getDestinationDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationDefinitionForWorkspaceSignalErrorFull() instead")
    void getDestinationDefinitionForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationDefinitionForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantDestinationDefinitionToWorkspaceSignalErrorFull() instead")
    void grantDestinationDefinitionToWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void grantDestinationDefinitionToWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDestinationDefinitionsSignalErrorFull() instead")
    void listDestinationDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDestinationDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDestinationDefinitionsForWorkspaceSignalErrorFull() instead")
    void listDestinationDefinitionsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDestinationDefinitionsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestDestinationDefinitionsSignalErrorFull() instead")
    void listLatestDestinationDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestDestinationDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrivateDestinationDefinitionsSignalErrorFull() instead")
    void listPrivateDestinationDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrivateDestinationDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeDestinationDefinitionFromWorkspaceSignalErrorFull() instead")
    void revokeDestinationDefinitionFromWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeDestinationDefinitionFromWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDestinationDefinitionSignalErrorFull() instead")
    void updateDestinationDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDestinationDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
