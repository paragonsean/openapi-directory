/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceDefinitionApi_H
#define OAI_OAISourceDefinitionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomSourceDefinitionCreate.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIPrivateSourceDefinitionRead.h"
#include "OAIPrivateSourceDefinitionReadList.h"
#include "OAISourceDefinitionIdRequestBody.h"
#include "OAISourceDefinitionIdWithWorkspaceId.h"
#include "OAISourceDefinitionRead.h"
#include "OAISourceDefinitionReadList.h"
#include "OAISourceDefinitionUpdate.h"
#include "OAIWorkspaceIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceDefinitionApi : public QObject {
    Q_OBJECT

public:
    OAISourceDefinitionApi(const int timeOut = 0);
    ~OAISourceDefinitionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_custom_source_definition_create OAICustomSourceDefinitionCreate [optional]
    */
    virtual void createCustomSourceDefinition(const ::OpenAPI::OptionalParam<OAICustomSourceDefinitionCreate> &oai_custom_source_definition_create = ::OpenAPI::OptionalParam<OAICustomSourceDefinitionCreate>());

    /**
    * @param[in]  oai_source_definition_id_request_body OAISourceDefinitionIdRequestBody [required]
    */
    virtual void deleteSourceDefinition(const OAISourceDefinitionIdRequestBody &oai_source_definition_id_request_body);

    /**
    * @param[in]  oai_source_definition_id_request_body OAISourceDefinitionIdRequestBody [required]
    */
    virtual void getSourceDefinition(const OAISourceDefinitionIdRequestBody &oai_source_definition_id_request_body);

    /**
    * @param[in]  oai_source_definition_id_with_workspace_id OAISourceDefinitionIdWithWorkspaceId [required]
    */
    virtual void getSourceDefinitionForWorkspace(const OAISourceDefinitionIdWithWorkspaceId &oai_source_definition_id_with_workspace_id);

    /**
    * @param[in]  oai_source_definition_id_with_workspace_id OAISourceDefinitionIdWithWorkspaceId [required]
    */
    virtual void grantSourceDefinitionToWorkspace(const OAISourceDefinitionIdWithWorkspaceId &oai_source_definition_id_with_workspace_id);


    virtual void listLatestSourceDefinitions();

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [optional]
    */
    virtual void listPrivateSourceDefinitions(const ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody> &oai_workspace_id_request_body = ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody>());


    virtual void listSourceDefinitions();

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [optional]
    */
    virtual void listSourceDefinitionsForWorkspace(const ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody> &oai_workspace_id_request_body = ::OpenAPI::OptionalParam<OAIWorkspaceIdRequestBody>());

    /**
    * @param[in]  oai_source_definition_id_with_workspace_id OAISourceDefinitionIdWithWorkspaceId [required]
    */
    virtual void revokeSourceDefinitionFromWorkspace(const OAISourceDefinitionIdWithWorkspaceId &oai_source_definition_id_with_workspace_id);

    /**
    * @param[in]  oai_source_definition_update OAISourceDefinitionUpdate [optional]
    */
    virtual void updateSourceDefinition(const ::OpenAPI::OptionalParam<OAISourceDefinitionUpdate> &oai_source_definition_update = ::OpenAPI::OptionalParam<OAISourceDefinitionUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomSourceDefinitionCallback(OAIHttpRequestWorker *worker);
    void deleteSourceDefinitionCallback(OAIHttpRequestWorker *worker);
    void getSourceDefinitionCallback(OAIHttpRequestWorker *worker);
    void getSourceDefinitionForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void grantSourceDefinitionToWorkspaceCallback(OAIHttpRequestWorker *worker);
    void listLatestSourceDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listPrivateSourceDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listSourceDefinitionsCallback(OAIHttpRequestWorker *worker);
    void listSourceDefinitionsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void revokeSourceDefinitionFromWorkspaceCallback(OAIHttpRequestWorker *worker);
    void updateSourceDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomSourceDefinitionSignal(OAISourceDefinitionRead summary);
    void deleteSourceDefinitionSignal();
    void getSourceDefinitionSignal(OAISourceDefinitionRead summary);
    void getSourceDefinitionForWorkspaceSignal(OAISourceDefinitionRead summary);
    void grantSourceDefinitionToWorkspaceSignal(OAIPrivateSourceDefinitionRead summary);
    void listLatestSourceDefinitionsSignal(OAISourceDefinitionReadList summary);
    void listPrivateSourceDefinitionsSignal(OAIPrivateSourceDefinitionReadList summary);
    void listSourceDefinitionsSignal(OAISourceDefinitionReadList summary);
    void listSourceDefinitionsForWorkspaceSignal(OAISourceDefinitionReadList summary);
    void revokeSourceDefinitionFromWorkspaceSignal();
    void updateSourceDefinitionSignal(OAISourceDefinitionRead summary);


    void createCustomSourceDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionRead summary);
    void deleteSourceDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void getSourceDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionRead summary);
    void getSourceDefinitionForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionRead summary);
    void grantSourceDefinitionToWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPrivateSourceDefinitionRead summary);
    void listLatestSourceDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionReadList summary);
    void listPrivateSourceDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIPrivateSourceDefinitionReadList summary);
    void listSourceDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionReadList summary);
    void listSourceDefinitionsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionReadList summary);
    void revokeSourceDefinitionFromWorkspaceSignalFull(OAIHttpRequestWorker *worker);
    void updateSourceDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISourceDefinitionRead summary);

    Q_DECL_DEPRECATED_X("Use createCustomSourceDefinitionSignalError() instead")
    void createCustomSourceDefinitionSignalE(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomSourceDefinitionSignalError(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSourceDefinitionSignalError() instead")
    void deleteSourceDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourceDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceDefinitionSignalError() instead")
    void getSourceDefinitionSignalE(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceDefinitionSignalError(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceDefinitionForWorkspaceSignalError() instead")
    void getSourceDefinitionForWorkspaceSignalE(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceDefinitionForWorkspaceSignalError(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantSourceDefinitionToWorkspaceSignalError() instead")
    void grantSourceDefinitionToWorkspaceSignalE(OAIPrivateSourceDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void grantSourceDefinitionToWorkspaceSignalError(OAIPrivateSourceDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestSourceDefinitionsSignalError() instead")
    void listLatestSourceDefinitionsSignalE(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestSourceDefinitionsSignalError(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrivateSourceDefinitionsSignalError() instead")
    void listPrivateSourceDefinitionsSignalE(OAIPrivateSourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrivateSourceDefinitionsSignalError(OAIPrivateSourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceDefinitionsSignalError() instead")
    void listSourceDefinitionsSignalE(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceDefinitionsSignalError(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceDefinitionsForWorkspaceSignalError() instead")
    void listSourceDefinitionsForWorkspaceSignalE(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceDefinitionsForWorkspaceSignalError(OAISourceDefinitionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeSourceDefinitionFromWorkspaceSignalError() instead")
    void revokeSourceDefinitionFromWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeSourceDefinitionFromWorkspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceDefinitionSignalError() instead")
    void updateSourceDefinitionSignalE(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceDefinitionSignalError(OAISourceDefinitionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomSourceDefinitionSignalErrorFull() instead")
    void createCustomSourceDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomSourceDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSourceDefinitionSignalErrorFull() instead")
    void deleteSourceDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourceDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceDefinitionSignalErrorFull() instead")
    void getSourceDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceDefinitionForWorkspaceSignalErrorFull() instead")
    void getSourceDefinitionForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceDefinitionForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantSourceDefinitionToWorkspaceSignalErrorFull() instead")
    void grantSourceDefinitionToWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void grantSourceDefinitionToWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLatestSourceDefinitionsSignalErrorFull() instead")
    void listLatestSourceDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLatestSourceDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrivateSourceDefinitionsSignalErrorFull() instead")
    void listPrivateSourceDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrivateSourceDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceDefinitionsSignalErrorFull() instead")
    void listSourceDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceDefinitionsForWorkspaceSignalErrorFull() instead")
    void listSourceDefinitionsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceDefinitionsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeSourceDefinitionFromWorkspaceSignalErrorFull() instead")
    void revokeSourceDefinitionFromWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeSourceDefinitionFromWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceDefinitionSignalErrorFull() instead")
    void updateSourceDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
