/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkspaceRead.h
 *
 * 
 */

#ifndef OAIWorkspaceRead_H
#define OAIWorkspaceRead_H

#include <QJsonObject>

#include "OAIGeography.h"
#include "OAINotification.h"
#include "OAIWebhookConfigRead.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINotification;
class OAIWebhookConfigRead;

class OAIWorkspaceRead : public OAIObject {
public:
    OAIWorkspaceRead();
    OAIWorkspaceRead(QString json);
    ~OAIWorkspaceRead() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAnonymousDataCollection() const;
    void setAnonymousDataCollection(const bool &anonymous_data_collection);
    bool is_anonymous_data_collection_Set() const;
    bool is_anonymous_data_collection_Valid() const;

    QString getCustomerId() const;
    void setCustomerId(const QString &customer_id);
    bool is_customer_id_Set() const;
    bool is_customer_id_Valid() const;

    OAIGeography getDefaultGeography() const;
    void setDefaultGeography(const OAIGeography &default_geography);
    bool is_default_geography_Set() const;
    bool is_default_geography_Valid() const;

    bool isDisplaySetupWizard() const;
    void setDisplaySetupWizard(const bool &display_setup_wizard);
    bool is_display_setup_wizard_Set() const;
    bool is_display_setup_wizard_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    bool isFeedbackDone() const;
    void setFeedbackDone(const bool &feedback_done);
    bool is_feedback_done_Set() const;
    bool is_feedback_done_Valid() const;

    bool isFirstCompletedSync() const;
    void setFirstCompletedSync(const bool &first_completed_sync);
    bool is_first_completed_sync_Set() const;
    bool is_first_completed_sync_Valid() const;

    bool isInitialSetupComplete() const;
    void setInitialSetupComplete(const bool &initial_setup_complete);
    bool is_initial_setup_complete_Set() const;
    bool is_initial_setup_complete_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isNews() const;
    void setNews(const bool &news);
    bool is_news_Set() const;
    bool is_news_Valid() const;

    QList<OAINotification> getNotifications() const;
    void setNotifications(const QList<OAINotification> &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    bool isSecurityUpdates() const;
    void setSecurityUpdates(const bool &security_updates);
    bool is_security_updates_Set() const;
    bool is_security_updates_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QList<OAIWebhookConfigRead> getWebhookConfigs() const;
    void setWebhookConfigs(const QList<OAIWebhookConfigRead> &webhook_configs);
    bool is_webhook_configs_Set() const;
    bool is_webhook_configs_Valid() const;

    QString getWorkspaceId() const;
    void setWorkspaceId(const QString &workspace_id);
    bool is_workspace_id_Set() const;
    bool is_workspace_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_anonymous_data_collection;
    bool m_anonymous_data_collection_isSet;
    bool m_anonymous_data_collection_isValid;

    QString m_customer_id;
    bool m_customer_id_isSet;
    bool m_customer_id_isValid;

    OAIGeography m_default_geography;
    bool m_default_geography_isSet;
    bool m_default_geography_isValid;

    bool m_display_setup_wizard;
    bool m_display_setup_wizard_isSet;
    bool m_display_setup_wizard_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    bool m_feedback_done;
    bool m_feedback_done_isSet;
    bool m_feedback_done_isValid;

    bool m_first_completed_sync;
    bool m_first_completed_sync_isSet;
    bool m_first_completed_sync_isValid;

    bool m_initial_setup_complete;
    bool m_initial_setup_complete_isSet;
    bool m_initial_setup_complete_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_news;
    bool m_news_isSet;
    bool m_news_isValid;

    QList<OAINotification> m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    bool m_security_updates;
    bool m_security_updates_isSet;
    bool m_security_updates_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QList<OAIWebhookConfigRead> m_webhook_configs;
    bool m_webhook_configs_isSet;
    bool m_webhook_configs_isValid;

    QString m_workspace_id;
    bool m_workspace_id_isSet;
    bool m_workspace_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkspaceRead)

#endif // OAIWorkspaceRead_H
