/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceDiscoverSchemaRead.h
 *
 * Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
 */

#ifndef OAISourceDiscoverSchemaRead_H
#define OAISourceDiscoverSchemaRead_H

#include <QJsonObject>

#include "OAIAirbyteCatalog.h"
#include "OAICatalogDiff.h"
#include "OAIConnectionStatus.h"
#include "OAISynchronousJobRead.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAirbyteCatalog;
class OAICatalogDiff;
class OAISynchronousJobRead;

class OAISourceDiscoverSchemaRead : public OAIObject {
public:
    OAISourceDiscoverSchemaRead();
    OAISourceDiscoverSchemaRead(QString json);
    ~OAISourceDiscoverSchemaRead() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBreakingChange() const;
    void setBreakingChange(const bool &breaking_change);
    bool is_breaking_change_Set() const;
    bool is_breaking_change_Valid() const;

    OAIAirbyteCatalog getCatalog() const;
    void setCatalog(const OAIAirbyteCatalog &catalog);
    bool is_catalog_Set() const;
    bool is_catalog_Valid() const;

    OAICatalogDiff getCatalogDiff() const;
    void setCatalogDiff(const OAICatalogDiff &catalog_diff);
    bool is_catalog_diff_Set() const;
    bool is_catalog_diff_Valid() const;

    QString getCatalogId() const;
    void setCatalogId(const QString &catalog_id);
    bool is_catalog_id_Set() const;
    bool is_catalog_id_Valid() const;

    OAIConnectionStatus getConnectionStatus() const;
    void setConnectionStatus(const OAIConnectionStatus &connection_status);
    bool is_connection_status_Set() const;
    bool is_connection_status_Valid() const;

    OAISynchronousJobRead getJobInfo() const;
    void setJobInfo(const OAISynchronousJobRead &job_info);
    bool is_job_info_Set() const;
    bool is_job_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_breaking_change;
    bool m_breaking_change_isSet;
    bool m_breaking_change_isValid;

    OAIAirbyteCatalog m_catalog;
    bool m_catalog_isSet;
    bool m_catalog_isValid;

    OAICatalogDiff m_catalog_diff;
    bool m_catalog_diff_isSet;
    bool m_catalog_diff_isValid;

    QString m_catalog_id;
    bool m_catalog_id_isSet;
    bool m_catalog_id_isValid;

    OAIConnectionStatus m_connection_status;
    bool m_connection_status_isSet;
    bool m_connection_status_isValid;

    OAISynchronousJobRead m_job_info;
    bool m_job_info_isSet;
    bool m_job_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceDiscoverSchemaRead)

#endif // OAISourceDiscoverSchemaRead_H
