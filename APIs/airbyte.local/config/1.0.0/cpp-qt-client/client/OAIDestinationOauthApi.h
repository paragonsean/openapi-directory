/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDestinationOauthApi_H
#define OAI_OAIDestinationOauthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompleteDestinationOAuthRequest.h"
#include "OAIDestinationOauthConsentRequest.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAIKnownExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIOAuthConsentRead.h"
#include "OAISetInstancewideDestinationOauthParamsRequestBody.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDestinationOauthApi : public QObject {
    Q_OBJECT

public:
    OAIDestinationOauthApi(const int timeOut = 0);
    ~OAIDestinationOauthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_complete_destination_o_auth_request OAICompleteDestinationOAuthRequest [required]
    */
    virtual void completeDestinationOAuth(const OAICompleteDestinationOAuthRequest &oai_complete_destination_o_auth_request);

    /**
    * @param[in]  oai_destination_oauth_consent_request OAIDestinationOauthConsentRequest [required]
    */
    virtual void getDestinationOAuthConsent(const OAIDestinationOauthConsentRequest &oai_destination_oauth_consent_request);

    /**
    * @param[in]  oai_set_instancewide_destination_oauth_params_request_body OAISetInstancewideDestinationOauthParamsRequestBody [required]
    */
    virtual void setInstancewideDestinationOauthParams(const OAISetInstancewideDestinationOauthParamsRequestBody &oai_set_instancewide_destination_oauth_params_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void completeDestinationOAuthCallback(OAIHttpRequestWorker *worker);
    void getDestinationOAuthConsentCallback(OAIHttpRequestWorker *worker);
    void setInstancewideDestinationOauthParamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void completeDestinationOAuthSignal(QMap<QString, QJsonValue> summary);
    void getDestinationOAuthConsentSignal(OAIOAuthConsentRead summary);
    void setInstancewideDestinationOauthParamsSignal();


    void completeDestinationOAuthSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void getDestinationOAuthConsentSignalFull(OAIHttpRequestWorker *worker, OAIOAuthConsentRead summary);
    void setInstancewideDestinationOauthParamsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use completeDestinationOAuthSignalError() instead")
    void completeDestinationOAuthSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeDestinationOAuthSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationOAuthConsentSignalError() instead")
    void getDestinationOAuthConsentSignalE(OAIOAuthConsentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationOAuthConsentSignalError(OAIOAuthConsentRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInstancewideDestinationOauthParamsSignalError() instead")
    void setInstancewideDestinationOauthParamsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setInstancewideDestinationOauthParamsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use completeDestinationOAuthSignalErrorFull() instead")
    void completeDestinationOAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeDestinationOAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDestinationOAuthConsentSignalErrorFull() instead")
    void getDestinationOAuthConsentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDestinationOAuthConsentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInstancewideDestinationOauthParamsSignalErrorFull() instead")
    void setInstancewideDestinationOauthParamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setInstancewideDestinationOauthParamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
