/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_customerio_configuration_isSet = false;
    m_customerio_configuration_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_send_on_failure_isSet = false;
    m_send_on_failure_isValid = false;

    m_send_on_success_isSet = false;
    m_send_on_success_isValid = false;

    m_slack_configuration_isSet = false;
    m_slack_configuration_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_customerio_configuration_isValid = ::OpenAPI::fromJsonValue(m_customerio_configuration, json[QString("customerioConfiguration")]);
    m_customerio_configuration_isSet = !json[QString("customerioConfiguration")].isNull() && m_customerio_configuration_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_send_on_failure_isValid = ::OpenAPI::fromJsonValue(m_send_on_failure, json[QString("sendOnFailure")]);
    m_send_on_failure_isSet = !json[QString("sendOnFailure")].isNull() && m_send_on_failure_isValid;

    m_send_on_success_isValid = ::OpenAPI::fromJsonValue(m_send_on_success, json[QString("sendOnSuccess")]);
    m_send_on_success_isSet = !json[QString("sendOnSuccess")].isNull() && m_send_on_success_isValid;

    m_slack_configuration_isValid = ::OpenAPI::fromJsonValue(m_slack_configuration, json[QString("slackConfiguration")]);
    m_slack_configuration_isSet = !json[QString("slackConfiguration")].isNull() && m_slack_configuration_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_customerio_configuration_isSet) {
        obj.insert(QString("customerioConfiguration"), ::OpenAPI::toJsonValue(m_customerio_configuration));
    }
    if (m_notification_type.isSet()) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_send_on_failure_isSet) {
        obj.insert(QString("sendOnFailure"), ::OpenAPI::toJsonValue(m_send_on_failure));
    }
    if (m_send_on_success_isSet) {
        obj.insert(QString("sendOnSuccess"), ::OpenAPI::toJsonValue(m_send_on_success));
    }
    if (m_slack_configuration.isSet()) {
        obj.insert(QString("slackConfiguration"), ::OpenAPI::toJsonValue(m_slack_configuration));
    }
    return obj;
}

OAIObject OAINotification::getCustomerioConfiguration() const {
    return m_customerio_configuration;
}
void OAINotification::setCustomerioConfiguration(const OAIObject &customerio_configuration) {
    m_customerio_configuration = customerio_configuration;
    m_customerio_configuration_isSet = true;
}

bool OAINotification::is_customerio_configuration_Set() const{
    return m_customerio_configuration_isSet;
}

bool OAINotification::is_customerio_configuration_Valid() const{
    return m_customerio_configuration_isValid;
}

OAINotificationType OAINotification::getNotificationType() const {
    return m_notification_type;
}
void OAINotification::setNotificationType(const OAINotificationType &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAINotification::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAINotification::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

bool OAINotification::isSendOnFailure() const {
    return m_send_on_failure;
}
void OAINotification::setSendOnFailure(const bool &send_on_failure) {
    m_send_on_failure = send_on_failure;
    m_send_on_failure_isSet = true;
}

bool OAINotification::is_send_on_failure_Set() const{
    return m_send_on_failure_isSet;
}

bool OAINotification::is_send_on_failure_Valid() const{
    return m_send_on_failure_isValid;
}

bool OAINotification::isSendOnSuccess() const {
    return m_send_on_success;
}
void OAINotification::setSendOnSuccess(const bool &send_on_success) {
    m_send_on_success = send_on_success;
    m_send_on_success_isSet = true;
}

bool OAINotification::is_send_on_success_Set() const{
    return m_send_on_success_isSet;
}

bool OAINotification::is_send_on_success_Valid() const{
    return m_send_on_success_isValid;
}

OAISlackNotificationConfiguration OAINotification::getSlackConfiguration() const {
    return m_slack_configuration;
}
void OAINotification::setSlackConfiguration(const OAISlackNotificationConfiguration &slack_configuration) {
    m_slack_configuration = slack_configuration;
    m_slack_configuration_isSet = true;
}

bool OAINotification::is_slack_configuration_Set() const{
    return m_slack_configuration_isSet;
}

bool OAINotification::is_slack_configuration_Valid() const{
    return m_slack_configuration_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customerio_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_on_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_on_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notification_type_isValid && m_send_on_failure_isValid && m_send_on_success_isValid && true;
}

} // namespace OpenAPI
