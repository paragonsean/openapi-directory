/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDbMigrationRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDbMigrationRead::OAIDbMigrationRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDbMigrationRead::OAIDbMigrationRead() {
    this->initializeModel();
}

OAIDbMigrationRead::~OAIDbMigrationRead() {}

void OAIDbMigrationRead::initializeModel() {

    m_migrated_at_isSet = false;
    m_migrated_at_isValid = false;

    m_migrated_by_isSet = false;
    m_migrated_by_isValid = false;

    m_migration_description_isSet = false;
    m_migration_description_isValid = false;

    m_migration_script_isSet = false;
    m_migration_script_isValid = false;

    m_migration_state_isSet = false;
    m_migration_state_isValid = false;

    m_migration_type_isSet = false;
    m_migration_type_isValid = false;

    m_migration_version_isSet = false;
    m_migration_version_isValid = false;
}

void OAIDbMigrationRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDbMigrationRead::fromJsonObject(QJsonObject json) {

    m_migrated_at_isValid = ::OpenAPI::fromJsonValue(m_migrated_at, json[QString("migratedAt")]);
    m_migrated_at_isSet = !json[QString("migratedAt")].isNull() && m_migrated_at_isValid;

    m_migrated_by_isValid = ::OpenAPI::fromJsonValue(m_migrated_by, json[QString("migratedBy")]);
    m_migrated_by_isSet = !json[QString("migratedBy")].isNull() && m_migrated_by_isValid;

    m_migration_description_isValid = ::OpenAPI::fromJsonValue(m_migration_description, json[QString("migrationDescription")]);
    m_migration_description_isSet = !json[QString("migrationDescription")].isNull() && m_migration_description_isValid;

    m_migration_script_isValid = ::OpenAPI::fromJsonValue(m_migration_script, json[QString("migrationScript")]);
    m_migration_script_isSet = !json[QString("migrationScript")].isNull() && m_migration_script_isValid;

    m_migration_state_isValid = ::OpenAPI::fromJsonValue(m_migration_state, json[QString("migrationState")]);
    m_migration_state_isSet = !json[QString("migrationState")].isNull() && m_migration_state_isValid;

    m_migration_type_isValid = ::OpenAPI::fromJsonValue(m_migration_type, json[QString("migrationType")]);
    m_migration_type_isSet = !json[QString("migrationType")].isNull() && m_migration_type_isValid;

    m_migration_version_isValid = ::OpenAPI::fromJsonValue(m_migration_version, json[QString("migrationVersion")]);
    m_migration_version_isSet = !json[QString("migrationVersion")].isNull() && m_migration_version_isValid;
}

QString OAIDbMigrationRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDbMigrationRead::asJsonObject() const {
    QJsonObject obj;
    if (m_migrated_at_isSet) {
        obj.insert(QString("migratedAt"), ::OpenAPI::toJsonValue(m_migrated_at));
    }
    if (m_migrated_by_isSet) {
        obj.insert(QString("migratedBy"), ::OpenAPI::toJsonValue(m_migrated_by));
    }
    if (m_migration_description_isSet) {
        obj.insert(QString("migrationDescription"), ::OpenAPI::toJsonValue(m_migration_description));
    }
    if (m_migration_script_isSet) {
        obj.insert(QString("migrationScript"), ::OpenAPI::toJsonValue(m_migration_script));
    }
    if (m_migration_state.isSet()) {
        obj.insert(QString("migrationState"), ::OpenAPI::toJsonValue(m_migration_state));
    }
    if (m_migration_type_isSet) {
        obj.insert(QString("migrationType"), ::OpenAPI::toJsonValue(m_migration_type));
    }
    if (m_migration_version_isSet) {
        obj.insert(QString("migrationVersion"), ::OpenAPI::toJsonValue(m_migration_version));
    }
    return obj;
}

qint64 OAIDbMigrationRead::getMigratedAt() const {
    return m_migrated_at;
}
void OAIDbMigrationRead::setMigratedAt(const qint64 &migrated_at) {
    m_migrated_at = migrated_at;
    m_migrated_at_isSet = true;
}

bool OAIDbMigrationRead::is_migrated_at_Set() const{
    return m_migrated_at_isSet;
}

bool OAIDbMigrationRead::is_migrated_at_Valid() const{
    return m_migrated_at_isValid;
}

QString OAIDbMigrationRead::getMigratedBy() const {
    return m_migrated_by;
}
void OAIDbMigrationRead::setMigratedBy(const QString &migrated_by) {
    m_migrated_by = migrated_by;
    m_migrated_by_isSet = true;
}

bool OAIDbMigrationRead::is_migrated_by_Set() const{
    return m_migrated_by_isSet;
}

bool OAIDbMigrationRead::is_migrated_by_Valid() const{
    return m_migrated_by_isValid;
}

QString OAIDbMigrationRead::getMigrationDescription() const {
    return m_migration_description;
}
void OAIDbMigrationRead::setMigrationDescription(const QString &migration_description) {
    m_migration_description = migration_description;
    m_migration_description_isSet = true;
}

bool OAIDbMigrationRead::is_migration_description_Set() const{
    return m_migration_description_isSet;
}

bool OAIDbMigrationRead::is_migration_description_Valid() const{
    return m_migration_description_isValid;
}

QString OAIDbMigrationRead::getMigrationScript() const {
    return m_migration_script;
}
void OAIDbMigrationRead::setMigrationScript(const QString &migration_script) {
    m_migration_script = migration_script;
    m_migration_script_isSet = true;
}

bool OAIDbMigrationRead::is_migration_script_Set() const{
    return m_migration_script_isSet;
}

bool OAIDbMigrationRead::is_migration_script_Valid() const{
    return m_migration_script_isValid;
}

OAIDbMigrationState OAIDbMigrationRead::getMigrationState() const {
    return m_migration_state;
}
void OAIDbMigrationRead::setMigrationState(const OAIDbMigrationState &migration_state) {
    m_migration_state = migration_state;
    m_migration_state_isSet = true;
}

bool OAIDbMigrationRead::is_migration_state_Set() const{
    return m_migration_state_isSet;
}

bool OAIDbMigrationRead::is_migration_state_Valid() const{
    return m_migration_state_isValid;
}

QString OAIDbMigrationRead::getMigrationType() const {
    return m_migration_type;
}
void OAIDbMigrationRead::setMigrationType(const QString &migration_type) {
    m_migration_type = migration_type;
    m_migration_type_isSet = true;
}

bool OAIDbMigrationRead::is_migration_type_Set() const{
    return m_migration_type_isSet;
}

bool OAIDbMigrationRead::is_migration_type_Valid() const{
    return m_migration_type_isValid;
}

QString OAIDbMigrationRead::getMigrationVersion() const {
    return m_migration_version;
}
void OAIDbMigrationRead::setMigrationVersion(const QString &migration_version) {
    m_migration_version = migration_version;
    m_migration_version_isSet = true;
}

bool OAIDbMigrationRead::is_migration_version_Set() const{
    return m_migration_version_isSet;
}

bool OAIDbMigrationRead::is_migration_version_Valid() const{
    return m_migration_version_isValid;
}

bool OAIDbMigrationRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_migrated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDbMigrationRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_migration_description_isValid && m_migration_type_isValid && m_migration_version_isValid && true;
}

} // namespace OpenAPI
