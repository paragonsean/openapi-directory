/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttemptFailureReason.h
 *
 * 
 */

#ifndef OAIAttemptFailureReason_H
#define OAIAttemptFailureReason_H

#include <QJsonObject>

#include "OAIAttemptFailureOrigin.h"
#include "OAIAttemptFailureType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAttemptFailureReason : public OAIObject {
public:
    OAIAttemptFailureReason();
    OAIAttemptFailureReason(QString json);
    ~OAIAttemptFailureReason() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExternalMessage() const;
    void setExternalMessage(const QString &external_message);
    bool is_external_message_Set() const;
    bool is_external_message_Valid() const;

    OAIAttemptFailureOrigin getFailureOrigin() const;
    void setFailureOrigin(const OAIAttemptFailureOrigin &failure_origin);
    bool is_failure_origin_Set() const;
    bool is_failure_origin_Valid() const;

    OAIAttemptFailureType getFailureType() const;
    void setFailureType(const OAIAttemptFailureType &failure_type);
    bool is_failure_type_Set() const;
    bool is_failure_type_Valid() const;

    QString getInternalMessage() const;
    void setInternalMessage(const QString &internal_message);
    bool is_internal_message_Set() const;
    bool is_internal_message_Valid() const;

    bool isRetryable() const;
    void setRetryable(const bool &retryable);
    bool is_retryable_Set() const;
    bool is_retryable_Valid() const;

    QString getStacktrace() const;
    void setStacktrace(const QString &stacktrace);
    bool is_stacktrace_Set() const;
    bool is_stacktrace_Valid() const;

    qint64 getTimestamp() const;
    void setTimestamp(const qint64 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_external_message;
    bool m_external_message_isSet;
    bool m_external_message_isValid;

    OAIAttemptFailureOrigin m_failure_origin;
    bool m_failure_origin_isSet;
    bool m_failure_origin_isValid;

    OAIAttemptFailureType m_failure_type;
    bool m_failure_type_isSet;
    bool m_failure_type_isValid;

    QString m_internal_message;
    bool m_internal_message_isSet;
    bool m_internal_message_isValid;

    bool m_retryable;
    bool m_retryable_isSet;
    bool m_retryable_isValid;

    QString m_stacktrace;
    bool m_stacktrace_isSet;
    bool m_stacktrace_isValid;

    qint64 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttemptFailureReason)

#endif // OAIAttemptFailureReason_H
