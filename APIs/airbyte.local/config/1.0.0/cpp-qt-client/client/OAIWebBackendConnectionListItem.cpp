/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebBackendConnectionListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebBackendConnectionListItem::OAIWebBackendConnectionListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebBackendConnectionListItem::OAIWebBackendConnectionListItem() {
    this->initializeModel();
}

OAIWebBackendConnectionListItem::~OAIWebBackendConnectionListItem() {}

void OAIWebBackendConnectionListItem::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_is_syncing_isSet = false;
    m_is_syncing_isValid = false;

    m_latest_sync_job_created_at_isSet = false;
    m_latest_sync_job_created_at_isValid = false;

    m_latest_sync_job_status_isSet = false;
    m_latest_sync_job_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_data_isSet = false;
    m_schedule_data_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schema_change_isSet = false;
    m_schema_change_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIWebBackendConnectionListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebBackendConnectionListItem::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_is_syncing_isValid = ::OpenAPI::fromJsonValue(m_is_syncing, json[QString("isSyncing")]);
    m_is_syncing_isSet = !json[QString("isSyncing")].isNull() && m_is_syncing_isValid;

    m_latest_sync_job_created_at_isValid = ::OpenAPI::fromJsonValue(m_latest_sync_job_created_at, json[QString("latestSyncJobCreatedAt")]);
    m_latest_sync_job_created_at_isSet = !json[QString("latestSyncJobCreatedAt")].isNull() && m_latest_sync_job_created_at_isValid;

    m_latest_sync_job_status_isValid = ::OpenAPI::fromJsonValue(m_latest_sync_job_status, json[QString("latestSyncJobStatus")]);
    m_latest_sync_job_status_isSet = !json[QString("latestSyncJobStatus")].isNull() && m_latest_sync_job_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schedule_data_isValid = ::OpenAPI::fromJsonValue(m_schedule_data, json[QString("scheduleData")]);
    m_schedule_data_isSet = !json[QString("scheduleData")].isNull() && m_schedule_data_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("scheduleType")]);
    m_schedule_type_isSet = !json[QString("scheduleType")].isNull() && m_schedule_type_isValid;

    m_schema_change_isValid = ::OpenAPI::fromJsonValue(m_schema_change, json[QString("schemaChange")]);
    m_schema_change_isSet = !json[QString("schemaChange")].isNull() && m_schema_change_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIWebBackendConnectionListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebBackendConnectionListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_is_syncing_isSet) {
        obj.insert(QString("isSyncing"), ::OpenAPI::toJsonValue(m_is_syncing));
    }
    if (m_latest_sync_job_created_at_isSet) {
        obj.insert(QString("latestSyncJobCreatedAt"), ::OpenAPI::toJsonValue(m_latest_sync_job_created_at));
    }
    if (m_latest_sync_job_status.isSet()) {
        obj.insert(QString("latestSyncJobStatus"), ::OpenAPI::toJsonValue(m_latest_sync_job_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule_data.isSet()) {
        obj.insert(QString("scheduleData"), ::OpenAPI::toJsonValue(m_schedule_data));
    }
    if (m_schedule_type.isSet()) {
        obj.insert(QString("scheduleType"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schema_change.isSet()) {
        obj.insert(QString("schemaChange"), ::OpenAPI::toJsonValue(m_schema_change));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIWebBackendConnectionListItem::getConnectionId() const {
    return m_connection_id;
}
void OAIWebBackendConnectionListItem::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIWebBackendConnectionListItem::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIDestinationSnippetRead OAIWebBackendConnectionListItem::getDestination() const {
    return m_destination;
}
void OAIWebBackendConnectionListItem::setDestination(const OAIDestinationSnippetRead &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIWebBackendConnectionListItem::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIWebBackendConnectionListItem::isIsSyncing() const {
    return m_is_syncing;
}
void OAIWebBackendConnectionListItem::setIsSyncing(const bool &is_syncing) {
    m_is_syncing = is_syncing;
    m_is_syncing_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_is_syncing_Set() const{
    return m_is_syncing_isSet;
}

bool OAIWebBackendConnectionListItem::is_is_syncing_Valid() const{
    return m_is_syncing_isValid;
}

qint64 OAIWebBackendConnectionListItem::getLatestSyncJobCreatedAt() const {
    return m_latest_sync_job_created_at;
}
void OAIWebBackendConnectionListItem::setLatestSyncJobCreatedAt(const qint64 &latest_sync_job_created_at) {
    m_latest_sync_job_created_at = latest_sync_job_created_at;
    m_latest_sync_job_created_at_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_latest_sync_job_created_at_Set() const{
    return m_latest_sync_job_created_at_isSet;
}

bool OAIWebBackendConnectionListItem::is_latest_sync_job_created_at_Valid() const{
    return m_latest_sync_job_created_at_isValid;
}

OAIJobStatus OAIWebBackendConnectionListItem::getLatestSyncJobStatus() const {
    return m_latest_sync_job_status;
}
void OAIWebBackendConnectionListItem::setLatestSyncJobStatus(const OAIJobStatus &latest_sync_job_status) {
    m_latest_sync_job_status = latest_sync_job_status;
    m_latest_sync_job_status_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_latest_sync_job_status_Set() const{
    return m_latest_sync_job_status_isSet;
}

bool OAIWebBackendConnectionListItem::is_latest_sync_job_status_Valid() const{
    return m_latest_sync_job_status_isValid;
}

QString OAIWebBackendConnectionListItem::getName() const {
    return m_name;
}
void OAIWebBackendConnectionListItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebBackendConnectionListItem::is_name_Valid() const{
    return m_name_isValid;
}

OAIConnectionScheduleData OAIWebBackendConnectionListItem::getScheduleData() const {
    return m_schedule_data;
}
void OAIWebBackendConnectionListItem::setScheduleData(const OAIConnectionScheduleData &schedule_data) {
    m_schedule_data = schedule_data;
    m_schedule_data_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_schedule_data_Set() const{
    return m_schedule_data_isSet;
}

bool OAIWebBackendConnectionListItem::is_schedule_data_Valid() const{
    return m_schedule_data_isValid;
}

OAIConnectionScheduleType OAIWebBackendConnectionListItem::getScheduleType() const {
    return m_schedule_type;
}
void OAIWebBackendConnectionListItem::setScheduleType(const OAIConnectionScheduleType &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIWebBackendConnectionListItem::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

OAISchemaChange OAIWebBackendConnectionListItem::getSchemaChange() const {
    return m_schema_change;
}
void OAIWebBackendConnectionListItem::setSchemaChange(const OAISchemaChange &schema_change) {
    m_schema_change = schema_change;
    m_schema_change_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_schema_change_Set() const{
    return m_schema_change_isSet;
}

bool OAIWebBackendConnectionListItem::is_schema_change_Valid() const{
    return m_schema_change_isValid;
}

OAISourceSnippetRead OAIWebBackendConnectionListItem::getSource() const {
    return m_source;
}
void OAIWebBackendConnectionListItem::setSource(const OAISourceSnippetRead &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWebBackendConnectionListItem::is_source_Valid() const{
    return m_source_isValid;
}

OAIConnectionStatus OAIWebBackendConnectionListItem::getStatus() const {
    return m_status;
}
void OAIWebBackendConnectionListItem::setStatus(const OAIConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebBackendConnectionListItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebBackendConnectionListItem::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIWebBackendConnectionListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_syncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_sync_job_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_sync_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebBackendConnectionListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_id_isValid && m_destination_isValid && m_is_syncing_isValid && m_name_isValid && m_schema_change_isValid && m_source_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
