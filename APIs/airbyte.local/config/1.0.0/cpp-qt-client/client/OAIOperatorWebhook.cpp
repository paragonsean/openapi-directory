/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperatorWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperatorWebhook::OAIOperatorWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperatorWebhook::OAIOperatorWebhook() {
    this->initializeModel();
}

OAIOperatorWebhook::~OAIOperatorWebhook() {}

void OAIOperatorWebhook::initializeModel() {

    m_dbt_cloud_isSet = false;
    m_dbt_cloud_isValid = false;

    m_execution_body_isSet = false;
    m_execution_body_isValid = false;

    m_execution_url_isSet = false;
    m_execution_url_isValid = false;

    m_webhook_config_id_isSet = false;
    m_webhook_config_id_isValid = false;

    m_webhook_type_isSet = false;
    m_webhook_type_isValid = false;
}

void OAIOperatorWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperatorWebhook::fromJsonObject(QJsonObject json) {

    m_dbt_cloud_isValid = ::OpenAPI::fromJsonValue(m_dbt_cloud, json[QString("dbtCloud")]);
    m_dbt_cloud_isSet = !json[QString("dbtCloud")].isNull() && m_dbt_cloud_isValid;

    m_execution_body_isValid = ::OpenAPI::fromJsonValue(m_execution_body, json[QString("executionBody")]);
    m_execution_body_isSet = !json[QString("executionBody")].isNull() && m_execution_body_isValid;

    m_execution_url_isValid = ::OpenAPI::fromJsonValue(m_execution_url, json[QString("executionUrl")]);
    m_execution_url_isSet = !json[QString("executionUrl")].isNull() && m_execution_url_isValid;

    m_webhook_config_id_isValid = ::OpenAPI::fromJsonValue(m_webhook_config_id, json[QString("webhookConfigId")]);
    m_webhook_config_id_isSet = !json[QString("webhookConfigId")].isNull() && m_webhook_config_id_isValid;

    m_webhook_type_isValid = ::OpenAPI::fromJsonValue(m_webhook_type, json[QString("webhookType")]);
    m_webhook_type_isSet = !json[QString("webhookType")].isNull() && m_webhook_type_isValid;
}

QString OAIOperatorWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperatorWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_dbt_cloud.isSet()) {
        obj.insert(QString("dbtCloud"), ::OpenAPI::toJsonValue(m_dbt_cloud));
    }
    if (m_execution_body_isSet) {
        obj.insert(QString("executionBody"), ::OpenAPI::toJsonValue(m_execution_body));
    }
    if (m_execution_url_isSet) {
        obj.insert(QString("executionUrl"), ::OpenAPI::toJsonValue(m_execution_url));
    }
    if (m_webhook_config_id_isSet) {
        obj.insert(QString("webhookConfigId"), ::OpenAPI::toJsonValue(m_webhook_config_id));
    }
    if (m_webhook_type_isSet) {
        obj.insert(QString("webhookType"), ::OpenAPI::toJsonValue(m_webhook_type));
    }
    return obj;
}

OAIOperatorWebhook_dbtCloud OAIOperatorWebhook::getDbtCloud() const {
    return m_dbt_cloud;
}
void OAIOperatorWebhook::setDbtCloud(const OAIOperatorWebhook_dbtCloud &dbt_cloud) {
    m_dbt_cloud = dbt_cloud;
    m_dbt_cloud_isSet = true;
}

bool OAIOperatorWebhook::is_dbt_cloud_Set() const{
    return m_dbt_cloud_isSet;
}

bool OAIOperatorWebhook::is_dbt_cloud_Valid() const{
    return m_dbt_cloud_isValid;
}

QString OAIOperatorWebhook::getExecutionBody() const {
    return m_execution_body;
}
void OAIOperatorWebhook::setExecutionBody(const QString &execution_body) {
    m_execution_body = execution_body;
    m_execution_body_isSet = true;
}

bool OAIOperatorWebhook::is_execution_body_Set() const{
    return m_execution_body_isSet;
}

bool OAIOperatorWebhook::is_execution_body_Valid() const{
    return m_execution_body_isValid;
}

QString OAIOperatorWebhook::getExecutionUrl() const {
    return m_execution_url;
}
void OAIOperatorWebhook::setExecutionUrl(const QString &execution_url) {
    m_execution_url = execution_url;
    m_execution_url_isSet = true;
}

bool OAIOperatorWebhook::is_execution_url_Set() const{
    return m_execution_url_isSet;
}

bool OAIOperatorWebhook::is_execution_url_Valid() const{
    return m_execution_url_isValid;
}

QString OAIOperatorWebhook::getWebhookConfigId() const {
    return m_webhook_config_id;
}
void OAIOperatorWebhook::setWebhookConfigId(const QString &webhook_config_id) {
    m_webhook_config_id = webhook_config_id;
    m_webhook_config_id_isSet = true;
}

bool OAIOperatorWebhook::is_webhook_config_id_Set() const{
    return m_webhook_config_id_isSet;
}

bool OAIOperatorWebhook::is_webhook_config_id_Valid() const{
    return m_webhook_config_id_isValid;
}

QString OAIOperatorWebhook::getWebhookType() const {
    return m_webhook_type;
}
void OAIOperatorWebhook::setWebhookType(const QString &webhook_type) {
    m_webhook_type = webhook_type;
    m_webhook_type_isSet = true;
}

bool OAIOperatorWebhook::is_webhook_type_Set() const{
    return m_webhook_type_isSet;
}

bool OAIOperatorWebhook::is_webhook_type_Valid() const{
    return m_webhook_type_isValid;
}

bool OAIOperatorWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dbt_cloud.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperatorWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
