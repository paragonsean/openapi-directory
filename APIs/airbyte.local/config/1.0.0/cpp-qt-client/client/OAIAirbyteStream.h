/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAirbyteStream.h
 *
 * the immutable schema defined by the source
 */

#ifndef OAIAirbyteStream_H
#define OAIAirbyteStream_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAISyncMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAirbyteStream : public OAIObject {
public:
    OAIAirbyteStream();
    OAIAirbyteStream(QString json);
    ~OAIAirbyteStream() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDefaultCursorField() const;
    void setDefaultCursorField(const QList<QString> &default_cursor_field);
    bool is_default_cursor_field_Set() const;
    bool is_default_cursor_field_Valid() const;

    OAIObject getJsonSchema() const;
    void setJsonSchema(const OAIObject &json_schema);
    bool is_json_schema_Set() const;
    bool is_json_schema_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    bool isSourceDefinedCursor() const;
    void setSourceDefinedCursor(const bool &source_defined_cursor);
    bool is_source_defined_cursor_Set() const;
    bool is_source_defined_cursor_Valid() const;

    QList<QList<QString>> getSourceDefinedPrimaryKey() const;
    void setSourceDefinedPrimaryKey(const QList<QList<QString>> &source_defined_primary_key);
    bool is_source_defined_primary_key_Set() const;
    bool is_source_defined_primary_key_Valid() const;

    QList<OAISyncMode> getSupportedSyncModes() const;
    void setSupportedSyncModes(const QList<OAISyncMode> &supported_sync_modes);
    bool is_supported_sync_modes_Set() const;
    bool is_supported_sync_modes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_default_cursor_field;
    bool m_default_cursor_field_isSet;
    bool m_default_cursor_field_isValid;

    OAIObject m_json_schema;
    bool m_json_schema_isSet;
    bool m_json_schema_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    bool m_source_defined_cursor;
    bool m_source_defined_cursor_isSet;
    bool m_source_defined_cursor_isValid;

    QList<QList<QString>> m_source_defined_primary_key;
    bool m_source_defined_primary_key_isSet;
    bool m_source_defined_primary_key_isValid;

    QList<OAISyncMode> m_supported_sync_modes;
    bool m_supported_sync_modes_isSet;
    bool m_supported_sync_modes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAirbyteStream)

#endif // OAIAirbyteStream_H
