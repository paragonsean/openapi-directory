/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISynchronousJobRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISynchronousJobRead::OAISynchronousJobRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISynchronousJobRead::OAISynchronousJobRead() {
    this->initializeModel();
}

OAISynchronousJobRead::~OAISynchronousJobRead() {}

void OAISynchronousJobRead::initializeModel() {

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_connector_configuration_updated_isSet = false;
    m_connector_configuration_updated_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;
}

void OAISynchronousJobRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISynchronousJobRead::fromJsonObject(QJsonObject json) {

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_connector_configuration_updated_isValid = ::OpenAPI::fromJsonValue(m_connector_configuration_updated, json[QString("connectorConfigurationUpdated")]);
    m_connector_configuration_updated_isSet = !json[QString("connectorConfigurationUpdated")].isNull() && m_connector_configuration_updated_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;
}

QString OAISynchronousJobRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISynchronousJobRead::asJsonObject() const {
    QJsonObject obj;
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_config_type.isSet()) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_connector_configuration_updated_isSet) {
        obj.insert(QString("connectorConfigurationUpdated"), ::OpenAPI::toJsonValue(m_connector_configuration_updated));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logs.isSet()) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    return obj;
}

QString OAISynchronousJobRead::getConfigId() const {
    return m_config_id;
}
void OAISynchronousJobRead::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAISynchronousJobRead::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAISynchronousJobRead::is_config_id_Valid() const{
    return m_config_id_isValid;
}

OAIJobConfigType OAISynchronousJobRead::getConfigType() const {
    return m_config_type;
}
void OAISynchronousJobRead::setConfigType(const OAIJobConfigType &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAISynchronousJobRead::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAISynchronousJobRead::is_config_type_Valid() const{
    return m_config_type_isValid;
}

bool OAISynchronousJobRead::isConnectorConfigurationUpdated() const {
    return m_connector_configuration_updated;
}
void OAISynchronousJobRead::setConnectorConfigurationUpdated(const bool &connector_configuration_updated) {
    m_connector_configuration_updated = connector_configuration_updated;
    m_connector_configuration_updated_isSet = true;
}

bool OAISynchronousJobRead::is_connector_configuration_updated_Set() const{
    return m_connector_configuration_updated_isSet;
}

bool OAISynchronousJobRead::is_connector_configuration_updated_Valid() const{
    return m_connector_configuration_updated_isValid;
}

qint64 OAISynchronousJobRead::getCreatedAt() const {
    return m_created_at;
}
void OAISynchronousJobRead::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISynchronousJobRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISynchronousJobRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAISynchronousJobRead::getEndedAt() const {
    return m_ended_at;
}
void OAISynchronousJobRead::setEndedAt(const qint64 &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAISynchronousJobRead::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAISynchronousJobRead::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAISynchronousJobRead::getId() const {
    return m_id;
}
void OAISynchronousJobRead::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISynchronousJobRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAISynchronousJobRead::is_id_Valid() const{
    return m_id_isValid;
}

OAILogRead OAISynchronousJobRead::getLogs() const {
    return m_logs;
}
void OAISynchronousJobRead::setLogs(const OAILogRead &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAISynchronousJobRead::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAISynchronousJobRead::is_logs_Valid() const{
    return m_logs_isValid;
}

bool OAISynchronousJobRead::isSucceeded() const {
    return m_succeeded;
}
void OAISynchronousJobRead::setSucceeded(const bool &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAISynchronousJobRead::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAISynchronousJobRead::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

bool OAISynchronousJobRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_configuration_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISynchronousJobRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_type_isValid && m_created_at_isValid && m_ended_at_isValid && m_id_isValid && m_succeeded_isValid && true;
}

} // namespace OpenAPI
