/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebBackendConnectionListItem.h
 *
 * Information about a connection that shows up in the connection list view.
 */

#ifndef OAIWebBackendConnectionListItem_H
#define OAIWebBackendConnectionListItem_H

#include <QJsonObject>

#include "OAIConnectionScheduleData.h"
#include "OAIConnectionScheduleType.h"
#include "OAIConnectionStatus.h"
#include "OAIDestinationSnippetRead.h"
#include "OAIJobStatus.h"
#include "OAISchemaChange.h"
#include "OAISourceSnippetRead.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestinationSnippetRead;
class OAIConnectionScheduleData;
class OAISourceSnippetRead;

class OAIWebBackendConnectionListItem : public OAIObject {
public:
    OAIWebBackendConnectionListItem();
    OAIWebBackendConnectionListItem(QString json);
    ~OAIWebBackendConnectionListItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    OAIDestinationSnippetRead getDestination() const;
    void setDestination(const OAIDestinationSnippetRead &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    bool isIsSyncing() const;
    void setIsSyncing(const bool &is_syncing);
    bool is_is_syncing_Set() const;
    bool is_is_syncing_Valid() const;

    qint64 getLatestSyncJobCreatedAt() const;
    void setLatestSyncJobCreatedAt(const qint64 &latest_sync_job_created_at);
    bool is_latest_sync_job_created_at_Set() const;
    bool is_latest_sync_job_created_at_Valid() const;

    OAIJobStatus getLatestSyncJobStatus() const;
    void setLatestSyncJobStatus(const OAIJobStatus &latest_sync_job_status);
    bool is_latest_sync_job_status_Set() const;
    bool is_latest_sync_job_status_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIConnectionScheduleData getScheduleData() const;
    void setScheduleData(const OAIConnectionScheduleData &schedule_data);
    bool is_schedule_data_Set() const;
    bool is_schedule_data_Valid() const;

    OAIConnectionScheduleType getScheduleType() const;
    void setScheduleType(const OAIConnectionScheduleType &schedule_type);
    bool is_schedule_type_Set() const;
    bool is_schedule_type_Valid() const;

    OAISchemaChange getSchemaChange() const;
    void setSchemaChange(const OAISchemaChange &schema_change);
    bool is_schema_change_Set() const;
    bool is_schema_change_Valid() const;

    OAISourceSnippetRead getSource() const;
    void setSource(const OAISourceSnippetRead &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    OAIConnectionStatus getStatus() const;
    void setStatus(const OAIConnectionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    OAIDestinationSnippetRead m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    bool m_is_syncing;
    bool m_is_syncing_isSet;
    bool m_is_syncing_isValid;

    qint64 m_latest_sync_job_created_at;
    bool m_latest_sync_job_created_at_isSet;
    bool m_latest_sync_job_created_at_isValid;

    OAIJobStatus m_latest_sync_job_status;
    bool m_latest_sync_job_status_isSet;
    bool m_latest_sync_job_status_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIConnectionScheduleData m_schedule_data;
    bool m_schedule_data_isSet;
    bool m_schedule_data_isValid;

    OAIConnectionScheduleType m_schedule_type;
    bool m_schedule_type_isSet;
    bool m_schedule_type_isValid;

    OAISchemaChange m_schema_change;
    bool m_schema_change_isSet;
    bool m_schema_change_isValid;

    OAISourceSnippetRead m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    OAIConnectionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebBackendConnectionListItem)

#endif // OAIWebBackendConnectionListItem_H
