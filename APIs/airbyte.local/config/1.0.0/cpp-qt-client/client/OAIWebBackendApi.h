/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebBackendApi_H
#define OAI_OAIWebBackendApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionIdRequestBody.h"
#include "OAIConnectionStateType.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIWebBackendCheckUpdatesRead.h"
#include "OAIWebBackendConnectionCreate.h"
#include "OAIWebBackendConnectionListRequestBody.h"
#include "OAIWebBackendConnectionRead.h"
#include "OAIWebBackendConnectionReadList.h"
#include "OAIWebBackendConnectionRequestBody.h"
#include "OAIWebBackendConnectionUpdate.h"
#include "OAIWebBackendGeographiesListResult.h"
#include "OAIWebBackendWorkspaceState.h"
#include "OAIWebBackendWorkspaceStateResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebBackendApi : public QObject {
    Q_OBJECT

public:
    OAIWebBackendApi(const int timeOut = 0);
    ~OAIWebBackendApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_connection_id_request_body OAIConnectionIdRequestBody [required]
    */
    virtual void getStateType(const OAIConnectionIdRequestBody &oai_connection_id_request_body);


    virtual void webBackendCheckUpdates();

    /**
    * @param[in]  oai_web_backend_connection_create OAIWebBackendConnectionCreate [required]
    */
    virtual void webBackendCreateConnection(const OAIWebBackendConnectionCreate &oai_web_backend_connection_create);

    /**
    * @param[in]  oai_web_backend_connection_request_body OAIWebBackendConnectionRequestBody [required]
    */
    virtual void webBackendGetConnection(const OAIWebBackendConnectionRequestBody &oai_web_backend_connection_request_body);

    /**
    * @param[in]  oai_web_backend_workspace_state OAIWebBackendWorkspaceState [optional]
    */
    virtual void webBackendGetWorkspaceState(const ::OpenAPI::OptionalParam<OAIWebBackendWorkspaceState> &oai_web_backend_workspace_state = ::OpenAPI::OptionalParam<OAIWebBackendWorkspaceState>());

    /**
    * @param[in]  oai_web_backend_connection_list_request_body OAIWebBackendConnectionListRequestBody [required]
    */
    virtual void webBackendListConnectionsForWorkspace(const OAIWebBackendConnectionListRequestBody &oai_web_backend_connection_list_request_body);


    virtual void webBackendListGeographies();

    /**
    * @param[in]  oai_web_backend_connection_update OAIWebBackendConnectionUpdate [required]
    */
    virtual void webBackendUpdateConnection(const OAIWebBackendConnectionUpdate &oai_web_backend_connection_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getStateTypeCallback(OAIHttpRequestWorker *worker);
    void webBackendCheckUpdatesCallback(OAIHttpRequestWorker *worker);
    void webBackendCreateConnectionCallback(OAIHttpRequestWorker *worker);
    void webBackendGetConnectionCallback(OAIHttpRequestWorker *worker);
    void webBackendGetWorkspaceStateCallback(OAIHttpRequestWorker *worker);
    void webBackendListConnectionsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void webBackendListGeographiesCallback(OAIHttpRequestWorker *worker);
    void webBackendUpdateConnectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getStateTypeSignal(OAIConnectionStateType summary);
    void webBackendCheckUpdatesSignal(OAIWebBackendCheckUpdatesRead summary);
    void webBackendCreateConnectionSignal(OAIWebBackendConnectionRead summary);
    void webBackendGetConnectionSignal(OAIWebBackendConnectionRead summary);
    void webBackendGetWorkspaceStateSignal(OAIWebBackendWorkspaceStateResult summary);
    void webBackendListConnectionsForWorkspaceSignal(OAIWebBackendConnectionReadList summary);
    void webBackendListGeographiesSignal(OAIWebBackendGeographiesListResult summary);
    void webBackendUpdateConnectionSignal(OAIWebBackendConnectionRead summary);


    void getStateTypeSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStateType summary);
    void webBackendCheckUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendCheckUpdatesRead summary);
    void webBackendCreateConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendConnectionRead summary);
    void webBackendGetConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendConnectionRead summary);
    void webBackendGetWorkspaceStateSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendWorkspaceStateResult summary);
    void webBackendListConnectionsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendConnectionReadList summary);
    void webBackendListGeographiesSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendGeographiesListResult summary);
    void webBackendUpdateConnectionSignalFull(OAIHttpRequestWorker *worker, OAIWebBackendConnectionRead summary);

    Q_DECL_DEPRECATED_X("Use getStateTypeSignalError() instead")
    void getStateTypeSignalE(OAIConnectionStateType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateTypeSignalError(OAIConnectionStateType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendCheckUpdatesSignalError() instead")
    void webBackendCheckUpdatesSignalE(OAIWebBackendCheckUpdatesRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendCheckUpdatesSignalError(OAIWebBackendCheckUpdatesRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendCreateConnectionSignalError() instead")
    void webBackendCreateConnectionSignalE(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendCreateConnectionSignalError(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendGetConnectionSignalError() instead")
    void webBackendGetConnectionSignalE(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendGetConnectionSignalError(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendGetWorkspaceStateSignalError() instead")
    void webBackendGetWorkspaceStateSignalE(OAIWebBackendWorkspaceStateResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendGetWorkspaceStateSignalError(OAIWebBackendWorkspaceStateResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendListConnectionsForWorkspaceSignalError() instead")
    void webBackendListConnectionsForWorkspaceSignalE(OAIWebBackendConnectionReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendListConnectionsForWorkspaceSignalError(OAIWebBackendConnectionReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendListGeographiesSignalError() instead")
    void webBackendListGeographiesSignalE(OAIWebBackendGeographiesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendListGeographiesSignalError(OAIWebBackendGeographiesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendUpdateConnectionSignalError() instead")
    void webBackendUpdateConnectionSignalE(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendUpdateConnectionSignalError(OAIWebBackendConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getStateTypeSignalErrorFull() instead")
    void getStateTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendCheckUpdatesSignalErrorFull() instead")
    void webBackendCheckUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendCheckUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendCreateConnectionSignalErrorFull() instead")
    void webBackendCreateConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendCreateConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendGetConnectionSignalErrorFull() instead")
    void webBackendGetConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendGetConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendGetWorkspaceStateSignalErrorFull() instead")
    void webBackendGetWorkspaceStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendGetWorkspaceStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendListConnectionsForWorkspaceSignalErrorFull() instead")
    void webBackendListConnectionsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendListConnectionsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendListGeographiesSignalErrorFull() instead")
    void webBackendListGeographiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendListGeographiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webBackendUpdateConnectionSignalErrorFull() instead")
    void webBackendUpdateConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webBackendUpdateConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
