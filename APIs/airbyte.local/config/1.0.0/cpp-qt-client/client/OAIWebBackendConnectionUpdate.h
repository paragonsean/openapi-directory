/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebBackendConnectionUpdate.h
 *
 * Used to apply a patch-style update to a connection, which means that null properties remain unchanged
 */

#ifndef OAIWebBackendConnectionUpdate_H
#define OAIWebBackendConnectionUpdate_H

#include <QJsonObject>

#include "OAIAirbyteCatalog.h"
#include "OAIConnectionSchedule.h"
#include "OAIConnectionScheduleData.h"
#include "OAIConnectionScheduleType.h"
#include "OAIConnectionStatus.h"
#include "OAIGeography.h"
#include "OAINamespaceDefinitionType.h"
#include "OAINonBreakingChangesPreference.h"
#include "OAIResourceRequirements.h"
#include "OAIWebBackendOperationCreateOrUpdate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebBackendOperationCreateOrUpdate;
class OAIResourceRequirements;
class OAIConnectionSchedule;
class OAIConnectionScheduleData;
class OAIAirbyteCatalog;

class OAIWebBackendConnectionUpdate : public OAIObject {
public:
    OAIWebBackendConnectionUpdate();
    OAIWebBackendConnectionUpdate(QString json);
    ~OAIWebBackendConnectionUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    OAIGeography getGeography() const;
    void setGeography(const OAIGeography &geography);
    bool is_geography_Set() const;
    bool is_geography_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINamespaceDefinitionType getNamespaceDefinition() const;
    void setNamespaceDefinition(const OAINamespaceDefinitionType &namespace_definition);
    bool is_namespace_definition_Set() const;
    bool is_namespace_definition_Valid() const;

    QString getNamespaceFormat() const;
    void setNamespaceFormat(const QString &namespace_format);
    bool is_namespace_format_Set() const;
    bool is_namespace_format_Valid() const;

    OAINonBreakingChangesPreference getNonBreakingChangesPreference() const;
    void setNonBreakingChangesPreference(const OAINonBreakingChangesPreference &non_breaking_changes_preference);
    bool is_non_breaking_changes_preference_Set() const;
    bool is_non_breaking_changes_preference_Valid() const;

    bool isNotifySchemaChanges() const;
    void setNotifySchemaChanges(const bool &notify_schema_changes);
    bool is_notify_schema_changes_Set() const;
    bool is_notify_schema_changes_Valid() const;

    QList<OAIWebBackendOperationCreateOrUpdate> getOperations() const;
    void setOperations(const QList<OAIWebBackendOperationCreateOrUpdate> &operations);
    bool is_operations_Set() const;
    bool is_operations_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    OAIResourceRequirements getResourceRequirements() const;
    void setResourceRequirements(const OAIResourceRequirements &resource_requirements);
    bool is_resource_requirements_Set() const;
    bool is_resource_requirements_Valid() const;

    OAIConnectionSchedule getSchedule() const;
    void setSchedule(const OAIConnectionSchedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    OAIConnectionScheduleData getScheduleData() const;
    void setScheduleData(const OAIConnectionScheduleData &schedule_data);
    bool is_schedule_data_Set() const;
    bool is_schedule_data_Valid() const;

    OAIConnectionScheduleType getScheduleType() const;
    void setScheduleType(const OAIConnectionScheduleType &schedule_type);
    bool is_schedule_type_Set() const;
    bool is_schedule_type_Valid() const;

    bool isSkipReset() const;
    void setSkipReset(const bool &skip_reset);
    bool is_skip_reset_Set() const;
    bool is_skip_reset_Valid() const;

    QString getSourceCatalogId() const;
    void setSourceCatalogId(const QString &source_catalog_id);
    bool is_source_catalog_id_Set() const;
    bool is_source_catalog_id_Valid() const;

    OAIConnectionStatus getStatus() const;
    void setStatus(const OAIConnectionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIAirbyteCatalog getSyncCatalog() const;
    void setSyncCatalog(const OAIAirbyteCatalog &sync_catalog);
    bool is_sync_catalog_Set() const;
    bool is_sync_catalog_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    OAIGeography m_geography;
    bool m_geography_isSet;
    bool m_geography_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINamespaceDefinitionType m_namespace_definition;
    bool m_namespace_definition_isSet;
    bool m_namespace_definition_isValid;

    QString m_namespace_format;
    bool m_namespace_format_isSet;
    bool m_namespace_format_isValid;

    OAINonBreakingChangesPreference m_non_breaking_changes_preference;
    bool m_non_breaking_changes_preference_isSet;
    bool m_non_breaking_changes_preference_isValid;

    bool m_notify_schema_changes;
    bool m_notify_schema_changes_isSet;
    bool m_notify_schema_changes_isValid;

    QList<OAIWebBackendOperationCreateOrUpdate> m_operations;
    bool m_operations_isSet;
    bool m_operations_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    OAIResourceRequirements m_resource_requirements;
    bool m_resource_requirements_isSet;
    bool m_resource_requirements_isValid;

    OAIConnectionSchedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    OAIConnectionScheduleData m_schedule_data;
    bool m_schedule_data_isSet;
    bool m_schedule_data_isValid;

    OAIConnectionScheduleType m_schedule_type;
    bool m_schedule_type_isSet;
    bool m_schedule_type_isValid;

    bool m_skip_reset;
    bool m_skip_reset_isSet;
    bool m_skip_reset_isValid;

    QString m_source_catalog_id;
    bool m_source_catalog_id_isSet;
    bool m_source_catalog_id_isValid;

    OAIConnectionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIAirbyteCatalog m_sync_catalog;
    bool m_sync_catalog_isSet;
    bool m_sync_catalog_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebBackendConnectionUpdate)

#endif // OAIWebBackendConnectionUpdate_H
