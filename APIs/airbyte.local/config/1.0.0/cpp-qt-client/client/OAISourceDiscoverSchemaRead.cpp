/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceDiscoverSchemaRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceDiscoverSchemaRead::OAISourceDiscoverSchemaRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceDiscoverSchemaRead::OAISourceDiscoverSchemaRead() {
    this->initializeModel();
}

OAISourceDiscoverSchemaRead::~OAISourceDiscoverSchemaRead() {}

void OAISourceDiscoverSchemaRead::initializeModel() {

    m_breaking_change_isSet = false;
    m_breaking_change_isValid = false;

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_catalog_diff_isSet = false;
    m_catalog_diff_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_job_info_isSet = false;
    m_job_info_isValid = false;
}

void OAISourceDiscoverSchemaRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceDiscoverSchemaRead::fromJsonObject(QJsonObject json) {

    m_breaking_change_isValid = ::OpenAPI::fromJsonValue(m_breaking_change, json[QString("breakingChange")]);
    m_breaking_change_isSet = !json[QString("breakingChange")].isNull() && m_breaking_change_isValid;

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("catalog")]);
    m_catalog_isSet = !json[QString("catalog")].isNull() && m_catalog_isValid;

    m_catalog_diff_isValid = ::OpenAPI::fromJsonValue(m_catalog_diff, json[QString("catalogDiff")]);
    m_catalog_diff_isSet = !json[QString("catalogDiff")].isNull() && m_catalog_diff_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalogId")]);
    m_catalog_id_isSet = !json[QString("catalogId")].isNull() && m_catalog_id_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connectionStatus")]);
    m_connection_status_isSet = !json[QString("connectionStatus")].isNull() && m_connection_status_isValid;

    m_job_info_isValid = ::OpenAPI::fromJsonValue(m_job_info, json[QString("jobInfo")]);
    m_job_info_isSet = !json[QString("jobInfo")].isNull() && m_job_info_isValid;
}

QString OAISourceDiscoverSchemaRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceDiscoverSchemaRead::asJsonObject() const {
    QJsonObject obj;
    if (m_breaking_change_isSet) {
        obj.insert(QString("breakingChange"), ::OpenAPI::toJsonValue(m_breaking_change));
    }
    if (m_catalog.isSet()) {
        obj.insert(QString("catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_catalog_diff.isSet()) {
        obj.insert(QString("catalogDiff"), ::OpenAPI::toJsonValue(m_catalog_diff));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_job_info.isSet()) {
        obj.insert(QString("jobInfo"), ::OpenAPI::toJsonValue(m_job_info));
    }
    return obj;
}

bool OAISourceDiscoverSchemaRead::isBreakingChange() const {
    return m_breaking_change;
}
void OAISourceDiscoverSchemaRead::setBreakingChange(const bool &breaking_change) {
    m_breaking_change = breaking_change;
    m_breaking_change_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_breaking_change_Set() const{
    return m_breaking_change_isSet;
}

bool OAISourceDiscoverSchemaRead::is_breaking_change_Valid() const{
    return m_breaking_change_isValid;
}

OAIAirbyteCatalog OAISourceDiscoverSchemaRead::getCatalog() const {
    return m_catalog;
}
void OAISourceDiscoverSchemaRead::setCatalog(const OAIAirbyteCatalog &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAISourceDiscoverSchemaRead::is_catalog_Valid() const{
    return m_catalog_isValid;
}

OAICatalogDiff OAISourceDiscoverSchemaRead::getCatalogDiff() const {
    return m_catalog_diff;
}
void OAISourceDiscoverSchemaRead::setCatalogDiff(const OAICatalogDiff &catalog_diff) {
    m_catalog_diff = catalog_diff;
    m_catalog_diff_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_catalog_diff_Set() const{
    return m_catalog_diff_isSet;
}

bool OAISourceDiscoverSchemaRead::is_catalog_diff_Valid() const{
    return m_catalog_diff_isValid;
}

QString OAISourceDiscoverSchemaRead::getCatalogId() const {
    return m_catalog_id;
}
void OAISourceDiscoverSchemaRead::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAISourceDiscoverSchemaRead::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

OAIConnectionStatus OAISourceDiscoverSchemaRead::getConnectionStatus() const {
    return m_connection_status;
}
void OAISourceDiscoverSchemaRead::setConnectionStatus(const OAIConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAISourceDiscoverSchemaRead::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

OAISynchronousJobRead OAISourceDiscoverSchemaRead::getJobInfo() const {
    return m_job_info;
}
void OAISourceDiscoverSchemaRead::setJobInfo(const OAISynchronousJobRead &job_info) {
    m_job_info = job_info;
    m_job_info_isSet = true;
}

bool OAISourceDiscoverSchemaRead::is_job_info_Set() const{
    return m_job_info_isSet;
}

bool OAISourceDiscoverSchemaRead::is_job_info_Valid() const{
    return m_job_info_isValid;
}

bool OAISourceDiscoverSchemaRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breaking_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceDiscoverSchemaRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_info_isValid && true;
}

} // namespace OpenAPI
