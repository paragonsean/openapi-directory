/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirbyteStreamConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirbyteStreamConfiguration::OAIAirbyteStreamConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirbyteStreamConfiguration::OAIAirbyteStreamConfiguration() {
    this->initializeModel();
}

OAIAirbyteStreamConfiguration::~OAIAirbyteStreamConfiguration() {}

void OAIAirbyteStreamConfiguration::initializeModel() {

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_cursor_field_isSet = false;
    m_cursor_field_isValid = false;

    m_destination_sync_mode_isSet = false;
    m_destination_sync_mode_isValid = false;

    m_field_selection_enabled_isSet = false;
    m_field_selection_enabled_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_selected_fields_isSet = false;
    m_selected_fields_isValid = false;

    m_suggested_isSet = false;
    m_suggested_isValid = false;

    m_sync_mode_isSet = false;
    m_sync_mode_isValid = false;
}

void OAIAirbyteStreamConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirbyteStreamConfiguration::fromJsonObject(QJsonObject json) {

    m_alias_name_isValid = ::OpenAPI::fromJsonValue(m_alias_name, json[QString("aliasName")]);
    m_alias_name_isSet = !json[QString("aliasName")].isNull() && m_alias_name_isValid;

    m_cursor_field_isValid = ::OpenAPI::fromJsonValue(m_cursor_field, json[QString("cursorField")]);
    m_cursor_field_isSet = !json[QString("cursorField")].isNull() && m_cursor_field_isValid;

    m_destination_sync_mode_isValid = ::OpenAPI::fromJsonValue(m_destination_sync_mode, json[QString("destinationSyncMode")]);
    m_destination_sync_mode_isSet = !json[QString("destinationSyncMode")].isNull() && m_destination_sync_mode_isValid;

    m_field_selection_enabled_isValid = ::OpenAPI::fromJsonValue(m_field_selection_enabled, json[QString("fieldSelectionEnabled")]);
    m_field_selection_enabled_isSet = !json[QString("fieldSelectionEnabled")].isNull() && m_field_selection_enabled_isValid;

    if(json["primaryKey"].isArray()){
        auto arr = json["primaryKey"].toArray();
        m_primary_key_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_primary_key_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_primary_key_isSet = !jval.isNull() && m_primary_key_isValid;
                m_primary_key.push_back(item);
            }
        }
    }

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_selected_fields_isValid = ::OpenAPI::fromJsonValue(m_selected_fields, json[QString("selectedFields")]);
    m_selected_fields_isSet = !json[QString("selectedFields")].isNull() && m_selected_fields_isValid;

    m_suggested_isValid = ::OpenAPI::fromJsonValue(m_suggested, json[QString("suggested")]);
    m_suggested_isSet = !json[QString("suggested")].isNull() && m_suggested_isValid;

    m_sync_mode_isValid = ::OpenAPI::fromJsonValue(m_sync_mode, json[QString("syncMode")]);
    m_sync_mode_isSet = !json[QString("syncMode")].isNull() && m_sync_mode_isValid;
}

QString OAIAirbyteStreamConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirbyteStreamConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_name_isSet) {
        obj.insert(QString("aliasName"), ::OpenAPI::toJsonValue(m_alias_name));
    }
    if (m_cursor_field.size() > 0) {
        obj.insert(QString("cursorField"), ::OpenAPI::toJsonValue(m_cursor_field));
    }
    if (m_destination_sync_mode.isSet()) {
        obj.insert(QString("destinationSyncMode"), ::OpenAPI::toJsonValue(m_destination_sync_mode));
    }
    if (m_field_selection_enabled_isSet) {
        obj.insert(QString("fieldSelectionEnabled"), ::OpenAPI::toJsonValue(m_field_selection_enabled));
    }
    if (m_primary_key.size() > 0) {
        
        obj.insert(QString("primaryKey"), toJsonValue(m_primary_key));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_selected_fields.size() > 0) {
        obj.insert(QString("selectedFields"), ::OpenAPI::toJsonValue(m_selected_fields));
    }
    if (m_suggested_isSet) {
        obj.insert(QString("suggested"), ::OpenAPI::toJsonValue(m_suggested));
    }
    if (m_sync_mode.isSet()) {
        obj.insert(QString("syncMode"), ::OpenAPI::toJsonValue(m_sync_mode));
    }
    return obj;
}

QString OAIAirbyteStreamConfiguration::getAliasName() const {
    return m_alias_name;
}
void OAIAirbyteStreamConfiguration::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool OAIAirbyteStreamConfiguration::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

QList<QString> OAIAirbyteStreamConfiguration::getCursorField() const {
    return m_cursor_field;
}
void OAIAirbyteStreamConfiguration::setCursorField(const QList<QString> &cursor_field) {
    m_cursor_field = cursor_field;
    m_cursor_field_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_cursor_field_Set() const{
    return m_cursor_field_isSet;
}

bool OAIAirbyteStreamConfiguration::is_cursor_field_Valid() const{
    return m_cursor_field_isValid;
}

OAIDestinationSyncMode OAIAirbyteStreamConfiguration::getDestinationSyncMode() const {
    return m_destination_sync_mode;
}
void OAIAirbyteStreamConfiguration::setDestinationSyncMode(const OAIDestinationSyncMode &destination_sync_mode) {
    m_destination_sync_mode = destination_sync_mode;
    m_destination_sync_mode_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_destination_sync_mode_Set() const{
    return m_destination_sync_mode_isSet;
}

bool OAIAirbyteStreamConfiguration::is_destination_sync_mode_Valid() const{
    return m_destination_sync_mode_isValid;
}

bool OAIAirbyteStreamConfiguration::isFieldSelectionEnabled() const {
    return m_field_selection_enabled;
}
void OAIAirbyteStreamConfiguration::setFieldSelectionEnabled(const bool &field_selection_enabled) {
    m_field_selection_enabled = field_selection_enabled;
    m_field_selection_enabled_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_field_selection_enabled_Set() const{
    return m_field_selection_enabled_isSet;
}

bool OAIAirbyteStreamConfiguration::is_field_selection_enabled_Valid() const{
    return m_field_selection_enabled_isValid;
}

QList<QList<QString>> OAIAirbyteStreamConfiguration::getPrimaryKey() const {
    return m_primary_key;
}
void OAIAirbyteStreamConfiguration::setPrimaryKey(const QList<QList<QString>> &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIAirbyteStreamConfiguration::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

bool OAIAirbyteStreamConfiguration::isSelected() const {
    return m_selected;
}
void OAIAirbyteStreamConfiguration::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAIAirbyteStreamConfiguration::is_selected_Valid() const{
    return m_selected_isValid;
}

QList<OAISelectedFieldInfo> OAIAirbyteStreamConfiguration::getSelectedFields() const {
    return m_selected_fields;
}
void OAIAirbyteStreamConfiguration::setSelectedFields(const QList<OAISelectedFieldInfo> &selected_fields) {
    m_selected_fields = selected_fields;
    m_selected_fields_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_selected_fields_Set() const{
    return m_selected_fields_isSet;
}

bool OAIAirbyteStreamConfiguration::is_selected_fields_Valid() const{
    return m_selected_fields_isValid;
}

bool OAIAirbyteStreamConfiguration::isSuggested() const {
    return m_suggested;
}
void OAIAirbyteStreamConfiguration::setSuggested(const bool &suggested) {
    m_suggested = suggested;
    m_suggested_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_suggested_Set() const{
    return m_suggested_isSet;
}

bool OAIAirbyteStreamConfiguration::is_suggested_Valid() const{
    return m_suggested_isValid;
}

OAISyncMode OAIAirbyteStreamConfiguration::getSyncMode() const {
    return m_sync_mode;
}
void OAIAirbyteStreamConfiguration::setSyncMode(const OAISyncMode &sync_mode) {
    m_sync_mode = sync_mode;
    m_sync_mode_isSet = true;
}

bool OAIAirbyteStreamConfiguration::is_sync_mode_Set() const{
    return m_sync_mode_isSet;
}

bool OAIAirbyteStreamConfiguration::is_sync_mode_Valid() const{
    return m_sync_mode_isValid;
}

bool OAIAirbyteStreamConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_field.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_sync_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_selection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirbyteStreamConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_sync_mode_isValid && m_sync_mode_isValid && true;
}

} // namespace OpenAPI
