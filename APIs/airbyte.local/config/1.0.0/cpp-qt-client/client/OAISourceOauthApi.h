/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceOauthApi_H
#define OAI_OAISourceOauthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompleteSourceOauthRequest.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAIKnownExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAIOAuthConsentRead.h"
#include "OAISetInstancewideSourceOauthParamsRequestBody.h"
#include "OAISourceOauthConsentRequest.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceOauthApi : public QObject {
    Q_OBJECT

public:
    OAISourceOauthApi(const int timeOut = 0);
    ~OAISourceOauthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_complete_source_oauth_request OAICompleteSourceOauthRequest [required]
    */
    virtual void completeSourceOAuth(const OAICompleteSourceOauthRequest &oai_complete_source_oauth_request);

    /**
    * @param[in]  oai_source_oauth_consent_request OAISourceOauthConsentRequest [required]
    */
    virtual void getSourceOAuthConsent(const OAISourceOauthConsentRequest &oai_source_oauth_consent_request);

    /**
    * @param[in]  oai_set_instancewide_source_oauth_params_request_body OAISetInstancewideSourceOauthParamsRequestBody [required]
    */
    virtual void setInstancewideSourceOauthParams(const OAISetInstancewideSourceOauthParamsRequestBody &oai_set_instancewide_source_oauth_params_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void completeSourceOAuthCallback(OAIHttpRequestWorker *worker);
    void getSourceOAuthConsentCallback(OAIHttpRequestWorker *worker);
    void setInstancewideSourceOauthParamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void completeSourceOAuthSignal(QMap<QString, QJsonValue> summary);
    void getSourceOAuthConsentSignal(OAIOAuthConsentRead summary);
    void setInstancewideSourceOauthParamsSignal();


    void completeSourceOAuthSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void getSourceOAuthConsentSignalFull(OAIHttpRequestWorker *worker, OAIOAuthConsentRead summary);
    void setInstancewideSourceOauthParamsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use completeSourceOAuthSignalError() instead")
    void completeSourceOAuthSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeSourceOAuthSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceOAuthConsentSignalError() instead")
    void getSourceOAuthConsentSignalE(OAIOAuthConsentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceOAuthConsentSignalError(OAIOAuthConsentRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInstancewideSourceOauthParamsSignalError() instead")
    void setInstancewideSourceOauthParamsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setInstancewideSourceOauthParamsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use completeSourceOAuthSignalErrorFull() instead")
    void completeSourceOAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeSourceOAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceOAuthConsentSignalErrorFull() instead")
    void getSourceOAuthConsentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceOAuthConsentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInstancewideSourceOauthParamsSignalErrorFull() instead")
    void setInstancewideSourceOauthParamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setInstancewideSourceOauthParamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
