/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttemptStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttemptStats::OAIAttemptStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttemptStats::OAIAttemptStats() {
    this->initializeModel();
}

OAIAttemptStats::~OAIAttemptStats() {}

void OAIAttemptStats::initializeModel() {

    m_bytes_emitted_isSet = false;
    m_bytes_emitted_isValid = false;

    m_estimated_bytes_isSet = false;
    m_estimated_bytes_isValid = false;

    m_estimated_records_isSet = false;
    m_estimated_records_isValid = false;

    m_records_committed_isSet = false;
    m_records_committed_isValid = false;

    m_records_emitted_isSet = false;
    m_records_emitted_isValid = false;

    m_state_messages_emitted_isSet = false;
    m_state_messages_emitted_isValid = false;
}

void OAIAttemptStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttemptStats::fromJsonObject(QJsonObject json) {

    m_bytes_emitted_isValid = ::OpenAPI::fromJsonValue(m_bytes_emitted, json[QString("bytesEmitted")]);
    m_bytes_emitted_isSet = !json[QString("bytesEmitted")].isNull() && m_bytes_emitted_isValid;

    m_estimated_bytes_isValid = ::OpenAPI::fromJsonValue(m_estimated_bytes, json[QString("estimatedBytes")]);
    m_estimated_bytes_isSet = !json[QString("estimatedBytes")].isNull() && m_estimated_bytes_isValid;

    m_estimated_records_isValid = ::OpenAPI::fromJsonValue(m_estimated_records, json[QString("estimatedRecords")]);
    m_estimated_records_isSet = !json[QString("estimatedRecords")].isNull() && m_estimated_records_isValid;

    m_records_committed_isValid = ::OpenAPI::fromJsonValue(m_records_committed, json[QString("recordsCommitted")]);
    m_records_committed_isSet = !json[QString("recordsCommitted")].isNull() && m_records_committed_isValid;

    m_records_emitted_isValid = ::OpenAPI::fromJsonValue(m_records_emitted, json[QString("recordsEmitted")]);
    m_records_emitted_isSet = !json[QString("recordsEmitted")].isNull() && m_records_emitted_isValid;

    m_state_messages_emitted_isValid = ::OpenAPI::fromJsonValue(m_state_messages_emitted, json[QString("stateMessagesEmitted")]);
    m_state_messages_emitted_isSet = !json[QString("stateMessagesEmitted")].isNull() && m_state_messages_emitted_isValid;
}

QString OAIAttemptStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttemptStats::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_emitted_isSet) {
        obj.insert(QString("bytesEmitted"), ::OpenAPI::toJsonValue(m_bytes_emitted));
    }
    if (m_estimated_bytes_isSet) {
        obj.insert(QString("estimatedBytes"), ::OpenAPI::toJsonValue(m_estimated_bytes));
    }
    if (m_estimated_records_isSet) {
        obj.insert(QString("estimatedRecords"), ::OpenAPI::toJsonValue(m_estimated_records));
    }
    if (m_records_committed_isSet) {
        obj.insert(QString("recordsCommitted"), ::OpenAPI::toJsonValue(m_records_committed));
    }
    if (m_records_emitted_isSet) {
        obj.insert(QString("recordsEmitted"), ::OpenAPI::toJsonValue(m_records_emitted));
    }
    if (m_state_messages_emitted_isSet) {
        obj.insert(QString("stateMessagesEmitted"), ::OpenAPI::toJsonValue(m_state_messages_emitted));
    }
    return obj;
}

qint64 OAIAttemptStats::getBytesEmitted() const {
    return m_bytes_emitted;
}
void OAIAttemptStats::setBytesEmitted(const qint64 &bytes_emitted) {
    m_bytes_emitted = bytes_emitted;
    m_bytes_emitted_isSet = true;
}

bool OAIAttemptStats::is_bytes_emitted_Set() const{
    return m_bytes_emitted_isSet;
}

bool OAIAttemptStats::is_bytes_emitted_Valid() const{
    return m_bytes_emitted_isValid;
}

qint64 OAIAttemptStats::getEstimatedBytes() const {
    return m_estimated_bytes;
}
void OAIAttemptStats::setEstimatedBytes(const qint64 &estimated_bytes) {
    m_estimated_bytes = estimated_bytes;
    m_estimated_bytes_isSet = true;
}

bool OAIAttemptStats::is_estimated_bytes_Set() const{
    return m_estimated_bytes_isSet;
}

bool OAIAttemptStats::is_estimated_bytes_Valid() const{
    return m_estimated_bytes_isValid;
}

qint64 OAIAttemptStats::getEstimatedRecords() const {
    return m_estimated_records;
}
void OAIAttemptStats::setEstimatedRecords(const qint64 &estimated_records) {
    m_estimated_records = estimated_records;
    m_estimated_records_isSet = true;
}

bool OAIAttemptStats::is_estimated_records_Set() const{
    return m_estimated_records_isSet;
}

bool OAIAttemptStats::is_estimated_records_Valid() const{
    return m_estimated_records_isValid;
}

qint64 OAIAttemptStats::getRecordsCommitted() const {
    return m_records_committed;
}
void OAIAttemptStats::setRecordsCommitted(const qint64 &records_committed) {
    m_records_committed = records_committed;
    m_records_committed_isSet = true;
}

bool OAIAttemptStats::is_records_committed_Set() const{
    return m_records_committed_isSet;
}

bool OAIAttemptStats::is_records_committed_Valid() const{
    return m_records_committed_isValid;
}

qint64 OAIAttemptStats::getRecordsEmitted() const {
    return m_records_emitted;
}
void OAIAttemptStats::setRecordsEmitted(const qint64 &records_emitted) {
    m_records_emitted = records_emitted;
    m_records_emitted_isSet = true;
}

bool OAIAttemptStats::is_records_emitted_Set() const{
    return m_records_emitted_isSet;
}

bool OAIAttemptStats::is_records_emitted_Valid() const{
    return m_records_emitted_isValid;
}

qint64 OAIAttemptStats::getStateMessagesEmitted() const {
    return m_state_messages_emitted;
}
void OAIAttemptStats::setStateMessagesEmitted(const qint64 &state_messages_emitted) {
    m_state_messages_emitted = state_messages_emitted;
    m_state_messages_emitted_isSet = true;
}

bool OAIAttemptStats::is_state_messages_emitted_Set() const{
    return m_state_messages_emitted_isSet;
}

bool OAIAttemptStats::is_state_messages_emitted_Valid() const{
    return m_state_messages_emitted_isValid;
}

bool OAIAttemptStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_emitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_committed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_emitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_messages_emitted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttemptStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
