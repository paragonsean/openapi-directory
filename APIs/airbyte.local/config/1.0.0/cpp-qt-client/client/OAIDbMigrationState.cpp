/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDbMigrationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDbMigrationState::OAIDbMigrationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDbMigrationState::OAIDbMigrationState() {
    this->initializeModel();
}

OAIDbMigrationState::~OAIDbMigrationState() {}

void OAIDbMigrationState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDbMigrationState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDbMigrationState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("above_target", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::ABOVE_TARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("below_baseline", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::BELOW_BASELINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("baseline", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::BASELINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ignored", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::IGNORED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("missing_success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::MISSING_SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("missing_failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::MISSING_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("undone", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::UNDONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("available", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("out_of_order", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::OUT_OF_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("future_success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::FUTURE_SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("future_failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::FUTURE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("outdated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::OUTDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("superseded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::SUPERSEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDbMigrationState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDbMigrationState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDbMigrationState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDbMigrationState::PENDING:
            val = "pending";
            break;
        case eOAIDbMigrationState::ABOVE_TARGET:
            val = "above_target";
            break;
        case eOAIDbMigrationState::BELOW_BASELINE:
            val = "below_baseline";
            break;
        case eOAIDbMigrationState::BASELINE:
            val = "baseline";
            break;
        case eOAIDbMigrationState::IGNORED:
            val = "ignored";
            break;
        case eOAIDbMigrationState::MISSING_SUCCESS:
            val = "missing_success";
            break;
        case eOAIDbMigrationState::MISSING_FAILED:
            val = "missing_failed";
            break;
        case eOAIDbMigrationState::SUCCESS:
            val = "success";
            break;
        case eOAIDbMigrationState::UNDONE:
            val = "undone";
            break;
        case eOAIDbMigrationState::AVAILABLE:
            val = "available";
            break;
        case eOAIDbMigrationState::FAILED:
            val = "failed";
            break;
        case eOAIDbMigrationState::OUT_OF_ORDER:
            val = "out_of_order";
            break;
        case eOAIDbMigrationState::FUTURE_SUCCESS:
            val = "future_success";
            break;
        case eOAIDbMigrationState::FUTURE_FAILED:
            val = "future_failed";
            break;
        case eOAIDbMigrationState::OUTDATED:
            val = "outdated";
            break;
        case eOAIDbMigrationState::SUPERSEDED:
            val = "superseded";
            break;
        case eOAIDbMigrationState::DELETED:
            val = "deleted";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDbMigrationState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDbMigrationState::eOAIDbMigrationState OAIDbMigrationState::getValue() const {
    return m_value;
}

void OAIDbMigrationState::setValue(const OAIDbMigrationState::eOAIDbMigrationState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDbMigrationState::isSet() const {
    
    return m_value_isSet;
}

bool OAIDbMigrationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
