/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceApi_H
#define OAI_OAISourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActorCatalogWithUpdatedAt.h"
#include "OAICheckConnectionRead.h"
#include "OAIDiscoverCatalogResult.h"
#include "OAIInvalidInputExceptionInfo.h"
#include "OAINotFoundKnownExceptionInfo.h"
#include "OAISourceCloneRequestBody.h"
#include "OAISourceCreate.h"
#include "OAISourceDiscoverSchemaRead.h"
#include "OAISourceDiscoverSchemaRequestBody.h"
#include "OAISourceDiscoverSchemaWriteRequestBody.h"
#include "OAISourceIdRequestBody.h"
#include "OAISourceRead.h"
#include "OAISourceReadList.h"
#include "OAISourceSearch.h"
#include "OAISourceUpdate.h"
#include "OAIWorkspaceIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceApi : public QObject {
    Q_OBJECT

public:
    OAISourceApi(const int timeOut = 0);
    ~OAISourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_source_id_request_body OAISourceIdRequestBody [required]
    */
    virtual void checkConnectionToSource(const OAISourceIdRequestBody &oai_source_id_request_body);

    /**
    * @param[in]  oai_source_update OAISourceUpdate [required]
    */
    virtual void checkConnectionToSourceForUpdate(const OAISourceUpdate &oai_source_update);

    /**
    * @param[in]  oai_source_clone_request_body OAISourceCloneRequestBody [required]
    */
    virtual void cloneSource(const OAISourceCloneRequestBody &oai_source_clone_request_body);

    /**
    * @param[in]  oai_source_create OAISourceCreate [required]
    */
    virtual void createSource(const OAISourceCreate &oai_source_create);

    /**
    * @param[in]  oai_source_id_request_body OAISourceIdRequestBody [required]
    */
    virtual void deleteSource(const OAISourceIdRequestBody &oai_source_id_request_body);

    /**
    * @param[in]  oai_source_discover_schema_request_body OAISourceDiscoverSchemaRequestBody [required]
    */
    virtual void discoverSchemaForSource(const OAISourceDiscoverSchemaRequestBody &oai_source_discover_schema_request_body);

    /**
    * @param[in]  oai_source_id_request_body OAISourceIdRequestBody [required]
    */
    virtual void getMostRecentSourceActorCatalog(const OAISourceIdRequestBody &oai_source_id_request_body);

    /**
    * @param[in]  oai_source_id_request_body OAISourceIdRequestBody [required]
    */
    virtual void getSource(const OAISourceIdRequestBody &oai_source_id_request_body);

    /**
    * @param[in]  oai_workspace_id_request_body OAIWorkspaceIdRequestBody [required]
    */
    virtual void listSourcesForWorkspace(const OAIWorkspaceIdRequestBody &oai_workspace_id_request_body);

    /**
    * @param[in]  oai_source_search OAISourceSearch [required]
    */
    virtual void searchSources(const OAISourceSearch &oai_source_search);

    /**
    * @param[in]  oai_source_update OAISourceUpdate [required]
    */
    virtual void updateSource(const OAISourceUpdate &oai_source_update);

    /**
    * @param[in]  oai_source_discover_schema_write_request_body OAISourceDiscoverSchemaWriteRequestBody [required]
    */
    virtual void writeDiscoverCatalogResult(const OAISourceDiscoverSchemaWriteRequestBody &oai_source_discover_schema_write_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkConnectionToSourceCallback(OAIHttpRequestWorker *worker);
    void checkConnectionToSourceForUpdateCallback(OAIHttpRequestWorker *worker);
    void cloneSourceCallback(OAIHttpRequestWorker *worker);
    void createSourceCallback(OAIHttpRequestWorker *worker);
    void deleteSourceCallback(OAIHttpRequestWorker *worker);
    void discoverSchemaForSourceCallback(OAIHttpRequestWorker *worker);
    void getMostRecentSourceActorCatalogCallback(OAIHttpRequestWorker *worker);
    void getSourceCallback(OAIHttpRequestWorker *worker);
    void listSourcesForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void searchSourcesCallback(OAIHttpRequestWorker *worker);
    void updateSourceCallback(OAIHttpRequestWorker *worker);
    void writeDiscoverCatalogResultCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkConnectionToSourceSignal(OAICheckConnectionRead summary);
    void checkConnectionToSourceForUpdateSignal(OAICheckConnectionRead summary);
    void cloneSourceSignal(OAISourceRead summary);
    void createSourceSignal(OAISourceRead summary);
    void deleteSourceSignal();
    void discoverSchemaForSourceSignal(OAISourceDiscoverSchemaRead summary);
    void getMostRecentSourceActorCatalogSignal(OAIActorCatalogWithUpdatedAt summary);
    void getSourceSignal(OAISourceRead summary);
    void listSourcesForWorkspaceSignal(OAISourceReadList summary);
    void searchSourcesSignal(OAISourceReadList summary);
    void updateSourceSignal(OAISourceRead summary);
    void writeDiscoverCatalogResultSignal(OAIDiscoverCatalogResult summary);


    void checkConnectionToSourceSignalFull(OAIHttpRequestWorker *worker, OAICheckConnectionRead summary);
    void checkConnectionToSourceForUpdateSignalFull(OAIHttpRequestWorker *worker, OAICheckConnectionRead summary);
    void cloneSourceSignalFull(OAIHttpRequestWorker *worker, OAISourceRead summary);
    void createSourceSignalFull(OAIHttpRequestWorker *worker, OAISourceRead summary);
    void deleteSourceSignalFull(OAIHttpRequestWorker *worker);
    void discoverSchemaForSourceSignalFull(OAIHttpRequestWorker *worker, OAISourceDiscoverSchemaRead summary);
    void getMostRecentSourceActorCatalogSignalFull(OAIHttpRequestWorker *worker, OAIActorCatalogWithUpdatedAt summary);
    void getSourceSignalFull(OAIHttpRequestWorker *worker, OAISourceRead summary);
    void listSourcesForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAISourceReadList summary);
    void searchSourcesSignalFull(OAIHttpRequestWorker *worker, OAISourceReadList summary);
    void updateSourceSignalFull(OAIHttpRequestWorker *worker, OAISourceRead summary);
    void writeDiscoverCatalogResultSignalFull(OAIHttpRequestWorker *worker, OAIDiscoverCatalogResult summary);

    Q_DECL_DEPRECATED_X("Use checkConnectionToSourceSignalError() instead")
    void checkConnectionToSourceSignalE(OAICheckConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkConnectionToSourceSignalError(OAICheckConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkConnectionToSourceForUpdateSignalError() instead")
    void checkConnectionToSourceForUpdateSignalE(OAICheckConnectionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkConnectionToSourceForUpdateSignalError(OAICheckConnectionRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneSourceSignalError() instead")
    void cloneSourceSignalE(OAISourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneSourceSignalError(OAISourceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSourceSignalError() instead")
    void createSourceSignalE(OAISourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSourceSignalError(OAISourceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSourceSignalError() instead")
    void deleteSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoverSchemaForSourceSignalError() instead")
    void discoverSchemaForSourceSignalE(OAISourceDiscoverSchemaRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoverSchemaForSourceSignalError(OAISourceDiscoverSchemaRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMostRecentSourceActorCatalogSignalError() instead")
    void getMostRecentSourceActorCatalogSignalE(OAIActorCatalogWithUpdatedAt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMostRecentSourceActorCatalogSignalError(OAIActorCatalogWithUpdatedAt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalError() instead")
    void getSourceSignalE(OAISourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalError(OAISourceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourcesForWorkspaceSignalError() instead")
    void listSourcesForWorkspaceSignalE(OAISourceReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourcesForWorkspaceSignalError(OAISourceReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSourcesSignalError() instead")
    void searchSourcesSignalE(OAISourceReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSourcesSignalError(OAISourceReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceSignalError() instead")
    void updateSourceSignalE(OAISourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceSignalError(OAISourceRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeDiscoverCatalogResultSignalError() instead")
    void writeDiscoverCatalogResultSignalE(OAIDiscoverCatalogResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void writeDiscoverCatalogResultSignalError(OAIDiscoverCatalogResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkConnectionToSourceSignalErrorFull() instead")
    void checkConnectionToSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkConnectionToSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkConnectionToSourceForUpdateSignalErrorFull() instead")
    void checkConnectionToSourceForUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkConnectionToSourceForUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneSourceSignalErrorFull() instead")
    void cloneSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSourceSignalErrorFull() instead")
    void createSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSourceSignalErrorFull() instead")
    void deleteSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoverSchemaForSourceSignalErrorFull() instead")
    void discoverSchemaForSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoverSchemaForSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMostRecentSourceActorCatalogSignalErrorFull() instead")
    void getMostRecentSourceActorCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMostRecentSourceActorCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalErrorFull() instead")
    void getSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourcesForWorkspaceSignalErrorFull() instead")
    void listSourcesForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourcesForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSourcesSignalErrorFull() instead")
    void searchSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceSignalErrorFull() instead")
    void updateSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeDiscoverCatalogResultSignalErrorFull() instead")
    void writeDiscoverCatalogResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeDiscoverCatalogResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
