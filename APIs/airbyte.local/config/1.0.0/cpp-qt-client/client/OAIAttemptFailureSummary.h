/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttemptFailureSummary.h
 *
 * 
 */

#ifndef OAIAttemptFailureSummary_H
#define OAIAttemptFailureSummary_H

#include <QJsonObject>

#include "OAIAttemptFailureReason.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttemptFailureReason;

class OAIAttemptFailureSummary : public OAIObject {
public:
    OAIAttemptFailureSummary();
    OAIAttemptFailureSummary(QString json);
    ~OAIAttemptFailureSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAttemptFailureReason> getFailures() const;
    void setFailures(const QList<OAIAttemptFailureReason> &failures);
    bool is_failures_Set() const;
    bool is_failures_Valid() const;

    bool isPartialSuccess() const;
    void setPartialSuccess(const bool &partial_success);
    bool is_partial_success_Set() const;
    bool is_partial_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAttemptFailureReason> m_failures;
    bool m_failures_isSet;
    bool m_failures_isValid;

    bool m_partial_success;
    bool m_partial_success_isSet;
    bool m_partial_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttemptFailureSummary)

#endif // OAIAttemptFailureSummary_H
