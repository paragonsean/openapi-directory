/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFieldTransform.h
 *
 * Describes the difference between two Streams.
 */

#ifndef OAIFieldTransform_H
#define OAIFieldTransform_H

#include <QJsonObject>

#include "OAIFieldAdd.h"
#include "OAIFieldRemove.h"
#include "OAIFieldSchemaUpdate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFieldAdd;
class OAIFieldRemove;
class OAIFieldSchemaUpdate;

class OAIFieldTransform : public OAIObject {
public:
    OAIFieldTransform();
    OAIFieldTransform(QString json);
    ~OAIFieldTransform() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFieldAdd getAddField() const;
    void setAddField(const OAIFieldAdd &add_field);
    bool is_add_field_Set() const;
    bool is_add_field_Valid() const;

    bool isBreaking() const;
    void setBreaking(const bool &breaking);
    bool is_breaking_Set() const;
    bool is_breaking_Valid() const;

    QList<QString> getFieldName() const;
    void setFieldName(const QList<QString> &field_name);
    bool is_field_name_Set() const;
    bool is_field_name_Valid() const;

    OAIFieldRemove getRemoveField() const;
    void setRemoveField(const OAIFieldRemove &remove_field);
    bool is_remove_field_Set() const;
    bool is_remove_field_Valid() const;

    QString getTransformType() const;
    void setTransformType(const QString &transform_type);
    bool is_transform_type_Set() const;
    bool is_transform_type_Valid() const;

    OAIFieldSchemaUpdate getUpdateFieldSchema() const;
    void setUpdateFieldSchema(const OAIFieldSchemaUpdate &update_field_schema);
    bool is_update_field_schema_Set() const;
    bool is_update_field_schema_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFieldAdd m_add_field;
    bool m_add_field_isSet;
    bool m_add_field_isValid;

    bool m_breaking;
    bool m_breaking_isSet;
    bool m_breaking_isValid;

    QList<QString> m_field_name;
    bool m_field_name_isSet;
    bool m_field_name_isValid;

    OAIFieldRemove m_remove_field;
    bool m_remove_field_isSet;
    bool m_remove_field_isValid;

    QString m_transform_type;
    bool m_transform_type_isSet;
    bool m_transform_type_isValid;

    OAIFieldSchemaUpdate m_update_field_schema;
    bool m_update_field_schema_isSet;
    bool m_update_field_schema_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFieldTransform)

#endif // OAIFieldTransform_H
