/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationDefinitionRead.h
 *
 * 
 */

#ifndef OAIDestinationDefinitionRead_H
#define OAIDestinationDefinitionRead_H

#include <QJsonObject>

#include "OAIActorDefinitionResourceRequirements.h"
#include "OAINormalizationDestinationDefinitionConfig.h"
#include "OAIReleaseStage.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINormalizationDestinationDefinitionConfig;
class OAIActorDefinitionResourceRequirements;

class OAIDestinationDefinitionRead : public OAIObject {
public:
    OAIDestinationDefinitionRead();
    OAIDestinationDefinitionRead(QString json);
    ~OAIDestinationDefinitionRead() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDestinationDefinitionId() const;
    void setDestinationDefinitionId(const QString &destination_definition_id);
    bool is_destination_definition_id_Set() const;
    bool is_destination_definition_id_Valid() const;

    QString getDockerImageTag() const;
    void setDockerImageTag(const QString &docker_image_tag);
    bool is_docker_image_tag_Set() const;
    bool is_docker_image_tag_Valid() const;

    QString getDockerRepository() const;
    void setDockerRepository(const QString &docker_repository);
    bool is_docker_repository_Set() const;
    bool is_docker_repository_Valid() const;

    QString getDocumentationUrl() const;
    void setDocumentationUrl(const QString &documentation_url);
    bool is_documentation_url_Set() const;
    bool is_documentation_url_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINormalizationDestinationDefinitionConfig getNormalizationConfig() const;
    void setNormalizationConfig(const OAINormalizationDestinationDefinitionConfig &normalization_config);
    bool is_normalization_config_Set() const;
    bool is_normalization_config_Valid() const;

    QString getProtocolVersion() const;
    void setProtocolVersion(const QString &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    QDate getReleaseDate() const;
    void setReleaseDate(const QDate &release_date);
    bool is_release_date_Set() const;
    bool is_release_date_Valid() const;

    OAIReleaseStage getReleaseStage() const;
    void setReleaseStage(const OAIReleaseStage &release_stage);
    bool is_release_stage_Set() const;
    bool is_release_stage_Valid() const;

    OAIActorDefinitionResourceRequirements getResourceRequirements() const;
    void setResourceRequirements(const OAIActorDefinitionResourceRequirements &resource_requirements);
    bool is_resource_requirements_Set() const;
    bool is_resource_requirements_Valid() const;

    bool isSupportsDbt() const;
    void setSupportsDbt(const bool &supports_dbt);
    bool is_supports_dbt_Set() const;
    bool is_supports_dbt_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_destination_definition_id;
    bool m_destination_definition_id_isSet;
    bool m_destination_definition_id_isValid;

    QString m_docker_image_tag;
    bool m_docker_image_tag_isSet;
    bool m_docker_image_tag_isValid;

    QString m_docker_repository;
    bool m_docker_repository_isSet;
    bool m_docker_repository_isValid;

    QString m_documentation_url;
    bool m_documentation_url_isSet;
    bool m_documentation_url_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINormalizationDestinationDefinitionConfig m_normalization_config;
    bool m_normalization_config_isSet;
    bool m_normalization_config_isValid;

    QString m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    QDate m_release_date;
    bool m_release_date_isSet;
    bool m_release_date_isValid;

    OAIReleaseStage m_release_stage;
    bool m_release_stage_isSet;
    bool m_release_stage_isValid;

    OAIActorDefinitionResourceRequirements m_resource_requirements;
    bool m_resource_requirements_isSet;
    bool m_resource_requirements_isValid;

    bool m_supports_dbt;
    bool m_supports_dbt_isSet;
    bool m_supports_dbt_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationDefinitionRead)

#endif // OAIDestinationDefinitionRead_H
