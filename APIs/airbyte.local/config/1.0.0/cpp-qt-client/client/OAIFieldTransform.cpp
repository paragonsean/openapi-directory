/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldTransform::OAIFieldTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldTransform::OAIFieldTransform() {
    this->initializeModel();
}

OAIFieldTransform::~OAIFieldTransform() {}

void OAIFieldTransform::initializeModel() {

    m_add_field_isSet = false;
    m_add_field_isValid = false;

    m_breaking_isSet = false;
    m_breaking_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_remove_field_isSet = false;
    m_remove_field_isValid = false;

    m_transform_type_isSet = false;
    m_transform_type_isValid = false;

    m_update_field_schema_isSet = false;
    m_update_field_schema_isValid = false;
}

void OAIFieldTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldTransform::fromJsonObject(QJsonObject json) {

    m_add_field_isValid = ::OpenAPI::fromJsonValue(m_add_field, json[QString("addField")]);
    m_add_field_isSet = !json[QString("addField")].isNull() && m_add_field_isValid;

    m_breaking_isValid = ::OpenAPI::fromJsonValue(m_breaking, json[QString("breaking")]);
    m_breaking_isSet = !json[QString("breaking")].isNull() && m_breaking_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_remove_field_isValid = ::OpenAPI::fromJsonValue(m_remove_field, json[QString("removeField")]);
    m_remove_field_isSet = !json[QString("removeField")].isNull() && m_remove_field_isValid;

    m_transform_type_isValid = ::OpenAPI::fromJsonValue(m_transform_type, json[QString("transformType")]);
    m_transform_type_isSet = !json[QString("transformType")].isNull() && m_transform_type_isValid;

    m_update_field_schema_isValid = ::OpenAPI::fromJsonValue(m_update_field_schema, json[QString("updateFieldSchema")]);
    m_update_field_schema_isSet = !json[QString("updateFieldSchema")].isNull() && m_update_field_schema_isValid;
}

QString OAIFieldTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_add_field.isSet()) {
        obj.insert(QString("addField"), ::OpenAPI::toJsonValue(m_add_field));
    }
    if (m_breaking_isSet) {
        obj.insert(QString("breaking"), ::OpenAPI::toJsonValue(m_breaking));
    }
    if (m_field_name.size() > 0) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_remove_field.isSet()) {
        obj.insert(QString("removeField"), ::OpenAPI::toJsonValue(m_remove_field));
    }
    if (m_transform_type_isSet) {
        obj.insert(QString("transformType"), ::OpenAPI::toJsonValue(m_transform_type));
    }
    if (m_update_field_schema.isSet()) {
        obj.insert(QString("updateFieldSchema"), ::OpenAPI::toJsonValue(m_update_field_schema));
    }
    return obj;
}

OAIFieldAdd OAIFieldTransform::getAddField() const {
    return m_add_field;
}
void OAIFieldTransform::setAddField(const OAIFieldAdd &add_field) {
    m_add_field = add_field;
    m_add_field_isSet = true;
}

bool OAIFieldTransform::is_add_field_Set() const{
    return m_add_field_isSet;
}

bool OAIFieldTransform::is_add_field_Valid() const{
    return m_add_field_isValid;
}

bool OAIFieldTransform::isBreaking() const {
    return m_breaking;
}
void OAIFieldTransform::setBreaking(const bool &breaking) {
    m_breaking = breaking;
    m_breaking_isSet = true;
}

bool OAIFieldTransform::is_breaking_Set() const{
    return m_breaking_isSet;
}

bool OAIFieldTransform::is_breaking_Valid() const{
    return m_breaking_isValid;
}

QList<QString> OAIFieldTransform::getFieldName() const {
    return m_field_name;
}
void OAIFieldTransform::setFieldName(const QList<QString> &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIFieldTransform::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIFieldTransform::is_field_name_Valid() const{
    return m_field_name_isValid;
}

OAIFieldRemove OAIFieldTransform::getRemoveField() const {
    return m_remove_field;
}
void OAIFieldTransform::setRemoveField(const OAIFieldRemove &remove_field) {
    m_remove_field = remove_field;
    m_remove_field_isSet = true;
}

bool OAIFieldTransform::is_remove_field_Set() const{
    return m_remove_field_isSet;
}

bool OAIFieldTransform::is_remove_field_Valid() const{
    return m_remove_field_isValid;
}

QString OAIFieldTransform::getTransformType() const {
    return m_transform_type;
}
void OAIFieldTransform::setTransformType(const QString &transform_type) {
    m_transform_type = transform_type;
    m_transform_type_isSet = true;
}

bool OAIFieldTransform::is_transform_type_Set() const{
    return m_transform_type_isSet;
}

bool OAIFieldTransform::is_transform_type_Valid() const{
    return m_transform_type_isValid;
}

OAIFieldSchemaUpdate OAIFieldTransform::getUpdateFieldSchema() const {
    return m_update_field_schema;
}
void OAIFieldTransform::setUpdateFieldSchema(const OAIFieldSchemaUpdate &update_field_schema) {
    m_update_field_schema = update_field_schema;
    m_update_field_schema_isSet = true;
}

bool OAIFieldTransform::is_update_field_schema_Set() const{
    return m_update_field_schema_isSet;
}

bool OAIFieldTransform::is_update_field_schema_Valid() const{
    return m_update_field_schema_isValid;
}

bool OAIFieldTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_field_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_breaking_isValid && m_field_name_isValid && m_transform_type_isValid && true;
}

} // namespace OpenAPI
