/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveAttemptSyncConfigRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveAttemptSyncConfigRequestBody::OAISaveAttemptSyncConfigRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveAttemptSyncConfigRequestBody::OAISaveAttemptSyncConfigRequestBody() {
    this->initializeModel();
}

OAISaveAttemptSyncConfigRequestBody::~OAISaveAttemptSyncConfigRequestBody() {}

void OAISaveAttemptSyncConfigRequestBody::initializeModel() {

    m_attempt_number_isSet = false;
    m_attempt_number_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_sync_config_isSet = false;
    m_sync_config_isValid = false;
}

void OAISaveAttemptSyncConfigRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveAttemptSyncConfigRequestBody::fromJsonObject(QJsonObject json) {

    m_attempt_number_isValid = ::OpenAPI::fromJsonValue(m_attempt_number, json[QString("attemptNumber")]);
    m_attempt_number_isSet = !json[QString("attemptNumber")].isNull() && m_attempt_number_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_sync_config_isValid = ::OpenAPI::fromJsonValue(m_sync_config, json[QString("syncConfig")]);
    m_sync_config_isSet = !json[QString("syncConfig")].isNull() && m_sync_config_isValid;
}

QString OAISaveAttemptSyncConfigRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveAttemptSyncConfigRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_attempt_number_isSet) {
        obj.insert(QString("attemptNumber"), ::OpenAPI::toJsonValue(m_attempt_number));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_sync_config.isSet()) {
        obj.insert(QString("syncConfig"), ::OpenAPI::toJsonValue(m_sync_config));
    }
    return obj;
}

qint32 OAISaveAttemptSyncConfigRequestBody::getAttemptNumber() const {
    return m_attempt_number;
}
void OAISaveAttemptSyncConfigRequestBody::setAttemptNumber(const qint32 &attempt_number) {
    m_attempt_number = attempt_number;
    m_attempt_number_isSet = true;
}

bool OAISaveAttemptSyncConfigRequestBody::is_attempt_number_Set() const{
    return m_attempt_number_isSet;
}

bool OAISaveAttemptSyncConfigRequestBody::is_attempt_number_Valid() const{
    return m_attempt_number_isValid;
}

qint64 OAISaveAttemptSyncConfigRequestBody::getJobId() const {
    return m_job_id;
}
void OAISaveAttemptSyncConfigRequestBody::setJobId(const qint64 &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAISaveAttemptSyncConfigRequestBody::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAISaveAttemptSyncConfigRequestBody::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIAttemptSyncConfig OAISaveAttemptSyncConfigRequestBody::getSyncConfig() const {
    return m_sync_config;
}
void OAISaveAttemptSyncConfigRequestBody::setSyncConfig(const OAIAttemptSyncConfig &sync_config) {
    m_sync_config = sync_config;
    m_sync_config_isSet = true;
}

bool OAISaveAttemptSyncConfigRequestBody::is_sync_config_Set() const{
    return m_sync_config_isSet;
}

bool OAISaveAttemptSyncConfigRequestBody::is_sync_config_Valid() const{
    return m_sync_config_isValid;
}

bool OAISaveAttemptSyncConfigRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempt_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveAttemptSyncConfigRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attempt_number_isValid && m_job_id_isValid && m_sync_config_isValid && true;
}

} // namespace OpenAPI
