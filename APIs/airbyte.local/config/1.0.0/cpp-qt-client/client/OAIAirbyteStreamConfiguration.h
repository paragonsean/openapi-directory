/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAirbyteStreamConfiguration.h
 *
 * the mutable part of the stream to configure the destination
 */

#ifndef OAIAirbyteStreamConfiguration_H
#define OAIAirbyteStreamConfiguration_H

#include <QJsonObject>

#include "OAIDestinationSyncMode.h"
#include "OAISelectedFieldInfo.h"
#include "OAISyncMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISelectedFieldInfo;

class OAIAirbyteStreamConfiguration : public OAIObject {
public:
    OAIAirbyteStreamConfiguration();
    OAIAirbyteStreamConfiguration(QString json);
    ~OAIAirbyteStreamConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAliasName() const;
    void setAliasName(const QString &alias_name);
    bool is_alias_name_Set() const;
    bool is_alias_name_Valid() const;

    QList<QString> getCursorField() const;
    void setCursorField(const QList<QString> &cursor_field);
    bool is_cursor_field_Set() const;
    bool is_cursor_field_Valid() const;

    OAIDestinationSyncMode getDestinationSyncMode() const;
    void setDestinationSyncMode(const OAIDestinationSyncMode &destination_sync_mode);
    bool is_destination_sync_mode_Set() const;
    bool is_destination_sync_mode_Valid() const;

    bool isFieldSelectionEnabled() const;
    void setFieldSelectionEnabled(const bool &field_selection_enabled);
    bool is_field_selection_enabled_Set() const;
    bool is_field_selection_enabled_Valid() const;

    QList<QList<QString>> getPrimaryKey() const;
    void setPrimaryKey(const QList<QList<QString>> &primary_key);
    bool is_primary_key_Set() const;
    bool is_primary_key_Valid() const;

    bool isSelected() const;
    void setSelected(const bool &selected);
    bool is_selected_Set() const;
    bool is_selected_Valid() const;

    QList<OAISelectedFieldInfo> getSelectedFields() const;
    void setSelectedFields(const QList<OAISelectedFieldInfo> &selected_fields);
    bool is_selected_fields_Set() const;
    bool is_selected_fields_Valid() const;

    bool isSuggested() const;
    void setSuggested(const bool &suggested);
    bool is_suggested_Set() const;
    bool is_suggested_Valid() const;

    OAISyncMode getSyncMode() const;
    void setSyncMode(const OAISyncMode &sync_mode);
    bool is_sync_mode_Set() const;
    bool is_sync_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alias_name;
    bool m_alias_name_isSet;
    bool m_alias_name_isValid;

    QList<QString> m_cursor_field;
    bool m_cursor_field_isSet;
    bool m_cursor_field_isValid;

    OAIDestinationSyncMode m_destination_sync_mode;
    bool m_destination_sync_mode_isSet;
    bool m_destination_sync_mode_isValid;

    bool m_field_selection_enabled;
    bool m_field_selection_enabled_isSet;
    bool m_field_selection_enabled_isValid;

    QList<QList<QString>> m_primary_key;
    bool m_primary_key_isSet;
    bool m_primary_key_isValid;

    bool m_selected;
    bool m_selected_isSet;
    bool m_selected_isValid;

    QList<OAISelectedFieldInfo> m_selected_fields;
    bool m_selected_fields_isSet;
    bool m_selected_fields_isValid;

    bool m_suggested;
    bool m_suggested_isSet;
    bool m_suggested_isValid;

    OAISyncMode m_sync_mode;
    bool m_sync_mode_isSet;
    bool m_sync_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAirbyteStreamConfiguration)

#endif // OAIAirbyteStreamConfiguration_H
