/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobDebugRead.h
 *
 * 
 */

#ifndef OAIJobDebugRead_H
#define OAIJobDebugRead_H

#include <QJsonObject>

#include "OAIDestinationDefinitionRead.h"
#include "OAIJobConfigType.h"
#include "OAIJobStatus.h"
#include "OAISourceDefinitionRead.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestinationDefinitionRead;
class OAISourceDefinitionRead;

class OAIJobDebugRead : public OAIObject {
public:
    OAIJobDebugRead();
    OAIJobDebugRead(QString json);
    ~OAIJobDebugRead() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAirbyteVersion() const;
    void setAirbyteVersion(const QString &airbyte_version);
    bool is_airbyte_version_Set() const;
    bool is_airbyte_version_Valid() const;

    QString getConfigId() const;
    void setConfigId(const QString &config_id);
    bool is_config_id_Set() const;
    bool is_config_id_Valid() const;

    OAIJobConfigType getConfigType() const;
    void setConfigType(const OAIJobConfigType &config_type);
    bool is_config_type_Set() const;
    bool is_config_type_Valid() const;

    OAIDestinationDefinitionRead getDestinationDefinition() const;
    void setDestinationDefinition(const OAIDestinationDefinitionRead &destination_definition);
    bool is_destination_definition_Set() const;
    bool is_destination_definition_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAISourceDefinitionRead getSourceDefinition() const;
    void setSourceDefinition(const OAISourceDefinitionRead &source_definition);
    bool is_source_definition_Set() const;
    bool is_source_definition_Valid() const;

    OAIJobStatus getStatus() const;
    void setStatus(const OAIJobStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_airbyte_version;
    bool m_airbyte_version_isSet;
    bool m_airbyte_version_isValid;

    QString m_config_id;
    bool m_config_id_isSet;
    bool m_config_id_isValid;

    OAIJobConfigType m_config_type;
    bool m_config_type_isSet;
    bool m_config_type_isValid;

    OAIDestinationDefinitionRead m_destination_definition;
    bool m_destination_definition_isSet;
    bool m_destination_definition_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAISourceDefinitionRead m_source_definition;
    bool m_source_definition_isSet;
    bool m_source_definition_isValid;

    OAIJobStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobDebugRead)

#endif // OAIJobDebugRead_H
