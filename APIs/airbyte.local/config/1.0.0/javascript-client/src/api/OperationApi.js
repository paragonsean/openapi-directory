/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckOperationRead from '../model/CheckOperationRead';
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import OperationCreate from '../model/OperationCreate';
import OperationIdRequestBody from '../model/OperationIdRequestBody';
import OperationRead from '../model/OperationRead';
import OperationReadList from '../model/OperationReadList';
import OperationUpdate from '../model/OperationUpdate';
import OperatorConfiguration from '../model/OperatorConfiguration';

/**
* Operation service.
* @module api/OperationApi
* @version 1.0.0
*/
export default class OperationApi {

    /**
    * Constructs a new OperationApi. 
    * @alias module:api/OperationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkOperation operation.
     * @callback module:api/OperationApi~checkOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckOperationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if an operation to be created is valid
     * @param {module:model/OperatorConfiguration} operatorConfiguration 
     * @param {module:api/OperationApi~checkOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckOperationRead}
     */
    checkOperation(operatorConfiguration, callback) {
      let postBody = operatorConfiguration;
      // verify the required parameter 'operatorConfiguration' is set
      if (operatorConfiguration === undefined || operatorConfiguration === null) {
        throw new Error("Missing the required parameter 'operatorConfiguration' when calling checkOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckOperationRead;
      return this.apiClient.callApi(
        '/v1/operations/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOperation operation.
     * @callback module:api/OperationApi~createOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an operation to be applied as part of a connection pipeline
     * @param {module:model/OperationCreate} operationCreate 
     * @param {module:api/OperationApi~createOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationRead}
     */
    createOperation(operationCreate, callback) {
      let postBody = operationCreate;
      // verify the required parameter 'operationCreate' is set
      if (operationCreate === undefined || operationCreate === null) {
        throw new Error("Missing the required parameter 'operationCreate' when calling createOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationRead;
      return this.apiClient.callApi(
        '/v1/operations/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOperation operation.
     * @callback module:api/OperationApi~deleteOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an operation
     * @param {module:model/OperationIdRequestBody} operationIdRequestBody 
     * @param {module:api/OperationApi~deleteOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOperation(operationIdRequestBody, callback) {
      let postBody = operationIdRequestBody;
      // verify the required parameter 'operationIdRequestBody' is set
      if (operationIdRequestBody === undefined || operationIdRequestBody === null) {
        throw new Error("Missing the required parameter 'operationIdRequestBody' when calling deleteOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/operations/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback module:api/OperationApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an operation
     * @param {module:model/OperationIdRequestBody} operationIdRequestBody 
     * @param {module:api/OperationApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationRead}
     */
    getOperation(operationIdRequestBody, callback) {
      let postBody = operationIdRequestBody;
      // verify the required parameter 'operationIdRequestBody' is set
      if (operationIdRequestBody === undefined || operationIdRequestBody === null) {
        throw new Error("Missing the required parameter 'operationIdRequestBody' when calling getOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationRead;
      return this.apiClient.callApi(
        '/v1/operations/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperationsForConnection operation.
     * @callback module:api/OperationApi~listOperationsForConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all operations for a connection.
     * List operations for connection.
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/OperationApi~listOperationsForConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationReadList}
     */
    listOperationsForConnection(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling listOperationsForConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationReadList;
      return this.apiClient.callApi(
        '/v1/operations/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOperation operation.
     * @callback module:api/OperationApi~updateOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an operation
     * @param {module:model/OperationUpdate} operationUpdate 
     * @param {module:api/OperationApi~updateOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationRead}
     */
    updateOperation(operationUpdate, callback) {
      let postBody = operationUpdate;
      // verify the required parameter 'operationUpdate' is set
      if (operationUpdate === undefined || operationUpdate === null) {
        throw new Error("Missing the required parameter 'operationUpdate' when calling updateOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationRead;
      return this.apiClient.callApi(
        '/v1/operations/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
