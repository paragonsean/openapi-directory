/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActorCatalogWithUpdatedAt from '../model/ActorCatalogWithUpdatedAt';
import CheckConnectionRead from '../model/CheckConnectionRead';
import DiscoverCatalogResult from '../model/DiscoverCatalogResult';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import SourceCloneRequestBody from '../model/SourceCloneRequestBody';
import SourceCreate from '../model/SourceCreate';
import SourceDiscoverSchemaRead from '../model/SourceDiscoverSchemaRead';
import SourceDiscoverSchemaRequestBody from '../model/SourceDiscoverSchemaRequestBody';
import SourceDiscoverSchemaWriteRequestBody from '../model/SourceDiscoverSchemaWriteRequestBody';
import SourceIdRequestBody from '../model/SourceIdRequestBody';
import SourceRead from '../model/SourceRead';
import SourceReadList from '../model/SourceReadList';
import SourceSearch from '../model/SourceSearch';
import SourceUpdate from '../model/SourceUpdate';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';

/**
* Source service.
* @module api/SourceApi
* @version 1.0.0
*/
export default class SourceApi {

    /**
    * Constructs a new SourceApi. 
    * @alias module:api/SourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkConnectionToSource operation.
     * @callback module:api/SourceApi~checkConnectionToSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check connection to the source
     * @param {module:model/SourceIdRequestBody} sourceIdRequestBody 
     * @param {module:api/SourceApi~checkConnectionToSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckConnectionRead}
     */
    checkConnectionToSource(sourceIdRequestBody, callback) {
      let postBody = sourceIdRequestBody;
      // verify the required parameter 'sourceIdRequestBody' is set
      if (sourceIdRequestBody === undefined || sourceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceIdRequestBody' when calling checkConnectionToSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckConnectionRead;
      return this.apiClient.callApi(
        '/v1/sources/check_connection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkConnectionToSourceForUpdate operation.
     * @callback module:api/SourceApi~checkConnectionToSourceForUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check connection for a proposed update to a source
     * @param {module:model/SourceUpdate} sourceUpdate 
     * @param {module:api/SourceApi~checkConnectionToSourceForUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckConnectionRead}
     */
    checkConnectionToSourceForUpdate(sourceUpdate, callback) {
      let postBody = sourceUpdate;
      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate === undefined || sourceUpdate === null) {
        throw new Error("Missing the required parameter 'sourceUpdate' when calling checkConnectionToSourceForUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckConnectionRead;
      return this.apiClient.callApi(
        '/v1/sources/check_connection_for_update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneSource operation.
     * @callback module:api/SourceApi~cloneSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone source
     * @param {module:model/SourceCloneRequestBody} sourceCloneRequestBody 
     * @param {module:api/SourceApi~cloneSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceRead}
     */
    cloneSource(sourceCloneRequestBody, callback) {
      let postBody = sourceCloneRequestBody;
      // verify the required parameter 'sourceCloneRequestBody' is set
      if (sourceCloneRequestBody === undefined || sourceCloneRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceCloneRequestBody' when calling cloneSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceRead;
      return this.apiClient.callApi(
        '/v1/sources/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSource operation.
     * @callback module:api/SourceApi~createSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a source
     * @param {module:model/SourceCreate} sourceCreate 
     * @param {module:api/SourceApi~createSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceRead}
     */
    createSource(sourceCreate, callback) {
      let postBody = sourceCreate;
      // verify the required parameter 'sourceCreate' is set
      if (sourceCreate === undefined || sourceCreate === null) {
        throw new Error("Missing the required parameter 'sourceCreate' when calling createSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceRead;
      return this.apiClient.callApi(
        '/v1/sources/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSource operation.
     * @callback module:api/SourceApi~deleteSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a source
     * @param {module:model/SourceIdRequestBody} sourceIdRequestBody 
     * @param {module:api/SourceApi~deleteSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSource(sourceIdRequestBody, callback) {
      let postBody = sourceIdRequestBody;
      // verify the required parameter 'sourceIdRequestBody' is set
      if (sourceIdRequestBody === undefined || sourceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceIdRequestBody' when calling deleteSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sources/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoverSchemaForSource operation.
     * @callback module:api/SourceApi~discoverSchemaForSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDiscoverSchemaRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover the schema catalog of the source
     * @param {module:model/SourceDiscoverSchemaRequestBody} sourceDiscoverSchemaRequestBody 
     * @param {module:api/SourceApi~discoverSchemaForSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDiscoverSchemaRead}
     */
    discoverSchemaForSource(sourceDiscoverSchemaRequestBody, callback) {
      let postBody = sourceDiscoverSchemaRequestBody;
      // verify the required parameter 'sourceDiscoverSchemaRequestBody' is set
      if (sourceDiscoverSchemaRequestBody === undefined || sourceDiscoverSchemaRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceDiscoverSchemaRequestBody' when calling discoverSchemaForSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDiscoverSchemaRead;
      return this.apiClient.callApi(
        '/v1/sources/discover_schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMostRecentSourceActorCatalog operation.
     * @callback module:api/SourceApi~getMostRecentSourceActorCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActorCatalogWithUpdatedAt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get most recent ActorCatalog for source
     * @param {module:model/SourceIdRequestBody} sourceIdRequestBody 
     * @param {module:api/SourceApi~getMostRecentSourceActorCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActorCatalogWithUpdatedAt}
     */
    getMostRecentSourceActorCatalog(sourceIdRequestBody, callback) {
      let postBody = sourceIdRequestBody;
      // verify the required parameter 'sourceIdRequestBody' is set
      if (sourceIdRequestBody === undefined || sourceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceIdRequestBody' when calling getMostRecentSourceActorCatalog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActorCatalogWithUpdatedAt;
      return this.apiClient.callApi(
        '/v1/sources/most_recent_source_actor_catalog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSource operation.
     * @callback module:api/SourceApi~getSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source
     * @param {module:model/SourceIdRequestBody} sourceIdRequestBody 
     * @param {module:api/SourceApi~getSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceRead}
     */
    getSource(sourceIdRequestBody, callback) {
      let postBody = sourceIdRequestBody;
      // verify the required parameter 'sourceIdRequestBody' is set
      if (sourceIdRequestBody === undefined || sourceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceIdRequestBody' when calling getSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceRead;
      return this.apiClient.callApi(
        '/v1/sources/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourcesForWorkspace operation.
     * @callback module:api/SourceApi~listSourcesForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sources for workspace
     * List sources for workspace. Does not return deleted sources.
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/SourceApi~listSourcesForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceReadList}
     */
    listSourcesForWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling listSourcesForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceReadList;
      return this.apiClient.callApi(
        '/v1/sources/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSources operation.
     * @callback module:api/SourceApi~searchSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search sources
     * @param {module:model/SourceSearch} sourceSearch 
     * @param {module:api/SourceApi~searchSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceReadList}
     */
    searchSources(sourceSearch, callback) {
      let postBody = sourceSearch;
      // verify the required parameter 'sourceSearch' is set
      if (sourceSearch === undefined || sourceSearch === null) {
        throw new Error("Missing the required parameter 'sourceSearch' when calling searchSources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceReadList;
      return this.apiClient.callApi(
        '/v1/sources/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSource operation.
     * @callback module:api/SourceApi~updateSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a source
     * @param {module:model/SourceUpdate} sourceUpdate 
     * @param {module:api/SourceApi~updateSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceRead}
     */
    updateSource(sourceUpdate, callback) {
      let postBody = sourceUpdate;
      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate === undefined || sourceUpdate === null) {
        throw new Error("Missing the required parameter 'sourceUpdate' when calling updateSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceRead;
      return this.apiClient.callApi(
        '/v1/sources/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeDiscoverCatalogResult operation.
     * @callback module:api/SourceApi~writeDiscoverCatalogResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoverCatalogResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Should only called from worker, to write result from discover activity back to DB.
     * @param {module:model/SourceDiscoverSchemaWriteRequestBody} sourceDiscoverSchemaWriteRequestBody 
     * @param {module:api/SourceApi~writeDiscoverCatalogResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoverCatalogResult}
     */
    writeDiscoverCatalogResult(sourceDiscoverSchemaWriteRequestBody, callback) {
      let postBody = sourceDiscoverSchemaWriteRequestBody;
      // verify the required parameter 'sourceDiscoverSchemaWriteRequestBody' is set
      if (sourceDiscoverSchemaWriteRequestBody === undefined || sourceDiscoverSchemaWriteRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceDiscoverSchemaWriteRequestBody' when calling writeDiscoverCatalogResult");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiscoverCatalogResult;
      return this.apiClient.callApi(
        '/v1/sources/write_discover_catalog_result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
