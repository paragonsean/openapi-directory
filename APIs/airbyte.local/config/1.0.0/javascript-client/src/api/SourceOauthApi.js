/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompleteSourceOauthRequest from '../model/CompleteSourceOauthRequest';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import KnownExceptionInfo from '../model/KnownExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import OAuthConsentRead from '../model/OAuthConsentRead';
import SetInstancewideSourceOauthParamsRequestBody from '../model/SetInstancewideSourceOauthParamsRequestBody';
import SourceOauthConsentRequest from '../model/SourceOauthConsentRequest';

/**
* SourceOauth service.
* @module api/SourceOauthApi
* @version 1.0.0
*/
export default class SourceOauthApi {

    /**
    * Constructs a new SourceOauthApi. 
    * @alias module:api/SourceOauthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeSourceOAuth operation.
     * @callback module:api/SourceOauthApi~completeSourceOAuthCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a source def ID generate an access/refresh token etc.
     * @param {module:model/CompleteSourceOauthRequest} completeSourceOauthRequest 
     * @param {module:api/SourceOauthApi~completeSourceOAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    completeSourceOAuth(completeSourceOauthRequest, callback) {
      let postBody = completeSourceOauthRequest;
      // verify the required parameter 'completeSourceOauthRequest' is set
      if (completeSourceOauthRequest === undefined || completeSourceOauthRequest === null) {
        throw new Error("Missing the required parameter 'completeSourceOauthRequest' when calling completeSourceOAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/v1/source_oauths/complete_oauth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceOAuthConsent operation.
     * @callback module:api/SourceOauthApi~getSourceOAuthConsentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuthConsentRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a source connector definition ID, return the URL to the consent screen where to redirect the user to.
     * @param {module:model/SourceOauthConsentRequest} sourceOauthConsentRequest 
     * @param {module:api/SourceOauthApi~getSourceOAuthConsentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthConsentRead}
     */
    getSourceOAuthConsent(sourceOauthConsentRequest, callback) {
      let postBody = sourceOauthConsentRequest;
      // verify the required parameter 'sourceOauthConsentRequest' is set
      if (sourceOauthConsentRequest === undefined || sourceOauthConsentRequest === null) {
        throw new Error("Missing the required parameter 'sourceOauthConsentRequest' when calling getSourceOAuthConsent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OAuthConsentRead;
      return this.apiClient.callApi(
        '/v1/source_oauths/get_consent_url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setInstancewideSourceOauthParams operation.
     * @callback module:api/SourceOauthApi~setInstancewideSourceOauthParamsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets instancewide variables to be used for the oauth flow when creating this source. When set, these variables will be injected into a connector's configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company's Google Ads developer_token, client_id, and client_secret without the user having to know about these variables. 
     * @param {module:model/SetInstancewideSourceOauthParamsRequestBody} setInstancewideSourceOauthParamsRequestBody 
     * @param {module:api/SourceOauthApi~setInstancewideSourceOauthParamsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setInstancewideSourceOauthParams(setInstancewideSourceOauthParamsRequestBody, callback) {
      let postBody = setInstancewideSourceOauthParamsRequestBody;
      // verify the required parameter 'setInstancewideSourceOauthParamsRequestBody' is set
      if (setInstancewideSourceOauthParamsRequestBody === undefined || setInstancewideSourceOauthParamsRequestBody === null) {
        throw new Error("Missing the required parameter 'setInstancewideSourceOauthParamsRequestBody' when calling setInstancewideSourceOauthParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/source_oauths/oauth_params/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
