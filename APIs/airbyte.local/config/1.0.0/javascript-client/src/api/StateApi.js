/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import ConnectionState from '../model/ConnectionState';
import ConnectionStateCreateOrUpdate from '../model/ConnectionStateCreateOrUpdate';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';

/**
* State service.
* @module api/StateApi
* @version 1.0.0
*/
export default class StateApi {

    /**
    * Constructs a new StateApi. 
    * @alias module:api/StateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrUpdateState operation.
     * @callback module:api/StateApi~createOrUpdateStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the state for a connection.
     * @param {module:model/ConnectionStateCreateOrUpdate} connectionStateCreateOrUpdate 
     * @param {module:api/StateApi~createOrUpdateStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionState}
     */
    createOrUpdateState(connectionStateCreateOrUpdate, callback) {
      let postBody = connectionStateCreateOrUpdate;
      // verify the required parameter 'connectionStateCreateOrUpdate' is set
      if (connectionStateCreateOrUpdate === undefined || connectionStateCreateOrUpdate === null) {
        throw new Error("Missing the required parameter 'connectionStateCreateOrUpdate' when calling createOrUpdateState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionState;
      return this.apiClient.callApi(
        '/v1/state/create_or_update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getState operation.
     * @callback module:api/StateApi~getStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the current state for a connection.
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/StateApi~getStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionState}
     */
    getState(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling getState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionState;
      return this.apiClient.callApi(
        '/v1/state/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
