/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomDestinationDefinitionCreate from '../model/CustomDestinationDefinitionCreate';
import DestinationDefinitionIdRequestBody from '../model/DestinationDefinitionIdRequestBody';
import DestinationDefinitionIdWithWorkspaceId from '../model/DestinationDefinitionIdWithWorkspaceId';
import DestinationDefinitionRead from '../model/DestinationDefinitionRead';
import DestinationDefinitionReadList from '../model/DestinationDefinitionReadList';
import DestinationDefinitionUpdate from '../model/DestinationDefinitionUpdate';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import PrivateDestinationDefinitionRead from '../model/PrivateDestinationDefinitionRead';
import PrivateDestinationDefinitionReadList from '../model/PrivateDestinationDefinitionReadList';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';

/**
* DestinationDefinition service.
* @module api/DestinationDefinitionApi
* @version 1.0.0
*/
export default class DestinationDefinitionApi {

    /**
    * Constructs a new DestinationDefinitionApi. 
    * @alias module:api/DestinationDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomDestinationDefinition operation.
     * @callback module:api/DestinationDefinitionApi~createCustomDestinationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom destinationDefinition for the given workspace
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomDestinationDefinitionCreate} [customDestinationDefinitionCreate] 
     * @param {module:api/DestinationDefinitionApi~createCustomDestinationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionRead}
     */
    createCustomDestinationDefinition(opts, callback) {
      opts = opts || {};
      let postBody = opts['customDestinationDefinitionCreate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionRead;
      return this.apiClient.callApi(
        '/v1/destination_definitions/create_custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestinationDefinition operation.
     * @callback module:api/DestinationDefinitionApi~deleteDestinationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a destination definition
     * @param {module:model/DestinationDefinitionIdRequestBody} destinationDefinitionIdRequestBody 
     * @param {module:api/DestinationDefinitionApi~deleteDestinationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDestinationDefinition(destinationDefinitionIdRequestBody, callback) {
      let postBody = destinationDefinitionIdRequestBody;
      // verify the required parameter 'destinationDefinitionIdRequestBody' is set
      if (destinationDefinitionIdRequestBody === undefined || destinationDefinitionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionIdRequestBody' when calling deleteDestinationDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/destination_definitions/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDefinition operation.
     * @callback module:api/DestinationDefinitionApi~getDestinationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get destinationDefinition
     * @param {module:model/DestinationDefinitionIdRequestBody} destinationDefinitionIdRequestBody 
     * @param {module:api/DestinationDefinitionApi~getDestinationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionRead}
     */
    getDestinationDefinition(destinationDefinitionIdRequestBody, callback) {
      let postBody = destinationDefinitionIdRequestBody;
      // verify the required parameter 'destinationDefinitionIdRequestBody' is set
      if (destinationDefinitionIdRequestBody === undefined || destinationDefinitionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionIdRequestBody' when calling getDestinationDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionRead;
      return this.apiClient.callApi(
        '/v1/destination_definitions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestinationDefinitionForWorkspace operation.
     * @callback module:api/DestinationDefinitionApi~getDestinationDefinitionForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a destinationDefinition that is configured for the given workspace
     * @param {module:model/DestinationDefinitionIdWithWorkspaceId} destinationDefinitionIdWithWorkspaceId 
     * @param {module:api/DestinationDefinitionApi~getDestinationDefinitionForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionRead}
     */
    getDestinationDefinitionForWorkspace(destinationDefinitionIdWithWorkspaceId, callback) {
      let postBody = destinationDefinitionIdWithWorkspaceId;
      // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
      if (destinationDefinitionIdWithWorkspaceId === undefined || destinationDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling getDestinationDefinitionForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionRead;
      return this.apiClient.callApi(
        '/v1/destination_definitions/get_for_workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantDestinationDefinitionToWorkspace operation.
     * @callback module:api/DestinationDefinitionApi~grantDestinationDefinitionToWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateDestinationDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * grant a private, non-custom destinationDefinition to a given workspace
     * @param {module:model/DestinationDefinitionIdWithWorkspaceId} destinationDefinitionIdWithWorkspaceId 
     * @param {module:api/DestinationDefinitionApi~grantDestinationDefinitionToWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateDestinationDefinitionRead}
     */
    grantDestinationDefinitionToWorkspace(destinationDefinitionIdWithWorkspaceId, callback) {
      let postBody = destinationDefinitionIdWithWorkspaceId;
      // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
      if (destinationDefinitionIdWithWorkspaceId === undefined || destinationDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling grantDestinationDefinitionToWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateDestinationDefinitionRead;
      return this.apiClient.callApi(
        '/v1/destination_definitions/grant_definition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDestinationDefinitions operation.
     * @callback module:api/DestinationDefinitionApi~listDestinationDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use
     * @param {module:api/DestinationDefinitionApi~listDestinationDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionReadList}
     */
    listDestinationDefinitions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/destination_definitions/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDestinationDefinitionsForWorkspace operation.
     * @callback module:api/DestinationDefinitionApi~listDestinationDefinitionsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the destinationDefinitions the given workspace is configured to use
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkspaceIdRequestBody} [workspaceIdRequestBody] 
     * @param {module:api/DestinationDefinitionApi~listDestinationDefinitionsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionReadList}
     */
    listDestinationDefinitionsForWorkspace(opts, callback) {
      opts = opts || {};
      let postBody = opts['workspaceIdRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/destination_definitions/list_for_workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLatestDestinationDefinitions operation.
     * @callback module:api/DestinationDefinitionApi~listLatestDestinationDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the latest destinationDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported destinations.
     * @param {module:api/DestinationDefinitionApi~listLatestDestinationDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionReadList}
     */
    listLatestDestinationDefinitions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/destination_definitions/list_latest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrivateDestinationDefinitions operation.
     * @callback module:api/DestinationDefinitionApi~listPrivateDestinationDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateDestinationDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace's grants.
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkspaceIdRequestBody} [workspaceIdRequestBody] 
     * @param {module:api/DestinationDefinitionApi~listPrivateDestinationDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateDestinationDefinitionReadList}
     */
    listPrivateDestinationDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = opts['workspaceIdRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateDestinationDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/destination_definitions/list_private', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeDestinationDefinitionFromWorkspace operation.
     * @callback module:api/DestinationDefinitionApi~revokeDestinationDefinitionFromWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace
     * @param {module:model/DestinationDefinitionIdWithWorkspaceId} destinationDefinitionIdWithWorkspaceId 
     * @param {module:api/DestinationDefinitionApi~revokeDestinationDefinitionFromWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeDestinationDefinitionFromWorkspace(destinationDefinitionIdWithWorkspaceId, callback) {
      let postBody = destinationDefinitionIdWithWorkspaceId;
      // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
      if (destinationDefinitionIdWithWorkspaceId === undefined || destinationDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling revokeDestinationDefinitionFromWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/destination_definitions/revoke_definition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDestinationDefinition operation.
     * @callback module:api/DestinationDefinitionApi~updateDestinationDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update destinationDefinition
     * @param {module:model/DestinationDefinitionUpdate} destinationDefinitionUpdate 
     * @param {module:api/DestinationDefinitionApi~updateDestinationDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationDefinitionRead}
     */
    updateDestinationDefinition(destinationDefinitionUpdate, callback) {
      let postBody = destinationDefinitionUpdate;
      // verify the required parameter 'destinationDefinitionUpdate' is set
      if (destinationDefinitionUpdate === undefined || destinationDefinitionUpdate === null) {
        throw new Error("Missing the required parameter 'destinationDefinitionUpdate' when calling updateDestinationDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationDefinitionRead;
      return this.apiClient.callApi(
        '/v1/destination_definitions/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
