/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import ConnectionStateType from '../model/ConnectionStateType';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import WebBackendCheckUpdatesRead from '../model/WebBackendCheckUpdatesRead';
import WebBackendConnectionCreate from '../model/WebBackendConnectionCreate';
import WebBackendConnectionListRequestBody from '../model/WebBackendConnectionListRequestBody';
import WebBackendConnectionRead from '../model/WebBackendConnectionRead';
import WebBackendConnectionReadList from '../model/WebBackendConnectionReadList';
import WebBackendConnectionRequestBody from '../model/WebBackendConnectionRequestBody';
import WebBackendConnectionUpdate from '../model/WebBackendConnectionUpdate';
import WebBackendGeographiesListResult from '../model/WebBackendGeographiesListResult';
import WebBackendWorkspaceState from '../model/WebBackendWorkspaceState';
import WebBackendWorkspaceStateResult from '../model/WebBackendWorkspaceStateResult';

/**
* WebBackend service.
* @module api/WebBackendApi
* @version 1.0.0
*/
export default class WebBackendApi {

    /**
    * Constructs a new WebBackendApi. 
    * @alias module:api/WebBackendApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStateType operation.
     * @callback module:api/WebBackendApi~getStateTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStateType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the current state type for a connection.
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/WebBackendApi~getStateTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStateType}
     */
    getStateType(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling getStateType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionStateType;
      return this.apiClient.callApi(
        '/v1/web_backend/state/get_type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendCheckUpdates operation.
     * @callback module:api/WebBackendApi~webBackendCheckUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendCheckUpdatesRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a summary of source and destination definitions that could be updated.
     * @param {module:api/WebBackendApi~webBackendCheckUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendCheckUpdatesRead}
     */
    webBackendCheckUpdates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebBackendCheckUpdatesRead;
      return this.apiClient.callApi(
        '/v1/web_backend/check_updates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendCreateConnection operation.
     * @callback module:api/WebBackendApi~webBackendCreateConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a connection
     * @param {module:model/WebBackendConnectionCreate} webBackendConnectionCreate 
     * @param {module:api/WebBackendApi~webBackendCreateConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendConnectionRead}
     */
    webBackendCreateConnection(webBackendConnectionCreate, callback) {
      let postBody = webBackendConnectionCreate;
      // verify the required parameter 'webBackendConnectionCreate' is set
      if (webBackendConnectionCreate === undefined || webBackendConnectionCreate === null) {
        throw new Error("Missing the required parameter 'webBackendConnectionCreate' when calling webBackendCreateConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebBackendConnectionRead;
      return this.apiClient.callApi(
        '/v1/web_backend/connections/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendGetConnection operation.
     * @callback module:api/WebBackendApi~webBackendGetConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a connection
     * @param {module:model/WebBackendConnectionRequestBody} webBackendConnectionRequestBody 
     * @param {module:api/WebBackendApi~webBackendGetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendConnectionRead}
     */
    webBackendGetConnection(webBackendConnectionRequestBody, callback) {
      let postBody = webBackendConnectionRequestBody;
      // verify the required parameter 'webBackendConnectionRequestBody' is set
      if (webBackendConnectionRequestBody === undefined || webBackendConnectionRequestBody === null) {
        throw new Error("Missing the required parameter 'webBackendConnectionRequestBody' when calling webBackendGetConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebBackendConnectionRead;
      return this.apiClient.callApi(
        '/v1/web_backend/connections/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendGetWorkspaceState operation.
     * @callback module:api/WebBackendApi~webBackendGetWorkspaceStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendWorkspaceStateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current state of a workspace
     * @param {Object} opts Optional parameters
     * @param {module:model/WebBackendWorkspaceState} [webBackendWorkspaceState] 
     * @param {module:api/WebBackendApi~webBackendGetWorkspaceStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendWorkspaceStateResult}
     */
    webBackendGetWorkspaceState(opts, callback) {
      opts = opts || {};
      let postBody = opts['webBackendWorkspaceState'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebBackendWorkspaceStateResult;
      return this.apiClient.callApi(
        '/v1/web_backend/workspace/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendListConnectionsForWorkspace operation.
     * @callback module:api/WebBackendApi~webBackendListConnectionsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendConnectionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all non-deleted connections for a workspace.
     * @param {module:model/WebBackendConnectionListRequestBody} webBackendConnectionListRequestBody 
     * @param {module:api/WebBackendApi~webBackendListConnectionsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendConnectionReadList}
     */
    webBackendListConnectionsForWorkspace(webBackendConnectionListRequestBody, callback) {
      let postBody = webBackendConnectionListRequestBody;
      // verify the required parameter 'webBackendConnectionListRequestBody' is set
      if (webBackendConnectionListRequestBody === undefined || webBackendConnectionListRequestBody === null) {
        throw new Error("Missing the required parameter 'webBackendConnectionListRequestBody' when calling webBackendListConnectionsForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebBackendConnectionReadList;
      return this.apiClient.callApi(
        '/v1/web_backend/connections/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendListGeographies operation.
     * @callback module:api/WebBackendApi~webBackendListGeographiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendGeographiesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns available geographies can be selected to run data syncs in a particular geography. The 'auto' entry indicates that the sync will be automatically assigned to a geography according to the platform default behavior. Entries other than 'auto' are two-letter country codes that follow the ISO 3166-1 alpha-2 standard. 
     * Returns all available geographies in which a data sync can run.
     * @param {module:api/WebBackendApi~webBackendListGeographiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendGeographiesListResult}
     */
    webBackendListGeographies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebBackendGeographiesListResult;
      return this.apiClient.callApi(
        '/v1/web_backend/geographies/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webBackendUpdateConnection operation.
     * @callback module:api/WebBackendApi~webBackendUpdateConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebBackendConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Any operations that lack an ID will be created. Then, the newly created operationId will be applied to the connection along with the rest of the operationIds in the request body. Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection's entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param {module:model/WebBackendConnectionUpdate} webBackendConnectionUpdate 
     * @param {module:api/WebBackendApi~webBackendUpdateConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebBackendConnectionRead}
     */
    webBackendUpdateConnection(webBackendConnectionUpdate, callback) {
      let postBody = webBackendConnectionUpdate;
      // verify the required parameter 'webBackendConnectionUpdate' is set
      if (webBackendConnectionUpdate === undefined || webBackendConnectionUpdate === null) {
        throw new Error("Missing the required parameter 'webBackendConnectionUpdate' when calling webBackendUpdateConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebBackendConnectionRead;
      return this.apiClient.callApi(
        '/v1/web_backend/connections/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
