/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionCreate from '../model/ConnectionCreate';
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import ConnectionRead from '../model/ConnectionRead';
import ConnectionReadList from '../model/ConnectionReadList';
import ConnectionSearch from '../model/ConnectionSearch';
import ConnectionUpdate from '../model/ConnectionUpdate';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import JobInfoRead from '../model/JobInfoRead';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';

/**
* Connection service.
* @module api/ConnectionApi
* @version 1.0.0
*/
export default class ConnectionApi {

    /**
    * Constructs a new ConnectionApi. 
    * @alias module:api/ConnectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConnection operation.
     * @callback module:api/ConnectionApi~createConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a connection between a source and a destination
     * @param {module:model/ConnectionCreate} connectionCreate 
     * @param {module:api/ConnectionApi~createConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionRead}
     */
    createConnection(connectionCreate, callback) {
      let postBody = connectionCreate;
      // verify the required parameter 'connectionCreate' is set
      if (connectionCreate === undefined || connectionCreate === null) {
        throw new Error("Missing the required parameter 'connectionCreate' when calling createConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionRead;
      return this.apiClient.callApi(
        '/v1/connections/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnection operation.
     * @callback module:api/ConnectionApi~deleteConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a connection
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/ConnectionApi~deleteConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnection(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling deleteConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/connections/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnection operation.
     * @callback module:api/ConnectionApi~getConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a connection
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/ConnectionApi~getConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionRead}
     */
    getConnection(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling getConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionRead;
      return this.apiClient.callApi(
        '/v1/connections/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllConnectionsForWorkspace operation.
     * @callback module:api/ConnectionApi~listAllConnectionsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all connections for a workspace, including deleted connections.
     * List connections for workspace, including deleted connections.
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/ConnectionApi~listAllConnectionsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionReadList}
     */
    listAllConnectionsForWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling listAllConnectionsForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionReadList;
      return this.apiClient.callApi(
        '/v1/connections/list_all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectionsForWorkspace operation.
     * @callback module:api/ConnectionApi~listConnectionsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all connections for a workspace.
     * List connections for workspace. Does not return deleted connections.
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/ConnectionApi~listConnectionsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionReadList}
     */
    listConnectionsForWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling listConnectionsForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionReadList;
      return this.apiClient.callApi(
        '/v1/connections/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetConnection operation.
     * @callback module:api/ConnectionApi~resetConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobInfoRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/ConnectionApi~resetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobInfoRead}
     */
    resetConnection(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling resetConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobInfoRead;
      return this.apiClient.callApi(
        '/v1/connections/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchConnections operation.
     * @callback module:api/ConnectionApi~searchConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search connections
     * @param {module:model/ConnectionSearch} connectionSearch 
     * @param {module:api/ConnectionApi~searchConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionReadList}
     */
    searchConnections(connectionSearch, callback) {
      let postBody = connectionSearch;
      // verify the required parameter 'connectionSearch' is set
      if (connectionSearch === undefined || connectionSearch === null) {
        throw new Error("Missing the required parameter 'connectionSearch' when calling searchConnections");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionReadList;
      return this.apiClient.callApi(
        '/v1/connections/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncConnection operation.
     * @callback module:api/ConnectionApi~syncConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobInfoRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a manual sync of the connection
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/ConnectionApi~syncConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobInfoRead}
     */
    syncConnection(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling syncConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobInfoRead;
      return this.apiClient.callApi(
        '/v1/connections/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnection operation.
     * @callback module:api/ConnectionApi~updateConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection's entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param {module:model/ConnectionUpdate} connectionUpdate 
     * @param {module:api/ConnectionApi~updateConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionRead}
     */
    updateConnection(connectionUpdate, callback) {
      let postBody = connectionUpdate;
      // verify the required parameter 'connectionUpdate' is set
      if (connectionUpdate === undefined || connectionUpdate === null) {
        throw new Error("Missing the required parameter 'connectionUpdate' when calling updateConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionRead;
      return this.apiClient.callApi(
        '/v1/connections/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
