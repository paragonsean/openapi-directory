/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckConnectionRead from '../model/CheckConnectionRead';
import DestinationCloneRequestBody from '../model/DestinationCloneRequestBody';
import DestinationCreate from '../model/DestinationCreate';
import DestinationIdRequestBody from '../model/DestinationIdRequestBody';
import DestinationRead from '../model/DestinationRead';
import DestinationReadList from '../model/DestinationReadList';
import DestinationSearch from '../model/DestinationSearch';
import DestinationUpdate from '../model/DestinationUpdate';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';

/**
* Destination service.
* @module api/DestinationApi
* @version 1.0.0
*/
export default class DestinationApi {

    /**
    * Constructs a new DestinationApi. 
    * @alias module:api/DestinationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkConnectionToDestination operation.
     * @callback module:api/DestinationApi~checkConnectionToDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check connection to the destination
     * @param {module:model/DestinationIdRequestBody} destinationIdRequestBody 
     * @param {module:api/DestinationApi~checkConnectionToDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckConnectionRead}
     */
    checkConnectionToDestination(destinationIdRequestBody, callback) {
      let postBody = destinationIdRequestBody;
      // verify the required parameter 'destinationIdRequestBody' is set
      if (destinationIdRequestBody === undefined || destinationIdRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationIdRequestBody' when calling checkConnectionToDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckConnectionRead;
      return this.apiClient.callApi(
        '/v1/destinations/check_connection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkConnectionToDestinationForUpdate operation.
     * @callback module:api/DestinationApi~checkConnectionToDestinationForUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckConnectionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check connection for a proposed update to a destination
     * @param {module:model/DestinationUpdate} destinationUpdate 
     * @param {module:api/DestinationApi~checkConnectionToDestinationForUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckConnectionRead}
     */
    checkConnectionToDestinationForUpdate(destinationUpdate, callback) {
      let postBody = destinationUpdate;
      // verify the required parameter 'destinationUpdate' is set
      if (destinationUpdate === undefined || destinationUpdate === null) {
        throw new Error("Missing the required parameter 'destinationUpdate' when calling checkConnectionToDestinationForUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckConnectionRead;
      return this.apiClient.callApi(
        '/v1/destinations/check_connection_for_update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneDestination operation.
     * @callback module:api/DestinationApi~cloneDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone destination
     * @param {module:model/DestinationCloneRequestBody} destinationCloneRequestBody 
     * @param {module:api/DestinationApi~cloneDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationRead}
     */
    cloneDestination(destinationCloneRequestBody, callback) {
      let postBody = destinationCloneRequestBody;
      // verify the required parameter 'destinationCloneRequestBody' is set
      if (destinationCloneRequestBody === undefined || destinationCloneRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationCloneRequestBody' when calling cloneDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationRead;
      return this.apiClient.callApi(
        '/v1/destinations/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDestination operation.
     * @callback module:api/DestinationApi~createDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a destination
     * @param {module:model/DestinationCreate} destinationCreate 
     * @param {module:api/DestinationApi~createDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationRead}
     */
    createDestination(destinationCreate, callback) {
      let postBody = destinationCreate;
      // verify the required parameter 'destinationCreate' is set
      if (destinationCreate === undefined || destinationCreate === null) {
        throw new Error("Missing the required parameter 'destinationCreate' when calling createDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationRead;
      return this.apiClient.callApi(
        '/v1/destinations/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestination operation.
     * @callback module:api/DestinationApi~deleteDestinationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the destination
     * @param {module:model/DestinationIdRequestBody} destinationIdRequestBody 
     * @param {module:api/DestinationApi~deleteDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDestination(destinationIdRequestBody, callback) {
      let postBody = destinationIdRequestBody;
      // verify the required parameter 'destinationIdRequestBody' is set
      if (destinationIdRequestBody === undefined || destinationIdRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationIdRequestBody' when calling deleteDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/destinations/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestination operation.
     * @callback module:api/DestinationApi~getDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configured destination
     * @param {module:model/DestinationIdRequestBody} destinationIdRequestBody 
     * @param {module:api/DestinationApi~getDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationRead}
     */
    getDestination(destinationIdRequestBody, callback) {
      let postBody = destinationIdRequestBody;
      // verify the required parameter 'destinationIdRequestBody' is set
      if (destinationIdRequestBody === undefined || destinationIdRequestBody === null) {
        throw new Error("Missing the required parameter 'destinationIdRequestBody' when calling getDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationRead;
      return this.apiClient.callApi(
        '/v1/destinations/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDestinationsForWorkspace operation.
     * @callback module:api/DestinationApi~listDestinationsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List configured destinations for a workspace
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/DestinationApi~listDestinationsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationReadList}
     */
    listDestinationsForWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling listDestinationsForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationReadList;
      return this.apiClient.callApi(
        '/v1/destinations/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDestinations operation.
     * @callback module:api/DestinationApi~searchDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search destinations
     * @param {module:model/DestinationSearch} destinationSearch 
     * @param {module:api/DestinationApi~searchDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationReadList}
     */
    searchDestinations(destinationSearch, callback) {
      let postBody = destinationSearch;
      // verify the required parameter 'destinationSearch' is set
      if (destinationSearch === undefined || destinationSearch === null) {
        throw new Error("Missing the required parameter 'destinationSearch' when calling searchDestinations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationReadList;
      return this.apiClient.callApi(
        '/v1/destinations/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDestination operation.
     * @callback module:api/DestinationApi~updateDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DestinationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a destination
     * @param {module:model/DestinationUpdate} destinationUpdate 
     * @param {module:api/DestinationApi~updateDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DestinationRead}
     */
    updateDestination(destinationUpdate, callback) {
      let postBody = destinationUpdate;
      // verify the required parameter 'destinationUpdate' is set
      if (destinationUpdate === undefined || destinationUpdate === null) {
        throw new Error("Missing the required parameter 'destinationUpdate' when calling updateDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DestinationRead;
      return this.apiClient.callApi(
        '/v1/destinations/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
