/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttemptNormalizationStatusReadList from '../model/AttemptNormalizationStatusReadList';
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import JobDebugInfoRead from '../model/JobDebugInfoRead';
import JobIdRequestBody from '../model/JobIdRequestBody';
import JobInfoLightRead from '../model/JobInfoLightRead';
import JobInfoRead from '../model/JobInfoRead';
import JobListRequestBody from '../model/JobListRequestBody';
import JobOptionalRead from '../model/JobOptionalRead';
import JobReadList from '../model/JobReadList';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';

/**
* Jobs service.
* @module api/JobsApi
* @version 1.0.0
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelJob operation.
     * @callback module:api/JobsApi~cancelJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobInfoRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a job
     * @param {module:model/JobIdRequestBody} jobIdRequestBody 
     * @param {module:api/JobsApi~cancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobInfoRead}
     */
    cancelJob(jobIdRequestBody, callback) {
      let postBody = jobIdRequestBody;
      // verify the required parameter 'jobIdRequestBody' is set
      if (jobIdRequestBody === undefined || jobIdRequestBody === null) {
        throw new Error("Missing the required parameter 'jobIdRequestBody' when calling cancelJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobInfoRead;
      return this.apiClient.callApi(
        '/v1/jobs/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttemptNormalizationStatusesForJob operation.
     * @callback module:api/JobsApi~getAttemptNormalizationStatusesForJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttemptNormalizationStatusReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get normalization status to determine if we can bypass normalization phase
     * @param {Object} opts Optional parameters
     * @param {module:model/JobIdRequestBody} [jobIdRequestBody] 
     * @param {module:api/JobsApi~getAttemptNormalizationStatusesForJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttemptNormalizationStatusReadList}
     */
    getAttemptNormalizationStatusesForJob(opts, callback) {
      opts = opts || {};
      let postBody = opts['jobIdRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttemptNormalizationStatusReadList;
      return this.apiClient.callApi(
        '/v1/jobs/get_normalization_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobDebugInfo operation.
     * @callback module:api/JobsApi~getJobDebugInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDebugInfoRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all information needed to debug this job
     * @param {module:model/JobIdRequestBody} jobIdRequestBody 
     * @param {module:api/JobsApi~getJobDebugInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDebugInfoRead}
     */
    getJobDebugInfo(jobIdRequestBody, callback) {
      let postBody = jobIdRequestBody;
      // verify the required parameter 'jobIdRequestBody' is set
      if (jobIdRequestBody === undefined || jobIdRequestBody === null) {
        throw new Error("Missing the required parameter 'jobIdRequestBody' when calling getJobDebugInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobDebugInfoRead;
      return this.apiClient.callApi(
        '/v1/jobs/get_debug_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobInfo operation.
     * @callback module:api/JobsApi~getJobInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobInfoRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a job
     * @param {module:model/JobIdRequestBody} jobIdRequestBody 
     * @param {module:api/JobsApi~getJobInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobInfoRead}
     */
    getJobInfo(jobIdRequestBody, callback) {
      let postBody = jobIdRequestBody;
      // verify the required parameter 'jobIdRequestBody' is set
      if (jobIdRequestBody === undefined || jobIdRequestBody === null) {
        throw new Error("Missing the required parameter 'jobIdRequestBody' when calling getJobInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobInfoRead;
      return this.apiClient.callApi(
        '/v1/jobs/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobInfoLight operation.
     * @callback module:api/JobsApi~getJobInfoLightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobInfoLightRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a job excluding attempt info and logs
     * @param {module:model/JobIdRequestBody} jobIdRequestBody 
     * @param {module:api/JobsApi~getJobInfoLightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobInfoLightRead}
     */
    getJobInfoLight(jobIdRequestBody, callback) {
      let postBody = jobIdRequestBody;
      // verify the required parameter 'jobIdRequestBody' is set
      if (jobIdRequestBody === undefined || jobIdRequestBody === null) {
        throw new Error("Missing the required parameter 'jobIdRequestBody' when calling getJobInfoLight");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobInfoLightRead;
      return this.apiClient.callApi(
        '/v1/jobs/get_light', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastReplicationJob operation.
     * @callback module:api/JobsApi~getLastReplicationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobOptionalRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/JobsApi~getLastReplicationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobOptionalRead}
     */
    getLastReplicationJob(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling getLastReplicationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobOptionalRead;
      return this.apiClient.callApi(
        '/v1/jobs/get_last_replication_job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobsFor operation.
     * @callback module:api/JobsApi~listJobsForCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns recent jobs for a connection. Jobs are returned in descending order by createdAt.
     * @param {module:model/JobListRequestBody} jobListRequestBody 
     * @param {module:api/JobsApi~listJobsForCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobReadList}
     */
    listJobsFor(jobListRequestBody, callback) {
      let postBody = jobListRequestBody;
      // verify the required parameter 'jobListRequestBody' is set
      if (jobListRequestBody === undefined || jobListRequestBody === null) {
        throw new Error("Missing the required parameter 'jobListRequestBody' when calling listJobsFor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobReadList;
      return this.apiClient.callApi(
        '/v1/jobs/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
