/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomSourceDefinitionCreate from '../model/CustomSourceDefinitionCreate';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import PrivateSourceDefinitionRead from '../model/PrivateSourceDefinitionRead';
import PrivateSourceDefinitionReadList from '../model/PrivateSourceDefinitionReadList';
import SourceDefinitionIdRequestBody from '../model/SourceDefinitionIdRequestBody';
import SourceDefinitionIdWithWorkspaceId from '../model/SourceDefinitionIdWithWorkspaceId';
import SourceDefinitionRead from '../model/SourceDefinitionRead';
import SourceDefinitionReadList from '../model/SourceDefinitionReadList';
import SourceDefinitionUpdate from '../model/SourceDefinitionUpdate';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';

/**
* SourceDefinition service.
* @module api/SourceDefinitionApi
* @version 1.0.0
*/
export default class SourceDefinitionApi {

    /**
    * Constructs a new SourceDefinitionApi. 
    * @alias module:api/SourceDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomSourceDefinition operation.
     * @callback module:api/SourceDefinitionApi~createCustomSourceDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom sourceDefinition for the given workspace
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomSourceDefinitionCreate} [customSourceDefinitionCreate] 
     * @param {module:api/SourceDefinitionApi~createCustomSourceDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionRead}
     */
    createCustomSourceDefinition(opts, callback) {
      opts = opts || {};
      let postBody = opts['customSourceDefinitionCreate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionRead;
      return this.apiClient.callApi(
        '/v1/source_definitions/create_custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSourceDefinition operation.
     * @callback module:api/SourceDefinitionApi~deleteSourceDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a source definition
     * @param {module:model/SourceDefinitionIdRequestBody} sourceDefinitionIdRequestBody 
     * @param {module:api/SourceDefinitionApi~deleteSourceDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSourceDefinition(sourceDefinitionIdRequestBody, callback) {
      let postBody = sourceDefinitionIdRequestBody;
      // verify the required parameter 'sourceDefinitionIdRequestBody' is set
      if (sourceDefinitionIdRequestBody === undefined || sourceDefinitionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceDefinitionIdRequestBody' when calling deleteSourceDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/source_definitions/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceDefinition operation.
     * @callback module:api/SourceDefinitionApi~getSourceDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source
     * @param {module:model/SourceDefinitionIdRequestBody} sourceDefinitionIdRequestBody 
     * @param {module:api/SourceDefinitionApi~getSourceDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionRead}
     */
    getSourceDefinition(sourceDefinitionIdRequestBody, callback) {
      let postBody = sourceDefinitionIdRequestBody;
      // verify the required parameter 'sourceDefinitionIdRequestBody' is set
      if (sourceDefinitionIdRequestBody === undefined || sourceDefinitionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'sourceDefinitionIdRequestBody' when calling getSourceDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionRead;
      return this.apiClient.callApi(
        '/v1/source_definitions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceDefinitionForWorkspace operation.
     * @callback module:api/SourceDefinitionApi~getSourceDefinitionForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a sourceDefinition that is configured for the given workspace
     * @param {module:model/SourceDefinitionIdWithWorkspaceId} sourceDefinitionIdWithWorkspaceId 
     * @param {module:api/SourceDefinitionApi~getSourceDefinitionForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionRead}
     */
    getSourceDefinitionForWorkspace(sourceDefinitionIdWithWorkspaceId, callback) {
      let postBody = sourceDefinitionIdWithWorkspaceId;
      // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
      if (sourceDefinitionIdWithWorkspaceId === undefined || sourceDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling getSourceDefinitionForWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionRead;
      return this.apiClient.callApi(
        '/v1/source_definitions/get_for_workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantSourceDefinitionToWorkspace operation.
     * @callback module:api/SourceDefinitionApi~grantSourceDefinitionToWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateSourceDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * grant a private, non-custom sourceDefinition to a given workspace
     * @param {module:model/SourceDefinitionIdWithWorkspaceId} sourceDefinitionIdWithWorkspaceId 
     * @param {module:api/SourceDefinitionApi~grantSourceDefinitionToWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateSourceDefinitionRead}
     */
    grantSourceDefinitionToWorkspace(sourceDefinitionIdWithWorkspaceId, callback) {
      let postBody = sourceDefinitionIdWithWorkspaceId;
      // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
      if (sourceDefinitionIdWithWorkspaceId === undefined || sourceDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling grantSourceDefinitionToWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateSourceDefinitionRead;
      return this.apiClient.callApi(
        '/v1/source_definitions/grant_definition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLatestSourceDefinitions operation.
     * @callback module:api/SourceDefinitionApi~listLatestSourceDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the latest sourceDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported sources.
     * @param {module:api/SourceDefinitionApi~listLatestSourceDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionReadList}
     */
    listLatestSourceDefinitions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/source_definitions/list_latest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrivateSourceDefinitions operation.
     * @callback module:api/SourceDefinitionApi~listPrivateSourceDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateSourceDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace's grants.
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkspaceIdRequestBody} [workspaceIdRequestBody] 
     * @param {module:api/SourceDefinitionApi~listPrivateSourceDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateSourceDefinitionReadList}
     */
    listPrivateSourceDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = opts['workspaceIdRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateSourceDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/source_definitions/list_private', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceDefinitions operation.
     * @callback module:api/SourceDefinitionApi~listSourceDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use
     * @param {module:api/SourceDefinitionApi~listSourceDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionReadList}
     */
    listSourceDefinitions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/source_definitions/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceDefinitionsForWorkspace operation.
     * @callback module:api/SourceDefinitionApi~listSourceDefinitionsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the sourceDefinitions the given workspace is configured to use
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkspaceIdRequestBody} [workspaceIdRequestBody] 
     * @param {module:api/SourceDefinitionApi~listSourceDefinitionsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionReadList}
     */
    listSourceDefinitionsForWorkspace(opts, callback) {
      opts = opts || {};
      let postBody = opts['workspaceIdRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionReadList;
      return this.apiClient.callApi(
        '/v1/source_definitions/list_for_workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeSourceDefinitionFromWorkspace operation.
     * @callback module:api/SourceDefinitionApi~revokeSourceDefinitionFromWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace
     * @param {module:model/SourceDefinitionIdWithWorkspaceId} sourceDefinitionIdWithWorkspaceId 
     * @param {module:api/SourceDefinitionApi~revokeSourceDefinitionFromWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeSourceDefinitionFromWorkspace(sourceDefinitionIdWithWorkspaceId, callback) {
      let postBody = sourceDefinitionIdWithWorkspaceId;
      // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
      if (sourceDefinitionIdWithWorkspaceId === undefined || sourceDefinitionIdWithWorkspaceId === null) {
        throw new Error("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling revokeSourceDefinitionFromWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/source_definitions/revoke_definition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceDefinition operation.
     * @callback module:api/SourceDefinitionApi~updateSourceDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceDefinitionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a sourceDefinition
     * @param {Object} opts Optional parameters
     * @param {module:model/SourceDefinitionUpdate} [sourceDefinitionUpdate] 
     * @param {module:api/SourceDefinitionApi~updateSourceDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceDefinitionRead}
     */
    updateSourceDefinition(opts, callback) {
      opts = opts || {};
      let postBody = opts['sourceDefinitionUpdate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceDefinitionRead;
      return this.apiClient.callApi(
        '/v1/source_definitions/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
