/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionIdRequestBody from '../model/ConnectionIdRequestBody';
import InvalidInputExceptionInfo from '../model/InvalidInputExceptionInfo';
import NotFoundKnownExceptionInfo from '../model/NotFoundKnownExceptionInfo';
import SlugRequestBody from '../model/SlugRequestBody';
import WorkspaceCreate from '../model/WorkspaceCreate';
import WorkspaceGiveFeedback from '../model/WorkspaceGiveFeedback';
import WorkspaceIdRequestBody from '../model/WorkspaceIdRequestBody';
import WorkspaceRead from '../model/WorkspaceRead';
import WorkspaceReadList from '../model/WorkspaceReadList';
import WorkspaceUpdate from '../model/WorkspaceUpdate';
import WorkspaceUpdateName from '../model/WorkspaceUpdateName';

/**
* Workspace service.
* @module api/WorkspaceApi
* @version 1.0.0
*/
export default class WorkspaceApi {

    /**
    * Constructs a new WorkspaceApi. 
    * @alias module:api/WorkspaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkspace operation.
     * @callback module:api/WorkspaceApi~createWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a workspace
     * @param {module:model/WorkspaceCreate} workspaceCreate 
     * @param {module:api/WorkspaceApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    createWorkspace(workspaceCreate, callback) {
      let postBody = workspaceCreate;
      // verify the required parameter 'workspaceCreate' is set
      if (workspaceCreate === undefined || workspaceCreate === null) {
        throw new Error("Missing the required parameter 'workspaceCreate' when calling createWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspace operation.
     * @callback module:api/WorkspaceApi~deleteWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workspace
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/WorkspaceApi~deleteWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling deleteWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workspaces/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspace operation.
     * @callback module:api/WorkspaceApi~getWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find workspace by ID
     * @param {module:model/WorkspaceIdRequestBody} workspaceIdRequestBody 
     * @param {module:api/WorkspaceApi~getWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    getWorkspace(workspaceIdRequestBody, callback) {
      let postBody = workspaceIdRequestBody;
      // verify the required parameter 'workspaceIdRequestBody' is set
      if (workspaceIdRequestBody === undefined || workspaceIdRequestBody === null) {
        throw new Error("Missing the required parameter 'workspaceIdRequestBody' when calling getWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceByConnectionId operation.
     * @callback module:api/WorkspaceApi~getWorkspaceByConnectionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find workspace by connection id
     * @param {module:model/ConnectionIdRequestBody} connectionIdRequestBody 
     * @param {module:api/WorkspaceApi~getWorkspaceByConnectionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    getWorkspaceByConnectionId(connectionIdRequestBody, callback) {
      let postBody = connectionIdRequestBody;
      // verify the required parameter 'connectionIdRequestBody' is set
      if (connectionIdRequestBody === undefined || connectionIdRequestBody === null) {
        throw new Error("Missing the required parameter 'connectionIdRequestBody' when calling getWorkspaceByConnectionId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/get_by_connection_id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceBySlug operation.
     * @callback module:api/WorkspaceApi~getWorkspaceBySlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find workspace by slug
     * @param {module:model/SlugRequestBody} slugRequestBody 
     * @param {module:api/WorkspaceApi~getWorkspaceBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    getWorkspaceBySlug(slugRequestBody, callback) {
      let postBody = slugRequestBody;
      // verify the required parameter 'slugRequestBody' is set
      if (slugRequestBody === undefined || slugRequestBody === null) {
        throw new Error("Missing the required parameter 'slugRequestBody' when calling getWorkspaceBySlug");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/get_by_slug', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkspaces operation.
     * @callback module:api/WorkspaceApi~listWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all workspaces registered in the current Airbyte deployment
     * @param {module:api/WorkspaceApi~listWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceReadList}
     */
    listWorkspaces(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceReadList;
      return this.apiClient.callApi(
        '/v1/workspaces/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspace operation.
     * @callback module:api/WorkspaceApi~updateWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workspace state
     * @param {module:model/WorkspaceUpdate} workspaceUpdate 
     * @param {module:api/WorkspaceApi~updateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    updateWorkspace(workspaceUpdate, callback) {
      let postBody = workspaceUpdate;
      // verify the required parameter 'workspaceUpdate' is set
      if (workspaceUpdate === undefined || workspaceUpdate === null) {
        throw new Error("Missing the required parameter 'workspaceUpdate' when calling updateWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspaceFeedback operation.
     * @callback module:api/WorkspaceApi~updateWorkspaceFeedbackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workspace feedback state
     * @param {module:model/WorkspaceGiveFeedback} workspaceGiveFeedback 
     * @param {module:api/WorkspaceApi~updateWorkspaceFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorkspaceFeedback(workspaceGiveFeedback, callback) {
      let postBody = workspaceGiveFeedback;
      // verify the required parameter 'workspaceGiveFeedback' is set
      if (workspaceGiveFeedback === undefined || workspaceGiveFeedback === null) {
        throw new Error("Missing the required parameter 'workspaceGiveFeedback' when calling updateWorkspaceFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workspaces/tag_feedback_status_as_done', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspaceName operation.
     * @callback module:api/WorkspaceApi~updateWorkspaceNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workspace name
     * @param {module:model/WorkspaceUpdateName} workspaceUpdateName 
     * @param {module:api/WorkspaceApi~updateWorkspaceNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceRead}
     */
    updateWorkspaceName(workspaceUpdateName, callback) {
      let postBody = workspaceUpdateName;
      // verify the required parameter 'workspaceUpdateName' is set
      if (workspaceUpdateName === undefined || workspaceUpdateName === null) {
        throw new Error("Missing the required parameter 'workspaceUpdateName' when calling updateWorkspaceName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceRead;
      return this.apiClient.callApi(
        '/v1/workspaces/update_name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
