/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuthConfigSpecification model module.
 * @module model/OAuthConfigSpecification
 * @version 1.0.0
 */
class OAuthConfigSpecification {
    /**
     * Constructs a new <code>OAuthConfigSpecification</code>.
     * @alias module:model/OAuthConfigSpecification
     */
    constructor() { 
        
        OAuthConfigSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuthConfigSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuthConfigSpecification} obj Optional instance to populate.
     * @return {module:model/OAuthConfigSpecification} The populated <code>OAuthConfigSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthConfigSpecification();

            if (data.hasOwnProperty('completeOAuthOutputSpecification')) {
                obj['completeOAuthOutputSpecification'] = ApiClient.convertToType(data['completeOAuthOutputSpecification'], Object);
            }
            if (data.hasOwnProperty('completeOAuthServerInputSpecification')) {
                obj['completeOAuthServerInputSpecification'] = ApiClient.convertToType(data['completeOAuthServerInputSpecification'], Object);
            }
            if (data.hasOwnProperty('completeOAuthServerOutputSpecification')) {
                obj['completeOAuthServerOutputSpecification'] = ApiClient.convertToType(data['completeOAuthServerOutputSpecification'], Object);
            }
            if (data.hasOwnProperty('oauthUserInputFromConnectorConfigSpecification')) {
                obj['oauthUserInputFromConnectorConfigSpecification'] = ApiClient.convertToType(data['oauthUserInputFromConnectorConfigSpecification'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuthConfigSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuthConfigSpecification</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
 * @member {Object} completeOAuthOutputSpecification
 */
OAuthConfigSpecification.prototype['completeOAuthOutputSpecification'] = undefined;

/**
 * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
 * @member {Object} completeOAuthServerInputSpecification
 */
OAuthConfigSpecification.prototype['completeOAuthServerInputSpecification'] = undefined;

/**
 * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
 * @member {Object} completeOAuthServerOutputSpecification
 */
OAuthConfigSpecification.prototype['completeOAuthServerOutputSpecification'] = undefined;

/**
 * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
 * @member {Object} oauthUserInputFromConnectorConfigSpecification
 */
OAuthConfigSpecification.prototype['oauthUserInputFromConnectorConfigSpecification'] = undefined;






export default OAuthConfigSpecification;

