/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationSyncMode from './DestinationSyncMode';
import SelectedFieldInfo from './SelectedFieldInfo';
import SyncMode from './SyncMode';

/**
 * The AirbyteStreamConfiguration model module.
 * @module model/AirbyteStreamConfiguration
 * @version 1.0.0
 */
class AirbyteStreamConfiguration {
    /**
     * Constructs a new <code>AirbyteStreamConfiguration</code>.
     * the mutable part of the stream to configure the destination
     * @alias module:model/AirbyteStreamConfiguration
     * @param destinationSyncMode {module:model/DestinationSyncMode} 
     * @param syncMode {module:model/SyncMode} 
     */
    constructor(destinationSyncMode, syncMode) { 
        
        AirbyteStreamConfiguration.initialize(this, destinationSyncMode, syncMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationSyncMode, syncMode) { 
        obj['destinationSyncMode'] = destinationSyncMode;
        obj['syncMode'] = syncMode;
    }

    /**
     * Constructs a <code>AirbyteStreamConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirbyteStreamConfiguration} obj Optional instance to populate.
     * @return {module:model/AirbyteStreamConfiguration} The populated <code>AirbyteStreamConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirbyteStreamConfiguration();

            if (data.hasOwnProperty('aliasName')) {
                obj['aliasName'] = ApiClient.convertToType(data['aliasName'], 'String');
            }
            if (data.hasOwnProperty('cursorField')) {
                obj['cursorField'] = ApiClient.convertToType(data['cursorField'], ['String']);
            }
            if (data.hasOwnProperty('destinationSyncMode')) {
                obj['destinationSyncMode'] = DestinationSyncMode.constructFromObject(data['destinationSyncMode']);
            }
            if (data.hasOwnProperty('fieldSelectionEnabled')) {
                obj['fieldSelectionEnabled'] = ApiClient.convertToType(data['fieldSelectionEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], [['String']]);
            }
            if (data.hasOwnProperty('selected')) {
                obj['selected'] = ApiClient.convertToType(data['selected'], 'Boolean');
            }
            if (data.hasOwnProperty('selectedFields')) {
                obj['selectedFields'] = ApiClient.convertToType(data['selectedFields'], [SelectedFieldInfo]);
            }
            if (data.hasOwnProperty('suggested')) {
                obj['suggested'] = ApiClient.convertToType(data['suggested'], 'Boolean');
            }
            if (data.hasOwnProperty('syncMode')) {
                obj['syncMode'] = SyncMode.constructFromObject(data['syncMode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirbyteStreamConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirbyteStreamConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirbyteStreamConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aliasName'] && !(typeof data['aliasName'] === 'string' || data['aliasName'] instanceof String)) {
            throw new Error("Expected the field `aliasName` to be a primitive type in the JSON string but got " + data['aliasName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cursorField'])) {
            throw new Error("Expected the field `cursorField` to be an array in the JSON data but got " + data['cursorField']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['primaryKey'])) {
            throw new Error("Expected the field `primaryKey` to be an array in the JSON data but got " + data['primaryKey']);
        }
        if (data['selectedFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selectedFields'])) {
                throw new Error("Expected the field `selectedFields` to be an array in the JSON data but got " + data['selectedFields']);
            }
            // validate the optional field `selectedFields` (array)
            for (const item of data['selectedFields']) {
                SelectedFieldInfo.validateJSON(item);
            };
        }

        return true;
    }


}

AirbyteStreamConfiguration.RequiredProperties = ["destinationSyncMode", "syncMode"];

/**
 * Alias name to the stream to be used in the destination
 * @member {String} aliasName
 */
AirbyteStreamConfiguration.prototype['aliasName'] = undefined;

/**
 * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
 * @member {Array.<String>} cursorField
 */
AirbyteStreamConfiguration.prototype['cursorField'] = undefined;

/**
 * @member {module:model/DestinationSyncMode} destinationSyncMode
 */
AirbyteStreamConfiguration.prototype['destinationSyncMode'] = undefined;

/**
 * Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.
 * @member {Boolean} fieldSelectionEnabled
 */
AirbyteStreamConfiguration.prototype['fieldSelectionEnabled'] = undefined;

/**
 * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
 * @member {Array.<Array.<String>>} primaryKey
 */
AirbyteStreamConfiguration.prototype['primaryKey'] = undefined;

/**
 * If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not
 * @member {Boolean} selected
 */
AirbyteStreamConfiguration.prototype['selected'] = undefined;

/**
 * Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.
 * @member {Array.<module:model/SelectedFieldInfo>} selectedFields
 */
AirbyteStreamConfiguration.prototype['selectedFields'] = undefined;

/**
 * Does the connector suggest that this stream be enabled by default?
 * @member {Boolean} suggested
 */
AirbyteStreamConfiguration.prototype['suggested'] = undefined;

/**
 * @member {module:model/SyncMode} syncMode
 */
AirbyteStreamConfiguration.prototype['syncMode'] = undefined;






export default AirbyteStreamConfiguration;

