/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SetInstancewideSourceOauthParamsRequestBody model module.
 * @module model/SetInstancewideSourceOauthParamsRequestBody
 * @version 1.0.0
 */
class SetInstancewideSourceOauthParamsRequestBody {
    /**
     * Constructs a new <code>SetInstancewideSourceOauthParamsRequestBody</code>.
     * @alias module:model/SetInstancewideSourceOauthParamsRequestBody
     * @param params {Object.<String, Object>} 
     * @param sourceDefinitionId {String} 
     */
    constructor(params, sourceDefinitionId) { 
        
        SetInstancewideSourceOauthParamsRequestBody.initialize(this, params, sourceDefinitionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, params, sourceDefinitionId) { 
        obj['params'] = params;
        obj['sourceDefinitionId'] = sourceDefinitionId;
    }

    /**
     * Constructs a <code>SetInstancewideSourceOauthParamsRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetInstancewideSourceOauthParamsRequestBody} obj Optional instance to populate.
     * @return {module:model/SetInstancewideSourceOauthParamsRequestBody} The populated <code>SetInstancewideSourceOauthParamsRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetInstancewideSourceOauthParamsRequestBody();

            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('sourceDefinitionId')) {
                obj['sourceDefinitionId'] = ApiClient.convertToType(data['sourceDefinitionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetInstancewideSourceOauthParamsRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetInstancewideSourceOauthParamsRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SetInstancewideSourceOauthParamsRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sourceDefinitionId'] && !(typeof data['sourceDefinitionId'] === 'string' || data['sourceDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `sourceDefinitionId` to be a primitive type in the JSON string but got " + data['sourceDefinitionId']);
        }

        return true;
    }


}

SetInstancewideSourceOauthParamsRequestBody.RequiredProperties = ["params", "sourceDefinitionId"];

/**
 * @member {Object.<String, Object>} params
 */
SetInstancewideSourceOauthParamsRequestBody.prototype['params'] = undefined;

/**
 * @member {String} sourceDefinitionId
 */
SetInstancewideSourceOauthParamsRequestBody.prototype['sourceDefinitionId'] = undefined;






export default SetInstancewideSourceOauthParamsRequestBody;

