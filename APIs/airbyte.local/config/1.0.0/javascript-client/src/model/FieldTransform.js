/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldAdd from './FieldAdd';
import FieldRemove from './FieldRemove';
import FieldSchemaUpdate from './FieldSchemaUpdate';

/**
 * The FieldTransform model module.
 * @module model/FieldTransform
 * @version 1.0.0
 */
class FieldTransform {
    /**
     * Constructs a new <code>FieldTransform</code>.
     * Describes the difference between two Streams.
     * @alias module:model/FieldTransform
     * @param breaking {Boolean} 
     * @param fieldName {Array.<String>} A field name is a list of strings that form the path to the field.
     * @param transformType {module:model/FieldTransform.TransformTypeEnum} 
     */
    constructor(breaking, fieldName, transformType) { 
        
        FieldTransform.initialize(this, breaking, fieldName, transformType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, breaking, fieldName, transformType) { 
        obj['breaking'] = breaking;
        obj['fieldName'] = fieldName;
        obj['transformType'] = transformType;
    }

    /**
     * Constructs a <code>FieldTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldTransform} obj Optional instance to populate.
     * @return {module:model/FieldTransform} The populated <code>FieldTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldTransform();

            if (data.hasOwnProperty('addField')) {
                obj['addField'] = FieldAdd.constructFromObject(data['addField']);
            }
            if (data.hasOwnProperty('breaking')) {
                obj['breaking'] = ApiClient.convertToType(data['breaking'], 'Boolean');
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], ['String']);
            }
            if (data.hasOwnProperty('removeField')) {
                obj['removeField'] = FieldRemove.constructFromObject(data['removeField']);
            }
            if (data.hasOwnProperty('transformType')) {
                obj['transformType'] = ApiClient.convertToType(data['transformType'], 'String');
            }
            if (data.hasOwnProperty('updateFieldSchema')) {
                obj['updateFieldSchema'] = FieldSchemaUpdate.constructFromObject(data['updateFieldSchema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldTransform</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldTransform.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `addField`
        if (data['addField']) { // data not null
          FieldAdd.validateJSON(data['addField']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fieldName'])) {
            throw new Error("Expected the field `fieldName` to be an array in the JSON data but got " + data['fieldName']);
        }
        // validate the optional field `removeField`
        if (data['removeField']) { // data not null
          FieldRemove.validateJSON(data['removeField']);
        }
        // ensure the json data is a string
        if (data['transformType'] && !(typeof data['transformType'] === 'string' || data['transformType'] instanceof String)) {
            throw new Error("Expected the field `transformType` to be a primitive type in the JSON string but got " + data['transformType']);
        }
        // validate the optional field `updateFieldSchema`
        if (data['updateFieldSchema']) { // data not null
          FieldSchemaUpdate.validateJSON(data['updateFieldSchema']);
        }

        return true;
    }


}

FieldTransform.RequiredProperties = ["breaking", "fieldName", "transformType"];

/**
 * @member {module:model/FieldAdd} addField
 */
FieldTransform.prototype['addField'] = undefined;

/**
 * @member {Boolean} breaking
 */
FieldTransform.prototype['breaking'] = undefined;

/**
 * A field name is a list of strings that form the path to the field.
 * @member {Array.<String>} fieldName
 */
FieldTransform.prototype['fieldName'] = undefined;

/**
 * @member {module:model/FieldRemove} removeField
 */
FieldTransform.prototype['removeField'] = undefined;

/**
 * @member {module:model/FieldTransform.TransformTypeEnum} transformType
 */
FieldTransform.prototype['transformType'] = undefined;

/**
 * @member {module:model/FieldSchemaUpdate} updateFieldSchema
 */
FieldTransform.prototype['updateFieldSchema'] = undefined;





/**
 * Allowed values for the <code>transformType</code> property.
 * @enum {String}
 * @readonly
 */
FieldTransform['TransformTypeEnum'] = {

    /**
     * value: "add_field"
     * @const
     */
    "add_field": "add_field",

    /**
     * value: "remove_field"
     * @const
     */
    "remove_field": "remove_field",

    /**
     * value: "update_field_schema"
     * @const
     */
    "update_field_schema": "update_field_schema"
};



export default FieldTransform;

