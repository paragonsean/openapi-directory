/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionScheduleDataBasicSchedule from './ConnectionScheduleDataBasicSchedule';
import ConnectionScheduleDataCron from './ConnectionScheduleDataCron';

/**
 * The ConnectionScheduleData model module.
 * @module model/ConnectionScheduleData
 * @version 1.0.0
 */
class ConnectionScheduleData {
    /**
     * Constructs a new <code>ConnectionScheduleData</code>.
     * schedule for when the the connection should run, per the schedule type
     * @alias module:model/ConnectionScheduleData
     */
    constructor() { 
        
        ConnectionScheduleData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionScheduleData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionScheduleData} obj Optional instance to populate.
     * @return {module:model/ConnectionScheduleData} The populated <code>ConnectionScheduleData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionScheduleData();

            if (data.hasOwnProperty('basicSchedule')) {
                obj['basicSchedule'] = ConnectionScheduleDataBasicSchedule.constructFromObject(data['basicSchedule']);
            }
            if (data.hasOwnProperty('cron')) {
                obj['cron'] = ConnectionScheduleDataCron.constructFromObject(data['cron']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionScheduleData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionScheduleData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `basicSchedule`
        if (data['basicSchedule']) { // data not null
          ConnectionScheduleDataBasicSchedule.validateJSON(data['basicSchedule']);
        }
        // validate the optional field `cron`
        if (data['cron']) { // data not null
          ConnectionScheduleDataCron.validateJSON(data['cron']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConnectionScheduleDataBasicSchedule} basicSchedule
 */
ConnectionScheduleData.prototype['basicSchedule'] = undefined;

/**
 * @member {module:model/ConnectionScheduleDataCron} cron
 */
ConnectionScheduleData.prototype['cron'] = undefined;






export default ConnectionScheduleData;

