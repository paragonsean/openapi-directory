/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionStateType from './ConnectionStateType';
import GlobalState from './GlobalState';
import StreamState from './StreamState';

/**
 * The ConnectionState model module.
 * @module model/ConnectionState
 * @version 1.0.0
 */
class ConnectionState {
    /**
     * Constructs a new <code>ConnectionState</code>.
     * Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType&#x3D;not_set, then none of the fields will be set.
     * @alias module:model/ConnectionState
     * @param connectionId {String} 
     * @param stateType {module:model/ConnectionStateType} 
     */
    constructor(connectionId, stateType) { 
        
        ConnectionState.initialize(this, connectionId, stateType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionId, stateType) { 
        obj['connectionId'] = connectionId;
        obj['stateType'] = stateType;
    }

    /**
     * Constructs a <code>ConnectionState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionState} obj Optional instance to populate.
     * @return {module:model/ConnectionState} The populated <code>ConnectionState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionState();

            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('globalState')) {
                obj['globalState'] = GlobalState.constructFromObject(data['globalState']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], Object);
            }
            if (data.hasOwnProperty('stateType')) {
                obj['stateType'] = ConnectionStateType.constructFromObject(data['stateType']);
            }
            if (data.hasOwnProperty('streamState')) {
                obj['streamState'] = ApiClient.convertToType(data['streamState'], [StreamState]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectionState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // validate the optional field `globalState`
        if (data['globalState']) { // data not null
          GlobalState.validateJSON(data['globalState']);
        }
        if (data['streamState']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streamState'])) {
                throw new Error("Expected the field `streamState` to be an array in the JSON data but got " + data['streamState']);
            }
            // validate the optional field `streamState` (array)
            for (const item of data['streamState']) {
                StreamState.validateJSON(item);
            };
        }

        return true;
    }


}

ConnectionState.RequiredProperties = ["connectionId", "stateType"];

/**
 * @member {String} connectionId
 */
ConnectionState.prototype['connectionId'] = undefined;

/**
 * @member {module:model/GlobalState} globalState
 */
ConnectionState.prototype['globalState'] = undefined;

/**
 * @member {Object} state
 */
ConnectionState.prototype['state'] = undefined;

/**
 * @member {module:model/ConnectionStateType} stateType
 */
ConnectionState.prototype['stateType'] = undefined;

/**
 * @member {Array.<module:model/StreamState>} streamState
 */
ConnectionState.prototype['streamState'] = undefined;






export default ConnectionState;

