/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldTransform from './FieldTransform';
import StreamDescriptor from './StreamDescriptor';

/**
 * The StreamTransform model module.
 * @module model/StreamTransform
 * @version 1.0.0
 */
class StreamTransform {
    /**
     * Constructs a new <code>StreamTransform</code>.
     * @alias module:model/StreamTransform
     * @param streamDescriptor {module:model/StreamDescriptor} 
     * @param transformType {module:model/StreamTransform.TransformTypeEnum} 
     */
    constructor(streamDescriptor, transformType) { 
        
        StreamTransform.initialize(this, streamDescriptor, transformType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, streamDescriptor, transformType) { 
        obj['streamDescriptor'] = streamDescriptor;
        obj['transformType'] = transformType;
    }

    /**
     * Constructs a <code>StreamTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamTransform} obj Optional instance to populate.
     * @return {module:model/StreamTransform} The populated <code>StreamTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamTransform();

            if (data.hasOwnProperty('streamDescriptor')) {
                obj['streamDescriptor'] = StreamDescriptor.constructFromObject(data['streamDescriptor']);
            }
            if (data.hasOwnProperty('transformType')) {
                obj['transformType'] = ApiClient.convertToType(data['transformType'], 'String');
            }
            if (data.hasOwnProperty('updateStream')) {
                obj['updateStream'] = ApiClient.convertToType(data['updateStream'], [FieldTransform]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamTransform</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StreamTransform.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `streamDescriptor`
        if (data['streamDescriptor']) { // data not null
          StreamDescriptor.validateJSON(data['streamDescriptor']);
        }
        // ensure the json data is a string
        if (data['transformType'] && !(typeof data['transformType'] === 'string' || data['transformType'] instanceof String)) {
            throw new Error("Expected the field `transformType` to be a primitive type in the JSON string but got " + data['transformType']);
        }
        if (data['updateStream']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updateStream'])) {
                throw new Error("Expected the field `updateStream` to be an array in the JSON data but got " + data['updateStream']);
            }
            // validate the optional field `updateStream` (array)
            for (const item of data['updateStream']) {
                FieldTransform.validateJSON(item);
            };
        }

        return true;
    }


}

StreamTransform.RequiredProperties = ["streamDescriptor", "transformType"];

/**
 * @member {module:model/StreamDescriptor} streamDescriptor
 */
StreamTransform.prototype['streamDescriptor'] = undefined;

/**
 * @member {module:model/StreamTransform.TransformTypeEnum} transformType
 */
StreamTransform.prototype['transformType'] = undefined;

/**
 * list of field transformations. order does not matter.
 * @member {Array.<module:model/FieldTransform>} updateStream
 */
StreamTransform.prototype['updateStream'] = undefined;





/**
 * Allowed values for the <code>transformType</code> property.
 * @enum {String}
 * @readonly
 */
StreamTransform['TransformTypeEnum'] = {

    /**
     * value: "add_stream"
     * @const
     */
    "add_stream": "add_stream",

    /**
     * value: "remove_stream"
     * @const
     */
    "remove_stream": "remove_stream",

    /**
     * value: "update_stream"
     * @const
     */
    "update_stream": "update_stream"
};



export default StreamTransform;

