/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DbMigrationState from './DbMigrationState';

/**
 * The DbMigrationRead model module.
 * @module model/DbMigrationRead
 * @version 1.0.0
 */
class DbMigrationRead {
    /**
     * Constructs a new <code>DbMigrationRead</code>.
     * @alias module:model/DbMigrationRead
     * @param migrationDescription {String} 
     * @param migrationType {String} 
     * @param migrationVersion {String} 
     */
    constructor(migrationDescription, migrationType, migrationVersion) { 
        
        DbMigrationRead.initialize(this, migrationDescription, migrationType, migrationVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, migrationDescription, migrationType, migrationVersion) { 
        obj['migrationDescription'] = migrationDescription;
        obj['migrationType'] = migrationType;
        obj['migrationVersion'] = migrationVersion;
    }

    /**
     * Constructs a <code>DbMigrationRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DbMigrationRead} obj Optional instance to populate.
     * @return {module:model/DbMigrationRead} The populated <code>DbMigrationRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DbMigrationRead();

            if (data.hasOwnProperty('migratedAt')) {
                obj['migratedAt'] = ApiClient.convertToType(data['migratedAt'], 'Number');
            }
            if (data.hasOwnProperty('migratedBy')) {
                obj['migratedBy'] = ApiClient.convertToType(data['migratedBy'], 'String');
            }
            if (data.hasOwnProperty('migrationDescription')) {
                obj['migrationDescription'] = ApiClient.convertToType(data['migrationDescription'], 'String');
            }
            if (data.hasOwnProperty('migrationScript')) {
                obj['migrationScript'] = ApiClient.convertToType(data['migrationScript'], 'String');
            }
            if (data.hasOwnProperty('migrationState')) {
                obj['migrationState'] = DbMigrationState.constructFromObject(data['migrationState']);
            }
            if (data.hasOwnProperty('migrationType')) {
                obj['migrationType'] = ApiClient.convertToType(data['migrationType'], 'String');
            }
            if (data.hasOwnProperty('migrationVersion')) {
                obj['migrationVersion'] = ApiClient.convertToType(data['migrationVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DbMigrationRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DbMigrationRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DbMigrationRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['migratedBy'] && !(typeof data['migratedBy'] === 'string' || data['migratedBy'] instanceof String)) {
            throw new Error("Expected the field `migratedBy` to be a primitive type in the JSON string but got " + data['migratedBy']);
        }
        // ensure the json data is a string
        if (data['migrationDescription'] && !(typeof data['migrationDescription'] === 'string' || data['migrationDescription'] instanceof String)) {
            throw new Error("Expected the field `migrationDescription` to be a primitive type in the JSON string but got " + data['migrationDescription']);
        }
        // ensure the json data is a string
        if (data['migrationScript'] && !(typeof data['migrationScript'] === 'string' || data['migrationScript'] instanceof String)) {
            throw new Error("Expected the field `migrationScript` to be a primitive type in the JSON string but got " + data['migrationScript']);
        }
        // ensure the json data is a string
        if (data['migrationType'] && !(typeof data['migrationType'] === 'string' || data['migrationType'] instanceof String)) {
            throw new Error("Expected the field `migrationType` to be a primitive type in the JSON string but got " + data['migrationType']);
        }
        // ensure the json data is a string
        if (data['migrationVersion'] && !(typeof data['migrationVersion'] === 'string' || data['migrationVersion'] instanceof String)) {
            throw new Error("Expected the field `migrationVersion` to be a primitive type in the JSON string but got " + data['migrationVersion']);
        }

        return true;
    }


}

DbMigrationRead.RequiredProperties = ["migrationDescription", "migrationType", "migrationVersion"];

/**
 * @member {Number} migratedAt
 */
DbMigrationRead.prototype['migratedAt'] = undefined;

/**
 * @member {String} migratedBy
 */
DbMigrationRead.prototype['migratedBy'] = undefined;

/**
 * @member {String} migrationDescription
 */
DbMigrationRead.prototype['migrationDescription'] = undefined;

/**
 * @member {String} migrationScript
 */
DbMigrationRead.prototype['migrationScript'] = undefined;

/**
 * @member {module:model/DbMigrationState} migrationState
 */
DbMigrationRead.prototype['migrationState'] = undefined;

/**
 * @member {String} migrationType
 */
DbMigrationRead.prototype['migrationType'] = undefined;

/**
 * @member {String} migrationVersion
 */
DbMigrationRead.prototype['migrationVersion'] = undefined;






export default DbMigrationRead;

