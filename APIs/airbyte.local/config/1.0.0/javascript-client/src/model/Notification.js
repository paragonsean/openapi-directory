/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationType from './NotificationType';
import SlackNotificationConfiguration from './SlackNotificationConfiguration';

/**
 * The Notification model module.
 * @module model/Notification
 * @version 1.0.0
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * @alias module:model/Notification
     * @param notificationType {module:model/NotificationType} 
     * @param sendOnFailure {Boolean} 
     * @param sendOnSuccess {Boolean} 
     */
    constructor(notificationType, sendOnFailure, sendOnSuccess) { 
        
        Notification.initialize(this, notificationType, sendOnFailure, sendOnSuccess);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, notificationType, sendOnFailure, sendOnSuccess) { 
        obj['notificationType'] = notificationType;
        obj['sendOnFailure'] = sendOnFailure || true;
        obj['sendOnSuccess'] = sendOnSuccess || false;
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('customerioConfiguration')) {
                obj['customerioConfiguration'] = ApiClient.convertToType(data['customerioConfiguration'], Object);
            }
            if (data.hasOwnProperty('notificationType')) {
                obj['notificationType'] = NotificationType.constructFromObject(data['notificationType']);
            }
            if (data.hasOwnProperty('sendOnFailure')) {
                obj['sendOnFailure'] = ApiClient.convertToType(data['sendOnFailure'], 'Boolean');
            }
            if (data.hasOwnProperty('sendOnSuccess')) {
                obj['sendOnSuccess'] = ApiClient.convertToType(data['sendOnSuccess'], 'Boolean');
            }
            if (data.hasOwnProperty('slackConfiguration')) {
                obj['slackConfiguration'] = SlackNotificationConfiguration.constructFromObject(data['slackConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Notification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `slackConfiguration`
        if (data['slackConfiguration']) { // data not null
          SlackNotificationConfiguration.validateJSON(data['slackConfiguration']);
        }

        return true;
    }


}

Notification.RequiredProperties = ["notificationType", "sendOnFailure", "sendOnSuccess"];

/**
 * @member {Object} customerioConfiguration
 */
Notification.prototype['customerioConfiguration'] = undefined;

/**
 * @member {module:model/NotificationType} notificationType
 */
Notification.prototype['notificationType'] = undefined;

/**
 * @member {Boolean} sendOnFailure
 * @default true
 */
Notification.prototype['sendOnFailure'] = true;

/**
 * @member {Boolean} sendOnSuccess
 * @default false
 */
Notification.prototype['sendOnSuccess'] = false;

/**
 * @member {module:model/SlackNotificationConfiguration} slackConfiguration
 */
Notification.prototype['slackConfiguration'] = undefined;






export default Notification;

