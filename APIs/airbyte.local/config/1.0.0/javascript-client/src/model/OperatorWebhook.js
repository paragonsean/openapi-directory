/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperatorWebhookDbtCloud from './OperatorWebhookDbtCloud';

/**
 * The OperatorWebhook model module.
 * @module model/OperatorWebhook
 * @version 1.0.0
 */
class OperatorWebhook {
    /**
     * Constructs a new <code>OperatorWebhook</code>.
     * @alias module:model/OperatorWebhook
     */
    constructor() { 
        
        OperatorWebhook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperatorWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperatorWebhook} obj Optional instance to populate.
     * @return {module:model/OperatorWebhook} The populated <code>OperatorWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperatorWebhook();

            if (data.hasOwnProperty('dbtCloud')) {
                obj['dbtCloud'] = OperatorWebhookDbtCloud.constructFromObject(data['dbtCloud']);
            }
            if (data.hasOwnProperty('executionBody')) {
                obj['executionBody'] = ApiClient.convertToType(data['executionBody'], 'String');
            }
            if (data.hasOwnProperty('executionUrl')) {
                obj['executionUrl'] = ApiClient.convertToType(data['executionUrl'], 'String');
            }
            if (data.hasOwnProperty('webhookConfigId')) {
                obj['webhookConfigId'] = ApiClient.convertToType(data['webhookConfigId'], 'String');
            }
            if (data.hasOwnProperty('webhookType')) {
                obj['webhookType'] = ApiClient.convertToType(data['webhookType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperatorWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperatorWebhook</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dbtCloud`
        if (data['dbtCloud']) { // data not null
          OperatorWebhookDbtCloud.validateJSON(data['dbtCloud']);
        }
        // ensure the json data is a string
        if (data['executionBody'] && !(typeof data['executionBody'] === 'string' || data['executionBody'] instanceof String)) {
            throw new Error("Expected the field `executionBody` to be a primitive type in the JSON string but got " + data['executionBody']);
        }
        // ensure the json data is a string
        if (data['executionUrl'] && !(typeof data['executionUrl'] === 'string' || data['executionUrl'] instanceof String)) {
            throw new Error("Expected the field `executionUrl` to be a primitive type in the JSON string but got " + data['executionUrl']);
        }
        // ensure the json data is a string
        if (data['webhookConfigId'] && !(typeof data['webhookConfigId'] === 'string' || data['webhookConfigId'] instanceof String)) {
            throw new Error("Expected the field `webhookConfigId` to be a primitive type in the JSON string but got " + data['webhookConfigId']);
        }
        // ensure the json data is a string
        if (data['webhookType'] && !(typeof data['webhookType'] === 'string' || data['webhookType'] instanceof String)) {
            throw new Error("Expected the field `webhookType` to be a primitive type in the JSON string but got " + data['webhookType']);
        }

        return true;
    }


}



/**
 * @member {module:model/OperatorWebhookDbtCloud} dbtCloud
 */
OperatorWebhook.prototype['dbtCloud'] = undefined;

/**
 * DEPRECATED. Populate dbtCloud instead.
 * @member {String} executionBody
 */
OperatorWebhook.prototype['executionBody'] = undefined;

/**
 * DEPRECATED. Populate dbtCloud instead.
 * @member {String} executionUrl
 */
OperatorWebhook.prototype['executionUrl'] = undefined;

/**
 * The id of the webhook configs to use from the workspace.
 * @member {String} webhookConfigId
 */
OperatorWebhook.prototype['webhookConfigId'] = undefined;

/**
 * @member {module:model/OperatorWebhook.WebhookTypeEnum} webhookType
 */
OperatorWebhook.prototype['webhookType'] = undefined;





/**
 * Allowed values for the <code>webhookType</code> property.
 * @enum {String}
 * @readonly
 */
OperatorWebhook['WebhookTypeEnum'] = {

    /**
     * value: "dbtCloud"
     * @const
     */
    "dbtCloud": "dbtCloud"
};



export default OperatorWebhook;

