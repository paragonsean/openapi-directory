/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceOauthConsentRequest model module.
 * @module model/SourceOauthConsentRequest
 * @version 1.0.0
 */
class SourceOauthConsentRequest {
    /**
     * Constructs a new <code>SourceOauthConsentRequest</code>.
     * @alias module:model/SourceOauthConsentRequest
     * @param redirectUrl {String} The url to redirect to after getting the user consent
     * @param sourceDefinitionId {String} 
     * @param workspaceId {String} 
     */
    constructor(redirectUrl, sourceDefinitionId, workspaceId) { 
        
        SourceOauthConsentRequest.initialize(this, redirectUrl, sourceDefinitionId, workspaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, redirectUrl, sourceDefinitionId, workspaceId) { 
        obj['redirectUrl'] = redirectUrl;
        obj['sourceDefinitionId'] = sourceDefinitionId;
        obj['workspaceId'] = workspaceId;
    }

    /**
     * Constructs a <code>SourceOauthConsentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceOauthConsentRequest} obj Optional instance to populate.
     * @return {module:model/SourceOauthConsentRequest} The populated <code>SourceOauthConsentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceOauthConsentRequest();

            if (data.hasOwnProperty('oAuthInputConfiguration')) {
                obj['oAuthInputConfiguration'] = ApiClient.convertToType(data['oAuthInputConfiguration'], Object);
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceDefinitionId')) {
                obj['sourceDefinitionId'] = ApiClient.convertToType(data['sourceDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('sourceId')) {
                obj['sourceId'] = ApiClient.convertToType(data['sourceId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceOauthConsentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceOauthConsentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SourceOauthConsentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }
        // ensure the json data is a string
        if (data['sourceDefinitionId'] && !(typeof data['sourceDefinitionId'] === 'string' || data['sourceDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `sourceDefinitionId` to be a primitive type in the JSON string but got " + data['sourceDefinitionId']);
        }
        // ensure the json data is a string
        if (data['sourceId'] && !(typeof data['sourceId'] === 'string' || data['sourceId'] instanceof String)) {
            throw new Error("Expected the field `sourceId` to be a primitive type in the JSON string but got " + data['sourceId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

SourceOauthConsentRequest.RequiredProperties = ["redirectUrl", "sourceDefinitionId", "workspaceId"];

/**
 * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
 * @member {Object} oAuthInputConfiguration
 */
SourceOauthConsentRequest.prototype['oAuthInputConfiguration'] = undefined;

/**
 * The url to redirect to after getting the user consent
 * @member {String} redirectUrl
 */
SourceOauthConsentRequest.prototype['redirectUrl'] = undefined;

/**
 * @member {String} sourceDefinitionId
 */
SourceOauthConsentRequest.prototype['sourceDefinitionId'] = undefined;

/**
 * @member {String} sourceId
 */
SourceOauthConsentRequest.prototype['sourceId'] = undefined;

/**
 * @member {String} workspaceId
 */
SourceOauthConsentRequest.prototype['workspaceId'] = undefined;






export default SourceOauthConsentRequest;

