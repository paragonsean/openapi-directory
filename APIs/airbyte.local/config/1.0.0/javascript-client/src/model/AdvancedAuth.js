/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OAuthConfigSpecification from './OAuthConfigSpecification';

/**
 * The AdvancedAuth model module.
 * @module model/AdvancedAuth
 * @version 1.0.0
 */
class AdvancedAuth {
    /**
     * Constructs a new <code>AdvancedAuth</code>.
     * @alias module:model/AdvancedAuth
     */
    constructor() { 
        
        AdvancedAuth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdvancedAuth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvancedAuth} obj Optional instance to populate.
     * @return {module:model/AdvancedAuth} The populated <code>AdvancedAuth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvancedAuth();

            if (data.hasOwnProperty('authFlowType')) {
                obj['authFlowType'] = ApiClient.convertToType(data['authFlowType'], 'String');
            }
            if (data.hasOwnProperty('oauthConfigSpecification')) {
                obj['oauthConfigSpecification'] = OAuthConfigSpecification.constructFromObject(data['oauthConfigSpecification']);
            }
            if (data.hasOwnProperty('predicateKey')) {
                obj['predicateKey'] = ApiClient.convertToType(data['predicateKey'], ['String']);
            }
            if (data.hasOwnProperty('predicateValue')) {
                obj['predicateValue'] = ApiClient.convertToType(data['predicateValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvancedAuth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvancedAuth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authFlowType'] && !(typeof data['authFlowType'] === 'string' || data['authFlowType'] instanceof String)) {
            throw new Error("Expected the field `authFlowType` to be a primitive type in the JSON string but got " + data['authFlowType']);
        }
        // validate the optional field `oauthConfigSpecification`
        if (data['oauthConfigSpecification']) { // data not null
          OAuthConfigSpecification.validateJSON(data['oauthConfigSpecification']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['predicateKey'])) {
            throw new Error("Expected the field `predicateKey` to be an array in the JSON data but got " + data['predicateKey']);
        }
        // ensure the json data is a string
        if (data['predicateValue'] && !(typeof data['predicateValue'] === 'string' || data['predicateValue'] instanceof String)) {
            throw new Error("Expected the field `predicateValue` to be a primitive type in the JSON string but got " + data['predicateValue']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvancedAuth.AuthFlowTypeEnum} authFlowType
 */
AdvancedAuth.prototype['authFlowType'] = undefined;

/**
 * @member {module:model/OAuthConfigSpecification} oauthConfigSpecification
 */
AdvancedAuth.prototype['oauthConfigSpecification'] = undefined;

/**
 * Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
 * @member {Array.<String>} predicateKey
 */
AdvancedAuth.prototype['predicateKey'] = undefined;

/**
 * Value of the predicate_key fields for the advanced auth to be applicable.
 * @member {String} predicateValue
 */
AdvancedAuth.prototype['predicateValue'] = undefined;





/**
 * Allowed values for the <code>authFlowType</code> property.
 * @enum {String}
 * @readonly
 */
AdvancedAuth['AuthFlowTypeEnum'] = {

    /**
     * value: "oauth2.0"
     * @const
     */
    "oauth2.0": "oauth2.0",

    /**
     * value: "oauth1.0"
     * @const
     */
    "oauth1.0": "oauth1.0"
};



export default AdvancedAuth;

