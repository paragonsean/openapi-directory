/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geography from './Geography';
import Notification from './Notification';
import WebhookConfigRead from './WebhookConfigRead';

/**
 * The WorkspaceRead model module.
 * @module model/WorkspaceRead
 * @version 1.0.0
 */
class WorkspaceRead {
    /**
     * Constructs a new <code>WorkspaceRead</code>.
     * @alias module:model/WorkspaceRead
     * @param customerId {String} 
     * @param initialSetupComplete {Boolean} 
     * @param name {String} 
     * @param slug {String} 
     * @param workspaceId {String} 
     */
    constructor(customerId, initialSetupComplete, name, slug, workspaceId) { 
        
        WorkspaceRead.initialize(this, customerId, initialSetupComplete, name, slug, workspaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerId, initialSetupComplete, name, slug, workspaceId) { 
        obj['customerId'] = customerId;
        obj['initialSetupComplete'] = initialSetupComplete;
        obj['name'] = name;
        obj['slug'] = slug;
        obj['workspaceId'] = workspaceId;
    }

    /**
     * Constructs a <code>WorkspaceRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspaceRead} obj Optional instance to populate.
     * @return {module:model/WorkspaceRead} The populated <code>WorkspaceRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspaceRead();

            if (data.hasOwnProperty('anonymousDataCollection')) {
                obj['anonymousDataCollection'] = ApiClient.convertToType(data['anonymousDataCollection'], 'Boolean');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('defaultGeography')) {
                obj['defaultGeography'] = Geography.constructFromObject(data['defaultGeography']);
            }
            if (data.hasOwnProperty('displaySetupWizard')) {
                obj['displaySetupWizard'] = ApiClient.convertToType(data['displaySetupWizard'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('feedbackDone')) {
                obj['feedbackDone'] = ApiClient.convertToType(data['feedbackDone'], 'Boolean');
            }
            if (data.hasOwnProperty('firstCompletedSync')) {
                obj['firstCompletedSync'] = ApiClient.convertToType(data['firstCompletedSync'], 'Boolean');
            }
            if (data.hasOwnProperty('initialSetupComplete')) {
                obj['initialSetupComplete'] = ApiClient.convertToType(data['initialSetupComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('news')) {
                obj['news'] = ApiClient.convertToType(data['news'], 'Boolean');
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], [Notification]);
            }
            if (data.hasOwnProperty('securityUpdates')) {
                obj['securityUpdates'] = ApiClient.convertToType(data['securityUpdates'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('webhookConfigs')) {
                obj['webhookConfigs'] = ApiClient.convertToType(data['webhookConfigs'], [WebhookConfigRead]);
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspaceRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspaceRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkspaceRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['notifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notifications'])) {
                throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
            }
            // validate the optional field `notifications` (array)
            for (const item of data['notifications']) {
                Notification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        if (data['webhookConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webhookConfigs'])) {
                throw new Error("Expected the field `webhookConfigs` to be an array in the JSON data but got " + data['webhookConfigs']);
            }
            // validate the optional field `webhookConfigs` (array)
            for (const item of data['webhookConfigs']) {
                WebhookConfigRead.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

WorkspaceRead.RequiredProperties = ["customerId", "initialSetupComplete", "name", "slug", "workspaceId"];

/**
 * @member {Boolean} anonymousDataCollection
 */
WorkspaceRead.prototype['anonymousDataCollection'] = undefined;

/**
 * @member {String} customerId
 */
WorkspaceRead.prototype['customerId'] = undefined;

/**
 * @member {module:model/Geography} defaultGeography
 */
WorkspaceRead.prototype['defaultGeography'] = undefined;

/**
 * @member {Boolean} displaySetupWizard
 */
WorkspaceRead.prototype['displaySetupWizard'] = undefined;

/**
 * @member {String} email
 */
WorkspaceRead.prototype['email'] = undefined;

/**
 * @member {Boolean} feedbackDone
 */
WorkspaceRead.prototype['feedbackDone'] = undefined;

/**
 * @member {Boolean} firstCompletedSync
 */
WorkspaceRead.prototype['firstCompletedSync'] = undefined;

/**
 * @member {Boolean} initialSetupComplete
 */
WorkspaceRead.prototype['initialSetupComplete'] = undefined;

/**
 * @member {String} name
 */
WorkspaceRead.prototype['name'] = undefined;

/**
 * @member {Boolean} news
 */
WorkspaceRead.prototype['news'] = undefined;

/**
 * @member {Array.<module:model/Notification>} notifications
 */
WorkspaceRead.prototype['notifications'] = undefined;

/**
 * @member {Boolean} securityUpdates
 */
WorkspaceRead.prototype['securityUpdates'] = undefined;

/**
 * @member {String} slug
 */
WorkspaceRead.prototype['slug'] = undefined;

/**
 * @member {Array.<module:model/WebhookConfigRead>} webhookConfigs
 */
WorkspaceRead.prototype['webhookConfigs'] = undefined;

/**
 * @member {String} workspaceId
 */
WorkspaceRead.prototype['workspaceId'] = undefined;






export default WorkspaceRead;

