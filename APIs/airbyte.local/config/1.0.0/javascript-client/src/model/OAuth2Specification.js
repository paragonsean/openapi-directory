/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuth2Specification model module.
 * @module model/OAuth2Specification
 * @version 1.0.0
 */
class OAuth2Specification {
    /**
     * Constructs a new <code>OAuth2Specification</code>.
     * An object containing any metadata needed to describe this connector&#39;s Oauth flow
     * @alias module:model/OAuth2Specification
     * @param oauthFlowInitParameters {Array.<Array.<String>>} Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params 'app_secret', 'app_id' which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [['app_secret'], ['app_id']] If they are nested inside an object called 'auth_params' then this array would be [['auth_params', 'app_secret'], ['auth_params', 'app_id']]
     * @param oauthFlowOutputParameters {Array.<Array.<String>>} Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.
     * @param rootObject {Array.<Object>} A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification. Examples: if oauth parameters were contained inside the top level, rootObject=[] If they were nested inside another object {'credentials': {'app_id' etc...}, rootObject=['credentials'] If they were inside a oneOf {'switch': {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject=['switch', 0] 
     */
    constructor(oauthFlowInitParameters, oauthFlowOutputParameters, rootObject) { 
        
        OAuth2Specification.initialize(this, oauthFlowInitParameters, oauthFlowOutputParameters, rootObject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, oauthFlowInitParameters, oauthFlowOutputParameters, rootObject) { 
        obj['oauthFlowInitParameters'] = oauthFlowInitParameters;
        obj['oauthFlowOutputParameters'] = oauthFlowOutputParameters;
        obj['rootObject'] = rootObject;
    }

    /**
     * Constructs a <code>OAuth2Specification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuth2Specification} obj Optional instance to populate.
     * @return {module:model/OAuth2Specification} The populated <code>OAuth2Specification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuth2Specification();

            if (data.hasOwnProperty('oauthFlowInitParameters')) {
                obj['oauthFlowInitParameters'] = ApiClient.convertToType(data['oauthFlowInitParameters'], [['String']]);
            }
            if (data.hasOwnProperty('oauthFlowOutputParameters')) {
                obj['oauthFlowOutputParameters'] = ApiClient.convertToType(data['oauthFlowOutputParameters'], [['String']]);
            }
            if (data.hasOwnProperty('rootObject')) {
                obj['rootObject'] = ApiClient.convertToType(data['rootObject'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuth2Specification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuth2Specification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OAuth2Specification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oauthFlowInitParameters'])) {
            throw new Error("Expected the field `oauthFlowInitParameters` to be an array in the JSON data but got " + data['oauthFlowInitParameters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oauthFlowOutputParameters'])) {
            throw new Error("Expected the field `oauthFlowOutputParameters` to be an array in the JSON data but got " + data['oauthFlowOutputParameters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rootObject'])) {
            throw new Error("Expected the field `rootObject` to be an array in the JSON data but got " + data['rootObject']);
        }

        return true;
    }


}

OAuth2Specification.RequiredProperties = ["oauthFlowInitParameters", "oauthFlowOutputParameters", "rootObject"];

/**
 * Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params 'app_secret', 'app_id' which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [['app_secret'], ['app_id']] If they are nested inside an object called 'auth_params' then this array would be [['auth_params', 'app_secret'], ['auth_params', 'app_id']]
 * @member {Array.<Array.<String>>} oauthFlowInitParameters
 */
OAuth2Specification.prototype['oauthFlowInitParameters'] = undefined;

/**
 * Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.
 * @member {Array.<Array.<String>>} oauthFlowOutputParameters
 */
OAuth2Specification.prototype['oauthFlowOutputParameters'] = undefined;

/**
 * A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification. Examples: if oauth parameters were contained inside the top level, rootObject=[] If they were nested inside another object {'credentials': {'app_id' etc...}, rootObject=['credentials'] If they were inside a oneOf {'switch': {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject=['switch', 0] 
 * @member {Array.<Object>} rootObject
 */
OAuth2Specification.prototype['rootObject'] = undefined;






export default OAuth2Specification;

