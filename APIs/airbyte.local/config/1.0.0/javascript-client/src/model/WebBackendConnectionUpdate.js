/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirbyteCatalog from './AirbyteCatalog';
import ConnectionSchedule from './ConnectionSchedule';
import ConnectionScheduleData from './ConnectionScheduleData';
import ConnectionScheduleType from './ConnectionScheduleType';
import ConnectionStatus from './ConnectionStatus';
import Geography from './Geography';
import NamespaceDefinitionType from './NamespaceDefinitionType';
import NonBreakingChangesPreference from './NonBreakingChangesPreference';
import ResourceRequirements from './ResourceRequirements';
import WebBackendOperationCreateOrUpdate from './WebBackendOperationCreateOrUpdate';

/**
 * The WebBackendConnectionUpdate model module.
 * @module model/WebBackendConnectionUpdate
 * @version 1.0.0
 */
class WebBackendConnectionUpdate {
    /**
     * Constructs a new <code>WebBackendConnectionUpdate</code>.
     * Used to apply a patch-style update to a connection, which means that null properties remain unchanged
     * @alias module:model/WebBackendConnectionUpdate
     * @param connectionId {String} 
     */
    constructor(connectionId) { 
        
        WebBackendConnectionUpdate.initialize(this, connectionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionId) { 
        obj['connectionId'] = connectionId;
    }

    /**
     * Constructs a <code>WebBackendConnectionUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebBackendConnectionUpdate} obj Optional instance to populate.
     * @return {module:model/WebBackendConnectionUpdate} The populated <code>WebBackendConnectionUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebBackendConnectionUpdate();

            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('geography')) {
                obj['geography'] = Geography.constructFromObject(data['geography']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespaceDefinition')) {
                obj['namespaceDefinition'] = NamespaceDefinitionType.constructFromObject(data['namespaceDefinition']);
            }
            if (data.hasOwnProperty('namespaceFormat')) {
                obj['namespaceFormat'] = ApiClient.convertToType(data['namespaceFormat'], 'String');
            }
            if (data.hasOwnProperty('nonBreakingChangesPreference')) {
                obj['nonBreakingChangesPreference'] = NonBreakingChangesPreference.constructFromObject(data['nonBreakingChangesPreference']);
            }
            if (data.hasOwnProperty('notifySchemaChanges')) {
                obj['notifySchemaChanges'] = ApiClient.convertToType(data['notifySchemaChanges'], 'Boolean');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [WebBackendOperationCreateOrUpdate]);
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('resourceRequirements')) {
                obj['resourceRequirements'] = ResourceRequirements.constructFromObject(data['resourceRequirements']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ConnectionSchedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('scheduleData')) {
                obj['scheduleData'] = ConnectionScheduleData.constructFromObject(data['scheduleData']);
            }
            if (data.hasOwnProperty('scheduleType')) {
                obj['scheduleType'] = ConnectionScheduleType.constructFromObject(data['scheduleType']);
            }
            if (data.hasOwnProperty('skipReset')) {
                obj['skipReset'] = ApiClient.convertToType(data['skipReset'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceCatalogId')) {
                obj['sourceCatalogId'] = ApiClient.convertToType(data['sourceCatalogId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ConnectionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('syncCatalog')) {
                obj['syncCatalog'] = AirbyteCatalog.constructFromObject(data['syncCatalog']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebBackendConnectionUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebBackendConnectionUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebBackendConnectionUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespaceFormat'] && !(typeof data['namespaceFormat'] === 'string' || data['namespaceFormat'] instanceof String)) {
            throw new Error("Expected the field `namespaceFormat` to be a primitive type in the JSON string but got " + data['namespaceFormat']);
        }
        if (data['operations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operations'])) {
                throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
            }
            // validate the optional field `operations` (array)
            for (const item of data['operations']) {
                WebBackendOperationCreateOrUpdate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // validate the optional field `resourceRequirements`
        if (data['resourceRequirements']) { // data not null
          ResourceRequirements.validateJSON(data['resourceRequirements']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          ConnectionSchedule.validateJSON(data['schedule']);
        }
        // validate the optional field `scheduleData`
        if (data['scheduleData']) { // data not null
          ConnectionScheduleData.validateJSON(data['scheduleData']);
        }
        // ensure the json data is a string
        if (data['sourceCatalogId'] && !(typeof data['sourceCatalogId'] === 'string' || data['sourceCatalogId'] instanceof String)) {
            throw new Error("Expected the field `sourceCatalogId` to be a primitive type in the JSON string but got " + data['sourceCatalogId']);
        }
        // validate the optional field `syncCatalog`
        if (data['syncCatalog']) { // data not null
          AirbyteCatalog.validateJSON(data['syncCatalog']);
        }

        return true;
    }


}

WebBackendConnectionUpdate.RequiredProperties = ["connectionId"];

/**
 * @member {String} connectionId
 */
WebBackendConnectionUpdate.prototype['connectionId'] = undefined;

/**
 * @member {module:model/Geography} geography
 */
WebBackendConnectionUpdate.prototype['geography'] = undefined;

/**
 * Name that will be set to the connection
 * @member {String} name
 */
WebBackendConnectionUpdate.prototype['name'] = undefined;

/**
 * @member {module:model/NamespaceDefinitionType} namespaceDefinition
 */
WebBackendConnectionUpdate.prototype['namespaceDefinition'] = undefined;

/**
 * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.
 * @member {String} namespaceFormat
 */
WebBackendConnectionUpdate.prototype['namespaceFormat'] = undefined;

/**
 * @member {module:model/NonBreakingChangesPreference} nonBreakingChangesPreference
 */
WebBackendConnectionUpdate.prototype['nonBreakingChangesPreference'] = undefined;

/**
 * @member {Boolean} notifySchemaChanges
 */
WebBackendConnectionUpdate.prototype['notifySchemaChanges'] = undefined;

/**
 * @member {Array.<module:model/WebBackendOperationCreateOrUpdate>} operations
 */
WebBackendConnectionUpdate.prototype['operations'] = undefined;

/**
 * Prefix that will be prepended to the name of each stream when it is written to the destination.
 * @member {String} prefix
 */
WebBackendConnectionUpdate.prototype['prefix'] = undefined;

/**
 * @member {module:model/ResourceRequirements} resourceRequirements
 */
WebBackendConnectionUpdate.prototype['resourceRequirements'] = undefined;

/**
 * @member {module:model/ConnectionSchedule} schedule
 */
WebBackendConnectionUpdate.prototype['schedule'] = undefined;

/**
 * @member {module:model/ConnectionScheduleData} scheduleData
 */
WebBackendConnectionUpdate.prototype['scheduleData'] = undefined;

/**
 * @member {module:model/ConnectionScheduleType} scheduleType
 */
WebBackendConnectionUpdate.prototype['scheduleType'] = undefined;

/**
 * @member {Boolean} skipReset
 */
WebBackendConnectionUpdate.prototype['skipReset'] = undefined;

/**
 * @member {String} sourceCatalogId
 */
WebBackendConnectionUpdate.prototype['sourceCatalogId'] = undefined;

/**
 * @member {module:model/ConnectionStatus} status
 */
WebBackendConnectionUpdate.prototype['status'] = undefined;

/**
 * @member {module:model/AirbyteCatalog} syncCatalog
 */
WebBackendConnectionUpdate.prototype['syncCatalog'] = undefined;






export default WebBackendConnectionUpdate;

