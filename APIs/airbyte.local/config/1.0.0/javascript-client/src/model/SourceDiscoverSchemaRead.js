/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirbyteCatalog from './AirbyteCatalog';
import CatalogDiff from './CatalogDiff';
import ConnectionStatus from './ConnectionStatus';
import SynchronousJobRead from './SynchronousJobRead';

/**
 * The SourceDiscoverSchemaRead model module.
 * @module model/SourceDiscoverSchemaRead
 * @version 1.0.0
 */
class SourceDiscoverSchemaRead {
    /**
     * Constructs a new <code>SourceDiscoverSchemaRead</code>.
     * Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
     * @alias module:model/SourceDiscoverSchemaRead
     * @param jobInfo {module:model/SynchronousJobRead} 
     */
    constructor(jobInfo) { 
        
        SourceDiscoverSchemaRead.initialize(this, jobInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobInfo) { 
        obj['jobInfo'] = jobInfo;
    }

    /**
     * Constructs a <code>SourceDiscoverSchemaRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceDiscoverSchemaRead} obj Optional instance to populate.
     * @return {module:model/SourceDiscoverSchemaRead} The populated <code>SourceDiscoverSchemaRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceDiscoverSchemaRead();

            if (data.hasOwnProperty('breakingChange')) {
                obj['breakingChange'] = ApiClient.convertToType(data['breakingChange'], 'Boolean');
            }
            if (data.hasOwnProperty('catalog')) {
                obj['catalog'] = AirbyteCatalog.constructFromObject(data['catalog']);
            }
            if (data.hasOwnProperty('catalogDiff')) {
                obj['catalogDiff'] = CatalogDiff.constructFromObject(data['catalogDiff']);
            }
            if (data.hasOwnProperty('catalogId')) {
                obj['catalogId'] = ApiClient.convertToType(data['catalogId'], 'String');
            }
            if (data.hasOwnProperty('connectionStatus')) {
                obj['connectionStatus'] = ConnectionStatus.constructFromObject(data['connectionStatus']);
            }
            if (data.hasOwnProperty('jobInfo')) {
                obj['jobInfo'] = SynchronousJobRead.constructFromObject(data['jobInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceDiscoverSchemaRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceDiscoverSchemaRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SourceDiscoverSchemaRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `catalog`
        if (data['catalog']) { // data not null
          AirbyteCatalog.validateJSON(data['catalog']);
        }
        // validate the optional field `catalogDiff`
        if (data['catalogDiff']) { // data not null
          CatalogDiff.validateJSON(data['catalogDiff']);
        }
        // ensure the json data is a string
        if (data['catalogId'] && !(typeof data['catalogId'] === 'string' || data['catalogId'] instanceof String)) {
            throw new Error("Expected the field `catalogId` to be a primitive type in the JSON string but got " + data['catalogId']);
        }
        // validate the optional field `jobInfo`
        if (data['jobInfo']) { // data not null
          SynchronousJobRead.validateJSON(data['jobInfo']);
        }

        return true;
    }


}

SourceDiscoverSchemaRead.RequiredProperties = ["jobInfo"];

/**
 * @member {Boolean} breakingChange
 */
SourceDiscoverSchemaRead.prototype['breakingChange'] = undefined;

/**
 * @member {module:model/AirbyteCatalog} catalog
 */
SourceDiscoverSchemaRead.prototype['catalog'] = undefined;

/**
 * @member {module:model/CatalogDiff} catalogDiff
 */
SourceDiscoverSchemaRead.prototype['catalogDiff'] = undefined;

/**
 * @member {String} catalogId
 */
SourceDiscoverSchemaRead.prototype['catalogId'] = undefined;

/**
 * @member {module:model/ConnectionStatus} connectionStatus
 */
SourceDiscoverSchemaRead.prototype['connectionStatus'] = undefined;

/**
 * @member {module:model/SynchronousJobRead} jobInfo
 */
SourceDiscoverSchemaRead.prototype['jobInfo'] = undefined;






export default SourceDiscoverSchemaRead;

