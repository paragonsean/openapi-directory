/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AirbyteConfigurationApi);
  }
}(this, function(expect, AirbyteConfigurationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SourceDefinitionCreate', function() {
    it('should create an instance of SourceDefinitionCreate', function() {
      // uncomment below and update the code to test SourceDefinitionCreate
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be.a(AirbyteConfigurationApi.SourceDefinitionCreate);
    });

    it('should have the property dockerImageTag (base name: "dockerImageTag")', function() {
      // uncomment below and update the code to test the property dockerImageTag
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

    it('should have the property dockerRepository (base name: "dockerRepository")', function() {
      // uncomment below and update the code to test the property dockerRepository
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

    it('should have the property documentationUrl (base name: "documentationUrl")', function() {
      // uncomment below and update the code to test the property documentationUrl
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

    it('should have the property icon (base name: "icon")', function() {
      // uncomment below and update the code to test the property icon
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

    it('should have the property resourceRequirements (base name: "resourceRequirements")', function() {
      // uncomment below and update the code to test the property resourceRequirements
      //var instance = new AirbyteConfigurationApi.SourceDefinitionCreate();
      //expect(instance).to.be();
    });

  });

}));
