/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomSourceDefinitionCreate;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.NotFoundKnownExceptionInfo;
import org.openapitools.client.model.PrivateSourceDefinitionRead;
import org.openapitools.client.model.PrivateSourceDefinitionReadList;
import org.openapitools.client.model.SourceDefinitionIdRequestBody;
import org.openapitools.client.model.SourceDefinitionIdWithWorkspaceId;
import org.openapitools.client.model.SourceDefinitionRead;
import org.openapitools.client.model.SourceDefinitionReadList;
import org.openapitools.client.model.SourceDefinitionUpdate;
import org.openapitools.client.model.WorkspaceIdRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourceDefinitionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SourceDefinitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourceDefinitionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomSourceDefinition
     * @param customSourceDefinitionCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomSourceDefinitionCall(CustomSourceDefinitionCreate customSourceDefinitionCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customSourceDefinitionCreate;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/create_custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomSourceDefinitionValidateBeforeCall(CustomSourceDefinitionCreate customSourceDefinitionCreate, final ApiCallback _callback) throws ApiException {
        return createCustomSourceDefinitionCall(customSourceDefinitionCreate, _callback);

    }

    /**
     * Creates a custom sourceDefinition for the given workspace
     * 
     * @param customSourceDefinitionCreate  (optional)
     * @return SourceDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionRead createCustomSourceDefinition(CustomSourceDefinitionCreate customSourceDefinitionCreate) throws ApiException {
        ApiResponse<SourceDefinitionRead> localVarResp = createCustomSourceDefinitionWithHttpInfo(customSourceDefinitionCreate);
        return localVarResp.getData();
    }

    /**
     * Creates a custom sourceDefinition for the given workspace
     * 
     * @param customSourceDefinitionCreate  (optional)
     * @return ApiResponse&lt;SourceDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionRead> createCustomSourceDefinitionWithHttpInfo(CustomSourceDefinitionCreate customSourceDefinitionCreate) throws ApiException {
        okhttp3.Call localVarCall = createCustomSourceDefinitionValidateBeforeCall(customSourceDefinitionCreate, null);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a custom sourceDefinition for the given workspace (asynchronously)
     * 
     * @param customSourceDefinitionCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomSourceDefinitionAsync(CustomSourceDefinitionCreate customSourceDefinitionCreate, final ApiCallback<SourceDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomSourceDefinitionValidateBeforeCall(customSourceDefinitionCreate, _callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSourceDefinition
     * @param sourceDefinitionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourceDefinitionCall(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSourceDefinitionValidateBeforeCall(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDefinitionIdRequestBody' is set
        if (sourceDefinitionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'sourceDefinitionIdRequestBody' when calling deleteSourceDefinition(Async)");
        }

        return deleteSourceDefinitionCall(sourceDefinitionIdRequestBody, _callback);

    }

    /**
     * Delete a source definition
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSourceDefinition(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody) throws ApiException {
        deleteSourceDefinitionWithHttpInfo(sourceDefinitionIdRequestBody);
    }

    /**
     * Delete a source definition
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSourceDefinitionWithHttpInfo(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteSourceDefinitionValidateBeforeCall(sourceDefinitionIdRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a source definition (asynchronously)
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourceDefinitionAsync(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSourceDefinitionValidateBeforeCall(sourceDefinitionIdRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceDefinition
     * @param sourceDefinitionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceDefinitionCall(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceDefinitionValidateBeforeCall(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDefinitionIdRequestBody' is set
        if (sourceDefinitionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'sourceDefinitionIdRequestBody' when calling getSourceDefinition(Async)");
        }

        return getSourceDefinitionCall(sourceDefinitionIdRequestBody, _callback);

    }

    /**
     * Get source
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @return SourceDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionRead getSourceDefinition(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody) throws ApiException {
        ApiResponse<SourceDefinitionRead> localVarResp = getSourceDefinitionWithHttpInfo(sourceDefinitionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get source
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @return ApiResponse&lt;SourceDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionRead> getSourceDefinitionWithHttpInfo(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getSourceDefinitionValidateBeforeCall(sourceDefinitionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source (asynchronously)
     * 
     * @param sourceDefinitionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceDefinitionAsync(SourceDefinitionIdRequestBody sourceDefinitionIdRequestBody, final ApiCallback<SourceDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceDefinitionValidateBeforeCall(sourceDefinitionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceDefinitionForWorkspace
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceDefinitionForWorkspaceCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/get_for_workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceDefinitionForWorkspaceValidateBeforeCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
        if (sourceDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling getSourceDefinitionForWorkspace(Async)");
        }

        return getSourceDefinitionForWorkspaceCall(sourceDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * Get a sourceDefinition that is configured for the given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @return SourceDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionRead getSourceDefinitionForWorkspace(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        ApiResponse<SourceDefinitionRead> localVarResp = getSourceDefinitionForWorkspaceWithHttpInfo(sourceDefinitionIdWithWorkspaceId);
        return localVarResp.getData();
    }

    /**
     * Get a sourceDefinition that is configured for the given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;SourceDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionRead> getSourceDefinitionForWorkspaceWithHttpInfo(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = getSourceDefinitionForWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, null);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a sourceDefinition that is configured for the given workspace (asynchronously)
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceDefinitionForWorkspaceAsync(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback<SourceDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceDefinitionForWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, _callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantSourceDefinitionToWorkspace
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantSourceDefinitionToWorkspaceCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/grant_definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantSourceDefinitionToWorkspaceValidateBeforeCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
        if (sourceDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling grantSourceDefinitionToWorkspace(Async)");
        }

        return grantSourceDefinitionToWorkspaceCall(sourceDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * grant a private, non-custom sourceDefinition to a given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @return PrivateSourceDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public PrivateSourceDefinitionRead grantSourceDefinitionToWorkspace(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        ApiResponse<PrivateSourceDefinitionRead> localVarResp = grantSourceDefinitionToWorkspaceWithHttpInfo(sourceDefinitionIdWithWorkspaceId);
        return localVarResp.getData();
    }

    /**
     * grant a private, non-custom sourceDefinition to a given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;PrivateSourceDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateSourceDefinitionRead> grantSourceDefinitionToWorkspaceWithHttpInfo(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = grantSourceDefinitionToWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, null);
        Type localVarReturnType = new TypeToken<PrivateSourceDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * grant a private, non-custom sourceDefinition to a given workspace (asynchronously)
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantSourceDefinitionToWorkspaceAsync(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback<PrivateSourceDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantSourceDefinitionToWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, _callback);
        Type localVarReturnType = new TypeToken<PrivateSourceDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLatestSourceDefinitions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestSourceDefinitionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/list_latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLatestSourceDefinitionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLatestSourceDefinitionsCall(_callback);

    }

    /**
     * List the latest sourceDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported sources.
     * @return SourceDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionReadList listLatestSourceDefinitions() throws ApiException {
        ApiResponse<SourceDefinitionReadList> localVarResp = listLatestSourceDefinitionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List the latest sourceDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported sources.
     * @return ApiResponse&lt;SourceDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionReadList> listLatestSourceDefinitionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLatestSourceDefinitionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the latest sourceDefinitions Airbyte supports (asynchronously)
     * Guaranteed to retrieve the latest information on supported sources.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestSourceDefinitionsAsync(final ApiCallback<SourceDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLatestSourceDefinitionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPrivateSourceDefinitions
     * @param workspaceIdRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPrivateSourceDefinitionsCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/list_private";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPrivateSourceDefinitionsValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        return listPrivateSourceDefinitionsCall(workspaceIdRequestBody, _callback);

    }

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return PrivateSourceDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PrivateSourceDefinitionReadList listPrivateSourceDefinitions(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<PrivateSourceDefinitionReadList> localVarResp = listPrivateSourceDefinitionsWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return ApiResponse&lt;PrivateSourceDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateSourceDefinitionReadList> listPrivateSourceDefinitionsWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listPrivateSourceDefinitionsValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<PrivateSourceDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants. (asynchronously)
     * 
     * @param workspaceIdRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPrivateSourceDefinitionsAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<PrivateSourceDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPrivateSourceDefinitionsValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PrivateSourceDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSourceDefinitions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSourceDefinitionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSourceDefinitionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSourceDefinitionsCall(_callback);

    }

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use
     * 
     * @return SourceDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionReadList listSourceDefinitions() throws ApiException {
        ApiResponse<SourceDefinitionReadList> localVarResp = listSourceDefinitionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use
     * 
     * @return ApiResponse&lt;SourceDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionReadList> listSourceDefinitionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSourceDefinitionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSourceDefinitionsAsync(final ApiCallback<SourceDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSourceDefinitionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSourceDefinitionsForWorkspace
     * @param workspaceIdRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSourceDefinitionsForWorkspaceCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/list_for_workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSourceDefinitionsForWorkspaceValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        return listSourceDefinitionsForWorkspaceCall(workspaceIdRequestBody, _callback);

    }

    /**
     * List all the sourceDefinitions the given workspace is configured to use
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return SourceDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionReadList listSourceDefinitionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<SourceDefinitionReadList> localVarResp = listSourceDefinitionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * List all the sourceDefinitions the given workspace is configured to use
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return ApiResponse&lt;SourceDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionReadList> listSourceDefinitionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listSourceDefinitionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the sourceDefinitions the given workspace is configured to use (asynchronously)
     * 
     * @param workspaceIdRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSourceDefinitionsForWorkspaceAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<SourceDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSourceDefinitionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeSourceDefinitionFromWorkspace
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeSourceDefinitionFromWorkspaceCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/revoke_definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeSourceDefinitionFromWorkspaceValidateBeforeCall(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDefinitionIdWithWorkspaceId' is set
        if (sourceDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'sourceDefinitionIdWithWorkspaceId' when calling revokeSourceDefinitionFromWorkspace(Async)");
        }

        return revokeSourceDefinitionFromWorkspaceCall(sourceDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public void revokeSourceDefinitionFromWorkspace(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        revokeSourceDefinitionFromWorkspaceWithHttpInfo(sourceDefinitionIdWithWorkspaceId);
    }

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeSourceDefinitionFromWorkspaceWithHttpInfo(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = revokeSourceDefinitionFromWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace (asynchronously)
     * 
     * @param sourceDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeSourceDefinitionFromWorkspaceAsync(SourceDefinitionIdWithWorkspaceId sourceDefinitionIdWithWorkspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeSourceDefinitionFromWorkspaceValidateBeforeCall(sourceDefinitionIdWithWorkspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSourceDefinition
     * @param sourceDefinitionUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceDefinitionCall(SourceDefinitionUpdate sourceDefinitionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceDefinitionUpdate;

        // create path and map variables
        String localVarPath = "/v1/source_definitions/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSourceDefinitionValidateBeforeCall(SourceDefinitionUpdate sourceDefinitionUpdate, final ApiCallback _callback) throws ApiException {
        return updateSourceDefinitionCall(sourceDefinitionUpdate, _callback);

    }

    /**
     * Update a sourceDefinition
     * 
     * @param sourceDefinitionUpdate  (optional)
     * @return SourceDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDefinitionRead updateSourceDefinition(SourceDefinitionUpdate sourceDefinitionUpdate) throws ApiException {
        ApiResponse<SourceDefinitionRead> localVarResp = updateSourceDefinitionWithHttpInfo(sourceDefinitionUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a sourceDefinition
     * 
     * @param sourceDefinitionUpdate  (optional)
     * @return ApiResponse&lt;SourceDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDefinitionRead> updateSourceDefinitionWithHttpInfo(SourceDefinitionUpdate sourceDefinitionUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateSourceDefinitionValidateBeforeCall(sourceDefinitionUpdate, null);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a sourceDefinition (asynchronously)
     * 
     * @param sourceDefinitionUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceDefinitionAsync(SourceDefinitionUpdate sourceDefinitionUpdate, final ApiCallback<SourceDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSourceDefinitionValidateBeforeCall(sourceDefinitionUpdate, _callback);
        Type localVarReturnType = new TypeToken<SourceDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
