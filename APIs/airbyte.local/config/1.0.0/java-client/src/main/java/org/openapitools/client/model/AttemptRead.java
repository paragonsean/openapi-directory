/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttemptFailureSummary;
import org.openapitools.client.model.AttemptStats;
import org.openapitools.client.model.AttemptStatus;
import org.openapitools.client.model.AttemptStreamStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttemptRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttemptRead {
  public static final String SERIALIZED_NAME_BYTES_SYNCED = "bytesSynced";
  @SerializedName(SERIALIZED_NAME_BYTES_SYNCED)
  private Long bytesSynced;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Long createdAt;

  public static final String SERIALIZED_NAME_ENDED_AT = "endedAt";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private Long endedAt;

  public static final String SERIALIZED_NAME_FAILURE_SUMMARY = "failureSummary";
  @SerializedName(SERIALIZED_NAME_FAILURE_SUMMARY)
  private AttemptFailureSummary failureSummary;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_RECORDS_SYNCED = "recordsSynced";
  @SerializedName(SERIALIZED_NAME_RECORDS_SYNCED)
  private Long recordsSynced;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AttemptStatus status;

  public static final String SERIALIZED_NAME_STREAM_STATS = "streamStats";
  @SerializedName(SERIALIZED_NAME_STREAM_STATS)
  private List<AttemptStreamStats> streamStats = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_STATS = "totalStats";
  @SerializedName(SERIALIZED_NAME_TOTAL_STATS)
  private AttemptStats totalStats;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Long updatedAt;

  public AttemptRead() {
  }

  public AttemptRead bytesSynced(Long bytesSynced) {
    this.bytesSynced = bytesSynced;
    return this;
  }

  /**
   * Get bytesSynced
   * @return bytesSynced
   */
  @javax.annotation.Nullable
  public Long getBytesSynced() {
    return bytesSynced;
  }

  public void setBytesSynced(Long bytesSynced) {
    this.bytesSynced = bytesSynced;
  }


  public AttemptRead createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  public AttemptRead endedAt(Long endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Get endedAt
   * @return endedAt
   */
  @javax.annotation.Nullable
  public Long getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(Long endedAt) {
    this.endedAt = endedAt;
  }


  public AttemptRead failureSummary(AttemptFailureSummary failureSummary) {
    this.failureSummary = failureSummary;
    return this;
  }

  /**
   * Get failureSummary
   * @return failureSummary
   */
  @javax.annotation.Nullable
  public AttemptFailureSummary getFailureSummary() {
    return failureSummary;
  }

  public void setFailureSummary(AttemptFailureSummary failureSummary) {
    this.failureSummary = failureSummary;
  }


  public AttemptRead id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public AttemptRead recordsSynced(Long recordsSynced) {
    this.recordsSynced = recordsSynced;
    return this;
  }

  /**
   * Get recordsSynced
   * @return recordsSynced
   */
  @javax.annotation.Nullable
  public Long getRecordsSynced() {
    return recordsSynced;
  }

  public void setRecordsSynced(Long recordsSynced) {
    this.recordsSynced = recordsSynced;
  }


  public AttemptRead status(AttemptStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AttemptStatus getStatus() {
    return status;
  }

  public void setStatus(AttemptStatus status) {
    this.status = status;
  }


  public AttemptRead streamStats(List<AttemptStreamStats> streamStats) {
    this.streamStats = streamStats;
    return this;
  }

  public AttemptRead addStreamStatsItem(AttemptStreamStats streamStatsItem) {
    if (this.streamStats == null) {
      this.streamStats = new ArrayList<>();
    }
    this.streamStats.add(streamStatsItem);
    return this;
  }

  /**
   * Get streamStats
   * @return streamStats
   */
  @javax.annotation.Nullable
  public List<AttemptStreamStats> getStreamStats() {
    return streamStats;
  }

  public void setStreamStats(List<AttemptStreamStats> streamStats) {
    this.streamStats = streamStats;
  }


  public AttemptRead totalStats(AttemptStats totalStats) {
    this.totalStats = totalStats;
    return this;
  }

  /**
   * Get totalStats
   * @return totalStats
   */
  @javax.annotation.Nullable
  public AttemptStats getTotalStats() {
    return totalStats;
  }

  public void setTotalStats(AttemptStats totalStats) {
    this.totalStats = totalStats;
  }


  public AttemptRead updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttemptRead attemptRead = (AttemptRead) o;
    return Objects.equals(this.bytesSynced, attemptRead.bytesSynced) &&
        Objects.equals(this.createdAt, attemptRead.createdAt) &&
        Objects.equals(this.endedAt, attemptRead.endedAt) &&
        Objects.equals(this.failureSummary, attemptRead.failureSummary) &&
        Objects.equals(this.id, attemptRead.id) &&
        Objects.equals(this.recordsSynced, attemptRead.recordsSynced) &&
        Objects.equals(this.status, attemptRead.status) &&
        Objects.equals(this.streamStats, attemptRead.streamStats) &&
        Objects.equals(this.totalStats, attemptRead.totalStats) &&
        Objects.equals(this.updatedAt, attemptRead.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesSynced, createdAt, endedAt, failureSummary, id, recordsSynced, status, streamStats, totalStats, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttemptRead {\n");
    sb.append("    bytesSynced: ").append(toIndentedString(bytesSynced)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    failureSummary: ").append(toIndentedString(failureSummary)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recordsSynced: ").append(toIndentedString(recordsSynced)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    streamStats: ").append(toIndentedString(streamStats)).append("\n");
    sb.append("    totalStats: ").append(toIndentedString(totalStats)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesSynced");
    openapiFields.add("createdAt");
    openapiFields.add("endedAt");
    openapiFields.add("failureSummary");
    openapiFields.add("id");
    openapiFields.add("recordsSynced");
    openapiFields.add("status");
    openapiFields.add("streamStats");
    openapiFields.add("totalStats");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttemptRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttemptRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttemptRead is not found in the empty JSON string", AttemptRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttemptRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttemptRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttemptRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failureSummary`
      if (jsonObj.get("failureSummary") != null && !jsonObj.get("failureSummary").isJsonNull()) {
        AttemptFailureSummary.validateJsonElement(jsonObj.get("failureSummary"));
      }
      // validate the required field `status`
      AttemptStatus.validateJsonElement(jsonObj.get("status"));
      if (jsonObj.get("streamStats") != null && !jsonObj.get("streamStats").isJsonNull()) {
        JsonArray jsonArraystreamStats = jsonObj.getAsJsonArray("streamStats");
        if (jsonArraystreamStats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamStats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamStats` to be an array in the JSON string but got `%s`", jsonObj.get("streamStats").toString()));
          }

          // validate the optional field `streamStats` (array)
          for (int i = 0; i < jsonArraystreamStats.size(); i++) {
            AttemptStreamStats.validateJsonElement(jsonArraystreamStats.get(i));
          };
        }
      }
      // validate the optional field `totalStats`
      if (jsonObj.get("totalStats") != null && !jsonObj.get("totalStats").isJsonNull()) {
        AttemptStats.validateJsonElement(jsonObj.get("totalStats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttemptRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttemptRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttemptRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttemptRead.class));

       return (TypeAdapter<T>) new TypeAdapter<AttemptRead>() {
           @Override
           public void write(JsonWriter out, AttemptRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttemptRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttemptRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttemptRead
   * @throws IOException if the JSON string is invalid with respect to AttemptRead
   */
  public static AttemptRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttemptRead.class);
  }

  /**
   * Convert an instance of AttemptRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

