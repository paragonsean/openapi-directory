/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AirbyteCatalog;
import org.openapitools.client.model.CatalogDiff;
import org.openapitools.client.model.ConnectionSchedule;
import org.openapitools.client.model.ConnectionScheduleData;
import org.openapitools.client.model.ConnectionScheduleType;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.DestinationRead;
import org.openapitools.client.model.Geography;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.NamespaceDefinitionType;
import org.openapitools.client.model.NonBreakingChangesPreference;
import org.openapitools.client.model.OperationRead;
import org.openapitools.client.model.ResourceRequirements;
import org.openapitools.client.model.SchemaChange;
import org.openapitools.client.model.SourceRead;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebBackendConnectionRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebBackendConnectionRead {
  public static final String SERIALIZED_NAME_CATALOG_DIFF = "catalogDiff";
  @SerializedName(SERIALIZED_NAME_CATALOG_DIFF)
  private CatalogDiff catalogDiff;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private UUID catalogId;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private UUID connectionId;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private DestinationRead destination;

  public static final String SERIALIZED_NAME_DESTINATION_ID = "destinationId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
  private UUID destinationId;

  public static final String SERIALIZED_NAME_GEOGRAPHY = "geography";
  @SerializedName(SERIALIZED_NAME_GEOGRAPHY)
  private Geography geography;

  public static final String SERIALIZED_NAME_IS_SYNCING = "isSyncing";
  @SerializedName(SERIALIZED_NAME_IS_SYNCING)
  private Boolean isSyncing;

  public static final String SERIALIZED_NAME_LATEST_SYNC_JOB_CREATED_AT = "latestSyncJobCreatedAt";
  @SerializedName(SERIALIZED_NAME_LATEST_SYNC_JOB_CREATED_AT)
  private Long latestSyncJobCreatedAt;

  public static final String SERIALIZED_NAME_LATEST_SYNC_JOB_STATUS = "latestSyncJobStatus";
  @SerializedName(SERIALIZED_NAME_LATEST_SYNC_JOB_STATUS)
  private JobStatus latestSyncJobStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE_DEFINITION = "namespaceDefinition";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_DEFINITION)
  private NamespaceDefinitionType namespaceDefinition;

  public static final String SERIALIZED_NAME_NAMESPACE_FORMAT = "namespaceFormat";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_FORMAT)
  private String namespaceFormat;

  public static final String SERIALIZED_NAME_NON_BREAKING_CHANGES_PREFERENCE = "nonBreakingChangesPreference";
  @SerializedName(SERIALIZED_NAME_NON_BREAKING_CHANGES_PREFERENCE)
  private NonBreakingChangesPreference nonBreakingChangesPreference;

  public static final String SERIALIZED_NAME_NOTIFY_SCHEMA_CHANGES = "notifySchemaChanges";
  @SerializedName(SERIALIZED_NAME_NOTIFY_SCHEMA_CHANGES)
  private Boolean notifySchemaChanges;

  public static final String SERIALIZED_NAME_OPERATION_IDS = "operationIds";
  @SerializedName(SERIALIZED_NAME_OPERATION_IDS)
  private List<UUID> operationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<OperationRead> operations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_RESOURCE_REQUIREMENTS = "resourceRequirements";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUIREMENTS)
  private ResourceRequirements resourceRequirements;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private ConnectionSchedule schedule;

  public static final String SERIALIZED_NAME_SCHEDULE_DATA = "scheduleData";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_DATA)
  private ConnectionScheduleData scheduleData;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ConnectionScheduleType scheduleType;

  public static final String SERIALIZED_NAME_SCHEMA_CHANGE = "schemaChange";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CHANGE)
  private SchemaChange schemaChange;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceRead source;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private UUID sourceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConnectionStatus status;

  public static final String SERIALIZED_NAME_SYNC_CATALOG = "syncCatalog";
  @SerializedName(SERIALIZED_NAME_SYNC_CATALOG)
  private AirbyteCatalog syncCatalog;

  public WebBackendConnectionRead() {
  }

  public WebBackendConnectionRead catalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
    return this;
  }

  /**
   * Get catalogDiff
   * @return catalogDiff
   */
  @javax.annotation.Nullable
  public CatalogDiff getCatalogDiff() {
    return catalogDiff;
  }

  public void setCatalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
  }


  public WebBackendConnectionRead catalogId(UUID catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public UUID getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(UUID catalogId) {
    this.catalogId = catalogId;
  }


  public WebBackendConnectionRead connectionId(UUID connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nonnull
  public UUID getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
  }


  public WebBackendConnectionRead destination(DestinationRead destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public DestinationRead getDestination() {
    return destination;
  }

  public void setDestination(DestinationRead destination) {
    this.destination = destination;
  }


  public WebBackendConnectionRead destinationId(UUID destinationId) {
    this.destinationId = destinationId;
    return this;
  }

  /**
   * Get destinationId
   * @return destinationId
   */
  @javax.annotation.Nonnull
  public UUID getDestinationId() {
    return destinationId;
  }

  public void setDestinationId(UUID destinationId) {
    this.destinationId = destinationId;
  }


  public WebBackendConnectionRead geography(Geography geography) {
    this.geography = geography;
    return this;
  }

  /**
   * Get geography
   * @return geography
   */
  @javax.annotation.Nullable
  public Geography getGeography() {
    return geography;
  }

  public void setGeography(Geography geography) {
    this.geography = geography;
  }


  public WebBackendConnectionRead isSyncing(Boolean isSyncing) {
    this.isSyncing = isSyncing;
    return this;
  }

  /**
   * Get isSyncing
   * @return isSyncing
   */
  @javax.annotation.Nonnull
  public Boolean getIsSyncing() {
    return isSyncing;
  }

  public void setIsSyncing(Boolean isSyncing) {
    this.isSyncing = isSyncing;
  }


  public WebBackendConnectionRead latestSyncJobCreatedAt(Long latestSyncJobCreatedAt) {
    this.latestSyncJobCreatedAt = latestSyncJobCreatedAt;
    return this;
  }

  /**
   * epoch time of the latest sync job. null if no sync job has taken place.
   * @return latestSyncJobCreatedAt
   */
  @javax.annotation.Nullable
  public Long getLatestSyncJobCreatedAt() {
    return latestSyncJobCreatedAt;
  }

  public void setLatestSyncJobCreatedAt(Long latestSyncJobCreatedAt) {
    this.latestSyncJobCreatedAt = latestSyncJobCreatedAt;
  }


  public WebBackendConnectionRead latestSyncJobStatus(JobStatus latestSyncJobStatus) {
    this.latestSyncJobStatus = latestSyncJobStatus;
    return this;
  }

  /**
   * Get latestSyncJobStatus
   * @return latestSyncJobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getLatestSyncJobStatus() {
    return latestSyncJobStatus;
  }

  public void setLatestSyncJobStatus(JobStatus latestSyncJobStatus) {
    this.latestSyncJobStatus = latestSyncJobStatus;
  }


  public WebBackendConnectionRead name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebBackendConnectionRead namespaceDefinition(NamespaceDefinitionType namespaceDefinition) {
    this.namespaceDefinition = namespaceDefinition;
    return this;
  }

  /**
   * Get namespaceDefinition
   * @return namespaceDefinition
   */
  @javax.annotation.Nullable
  public NamespaceDefinitionType getNamespaceDefinition() {
    return namespaceDefinition;
  }

  public void setNamespaceDefinition(NamespaceDefinitionType namespaceDefinition) {
    this.namespaceDefinition = namespaceDefinition;
  }


  public WebBackendConnectionRead namespaceFormat(String namespaceFormat) {
    this.namespaceFormat = namespaceFormat;
    return this;
  }

  /**
   * Used when namespaceDefinition is &#39;customformat&#39;. If blank then behaves like namespaceDefinition &#x3D; &#39;destination&#39;. If \&quot;${SOURCE_NAMESPACE}\&quot; then behaves like namespaceDefinition &#x3D; &#39;source&#39;.
   * @return namespaceFormat
   */
  @javax.annotation.Nullable
  public String getNamespaceFormat() {
    return namespaceFormat;
  }

  public void setNamespaceFormat(String namespaceFormat) {
    this.namespaceFormat = namespaceFormat;
  }


  public WebBackendConnectionRead nonBreakingChangesPreference(NonBreakingChangesPreference nonBreakingChangesPreference) {
    this.nonBreakingChangesPreference = nonBreakingChangesPreference;
    return this;
  }

  /**
   * Get nonBreakingChangesPreference
   * @return nonBreakingChangesPreference
   */
  @javax.annotation.Nonnull
  public NonBreakingChangesPreference getNonBreakingChangesPreference() {
    return nonBreakingChangesPreference;
  }

  public void setNonBreakingChangesPreference(NonBreakingChangesPreference nonBreakingChangesPreference) {
    this.nonBreakingChangesPreference = nonBreakingChangesPreference;
  }


  public WebBackendConnectionRead notifySchemaChanges(Boolean notifySchemaChanges) {
    this.notifySchemaChanges = notifySchemaChanges;
    return this;
  }

  /**
   * Get notifySchemaChanges
   * @return notifySchemaChanges
   */
  @javax.annotation.Nonnull
  public Boolean getNotifySchemaChanges() {
    return notifySchemaChanges;
  }

  public void setNotifySchemaChanges(Boolean notifySchemaChanges) {
    this.notifySchemaChanges = notifySchemaChanges;
  }


  public WebBackendConnectionRead operationIds(List<UUID> operationIds) {
    this.operationIds = operationIds;
    return this;
  }

  public WebBackendConnectionRead addOperationIdsItem(UUID operationIdsItem) {
    if (this.operationIds == null) {
      this.operationIds = new ArrayList<>();
    }
    this.operationIds.add(operationIdsItem);
    return this;
  }

  /**
   * Get operationIds
   * @return operationIds
   */
  @javax.annotation.Nullable
  public List<UUID> getOperationIds() {
    return operationIds;
  }

  public void setOperationIds(List<UUID> operationIds) {
    this.operationIds = operationIds;
  }


  public WebBackendConnectionRead operations(List<OperationRead> operations) {
    this.operations = operations;
    return this;
  }

  public WebBackendConnectionRead addOperationsItem(OperationRead operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * Get operations
   * @return operations
   */
  @javax.annotation.Nullable
  public List<OperationRead> getOperations() {
    return operations;
  }

  public void setOperations(List<OperationRead> operations) {
    this.operations = operations;
  }


  public WebBackendConnectionRead prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Prefix that will be prepended to the name of each stream when it is written to the destination.
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public WebBackendConnectionRead resourceRequirements(ResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * Get resourceRequirements
   * @return resourceRequirements
   */
  @javax.annotation.Nullable
  public ResourceRequirements getResourceRequirements() {
    return resourceRequirements;
  }

  public void setResourceRequirements(ResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }


  public WebBackendConnectionRead schedule(ConnectionSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public ConnectionSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(ConnectionSchedule schedule) {
    this.schedule = schedule;
  }


  public WebBackendConnectionRead scheduleData(ConnectionScheduleData scheduleData) {
    this.scheduleData = scheduleData;
    return this;
  }

  /**
   * Get scheduleData
   * @return scheduleData
   */
  @javax.annotation.Nullable
  public ConnectionScheduleData getScheduleData() {
    return scheduleData;
  }

  public void setScheduleData(ConnectionScheduleData scheduleData) {
    this.scheduleData = scheduleData;
  }


  public WebBackendConnectionRead scheduleType(ConnectionScheduleType scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * Get scheduleType
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public ConnectionScheduleType getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ConnectionScheduleType scheduleType) {
    this.scheduleType = scheduleType;
  }


  public WebBackendConnectionRead schemaChange(SchemaChange schemaChange) {
    this.schemaChange = schemaChange;
    return this;
  }

  /**
   * Get schemaChange
   * @return schemaChange
   */
  @javax.annotation.Nonnull
  public SchemaChange getSchemaChange() {
    return schemaChange;
  }

  public void setSchemaChange(SchemaChange schemaChange) {
    this.schemaChange = schemaChange;
  }


  public WebBackendConnectionRead source(SourceRead source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public SourceRead getSource() {
    return source;
  }

  public void setSource(SourceRead source) {
    this.source = source;
  }


  public WebBackendConnectionRead sourceId(UUID sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public UUID getSourceId() {
    return sourceId;
  }

  public void setSourceId(UUID sourceId) {
    this.sourceId = sourceId;
  }


  public WebBackendConnectionRead status(ConnectionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ConnectionStatus getStatus() {
    return status;
  }

  public void setStatus(ConnectionStatus status) {
    this.status = status;
  }


  public WebBackendConnectionRead syncCatalog(AirbyteCatalog syncCatalog) {
    this.syncCatalog = syncCatalog;
    return this;
  }

  /**
   * Get syncCatalog
   * @return syncCatalog
   */
  @javax.annotation.Nonnull
  public AirbyteCatalog getSyncCatalog() {
    return syncCatalog;
  }

  public void setSyncCatalog(AirbyteCatalog syncCatalog) {
    this.syncCatalog = syncCatalog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebBackendConnectionRead webBackendConnectionRead = (WebBackendConnectionRead) o;
    return Objects.equals(this.catalogDiff, webBackendConnectionRead.catalogDiff) &&
        Objects.equals(this.catalogId, webBackendConnectionRead.catalogId) &&
        Objects.equals(this.connectionId, webBackendConnectionRead.connectionId) &&
        Objects.equals(this.destination, webBackendConnectionRead.destination) &&
        Objects.equals(this.destinationId, webBackendConnectionRead.destinationId) &&
        Objects.equals(this.geography, webBackendConnectionRead.geography) &&
        Objects.equals(this.isSyncing, webBackendConnectionRead.isSyncing) &&
        Objects.equals(this.latestSyncJobCreatedAt, webBackendConnectionRead.latestSyncJobCreatedAt) &&
        Objects.equals(this.latestSyncJobStatus, webBackendConnectionRead.latestSyncJobStatus) &&
        Objects.equals(this.name, webBackendConnectionRead.name) &&
        Objects.equals(this.namespaceDefinition, webBackendConnectionRead.namespaceDefinition) &&
        Objects.equals(this.namespaceFormat, webBackendConnectionRead.namespaceFormat) &&
        Objects.equals(this.nonBreakingChangesPreference, webBackendConnectionRead.nonBreakingChangesPreference) &&
        Objects.equals(this.notifySchemaChanges, webBackendConnectionRead.notifySchemaChanges) &&
        Objects.equals(this.operationIds, webBackendConnectionRead.operationIds) &&
        Objects.equals(this.operations, webBackendConnectionRead.operations) &&
        Objects.equals(this.prefix, webBackendConnectionRead.prefix) &&
        Objects.equals(this.resourceRequirements, webBackendConnectionRead.resourceRequirements) &&
        Objects.equals(this.schedule, webBackendConnectionRead.schedule) &&
        Objects.equals(this.scheduleData, webBackendConnectionRead.scheduleData) &&
        Objects.equals(this.scheduleType, webBackendConnectionRead.scheduleType) &&
        Objects.equals(this.schemaChange, webBackendConnectionRead.schemaChange) &&
        Objects.equals(this.source, webBackendConnectionRead.source) &&
        Objects.equals(this.sourceId, webBackendConnectionRead.sourceId) &&
        Objects.equals(this.status, webBackendConnectionRead.status) &&
        Objects.equals(this.syncCatalog, webBackendConnectionRead.syncCatalog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogDiff, catalogId, connectionId, destination, destinationId, geography, isSyncing, latestSyncJobCreatedAt, latestSyncJobStatus, name, namespaceDefinition, namespaceFormat, nonBreakingChangesPreference, notifySchemaChanges, operationIds, operations, prefix, resourceRequirements, schedule, scheduleData, scheduleType, schemaChange, source, sourceId, status, syncCatalog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebBackendConnectionRead {\n");
    sb.append("    catalogDiff: ").append(toIndentedString(catalogDiff)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
    sb.append("    geography: ").append(toIndentedString(geography)).append("\n");
    sb.append("    isSyncing: ").append(toIndentedString(isSyncing)).append("\n");
    sb.append("    latestSyncJobCreatedAt: ").append(toIndentedString(latestSyncJobCreatedAt)).append("\n");
    sb.append("    latestSyncJobStatus: ").append(toIndentedString(latestSyncJobStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceDefinition: ").append(toIndentedString(namespaceDefinition)).append("\n");
    sb.append("    namespaceFormat: ").append(toIndentedString(namespaceFormat)).append("\n");
    sb.append("    nonBreakingChangesPreference: ").append(toIndentedString(nonBreakingChangesPreference)).append("\n");
    sb.append("    notifySchemaChanges: ").append(toIndentedString(notifySchemaChanges)).append("\n");
    sb.append("    operationIds: ").append(toIndentedString(operationIds)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    scheduleData: ").append(toIndentedString(scheduleData)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    schemaChange: ").append(toIndentedString(schemaChange)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    syncCatalog: ").append(toIndentedString(syncCatalog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalogDiff");
    openapiFields.add("catalogId");
    openapiFields.add("connectionId");
    openapiFields.add("destination");
    openapiFields.add("destinationId");
    openapiFields.add("geography");
    openapiFields.add("isSyncing");
    openapiFields.add("latestSyncJobCreatedAt");
    openapiFields.add("latestSyncJobStatus");
    openapiFields.add("name");
    openapiFields.add("namespaceDefinition");
    openapiFields.add("namespaceFormat");
    openapiFields.add("nonBreakingChangesPreference");
    openapiFields.add("notifySchemaChanges");
    openapiFields.add("operationIds");
    openapiFields.add("operations");
    openapiFields.add("prefix");
    openapiFields.add("resourceRequirements");
    openapiFields.add("schedule");
    openapiFields.add("scheduleData");
    openapiFields.add("scheduleType");
    openapiFields.add("schemaChange");
    openapiFields.add("source");
    openapiFields.add("sourceId");
    openapiFields.add("status");
    openapiFields.add("syncCatalog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionId");
    openapiRequiredFields.add("destination");
    openapiRequiredFields.add("destinationId");
    openapiRequiredFields.add("isSyncing");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nonBreakingChangesPreference");
    openapiRequiredFields.add("notifySchemaChanges");
    openapiRequiredFields.add("schemaChange");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("syncCatalog");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebBackendConnectionRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebBackendConnectionRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebBackendConnectionRead is not found in the empty JSON string", WebBackendConnectionRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebBackendConnectionRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebBackendConnectionRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebBackendConnectionRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `catalogDiff`
      if (jsonObj.get("catalogDiff") != null && !jsonObj.get("catalogDiff").isJsonNull()) {
        CatalogDiff.validateJsonElement(jsonObj.get("catalogDiff"));
      }
      if ((jsonObj.get("catalogId") != null && !jsonObj.get("catalogId").isJsonNull()) && !jsonObj.get("catalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogId").toString()));
      }
      if (!jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      // validate the required field `destination`
      DestinationRead.validateJsonElement(jsonObj.get("destination"));
      if (!jsonObj.get("destinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationId").toString()));
      }
      // validate the optional field `geography`
      if (jsonObj.get("geography") != null && !jsonObj.get("geography").isJsonNull()) {
        Geography.validateJsonElement(jsonObj.get("geography"));
      }
      // validate the optional field `latestSyncJobStatus`
      if (jsonObj.get("latestSyncJobStatus") != null && !jsonObj.get("latestSyncJobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("latestSyncJobStatus"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `namespaceDefinition`
      if (jsonObj.get("namespaceDefinition") != null && !jsonObj.get("namespaceDefinition").isJsonNull()) {
        NamespaceDefinitionType.validateJsonElement(jsonObj.get("namespaceDefinition"));
      }
      if ((jsonObj.get("namespaceFormat") != null && !jsonObj.get("namespaceFormat").isJsonNull()) && !jsonObj.get("namespaceFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespaceFormat").toString()));
      }
      // validate the required field `nonBreakingChangesPreference`
      NonBreakingChangesPreference.validateJsonElement(jsonObj.get("nonBreakingChangesPreference"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("operationIds") != null && !jsonObj.get("operationIds").isJsonNull() && !jsonObj.get("operationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationIds` to be an array in the JSON string but got `%s`", jsonObj.get("operationIds").toString()));
      }
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) {
        JsonArray jsonArrayoperations = jsonObj.getAsJsonArray("operations");
        if (jsonArrayoperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
          }

          // validate the optional field `operations` (array)
          for (int i = 0; i < jsonArrayoperations.size(); i++) {
            OperationRead.validateJsonElement(jsonArrayoperations.get(i));
          };
        }
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      // validate the optional field `resourceRequirements`
      if (jsonObj.get("resourceRequirements") != null && !jsonObj.get("resourceRequirements").isJsonNull()) {
        ResourceRequirements.validateJsonElement(jsonObj.get("resourceRequirements"));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        ConnectionSchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      // validate the optional field `scheduleData`
      if (jsonObj.get("scheduleData") != null && !jsonObj.get("scheduleData").isJsonNull()) {
        ConnectionScheduleData.validateJsonElement(jsonObj.get("scheduleData"));
      }
      // validate the optional field `scheduleType`
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) {
        ConnectionScheduleType.validateJsonElement(jsonObj.get("scheduleType"));
      }
      // validate the required field `schemaChange`
      SchemaChange.validateJsonElement(jsonObj.get("schemaChange"));
      // validate the required field `source`
      SourceRead.validateJsonElement(jsonObj.get("source"));
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      // validate the required field `status`
      ConnectionStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `syncCatalog`
      AirbyteCatalog.validateJsonElement(jsonObj.get("syncCatalog"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebBackendConnectionRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebBackendConnectionRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebBackendConnectionRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebBackendConnectionRead.class));

       return (TypeAdapter<T>) new TypeAdapter<WebBackendConnectionRead>() {
           @Override
           public void write(JsonWriter out, WebBackendConnectionRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebBackendConnectionRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebBackendConnectionRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebBackendConnectionRead
   * @throws IOException if the JSON string is invalid with respect to WebBackendConnectionRead
   */
  public static WebBackendConnectionRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebBackendConnectionRead.class);
  }

  /**
   * Convert an instance of WebBackendConnectionRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

