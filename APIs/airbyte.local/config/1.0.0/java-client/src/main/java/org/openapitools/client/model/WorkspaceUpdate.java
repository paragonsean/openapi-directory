/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Geography;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.WebhookConfigWrite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used to apply a patch-style update to a workspace, which means that null properties remain unchanged
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceUpdate {
  public static final String SERIALIZED_NAME_ANONYMOUS_DATA_COLLECTION = "anonymousDataCollection";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_DATA_COLLECTION)
  private Boolean anonymousDataCollection;

  public static final String SERIALIZED_NAME_DEFAULT_GEOGRAPHY = "defaultGeography";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GEOGRAPHY)
  private Geography defaultGeography;

  public static final String SERIALIZED_NAME_DISPLAY_SETUP_WIZARD = "displaySetupWizard";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SETUP_WIZARD)
  private Boolean displaySetupWizard;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_INITIAL_SETUP_COMPLETE = "initialSetupComplete";
  @SerializedName(SERIALIZED_NAME_INITIAL_SETUP_COMPLETE)
  private Boolean initialSetupComplete;

  public static final String SERIALIZED_NAME_NEWS = "news";
  @SerializedName(SERIALIZED_NAME_NEWS)
  private Boolean news;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<Notification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_UPDATES = "securityUpdates";
  @SerializedName(SERIALIZED_NAME_SECURITY_UPDATES)
  private Boolean securityUpdates;

  public static final String SERIALIZED_NAME_WEBHOOK_CONFIGS = "webhookConfigs";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_CONFIGS)
  private List<WebhookConfigWrite> webhookConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private UUID workspaceId;

  public WorkspaceUpdate() {
  }

  public WorkspaceUpdate anonymousDataCollection(Boolean anonymousDataCollection) {
    this.anonymousDataCollection = anonymousDataCollection;
    return this;
  }

  /**
   * Get anonymousDataCollection
   * @return anonymousDataCollection
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousDataCollection() {
    return anonymousDataCollection;
  }

  public void setAnonymousDataCollection(Boolean anonymousDataCollection) {
    this.anonymousDataCollection = anonymousDataCollection;
  }


  public WorkspaceUpdate defaultGeography(Geography defaultGeography) {
    this.defaultGeography = defaultGeography;
    return this;
  }

  /**
   * Get defaultGeography
   * @return defaultGeography
   */
  @javax.annotation.Nullable
  public Geography getDefaultGeography() {
    return defaultGeography;
  }

  public void setDefaultGeography(Geography defaultGeography) {
    this.defaultGeography = defaultGeography;
  }


  public WorkspaceUpdate displaySetupWizard(Boolean displaySetupWizard) {
    this.displaySetupWizard = displaySetupWizard;
    return this;
  }

  /**
   * Get displaySetupWizard
   * @return displaySetupWizard
   */
  @javax.annotation.Nullable
  public Boolean getDisplaySetupWizard() {
    return displaySetupWizard;
  }

  public void setDisplaySetupWizard(Boolean displaySetupWizard) {
    this.displaySetupWizard = displaySetupWizard;
  }


  public WorkspaceUpdate email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public WorkspaceUpdate initialSetupComplete(Boolean initialSetupComplete) {
    this.initialSetupComplete = initialSetupComplete;
    return this;
  }

  /**
   * Get initialSetupComplete
   * @return initialSetupComplete
   */
  @javax.annotation.Nullable
  public Boolean getInitialSetupComplete() {
    return initialSetupComplete;
  }

  public void setInitialSetupComplete(Boolean initialSetupComplete) {
    this.initialSetupComplete = initialSetupComplete;
  }


  public WorkspaceUpdate news(Boolean news) {
    this.news = news;
    return this;
  }

  /**
   * Get news
   * @return news
   */
  @javax.annotation.Nullable
  public Boolean getNews() {
    return news;
  }

  public void setNews(Boolean news) {
    this.news = news;
  }


  public WorkspaceUpdate notifications(List<Notification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public WorkspaceUpdate addNotificationsItem(Notification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<Notification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<Notification> notifications) {
    this.notifications = notifications;
  }


  public WorkspaceUpdate securityUpdates(Boolean securityUpdates) {
    this.securityUpdates = securityUpdates;
    return this;
  }

  /**
   * Get securityUpdates
   * @return securityUpdates
   */
  @javax.annotation.Nullable
  public Boolean getSecurityUpdates() {
    return securityUpdates;
  }

  public void setSecurityUpdates(Boolean securityUpdates) {
    this.securityUpdates = securityUpdates;
  }


  public WorkspaceUpdate webhookConfigs(List<WebhookConfigWrite> webhookConfigs) {
    this.webhookConfigs = webhookConfigs;
    return this;
  }

  public WorkspaceUpdate addWebhookConfigsItem(WebhookConfigWrite webhookConfigsItem) {
    if (this.webhookConfigs == null) {
      this.webhookConfigs = new ArrayList<>();
    }
    this.webhookConfigs.add(webhookConfigsItem);
    return this;
  }

  /**
   * Get webhookConfigs
   * @return webhookConfigs
   */
  @javax.annotation.Nullable
  public List<WebhookConfigWrite> getWebhookConfigs() {
    return webhookConfigs;
  }

  public void setWebhookConfigs(List<WebhookConfigWrite> webhookConfigs) {
    this.webhookConfigs = webhookConfigs;
  }


  public WorkspaceUpdate workspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * Get workspaceId
   * @return workspaceId
   */
  @javax.annotation.Nonnull
  public UUID getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceUpdate workspaceUpdate = (WorkspaceUpdate) o;
    return Objects.equals(this.anonymousDataCollection, workspaceUpdate.anonymousDataCollection) &&
        Objects.equals(this.defaultGeography, workspaceUpdate.defaultGeography) &&
        Objects.equals(this.displaySetupWizard, workspaceUpdate.displaySetupWizard) &&
        Objects.equals(this.email, workspaceUpdate.email) &&
        Objects.equals(this.initialSetupComplete, workspaceUpdate.initialSetupComplete) &&
        Objects.equals(this.news, workspaceUpdate.news) &&
        Objects.equals(this.notifications, workspaceUpdate.notifications) &&
        Objects.equals(this.securityUpdates, workspaceUpdate.securityUpdates) &&
        Objects.equals(this.webhookConfigs, workspaceUpdate.webhookConfigs) &&
        Objects.equals(this.workspaceId, workspaceUpdate.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anonymousDataCollection, defaultGeography, displaySetupWizard, email, initialSetupComplete, news, notifications, securityUpdates, webhookConfigs, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceUpdate {\n");
    sb.append("    anonymousDataCollection: ").append(toIndentedString(anonymousDataCollection)).append("\n");
    sb.append("    defaultGeography: ").append(toIndentedString(defaultGeography)).append("\n");
    sb.append("    displaySetupWizard: ").append(toIndentedString(displaySetupWizard)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    initialSetupComplete: ").append(toIndentedString(initialSetupComplete)).append("\n");
    sb.append("    news: ").append(toIndentedString(news)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    securityUpdates: ").append(toIndentedString(securityUpdates)).append("\n");
    sb.append("    webhookConfigs: ").append(toIndentedString(webhookConfigs)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anonymousDataCollection");
    openapiFields.add("defaultGeography");
    openapiFields.add("displaySetupWizard");
    openapiFields.add("email");
    openapiFields.add("initialSetupComplete");
    openapiFields.add("news");
    openapiFields.add("notifications");
    openapiFields.add("securityUpdates");
    openapiFields.add("webhookConfigs");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("workspaceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceUpdate is not found in the empty JSON string", WorkspaceUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkspaceUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultGeography`
      if (jsonObj.get("defaultGeography") != null && !jsonObj.get("defaultGeography").isJsonNull()) {
        Geography.validateJsonElement(jsonObj.get("defaultGeography"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            Notification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if (jsonObj.get("webhookConfigs") != null && !jsonObj.get("webhookConfigs").isJsonNull()) {
        JsonArray jsonArraywebhookConfigs = jsonObj.getAsJsonArray("webhookConfigs");
        if (jsonArraywebhookConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webhookConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webhookConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("webhookConfigs").toString()));
          }

          // validate the optional field `webhookConfigs` (array)
          for (int i = 0; i < jsonArraywebhookConfigs.size(); i++) {
            WebhookConfigWrite.validateJsonElement(jsonArraywebhookConfigs.get(i));
          };
        }
      }
      if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceUpdate>() {
           @Override
           public void write(JsonWriter out, WorkspaceUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceUpdate
   * @throws IOException if the JSON string is invalid with respect to WorkspaceUpdate
   */
  public static WorkspaceUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceUpdate.class);
  }

  /**
   * Convert an instance of WorkspaceUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

