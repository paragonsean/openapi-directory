/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OAuthConfigSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuthConfigSpecification {
  public static final String SERIALIZED_NAME_COMPLETE_O_AUTH_OUTPUT_SPECIFICATION = "completeOAuthOutputSpecification";
  @SerializedName(SERIALIZED_NAME_COMPLETE_O_AUTH_OUTPUT_SPECIFICATION)
  private Object completeOAuthOutputSpecification = null;

  public static final String SERIALIZED_NAME_COMPLETE_O_AUTH_SERVER_INPUT_SPECIFICATION = "completeOAuthServerInputSpecification";
  @SerializedName(SERIALIZED_NAME_COMPLETE_O_AUTH_SERVER_INPUT_SPECIFICATION)
  private Object completeOAuthServerInputSpecification = null;

  public static final String SERIALIZED_NAME_COMPLETE_O_AUTH_SERVER_OUTPUT_SPECIFICATION = "completeOAuthServerOutputSpecification";
  @SerializedName(SERIALIZED_NAME_COMPLETE_O_AUTH_SERVER_OUTPUT_SPECIFICATION)
  private Object completeOAuthServerOutputSpecification = null;

  public static final String SERIALIZED_NAME_OAUTH_USER_INPUT_FROM_CONNECTOR_CONFIG_SPECIFICATION = "oauthUserInputFromConnectorConfigSpecification";
  @SerializedName(SERIALIZED_NAME_OAUTH_USER_INPUT_FROM_CONNECTOR_CONFIG_SPECIFICATION)
  private Object oauthUserInputFromConnectorConfigSpecification = null;

  public OAuthConfigSpecification() {
  }

  public OAuthConfigSpecification completeOAuthOutputSpecification(Object completeOAuthOutputSpecification) {
    this.completeOAuthOutputSpecification = completeOAuthOutputSpecification;
    return this;
  }

  /**
   * The values required to configure OAuth flows. The schema for this must match the &#x60;OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification&#x60; schema.
   * @return completeOAuthOutputSpecification
   */
  @javax.annotation.Nullable
  public Object getCompleteOAuthOutputSpecification() {
    return completeOAuthOutputSpecification;
  }

  public void setCompleteOAuthOutputSpecification(Object completeOAuthOutputSpecification) {
    this.completeOAuthOutputSpecification = completeOAuthOutputSpecification;
  }


  public OAuthConfigSpecification completeOAuthServerInputSpecification(Object completeOAuthServerInputSpecification) {
    this.completeOAuthServerInputSpecification = completeOAuthServerInputSpecification;
    return this;
  }

  /**
   * The values required to configure OAuth flows. The schema for this must match the &#x60;OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification&#x60; schema.
   * @return completeOAuthServerInputSpecification
   */
  @javax.annotation.Nullable
  public Object getCompleteOAuthServerInputSpecification() {
    return completeOAuthServerInputSpecification;
  }

  public void setCompleteOAuthServerInputSpecification(Object completeOAuthServerInputSpecification) {
    this.completeOAuthServerInputSpecification = completeOAuthServerInputSpecification;
  }


  public OAuthConfigSpecification completeOAuthServerOutputSpecification(Object completeOAuthServerOutputSpecification) {
    this.completeOAuthServerOutputSpecification = completeOAuthServerOutputSpecification;
    return this;
  }

  /**
   * The values required to configure OAuth flows. The schema for this must match the &#x60;OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification&#x60; schema.
   * @return completeOAuthServerOutputSpecification
   */
  @javax.annotation.Nullable
  public Object getCompleteOAuthServerOutputSpecification() {
    return completeOAuthServerOutputSpecification;
  }

  public void setCompleteOAuthServerOutputSpecification(Object completeOAuthServerOutputSpecification) {
    this.completeOAuthServerOutputSpecification = completeOAuthServerOutputSpecification;
  }


  public OAuthConfigSpecification oauthUserInputFromConnectorConfigSpecification(Object oauthUserInputFromConnectorConfigSpecification) {
    this.oauthUserInputFromConnectorConfigSpecification = oauthUserInputFromConnectorConfigSpecification;
    return this;
  }

  /**
   * The values required to configure OAuth flows. The schema for this must match the &#x60;OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification&#x60; schema.
   * @return oauthUserInputFromConnectorConfigSpecification
   */
  @javax.annotation.Nullable
  public Object getOauthUserInputFromConnectorConfigSpecification() {
    return oauthUserInputFromConnectorConfigSpecification;
  }

  public void setOauthUserInputFromConnectorConfigSpecification(Object oauthUserInputFromConnectorConfigSpecification) {
    this.oauthUserInputFromConnectorConfigSpecification = oauthUserInputFromConnectorConfigSpecification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthConfigSpecification oauthConfigSpecification = (OAuthConfigSpecification) o;
    return Objects.equals(this.completeOAuthOutputSpecification, oauthConfigSpecification.completeOAuthOutputSpecification) &&
        Objects.equals(this.completeOAuthServerInputSpecification, oauthConfigSpecification.completeOAuthServerInputSpecification) &&
        Objects.equals(this.completeOAuthServerOutputSpecification, oauthConfigSpecification.completeOAuthServerOutputSpecification) &&
        Objects.equals(this.oauthUserInputFromConnectorConfigSpecification, oauthConfigSpecification.oauthUserInputFromConnectorConfigSpecification);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(completeOAuthOutputSpecification, completeOAuthServerInputSpecification, completeOAuthServerOutputSpecification, oauthUserInputFromConnectorConfigSpecification);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthConfigSpecification {\n");
    sb.append("    completeOAuthOutputSpecification: ").append(toIndentedString(completeOAuthOutputSpecification)).append("\n");
    sb.append("    completeOAuthServerInputSpecification: ").append(toIndentedString(completeOAuthServerInputSpecification)).append("\n");
    sb.append("    completeOAuthServerOutputSpecification: ").append(toIndentedString(completeOAuthServerOutputSpecification)).append("\n");
    sb.append("    oauthUserInputFromConnectorConfigSpecification: ").append(toIndentedString(oauthUserInputFromConnectorConfigSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completeOAuthOutputSpecification");
    openapiFields.add("completeOAuthServerInputSpecification");
    openapiFields.add("completeOAuthServerOutputSpecification");
    openapiFields.add("oauthUserInputFromConnectorConfigSpecification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuthConfigSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuthConfigSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthConfigSpecification is not found in the empty JSON string", OAuthConfigSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuthConfigSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthConfigSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthConfigSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthConfigSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthConfigSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthConfigSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthConfigSpecification>() {
           @Override
           public void write(JsonWriter out, OAuthConfigSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthConfigSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuthConfigSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuthConfigSpecification
   * @throws IOException if the JSON string is invalid with respect to OAuthConfigSpecification
   */
  public static OAuthConfigSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthConfigSpecification.class);
  }

  /**
   * Convert an instance of OAuthConfigSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

