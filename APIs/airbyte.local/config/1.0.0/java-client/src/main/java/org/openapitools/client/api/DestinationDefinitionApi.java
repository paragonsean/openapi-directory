/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomDestinationDefinitionCreate;
import org.openapitools.client.model.DestinationDefinitionIdRequestBody;
import org.openapitools.client.model.DestinationDefinitionIdWithWorkspaceId;
import org.openapitools.client.model.DestinationDefinitionRead;
import org.openapitools.client.model.DestinationDefinitionReadList;
import org.openapitools.client.model.DestinationDefinitionUpdate;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.NotFoundKnownExceptionInfo;
import org.openapitools.client.model.PrivateDestinationDefinitionRead;
import org.openapitools.client.model.PrivateDestinationDefinitionReadList;
import org.openapitools.client.model.WorkspaceIdRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DestinationDefinitionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DestinationDefinitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DestinationDefinitionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomDestinationDefinition
     * @param customDestinationDefinitionCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomDestinationDefinitionCall(CustomDestinationDefinitionCreate customDestinationDefinitionCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDestinationDefinitionCreate;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/create_custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomDestinationDefinitionValidateBeforeCall(CustomDestinationDefinitionCreate customDestinationDefinitionCreate, final ApiCallback _callback) throws ApiException {
        return createCustomDestinationDefinitionCall(customDestinationDefinitionCreate, _callback);

    }

    /**
     * Creates a custom destinationDefinition for the given workspace
     * 
     * @param customDestinationDefinitionCreate  (optional)
     * @return DestinationDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionRead createCustomDestinationDefinition(CustomDestinationDefinitionCreate customDestinationDefinitionCreate) throws ApiException {
        ApiResponse<DestinationDefinitionRead> localVarResp = createCustomDestinationDefinitionWithHttpInfo(customDestinationDefinitionCreate);
        return localVarResp.getData();
    }

    /**
     * Creates a custom destinationDefinition for the given workspace
     * 
     * @param customDestinationDefinitionCreate  (optional)
     * @return ApiResponse&lt;DestinationDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionRead> createCustomDestinationDefinitionWithHttpInfo(CustomDestinationDefinitionCreate customDestinationDefinitionCreate) throws ApiException {
        okhttp3.Call localVarCall = createCustomDestinationDefinitionValidateBeforeCall(customDestinationDefinitionCreate, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a custom destinationDefinition for the given workspace (asynchronously)
     * 
     * @param customDestinationDefinitionCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomDestinationDefinitionAsync(CustomDestinationDefinitionCreate customDestinationDefinitionCreate, final ApiCallback<DestinationDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomDestinationDefinitionValidateBeforeCall(customDestinationDefinitionCreate, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDestinationDefinition
     * @param destinationDefinitionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDestinationDefinitionCall(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDestinationDefinitionValidateBeforeCall(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdRequestBody' is set
        if (destinationDefinitionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdRequestBody' when calling deleteDestinationDefinition(Async)");
        }

        return deleteDestinationDefinitionCall(destinationDefinitionIdRequestBody, _callback);

    }

    /**
     * Delete a destination definition
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDestinationDefinition(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
        deleteDestinationDefinitionWithHttpInfo(destinationDefinitionIdRequestBody);
    }

    /**
     * Delete a destination definition
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDestinationDefinitionWithHttpInfo(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteDestinationDefinitionValidateBeforeCall(destinationDefinitionIdRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a destination definition (asynchronously)
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDestinationDefinitionAsync(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDestinationDefinitionValidateBeforeCall(destinationDefinitionIdRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDestinationDefinition
     * @param destinationDefinitionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionCall(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationDefinitionValidateBeforeCall(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdRequestBody' is set
        if (destinationDefinitionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdRequestBody' when calling getDestinationDefinition(Async)");
        }

        return getDestinationDefinitionCall(destinationDefinitionIdRequestBody, _callback);

    }

    /**
     * Get destinationDefinition
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @return DestinationDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionRead getDestinationDefinition(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
        ApiResponse<DestinationDefinitionRead> localVarResp = getDestinationDefinitionWithHttpInfo(destinationDefinitionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get destinationDefinition
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @return ApiResponse&lt;DestinationDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionRead> getDestinationDefinitionWithHttpInfo(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getDestinationDefinitionValidateBeforeCall(destinationDefinitionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get destinationDefinition (asynchronously)
     * 
     * @param destinationDefinitionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionAsync(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody, final ApiCallback<DestinationDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationDefinitionValidateBeforeCall(destinationDefinitionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDestinationDefinitionForWorkspace
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionForWorkspaceCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/get_for_workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationDefinitionForWorkspaceValidateBeforeCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
        if (destinationDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling getDestinationDefinitionForWorkspace(Async)");
        }

        return getDestinationDefinitionForWorkspaceCall(destinationDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * Get a destinationDefinition that is configured for the given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return DestinationDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionRead getDestinationDefinitionForWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        ApiResponse<DestinationDefinitionRead> localVarResp = getDestinationDefinitionForWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
        return localVarResp.getData();
    }

    /**
     * Get a destinationDefinition that is configured for the given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;DestinationDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionRead> getDestinationDefinitionForWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = getDestinationDefinitionForWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a destinationDefinition that is configured for the given workspace (asynchronously)
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionForWorkspaceAsync(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback<DestinationDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationDefinitionForWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantDestinationDefinitionToWorkspace
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantDestinationDefinitionToWorkspaceCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/grant_definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantDestinationDefinitionToWorkspaceValidateBeforeCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
        if (destinationDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling grantDestinationDefinitionToWorkspace(Async)");
        }

        return grantDestinationDefinitionToWorkspaceCall(destinationDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * grant a private, non-custom destinationDefinition to a given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return PrivateDestinationDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public PrivateDestinationDefinitionRead grantDestinationDefinitionToWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        ApiResponse<PrivateDestinationDefinitionRead> localVarResp = grantDestinationDefinitionToWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
        return localVarResp.getData();
    }

    /**
     * grant a private, non-custom destinationDefinition to a given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;PrivateDestinationDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateDestinationDefinitionRead> grantDestinationDefinitionToWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = grantDestinationDefinitionToWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, null);
        Type localVarReturnType = new TypeToken<PrivateDestinationDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * grant a private, non-custom destinationDefinition to a given workspace (asynchronously)
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantDestinationDefinitionToWorkspaceAsync(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback<PrivateDestinationDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantDestinationDefinitionToWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, _callback);
        Type localVarReturnType = new TypeToken<PrivateDestinationDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDestinationDefinitions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDestinationDefinitionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDestinationDefinitionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listDestinationDefinitionsCall(_callback);

    }

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use
     * 
     * @return DestinationDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionReadList listDestinationDefinitions() throws ApiException {
        ApiResponse<DestinationDefinitionReadList> localVarResp = listDestinationDefinitionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use
     * 
     * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionReadList> listDestinationDefinitionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDestinationDefinitionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDestinationDefinitionsAsync(final ApiCallback<DestinationDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDestinationDefinitionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDestinationDefinitionsForWorkspace
     * @param workspaceIdRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDestinationDefinitionsForWorkspaceCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/list_for_workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDestinationDefinitionsForWorkspaceValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        return listDestinationDefinitionsForWorkspaceCall(workspaceIdRequestBody, _callback);

    }

    /**
     * List all the destinationDefinitions the given workspace is configured to use
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return DestinationDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionReadList listDestinationDefinitionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<DestinationDefinitionReadList> localVarResp = listDestinationDefinitionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * List all the destinationDefinitions the given workspace is configured to use
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionReadList> listDestinationDefinitionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listDestinationDefinitionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the destinationDefinitions the given workspace is configured to use (asynchronously)
     * 
     * @param workspaceIdRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDestinationDefinitionsForWorkspaceAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<DestinationDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDestinationDefinitionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLatestDestinationDefinitions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestDestinationDefinitionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/list_latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLatestDestinationDefinitionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLatestDestinationDefinitionsCall(_callback);

    }

    /**
     * List the latest destinationDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported destinations.
     * @return DestinationDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionReadList listLatestDestinationDefinitions() throws ApiException {
        ApiResponse<DestinationDefinitionReadList> localVarResp = listLatestDestinationDefinitionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List the latest destinationDefinitions Airbyte supports
     * Guaranteed to retrieve the latest information on supported destinations.
     * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionReadList> listLatestDestinationDefinitionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLatestDestinationDefinitionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the latest destinationDefinitions Airbyte supports (asynchronously)
     * Guaranteed to retrieve the latest information on supported destinations.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLatestDestinationDefinitionsAsync(final ApiCallback<DestinationDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLatestDestinationDefinitionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPrivateDestinationDefinitions
     * @param workspaceIdRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPrivateDestinationDefinitionsCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/list_private";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPrivateDestinationDefinitionsValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        return listPrivateDestinationDefinitionsCall(workspaceIdRequestBody, _callback);

    }

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return PrivateDestinationDefinitionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PrivateDestinationDefinitionReadList listPrivateDestinationDefinitions(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<PrivateDestinationDefinitionReadList> localVarResp = listPrivateDestinationDefinitionsWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
     * 
     * @param workspaceIdRequestBody  (optional)
     * @return ApiResponse&lt;PrivateDestinationDefinitionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateDestinationDefinitionReadList> listPrivateDestinationDefinitionsWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listPrivateDestinationDefinitionsValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<PrivateDestinationDefinitionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants. (asynchronously)
     * 
     * @param workspaceIdRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPrivateDestinationDefinitionsAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<PrivateDestinationDefinitionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPrivateDestinationDefinitionsValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PrivateDestinationDefinitionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeDestinationDefinitionFromWorkspace
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeDestinationDefinitionFromWorkspaceCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/revoke_definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeDestinationDefinitionFromWorkspaceValidateBeforeCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
        if (destinationDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling revokeDestinationDefinitionFromWorkspace(Async)");
        }

        return revokeDestinationDefinitionFromWorkspaceCall(destinationDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public void revokeDestinationDefinitionFromWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        revokeDestinationDefinitionFromWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
    }

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeDestinationDefinitionFromWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = revokeDestinationDefinitionFromWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace (asynchronously)
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeDestinationDefinitionFromWorkspaceAsync(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeDestinationDefinitionFromWorkspaceValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDestinationDefinition
     * @param destinationDefinitionUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDestinationDefinitionCall(DestinationDefinitionUpdate destinationDefinitionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionUpdate;

        // create path and map variables
        String localVarPath = "/v1/destination_definitions/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDestinationDefinitionValidateBeforeCall(DestinationDefinitionUpdate destinationDefinitionUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionUpdate' is set
        if (destinationDefinitionUpdate == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionUpdate' when calling updateDestinationDefinition(Async)");
        }

        return updateDestinationDefinitionCall(destinationDefinitionUpdate, _callback);

    }

    /**
     * Update destinationDefinition
     * 
     * @param destinationDefinitionUpdate  (required)
     * @return DestinationDefinitionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionRead updateDestinationDefinition(DestinationDefinitionUpdate destinationDefinitionUpdate) throws ApiException {
        ApiResponse<DestinationDefinitionRead> localVarResp = updateDestinationDefinitionWithHttpInfo(destinationDefinitionUpdate);
        return localVarResp.getData();
    }

    /**
     * Update destinationDefinition
     * 
     * @param destinationDefinitionUpdate  (required)
     * @return ApiResponse&lt;DestinationDefinitionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionRead> updateDestinationDefinitionWithHttpInfo(DestinationDefinitionUpdate destinationDefinitionUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateDestinationDefinitionValidateBeforeCall(destinationDefinitionUpdate, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update destinationDefinition (asynchronously)
     * 
     * @param destinationDefinitionUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDestinationDefinitionAsync(DestinationDefinitionUpdate destinationDefinitionUpdate, final ApiCallback<DestinationDefinitionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDestinationDefinitionValidateBeforeCall(destinationDefinitionUpdate, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
