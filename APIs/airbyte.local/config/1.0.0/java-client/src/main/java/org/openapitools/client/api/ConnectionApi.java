/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionCreate;
import org.openapitools.client.model.ConnectionIdRequestBody;
import org.openapitools.client.model.ConnectionRead;
import org.openapitools.client.model.ConnectionReadList;
import org.openapitools.client.model.ConnectionSearch;
import org.openapitools.client.model.ConnectionUpdate;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.JobInfoRead;
import org.openapitools.client.model.NotFoundKnownExceptionInfo;
import org.openapitools.client.model.WorkspaceIdRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConnection
     * @param connectionCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionCall(ConnectionCreate connectionCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionCreate;

        // create path and map variables
        String localVarPath = "/v1/connections/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionValidateBeforeCall(ConnectionCreate connectionCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionCreate' is set
        if (connectionCreate == null) {
            throw new ApiException("Missing the required parameter 'connectionCreate' when calling createConnection(Async)");
        }

        return createConnectionCall(connectionCreate, _callback);

    }

    /**
     * Create a connection between a source and a destination
     * 
     * @param connectionCreate  (required)
     * @return ConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRead createConnection(ConnectionCreate connectionCreate) throws ApiException {
        ApiResponse<ConnectionRead> localVarResp = createConnectionWithHttpInfo(connectionCreate);
        return localVarResp.getData();
    }

    /**
     * Create a connection between a source and a destination
     * 
     * @param connectionCreate  (required)
     * @return ApiResponse&lt;ConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRead> createConnectionWithHttpInfo(ConnectionCreate connectionCreate) throws ApiException {
        okhttp3.Call localVarCall = createConnectionValidateBeforeCall(connectionCreate, null);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a connection between a source and a destination (asynchronously)
     * 
     * @param connectionCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionAsync(ConnectionCreate connectionCreate, final ApiCallback<ConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionValidateBeforeCall(connectionCreate, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnection
     * @param connectionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionValidateBeforeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionIdRequestBody' is set
        if (connectionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRequestBody' when calling deleteConnection(Async)");
        }

        return deleteConnectionCall(connectionIdRequestBody, _callback);

    }

    /**
     * Delete a connection
     * 
     * @param connectionIdRequestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        deleteConnectionWithHttpInfo(connectionIdRequestBody);
    }

    /**
     * Delete a connection
     * 
     * @param connectionIdRequestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(connectionIdRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a connection (asynchronously)
     * 
     * @param connectionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionAsync(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(connectionIdRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnection
     * @param connectionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionValidateBeforeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionIdRequestBody' is set
        if (connectionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRequestBody' when calling getConnection(Async)");
        }

        return getConnectionCall(connectionIdRequestBody, _callback);

    }

    /**
     * Get a connection
     * 
     * @param connectionIdRequestBody  (required)
     * @return ConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRead getConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        ApiResponse<ConnectionRead> localVarResp = getConnectionWithHttpInfo(connectionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get a connection
     * 
     * @param connectionIdRequestBody  (required)
     * @return ApiResponse&lt;ConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRead> getConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getConnectionValidateBeforeCall(connectionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a connection (asynchronously)
     * 
     * @param connectionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionAsync(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback<ConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionValidateBeforeCall(connectionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllConnectionsForWorkspace
     * @param workspaceIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllConnectionsForWorkspaceCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/list_all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllConnectionsForWorkspaceValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceIdRequestBody' is set
        if (workspaceIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'workspaceIdRequestBody' when calling listAllConnectionsForWorkspace(Async)");
        }

        return listAllConnectionsForWorkspaceCall(workspaceIdRequestBody, _callback);

    }

    /**
     * Returns all connections for a workspace, including deleted connections.
     * List connections for workspace, including deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @return ConnectionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionReadList listAllConnectionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<ConnectionReadList> localVarResp = listAllConnectionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Returns all connections for a workspace, including deleted connections.
     * List connections for workspace, including deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @return ApiResponse&lt;ConnectionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionReadList> listAllConnectionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listAllConnectionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all connections for a workspace, including deleted connections. (asynchronously)
     * List connections for workspace, including deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllConnectionsForWorkspaceAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<ConnectionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllConnectionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnectionsForWorkspace
     * @param workspaceIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionsForWorkspaceCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectionsForWorkspaceValidateBeforeCall(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceIdRequestBody' is set
        if (workspaceIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'workspaceIdRequestBody' when calling listConnectionsForWorkspace(Async)");
        }

        return listConnectionsForWorkspaceCall(workspaceIdRequestBody, _callback);

    }

    /**
     * Returns all connections for a workspace.
     * List connections for workspace. Does not return deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @return ConnectionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionReadList listConnectionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        ApiResponse<ConnectionReadList> localVarResp = listConnectionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Returns all connections for a workspace.
     * List connections for workspace. Does not return deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @return ApiResponse&lt;ConnectionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionReadList> listConnectionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = listConnectionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, null);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all connections for a workspace. (asynchronously)
     * List connections for workspace. Does not return deleted connections.
     * @param workspaceIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionsForWorkspaceAsync(WorkspaceIdRequestBody workspaceIdRequestBody, final ApiCallback<ConnectionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectionsForWorkspaceValidateBeforeCall(workspaceIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetConnection
     * @param connectionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetConnectionCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetConnectionValidateBeforeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionIdRequestBody' is set
        if (connectionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRequestBody' when calling resetConnection(Async)");
        }

        return resetConnectionCall(connectionIdRequestBody, _callback);

    }

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     * 
     * @param connectionIdRequestBody  (required)
     * @return JobInfoRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public JobInfoRead resetConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        ApiResponse<JobInfoRead> localVarResp = resetConnectionWithHttpInfo(connectionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     * 
     * @param connectionIdRequestBody  (required)
     * @return ApiResponse&lt;JobInfoRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfoRead> resetConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = resetConnectionValidateBeforeCall(connectionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<JobInfoRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state. (asynchronously)
     * 
     * @param connectionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetConnectionAsync(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback<JobInfoRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetConnectionValidateBeforeCall(connectionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<JobInfoRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchConnections
     * @param connectionSearch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionsCall(ConnectionSearch connectionSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionSearch;

        // create path and map variables
        String localVarPath = "/v1/connections/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchConnectionsValidateBeforeCall(ConnectionSearch connectionSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionSearch' is set
        if (connectionSearch == null) {
            throw new ApiException("Missing the required parameter 'connectionSearch' when calling searchConnections(Async)");
        }

        return searchConnectionsCall(connectionSearch, _callback);

    }

    /**
     * Search connections
     * 
     * @param connectionSearch  (required)
     * @return ConnectionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionReadList searchConnections(ConnectionSearch connectionSearch) throws ApiException {
        ApiResponse<ConnectionReadList> localVarResp = searchConnectionsWithHttpInfo(connectionSearch);
        return localVarResp.getData();
    }

    /**
     * Search connections
     * 
     * @param connectionSearch  (required)
     * @return ApiResponse&lt;ConnectionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionReadList> searchConnectionsWithHttpInfo(ConnectionSearch connectionSearch) throws ApiException {
        okhttp3.Call localVarCall = searchConnectionsValidateBeforeCall(connectionSearch, null);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search connections (asynchronously)
     * 
     * @param connectionSearch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConnectionsAsync(ConnectionSearch connectionSearch, final ApiCallback<ConnectionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchConnectionsValidateBeforeCall(connectionSearch, _callback);
        Type localVarReturnType = new TypeToken<ConnectionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncConnection
     * @param connectionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncConnectionCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/connections/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncConnectionValidateBeforeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionIdRequestBody' is set
        if (connectionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRequestBody' when calling syncConnection(Async)");
        }

        return syncConnectionCall(connectionIdRequestBody, _callback);

    }

    /**
     * Trigger a manual sync of the connection
     * 
     * @param connectionIdRequestBody  (required)
     * @return JobInfoRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public JobInfoRead syncConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        ApiResponse<JobInfoRead> localVarResp = syncConnectionWithHttpInfo(connectionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Trigger a manual sync of the connection
     * 
     * @param connectionIdRequestBody  (required)
     * @return ApiResponse&lt;JobInfoRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfoRead> syncConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = syncConnectionValidateBeforeCall(connectionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<JobInfoRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger a manual sync of the connection (asynchronously)
     * 
     * @param connectionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncConnectionAsync(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback<JobInfoRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncConnectionValidateBeforeCall(connectionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<JobInfoRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConnection
     * @param connectionUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionCall(ConnectionUpdate connectionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionUpdate;

        // create path and map variables
        String localVarPath = "/v1/connections/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectionValidateBeforeCall(ConnectionUpdate connectionUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionUpdate' is set
        if (connectionUpdate == null) {
            throw new ApiException("Missing the required parameter 'connectionUpdate' when calling updateConnection(Async)");
        }

        return updateConnectionCall(connectionUpdate, _callback);

    }

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param connectionUpdate  (required)
     * @return ConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionRead updateConnection(ConnectionUpdate connectionUpdate) throws ApiException {
        ApiResponse<ConnectionRead> localVarResp = updateConnectionWithHttpInfo(connectionUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param connectionUpdate  (required)
     * @return ApiResponse&lt;ConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionRead> updateConnectionWithHttpInfo(ConnectionUpdate connectionUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateConnectionValidateBeforeCall(connectionUpdate, null);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a connection (asynchronously)
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param connectionUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionAsync(ConnectionUpdate connectionUpdate, final ApiCallback<ConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectionValidateBeforeCall(connectionUpdate, _callback);
        Type localVarReturnType = new TypeToken<ConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
