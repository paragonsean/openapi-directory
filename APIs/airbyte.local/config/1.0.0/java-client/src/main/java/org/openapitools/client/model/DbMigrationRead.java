/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DbMigrationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DbMigrationRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DbMigrationRead {
  public static final String SERIALIZED_NAME_MIGRATED_AT = "migratedAt";
  @SerializedName(SERIALIZED_NAME_MIGRATED_AT)
  private Long migratedAt;

  public static final String SERIALIZED_NAME_MIGRATED_BY = "migratedBy";
  @SerializedName(SERIALIZED_NAME_MIGRATED_BY)
  private String migratedBy;

  public static final String SERIALIZED_NAME_MIGRATION_DESCRIPTION = "migrationDescription";
  @SerializedName(SERIALIZED_NAME_MIGRATION_DESCRIPTION)
  private String migrationDescription;

  public static final String SERIALIZED_NAME_MIGRATION_SCRIPT = "migrationScript";
  @SerializedName(SERIALIZED_NAME_MIGRATION_SCRIPT)
  private String migrationScript;

  public static final String SERIALIZED_NAME_MIGRATION_STATE = "migrationState";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE)
  private DbMigrationState migrationState;

  public static final String SERIALIZED_NAME_MIGRATION_TYPE = "migrationType";
  @SerializedName(SERIALIZED_NAME_MIGRATION_TYPE)
  private String migrationType;

  public static final String SERIALIZED_NAME_MIGRATION_VERSION = "migrationVersion";
  @SerializedName(SERIALIZED_NAME_MIGRATION_VERSION)
  private String migrationVersion;

  public DbMigrationRead() {
  }

  public DbMigrationRead migratedAt(Long migratedAt) {
    this.migratedAt = migratedAt;
    return this;
  }

  /**
   * Get migratedAt
   * @return migratedAt
   */
  @javax.annotation.Nullable
  public Long getMigratedAt() {
    return migratedAt;
  }

  public void setMigratedAt(Long migratedAt) {
    this.migratedAt = migratedAt;
  }


  public DbMigrationRead migratedBy(String migratedBy) {
    this.migratedBy = migratedBy;
    return this;
  }

  /**
   * Get migratedBy
   * @return migratedBy
   */
  @javax.annotation.Nullable
  public String getMigratedBy() {
    return migratedBy;
  }

  public void setMigratedBy(String migratedBy) {
    this.migratedBy = migratedBy;
  }


  public DbMigrationRead migrationDescription(String migrationDescription) {
    this.migrationDescription = migrationDescription;
    return this;
  }

  /**
   * Get migrationDescription
   * @return migrationDescription
   */
  @javax.annotation.Nonnull
  public String getMigrationDescription() {
    return migrationDescription;
  }

  public void setMigrationDescription(String migrationDescription) {
    this.migrationDescription = migrationDescription;
  }


  public DbMigrationRead migrationScript(String migrationScript) {
    this.migrationScript = migrationScript;
    return this;
  }

  /**
   * Get migrationScript
   * @return migrationScript
   */
  @javax.annotation.Nullable
  public String getMigrationScript() {
    return migrationScript;
  }

  public void setMigrationScript(String migrationScript) {
    this.migrationScript = migrationScript;
  }


  public DbMigrationRead migrationState(DbMigrationState migrationState) {
    this.migrationState = migrationState;
    return this;
  }

  /**
   * Get migrationState
   * @return migrationState
   */
  @javax.annotation.Nullable
  public DbMigrationState getMigrationState() {
    return migrationState;
  }

  public void setMigrationState(DbMigrationState migrationState) {
    this.migrationState = migrationState;
  }


  public DbMigrationRead migrationType(String migrationType) {
    this.migrationType = migrationType;
    return this;
  }

  /**
   * Get migrationType
   * @return migrationType
   */
  @javax.annotation.Nonnull
  public String getMigrationType() {
    return migrationType;
  }

  public void setMigrationType(String migrationType) {
    this.migrationType = migrationType;
  }


  public DbMigrationRead migrationVersion(String migrationVersion) {
    this.migrationVersion = migrationVersion;
    return this;
  }

  /**
   * Get migrationVersion
   * @return migrationVersion
   */
  @javax.annotation.Nonnull
  public String getMigrationVersion() {
    return migrationVersion;
  }

  public void setMigrationVersion(String migrationVersion) {
    this.migrationVersion = migrationVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbMigrationRead dbMigrationRead = (DbMigrationRead) o;
    return Objects.equals(this.migratedAt, dbMigrationRead.migratedAt) &&
        Objects.equals(this.migratedBy, dbMigrationRead.migratedBy) &&
        Objects.equals(this.migrationDescription, dbMigrationRead.migrationDescription) &&
        Objects.equals(this.migrationScript, dbMigrationRead.migrationScript) &&
        Objects.equals(this.migrationState, dbMigrationRead.migrationState) &&
        Objects.equals(this.migrationType, dbMigrationRead.migrationType) &&
        Objects.equals(this.migrationVersion, dbMigrationRead.migrationVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(migratedAt, migratedBy, migrationDescription, migrationScript, migrationState, migrationType, migrationVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbMigrationRead {\n");
    sb.append("    migratedAt: ").append(toIndentedString(migratedAt)).append("\n");
    sb.append("    migratedBy: ").append(toIndentedString(migratedBy)).append("\n");
    sb.append("    migrationDescription: ").append(toIndentedString(migrationDescription)).append("\n");
    sb.append("    migrationScript: ").append(toIndentedString(migrationScript)).append("\n");
    sb.append("    migrationState: ").append(toIndentedString(migrationState)).append("\n");
    sb.append("    migrationType: ").append(toIndentedString(migrationType)).append("\n");
    sb.append("    migrationVersion: ").append(toIndentedString(migrationVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("migratedAt");
    openapiFields.add("migratedBy");
    openapiFields.add("migrationDescription");
    openapiFields.add("migrationScript");
    openapiFields.add("migrationState");
    openapiFields.add("migrationType");
    openapiFields.add("migrationVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("migrationDescription");
    openapiRequiredFields.add("migrationType");
    openapiRequiredFields.add("migrationVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DbMigrationRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbMigrationRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbMigrationRead is not found in the empty JSON string", DbMigrationRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbMigrationRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbMigrationRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DbMigrationRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("migratedBy") != null && !jsonObj.get("migratedBy").isJsonNull()) && !jsonObj.get("migratedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migratedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migratedBy").toString()));
      }
      if (!jsonObj.get("migrationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationDescription").toString()));
      }
      if ((jsonObj.get("migrationScript") != null && !jsonObj.get("migrationScript").isJsonNull()) && !jsonObj.get("migrationScript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationScript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationScript").toString()));
      }
      // validate the optional field `migrationState`
      if (jsonObj.get("migrationState") != null && !jsonObj.get("migrationState").isJsonNull()) {
        DbMigrationState.validateJsonElement(jsonObj.get("migrationState"));
      }
      if (!jsonObj.get("migrationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationType").toString()));
      }
      if (!jsonObj.get("migrationVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbMigrationRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbMigrationRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbMigrationRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbMigrationRead.class));

       return (TypeAdapter<T>) new TypeAdapter<DbMigrationRead>() {
           @Override
           public void write(JsonWriter out, DbMigrationRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbMigrationRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DbMigrationRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DbMigrationRead
   * @throws IOException if the JSON string is invalid with respect to DbMigrationRead
   */
  public static DbMigrationRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbMigrationRead.class);
  }

  /**
   * Convert an instance of DbMigrationRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

