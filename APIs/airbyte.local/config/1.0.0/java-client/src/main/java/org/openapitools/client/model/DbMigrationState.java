/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets DbMigrationState
 */
@JsonAdapter(DbMigrationState.Adapter.class)
public enum DbMigrationState {
  
  PENDING("pending"),
  
  ABOVE_TARGET("above_target"),
  
  BELOW_BASELINE("below_baseline"),
  
  BASELINE("baseline"),
  
  IGNORED("ignored"),
  
  MISSING_SUCCESS("missing_success"),
  
  MISSING_FAILED("missing_failed"),
  
  SUCCESS("success"),
  
  UNDONE("undone"),
  
  AVAILABLE("available"),
  
  FAILED("failed"),
  
  OUT_OF_ORDER("out_of_order"),
  
  FUTURE_SUCCESS("future_success"),
  
  FUTURE_FAILED("future_failed"),
  
  OUTDATED("outdated"),
  
  SUPERSEDED("superseded"),
  
  DELETED("deleted");

  private String value;

  DbMigrationState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DbMigrationState fromValue(String value) {
    for (DbMigrationState b : DbMigrationState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DbMigrationState> {
    @Override
    public void write(final JsonWriter jsonWriter, final DbMigrationState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DbMigrationState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DbMigrationState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DbMigrationState.fromValue(value);
  }
}

