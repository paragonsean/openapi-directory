/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ConnectionStateType;
import org.openapitools.client.model.GlobalState;
import org.openapitools.client.model.StreamState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType&#x3D;not_set, then none of the fields will be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionState {
  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private UUID connectionId;

  public static final String SERIALIZED_NAME_GLOBAL_STATE = "globalState";
  @SerializedName(SERIALIZED_NAME_GLOBAL_STATE)
  private GlobalState globalState;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state;

  public static final String SERIALIZED_NAME_STATE_TYPE = "stateType";
  @SerializedName(SERIALIZED_NAME_STATE_TYPE)
  private ConnectionStateType stateType;

  public static final String SERIALIZED_NAME_STREAM_STATE = "streamState";
  @SerializedName(SERIALIZED_NAME_STREAM_STATE)
  private List<StreamState> streamState = new ArrayList<>();

  public ConnectionState() {
  }

  public ConnectionState connectionId(UUID connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nonnull
  public UUID getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
  }


  public ConnectionState globalState(GlobalState globalState) {
    this.globalState = globalState;
    return this;
  }

  /**
   * Get globalState
   * @return globalState
   */
  @javax.annotation.Nullable
  public GlobalState getGlobalState() {
    return globalState;
  }

  public void setGlobalState(GlobalState globalState) {
    this.globalState = globalState;
  }


  public ConnectionState state(Object state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Object getState() {
    return state;
  }

  public void setState(Object state) {
    this.state = state;
  }


  public ConnectionState stateType(ConnectionStateType stateType) {
    this.stateType = stateType;
    return this;
  }

  /**
   * Get stateType
   * @return stateType
   */
  @javax.annotation.Nonnull
  public ConnectionStateType getStateType() {
    return stateType;
  }

  public void setStateType(ConnectionStateType stateType) {
    this.stateType = stateType;
  }


  public ConnectionState streamState(List<StreamState> streamState) {
    this.streamState = streamState;
    return this;
  }

  public ConnectionState addStreamStateItem(StreamState streamStateItem) {
    if (this.streamState == null) {
      this.streamState = new ArrayList<>();
    }
    this.streamState.add(streamStateItem);
    return this;
  }

  /**
   * Get streamState
   * @return streamState
   */
  @javax.annotation.Nullable
  public List<StreamState> getStreamState() {
    return streamState;
  }

  public void setStreamState(List<StreamState> streamState) {
    this.streamState = streamState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionState connectionState = (ConnectionState) o;
    return Objects.equals(this.connectionId, connectionState.connectionId) &&
        Objects.equals(this.globalState, connectionState.globalState) &&
        Objects.equals(this.state, connectionState.state) &&
        Objects.equals(this.stateType, connectionState.stateType) &&
        Objects.equals(this.streamState, connectionState.streamState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, globalState, state, stateType, streamState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionState {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    globalState: ").append(toIndentedString(globalState)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateType: ").append(toIndentedString(stateType)).append("\n");
    sb.append("    streamState: ").append(toIndentedString(streamState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionId");
    openapiFields.add("globalState");
    openapiFields.add("state");
    openapiFields.add("stateType");
    openapiFields.add("streamState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionId");
    openapiRequiredFields.add("stateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionState is not found in the empty JSON string", ConnectionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      // validate the optional field `globalState`
      if (jsonObj.get("globalState") != null && !jsonObj.get("globalState").isJsonNull()) {
        GlobalState.validateJsonElement(jsonObj.get("globalState"));
      }
      // validate the required field `stateType`
      ConnectionStateType.validateJsonElement(jsonObj.get("stateType"));
      if (jsonObj.get("streamState") != null && !jsonObj.get("streamState").isJsonNull()) {
        JsonArray jsonArraystreamState = jsonObj.getAsJsonArray("streamState");
        if (jsonArraystreamState != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamState").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamState` to be an array in the JSON string but got `%s`", jsonObj.get("streamState").toString()));
          }

          // validate the optional field `streamState` (array)
          for (int i = 0; i < jsonArraystreamState.size(); i++) {
            StreamState.validateJsonElement(jsonArraystreamState.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionState>() {
           @Override
           public void write(JsonWriter out, ConnectionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionState
   * @throws IOException if the JSON string is invalid with respect to ConnectionState
   */
  public static ConnectionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionState.class);
  }

  /**
   * Convert an instance of ConnectionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

