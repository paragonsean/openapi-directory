/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ActorDefinitionResourceRequirements;
import org.openapitools.client.model.NormalizationDestinationDefinitionConfig;
import org.openapitools.client.model.ReleaseStage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinationDefinitionRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationDefinitionRead {
  public static final String SERIALIZED_NAME_DESTINATION_DEFINITION_ID = "destinationDefinitionId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DEFINITION_ID)
  private UUID destinationDefinitionId;

  public static final String SERIALIZED_NAME_DOCKER_IMAGE_TAG = "dockerImageTag";
  @SerializedName(SERIALIZED_NAME_DOCKER_IMAGE_TAG)
  private String dockerImageTag;

  public static final String SERIALIZED_NAME_DOCKER_REPOSITORY = "dockerRepository";
  @SerializedName(SERIALIZED_NAME_DOCKER_REPOSITORY)
  private String dockerRepository;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "documentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private URI documentationUrl;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORMALIZATION_CONFIG = "normalizationConfig";
  @SerializedName(SERIALIZED_NAME_NORMALIZATION_CONFIG)
  private NormalizationDestinationDefinitionConfig normalizationConfig;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private LocalDate releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_STAGE = "releaseStage";
  @SerializedName(SERIALIZED_NAME_RELEASE_STAGE)
  private ReleaseStage releaseStage;

  public static final String SERIALIZED_NAME_RESOURCE_REQUIREMENTS = "resourceRequirements";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUIREMENTS)
  private ActorDefinitionResourceRequirements resourceRequirements;

  public static final String SERIALIZED_NAME_SUPPORTS_DBT = "supportsDbt";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_DBT)
  private Boolean supportsDbt;

  public DestinationDefinitionRead() {
  }

  public DestinationDefinitionRead destinationDefinitionId(UUID destinationDefinitionId) {
    this.destinationDefinitionId = destinationDefinitionId;
    return this;
  }

  /**
   * Get destinationDefinitionId
   * @return destinationDefinitionId
   */
  @javax.annotation.Nonnull
  public UUID getDestinationDefinitionId() {
    return destinationDefinitionId;
  }

  public void setDestinationDefinitionId(UUID destinationDefinitionId) {
    this.destinationDefinitionId = destinationDefinitionId;
  }


  public DestinationDefinitionRead dockerImageTag(String dockerImageTag) {
    this.dockerImageTag = dockerImageTag;
    return this;
  }

  /**
   * Get dockerImageTag
   * @return dockerImageTag
   */
  @javax.annotation.Nonnull
  public String getDockerImageTag() {
    return dockerImageTag;
  }

  public void setDockerImageTag(String dockerImageTag) {
    this.dockerImageTag = dockerImageTag;
  }


  public DestinationDefinitionRead dockerRepository(String dockerRepository) {
    this.dockerRepository = dockerRepository;
    return this;
  }

  /**
   * Get dockerRepository
   * @return dockerRepository
   */
  @javax.annotation.Nonnull
  public String getDockerRepository() {
    return dockerRepository;
  }

  public void setDockerRepository(String dockerRepository) {
    this.dockerRepository = dockerRepository;
  }


  public DestinationDefinitionRead documentationUrl(URI documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * Get documentationUrl
   * @return documentationUrl
   */
  @javax.annotation.Nonnull
  public URI getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(URI documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public DestinationDefinitionRead icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DestinationDefinitionRead name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DestinationDefinitionRead normalizationConfig(NormalizationDestinationDefinitionConfig normalizationConfig) {
    this.normalizationConfig = normalizationConfig;
    return this;
  }

  /**
   * Get normalizationConfig
   * @return normalizationConfig
   */
  @javax.annotation.Nonnull
  public NormalizationDestinationDefinitionConfig getNormalizationConfig() {
    return normalizationConfig;
  }

  public void setNormalizationConfig(NormalizationDestinationDefinitionConfig normalizationConfig) {
    this.normalizationConfig = normalizationConfig;
  }


  public DestinationDefinitionRead protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * The Airbyte Protocol version supported by the connector
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public DestinationDefinitionRead releaseDate(LocalDate releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * The date when this connector was first released, in yyyy-mm-dd format.
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public LocalDate getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(LocalDate releaseDate) {
    this.releaseDate = releaseDate;
  }


  public DestinationDefinitionRead releaseStage(ReleaseStage releaseStage) {
    this.releaseStage = releaseStage;
    return this;
  }

  /**
   * Get releaseStage
   * @return releaseStage
   */
  @javax.annotation.Nullable
  public ReleaseStage getReleaseStage() {
    return releaseStage;
  }

  public void setReleaseStage(ReleaseStage releaseStage) {
    this.releaseStage = releaseStage;
  }


  public DestinationDefinitionRead resourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * Get resourceRequirements
   * @return resourceRequirements
   */
  @javax.annotation.Nullable
  public ActorDefinitionResourceRequirements getResourceRequirements() {
    return resourceRequirements;
  }

  public void setResourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }


  public DestinationDefinitionRead supportsDbt(Boolean supportsDbt) {
    this.supportsDbt = supportsDbt;
    return this;
  }

  /**
   * an optional flag indicating whether DBT is used in the normalization. If the flag value is NULL - DBT is not used.
   * @return supportsDbt
   */
  @javax.annotation.Nonnull
  public Boolean getSupportsDbt() {
    return supportsDbt;
  }

  public void setSupportsDbt(Boolean supportsDbt) {
    this.supportsDbt = supportsDbt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDefinitionRead destinationDefinitionRead = (DestinationDefinitionRead) o;
    return Objects.equals(this.destinationDefinitionId, destinationDefinitionRead.destinationDefinitionId) &&
        Objects.equals(this.dockerImageTag, destinationDefinitionRead.dockerImageTag) &&
        Objects.equals(this.dockerRepository, destinationDefinitionRead.dockerRepository) &&
        Objects.equals(this.documentationUrl, destinationDefinitionRead.documentationUrl) &&
        Objects.equals(this.icon, destinationDefinitionRead.icon) &&
        Objects.equals(this.name, destinationDefinitionRead.name) &&
        Objects.equals(this.normalizationConfig, destinationDefinitionRead.normalizationConfig) &&
        Objects.equals(this.protocolVersion, destinationDefinitionRead.protocolVersion) &&
        Objects.equals(this.releaseDate, destinationDefinitionRead.releaseDate) &&
        Objects.equals(this.releaseStage, destinationDefinitionRead.releaseStage) &&
        Objects.equals(this.resourceRequirements, destinationDefinitionRead.resourceRequirements) &&
        Objects.equals(this.supportsDbt, destinationDefinitionRead.supportsDbt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationDefinitionId, dockerImageTag, dockerRepository, documentationUrl, icon, name, normalizationConfig, protocolVersion, releaseDate, releaseStage, resourceRequirements, supportsDbt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDefinitionRead {\n");
    sb.append("    destinationDefinitionId: ").append(toIndentedString(destinationDefinitionId)).append("\n");
    sb.append("    dockerImageTag: ").append(toIndentedString(dockerImageTag)).append("\n");
    sb.append("    dockerRepository: ").append(toIndentedString(dockerRepository)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normalizationConfig: ").append(toIndentedString(normalizationConfig)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseStage: ").append(toIndentedString(releaseStage)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("    supportsDbt: ").append(toIndentedString(supportsDbt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationDefinitionId");
    openapiFields.add("dockerImageTag");
    openapiFields.add("dockerRepository");
    openapiFields.add("documentationUrl");
    openapiFields.add("icon");
    openapiFields.add("name");
    openapiFields.add("normalizationConfig");
    openapiFields.add("protocolVersion");
    openapiFields.add("releaseDate");
    openapiFields.add("releaseStage");
    openapiFields.add("resourceRequirements");
    openapiFields.add("supportsDbt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationDefinitionId");
    openapiRequiredFields.add("dockerImageTag");
    openapiRequiredFields.add("dockerRepository");
    openapiRequiredFields.add("documentationUrl");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("normalizationConfig");
    openapiRequiredFields.add("supportsDbt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationDefinitionRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationDefinitionRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationDefinitionRead is not found in the empty JSON string", DestinationDefinitionRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationDefinitionRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationDefinitionRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationDefinitionRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destinationDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationDefinitionId").toString()));
      }
      if (!jsonObj.get("dockerImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerImageTag").toString()));
      }
      if (!jsonObj.get("dockerRepository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerRepository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerRepository").toString()));
      }
      if (!jsonObj.get("documentationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUrl").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `normalizationConfig`
      NormalizationDestinationDefinitionConfig.validateJsonElement(jsonObj.get("normalizationConfig"));
      if ((jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) && !jsonObj.get("protocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolVersion").toString()));
      }
      // validate the optional field `releaseStage`
      if (jsonObj.get("releaseStage") != null && !jsonObj.get("releaseStage").isJsonNull()) {
        ReleaseStage.validateJsonElement(jsonObj.get("releaseStage"));
      }
      // validate the optional field `resourceRequirements`
      if (jsonObj.get("resourceRequirements") != null && !jsonObj.get("resourceRequirements").isJsonNull()) {
        ActorDefinitionResourceRequirements.validateJsonElement(jsonObj.get("resourceRequirements"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationDefinitionRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationDefinitionRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationDefinitionRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationDefinitionRead.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationDefinitionRead>() {
           @Override
           public void write(JsonWriter out, DestinationDefinitionRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationDefinitionRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationDefinitionRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationDefinitionRead
   * @throws IOException if the JSON string is invalid with respect to DestinationDefinitionRead
   */
  public static DestinationDefinitionRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationDefinitionRead.class);
  }

  /**
   * Convert an instance of DestinationDefinitionRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

