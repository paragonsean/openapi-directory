/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldTransform;
import org.openapitools.client.model.StreamDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamTransform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamTransform {
  public static final String SERIALIZED_NAME_STREAM_DESCRIPTOR = "streamDescriptor";
  @SerializedName(SERIALIZED_NAME_STREAM_DESCRIPTOR)
  private StreamDescriptor streamDescriptor;

  /**
   * Gets or Sets transformType
   */
  @JsonAdapter(TransformTypeEnum.Adapter.class)
  public enum TransformTypeEnum {
    ADD_STREAM("add_stream"),
    
    REMOVE_STREAM("remove_stream"),
    
    UPDATE_STREAM("update_stream");

    private String value;

    TransformTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransformTypeEnum fromValue(String value) {
      for (TransformTypeEnum b : TransformTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransformTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransformTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransformTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransformTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransformTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFORM_TYPE = "transformType";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_TYPE)
  private TransformTypeEnum transformType;

  public static final String SERIALIZED_NAME_UPDATE_STREAM = "updateStream";
  @SerializedName(SERIALIZED_NAME_UPDATE_STREAM)
  private List<FieldTransform> updateStream = new ArrayList<>();

  public StreamTransform() {
  }

  public StreamTransform streamDescriptor(StreamDescriptor streamDescriptor) {
    this.streamDescriptor = streamDescriptor;
    return this;
  }

  /**
   * Get streamDescriptor
   * @return streamDescriptor
   */
  @javax.annotation.Nonnull
  public StreamDescriptor getStreamDescriptor() {
    return streamDescriptor;
  }

  public void setStreamDescriptor(StreamDescriptor streamDescriptor) {
    this.streamDescriptor = streamDescriptor;
  }


  public StreamTransform transformType(TransformTypeEnum transformType) {
    this.transformType = transformType;
    return this;
  }

  /**
   * Get transformType
   * @return transformType
   */
  @javax.annotation.Nonnull
  public TransformTypeEnum getTransformType() {
    return transformType;
  }

  public void setTransformType(TransformTypeEnum transformType) {
    this.transformType = transformType;
  }


  public StreamTransform updateStream(List<FieldTransform> updateStream) {
    this.updateStream = updateStream;
    return this;
  }

  public StreamTransform addUpdateStreamItem(FieldTransform updateStreamItem) {
    if (this.updateStream == null) {
      this.updateStream = new ArrayList<>();
    }
    this.updateStream.add(updateStreamItem);
    return this;
  }

  /**
   * list of field transformations. order does not matter.
   * @return updateStream
   */
  @javax.annotation.Nullable
  public List<FieldTransform> getUpdateStream() {
    return updateStream;
  }

  public void setUpdateStream(List<FieldTransform> updateStream) {
    this.updateStream = updateStream;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTransform streamTransform = (StreamTransform) o;
    return Objects.equals(this.streamDescriptor, streamTransform.streamDescriptor) &&
        Objects.equals(this.transformType, streamTransform.transformType) &&
        Objects.equals(this.updateStream, streamTransform.updateStream);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamDescriptor, transformType, updateStream);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTransform {\n");
    sb.append("    streamDescriptor: ").append(toIndentedString(streamDescriptor)).append("\n");
    sb.append("    transformType: ").append(toIndentedString(transformType)).append("\n");
    sb.append("    updateStream: ").append(toIndentedString(updateStream)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("streamDescriptor");
    openapiFields.add("transformType");
    openapiFields.add("updateStream");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("streamDescriptor");
    openapiRequiredFields.add("transformType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamTransform
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamTransform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamTransform is not found in the empty JSON string", StreamTransform.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamTransform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamTransform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamTransform.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `streamDescriptor`
      StreamDescriptor.validateJsonElement(jsonObj.get("streamDescriptor"));
      if (!jsonObj.get("transformType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transformType").toString()));
      }
      // validate the required field `transformType`
      TransformTypeEnum.validateJsonElement(jsonObj.get("transformType"));
      if (jsonObj.get("updateStream") != null && !jsonObj.get("updateStream").isJsonNull()) {
        JsonArray jsonArrayupdateStream = jsonObj.getAsJsonArray("updateStream");
        if (jsonArrayupdateStream != null) {
          // ensure the json data is an array
          if (!jsonObj.get("updateStream").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `updateStream` to be an array in the JSON string but got `%s`", jsonObj.get("updateStream").toString()));
          }

          // validate the optional field `updateStream` (array)
          for (int i = 0; i < jsonArrayupdateStream.size(); i++) {
            FieldTransform.validateJsonElement(jsonArrayupdateStream.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamTransform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamTransform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamTransform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamTransform.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamTransform>() {
           @Override
           public void write(JsonWriter out, StreamTransform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamTransform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamTransform given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamTransform
   * @throws IOException if the JSON string is invalid with respect to StreamTransform
   */
  public static StreamTransform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamTransform.class);
  }

  /**
   * Convert an instance of StreamTransform to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

