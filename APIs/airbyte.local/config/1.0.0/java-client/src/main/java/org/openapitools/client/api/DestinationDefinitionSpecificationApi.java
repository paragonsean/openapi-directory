/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DestinationDefinitionIdWithWorkspaceId;
import org.openapitools.client.model.DestinationDefinitionSpecificationRead;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.NotFoundKnownExceptionInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DestinationDefinitionSpecificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DestinationDefinitionSpecificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DestinationDefinitionSpecificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDestinationDefinitionSpecification
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionSpecificationCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationDefinitionIdWithWorkspaceId;

        // create path and map variables
        String localVarPath = "/v1/destination_definition_specifications/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationDefinitionSpecificationValidateBeforeCall(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
        if (destinationDefinitionIdWithWorkspaceId == null) {
            throw new ApiException("Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling getDestinationDefinitionSpecification(Async)");
        }

        return getDestinationDefinitionSpecificationCall(destinationDefinitionIdWithWorkspaceId, _callback);

    }

    /**
     * Get specification for a destinationDefinition
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return DestinationDefinitionSpecificationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public DestinationDefinitionSpecificationRead getDestinationDefinitionSpecification(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        ApiResponse<DestinationDefinitionSpecificationRead> localVarResp = getDestinationDefinitionSpecificationWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
        return localVarResp.getData();
    }

    /**
     * Get specification for a destinationDefinition
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @return ApiResponse&lt;DestinationDefinitionSpecificationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DestinationDefinitionSpecificationRead> getDestinationDefinitionSpecificationWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
        okhttp3.Call localVarCall = getDestinationDefinitionSpecificationValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, null);
        Type localVarReturnType = new TypeToken<DestinationDefinitionSpecificationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specification for a destinationDefinition (asynchronously)
     * 
     * @param destinationDefinitionIdWithWorkspaceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationDefinitionSpecificationAsync(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId, final ApiCallback<DestinationDefinitionSpecificationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationDefinitionSpecificationValidateBeforeCall(destinationDefinitionIdWithWorkspaceId, _callback);
        Type localVarReturnType = new TypeToken<DestinationDefinitionSpecificationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
