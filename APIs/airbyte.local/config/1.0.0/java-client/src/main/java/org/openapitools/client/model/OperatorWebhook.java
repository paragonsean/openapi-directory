/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.OperatorWebhookDbtCloud;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OperatorWebhook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperatorWebhook {
  public static final String SERIALIZED_NAME_DBT_CLOUD = "dbtCloud";
  @SerializedName(SERIALIZED_NAME_DBT_CLOUD)
  private OperatorWebhookDbtCloud dbtCloud;

  public static final String SERIALIZED_NAME_EXECUTION_BODY = "executionBody";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EXECUTION_BODY)
  private String executionBody;

  public static final String SERIALIZED_NAME_EXECUTION_URL = "executionUrl";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EXECUTION_URL)
  private String executionUrl;

  public static final String SERIALIZED_NAME_WEBHOOK_CONFIG_ID = "webhookConfigId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_CONFIG_ID)
  private UUID webhookConfigId;

  /**
   * Gets or Sets webhookType
   */
  @JsonAdapter(WebhookTypeEnum.Adapter.class)
  public enum WebhookTypeEnum {
    DBT_CLOUD("dbtCloud");

    private String value;

    WebhookTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebhookTypeEnum fromValue(String value) {
      for (WebhookTypeEnum b : WebhookTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebhookTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebhookTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebhookTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WebhookTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEBHOOK_TYPE = "webhookType";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_TYPE)
  private WebhookTypeEnum webhookType;

  public OperatorWebhook() {
  }

  public OperatorWebhook dbtCloud(OperatorWebhookDbtCloud dbtCloud) {
    this.dbtCloud = dbtCloud;
    return this;
  }

  /**
   * Get dbtCloud
   * @return dbtCloud
   */
  @javax.annotation.Nullable
  public OperatorWebhookDbtCloud getDbtCloud() {
    return dbtCloud;
  }

  public void setDbtCloud(OperatorWebhookDbtCloud dbtCloud) {
    this.dbtCloud = dbtCloud;
  }


  @Deprecated
  public OperatorWebhook executionBody(String executionBody) {
    this.executionBody = executionBody;
    return this;
  }

  /**
   * DEPRECATED. Populate dbtCloud instead.
   * @return executionBody
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getExecutionBody() {
    return executionBody;
  }

  @Deprecated
  public void setExecutionBody(String executionBody) {
    this.executionBody = executionBody;
  }


  @Deprecated
  public OperatorWebhook executionUrl(String executionUrl) {
    this.executionUrl = executionUrl;
    return this;
  }

  /**
   * DEPRECATED. Populate dbtCloud instead.
   * @return executionUrl
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getExecutionUrl() {
    return executionUrl;
  }

  @Deprecated
  public void setExecutionUrl(String executionUrl) {
    this.executionUrl = executionUrl;
  }


  public OperatorWebhook webhookConfigId(UUID webhookConfigId) {
    this.webhookConfigId = webhookConfigId;
    return this;
  }

  /**
   * The id of the webhook configs to use from the workspace.
   * @return webhookConfigId
   */
  @javax.annotation.Nullable
  public UUID getWebhookConfigId() {
    return webhookConfigId;
  }

  public void setWebhookConfigId(UUID webhookConfigId) {
    this.webhookConfigId = webhookConfigId;
  }


  public OperatorWebhook webhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
    return this;
  }

  /**
   * Get webhookType
   * @return webhookType
   */
  @javax.annotation.Nullable
  public WebhookTypeEnum getWebhookType() {
    return webhookType;
  }

  public void setWebhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorWebhook operatorWebhook = (OperatorWebhook) o;
    return Objects.equals(this.dbtCloud, operatorWebhook.dbtCloud) &&
        Objects.equals(this.executionBody, operatorWebhook.executionBody) &&
        Objects.equals(this.executionUrl, operatorWebhook.executionUrl) &&
        Objects.equals(this.webhookConfigId, operatorWebhook.webhookConfigId) &&
        Objects.equals(this.webhookType, operatorWebhook.webhookType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbtCloud, executionBody, executionUrl, webhookConfigId, webhookType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorWebhook {\n");
    sb.append("    dbtCloud: ").append(toIndentedString(dbtCloud)).append("\n");
    sb.append("    executionBody: ").append(toIndentedString(executionBody)).append("\n");
    sb.append("    executionUrl: ").append(toIndentedString(executionUrl)).append("\n");
    sb.append("    webhookConfigId: ").append(toIndentedString(webhookConfigId)).append("\n");
    sb.append("    webhookType: ").append(toIndentedString(webhookType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dbtCloud");
    openapiFields.add("executionBody");
    openapiFields.add("executionUrl");
    openapiFields.add("webhookConfigId");
    openapiFields.add("webhookType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperatorWebhook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperatorWebhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperatorWebhook is not found in the empty JSON string", OperatorWebhook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperatorWebhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperatorWebhook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dbtCloud`
      if (jsonObj.get("dbtCloud") != null && !jsonObj.get("dbtCloud").isJsonNull()) {
        OperatorWebhookDbtCloud.validateJsonElement(jsonObj.get("dbtCloud"));
      }
      if ((jsonObj.get("executionBody") != null && !jsonObj.get("executionBody").isJsonNull()) && !jsonObj.get("executionBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionBody").toString()));
      }
      if ((jsonObj.get("executionUrl") != null && !jsonObj.get("executionUrl").isJsonNull()) && !jsonObj.get("executionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionUrl").toString()));
      }
      if ((jsonObj.get("webhookConfigId") != null && !jsonObj.get("webhookConfigId").isJsonNull()) && !jsonObj.get("webhookConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookConfigId").toString()));
      }
      if ((jsonObj.get("webhookType") != null && !jsonObj.get("webhookType").isJsonNull()) && !jsonObj.get("webhookType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookType").toString()));
      }
      // validate the optional field `webhookType`
      if (jsonObj.get("webhookType") != null && !jsonObj.get("webhookType").isJsonNull()) {
        WebhookTypeEnum.validateJsonElement(jsonObj.get("webhookType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperatorWebhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperatorWebhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperatorWebhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperatorWebhook.class));

       return (TypeAdapter<T>) new TypeAdapter<OperatorWebhook>() {
           @Override
           public void write(JsonWriter out, OperatorWebhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperatorWebhook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperatorWebhook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperatorWebhook
   * @throws IOException if the JSON string is invalid with respect to OperatorWebhook
   */
  public static OperatorWebhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperatorWebhook.class);
  }

  /**
   * Convert an instance of OperatorWebhook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

