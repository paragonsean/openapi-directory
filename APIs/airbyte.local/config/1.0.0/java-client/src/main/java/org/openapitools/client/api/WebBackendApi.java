/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionIdRequestBody;
import org.openapitools.client.model.ConnectionStateType;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.NotFoundKnownExceptionInfo;
import org.openapitools.client.model.WebBackendCheckUpdatesRead;
import org.openapitools.client.model.WebBackendConnectionCreate;
import org.openapitools.client.model.WebBackendConnectionListRequestBody;
import org.openapitools.client.model.WebBackendConnectionRead;
import org.openapitools.client.model.WebBackendConnectionReadList;
import org.openapitools.client.model.WebBackendConnectionRequestBody;
import org.openapitools.client.model.WebBackendConnectionUpdate;
import org.openapitools.client.model.WebBackendGeographiesListResult;
import org.openapitools.client.model.WebBackendWorkspaceState;
import org.openapitools.client.model.WebBackendWorkspaceStateResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebBackendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebBackendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebBackendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStateType
     * @param connectionIdRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStateTypeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionIdRequestBody;

        // create path and map variables
        String localVarPath = "/v1/web_backend/state/get_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStateTypeValidateBeforeCall(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionIdRequestBody' is set
        if (connectionIdRequestBody == null) {
            throw new ApiException("Missing the required parameter 'connectionIdRequestBody' when calling getStateType(Async)");
        }

        return getStateTypeCall(connectionIdRequestBody, _callback);

    }

    /**
     * Fetch the current state type for a connection.
     * 
     * @param connectionIdRequestBody  (required)
     * @return ConnectionStateType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStateType getStateType(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        ApiResponse<ConnectionStateType> localVarResp = getStateTypeWithHttpInfo(connectionIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Fetch the current state type for a connection.
     * 
     * @param connectionIdRequestBody  (required)
     * @return ApiResponse&lt;ConnectionStateType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStateType> getStateTypeWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getStateTypeValidateBeforeCall(connectionIdRequestBody, null);
        Type localVarReturnType = new TypeToken<ConnectionStateType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the current state type for a connection. (asynchronously)
     * 
     * @param connectionIdRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStateTypeAsync(ConnectionIdRequestBody connectionIdRequestBody, final ApiCallback<ConnectionStateType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStateTypeValidateBeforeCall(connectionIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStateType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendCheckUpdates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendCheckUpdatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/web_backend/check_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendCheckUpdatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return webBackendCheckUpdatesCall(_callback);

    }

    /**
     * Returns a summary of source and destination definitions that could be updated.
     * 
     * @return WebBackendCheckUpdatesRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendCheckUpdatesRead webBackendCheckUpdates() throws ApiException {
        ApiResponse<WebBackendCheckUpdatesRead> localVarResp = webBackendCheckUpdatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a summary of source and destination definitions that could be updated.
     * 
     * @return ApiResponse&lt;WebBackendCheckUpdatesRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendCheckUpdatesRead> webBackendCheckUpdatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webBackendCheckUpdatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebBackendCheckUpdatesRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a summary of source and destination definitions that could be updated. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendCheckUpdatesAsync(final ApiCallback<WebBackendCheckUpdatesRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendCheckUpdatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebBackendCheckUpdatesRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendCreateConnection
     * @param webBackendConnectionCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendCreateConnectionCall(WebBackendConnectionCreate webBackendConnectionCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webBackendConnectionCreate;

        // create path and map variables
        String localVarPath = "/v1/web_backend/connections/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendCreateConnectionValidateBeforeCall(WebBackendConnectionCreate webBackendConnectionCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webBackendConnectionCreate' is set
        if (webBackendConnectionCreate == null) {
            throw new ApiException("Missing the required parameter 'webBackendConnectionCreate' when calling webBackendCreateConnection(Async)");
        }

        return webBackendCreateConnectionCall(webBackendConnectionCreate, _callback);

    }

    /**
     * Create a connection
     * 
     * @param webBackendConnectionCreate  (required)
     * @return WebBackendConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendConnectionRead webBackendCreateConnection(WebBackendConnectionCreate webBackendConnectionCreate) throws ApiException {
        ApiResponse<WebBackendConnectionRead> localVarResp = webBackendCreateConnectionWithHttpInfo(webBackendConnectionCreate);
        return localVarResp.getData();
    }

    /**
     * Create a connection
     * 
     * @param webBackendConnectionCreate  (required)
     * @return ApiResponse&lt;WebBackendConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendConnectionRead> webBackendCreateConnectionWithHttpInfo(WebBackendConnectionCreate webBackendConnectionCreate) throws ApiException {
        okhttp3.Call localVarCall = webBackendCreateConnectionValidateBeforeCall(webBackendConnectionCreate, null);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a connection (asynchronously)
     * 
     * @param webBackendConnectionCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendCreateConnectionAsync(WebBackendConnectionCreate webBackendConnectionCreate, final ApiCallback<WebBackendConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendCreateConnectionValidateBeforeCall(webBackendConnectionCreate, _callback);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendGetConnection
     * @param webBackendConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendGetConnectionCall(WebBackendConnectionRequestBody webBackendConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webBackendConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/v1/web_backend/connections/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendGetConnectionValidateBeforeCall(WebBackendConnectionRequestBody webBackendConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webBackendConnectionRequestBody' is set
        if (webBackendConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'webBackendConnectionRequestBody' when calling webBackendGetConnection(Async)");
        }

        return webBackendGetConnectionCall(webBackendConnectionRequestBody, _callback);

    }

    /**
     * Get a connection
     * 
     * @param webBackendConnectionRequestBody  (required)
     * @return WebBackendConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendConnectionRead webBackendGetConnection(WebBackendConnectionRequestBody webBackendConnectionRequestBody) throws ApiException {
        ApiResponse<WebBackendConnectionRead> localVarResp = webBackendGetConnectionWithHttpInfo(webBackendConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get a connection
     * 
     * @param webBackendConnectionRequestBody  (required)
     * @return ApiResponse&lt;WebBackendConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendConnectionRead> webBackendGetConnectionWithHttpInfo(WebBackendConnectionRequestBody webBackendConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = webBackendGetConnectionValidateBeforeCall(webBackendConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a connection (asynchronously)
     * 
     * @param webBackendConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendGetConnectionAsync(WebBackendConnectionRequestBody webBackendConnectionRequestBody, final ApiCallback<WebBackendConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendGetConnectionValidateBeforeCall(webBackendConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendGetWorkspaceState
     * @param webBackendWorkspaceState  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendGetWorkspaceStateCall(WebBackendWorkspaceState webBackendWorkspaceState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webBackendWorkspaceState;

        // create path and map variables
        String localVarPath = "/v1/web_backend/workspace/state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendGetWorkspaceStateValidateBeforeCall(WebBackendWorkspaceState webBackendWorkspaceState, final ApiCallback _callback) throws ApiException {
        return webBackendGetWorkspaceStateCall(webBackendWorkspaceState, _callback);

    }

    /**
     * Returns the current state of a workspace
     * 
     * @param webBackendWorkspaceState  (optional)
     * @return WebBackendWorkspaceStateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendWorkspaceStateResult webBackendGetWorkspaceState(WebBackendWorkspaceState webBackendWorkspaceState) throws ApiException {
        ApiResponse<WebBackendWorkspaceStateResult> localVarResp = webBackendGetWorkspaceStateWithHttpInfo(webBackendWorkspaceState);
        return localVarResp.getData();
    }

    /**
     * Returns the current state of a workspace
     * 
     * @param webBackendWorkspaceState  (optional)
     * @return ApiResponse&lt;WebBackendWorkspaceStateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendWorkspaceStateResult> webBackendGetWorkspaceStateWithHttpInfo(WebBackendWorkspaceState webBackendWorkspaceState) throws ApiException {
        okhttp3.Call localVarCall = webBackendGetWorkspaceStateValidateBeforeCall(webBackendWorkspaceState, null);
        Type localVarReturnType = new TypeToken<WebBackendWorkspaceStateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current state of a workspace (asynchronously)
     * 
     * @param webBackendWorkspaceState  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendGetWorkspaceStateAsync(WebBackendWorkspaceState webBackendWorkspaceState, final ApiCallback<WebBackendWorkspaceStateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendGetWorkspaceStateValidateBeforeCall(webBackendWorkspaceState, _callback);
        Type localVarReturnType = new TypeToken<WebBackendWorkspaceStateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendListConnectionsForWorkspace
     * @param webBackendConnectionListRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendListConnectionsForWorkspaceCall(WebBackendConnectionListRequestBody webBackendConnectionListRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webBackendConnectionListRequestBody;

        // create path and map variables
        String localVarPath = "/v1/web_backend/connections/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendListConnectionsForWorkspaceValidateBeforeCall(WebBackendConnectionListRequestBody webBackendConnectionListRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webBackendConnectionListRequestBody' is set
        if (webBackendConnectionListRequestBody == null) {
            throw new ApiException("Missing the required parameter 'webBackendConnectionListRequestBody' when calling webBackendListConnectionsForWorkspace(Async)");
        }

        return webBackendListConnectionsForWorkspaceCall(webBackendConnectionListRequestBody, _callback);

    }

    /**
     * Returns all non-deleted connections for a workspace.
     * 
     * @param webBackendConnectionListRequestBody  (required)
     * @return WebBackendConnectionReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendConnectionReadList webBackendListConnectionsForWorkspace(WebBackendConnectionListRequestBody webBackendConnectionListRequestBody) throws ApiException {
        ApiResponse<WebBackendConnectionReadList> localVarResp = webBackendListConnectionsForWorkspaceWithHttpInfo(webBackendConnectionListRequestBody);
        return localVarResp.getData();
    }

    /**
     * Returns all non-deleted connections for a workspace.
     * 
     * @param webBackendConnectionListRequestBody  (required)
     * @return ApiResponse&lt;WebBackendConnectionReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendConnectionReadList> webBackendListConnectionsForWorkspaceWithHttpInfo(WebBackendConnectionListRequestBody webBackendConnectionListRequestBody) throws ApiException {
        okhttp3.Call localVarCall = webBackendListConnectionsForWorkspaceValidateBeforeCall(webBackendConnectionListRequestBody, null);
        Type localVarReturnType = new TypeToken<WebBackendConnectionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all non-deleted connections for a workspace. (asynchronously)
     * 
     * @param webBackendConnectionListRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object with given id was not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendListConnectionsForWorkspaceAsync(WebBackendConnectionListRequestBody webBackendConnectionListRequestBody, final ApiCallback<WebBackendConnectionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendListConnectionsForWorkspaceValidateBeforeCall(webBackendConnectionListRequestBody, _callback);
        Type localVarReturnType = new TypeToken<WebBackendConnectionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendListGeographies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendListGeographiesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/web_backend/geographies/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendListGeographiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return webBackendListGeographiesCall(_callback);

    }

    /**
     * Returns available geographies can be selected to run data syncs in a particular geography. The &#39;auto&#39; entry indicates that the sync will be automatically assigned to a geography according to the platform default behavior. Entries other than &#39;auto&#39; are two-letter country codes that follow the ISO 3166-1 alpha-2 standard. 
     * Returns all available geographies in which a data sync can run.
     * @return WebBackendGeographiesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendGeographiesListResult webBackendListGeographies() throws ApiException {
        ApiResponse<WebBackendGeographiesListResult> localVarResp = webBackendListGeographiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns available geographies can be selected to run data syncs in a particular geography. The &#39;auto&#39; entry indicates that the sync will be automatically assigned to a geography according to the platform default behavior. Entries other than &#39;auto&#39; are two-letter country codes that follow the ISO 3166-1 alpha-2 standard. 
     * Returns all available geographies in which a data sync can run.
     * @return ApiResponse&lt;WebBackendGeographiesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendGeographiesListResult> webBackendListGeographiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webBackendListGeographiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebBackendGeographiesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns available geographies can be selected to run data syncs in a particular geography. The &#39;auto&#39; entry indicates that the sync will be automatically assigned to a geography according to the platform default behavior. Entries other than &#39;auto&#39; are two-letter country codes that follow the ISO 3166-1 alpha-2 standard.  (asynchronously)
     * Returns all available geographies in which a data sync can run.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendListGeographiesAsync(final ApiCallback<WebBackendGeographiesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendListGeographiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebBackendGeographiesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webBackendUpdateConnection
     * @param webBackendConnectionUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendUpdateConnectionCall(WebBackendConnectionUpdate webBackendConnectionUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webBackendConnectionUpdate;

        // create path and map variables
        String localVarPath = "/v1/web_backend/connections/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webBackendUpdateConnectionValidateBeforeCall(WebBackendConnectionUpdate webBackendConnectionUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webBackendConnectionUpdate' is set
        if (webBackendConnectionUpdate == null) {
            throw new ApiException("Missing the required parameter 'webBackendConnectionUpdate' when calling webBackendUpdateConnection(Async)");
        }

        return webBackendUpdateConnectionCall(webBackendConnectionUpdate, _callback);

    }

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Any operations that lack an ID will be created. Then, the newly created operationId will be applied to the connection along with the rest of the operationIds in the request body. Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param webBackendConnectionUpdate  (required)
     * @return WebBackendConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public WebBackendConnectionRead webBackendUpdateConnection(WebBackendConnectionUpdate webBackendConnectionUpdate) throws ApiException {
        ApiResponse<WebBackendConnectionRead> localVarResp = webBackendUpdateConnectionWithHttpInfo(webBackendConnectionUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a connection
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Any operations that lack an ID will be created. Then, the newly created operationId will be applied to the connection along with the rest of the operationIds in the request body. Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param webBackendConnectionUpdate  (required)
     * @return ApiResponse&lt;WebBackendConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebBackendConnectionRead> webBackendUpdateConnectionWithHttpInfo(WebBackendConnectionUpdate webBackendConnectionUpdate) throws ApiException {
        okhttp3.Call localVarCall = webBackendUpdateConnectionValidateBeforeCall(webBackendConnectionUpdate, null);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a connection (asynchronously)
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Any operations that lack an ID will be created. Then, the newly created operationId will be applied to the connection along with the rest of the operationIds in the request body. Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     * @param webBackendConnectionUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webBackendUpdateConnectionAsync(WebBackendConnectionUpdate webBackendConnectionUpdate, final ApiCallback<WebBackendConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = webBackendUpdateConnectionValidateBeforeCall(webBackendConnectionUpdate, _callback);
        Type localVarReturnType = new TypeToken<WebBackendConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
