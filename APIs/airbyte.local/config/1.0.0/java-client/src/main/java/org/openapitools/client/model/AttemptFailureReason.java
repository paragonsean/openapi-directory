/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttemptFailureOrigin;
import org.openapitools.client.model.AttemptFailureType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttemptFailureReason
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttemptFailureReason {
  public static final String SERIALIZED_NAME_EXTERNAL_MESSAGE = "externalMessage";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MESSAGE)
  private String externalMessage;

  public static final String SERIALIZED_NAME_FAILURE_ORIGIN = "failureOrigin";
  @SerializedName(SERIALIZED_NAME_FAILURE_ORIGIN)
  private AttemptFailureOrigin failureOrigin;

  public static final String SERIALIZED_NAME_FAILURE_TYPE = "failureType";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  private AttemptFailureType failureType;

  public static final String SERIALIZED_NAME_INTERNAL_MESSAGE = "internalMessage";
  @SerializedName(SERIALIZED_NAME_INTERNAL_MESSAGE)
  private String internalMessage;

  public static final String SERIALIZED_NAME_RETRYABLE = "retryable";
  @SerializedName(SERIALIZED_NAME_RETRYABLE)
  private Boolean retryable;

  public static final String SERIALIZED_NAME_STACKTRACE = "stacktrace";
  @SerializedName(SERIALIZED_NAME_STACKTRACE)
  private String stacktrace;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public AttemptFailureReason() {
  }

  public AttemptFailureReason externalMessage(String externalMessage) {
    this.externalMessage = externalMessage;
    return this;
  }

  /**
   * Get externalMessage
   * @return externalMessage
   */
  @javax.annotation.Nullable
  public String getExternalMessage() {
    return externalMessage;
  }

  public void setExternalMessage(String externalMessage) {
    this.externalMessage = externalMessage;
  }


  public AttemptFailureReason failureOrigin(AttemptFailureOrigin failureOrigin) {
    this.failureOrigin = failureOrigin;
    return this;
  }

  /**
   * Get failureOrigin
   * @return failureOrigin
   */
  @javax.annotation.Nullable
  public AttemptFailureOrigin getFailureOrigin() {
    return failureOrigin;
  }

  public void setFailureOrigin(AttemptFailureOrigin failureOrigin) {
    this.failureOrigin = failureOrigin;
  }


  public AttemptFailureReason failureType(AttemptFailureType failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @javax.annotation.Nullable
  public AttemptFailureType getFailureType() {
    return failureType;
  }

  public void setFailureType(AttemptFailureType failureType) {
    this.failureType = failureType;
  }


  public AttemptFailureReason internalMessage(String internalMessage) {
    this.internalMessage = internalMessage;
    return this;
  }

  /**
   * Get internalMessage
   * @return internalMessage
   */
  @javax.annotation.Nullable
  public String getInternalMessage() {
    return internalMessage;
  }

  public void setInternalMessage(String internalMessage) {
    this.internalMessage = internalMessage;
  }


  public AttemptFailureReason retryable(Boolean retryable) {
    this.retryable = retryable;
    return this;
  }

  /**
   * True if it is known that retrying may succeed, e.g. for a transient failure. False if it is known that a retry will not succeed, e.g. for a configuration issue. If not set, retryable status is not well known.
   * @return retryable
   */
  @javax.annotation.Nullable
  public Boolean getRetryable() {
    return retryable;
  }

  public void setRetryable(Boolean retryable) {
    this.retryable = retryable;
  }


  public AttemptFailureReason stacktrace(String stacktrace) {
    this.stacktrace = stacktrace;
    return this;
  }

  /**
   * Get stacktrace
   * @return stacktrace
   */
  @javax.annotation.Nullable
  public String getStacktrace() {
    return stacktrace;
  }

  public void setStacktrace(String stacktrace) {
    this.stacktrace = stacktrace;
  }


  public AttemptFailureReason timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttemptFailureReason attemptFailureReason = (AttemptFailureReason) o;
    return Objects.equals(this.externalMessage, attemptFailureReason.externalMessage) &&
        Objects.equals(this.failureOrigin, attemptFailureReason.failureOrigin) &&
        Objects.equals(this.failureType, attemptFailureReason.failureType) &&
        Objects.equals(this.internalMessage, attemptFailureReason.internalMessage) &&
        Objects.equals(this.retryable, attemptFailureReason.retryable) &&
        Objects.equals(this.stacktrace, attemptFailureReason.stacktrace) &&
        Objects.equals(this.timestamp, attemptFailureReason.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalMessage, failureOrigin, failureType, internalMessage, retryable, stacktrace, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttemptFailureReason {\n");
    sb.append("    externalMessage: ").append(toIndentedString(externalMessage)).append("\n");
    sb.append("    failureOrigin: ").append(toIndentedString(failureOrigin)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    internalMessage: ").append(toIndentedString(internalMessage)).append("\n");
    sb.append("    retryable: ").append(toIndentedString(retryable)).append("\n");
    sb.append("    stacktrace: ").append(toIndentedString(stacktrace)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalMessage");
    openapiFields.add("failureOrigin");
    openapiFields.add("failureType");
    openapiFields.add("internalMessage");
    openapiFields.add("retryable");
    openapiFields.add("stacktrace");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttemptFailureReason
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttemptFailureReason.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttemptFailureReason is not found in the empty JSON string", AttemptFailureReason.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttemptFailureReason.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttemptFailureReason` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttemptFailureReason.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalMessage") != null && !jsonObj.get("externalMessage").isJsonNull()) && !jsonObj.get("externalMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalMessage").toString()));
      }
      // validate the optional field `failureOrigin`
      if (jsonObj.get("failureOrigin") != null && !jsonObj.get("failureOrigin").isJsonNull()) {
        AttemptFailureOrigin.validateJsonElement(jsonObj.get("failureOrigin"));
      }
      // validate the optional field `failureType`
      if (jsonObj.get("failureType") != null && !jsonObj.get("failureType").isJsonNull()) {
        AttemptFailureType.validateJsonElement(jsonObj.get("failureType"));
      }
      if ((jsonObj.get("internalMessage") != null && !jsonObj.get("internalMessage").isJsonNull()) && !jsonObj.get("internalMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalMessage").toString()));
      }
      if ((jsonObj.get("stacktrace") != null && !jsonObj.get("stacktrace").isJsonNull()) && !jsonObj.get("stacktrace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stacktrace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stacktrace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttemptFailureReason.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttemptFailureReason' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttemptFailureReason> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttemptFailureReason.class));

       return (TypeAdapter<T>) new TypeAdapter<AttemptFailureReason>() {
           @Override
           public void write(JsonWriter out, AttemptFailureReason value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttemptFailureReason read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttemptFailureReason given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttemptFailureReason
   * @throws IOException if the JSON string is invalid with respect to AttemptFailureReason
   */
  public static AttemptFailureReason fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttemptFailureReason.class);
  }

  /**
   * Convert an instance of AttemptFailureReason to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

