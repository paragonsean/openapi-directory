/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SyncMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the immutable schema defined by the source
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirbyteStream {
  public static final String SERIALIZED_NAME_DEFAULT_CURSOR_FIELD = "defaultCursorField";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURSOR_FIELD)
  private List<String> defaultCursorField = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON_SCHEMA = "jsonSchema";
  @SerializedName(SERIALIZED_NAME_JSON_SCHEMA)
  private Object jsonSchema;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SOURCE_DEFINED_CURSOR = "sourceDefinedCursor";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEFINED_CURSOR)
  private Boolean sourceDefinedCursor;

  public static final String SERIALIZED_NAME_SOURCE_DEFINED_PRIMARY_KEY = "sourceDefinedPrimaryKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEFINED_PRIMARY_KEY)
  private List<List<String>> sourceDefinedPrimaryKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_SYNC_MODES = "supportedSyncModes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_SYNC_MODES)
  private List<SyncMode> supportedSyncModes = new ArrayList<>();

  public AirbyteStream() {
  }

  public AirbyteStream defaultCursorField(List<String> defaultCursorField) {
    this.defaultCursorField = defaultCursorField;
    return this;
  }

  public AirbyteStream addDefaultCursorFieldItem(String defaultCursorFieldItem) {
    if (this.defaultCursorField == null) {
      this.defaultCursorField = new ArrayList<>();
    }
    this.defaultCursorField.add(defaultCursorFieldItem);
    return this;
  }

  /**
   * Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
   * @return defaultCursorField
   */
  @javax.annotation.Nullable
  public List<String> getDefaultCursorField() {
    return defaultCursorField;
  }

  public void setDefaultCursorField(List<String> defaultCursorField) {
    this.defaultCursorField = defaultCursorField;
  }


  public AirbyteStream jsonSchema(Object jsonSchema) {
    this.jsonSchema = jsonSchema;
    return this;
  }

  /**
   * Stream schema using Json Schema specs.
   * @return jsonSchema
   */
  @javax.annotation.Nullable
  public Object getJsonSchema() {
    return jsonSchema;
  }

  public void setJsonSchema(Object jsonSchema) {
    this.jsonSchema = jsonSchema;
  }


  public AirbyteStream name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Stream&#39;s name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AirbyteStream namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public AirbyteStream sourceDefinedCursor(Boolean sourceDefinedCursor) {
    this.sourceDefinedCursor = sourceDefinedCursor;
    return this;
  }

  /**
   * If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
   * @return sourceDefinedCursor
   */
  @javax.annotation.Nullable
  public Boolean getSourceDefinedCursor() {
    return sourceDefinedCursor;
  }

  public void setSourceDefinedCursor(Boolean sourceDefinedCursor) {
    this.sourceDefinedCursor = sourceDefinedCursor;
  }


  public AirbyteStream sourceDefinedPrimaryKey(List<List<String>> sourceDefinedPrimaryKey) {
    this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
    return this;
  }

  public AirbyteStream addSourceDefinedPrimaryKeyItem(List<String> sourceDefinedPrimaryKeyItem) {
    if (this.sourceDefinedPrimaryKey == null) {
      this.sourceDefinedPrimaryKey = new ArrayList<>();
    }
    this.sourceDefinedPrimaryKey.add(sourceDefinedPrimaryKeyItem);
    return this;
  }

  /**
   * If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
   * @return sourceDefinedPrimaryKey
   */
  @javax.annotation.Nullable
  public List<List<String>> getSourceDefinedPrimaryKey() {
    return sourceDefinedPrimaryKey;
  }

  public void setSourceDefinedPrimaryKey(List<List<String>> sourceDefinedPrimaryKey) {
    this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
  }


  public AirbyteStream supportedSyncModes(List<SyncMode> supportedSyncModes) {
    this.supportedSyncModes = supportedSyncModes;
    return this;
  }

  public AirbyteStream addSupportedSyncModesItem(SyncMode supportedSyncModesItem) {
    if (this.supportedSyncModes == null) {
      this.supportedSyncModes = new ArrayList<>();
    }
    this.supportedSyncModes.add(supportedSyncModesItem);
    return this;
  }

  /**
   * Get supportedSyncModes
   * @return supportedSyncModes
   */
  @javax.annotation.Nullable
  public List<SyncMode> getSupportedSyncModes() {
    return supportedSyncModes;
  }

  public void setSupportedSyncModes(List<SyncMode> supportedSyncModes) {
    this.supportedSyncModes = supportedSyncModes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirbyteStream airbyteStream = (AirbyteStream) o;
    return Objects.equals(this.defaultCursorField, airbyteStream.defaultCursorField) &&
        Objects.equals(this.jsonSchema, airbyteStream.jsonSchema) &&
        Objects.equals(this.name, airbyteStream.name) &&
        Objects.equals(this.namespace, airbyteStream.namespace) &&
        Objects.equals(this.sourceDefinedCursor, airbyteStream.sourceDefinedCursor) &&
        Objects.equals(this.sourceDefinedPrimaryKey, airbyteStream.sourceDefinedPrimaryKey) &&
        Objects.equals(this.supportedSyncModes, airbyteStream.supportedSyncModes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultCursorField, jsonSchema, name, namespace, sourceDefinedCursor, sourceDefinedPrimaryKey, supportedSyncModes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirbyteStream {\n");
    sb.append("    defaultCursorField: ").append(toIndentedString(defaultCursorField)).append("\n");
    sb.append("    jsonSchema: ").append(toIndentedString(jsonSchema)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    sourceDefinedCursor: ").append(toIndentedString(sourceDefinedCursor)).append("\n");
    sb.append("    sourceDefinedPrimaryKey: ").append(toIndentedString(sourceDefinedPrimaryKey)).append("\n");
    sb.append("    supportedSyncModes: ").append(toIndentedString(supportedSyncModes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultCursorField");
    openapiFields.add("jsonSchema");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("sourceDefinedCursor");
    openapiFields.add("sourceDefinedPrimaryKey");
    openapiFields.add("supportedSyncModes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirbyteStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirbyteStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirbyteStream is not found in the empty JSON string", AirbyteStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirbyteStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirbyteStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AirbyteStream.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultCursorField") != null && !jsonObj.get("defaultCursorField").isJsonNull() && !jsonObj.get("defaultCursorField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCursorField` to be an array in the JSON string but got `%s`", jsonObj.get("defaultCursorField").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceDefinedPrimaryKey") != null && !jsonObj.get("sourceDefinedPrimaryKey").isJsonNull() && !jsonObj.get("sourceDefinedPrimaryKey").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDefinedPrimaryKey` to be an array in the JSON string but got `%s`", jsonObj.get("sourceDefinedPrimaryKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedSyncModes") != null && !jsonObj.get("supportedSyncModes").isJsonNull() && !jsonObj.get("supportedSyncModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedSyncModes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedSyncModes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirbyteStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirbyteStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirbyteStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirbyteStream.class));

       return (TypeAdapter<T>) new TypeAdapter<AirbyteStream>() {
           @Override
           public void write(JsonWriter out, AirbyteStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirbyteStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirbyteStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirbyteStream
   * @throws IOException if the JSON string is invalid with respect to AirbyteStream
   */
  public static AirbyteStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirbyteStream.class);
  }

  /**
   * Convert an instance of AirbyteStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

