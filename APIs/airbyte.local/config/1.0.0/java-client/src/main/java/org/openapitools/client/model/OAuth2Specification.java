/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing any metadata needed to describe this connector&#39;s Oauth flow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuth2Specification {
  public static final String SERIALIZED_NAME_OAUTH_FLOW_INIT_PARAMETERS = "oauthFlowInitParameters";
  @SerializedName(SERIALIZED_NAME_OAUTH_FLOW_INIT_PARAMETERS)
  private List<List<String>> oauthFlowInitParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_OAUTH_FLOW_OUTPUT_PARAMETERS = "oauthFlowOutputParameters";
  @SerializedName(SERIALIZED_NAME_OAUTH_FLOW_OUTPUT_PARAMETERS)
  private List<List<String>> oauthFlowOutputParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOT_OBJECT = "rootObject";
  @SerializedName(SERIALIZED_NAME_ROOT_OBJECT)
  private List<Object> rootObject = new ArrayList<>();

  public OAuth2Specification() {
  }

  public OAuth2Specification oauthFlowInitParameters(List<List<String>> oauthFlowInitParameters) {
    this.oauthFlowInitParameters = oauthFlowInitParameters;
    return this;
  }

  public OAuth2Specification addOauthFlowInitParametersItem(List<String> oauthFlowInitParametersItem) {
    if (this.oauthFlowInitParameters == null) {
      this.oauthFlowInitParameters = new ArrayList<>();
    }
    this.oauthFlowInitParameters.add(oauthFlowInitParametersItem);
    return this;
  }

  /**
   * Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params &#39;app_secret&#39;, &#39;app_id&#39; which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [[&#39;app_secret&#39;], [&#39;app_id&#39;]] If they are nested inside an object called &#39;auth_params&#39; then this array would be [[&#39;auth_params&#39;, &#39;app_secret&#39;], [&#39;auth_params&#39;, &#39;app_id&#39;]]
   * @return oauthFlowInitParameters
   */
  @javax.annotation.Nonnull
  public List<List<String>> getOauthFlowInitParameters() {
    return oauthFlowInitParameters;
  }

  public void setOauthFlowInitParameters(List<List<String>> oauthFlowInitParameters) {
    this.oauthFlowInitParameters = oauthFlowInitParameters;
  }


  public OAuth2Specification oauthFlowOutputParameters(List<List<String>> oauthFlowOutputParameters) {
    this.oauthFlowOutputParameters = oauthFlowOutputParameters;
    return this;
  }

  public OAuth2Specification addOauthFlowOutputParametersItem(List<String> oauthFlowOutputParametersItem) {
    if (this.oauthFlowOutputParameters == null) {
      this.oauthFlowOutputParameters = new ArrayList<>();
    }
    this.oauthFlowOutputParameters.add(oauthFlowOutputParametersItem);
    return this;
  }

  /**
   * Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.
   * @return oauthFlowOutputParameters
   */
  @javax.annotation.Nonnull
  public List<List<String>> getOauthFlowOutputParameters() {
    return oauthFlowOutputParameters;
  }

  public void setOauthFlowOutputParameters(List<List<String>> oauthFlowOutputParameters) {
    this.oauthFlowOutputParameters = oauthFlowOutputParameters;
  }


  public OAuth2Specification rootObject(List<Object> rootObject) {
    this.rootObject = rootObject;
    return this;
  }

  public OAuth2Specification addRootObjectItem(Object rootObjectItem) {
    if (this.rootObject == null) {
      this.rootObject = new ArrayList<>();
    }
    this.rootObject.add(rootObjectItem);
    return this;
  }

  /**
   * A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification. Examples: if oauth parameters were contained inside the top level, rootObject&#x3D;[] If they were nested inside another object {&#39;credentials&#39;: {&#39;app_id&#39; etc...}, rootObject&#x3D;[&#39;credentials&#39;] If they were inside a oneOf {&#39;switch&#39;: {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject&#x3D;[&#39;switch&#39;, 0] 
   * @return rootObject
   */
  @javax.annotation.Nonnull
  public List<Object> getRootObject() {
    return rootObject;
  }

  public void setRootObject(List<Object> rootObject) {
    this.rootObject = rootObject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Specification oauth2Specification = (OAuth2Specification) o;
    return Objects.equals(this.oauthFlowInitParameters, oauth2Specification.oauthFlowInitParameters) &&
        Objects.equals(this.oauthFlowOutputParameters, oauth2Specification.oauthFlowOutputParameters) &&
        Objects.equals(this.rootObject, oauth2Specification.rootObject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oauthFlowInitParameters, oauthFlowOutputParameters, rootObject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Specification {\n");
    sb.append("    oauthFlowInitParameters: ").append(toIndentedString(oauthFlowInitParameters)).append("\n");
    sb.append("    oauthFlowOutputParameters: ").append(toIndentedString(oauthFlowOutputParameters)).append("\n");
    sb.append("    rootObject: ").append(toIndentedString(rootObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oauthFlowInitParameters");
    openapiFields.add("oauthFlowOutputParameters");
    openapiFields.add("rootObject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("oauthFlowInitParameters");
    openapiRequiredFields.add("oauthFlowOutputParameters");
    openapiRequiredFields.add("rootObject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2Specification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2Specification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2Specification is not found in the empty JSON string", OAuth2Specification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2Specification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2Specification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OAuth2Specification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("oauthFlowInitParameters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("oauthFlowInitParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthFlowInitParameters` to be an array in the JSON string but got `%s`", jsonObj.get("oauthFlowInitParameters").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("oauthFlowOutputParameters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("oauthFlowOutputParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthFlowOutputParameters` to be an array in the JSON string but got `%s`", jsonObj.get("oauthFlowOutputParameters").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rootObject") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rootObject").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootObject` to be an array in the JSON string but got `%s`", jsonObj.get("rootObject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2Specification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2Specification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2Specification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Specification.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2Specification>() {
           @Override
           public void write(JsonWriter out, OAuth2Specification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2Specification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2Specification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2Specification
   * @throws IOException if the JSON string is invalid with respect to OAuth2Specification
   */
  public static OAuth2Specification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2Specification.class);
  }

  /**
   * Convert an instance of OAuth2Specification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

