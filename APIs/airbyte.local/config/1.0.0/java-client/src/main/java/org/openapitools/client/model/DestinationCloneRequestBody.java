/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.DestinationCloneConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The values required to configure the destination. The schema for this should have an id of the existing destination along with the configuration you want to change in case.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationCloneRequestBody {
  public static final String SERIALIZED_NAME_DESTINATION_CLONE_ID = "destinationCloneId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CLONE_ID)
  private UUID destinationCloneId;

  public static final String SERIALIZED_NAME_DESTINATION_CONFIGURATION = "destinationConfiguration";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIGURATION)
  private DestinationCloneConfiguration destinationConfiguration;

  public DestinationCloneRequestBody() {
  }

  public DestinationCloneRequestBody destinationCloneId(UUID destinationCloneId) {
    this.destinationCloneId = destinationCloneId;
    return this;
  }

  /**
   * Get destinationCloneId
   * @return destinationCloneId
   */
  @javax.annotation.Nonnull
  public UUID getDestinationCloneId() {
    return destinationCloneId;
  }

  public void setDestinationCloneId(UUID destinationCloneId) {
    this.destinationCloneId = destinationCloneId;
  }


  public DestinationCloneRequestBody destinationConfiguration(DestinationCloneConfiguration destinationConfiguration) {
    this.destinationConfiguration = destinationConfiguration;
    return this;
  }

  /**
   * Get destinationConfiguration
   * @return destinationConfiguration
   */
  @javax.annotation.Nullable
  public DestinationCloneConfiguration getDestinationConfiguration() {
    return destinationConfiguration;
  }

  public void setDestinationConfiguration(DestinationCloneConfiguration destinationConfiguration) {
    this.destinationConfiguration = destinationConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationCloneRequestBody destinationCloneRequestBody = (DestinationCloneRequestBody) o;
    return Objects.equals(this.destinationCloneId, destinationCloneRequestBody.destinationCloneId) &&
        Objects.equals(this.destinationConfiguration, destinationCloneRequestBody.destinationConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationCloneId, destinationConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationCloneRequestBody {\n");
    sb.append("    destinationCloneId: ").append(toIndentedString(destinationCloneId)).append("\n");
    sb.append("    destinationConfiguration: ").append(toIndentedString(destinationConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationCloneId");
    openapiFields.add("destinationConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationCloneId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationCloneRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationCloneRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationCloneRequestBody is not found in the empty JSON string", DestinationCloneRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationCloneRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationCloneRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationCloneRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destinationCloneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCloneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationCloneId").toString()));
      }
      // validate the optional field `destinationConfiguration`
      if (jsonObj.get("destinationConfiguration") != null && !jsonObj.get("destinationConfiguration").isJsonNull()) {
        DestinationCloneConfiguration.validateJsonElement(jsonObj.get("destinationConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationCloneRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationCloneRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationCloneRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationCloneRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationCloneRequestBody>() {
           @Override
           public void write(JsonWriter out, DestinationCloneRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationCloneRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationCloneRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationCloneRequestBody
   * @throws IOException if the JSON string is invalid with respect to DestinationCloneRequestBody
   */
  public static DestinationCloneRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationCloneRequestBody.class);
  }

  /**
   * Convert an instance of DestinationCloneRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

