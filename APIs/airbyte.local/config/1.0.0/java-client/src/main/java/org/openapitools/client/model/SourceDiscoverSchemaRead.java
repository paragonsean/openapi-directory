/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AirbyteCatalog;
import org.openapitools.client.model.CatalogDiff;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.SynchronousJobRead;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceDiscoverSchemaRead {
  public static final String SERIALIZED_NAME_BREAKING_CHANGE = "breakingChange";
  @SerializedName(SERIALIZED_NAME_BREAKING_CHANGE)
  private Boolean breakingChange;

  public static final String SERIALIZED_NAME_CATALOG = "catalog";
  @SerializedName(SERIALIZED_NAME_CATALOG)
  private AirbyteCatalog catalog;

  public static final String SERIALIZED_NAME_CATALOG_DIFF = "catalogDiff";
  @SerializedName(SERIALIZED_NAME_CATALOG_DIFF)
  private CatalogDiff catalogDiff;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private UUID catalogId;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatus connectionStatus;

  public static final String SERIALIZED_NAME_JOB_INFO = "jobInfo";
  @SerializedName(SERIALIZED_NAME_JOB_INFO)
  private SynchronousJobRead jobInfo;

  public SourceDiscoverSchemaRead() {
  }

  public SourceDiscoverSchemaRead breakingChange(Boolean breakingChange) {
    this.breakingChange = breakingChange;
    return this;
  }

  /**
   * Get breakingChange
   * @return breakingChange
   */
  @javax.annotation.Nullable
  public Boolean getBreakingChange() {
    return breakingChange;
  }

  public void setBreakingChange(Boolean breakingChange) {
    this.breakingChange = breakingChange;
  }


  public SourceDiscoverSchemaRead catalog(AirbyteCatalog catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * Get catalog
   * @return catalog
   */
  @javax.annotation.Nullable
  public AirbyteCatalog getCatalog() {
    return catalog;
  }

  public void setCatalog(AirbyteCatalog catalog) {
    this.catalog = catalog;
  }


  public SourceDiscoverSchemaRead catalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
    return this;
  }

  /**
   * Get catalogDiff
   * @return catalogDiff
   */
  @javax.annotation.Nullable
  public CatalogDiff getCatalogDiff() {
    return catalogDiff;
  }

  public void setCatalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
  }


  public SourceDiscoverSchemaRead catalogId(UUID catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public UUID getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(UUID catalogId) {
    this.catalogId = catalogId;
  }


  public SourceDiscoverSchemaRead connectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public SourceDiscoverSchemaRead jobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
    return this;
  }

  /**
   * Get jobInfo
   * @return jobInfo
   */
  @javax.annotation.Nonnull
  public SynchronousJobRead getJobInfo() {
    return jobInfo;
  }

  public void setJobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceDiscoverSchemaRead sourceDiscoverSchemaRead = (SourceDiscoverSchemaRead) o;
    return Objects.equals(this.breakingChange, sourceDiscoverSchemaRead.breakingChange) &&
        Objects.equals(this.catalog, sourceDiscoverSchemaRead.catalog) &&
        Objects.equals(this.catalogDiff, sourceDiscoverSchemaRead.catalogDiff) &&
        Objects.equals(this.catalogId, sourceDiscoverSchemaRead.catalogId) &&
        Objects.equals(this.connectionStatus, sourceDiscoverSchemaRead.connectionStatus) &&
        Objects.equals(this.jobInfo, sourceDiscoverSchemaRead.jobInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakingChange, catalog, catalogDiff, catalogId, connectionStatus, jobInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceDiscoverSchemaRead {\n");
    sb.append("    breakingChange: ").append(toIndentedString(breakingChange)).append("\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    catalogDiff: ").append(toIndentedString(catalogDiff)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    jobInfo: ").append(toIndentedString(jobInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakingChange");
    openapiFields.add("catalog");
    openapiFields.add("catalogDiff");
    openapiFields.add("catalogId");
    openapiFields.add("connectionStatus");
    openapiFields.add("jobInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceDiscoverSchemaRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceDiscoverSchemaRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceDiscoverSchemaRead is not found in the empty JSON string", SourceDiscoverSchemaRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceDiscoverSchemaRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceDiscoverSchemaRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceDiscoverSchemaRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `catalog`
      if (jsonObj.get("catalog") != null && !jsonObj.get("catalog").isJsonNull()) {
        AirbyteCatalog.validateJsonElement(jsonObj.get("catalog"));
      }
      // validate the optional field `catalogDiff`
      if (jsonObj.get("catalogDiff") != null && !jsonObj.get("catalogDiff").isJsonNull()) {
        CatalogDiff.validateJsonElement(jsonObj.get("catalogDiff"));
      }
      if ((jsonObj.get("catalogId") != null && !jsonObj.get("catalogId").isJsonNull()) && !jsonObj.get("catalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogId").toString()));
      }
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        ConnectionStatus.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      // validate the required field `jobInfo`
      SynchronousJobRead.validateJsonElement(jsonObj.get("jobInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceDiscoverSchemaRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceDiscoverSchemaRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceDiscoverSchemaRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceDiscoverSchemaRead.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceDiscoverSchemaRead>() {
           @Override
           public void write(JsonWriter out, SourceDiscoverSchemaRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceDiscoverSchemaRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceDiscoverSchemaRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceDiscoverSchemaRead
   * @throws IOException if the JSON string is invalid with respect to SourceDiscoverSchemaRead
   */
  public static SourceDiscoverSchemaRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceDiscoverSchemaRead.class);
  }

  /**
   * Convert an instance of SourceDiscoverSchemaRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

