/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AdvancedAuth;
import org.openapitools.client.model.AuthSpecification;
import org.openapitools.client.model.DestinationSyncMode;
import org.openapitools.client.model.SynchronousJobRead;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinationDefinitionSpecificationRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationDefinitionSpecificationRead {
  public static final String SERIALIZED_NAME_ADVANCED_AUTH = "advancedAuth";
  @SerializedName(SERIALIZED_NAME_ADVANCED_AUTH)
  private AdvancedAuth advancedAuth;

  public static final String SERIALIZED_NAME_AUTH_SPECIFICATION = "authSpecification";
  @SerializedName(SERIALIZED_NAME_AUTH_SPECIFICATION)
  private AuthSpecification authSpecification;

  public static final String SERIALIZED_NAME_CONNECTION_SPECIFICATION = "connectionSpecification";
  @SerializedName(SERIALIZED_NAME_CONNECTION_SPECIFICATION)
  private Object connectionSpecification = null;

  public static final String SERIALIZED_NAME_DESTINATION_DEFINITION_ID = "destinationDefinitionId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DEFINITION_ID)
  private UUID destinationDefinitionId;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "documentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private String documentationUrl;

  public static final String SERIALIZED_NAME_JOB_INFO = "jobInfo";
  @SerializedName(SERIALIZED_NAME_JOB_INFO)
  private SynchronousJobRead jobInfo;

  public static final String SERIALIZED_NAME_SUPPORTED_DESTINATION_SYNC_MODES = "supportedDestinationSyncModes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DESTINATION_SYNC_MODES)
  private List<DestinationSyncMode> supportedDestinationSyncModes = new ArrayList<>();

  public DestinationDefinitionSpecificationRead() {
  }

  public DestinationDefinitionSpecificationRead advancedAuth(AdvancedAuth advancedAuth) {
    this.advancedAuth = advancedAuth;
    return this;
  }

  /**
   * Get advancedAuth
   * @return advancedAuth
   */
  @javax.annotation.Nullable
  public AdvancedAuth getAdvancedAuth() {
    return advancedAuth;
  }

  public void setAdvancedAuth(AdvancedAuth advancedAuth) {
    this.advancedAuth = advancedAuth;
  }


  public DestinationDefinitionSpecificationRead authSpecification(AuthSpecification authSpecification) {
    this.authSpecification = authSpecification;
    return this;
  }

  /**
   * Get authSpecification
   * @return authSpecification
   */
  @javax.annotation.Nullable
  public AuthSpecification getAuthSpecification() {
    return authSpecification;
  }

  public void setAuthSpecification(AuthSpecification authSpecification) {
    this.authSpecification = authSpecification;
  }


  public DestinationDefinitionSpecificationRead connectionSpecification(Object connectionSpecification) {
    this.connectionSpecification = connectionSpecification;
    return this;
  }

  /**
   * The specification for what values are required to configure the destinationDefinition.
   * @return connectionSpecification
   */
  @javax.annotation.Nullable
  public Object getConnectionSpecification() {
    return connectionSpecification;
  }

  public void setConnectionSpecification(Object connectionSpecification) {
    this.connectionSpecification = connectionSpecification;
  }


  public DestinationDefinitionSpecificationRead destinationDefinitionId(UUID destinationDefinitionId) {
    this.destinationDefinitionId = destinationDefinitionId;
    return this;
  }

  /**
   * Get destinationDefinitionId
   * @return destinationDefinitionId
   */
  @javax.annotation.Nonnull
  public UUID getDestinationDefinitionId() {
    return destinationDefinitionId;
  }

  public void setDestinationDefinitionId(UUID destinationDefinitionId) {
    this.destinationDefinitionId = destinationDefinitionId;
  }


  public DestinationDefinitionSpecificationRead documentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * Get documentationUrl
   * @return documentationUrl
   */
  @javax.annotation.Nullable
  public String getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public DestinationDefinitionSpecificationRead jobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
    return this;
  }

  /**
   * Get jobInfo
   * @return jobInfo
   */
  @javax.annotation.Nonnull
  public SynchronousJobRead getJobInfo() {
    return jobInfo;
  }

  public void setJobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
  }


  public DestinationDefinitionSpecificationRead supportedDestinationSyncModes(List<DestinationSyncMode> supportedDestinationSyncModes) {
    this.supportedDestinationSyncModes = supportedDestinationSyncModes;
    return this;
  }

  public DestinationDefinitionSpecificationRead addSupportedDestinationSyncModesItem(DestinationSyncMode supportedDestinationSyncModesItem) {
    if (this.supportedDestinationSyncModes == null) {
      this.supportedDestinationSyncModes = new ArrayList<>();
    }
    this.supportedDestinationSyncModes.add(supportedDestinationSyncModesItem);
    return this;
  }

  /**
   * Get supportedDestinationSyncModes
   * @return supportedDestinationSyncModes
   */
  @javax.annotation.Nullable
  public List<DestinationSyncMode> getSupportedDestinationSyncModes() {
    return supportedDestinationSyncModes;
  }

  public void setSupportedDestinationSyncModes(List<DestinationSyncMode> supportedDestinationSyncModes) {
    this.supportedDestinationSyncModes = supportedDestinationSyncModes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDefinitionSpecificationRead destinationDefinitionSpecificationRead = (DestinationDefinitionSpecificationRead) o;
    return Objects.equals(this.advancedAuth, destinationDefinitionSpecificationRead.advancedAuth) &&
        Objects.equals(this.authSpecification, destinationDefinitionSpecificationRead.authSpecification) &&
        Objects.equals(this.connectionSpecification, destinationDefinitionSpecificationRead.connectionSpecification) &&
        Objects.equals(this.destinationDefinitionId, destinationDefinitionSpecificationRead.destinationDefinitionId) &&
        Objects.equals(this.documentationUrl, destinationDefinitionSpecificationRead.documentationUrl) &&
        Objects.equals(this.jobInfo, destinationDefinitionSpecificationRead.jobInfo) &&
        Objects.equals(this.supportedDestinationSyncModes, destinationDefinitionSpecificationRead.supportedDestinationSyncModes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedAuth, authSpecification, connectionSpecification, destinationDefinitionId, documentationUrl, jobInfo, supportedDestinationSyncModes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDefinitionSpecificationRead {\n");
    sb.append("    advancedAuth: ").append(toIndentedString(advancedAuth)).append("\n");
    sb.append("    authSpecification: ").append(toIndentedString(authSpecification)).append("\n");
    sb.append("    connectionSpecification: ").append(toIndentedString(connectionSpecification)).append("\n");
    sb.append("    destinationDefinitionId: ").append(toIndentedString(destinationDefinitionId)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    jobInfo: ").append(toIndentedString(jobInfo)).append("\n");
    sb.append("    supportedDestinationSyncModes: ").append(toIndentedString(supportedDestinationSyncModes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedAuth");
    openapiFields.add("authSpecification");
    openapiFields.add("connectionSpecification");
    openapiFields.add("destinationDefinitionId");
    openapiFields.add("documentationUrl");
    openapiFields.add("jobInfo");
    openapiFields.add("supportedDestinationSyncModes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationDefinitionId");
    openapiRequiredFields.add("jobInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationDefinitionSpecificationRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationDefinitionSpecificationRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationDefinitionSpecificationRead is not found in the empty JSON string", DestinationDefinitionSpecificationRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationDefinitionSpecificationRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationDefinitionSpecificationRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationDefinitionSpecificationRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advancedAuth`
      if (jsonObj.get("advancedAuth") != null && !jsonObj.get("advancedAuth").isJsonNull()) {
        AdvancedAuth.validateJsonElement(jsonObj.get("advancedAuth"));
      }
      // validate the optional field `authSpecification`
      if (jsonObj.get("authSpecification") != null && !jsonObj.get("authSpecification").isJsonNull()) {
        AuthSpecification.validateJsonElement(jsonObj.get("authSpecification"));
      }
      if (!jsonObj.get("destinationDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationDefinitionId").toString()));
      }
      if ((jsonObj.get("documentationUrl") != null && !jsonObj.get("documentationUrl").isJsonNull()) && !jsonObj.get("documentationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUrl").toString()));
      }
      // validate the required field `jobInfo`
      SynchronousJobRead.validateJsonElement(jsonObj.get("jobInfo"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedDestinationSyncModes") != null && !jsonObj.get("supportedDestinationSyncModes").isJsonNull() && !jsonObj.get("supportedDestinationSyncModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedDestinationSyncModes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedDestinationSyncModes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationDefinitionSpecificationRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationDefinitionSpecificationRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationDefinitionSpecificationRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationDefinitionSpecificationRead.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationDefinitionSpecificationRead>() {
           @Override
           public void write(JsonWriter out, DestinationDefinitionSpecificationRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationDefinitionSpecificationRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationDefinitionSpecificationRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationDefinitionSpecificationRead
   * @throws IOException if the JSON string is invalid with respect to DestinationDefinitionSpecificationRead
   */
  public static DestinationDefinitionSpecificationRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationDefinitionSpecificationRead.class);
  }

  /**
   * Convert an instance of DestinationDefinitionSpecificationRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

