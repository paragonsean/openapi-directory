/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotFoundKnownExceptionInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotFoundKnownExceptionInfo {
  public static final String SERIALIZED_NAME_EXCEPTION_CLASS_NAME = "exceptionClassName";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_CLASS_NAME)
  private String exceptionClassName;

  public static final String SERIALIZED_NAME_EXCEPTION_STACK = "exceptionStack";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_STACK)
  private List<String> exceptionStack = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ROOT_CAUSE_EXCEPTION_CLASS_NAME = "rootCauseExceptionClassName";
  @SerializedName(SERIALIZED_NAME_ROOT_CAUSE_EXCEPTION_CLASS_NAME)
  private String rootCauseExceptionClassName;

  public static final String SERIALIZED_NAME_ROOT_CAUSE_EXCEPTION_STACK = "rootCauseExceptionStack";
  @SerializedName(SERIALIZED_NAME_ROOT_CAUSE_EXCEPTION_STACK)
  private List<String> rootCauseExceptionStack = new ArrayList<>();

  public NotFoundKnownExceptionInfo() {
  }

  public NotFoundKnownExceptionInfo exceptionClassName(String exceptionClassName) {
    this.exceptionClassName = exceptionClassName;
    return this;
  }

  /**
   * Get exceptionClassName
   * @return exceptionClassName
   */
  @javax.annotation.Nullable
  public String getExceptionClassName() {
    return exceptionClassName;
  }

  public void setExceptionClassName(String exceptionClassName) {
    this.exceptionClassName = exceptionClassName;
  }


  public NotFoundKnownExceptionInfo exceptionStack(List<String> exceptionStack) {
    this.exceptionStack = exceptionStack;
    return this;
  }

  public NotFoundKnownExceptionInfo addExceptionStackItem(String exceptionStackItem) {
    if (this.exceptionStack == null) {
      this.exceptionStack = new ArrayList<>();
    }
    this.exceptionStack.add(exceptionStackItem);
    return this;
  }

  /**
   * Get exceptionStack
   * @return exceptionStack
   */
  @javax.annotation.Nullable
  public List<String> getExceptionStack() {
    return exceptionStack;
  }

  public void setExceptionStack(List<String> exceptionStack) {
    this.exceptionStack = exceptionStack;
  }


  public NotFoundKnownExceptionInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NotFoundKnownExceptionInfo message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NotFoundKnownExceptionInfo rootCauseExceptionClassName(String rootCauseExceptionClassName) {
    this.rootCauseExceptionClassName = rootCauseExceptionClassName;
    return this;
  }

  /**
   * Get rootCauseExceptionClassName
   * @return rootCauseExceptionClassName
   */
  @javax.annotation.Nullable
  public String getRootCauseExceptionClassName() {
    return rootCauseExceptionClassName;
  }

  public void setRootCauseExceptionClassName(String rootCauseExceptionClassName) {
    this.rootCauseExceptionClassName = rootCauseExceptionClassName;
  }


  public NotFoundKnownExceptionInfo rootCauseExceptionStack(List<String> rootCauseExceptionStack) {
    this.rootCauseExceptionStack = rootCauseExceptionStack;
    return this;
  }

  public NotFoundKnownExceptionInfo addRootCauseExceptionStackItem(String rootCauseExceptionStackItem) {
    if (this.rootCauseExceptionStack == null) {
      this.rootCauseExceptionStack = new ArrayList<>();
    }
    this.rootCauseExceptionStack.add(rootCauseExceptionStackItem);
    return this;
  }

  /**
   * Get rootCauseExceptionStack
   * @return rootCauseExceptionStack
   */
  @javax.annotation.Nullable
  public List<String> getRootCauseExceptionStack() {
    return rootCauseExceptionStack;
  }

  public void setRootCauseExceptionStack(List<String> rootCauseExceptionStack) {
    this.rootCauseExceptionStack = rootCauseExceptionStack;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotFoundKnownExceptionInfo notFoundKnownExceptionInfo = (NotFoundKnownExceptionInfo) o;
    return Objects.equals(this.exceptionClassName, notFoundKnownExceptionInfo.exceptionClassName) &&
        Objects.equals(this.exceptionStack, notFoundKnownExceptionInfo.exceptionStack) &&
        Objects.equals(this.id, notFoundKnownExceptionInfo.id) &&
        Objects.equals(this.message, notFoundKnownExceptionInfo.message) &&
        Objects.equals(this.rootCauseExceptionClassName, notFoundKnownExceptionInfo.rootCauseExceptionClassName) &&
        Objects.equals(this.rootCauseExceptionStack, notFoundKnownExceptionInfo.rootCauseExceptionStack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exceptionClassName, exceptionStack, id, message, rootCauseExceptionClassName, rootCauseExceptionStack);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotFoundKnownExceptionInfo {\n");
    sb.append("    exceptionClassName: ").append(toIndentedString(exceptionClassName)).append("\n");
    sb.append("    exceptionStack: ").append(toIndentedString(exceptionStack)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rootCauseExceptionClassName: ").append(toIndentedString(rootCauseExceptionClassName)).append("\n");
    sb.append("    rootCauseExceptionStack: ").append(toIndentedString(rootCauseExceptionStack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exceptionClassName");
    openapiFields.add("exceptionStack");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("rootCauseExceptionClassName");
    openapiFields.add("rootCauseExceptionStack");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotFoundKnownExceptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotFoundKnownExceptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotFoundKnownExceptionInfo is not found in the empty JSON string", NotFoundKnownExceptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotFoundKnownExceptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotFoundKnownExceptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotFoundKnownExceptionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exceptionClassName") != null && !jsonObj.get("exceptionClassName").isJsonNull()) && !jsonObj.get("exceptionClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionClassName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exceptionStack") != null && !jsonObj.get("exceptionStack").isJsonNull() && !jsonObj.get("exceptionStack").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionStack` to be an array in the JSON string but got `%s`", jsonObj.get("exceptionStack").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("rootCauseExceptionClassName") != null && !jsonObj.get("rootCauseExceptionClassName").isJsonNull()) && !jsonObj.get("rootCauseExceptionClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootCauseExceptionClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootCauseExceptionClassName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rootCauseExceptionStack") != null && !jsonObj.get("rootCauseExceptionStack").isJsonNull() && !jsonObj.get("rootCauseExceptionStack").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootCauseExceptionStack` to be an array in the JSON string but got `%s`", jsonObj.get("rootCauseExceptionStack").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotFoundKnownExceptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotFoundKnownExceptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotFoundKnownExceptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotFoundKnownExceptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NotFoundKnownExceptionInfo>() {
           @Override
           public void write(JsonWriter out, NotFoundKnownExceptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotFoundKnownExceptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotFoundKnownExceptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotFoundKnownExceptionInfo
   * @throws IOException if the JSON string is invalid with respect to NotFoundKnownExceptionInfo
   */
  public static NotFoundKnownExceptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotFoundKnownExceptionInfo.class);
  }

  /**
   * Convert an instance of NotFoundKnownExceptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

