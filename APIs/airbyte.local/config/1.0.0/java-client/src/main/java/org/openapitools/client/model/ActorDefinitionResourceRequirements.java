/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobTypeResourceLimit;
import org.openapitools.client.model.ResourceRequirements;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActorDefinitionResourceRequirements {
  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private ResourceRequirements _default;

  public static final String SERIALIZED_NAME_JOB_SPECIFIC = "jobSpecific";
  @SerializedName(SERIALIZED_NAME_JOB_SPECIFIC)
  private List<JobTypeResourceLimit> jobSpecific = new ArrayList<>();

  public ActorDefinitionResourceRequirements() {
  }

  public ActorDefinitionResourceRequirements _default(ResourceRequirements _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nullable
  public ResourceRequirements getDefault() {
    return _default;
  }

  public void setDefault(ResourceRequirements _default) {
    this._default = _default;
  }


  public ActorDefinitionResourceRequirements jobSpecific(List<JobTypeResourceLimit> jobSpecific) {
    this.jobSpecific = jobSpecific;
    return this;
  }

  public ActorDefinitionResourceRequirements addJobSpecificItem(JobTypeResourceLimit jobSpecificItem) {
    if (this.jobSpecific == null) {
      this.jobSpecific = new ArrayList<>();
    }
    this.jobSpecific.add(jobSpecificItem);
    return this;
  }

  /**
   * Get jobSpecific
   * @return jobSpecific
   */
  @javax.annotation.Nullable
  public List<JobTypeResourceLimit> getJobSpecific() {
    return jobSpecific;
  }

  public void setJobSpecific(List<JobTypeResourceLimit> jobSpecific) {
    this.jobSpecific = jobSpecific;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActorDefinitionResourceRequirements actorDefinitionResourceRequirements = (ActorDefinitionResourceRequirements) o;
    return Objects.equals(this._default, actorDefinitionResourceRequirements._default) &&
        Objects.equals(this.jobSpecific, actorDefinitionResourceRequirements.jobSpecific);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, jobSpecific);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActorDefinitionResourceRequirements {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    jobSpecific: ").append(toIndentedString(jobSpecific)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default");
    openapiFields.add("jobSpecific");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActorDefinitionResourceRequirements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActorDefinitionResourceRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActorDefinitionResourceRequirements is not found in the empty JSON string", ActorDefinitionResourceRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActorDefinitionResourceRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActorDefinitionResourceRequirements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `default`
      if (jsonObj.get("default") != null && !jsonObj.get("default").isJsonNull()) {
        ResourceRequirements.validateJsonElement(jsonObj.get("default"));
      }
      if (jsonObj.get("jobSpecific") != null && !jsonObj.get("jobSpecific").isJsonNull()) {
        JsonArray jsonArrayjobSpecific = jsonObj.getAsJsonArray("jobSpecific");
        if (jsonArrayjobSpecific != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobSpecific").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobSpecific` to be an array in the JSON string but got `%s`", jsonObj.get("jobSpecific").toString()));
          }

          // validate the optional field `jobSpecific` (array)
          for (int i = 0; i < jsonArrayjobSpecific.size(); i++) {
            JobTypeResourceLimit.validateJsonElement(jsonArrayjobSpecific.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActorDefinitionResourceRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActorDefinitionResourceRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActorDefinitionResourceRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActorDefinitionResourceRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<ActorDefinitionResourceRequirements>() {
           @Override
           public void write(JsonWriter out, ActorDefinitionResourceRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActorDefinitionResourceRequirements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActorDefinitionResourceRequirements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActorDefinitionResourceRequirements
   * @throws IOException if the JSON string is invalid with respect to ActorDefinitionResourceRequirements
   */
  public static ActorDefinitionResourceRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActorDefinitionResourceRequirements.class);
  }

  /**
   * Convert an instance of ActorDefinitionResourceRequirements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

