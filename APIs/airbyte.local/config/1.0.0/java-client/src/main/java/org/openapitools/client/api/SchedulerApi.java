/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckConnectionRead;
import org.openapitools.client.model.DestinationCoreConfig;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.SourceCoreConfig;
import org.openapitools.client.model.SourceDiscoverSchemaRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchedulerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchedulerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchedulerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for executeDestinationCheckConnection
     * @param destinationCoreConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeDestinationCheckConnectionCall(DestinationCoreConfig destinationCoreConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationCoreConfig;

        // create path and map variables
        String localVarPath = "/v1/scheduler/destinations/check_connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeDestinationCheckConnectionValidateBeforeCall(DestinationCoreConfig destinationCoreConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationCoreConfig' is set
        if (destinationCoreConfig == null) {
            throw new ApiException("Missing the required parameter 'destinationCoreConfig' when calling executeDestinationCheckConnection(Async)");
        }

        return executeDestinationCheckConnectionCall(destinationCoreConfig, _callback);

    }

    /**
     * Run check connection for a given destination configuration
     * 
     * @param destinationCoreConfig  (required)
     * @return CheckConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public CheckConnectionRead executeDestinationCheckConnection(DestinationCoreConfig destinationCoreConfig) throws ApiException {
        ApiResponse<CheckConnectionRead> localVarResp = executeDestinationCheckConnectionWithHttpInfo(destinationCoreConfig);
        return localVarResp.getData();
    }

    /**
     * Run check connection for a given destination configuration
     * 
     * @param destinationCoreConfig  (required)
     * @return ApiResponse&lt;CheckConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckConnectionRead> executeDestinationCheckConnectionWithHttpInfo(DestinationCoreConfig destinationCoreConfig) throws ApiException {
        okhttp3.Call localVarCall = executeDestinationCheckConnectionValidateBeforeCall(destinationCoreConfig, null);
        Type localVarReturnType = new TypeToken<CheckConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run check connection for a given destination configuration (asynchronously)
     * 
     * @param destinationCoreConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeDestinationCheckConnectionAsync(DestinationCoreConfig destinationCoreConfig, final ApiCallback<CheckConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeDestinationCheckConnectionValidateBeforeCall(destinationCoreConfig, _callback);
        Type localVarReturnType = new TypeToken<CheckConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeSourceCheckConnection
     * @param sourceCoreConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSourceCheckConnectionCall(SourceCoreConfig sourceCoreConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCoreConfig;

        // create path and map variables
        String localVarPath = "/v1/scheduler/sources/check_connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeSourceCheckConnectionValidateBeforeCall(SourceCoreConfig sourceCoreConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceCoreConfig' is set
        if (sourceCoreConfig == null) {
            throw new ApiException("Missing the required parameter 'sourceCoreConfig' when calling executeSourceCheckConnection(Async)");
        }

        return executeSourceCheckConnectionCall(sourceCoreConfig, _callback);

    }

    /**
     * Run check connection for a given source configuration
     * 
     * @param sourceCoreConfig  (required)
     * @return CheckConnectionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public CheckConnectionRead executeSourceCheckConnection(SourceCoreConfig sourceCoreConfig) throws ApiException {
        ApiResponse<CheckConnectionRead> localVarResp = executeSourceCheckConnectionWithHttpInfo(sourceCoreConfig);
        return localVarResp.getData();
    }

    /**
     * Run check connection for a given source configuration
     * 
     * @param sourceCoreConfig  (required)
     * @return ApiResponse&lt;CheckConnectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckConnectionRead> executeSourceCheckConnectionWithHttpInfo(SourceCoreConfig sourceCoreConfig) throws ApiException {
        okhttp3.Call localVarCall = executeSourceCheckConnectionValidateBeforeCall(sourceCoreConfig, null);
        Type localVarReturnType = new TypeToken<CheckConnectionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run check connection for a given source configuration (asynchronously)
     * 
     * @param sourceCoreConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSourceCheckConnectionAsync(SourceCoreConfig sourceCoreConfig, final ApiCallback<CheckConnectionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeSourceCheckConnectionValidateBeforeCall(sourceCoreConfig, _callback);
        Type localVarReturnType = new TypeToken<CheckConnectionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeSourceDiscoverSchema
     * @param sourceCoreConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSourceDiscoverSchemaCall(SourceCoreConfig sourceCoreConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceCoreConfig;

        // create path and map variables
        String localVarPath = "/v1/scheduler/sources/discover_schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeSourceDiscoverSchemaValidateBeforeCall(SourceCoreConfig sourceCoreConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceCoreConfig' is set
        if (sourceCoreConfig == null) {
            throw new ApiException("Missing the required parameter 'sourceCoreConfig' when calling executeSourceDiscoverSchema(Async)");
        }

        return executeSourceDiscoverSchemaCall(sourceCoreConfig, _callback);

    }

    /**
     * Run discover schema for a given source a source configuration
     * 
     * @param sourceCoreConfig  (required)
     * @return SourceDiscoverSchemaRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public SourceDiscoverSchemaRead executeSourceDiscoverSchema(SourceCoreConfig sourceCoreConfig) throws ApiException {
        ApiResponse<SourceDiscoverSchemaRead> localVarResp = executeSourceDiscoverSchemaWithHttpInfo(sourceCoreConfig);
        return localVarResp.getData();
    }

    /**
     * Run discover schema for a given source a source configuration
     * 
     * @param sourceCoreConfig  (required)
     * @return ApiResponse&lt;SourceDiscoverSchemaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceDiscoverSchemaRead> executeSourceDiscoverSchemaWithHttpInfo(SourceCoreConfig sourceCoreConfig) throws ApiException {
        okhttp3.Call localVarCall = executeSourceDiscoverSchemaValidateBeforeCall(sourceCoreConfig, null);
        Type localVarReturnType = new TypeToken<SourceDiscoverSchemaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run discover schema for a given source a source configuration (asynchronously)
     * 
     * @param sourceCoreConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input failed validation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeSourceDiscoverSchemaAsync(SourceCoreConfig sourceCoreConfig, final ApiCallback<SourceDiscoverSchemaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeSourceDiscoverSchemaValidateBeforeCall(sourceCoreConfig, _callback);
        Type localVarReturnType = new TypeToken<SourceDiscoverSchemaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
