/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinationSyncMode;
import org.openapitools.client.model.SelectedFieldInfo;
import org.openapitools.client.model.SyncMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the mutable part of the stream to configure the destination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirbyteStreamConfiguration {
  public static final String SERIALIZED_NAME_ALIAS_NAME = "aliasName";
  @SerializedName(SERIALIZED_NAME_ALIAS_NAME)
  private String aliasName;

  public static final String SERIALIZED_NAME_CURSOR_FIELD = "cursorField";
  @SerializedName(SERIALIZED_NAME_CURSOR_FIELD)
  private List<String> cursorField = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_SYNC_MODE = "destinationSyncMode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SYNC_MODE)
  private DestinationSyncMode destinationSyncMode;

  public static final String SERIALIZED_NAME_FIELD_SELECTION_ENABLED = "fieldSelectionEnabled";
  @SerializedName(SERIALIZED_NAME_FIELD_SELECTION_ENABLED)
  private Boolean fieldSelectionEnabled;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private List<List<String>> primaryKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_SELECTED_FIELDS = "selectedFields";
  @SerializedName(SERIALIZED_NAME_SELECTED_FIELDS)
  private List<SelectedFieldInfo> selectedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED = "suggested";
  @SerializedName(SERIALIZED_NAME_SUGGESTED)
  private Boolean suggested;

  public static final String SERIALIZED_NAME_SYNC_MODE = "syncMode";
  @SerializedName(SERIALIZED_NAME_SYNC_MODE)
  private SyncMode syncMode;

  public AirbyteStreamConfiguration() {
  }

  public AirbyteStreamConfiguration aliasName(String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

  /**
   * Alias name to the stream to be used in the destination
   * @return aliasName
   */
  @javax.annotation.Nullable
  public String getAliasName() {
    return aliasName;
  }

  public void setAliasName(String aliasName) {
    this.aliasName = aliasName;
  }


  public AirbyteStreamConfiguration cursorField(List<String> cursorField) {
    this.cursorField = cursorField;
    return this;
  }

  public AirbyteStreamConfiguration addCursorFieldItem(String cursorFieldItem) {
    if (this.cursorField == null) {
      this.cursorField = new ArrayList<>();
    }
    this.cursorField.add(cursorFieldItem);
    return this;
  }

  /**
   * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if &#x60;sync_mode&#x60; is &#x60;incremental&#x60;. Otherwise it is ignored.
   * @return cursorField
   */
  @javax.annotation.Nullable
  public List<String> getCursorField() {
    return cursorField;
  }

  public void setCursorField(List<String> cursorField) {
    this.cursorField = cursorField;
  }


  public AirbyteStreamConfiguration destinationSyncMode(DestinationSyncMode destinationSyncMode) {
    this.destinationSyncMode = destinationSyncMode;
    return this;
  }

  /**
   * Get destinationSyncMode
   * @return destinationSyncMode
   */
  @javax.annotation.Nonnull
  public DestinationSyncMode getDestinationSyncMode() {
    return destinationSyncMode;
  }

  public void setDestinationSyncMode(DestinationSyncMode destinationSyncMode) {
    this.destinationSyncMode = destinationSyncMode;
  }


  public AirbyteStreamConfiguration fieldSelectionEnabled(Boolean fieldSelectionEnabled) {
    this.fieldSelectionEnabled = fieldSelectionEnabled;
    return this;
  }

  /**
   * Whether field selection should be enabled. If this is true, only the properties in &#x60;selectedFields&#x60; will be included.
   * @return fieldSelectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFieldSelectionEnabled() {
    return fieldSelectionEnabled;
  }

  public void setFieldSelectionEnabled(Boolean fieldSelectionEnabled) {
    this.fieldSelectionEnabled = fieldSelectionEnabled;
  }


  public AirbyteStreamConfiguration primaryKey(List<List<String>> primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  public AirbyteStreamConfiguration addPrimaryKeyItem(List<String> primaryKeyItem) {
    if (this.primaryKey == null) {
      this.primaryKey = new ArrayList<>();
    }
    this.primaryKey.add(primaryKeyItem);
    return this;
  }

  /**
   * Paths to the fields that will be used as primary key. This field is REQUIRED if &#x60;destination_sync_mode&#x60; is &#x60;*_dedup&#x60;. Otherwise it is ignored.
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public List<List<String>> getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(List<List<String>> primaryKey) {
    this.primaryKey = primaryKey;
  }


  public AirbyteStreamConfiguration selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

  /**
   * If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not
   * @return selected
   */
  @javax.annotation.Nullable
  public Boolean getSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public AirbyteStreamConfiguration selectedFields(List<SelectedFieldInfo> selectedFields) {
    this.selectedFields = selectedFields;
    return this;
  }

  public AirbyteStreamConfiguration addSelectedFieldsItem(SelectedFieldInfo selectedFieldsItem) {
    if (this.selectedFields == null) {
      this.selectedFields = new ArrayList<>();
    }
    this.selectedFields.add(selectedFieldsItem);
    return this;
  }

  /**
   * Paths to the fields that will be included in the configured catalog. This must be set if &#x60;fieldSelectedEnabled&#x60; is set. An empty list indicates that no properties will be included.
   * @return selectedFields
   */
  @javax.annotation.Nullable
  public List<SelectedFieldInfo> getSelectedFields() {
    return selectedFields;
  }

  public void setSelectedFields(List<SelectedFieldInfo> selectedFields) {
    this.selectedFields = selectedFields;
  }


  public AirbyteStreamConfiguration suggested(Boolean suggested) {
    this.suggested = suggested;
    return this;
  }

  /**
   * Does the connector suggest that this stream be enabled by default?
   * @return suggested
   */
  @javax.annotation.Nullable
  public Boolean getSuggested() {
    return suggested;
  }

  public void setSuggested(Boolean suggested) {
    this.suggested = suggested;
  }


  public AirbyteStreamConfiguration syncMode(SyncMode syncMode) {
    this.syncMode = syncMode;
    return this;
  }

  /**
   * Get syncMode
   * @return syncMode
   */
  @javax.annotation.Nonnull
  public SyncMode getSyncMode() {
    return syncMode;
  }

  public void setSyncMode(SyncMode syncMode) {
    this.syncMode = syncMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirbyteStreamConfiguration airbyteStreamConfiguration = (AirbyteStreamConfiguration) o;
    return Objects.equals(this.aliasName, airbyteStreamConfiguration.aliasName) &&
        Objects.equals(this.cursorField, airbyteStreamConfiguration.cursorField) &&
        Objects.equals(this.destinationSyncMode, airbyteStreamConfiguration.destinationSyncMode) &&
        Objects.equals(this.fieldSelectionEnabled, airbyteStreamConfiguration.fieldSelectionEnabled) &&
        Objects.equals(this.primaryKey, airbyteStreamConfiguration.primaryKey) &&
        Objects.equals(this.selected, airbyteStreamConfiguration.selected) &&
        Objects.equals(this.selectedFields, airbyteStreamConfiguration.selectedFields) &&
        Objects.equals(this.suggested, airbyteStreamConfiguration.suggested) &&
        Objects.equals(this.syncMode, airbyteStreamConfiguration.syncMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliasName, cursorField, destinationSyncMode, fieldSelectionEnabled, primaryKey, selected, selectedFields, suggested, syncMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirbyteStreamConfiguration {\n");
    sb.append("    aliasName: ").append(toIndentedString(aliasName)).append("\n");
    sb.append("    cursorField: ").append(toIndentedString(cursorField)).append("\n");
    sb.append("    destinationSyncMode: ").append(toIndentedString(destinationSyncMode)).append("\n");
    sb.append("    fieldSelectionEnabled: ").append(toIndentedString(fieldSelectionEnabled)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    selectedFields: ").append(toIndentedString(selectedFields)).append("\n");
    sb.append("    suggested: ").append(toIndentedString(suggested)).append("\n");
    sb.append("    syncMode: ").append(toIndentedString(syncMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliasName");
    openapiFields.add("cursorField");
    openapiFields.add("destinationSyncMode");
    openapiFields.add("fieldSelectionEnabled");
    openapiFields.add("primaryKey");
    openapiFields.add("selected");
    openapiFields.add("selectedFields");
    openapiFields.add("suggested");
    openapiFields.add("syncMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationSyncMode");
    openapiRequiredFields.add("syncMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirbyteStreamConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirbyteStreamConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirbyteStreamConfiguration is not found in the empty JSON string", AirbyteStreamConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirbyteStreamConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirbyteStreamConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AirbyteStreamConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aliasName") != null && !jsonObj.get("aliasName").isJsonNull()) && !jsonObj.get("aliasName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cursorField") != null && !jsonObj.get("cursorField").isJsonNull() && !jsonObj.get("cursorField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursorField` to be an array in the JSON string but got `%s`", jsonObj.get("cursorField").toString()));
      }
      // validate the required field `destinationSyncMode`
      DestinationSyncMode.validateJsonElement(jsonObj.get("destinationSyncMode"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull() && !jsonObj.get("primaryKey").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryKey` to be an array in the JSON string but got `%s`", jsonObj.get("primaryKey").toString()));
      }
      if (jsonObj.get("selectedFields") != null && !jsonObj.get("selectedFields").isJsonNull()) {
        JsonArray jsonArrayselectedFields = jsonObj.getAsJsonArray("selectedFields");
        if (jsonArrayselectedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectedFields` to be an array in the JSON string but got `%s`", jsonObj.get("selectedFields").toString()));
          }

          // validate the optional field `selectedFields` (array)
          for (int i = 0; i < jsonArrayselectedFields.size(); i++) {
            SelectedFieldInfo.validateJsonElement(jsonArrayselectedFields.get(i));
          };
        }
      }
      // validate the required field `syncMode`
      SyncMode.validateJsonElement(jsonObj.get("syncMode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirbyteStreamConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirbyteStreamConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirbyteStreamConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirbyteStreamConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AirbyteStreamConfiguration>() {
           @Override
           public void write(JsonWriter out, AirbyteStreamConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirbyteStreamConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirbyteStreamConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirbyteStreamConfiguration
   * @throws IOException if the JSON string is invalid with respect to AirbyteStreamConfiguration
   */
  public static AirbyteStreamConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirbyteStreamConfiguration.class);
  }

  /**
   * Convert an instance of AirbyteStreamConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

