/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ConnectionScheduleData;
import org.openapitools.client.model.ConnectionScheduleType;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.DestinationSnippetRead;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.SchemaChange;
import org.openapitools.client.model.SourceSnippetRead;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a connection that shows up in the connection list view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:05.524715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebBackendConnectionListItem {
  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private UUID connectionId;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private DestinationSnippetRead destination;

  public static final String SERIALIZED_NAME_IS_SYNCING = "isSyncing";
  @SerializedName(SERIALIZED_NAME_IS_SYNCING)
  private Boolean isSyncing;

  public static final String SERIALIZED_NAME_LATEST_SYNC_JOB_CREATED_AT = "latestSyncJobCreatedAt";
  @SerializedName(SERIALIZED_NAME_LATEST_SYNC_JOB_CREATED_AT)
  private Long latestSyncJobCreatedAt;

  public static final String SERIALIZED_NAME_LATEST_SYNC_JOB_STATUS = "latestSyncJobStatus";
  @SerializedName(SERIALIZED_NAME_LATEST_SYNC_JOB_STATUS)
  private JobStatus latestSyncJobStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE_DATA = "scheduleData";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_DATA)
  private ConnectionScheduleData scheduleData;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ConnectionScheduleType scheduleType;

  public static final String SERIALIZED_NAME_SCHEMA_CHANGE = "schemaChange";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CHANGE)
  private SchemaChange schemaChange;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceSnippetRead source;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConnectionStatus status;

  public WebBackendConnectionListItem() {
  }

  public WebBackendConnectionListItem connectionId(UUID connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nonnull
  public UUID getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
  }


  public WebBackendConnectionListItem destination(DestinationSnippetRead destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public DestinationSnippetRead getDestination() {
    return destination;
  }

  public void setDestination(DestinationSnippetRead destination) {
    this.destination = destination;
  }


  public WebBackendConnectionListItem isSyncing(Boolean isSyncing) {
    this.isSyncing = isSyncing;
    return this;
  }

  /**
   * Get isSyncing
   * @return isSyncing
   */
  @javax.annotation.Nonnull
  public Boolean getIsSyncing() {
    return isSyncing;
  }

  public void setIsSyncing(Boolean isSyncing) {
    this.isSyncing = isSyncing;
  }


  public WebBackendConnectionListItem latestSyncJobCreatedAt(Long latestSyncJobCreatedAt) {
    this.latestSyncJobCreatedAt = latestSyncJobCreatedAt;
    return this;
  }

  /**
   * epoch time of the latest sync job. null if no sync job has taken place.
   * @return latestSyncJobCreatedAt
   */
  @javax.annotation.Nullable
  public Long getLatestSyncJobCreatedAt() {
    return latestSyncJobCreatedAt;
  }

  public void setLatestSyncJobCreatedAt(Long latestSyncJobCreatedAt) {
    this.latestSyncJobCreatedAt = latestSyncJobCreatedAt;
  }


  public WebBackendConnectionListItem latestSyncJobStatus(JobStatus latestSyncJobStatus) {
    this.latestSyncJobStatus = latestSyncJobStatus;
    return this;
  }

  /**
   * Get latestSyncJobStatus
   * @return latestSyncJobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getLatestSyncJobStatus() {
    return latestSyncJobStatus;
  }

  public void setLatestSyncJobStatus(JobStatus latestSyncJobStatus) {
    this.latestSyncJobStatus = latestSyncJobStatus;
  }


  public WebBackendConnectionListItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebBackendConnectionListItem scheduleData(ConnectionScheduleData scheduleData) {
    this.scheduleData = scheduleData;
    return this;
  }

  /**
   * Get scheduleData
   * @return scheduleData
   */
  @javax.annotation.Nullable
  public ConnectionScheduleData getScheduleData() {
    return scheduleData;
  }

  public void setScheduleData(ConnectionScheduleData scheduleData) {
    this.scheduleData = scheduleData;
  }


  public WebBackendConnectionListItem scheduleType(ConnectionScheduleType scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * Get scheduleType
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public ConnectionScheduleType getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ConnectionScheduleType scheduleType) {
    this.scheduleType = scheduleType;
  }


  public WebBackendConnectionListItem schemaChange(SchemaChange schemaChange) {
    this.schemaChange = schemaChange;
    return this;
  }

  /**
   * Get schemaChange
   * @return schemaChange
   */
  @javax.annotation.Nonnull
  public SchemaChange getSchemaChange() {
    return schemaChange;
  }

  public void setSchemaChange(SchemaChange schemaChange) {
    this.schemaChange = schemaChange;
  }


  public WebBackendConnectionListItem source(SourceSnippetRead source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public SourceSnippetRead getSource() {
    return source;
  }

  public void setSource(SourceSnippetRead source) {
    this.source = source;
  }


  public WebBackendConnectionListItem status(ConnectionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ConnectionStatus getStatus() {
    return status;
  }

  public void setStatus(ConnectionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebBackendConnectionListItem webBackendConnectionListItem = (WebBackendConnectionListItem) o;
    return Objects.equals(this.connectionId, webBackendConnectionListItem.connectionId) &&
        Objects.equals(this.destination, webBackendConnectionListItem.destination) &&
        Objects.equals(this.isSyncing, webBackendConnectionListItem.isSyncing) &&
        Objects.equals(this.latestSyncJobCreatedAt, webBackendConnectionListItem.latestSyncJobCreatedAt) &&
        Objects.equals(this.latestSyncJobStatus, webBackendConnectionListItem.latestSyncJobStatus) &&
        Objects.equals(this.name, webBackendConnectionListItem.name) &&
        Objects.equals(this.scheduleData, webBackendConnectionListItem.scheduleData) &&
        Objects.equals(this.scheduleType, webBackendConnectionListItem.scheduleType) &&
        Objects.equals(this.schemaChange, webBackendConnectionListItem.schemaChange) &&
        Objects.equals(this.source, webBackendConnectionListItem.source) &&
        Objects.equals(this.status, webBackendConnectionListItem.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, destination, isSyncing, latestSyncJobCreatedAt, latestSyncJobStatus, name, scheduleData, scheduleType, schemaChange, source, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebBackendConnectionListItem {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    isSyncing: ").append(toIndentedString(isSyncing)).append("\n");
    sb.append("    latestSyncJobCreatedAt: ").append(toIndentedString(latestSyncJobCreatedAt)).append("\n");
    sb.append("    latestSyncJobStatus: ").append(toIndentedString(latestSyncJobStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scheduleData: ").append(toIndentedString(scheduleData)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    schemaChange: ").append(toIndentedString(schemaChange)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionId");
    openapiFields.add("destination");
    openapiFields.add("isSyncing");
    openapiFields.add("latestSyncJobCreatedAt");
    openapiFields.add("latestSyncJobStatus");
    openapiFields.add("name");
    openapiFields.add("scheduleData");
    openapiFields.add("scheduleType");
    openapiFields.add("schemaChange");
    openapiFields.add("source");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionId");
    openapiRequiredFields.add("destination");
    openapiRequiredFields.add("isSyncing");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("schemaChange");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebBackendConnectionListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebBackendConnectionListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebBackendConnectionListItem is not found in the empty JSON string", WebBackendConnectionListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebBackendConnectionListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebBackendConnectionListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebBackendConnectionListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      // validate the required field `destination`
      DestinationSnippetRead.validateJsonElement(jsonObj.get("destination"));
      // validate the optional field `latestSyncJobStatus`
      if (jsonObj.get("latestSyncJobStatus") != null && !jsonObj.get("latestSyncJobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("latestSyncJobStatus"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `scheduleData`
      if (jsonObj.get("scheduleData") != null && !jsonObj.get("scheduleData").isJsonNull()) {
        ConnectionScheduleData.validateJsonElement(jsonObj.get("scheduleData"));
      }
      // validate the optional field `scheduleType`
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) {
        ConnectionScheduleType.validateJsonElement(jsonObj.get("scheduleType"));
      }
      // validate the required field `schemaChange`
      SchemaChange.validateJsonElement(jsonObj.get("schemaChange"));
      // validate the required field `source`
      SourceSnippetRead.validateJsonElement(jsonObj.get("source"));
      // validate the required field `status`
      ConnectionStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebBackendConnectionListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebBackendConnectionListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebBackendConnectionListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebBackendConnectionListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<WebBackendConnectionListItem>() {
           @Override
           public void write(JsonWriter out, WebBackendConnectionListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebBackendConnectionListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebBackendConnectionListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebBackendConnectionListItem
   * @throws IOException if the JSON string is invalid with respect to WebBackendConnectionListItem
   */
  public static WebBackendConnectionListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebBackendConnectionListItem.class);
  }

  /**
   * Convert an instance of WebBackendConnectionListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

