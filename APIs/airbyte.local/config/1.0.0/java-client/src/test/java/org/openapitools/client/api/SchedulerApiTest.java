/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckConnectionRead;
import org.openapitools.client.model.DestinationCoreConfig;
import org.openapitools.client.model.InvalidInputExceptionInfo;
import org.openapitools.client.model.SourceCoreConfig;
import org.openapitools.client.model.SourceDiscoverSchemaRead;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SchedulerApi
 */
@Disabled
public class SchedulerApiTest {

    private final SchedulerApi api = new SchedulerApi();

    /**
     * Run check connection for a given destination configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeDestinationCheckConnectionTest() throws ApiException {
        DestinationCoreConfig destinationCoreConfig = null;
        CheckConnectionRead response = api.executeDestinationCheckConnection(destinationCoreConfig);
        // TODO: test validations
    }

    /**
     * Run check connection for a given source configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeSourceCheckConnectionTest() throws ApiException {
        SourceCoreConfig sourceCoreConfig = null;
        CheckConnectionRead response = api.executeSourceCheckConnection(sourceCoreConfig);
        // TODO: test validations
    }

    /**
     * Run discover schema for a given source a source configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeSourceDiscoverSchemaTest() throws ApiException {
        SourceCoreConfig sourceCoreConfig = null;
        SourceDiscoverSchemaRead response = api.executeSourceDiscoverSchema(sourceCoreConfig);
        // TODO: test validations
    }

}
