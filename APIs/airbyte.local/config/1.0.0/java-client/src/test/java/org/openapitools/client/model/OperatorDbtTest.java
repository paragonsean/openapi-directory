/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OperatorDbt
 */
public class OperatorDbtTest {
    private final OperatorDbt model = new OperatorDbt();

    /**
     * Model tests for OperatorDbt
     */
    @Test
    public void testOperatorDbt() {
        // TODO: test OperatorDbt
    }

    /**
     * Test the property 'dbtArguments'
     */
    @Test
    public void dbtArgumentsTest() {
        // TODO: test dbtArguments
    }

    /**
     * Test the property 'dockerImage'
     */
    @Test
    public void dockerImageTest() {
        // TODO: test dockerImage
    }

    /**
     * Test the property 'gitRepoBranch'
     */
    @Test
    public void gitRepoBranchTest() {
        // TODO: test gitRepoBranch
    }

    /**
     * Test the property 'gitRepoUrl'
     */
    @Test
    public void gitRepoUrlTest() {
        // TODO: test gitRepoUrl
    }

}
