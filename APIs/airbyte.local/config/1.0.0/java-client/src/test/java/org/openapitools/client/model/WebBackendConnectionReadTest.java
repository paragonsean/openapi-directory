/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AirbyteCatalog;
import org.openapitools.client.model.CatalogDiff;
import org.openapitools.client.model.ConnectionSchedule;
import org.openapitools.client.model.ConnectionScheduleData;
import org.openapitools.client.model.ConnectionScheduleType;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.DestinationRead;
import org.openapitools.client.model.Geography;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.NamespaceDefinitionType;
import org.openapitools.client.model.NonBreakingChangesPreference;
import org.openapitools.client.model.OperationRead;
import org.openapitools.client.model.ResourceRequirements;
import org.openapitools.client.model.SchemaChange;
import org.openapitools.client.model.SourceRead;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for WebBackendConnectionRead
 */
public class WebBackendConnectionReadTest {
    private final WebBackendConnectionRead model = new WebBackendConnectionRead();

    /**
     * Model tests for WebBackendConnectionRead
     */
    @Test
    public void testWebBackendConnectionRead() {
        // TODO: test WebBackendConnectionRead
    }

    /**
     * Test the property 'catalogDiff'
     */
    @Test
    public void catalogDiffTest() {
        // TODO: test catalogDiff
    }

    /**
     * Test the property 'catalogId'
     */
    @Test
    public void catalogIdTest() {
        // TODO: test catalogId
    }

    /**
     * Test the property 'connectionId'
     */
    @Test
    public void connectionIdTest() {
        // TODO: test connectionId
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'destinationId'
     */
    @Test
    public void destinationIdTest() {
        // TODO: test destinationId
    }

    /**
     * Test the property 'geography'
     */
    @Test
    public void geographyTest() {
        // TODO: test geography
    }

    /**
     * Test the property 'isSyncing'
     */
    @Test
    public void isSyncingTest() {
        // TODO: test isSyncing
    }

    /**
     * Test the property 'latestSyncJobCreatedAt'
     */
    @Test
    public void latestSyncJobCreatedAtTest() {
        // TODO: test latestSyncJobCreatedAt
    }

    /**
     * Test the property 'latestSyncJobStatus'
     */
    @Test
    public void latestSyncJobStatusTest() {
        // TODO: test latestSyncJobStatus
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'namespaceDefinition'
     */
    @Test
    public void namespaceDefinitionTest() {
        // TODO: test namespaceDefinition
    }

    /**
     * Test the property 'namespaceFormat'
     */
    @Test
    public void namespaceFormatTest() {
        // TODO: test namespaceFormat
    }

    /**
     * Test the property 'nonBreakingChangesPreference'
     */
    @Test
    public void nonBreakingChangesPreferenceTest() {
        // TODO: test nonBreakingChangesPreference
    }

    /**
     * Test the property 'notifySchemaChanges'
     */
    @Test
    public void notifySchemaChangesTest() {
        // TODO: test notifySchemaChanges
    }

    /**
     * Test the property 'operationIds'
     */
    @Test
    public void operationIdsTest() {
        // TODO: test operationIds
    }

    /**
     * Test the property 'operations'
     */
    @Test
    public void operationsTest() {
        // TODO: test operations
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'resourceRequirements'
     */
    @Test
    public void resourceRequirementsTest() {
        // TODO: test resourceRequirements
    }

    /**
     * Test the property 'schedule'
     */
    @Test
    public void scheduleTest() {
        // TODO: test schedule
    }

    /**
     * Test the property 'scheduleData'
     */
    @Test
    public void scheduleDataTest() {
        // TODO: test scheduleData
    }

    /**
     * Test the property 'scheduleType'
     */
    @Test
    public void scheduleTypeTest() {
        // TODO: test scheduleType
    }

    /**
     * Test the property 'schemaChange'
     */
    @Test
    public void schemaChangeTest() {
        // TODO: test schemaChange
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'syncCatalog'
     */
    @Test
    public void syncCatalogTest() {
        // TODO: test syncCatalog
    }

}
