# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_add import FieldAdd
from openapi_server.models.field_remove import FieldRemove
from openapi_server.models.field_schema_update import FieldSchemaUpdate
from openapi_server import util


class FieldTransform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_field: FieldAdd=None, breaking: bool=None, field_name: List[str]=None, remove_field: FieldRemove=None, transform_type: str=None, update_field_schema: FieldSchemaUpdate=None):
        """FieldTransform - a model defined in OpenAPI

        :param add_field: The add_field of this FieldTransform.
        :param breaking: The breaking of this FieldTransform.
        :param field_name: The field_name of this FieldTransform.
        :param remove_field: The remove_field of this FieldTransform.
        :param transform_type: The transform_type of this FieldTransform.
        :param update_field_schema: The update_field_schema of this FieldTransform.
        """
        self.openapi_types = {
            'add_field': FieldAdd,
            'breaking': bool,
            'field_name': List[str],
            'remove_field': FieldRemove,
            'transform_type': str,
            'update_field_schema': FieldSchemaUpdate
        }

        self.attribute_map = {
            'add_field': 'addField',
            'breaking': 'breaking',
            'field_name': 'fieldName',
            'remove_field': 'removeField',
            'transform_type': 'transformType',
            'update_field_schema': 'updateFieldSchema'
        }

        self._add_field = add_field
        self._breaking = breaking
        self._field_name = field_name
        self._remove_field = remove_field
        self._transform_type = transform_type
        self._update_field_schema = update_field_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldTransform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldTransform of this FieldTransform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_field(self):
        """Gets the add_field of this FieldTransform.


        :return: The add_field of this FieldTransform.
        :rtype: FieldAdd
        """
        return self._add_field

    @add_field.setter
    def add_field(self, add_field):
        """Sets the add_field of this FieldTransform.


        :param add_field: The add_field of this FieldTransform.
        :type add_field: FieldAdd
        """

        self._add_field = add_field

    @property
    def breaking(self):
        """Gets the breaking of this FieldTransform.


        :return: The breaking of this FieldTransform.
        :rtype: bool
        """
        return self._breaking

    @breaking.setter
    def breaking(self, breaking):
        """Sets the breaking of this FieldTransform.


        :param breaking: The breaking of this FieldTransform.
        :type breaking: bool
        """
        if breaking is None:
            raise ValueError("Invalid value for `breaking`, must not be `None`")

        self._breaking = breaking

    @property
    def field_name(self):
        """Gets the field_name of this FieldTransform.

        A field name is a list of strings that form the path to the field.

        :return: The field_name of this FieldTransform.
        :rtype: List[str]
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this FieldTransform.

        A field name is a list of strings that form the path to the field.

        :param field_name: The field_name of this FieldTransform.
        :type field_name: List[str]
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def remove_field(self):
        """Gets the remove_field of this FieldTransform.


        :return: The remove_field of this FieldTransform.
        :rtype: FieldRemove
        """
        return self._remove_field

    @remove_field.setter
    def remove_field(self, remove_field):
        """Sets the remove_field of this FieldTransform.


        :param remove_field: The remove_field of this FieldTransform.
        :type remove_field: FieldRemove
        """

        self._remove_field = remove_field

    @property
    def transform_type(self):
        """Gets the transform_type of this FieldTransform.


        :return: The transform_type of this FieldTransform.
        :rtype: str
        """
        return self._transform_type

    @transform_type.setter
    def transform_type(self, transform_type):
        """Sets the transform_type of this FieldTransform.


        :param transform_type: The transform_type of this FieldTransform.
        :type transform_type: str
        """
        allowed_values = ["add_field", "remove_field", "update_field_schema"]  # noqa: E501
        if transform_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transform_type` ({0}), must be one of {1}"
                .format(transform_type, allowed_values)
            )

        self._transform_type = transform_type

    @property
    def update_field_schema(self):
        """Gets the update_field_schema of this FieldTransform.


        :return: The update_field_schema of this FieldTransform.
        :rtype: FieldSchemaUpdate
        """
        return self._update_field_schema

    @update_field_schema.setter
    def update_field_schema(self, update_field_schema):
        """Sets the update_field_schema of this FieldTransform.


        :param update_field_schema: The update_field_schema of this FieldTransform.
        :type update_field_schema: FieldSchemaUpdate
        """

        self._update_field_schema = update_field_schema
