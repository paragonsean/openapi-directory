# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_failure_summary import AttemptFailureSummary
from openapi_server.models.attempt_stats import AttemptStats
from openapi_server.models.attempt_status import AttemptStatus
from openapi_server.models.attempt_stream_stats import AttemptStreamStats
from openapi_server import util


class AttemptRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_synced: int=None, created_at: int=None, ended_at: int=None, failure_summary: AttemptFailureSummary=None, id: int=None, records_synced: int=None, status: AttemptStatus=None, stream_stats: List[AttemptStreamStats]=None, total_stats: AttemptStats=None, updated_at: int=None):
        """AttemptRead - a model defined in OpenAPI

        :param bytes_synced: The bytes_synced of this AttemptRead.
        :param created_at: The created_at of this AttemptRead.
        :param ended_at: The ended_at of this AttemptRead.
        :param failure_summary: The failure_summary of this AttemptRead.
        :param id: The id of this AttemptRead.
        :param records_synced: The records_synced of this AttemptRead.
        :param status: The status of this AttemptRead.
        :param stream_stats: The stream_stats of this AttemptRead.
        :param total_stats: The total_stats of this AttemptRead.
        :param updated_at: The updated_at of this AttemptRead.
        """
        self.openapi_types = {
            'bytes_synced': int,
            'created_at': int,
            'ended_at': int,
            'failure_summary': AttemptFailureSummary,
            'id': int,
            'records_synced': int,
            'status': AttemptStatus,
            'stream_stats': List[AttemptStreamStats],
            'total_stats': AttemptStats,
            'updated_at': int
        }

        self.attribute_map = {
            'bytes_synced': 'bytesSynced',
            'created_at': 'createdAt',
            'ended_at': 'endedAt',
            'failure_summary': 'failureSummary',
            'id': 'id',
            'records_synced': 'recordsSynced',
            'status': 'status',
            'stream_stats': 'streamStats',
            'total_stats': 'totalStats',
            'updated_at': 'updatedAt'
        }

        self._bytes_synced = bytes_synced
        self._created_at = created_at
        self._ended_at = ended_at
        self._failure_summary = failure_summary
        self._id = id
        self._records_synced = records_synced
        self._status = status
        self._stream_stats = stream_stats
        self._total_stats = total_stats
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptRead of this AttemptRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_synced(self):
        """Gets the bytes_synced of this AttemptRead.


        :return: The bytes_synced of this AttemptRead.
        :rtype: int
        """
        return self._bytes_synced

    @bytes_synced.setter
    def bytes_synced(self, bytes_synced):
        """Sets the bytes_synced of this AttemptRead.


        :param bytes_synced: The bytes_synced of this AttemptRead.
        :type bytes_synced: int
        """

        self._bytes_synced = bytes_synced

    @property
    def created_at(self):
        """Gets the created_at of this AttemptRead.


        :return: The created_at of this AttemptRead.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AttemptRead.


        :param created_at: The created_at of this AttemptRead.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this AttemptRead.


        :return: The ended_at of this AttemptRead.
        :rtype: int
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this AttemptRead.


        :param ended_at: The ended_at of this AttemptRead.
        :type ended_at: int
        """

        self._ended_at = ended_at

    @property
    def failure_summary(self):
        """Gets the failure_summary of this AttemptRead.


        :return: The failure_summary of this AttemptRead.
        :rtype: AttemptFailureSummary
        """
        return self._failure_summary

    @failure_summary.setter
    def failure_summary(self, failure_summary):
        """Sets the failure_summary of this AttemptRead.


        :param failure_summary: The failure_summary of this AttemptRead.
        :type failure_summary: AttemptFailureSummary
        """

        self._failure_summary = failure_summary

    @property
    def id(self):
        """Gets the id of this AttemptRead.


        :return: The id of this AttemptRead.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttemptRead.


        :param id: The id of this AttemptRead.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def records_synced(self):
        """Gets the records_synced of this AttemptRead.


        :return: The records_synced of this AttemptRead.
        :rtype: int
        """
        return self._records_synced

    @records_synced.setter
    def records_synced(self, records_synced):
        """Sets the records_synced of this AttemptRead.


        :param records_synced: The records_synced of this AttemptRead.
        :type records_synced: int
        """

        self._records_synced = records_synced

    @property
    def status(self):
        """Gets the status of this AttemptRead.


        :return: The status of this AttemptRead.
        :rtype: AttemptStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AttemptRead.


        :param status: The status of this AttemptRead.
        :type status: AttemptStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def stream_stats(self):
        """Gets the stream_stats of this AttemptRead.


        :return: The stream_stats of this AttemptRead.
        :rtype: List[AttemptStreamStats]
        """
        return self._stream_stats

    @stream_stats.setter
    def stream_stats(self, stream_stats):
        """Sets the stream_stats of this AttemptRead.


        :param stream_stats: The stream_stats of this AttemptRead.
        :type stream_stats: List[AttemptStreamStats]
        """

        self._stream_stats = stream_stats

    @property
    def total_stats(self):
        """Gets the total_stats of this AttemptRead.


        :return: The total_stats of this AttemptRead.
        :rtype: AttemptStats
        """
        return self._total_stats

    @total_stats.setter
    def total_stats(self, total_stats):
        """Sets the total_stats of this AttemptRead.


        :param total_stats: The total_stats of this AttemptRead.
        :type total_stats: AttemptStats
        """

        self._total_stats = total_stats

    @property
    def updated_at(self):
        """Gets the updated_at of this AttemptRead.


        :return: The updated_at of this AttemptRead.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AttemptRead.


        :param updated_at: The updated_at of this AttemptRead.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
