# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttemptStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_emitted: int=None, estimated_bytes: int=None, estimated_records: int=None, records_committed: int=None, records_emitted: int=None, state_messages_emitted: int=None):
        """AttemptStats - a model defined in OpenAPI

        :param bytes_emitted: The bytes_emitted of this AttemptStats.
        :param estimated_bytes: The estimated_bytes of this AttemptStats.
        :param estimated_records: The estimated_records of this AttemptStats.
        :param records_committed: The records_committed of this AttemptStats.
        :param records_emitted: The records_emitted of this AttemptStats.
        :param state_messages_emitted: The state_messages_emitted of this AttemptStats.
        """
        self.openapi_types = {
            'bytes_emitted': int,
            'estimated_bytes': int,
            'estimated_records': int,
            'records_committed': int,
            'records_emitted': int,
            'state_messages_emitted': int
        }

        self.attribute_map = {
            'bytes_emitted': 'bytesEmitted',
            'estimated_bytes': 'estimatedBytes',
            'estimated_records': 'estimatedRecords',
            'records_committed': 'recordsCommitted',
            'records_emitted': 'recordsEmitted',
            'state_messages_emitted': 'stateMessagesEmitted'
        }

        self._bytes_emitted = bytes_emitted
        self._estimated_bytes = estimated_bytes
        self._estimated_records = estimated_records
        self._records_committed = records_committed
        self._records_emitted = records_emitted
        self._state_messages_emitted = state_messages_emitted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptStats of this AttemptStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_emitted(self):
        """Gets the bytes_emitted of this AttemptStats.


        :return: The bytes_emitted of this AttemptStats.
        :rtype: int
        """
        return self._bytes_emitted

    @bytes_emitted.setter
    def bytes_emitted(self, bytes_emitted):
        """Sets the bytes_emitted of this AttemptStats.


        :param bytes_emitted: The bytes_emitted of this AttemptStats.
        :type bytes_emitted: int
        """

        self._bytes_emitted = bytes_emitted

    @property
    def estimated_bytes(self):
        """Gets the estimated_bytes of this AttemptStats.


        :return: The estimated_bytes of this AttemptStats.
        :rtype: int
        """
        return self._estimated_bytes

    @estimated_bytes.setter
    def estimated_bytes(self, estimated_bytes):
        """Sets the estimated_bytes of this AttemptStats.


        :param estimated_bytes: The estimated_bytes of this AttemptStats.
        :type estimated_bytes: int
        """

        self._estimated_bytes = estimated_bytes

    @property
    def estimated_records(self):
        """Gets the estimated_records of this AttemptStats.


        :return: The estimated_records of this AttemptStats.
        :rtype: int
        """
        return self._estimated_records

    @estimated_records.setter
    def estimated_records(self, estimated_records):
        """Sets the estimated_records of this AttemptStats.


        :param estimated_records: The estimated_records of this AttemptStats.
        :type estimated_records: int
        """

        self._estimated_records = estimated_records

    @property
    def records_committed(self):
        """Gets the records_committed of this AttemptStats.


        :return: The records_committed of this AttemptStats.
        :rtype: int
        """
        return self._records_committed

    @records_committed.setter
    def records_committed(self, records_committed):
        """Sets the records_committed of this AttemptStats.


        :param records_committed: The records_committed of this AttemptStats.
        :type records_committed: int
        """

        self._records_committed = records_committed

    @property
    def records_emitted(self):
        """Gets the records_emitted of this AttemptStats.


        :return: The records_emitted of this AttemptStats.
        :rtype: int
        """
        return self._records_emitted

    @records_emitted.setter
    def records_emitted(self, records_emitted):
        """Sets the records_emitted of this AttemptStats.


        :param records_emitted: The records_emitted of this AttemptStats.
        :type records_emitted: int
        """

        self._records_emitted = records_emitted

    @property
    def state_messages_emitted(self):
        """Gets the state_messages_emitted of this AttemptStats.


        :return: The state_messages_emitted of this AttemptStats.
        :rtype: int
        """
        return self._state_messages_emitted

    @state_messages_emitted.setter
    def state_messages_emitted(self, state_messages_emitted):
        """Sets the state_messages_emitted of this AttemptStats.


        :param state_messages_emitted: The state_messages_emitted of this AttemptStats.
        :type state_messages_emitted: int
        """

        self._state_messages_emitted = state_messages_emitted
