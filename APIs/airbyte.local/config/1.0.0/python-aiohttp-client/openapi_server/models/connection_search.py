# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_schedule import ConnectionSchedule
from openapi_server.models.connection_schedule_data import ConnectionScheduleData
from openapi_server.models.connection_schedule_type import ConnectionScheduleType
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.destination_search import DestinationSearch
from openapi_server.models.namespace_definition_type import NamespaceDefinitionType
from openapi_server.models.source_search import SourceSearch
from openapi_server import util


class ConnectionSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, destination: DestinationSearch=None, destination_id: str=None, name: str=None, namespace_definition: NamespaceDefinitionType=None, namespace_format: str=None, prefix: str=None, schedule: ConnectionSchedule=None, schedule_data: ConnectionScheduleData=None, schedule_type: ConnectionScheduleType=None, source: SourceSearch=None, source_id: str=None, status: ConnectionStatus=None):
        """ConnectionSearch - a model defined in OpenAPI

        :param connection_id: The connection_id of this ConnectionSearch.
        :param destination: The destination of this ConnectionSearch.
        :param destination_id: The destination_id of this ConnectionSearch.
        :param name: The name of this ConnectionSearch.
        :param namespace_definition: The namespace_definition of this ConnectionSearch.
        :param namespace_format: The namespace_format of this ConnectionSearch.
        :param prefix: The prefix of this ConnectionSearch.
        :param schedule: The schedule of this ConnectionSearch.
        :param schedule_data: The schedule_data of this ConnectionSearch.
        :param schedule_type: The schedule_type of this ConnectionSearch.
        :param source: The source of this ConnectionSearch.
        :param source_id: The source_id of this ConnectionSearch.
        :param status: The status of this ConnectionSearch.
        """
        self.openapi_types = {
            'connection_id': str,
            'destination': DestinationSearch,
            'destination_id': str,
            'name': str,
            'namespace_definition': NamespaceDefinitionType,
            'namespace_format': str,
            'prefix': str,
            'schedule': ConnectionSchedule,
            'schedule_data': ConnectionScheduleData,
            'schedule_type': ConnectionScheduleType,
            'source': SourceSearch,
            'source_id': str,
            'status': ConnectionStatus
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'destination': 'destination',
            'destination_id': 'destinationId',
            'name': 'name',
            'namespace_definition': 'namespaceDefinition',
            'namespace_format': 'namespaceFormat',
            'prefix': 'prefix',
            'schedule': 'schedule',
            'schedule_data': 'scheduleData',
            'schedule_type': 'scheduleType',
            'source': 'source',
            'source_id': 'sourceId',
            'status': 'status'
        }

        self._connection_id = connection_id
        self._destination = destination
        self._destination_id = destination_id
        self._name = name
        self._namespace_definition = namespace_definition
        self._namespace_format = namespace_format
        self._prefix = prefix
        self._schedule = schedule
        self._schedule_data = schedule_data
        self._schedule_type = schedule_type
        self._source = source
        self._source_id = source_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionSearch of this ConnectionSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this ConnectionSearch.


        :return: The connection_id of this ConnectionSearch.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ConnectionSearch.


        :param connection_id: The connection_id of this ConnectionSearch.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def destination(self):
        """Gets the destination of this ConnectionSearch.


        :return: The destination of this ConnectionSearch.
        :rtype: DestinationSearch
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectionSearch.


        :param destination: The destination of this ConnectionSearch.
        :type destination: DestinationSearch
        """

        self._destination = destination

    @property
    def destination_id(self):
        """Gets the destination_id of this ConnectionSearch.


        :return: The destination_id of this ConnectionSearch.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this ConnectionSearch.


        :param destination_id: The destination_id of this ConnectionSearch.
        :type destination_id: str
        """

        self._destination_id = destination_id

    @property
    def name(self):
        """Gets the name of this ConnectionSearch.


        :return: The name of this ConnectionSearch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionSearch.


        :param name: The name of this ConnectionSearch.
        :type name: str
        """

        self._name = name

    @property
    def namespace_definition(self):
        """Gets the namespace_definition of this ConnectionSearch.


        :return: The namespace_definition of this ConnectionSearch.
        :rtype: NamespaceDefinitionType
        """
        return self._namespace_definition

    @namespace_definition.setter
    def namespace_definition(self, namespace_definition):
        """Sets the namespace_definition of this ConnectionSearch.


        :param namespace_definition: The namespace_definition of this ConnectionSearch.
        :type namespace_definition: NamespaceDefinitionType
        """

        self._namespace_definition = namespace_definition

    @property
    def namespace_format(self):
        """Gets the namespace_format of this ConnectionSearch.

        Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.

        :return: The namespace_format of this ConnectionSearch.
        :rtype: str
        """
        return self._namespace_format

    @namespace_format.setter
    def namespace_format(self, namespace_format):
        """Sets the namespace_format of this ConnectionSearch.

        Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.

        :param namespace_format: The namespace_format of this ConnectionSearch.
        :type namespace_format: str
        """

        self._namespace_format = namespace_format

    @property
    def prefix(self):
        """Gets the prefix of this ConnectionSearch.

        Prefix that will be prepended to the name of each stream when it is written to the destination.

        :return: The prefix of this ConnectionSearch.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ConnectionSearch.

        Prefix that will be prepended to the name of each stream when it is written to the destination.

        :param prefix: The prefix of this ConnectionSearch.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def schedule(self):
        """Gets the schedule of this ConnectionSearch.


        :return: The schedule of this ConnectionSearch.
        :rtype: ConnectionSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ConnectionSearch.


        :param schedule: The schedule of this ConnectionSearch.
        :type schedule: ConnectionSchedule
        """

        self._schedule = schedule

    @property
    def schedule_data(self):
        """Gets the schedule_data of this ConnectionSearch.


        :return: The schedule_data of this ConnectionSearch.
        :rtype: ConnectionScheduleData
        """
        return self._schedule_data

    @schedule_data.setter
    def schedule_data(self, schedule_data):
        """Sets the schedule_data of this ConnectionSearch.


        :param schedule_data: The schedule_data of this ConnectionSearch.
        :type schedule_data: ConnectionScheduleData
        """

        self._schedule_data = schedule_data

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ConnectionSearch.


        :return: The schedule_type of this ConnectionSearch.
        :rtype: ConnectionScheduleType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ConnectionSearch.


        :param schedule_type: The schedule_type of this ConnectionSearch.
        :type schedule_type: ConnectionScheduleType
        """

        self._schedule_type = schedule_type

    @property
    def source(self):
        """Gets the source of this ConnectionSearch.


        :return: The source of this ConnectionSearch.
        :rtype: SourceSearch
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectionSearch.


        :param source: The source of this ConnectionSearch.
        :type source: SourceSearch
        """

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this ConnectionSearch.


        :return: The source_id of this ConnectionSearch.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ConnectionSearch.


        :param source_id: The source_id of this ConnectionSearch.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def status(self):
        """Gets the status of this ConnectionSearch.


        :return: The status of this ConnectionSearch.
        :rtype: ConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectionSearch.


        :param status: The status of this ConnectionSearch.
        :type status: ConnectionStatus
        """

        self._status = status
