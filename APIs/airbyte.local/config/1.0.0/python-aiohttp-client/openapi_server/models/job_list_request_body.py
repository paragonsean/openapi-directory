# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_config_type import JobConfigType
from openapi_server.models.pagination import Pagination
from openapi_server import util


class JobListRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_id: str=None, config_types: List[JobConfigType]=None, including_job_id: int=None, pagination: Pagination=None):
        """JobListRequestBody - a model defined in OpenAPI

        :param config_id: The config_id of this JobListRequestBody.
        :param config_types: The config_types of this JobListRequestBody.
        :param including_job_id: The including_job_id of this JobListRequestBody.
        :param pagination: The pagination of this JobListRequestBody.
        """
        self.openapi_types = {
            'config_id': str,
            'config_types': List[JobConfigType],
            'including_job_id': int,
            'pagination': Pagination
        }

        self.attribute_map = {
            'config_id': 'configId',
            'config_types': 'configTypes',
            'including_job_id': 'includingJobId',
            'pagination': 'pagination'
        }

        self._config_id = config_id
        self._config_types = config_types
        self._including_job_id = including_job_id
        self._pagination = pagination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobListRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobListRequestBody of this JobListRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_id(self):
        """Gets the config_id of this JobListRequestBody.


        :return: The config_id of this JobListRequestBody.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this JobListRequestBody.


        :param config_id: The config_id of this JobListRequestBody.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def config_types(self):
        """Gets the config_types of this JobListRequestBody.


        :return: The config_types of this JobListRequestBody.
        :rtype: List[JobConfigType]
        """
        return self._config_types

    @config_types.setter
    def config_types(self, config_types):
        """Sets the config_types of this JobListRequestBody.


        :param config_types: The config_types of this JobListRequestBody.
        :type config_types: List[JobConfigType]
        """
        if config_types is None:
            raise ValueError("Invalid value for `config_types`, must not be `None`")

        self._config_types = config_types

    @property
    def including_job_id(self):
        """Gets the including_job_id of this JobListRequestBody.


        :return: The including_job_id of this JobListRequestBody.
        :rtype: int
        """
        return self._including_job_id

    @including_job_id.setter
    def including_job_id(self, including_job_id):
        """Sets the including_job_id of this JobListRequestBody.


        :param including_job_id: The including_job_id of this JobListRequestBody.
        :type including_job_id: int
        """

        self._including_job_id = including_job_id

    @property
    def pagination(self):
        """Gets the pagination of this JobListRequestBody.


        :return: The pagination of this JobListRequestBody.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this JobListRequestBody.


        :param pagination: The pagination of this JobListRequestBody.
        :type pagination: Pagination
        """

        self._pagination = pagination
