# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_failure_reason import AttemptFailureReason
from openapi_server import util


class AttemptFailureSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failures: List[AttemptFailureReason]=None, partial_success: bool=None):
        """AttemptFailureSummary - a model defined in OpenAPI

        :param failures: The failures of this AttemptFailureSummary.
        :param partial_success: The partial_success of this AttemptFailureSummary.
        """
        self.openapi_types = {
            'failures': List[AttemptFailureReason],
            'partial_success': bool
        }

        self.attribute_map = {
            'failures': 'failures',
            'partial_success': 'partialSuccess'
        }

        self._failures = failures
        self._partial_success = partial_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptFailureSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptFailureSummary of this AttemptFailureSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failures(self):
        """Gets the failures of this AttemptFailureSummary.


        :return: The failures of this AttemptFailureSummary.
        :rtype: List[AttemptFailureReason]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this AttemptFailureSummary.


        :param failures: The failures of this AttemptFailureSummary.
        :type failures: List[AttemptFailureReason]
        """
        if failures is None:
            raise ValueError("Invalid value for `failures`, must not be `None`")

        self._failures = failures

    @property
    def partial_success(self):
        """Gets the partial_success of this AttemptFailureSummary.

        True if the number of committed records for this attempt was greater than 0. False if 0 records were committed. If not set, the number of committed records is unknown.

        :return: The partial_success of this AttemptFailureSummary.
        :rtype: bool
        """
        return self._partial_success

    @partial_success.setter
    def partial_success(self, partial_success):
        """Sets the partial_success of this AttemptFailureSummary.

        True if the number of committed records for this attempt was greater than 0. False if 0 records were committed. If not set, the number of committed records is unknown.

        :param partial_success: The partial_success of this AttemptFailureSummary.
        :type partial_success: bool
        """

        self._partial_success = partial_success
