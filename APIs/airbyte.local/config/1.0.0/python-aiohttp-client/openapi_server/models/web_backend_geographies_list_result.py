# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geography import Geography
from openapi_server import util


class WebBackendGeographiesListResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geographies: List[Geography]=None):
        """WebBackendGeographiesListResult - a model defined in OpenAPI

        :param geographies: The geographies of this WebBackendGeographiesListResult.
        """
        self.openapi_types = {
            'geographies': List[Geography]
        }

        self.attribute_map = {
            'geographies': 'geographies'
        }

        self._geographies = geographies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebBackendGeographiesListResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebBackendGeographiesListResult of this WebBackendGeographiesListResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geographies(self):
        """Gets the geographies of this WebBackendGeographiesListResult.


        :return: The geographies of this WebBackendGeographiesListResult.
        :rtype: List[Geography]
        """
        return self._geographies

    @geographies.setter
    def geographies(self, geographies):
        """Sets the geographies of this WebBackendGeographiesListResult.


        :param geographies: The geographies of this WebBackendGeographiesListResult.
        :type geographies: List[Geography]
        """
        if geographies is None:
            raise ValueError("Invalid value for `geographies`, must not be `None`")

        self._geographies = geographies
