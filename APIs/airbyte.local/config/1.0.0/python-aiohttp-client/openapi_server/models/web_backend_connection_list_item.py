# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_schedule_data import ConnectionScheduleData
from openapi_server.models.connection_schedule_type import ConnectionScheduleType
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.destination_snippet_read import DestinationSnippetRead
from openapi_server.models.job_status import JobStatus
from openapi_server.models.schema_change import SchemaChange
from openapi_server.models.source_snippet_read import SourceSnippetRead
from openapi_server import util


class WebBackendConnectionListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, destination: DestinationSnippetRead=None, is_syncing: bool=None, latest_sync_job_created_at: int=None, latest_sync_job_status: JobStatus=None, name: str=None, schedule_data: ConnectionScheduleData=None, schedule_type: ConnectionScheduleType=None, schema_change: SchemaChange=None, source: SourceSnippetRead=None, status: ConnectionStatus=None):
        """WebBackendConnectionListItem - a model defined in OpenAPI

        :param connection_id: The connection_id of this WebBackendConnectionListItem.
        :param destination: The destination of this WebBackendConnectionListItem.
        :param is_syncing: The is_syncing of this WebBackendConnectionListItem.
        :param latest_sync_job_created_at: The latest_sync_job_created_at of this WebBackendConnectionListItem.
        :param latest_sync_job_status: The latest_sync_job_status of this WebBackendConnectionListItem.
        :param name: The name of this WebBackendConnectionListItem.
        :param schedule_data: The schedule_data of this WebBackendConnectionListItem.
        :param schedule_type: The schedule_type of this WebBackendConnectionListItem.
        :param schema_change: The schema_change of this WebBackendConnectionListItem.
        :param source: The source of this WebBackendConnectionListItem.
        :param status: The status of this WebBackendConnectionListItem.
        """
        self.openapi_types = {
            'connection_id': str,
            'destination': DestinationSnippetRead,
            'is_syncing': bool,
            'latest_sync_job_created_at': int,
            'latest_sync_job_status': JobStatus,
            'name': str,
            'schedule_data': ConnectionScheduleData,
            'schedule_type': ConnectionScheduleType,
            'schema_change': SchemaChange,
            'source': SourceSnippetRead,
            'status': ConnectionStatus
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'destination': 'destination',
            'is_syncing': 'isSyncing',
            'latest_sync_job_created_at': 'latestSyncJobCreatedAt',
            'latest_sync_job_status': 'latestSyncJobStatus',
            'name': 'name',
            'schedule_data': 'scheduleData',
            'schedule_type': 'scheduleType',
            'schema_change': 'schemaChange',
            'source': 'source',
            'status': 'status'
        }

        self._connection_id = connection_id
        self._destination = destination
        self._is_syncing = is_syncing
        self._latest_sync_job_created_at = latest_sync_job_created_at
        self._latest_sync_job_status = latest_sync_job_status
        self._name = name
        self._schedule_data = schedule_data
        self._schedule_type = schedule_type
        self._schema_change = schema_change
        self._source = source
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebBackendConnectionListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebBackendConnectionListItem of this WebBackendConnectionListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this WebBackendConnectionListItem.


        :return: The connection_id of this WebBackendConnectionListItem.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this WebBackendConnectionListItem.


        :param connection_id: The connection_id of this WebBackendConnectionListItem.
        :type connection_id: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")

        self._connection_id = connection_id

    @property
    def destination(self):
        """Gets the destination of this WebBackendConnectionListItem.


        :return: The destination of this WebBackendConnectionListItem.
        :rtype: DestinationSnippetRead
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this WebBackendConnectionListItem.


        :param destination: The destination of this WebBackendConnectionListItem.
        :type destination: DestinationSnippetRead
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def is_syncing(self):
        """Gets the is_syncing of this WebBackendConnectionListItem.


        :return: The is_syncing of this WebBackendConnectionListItem.
        :rtype: bool
        """
        return self._is_syncing

    @is_syncing.setter
    def is_syncing(self, is_syncing):
        """Sets the is_syncing of this WebBackendConnectionListItem.


        :param is_syncing: The is_syncing of this WebBackendConnectionListItem.
        :type is_syncing: bool
        """
        if is_syncing is None:
            raise ValueError("Invalid value for `is_syncing`, must not be `None`")

        self._is_syncing = is_syncing

    @property
    def latest_sync_job_created_at(self):
        """Gets the latest_sync_job_created_at of this WebBackendConnectionListItem.

        epoch time of the latest sync job. null if no sync job has taken place.

        :return: The latest_sync_job_created_at of this WebBackendConnectionListItem.
        :rtype: int
        """
        return self._latest_sync_job_created_at

    @latest_sync_job_created_at.setter
    def latest_sync_job_created_at(self, latest_sync_job_created_at):
        """Sets the latest_sync_job_created_at of this WebBackendConnectionListItem.

        epoch time of the latest sync job. null if no sync job has taken place.

        :param latest_sync_job_created_at: The latest_sync_job_created_at of this WebBackendConnectionListItem.
        :type latest_sync_job_created_at: int
        """

        self._latest_sync_job_created_at = latest_sync_job_created_at

    @property
    def latest_sync_job_status(self):
        """Gets the latest_sync_job_status of this WebBackendConnectionListItem.


        :return: The latest_sync_job_status of this WebBackendConnectionListItem.
        :rtype: JobStatus
        """
        return self._latest_sync_job_status

    @latest_sync_job_status.setter
    def latest_sync_job_status(self, latest_sync_job_status):
        """Sets the latest_sync_job_status of this WebBackendConnectionListItem.


        :param latest_sync_job_status: The latest_sync_job_status of this WebBackendConnectionListItem.
        :type latest_sync_job_status: JobStatus
        """

        self._latest_sync_job_status = latest_sync_job_status

    @property
    def name(self):
        """Gets the name of this WebBackendConnectionListItem.


        :return: The name of this WebBackendConnectionListItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebBackendConnectionListItem.


        :param name: The name of this WebBackendConnectionListItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def schedule_data(self):
        """Gets the schedule_data of this WebBackendConnectionListItem.


        :return: The schedule_data of this WebBackendConnectionListItem.
        :rtype: ConnectionScheduleData
        """
        return self._schedule_data

    @schedule_data.setter
    def schedule_data(self, schedule_data):
        """Sets the schedule_data of this WebBackendConnectionListItem.


        :param schedule_data: The schedule_data of this WebBackendConnectionListItem.
        :type schedule_data: ConnectionScheduleData
        """

        self._schedule_data = schedule_data

    @property
    def schedule_type(self):
        """Gets the schedule_type of this WebBackendConnectionListItem.


        :return: The schedule_type of this WebBackendConnectionListItem.
        :rtype: ConnectionScheduleType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this WebBackendConnectionListItem.


        :param schedule_type: The schedule_type of this WebBackendConnectionListItem.
        :type schedule_type: ConnectionScheduleType
        """

        self._schedule_type = schedule_type

    @property
    def schema_change(self):
        """Gets the schema_change of this WebBackendConnectionListItem.


        :return: The schema_change of this WebBackendConnectionListItem.
        :rtype: SchemaChange
        """
        return self._schema_change

    @schema_change.setter
    def schema_change(self, schema_change):
        """Sets the schema_change of this WebBackendConnectionListItem.


        :param schema_change: The schema_change of this WebBackendConnectionListItem.
        :type schema_change: SchemaChange
        """
        if schema_change is None:
            raise ValueError("Invalid value for `schema_change`, must not be `None`")

        self._schema_change = schema_change

    @property
    def source(self):
        """Gets the source of this WebBackendConnectionListItem.


        :return: The source of this WebBackendConnectionListItem.
        :rtype: SourceSnippetRead
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WebBackendConnectionListItem.


        :param source: The source of this WebBackendConnectionListItem.
        :type source: SourceSnippetRead
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this WebBackendConnectionListItem.


        :return: The status of this WebBackendConnectionListItem.
        :rtype: ConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebBackendConnectionListItem.


        :param status: The status of this WebBackendConnectionListItem.
        :type status: ConnectionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
