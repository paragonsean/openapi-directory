# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_state import ConnectionState
from openapi_server import util


class AttemptSyncConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_configuration: object=None, source_configuration: object=None, state: ConnectionState=None):
        """AttemptSyncConfig - a model defined in OpenAPI

        :param destination_configuration: The destination_configuration of this AttemptSyncConfig.
        :param source_configuration: The source_configuration of this AttemptSyncConfig.
        :param state: The state of this AttemptSyncConfig.
        """
        self.openapi_types = {
            'destination_configuration': object,
            'source_configuration': object,
            'state': ConnectionState
        }

        self.attribute_map = {
            'destination_configuration': 'destinationConfiguration',
            'source_configuration': 'sourceConfiguration',
            'state': 'state'
        }

        self._destination_configuration = destination_configuration
        self._source_configuration = source_configuration
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptSyncConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptSyncConfig of this AttemptSyncConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_configuration(self):
        """Gets the destination_configuration of this AttemptSyncConfig.

        The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.

        :return: The destination_configuration of this AttemptSyncConfig.
        :rtype: object
        """
        return self._destination_configuration

    @destination_configuration.setter
    def destination_configuration(self, destination_configuration):
        """Sets the destination_configuration of this AttemptSyncConfig.

        The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.

        :param destination_configuration: The destination_configuration of this AttemptSyncConfig.
        :type destination_configuration: object
        """
        if destination_configuration is None:
            raise ValueError("Invalid value for `destination_configuration`, must not be `None`")

        self._destination_configuration = destination_configuration

    @property
    def source_configuration(self):
        """Gets the source_configuration of this AttemptSyncConfig.

        The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.

        :return: The source_configuration of this AttemptSyncConfig.
        :rtype: object
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this AttemptSyncConfig.

        The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.

        :param source_configuration: The source_configuration of this AttemptSyncConfig.
        :type source_configuration: object
        """
        if source_configuration is None:
            raise ValueError("Invalid value for `source_configuration`, must not be `None`")

        self._source_configuration = source_configuration

    @property
    def state(self):
        """Gets the state of this AttemptSyncConfig.


        :return: The state of this AttemptSyncConfig.
        :rtype: ConnectionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AttemptSyncConfig.


        :param state: The state of this AttemptSyncConfig.
        :type state: ConnectionState
        """

        self._state = state
