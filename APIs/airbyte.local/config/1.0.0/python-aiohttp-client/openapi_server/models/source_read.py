# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_configuration: object=None, icon: str=None, name: str=None, source_definition_id: str=None, source_id: str=None, source_name: str=None, workspace_id: str=None):
        """SourceRead - a model defined in OpenAPI

        :param connection_configuration: The connection_configuration of this SourceRead.
        :param icon: The icon of this SourceRead.
        :param name: The name of this SourceRead.
        :param source_definition_id: The source_definition_id of this SourceRead.
        :param source_id: The source_id of this SourceRead.
        :param source_name: The source_name of this SourceRead.
        :param workspace_id: The workspace_id of this SourceRead.
        """
        self.openapi_types = {
            'connection_configuration': object,
            'icon': str,
            'name': str,
            'source_definition_id': str,
            'source_id': str,
            'source_name': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'connection_configuration': 'connectionConfiguration',
            'icon': 'icon',
            'name': 'name',
            'source_definition_id': 'sourceDefinitionId',
            'source_id': 'sourceId',
            'source_name': 'sourceName',
            'workspace_id': 'workspaceId'
        }

        self._connection_configuration = connection_configuration
        self._icon = icon
        self._name = name
        self._source_definition_id = source_definition_id
        self._source_id = source_id
        self._source_name = source_name
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceRead of this SourceRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_configuration(self):
        """Gets the connection_configuration of this SourceRead.

        The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.

        :return: The connection_configuration of this SourceRead.
        :rtype: object
        """
        return self._connection_configuration

    @connection_configuration.setter
    def connection_configuration(self, connection_configuration):
        """Sets the connection_configuration of this SourceRead.

        The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.

        :param connection_configuration: The connection_configuration of this SourceRead.
        :type connection_configuration: object
        """
        if connection_configuration is None:
            raise ValueError("Invalid value for `connection_configuration`, must not be `None`")

        self._connection_configuration = connection_configuration

    @property
    def icon(self):
        """Gets the icon of this SourceRead.


        :return: The icon of this SourceRead.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this SourceRead.


        :param icon: The icon of this SourceRead.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this SourceRead.


        :return: The name of this SourceRead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceRead.


        :param name: The name of this SourceRead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_definition_id(self):
        """Gets the source_definition_id of this SourceRead.


        :return: The source_definition_id of this SourceRead.
        :rtype: str
        """
        return self._source_definition_id

    @source_definition_id.setter
    def source_definition_id(self, source_definition_id):
        """Sets the source_definition_id of this SourceRead.


        :param source_definition_id: The source_definition_id of this SourceRead.
        :type source_definition_id: str
        """
        if source_definition_id is None:
            raise ValueError("Invalid value for `source_definition_id`, must not be `None`")

        self._source_definition_id = source_definition_id

    @property
    def source_id(self):
        """Gets the source_id of this SourceRead.


        :return: The source_id of this SourceRead.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this SourceRead.


        :param source_id: The source_id of this SourceRead.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this SourceRead.


        :return: The source_name of this SourceRead.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this SourceRead.


        :param source_name: The source_name of this SourceRead.
        :type source_name: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")

        self._source_name = source_name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this SourceRead.


        :return: The workspace_id of this SourceRead.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this SourceRead.


        :param workspace_id: The workspace_id of this SourceRead.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
