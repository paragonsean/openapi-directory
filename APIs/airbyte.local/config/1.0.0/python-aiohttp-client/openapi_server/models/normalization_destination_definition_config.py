# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NormalizationDestinationDefinitionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, normalization_integration_type: str=None, normalization_repository: str=None, normalization_tag: str=None, supported: bool=False):
        """NormalizationDestinationDefinitionConfig - a model defined in OpenAPI

        :param normalization_integration_type: The normalization_integration_type of this NormalizationDestinationDefinitionConfig.
        :param normalization_repository: The normalization_repository of this NormalizationDestinationDefinitionConfig.
        :param normalization_tag: The normalization_tag of this NormalizationDestinationDefinitionConfig.
        :param supported: The supported of this NormalizationDestinationDefinitionConfig.
        """
        self.openapi_types = {
            'normalization_integration_type': str,
            'normalization_repository': str,
            'normalization_tag': str,
            'supported': bool
        }

        self.attribute_map = {
            'normalization_integration_type': 'normalizationIntegrationType',
            'normalization_repository': 'normalizationRepository',
            'normalization_tag': 'normalizationTag',
            'supported': 'supported'
        }

        self._normalization_integration_type = normalization_integration_type
        self._normalization_repository = normalization_repository
        self._normalization_tag = normalization_tag
        self._supported = supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NormalizationDestinationDefinitionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NormalizationDestinationDefinitionConfig of this NormalizationDestinationDefinitionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def normalization_integration_type(self):
        """Gets the normalization_integration_type of this NormalizationDestinationDefinitionConfig.

        a field indicating the type of integration dialect to use for normalization.

        :return: The normalization_integration_type of this NormalizationDestinationDefinitionConfig.
        :rtype: str
        """
        return self._normalization_integration_type

    @normalization_integration_type.setter
    def normalization_integration_type(self, normalization_integration_type):
        """Sets the normalization_integration_type of this NormalizationDestinationDefinitionConfig.

        a field indicating the type of integration dialect to use for normalization.

        :param normalization_integration_type: The normalization_integration_type of this NormalizationDestinationDefinitionConfig.
        :type normalization_integration_type: str
        """

        self._normalization_integration_type = normalization_integration_type

    @property
    def normalization_repository(self):
        """Gets the normalization_repository of this NormalizationDestinationDefinitionConfig.

        a field indicating the name of the repository to be used for normalization. If the value of the flag is NULL - normalization is not used.

        :return: The normalization_repository of this NormalizationDestinationDefinitionConfig.
        :rtype: str
        """
        return self._normalization_repository

    @normalization_repository.setter
    def normalization_repository(self, normalization_repository):
        """Sets the normalization_repository of this NormalizationDestinationDefinitionConfig.

        a field indicating the name of the repository to be used for normalization. If the value of the flag is NULL - normalization is not used.

        :param normalization_repository: The normalization_repository of this NormalizationDestinationDefinitionConfig.
        :type normalization_repository: str
        """

        self._normalization_repository = normalization_repository

    @property
    def normalization_tag(self):
        """Gets the normalization_tag of this NormalizationDestinationDefinitionConfig.

        a field indicating the tag of the docker repository to be used for normalization.

        :return: The normalization_tag of this NormalizationDestinationDefinitionConfig.
        :rtype: str
        """
        return self._normalization_tag

    @normalization_tag.setter
    def normalization_tag(self, normalization_tag):
        """Sets the normalization_tag of this NormalizationDestinationDefinitionConfig.

        a field indicating the tag of the docker repository to be used for normalization.

        :param normalization_tag: The normalization_tag of this NormalizationDestinationDefinitionConfig.
        :type normalization_tag: str
        """

        self._normalization_tag = normalization_tag

    @property
    def supported(self):
        """Gets the supported of this NormalizationDestinationDefinitionConfig.

        whether the destination definition supports normalization.

        :return: The supported of this NormalizationDestinationDefinitionConfig.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this NormalizationDestinationDefinitionConfig.

        whether the destination definition supports normalization.

        :param supported: The supported of this NormalizationDestinationDefinitionConfig.
        :type supported: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")

        self._supported = supported
