# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actor_definition_resource_requirements import ActorDefinitionResourceRequirements
from openapi_server import util


class SourceDefinitionCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, docker_image_tag: str=None, docker_repository: str=None, documentation_url: str=None, icon: str=None, name: str=None, resource_requirements: ActorDefinitionResourceRequirements=None):
        """SourceDefinitionCreate - a model defined in OpenAPI

        :param docker_image_tag: The docker_image_tag of this SourceDefinitionCreate.
        :param docker_repository: The docker_repository of this SourceDefinitionCreate.
        :param documentation_url: The documentation_url of this SourceDefinitionCreate.
        :param icon: The icon of this SourceDefinitionCreate.
        :param name: The name of this SourceDefinitionCreate.
        :param resource_requirements: The resource_requirements of this SourceDefinitionCreate.
        """
        self.openapi_types = {
            'docker_image_tag': str,
            'docker_repository': str,
            'documentation_url': str,
            'icon': str,
            'name': str,
            'resource_requirements': ActorDefinitionResourceRequirements
        }

        self.attribute_map = {
            'docker_image_tag': 'dockerImageTag',
            'docker_repository': 'dockerRepository',
            'documentation_url': 'documentationUrl',
            'icon': 'icon',
            'name': 'name',
            'resource_requirements': 'resourceRequirements'
        }

        self._docker_image_tag = docker_image_tag
        self._docker_repository = docker_repository
        self._documentation_url = documentation_url
        self._icon = icon
        self._name = name
        self._resource_requirements = resource_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceDefinitionCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceDefinitionCreate of this SourceDefinitionCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def docker_image_tag(self):
        """Gets the docker_image_tag of this SourceDefinitionCreate.


        :return: The docker_image_tag of this SourceDefinitionCreate.
        :rtype: str
        """
        return self._docker_image_tag

    @docker_image_tag.setter
    def docker_image_tag(self, docker_image_tag):
        """Sets the docker_image_tag of this SourceDefinitionCreate.


        :param docker_image_tag: The docker_image_tag of this SourceDefinitionCreate.
        :type docker_image_tag: str
        """
        if docker_image_tag is None:
            raise ValueError("Invalid value for `docker_image_tag`, must not be `None`")

        self._docker_image_tag = docker_image_tag

    @property
    def docker_repository(self):
        """Gets the docker_repository of this SourceDefinitionCreate.


        :return: The docker_repository of this SourceDefinitionCreate.
        :rtype: str
        """
        return self._docker_repository

    @docker_repository.setter
    def docker_repository(self, docker_repository):
        """Sets the docker_repository of this SourceDefinitionCreate.


        :param docker_repository: The docker_repository of this SourceDefinitionCreate.
        :type docker_repository: str
        """
        if docker_repository is None:
            raise ValueError("Invalid value for `docker_repository`, must not be `None`")

        self._docker_repository = docker_repository

    @property
    def documentation_url(self):
        """Gets the documentation_url of this SourceDefinitionCreate.


        :return: The documentation_url of this SourceDefinitionCreate.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this SourceDefinitionCreate.


        :param documentation_url: The documentation_url of this SourceDefinitionCreate.
        :type documentation_url: str
        """
        if documentation_url is None:
            raise ValueError("Invalid value for `documentation_url`, must not be `None`")

        self._documentation_url = documentation_url

    @property
    def icon(self):
        """Gets the icon of this SourceDefinitionCreate.


        :return: The icon of this SourceDefinitionCreate.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this SourceDefinitionCreate.


        :param icon: The icon of this SourceDefinitionCreate.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this SourceDefinitionCreate.


        :return: The name of this SourceDefinitionCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceDefinitionCreate.


        :param name: The name of this SourceDefinitionCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this SourceDefinitionCreate.


        :return: The resource_requirements of this SourceDefinitionCreate.
        :rtype: ActorDefinitionResourceRequirements
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this SourceDefinitionCreate.


        :param resource_requirements: The resource_requirements of this SourceDefinitionCreate.
        :type resource_requirements: ActorDefinitionResourceRequirements
        """

        self._resource_requirements = resource_requirements
