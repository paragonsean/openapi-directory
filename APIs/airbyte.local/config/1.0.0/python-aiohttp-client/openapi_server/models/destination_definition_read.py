# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actor_definition_resource_requirements import ActorDefinitionResourceRequirements
from openapi_server.models.normalization_destination_definition_config import NormalizationDestinationDefinitionConfig
from openapi_server.models.release_stage import ReleaseStage
from openapi_server import util


class DestinationDefinitionRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_definition_id: str=None, docker_image_tag: str=None, docker_repository: str=None, documentation_url: str=None, icon: str=None, name: str=None, normalization_config: NormalizationDestinationDefinitionConfig=None, protocol_version: str=None, release_date: date=None, release_stage: ReleaseStage=None, resource_requirements: ActorDefinitionResourceRequirements=None, supports_dbt: bool=None):
        """DestinationDefinitionRead - a model defined in OpenAPI

        :param destination_definition_id: The destination_definition_id of this DestinationDefinitionRead.
        :param docker_image_tag: The docker_image_tag of this DestinationDefinitionRead.
        :param docker_repository: The docker_repository of this DestinationDefinitionRead.
        :param documentation_url: The documentation_url of this DestinationDefinitionRead.
        :param icon: The icon of this DestinationDefinitionRead.
        :param name: The name of this DestinationDefinitionRead.
        :param normalization_config: The normalization_config of this DestinationDefinitionRead.
        :param protocol_version: The protocol_version of this DestinationDefinitionRead.
        :param release_date: The release_date of this DestinationDefinitionRead.
        :param release_stage: The release_stage of this DestinationDefinitionRead.
        :param resource_requirements: The resource_requirements of this DestinationDefinitionRead.
        :param supports_dbt: The supports_dbt of this DestinationDefinitionRead.
        """
        self.openapi_types = {
            'destination_definition_id': str,
            'docker_image_tag': str,
            'docker_repository': str,
            'documentation_url': str,
            'icon': str,
            'name': str,
            'normalization_config': NormalizationDestinationDefinitionConfig,
            'protocol_version': str,
            'release_date': date,
            'release_stage': ReleaseStage,
            'resource_requirements': ActorDefinitionResourceRequirements,
            'supports_dbt': bool
        }

        self.attribute_map = {
            'destination_definition_id': 'destinationDefinitionId',
            'docker_image_tag': 'dockerImageTag',
            'docker_repository': 'dockerRepository',
            'documentation_url': 'documentationUrl',
            'icon': 'icon',
            'name': 'name',
            'normalization_config': 'normalizationConfig',
            'protocol_version': 'protocolVersion',
            'release_date': 'releaseDate',
            'release_stage': 'releaseStage',
            'resource_requirements': 'resourceRequirements',
            'supports_dbt': 'supportsDbt'
        }

        self._destination_definition_id = destination_definition_id
        self._docker_image_tag = docker_image_tag
        self._docker_repository = docker_repository
        self._documentation_url = documentation_url
        self._icon = icon
        self._name = name
        self._normalization_config = normalization_config
        self._protocol_version = protocol_version
        self._release_date = release_date
        self._release_stage = release_stage
        self._resource_requirements = resource_requirements
        self._supports_dbt = supports_dbt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationDefinitionRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationDefinitionRead of this DestinationDefinitionRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_definition_id(self):
        """Gets the destination_definition_id of this DestinationDefinitionRead.


        :return: The destination_definition_id of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._destination_definition_id

    @destination_definition_id.setter
    def destination_definition_id(self, destination_definition_id):
        """Sets the destination_definition_id of this DestinationDefinitionRead.


        :param destination_definition_id: The destination_definition_id of this DestinationDefinitionRead.
        :type destination_definition_id: str
        """
        if destination_definition_id is None:
            raise ValueError("Invalid value for `destination_definition_id`, must not be `None`")

        self._destination_definition_id = destination_definition_id

    @property
    def docker_image_tag(self):
        """Gets the docker_image_tag of this DestinationDefinitionRead.


        :return: The docker_image_tag of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._docker_image_tag

    @docker_image_tag.setter
    def docker_image_tag(self, docker_image_tag):
        """Sets the docker_image_tag of this DestinationDefinitionRead.


        :param docker_image_tag: The docker_image_tag of this DestinationDefinitionRead.
        :type docker_image_tag: str
        """
        if docker_image_tag is None:
            raise ValueError("Invalid value for `docker_image_tag`, must not be `None`")

        self._docker_image_tag = docker_image_tag

    @property
    def docker_repository(self):
        """Gets the docker_repository of this DestinationDefinitionRead.


        :return: The docker_repository of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._docker_repository

    @docker_repository.setter
    def docker_repository(self, docker_repository):
        """Sets the docker_repository of this DestinationDefinitionRead.


        :param docker_repository: The docker_repository of this DestinationDefinitionRead.
        :type docker_repository: str
        """
        if docker_repository is None:
            raise ValueError("Invalid value for `docker_repository`, must not be `None`")

        self._docker_repository = docker_repository

    @property
    def documentation_url(self):
        """Gets the documentation_url of this DestinationDefinitionRead.


        :return: The documentation_url of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this DestinationDefinitionRead.


        :param documentation_url: The documentation_url of this DestinationDefinitionRead.
        :type documentation_url: str
        """
        if documentation_url is None:
            raise ValueError("Invalid value for `documentation_url`, must not be `None`")

        self._documentation_url = documentation_url

    @property
    def icon(self):
        """Gets the icon of this DestinationDefinitionRead.


        :return: The icon of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinationDefinitionRead.


        :param icon: The icon of this DestinationDefinitionRead.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this DestinationDefinitionRead.


        :return: The name of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinationDefinitionRead.


        :param name: The name of this DestinationDefinitionRead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def normalization_config(self):
        """Gets the normalization_config of this DestinationDefinitionRead.


        :return: The normalization_config of this DestinationDefinitionRead.
        :rtype: NormalizationDestinationDefinitionConfig
        """
        return self._normalization_config

    @normalization_config.setter
    def normalization_config(self, normalization_config):
        """Sets the normalization_config of this DestinationDefinitionRead.


        :param normalization_config: The normalization_config of this DestinationDefinitionRead.
        :type normalization_config: NormalizationDestinationDefinitionConfig
        """
        if normalization_config is None:
            raise ValueError("Invalid value for `normalization_config`, must not be `None`")

        self._normalization_config = normalization_config

    @property
    def protocol_version(self):
        """Gets the protocol_version of this DestinationDefinitionRead.

        The Airbyte Protocol version supported by the connector

        :return: The protocol_version of this DestinationDefinitionRead.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this DestinationDefinitionRead.

        The Airbyte Protocol version supported by the connector

        :param protocol_version: The protocol_version of this DestinationDefinitionRead.
        :type protocol_version: str
        """

        self._protocol_version = protocol_version

    @property
    def release_date(self):
        """Gets the release_date of this DestinationDefinitionRead.

        The date when this connector was first released, in yyyy-mm-dd format.

        :return: The release_date of this DestinationDefinitionRead.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this DestinationDefinitionRead.

        The date when this connector was first released, in yyyy-mm-dd format.

        :param release_date: The release_date of this DestinationDefinitionRead.
        :type release_date: date
        """

        self._release_date = release_date

    @property
    def release_stage(self):
        """Gets the release_stage of this DestinationDefinitionRead.


        :return: The release_stage of this DestinationDefinitionRead.
        :rtype: ReleaseStage
        """
        return self._release_stage

    @release_stage.setter
    def release_stage(self, release_stage):
        """Sets the release_stage of this DestinationDefinitionRead.


        :param release_stage: The release_stage of this DestinationDefinitionRead.
        :type release_stage: ReleaseStage
        """

        self._release_stage = release_stage

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this DestinationDefinitionRead.


        :return: The resource_requirements of this DestinationDefinitionRead.
        :rtype: ActorDefinitionResourceRequirements
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this DestinationDefinitionRead.


        :param resource_requirements: The resource_requirements of this DestinationDefinitionRead.
        :type resource_requirements: ActorDefinitionResourceRequirements
        """

        self._resource_requirements = resource_requirements

    @property
    def supports_dbt(self):
        """Gets the supports_dbt of this DestinationDefinitionRead.

        an optional flag indicating whether DBT is used in the normalization. If the flag value is NULL - DBT is not used.

        :return: The supports_dbt of this DestinationDefinitionRead.
        :rtype: bool
        """
        return self._supports_dbt

    @supports_dbt.setter
    def supports_dbt(self, supports_dbt):
        """Sets the supports_dbt of this DestinationDefinitionRead.

        an optional flag indicating whether DBT is used in the normalization. If the flag value is NULL - DBT is not used.

        :param supports_dbt: The supports_dbt of this DestinationDefinitionRead.
        :type supports_dbt: bool
        """
        if supports_dbt is None:
            raise ValueError("Invalid value for `supports_dbt`, must not be `None`")

        self._supports_dbt = supports_dbt
