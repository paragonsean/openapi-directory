# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_read import JobRead
from openapi_server import util


class JobInfoLightRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job: JobRead=None):
        """JobInfoLightRead - a model defined in OpenAPI

        :param job: The job of this JobInfoLightRead.
        """
        self.openapi_types = {
            'job': JobRead
        }

        self.attribute_map = {
            'job': 'job'
        }

        self._job = job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInfoLightRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInfoLightRead of this JobInfoLightRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job(self):
        """Gets the job of this JobInfoLightRead.


        :return: The job of this JobInfoLightRead.
        :rtype: JobRead
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobInfoLightRead.


        :param job: The job of this JobInfoLightRead.
        :type job: JobRead
        """
        if job is None:
            raise ValueError("Invalid value for `job`, must not be `None`")

        self._job = job
