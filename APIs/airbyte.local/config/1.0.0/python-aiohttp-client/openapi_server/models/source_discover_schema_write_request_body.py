# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airbyte_catalog import AirbyteCatalog
from openapi_server import util


class SourceDiscoverSchemaWriteRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog: AirbyteCatalog=None, configuration_hash: str=None, connector_version: str=None, source_id: str=None):
        """SourceDiscoverSchemaWriteRequestBody - a model defined in OpenAPI

        :param catalog: The catalog of this SourceDiscoverSchemaWriteRequestBody.
        :param configuration_hash: The configuration_hash of this SourceDiscoverSchemaWriteRequestBody.
        :param connector_version: The connector_version of this SourceDiscoverSchemaWriteRequestBody.
        :param source_id: The source_id of this SourceDiscoverSchemaWriteRequestBody.
        """
        self.openapi_types = {
            'catalog': AirbyteCatalog,
            'configuration_hash': str,
            'connector_version': str,
            'source_id': str
        }

        self.attribute_map = {
            'catalog': 'catalog',
            'configuration_hash': 'configurationHash',
            'connector_version': 'connectorVersion',
            'source_id': 'sourceId'
        }

        self._catalog = catalog
        self._configuration_hash = configuration_hash
        self._connector_version = connector_version
        self._source_id = source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceDiscoverSchemaWriteRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceDiscoverSchemaWriteRequestBody of this SourceDiscoverSchemaWriteRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog(self):
        """Gets the catalog of this SourceDiscoverSchemaWriteRequestBody.


        :return: The catalog of this SourceDiscoverSchemaWriteRequestBody.
        :rtype: AirbyteCatalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this SourceDiscoverSchemaWriteRequestBody.


        :param catalog: The catalog of this SourceDiscoverSchemaWriteRequestBody.
        :type catalog: AirbyteCatalog
        """
        if catalog is None:
            raise ValueError("Invalid value for `catalog`, must not be `None`")

        self._catalog = catalog

    @property
    def configuration_hash(self):
        """Gets the configuration_hash of this SourceDiscoverSchemaWriteRequestBody.


        :return: The configuration_hash of this SourceDiscoverSchemaWriteRequestBody.
        :rtype: str
        """
        return self._configuration_hash

    @configuration_hash.setter
    def configuration_hash(self, configuration_hash):
        """Sets the configuration_hash of this SourceDiscoverSchemaWriteRequestBody.


        :param configuration_hash: The configuration_hash of this SourceDiscoverSchemaWriteRequestBody.
        :type configuration_hash: str
        """

        self._configuration_hash = configuration_hash

    @property
    def connector_version(self):
        """Gets the connector_version of this SourceDiscoverSchemaWriteRequestBody.


        :return: The connector_version of this SourceDiscoverSchemaWriteRequestBody.
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this SourceDiscoverSchemaWriteRequestBody.


        :param connector_version: The connector_version of this SourceDiscoverSchemaWriteRequestBody.
        :type connector_version: str
        """

        self._connector_version = connector_version

    @property
    def source_id(self):
        """Gets the source_id of this SourceDiscoverSchemaWriteRequestBody.


        :return: The source_id of this SourceDiscoverSchemaWriteRequestBody.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this SourceDiscoverSchemaWriteRequestBody.


        :param source_id: The source_id of this SourceDiscoverSchemaWriteRequestBody.
        :type source_id: str
        """

        self._source_id = source_id
