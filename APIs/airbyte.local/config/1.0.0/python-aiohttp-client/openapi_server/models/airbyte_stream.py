# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sync_mode import SyncMode
from openapi_server import util


class AirbyteStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_cursor_field: List[str]=None, json_schema: object=None, name: str=None, namespace: str=None, source_defined_cursor: bool=None, source_defined_primary_key: List[List[str]]=None, supported_sync_modes: List[SyncMode]=None):
        """AirbyteStream - a model defined in OpenAPI

        :param default_cursor_field: The default_cursor_field of this AirbyteStream.
        :param json_schema: The json_schema of this AirbyteStream.
        :param name: The name of this AirbyteStream.
        :param namespace: The namespace of this AirbyteStream.
        :param source_defined_cursor: The source_defined_cursor of this AirbyteStream.
        :param source_defined_primary_key: The source_defined_primary_key of this AirbyteStream.
        :param supported_sync_modes: The supported_sync_modes of this AirbyteStream.
        """
        self.openapi_types = {
            'default_cursor_field': List[str],
            'json_schema': object,
            'name': str,
            'namespace': str,
            'source_defined_cursor': bool,
            'source_defined_primary_key': List[List[str]],
            'supported_sync_modes': List[SyncMode]
        }

        self.attribute_map = {
            'default_cursor_field': 'defaultCursorField',
            'json_schema': 'jsonSchema',
            'name': 'name',
            'namespace': 'namespace',
            'source_defined_cursor': 'sourceDefinedCursor',
            'source_defined_primary_key': 'sourceDefinedPrimaryKey',
            'supported_sync_modes': 'supportedSyncModes'
        }

        self._default_cursor_field = default_cursor_field
        self._json_schema = json_schema
        self._name = name
        self._namespace = namespace
        self._source_defined_cursor = source_defined_cursor
        self._source_defined_primary_key = source_defined_primary_key
        self._supported_sync_modes = supported_sync_modes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirbyteStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirbyteStream of this AirbyteStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_cursor_field(self):
        """Gets the default_cursor_field of this AirbyteStream.

        Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.

        :return: The default_cursor_field of this AirbyteStream.
        :rtype: List[str]
        """
        return self._default_cursor_field

    @default_cursor_field.setter
    def default_cursor_field(self, default_cursor_field):
        """Sets the default_cursor_field of this AirbyteStream.

        Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.

        :param default_cursor_field: The default_cursor_field of this AirbyteStream.
        :type default_cursor_field: List[str]
        """

        self._default_cursor_field = default_cursor_field

    @property
    def json_schema(self):
        """Gets the json_schema of this AirbyteStream.

        Stream schema using Json Schema specs.

        :return: The json_schema of this AirbyteStream.
        :rtype: object
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema):
        """Sets the json_schema of this AirbyteStream.

        Stream schema using Json Schema specs.

        :param json_schema: The json_schema of this AirbyteStream.
        :type json_schema: object
        """

        self._json_schema = json_schema

    @property
    def name(self):
        """Gets the name of this AirbyteStream.

        Stream's name.

        :return: The name of this AirbyteStream.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AirbyteStream.

        Stream's name.

        :param name: The name of this AirbyteStream.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this AirbyteStream.

        Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.

        :return: The namespace of this AirbyteStream.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AirbyteStream.

        Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.

        :param namespace: The namespace of this AirbyteStream.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def source_defined_cursor(self):
        """Gets the source_defined_cursor of this AirbyteStream.

        If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.

        :return: The source_defined_cursor of this AirbyteStream.
        :rtype: bool
        """
        return self._source_defined_cursor

    @source_defined_cursor.setter
    def source_defined_cursor(self, source_defined_cursor):
        """Sets the source_defined_cursor of this AirbyteStream.

        If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.

        :param source_defined_cursor: The source_defined_cursor of this AirbyteStream.
        :type source_defined_cursor: bool
        """

        self._source_defined_cursor = source_defined_cursor

    @property
    def source_defined_primary_key(self):
        """Gets the source_defined_primary_key of this AirbyteStream.

        If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.

        :return: The source_defined_primary_key of this AirbyteStream.
        :rtype: List[List[str]]
        """
        return self._source_defined_primary_key

    @source_defined_primary_key.setter
    def source_defined_primary_key(self, source_defined_primary_key):
        """Sets the source_defined_primary_key of this AirbyteStream.

        If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.

        :param source_defined_primary_key: The source_defined_primary_key of this AirbyteStream.
        :type source_defined_primary_key: List[List[str]]
        """

        self._source_defined_primary_key = source_defined_primary_key

    @property
    def supported_sync_modes(self):
        """Gets the supported_sync_modes of this AirbyteStream.


        :return: The supported_sync_modes of this AirbyteStream.
        :rtype: List[SyncMode]
        """
        return self._supported_sync_modes

    @supported_sync_modes.setter
    def supported_sync_modes(self, supported_sync_modes):
        """Sets the supported_sync_modes of this AirbyteStream.


        :param supported_sync_modes: The supported_sync_modes of this AirbyteStream.
        :type supported_sync_modes: List[SyncMode]
        """

        self._supported_sync_modes = supported_sync_modes
