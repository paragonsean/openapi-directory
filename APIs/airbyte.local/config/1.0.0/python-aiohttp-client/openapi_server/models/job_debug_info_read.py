# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_info_read import AttemptInfoRead
from openapi_server.models.job_debug_read import JobDebugRead
from openapi_server.models.workflow_state_read import WorkflowStateRead
from openapi_server import util


class JobDebugInfoRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempts: List[AttemptInfoRead]=None, job: JobDebugRead=None, workflow_state: WorkflowStateRead=None):
        """JobDebugInfoRead - a model defined in OpenAPI

        :param attempts: The attempts of this JobDebugInfoRead.
        :param job: The job of this JobDebugInfoRead.
        :param workflow_state: The workflow_state of this JobDebugInfoRead.
        """
        self.openapi_types = {
            'attempts': List[AttemptInfoRead],
            'job': JobDebugRead,
            'workflow_state': WorkflowStateRead
        }

        self.attribute_map = {
            'attempts': 'attempts',
            'job': 'job',
            'workflow_state': 'workflowState'
        }

        self._attempts = attempts
        self._job = job
        self._workflow_state = workflow_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDebugInfoRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDebugInfoRead of this JobDebugInfoRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempts(self):
        """Gets the attempts of this JobDebugInfoRead.


        :return: The attempts of this JobDebugInfoRead.
        :rtype: List[AttemptInfoRead]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this JobDebugInfoRead.


        :param attempts: The attempts of this JobDebugInfoRead.
        :type attempts: List[AttemptInfoRead]
        """
        if attempts is None:
            raise ValueError("Invalid value for `attempts`, must not be `None`")

        self._attempts = attempts

    @property
    def job(self):
        """Gets the job of this JobDebugInfoRead.


        :return: The job of this JobDebugInfoRead.
        :rtype: JobDebugRead
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobDebugInfoRead.


        :param job: The job of this JobDebugInfoRead.
        :type job: JobDebugRead
        """
        if job is None:
            raise ValueError("Invalid value for `job`, must not be `None`")

        self._job = job

    @property
    def workflow_state(self):
        """Gets the workflow_state of this JobDebugInfoRead.


        :return: The workflow_state of this JobDebugInfoRead.
        :rtype: WorkflowStateRead
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this JobDebugInfoRead.


        :param workflow_state: The workflow_state of this JobDebugInfoRead.
        :type workflow_state: WorkflowStateRead
        """

        self._workflow_state = workflow_state
