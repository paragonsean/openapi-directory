# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_sync_mode import DestinationSyncMode
from openapi_server.models.selected_field_info import SelectedFieldInfo
from openapi_server.models.sync_mode import SyncMode
from openapi_server import util


class AirbyteStreamConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_name: str=None, cursor_field: List[str]=None, destination_sync_mode: DestinationSyncMode=None, field_selection_enabled: bool=None, primary_key: List[List[str]]=None, selected: bool=None, selected_fields: List[SelectedFieldInfo]=None, suggested: bool=None, sync_mode: SyncMode=None):
        """AirbyteStreamConfiguration - a model defined in OpenAPI

        :param alias_name: The alias_name of this AirbyteStreamConfiguration.
        :param cursor_field: The cursor_field of this AirbyteStreamConfiguration.
        :param destination_sync_mode: The destination_sync_mode of this AirbyteStreamConfiguration.
        :param field_selection_enabled: The field_selection_enabled of this AirbyteStreamConfiguration.
        :param primary_key: The primary_key of this AirbyteStreamConfiguration.
        :param selected: The selected of this AirbyteStreamConfiguration.
        :param selected_fields: The selected_fields of this AirbyteStreamConfiguration.
        :param suggested: The suggested of this AirbyteStreamConfiguration.
        :param sync_mode: The sync_mode of this AirbyteStreamConfiguration.
        """
        self.openapi_types = {
            'alias_name': str,
            'cursor_field': List[str],
            'destination_sync_mode': DestinationSyncMode,
            'field_selection_enabled': bool,
            'primary_key': List[List[str]],
            'selected': bool,
            'selected_fields': List[SelectedFieldInfo],
            'suggested': bool,
            'sync_mode': SyncMode
        }

        self.attribute_map = {
            'alias_name': 'aliasName',
            'cursor_field': 'cursorField',
            'destination_sync_mode': 'destinationSyncMode',
            'field_selection_enabled': 'fieldSelectionEnabled',
            'primary_key': 'primaryKey',
            'selected': 'selected',
            'selected_fields': 'selectedFields',
            'suggested': 'suggested',
            'sync_mode': 'syncMode'
        }

        self._alias_name = alias_name
        self._cursor_field = cursor_field
        self._destination_sync_mode = destination_sync_mode
        self._field_selection_enabled = field_selection_enabled
        self._primary_key = primary_key
        self._selected = selected
        self._selected_fields = selected_fields
        self._suggested = suggested
        self._sync_mode = sync_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirbyteStreamConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirbyteStreamConfiguration of this AirbyteStreamConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_name(self):
        """Gets the alias_name of this AirbyteStreamConfiguration.

        Alias name to the stream to be used in the destination

        :return: The alias_name of this AirbyteStreamConfiguration.
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """Sets the alias_name of this AirbyteStreamConfiguration.

        Alias name to the stream to be used in the destination

        :param alias_name: The alias_name of this AirbyteStreamConfiguration.
        :type alias_name: str
        """

        self._alias_name = alias_name

    @property
    def cursor_field(self):
        """Gets the cursor_field of this AirbyteStreamConfiguration.

        Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.

        :return: The cursor_field of this AirbyteStreamConfiguration.
        :rtype: List[str]
        """
        return self._cursor_field

    @cursor_field.setter
    def cursor_field(self, cursor_field):
        """Sets the cursor_field of this AirbyteStreamConfiguration.

        Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.

        :param cursor_field: The cursor_field of this AirbyteStreamConfiguration.
        :type cursor_field: List[str]
        """

        self._cursor_field = cursor_field

    @property
    def destination_sync_mode(self):
        """Gets the destination_sync_mode of this AirbyteStreamConfiguration.


        :return: The destination_sync_mode of this AirbyteStreamConfiguration.
        :rtype: DestinationSyncMode
        """
        return self._destination_sync_mode

    @destination_sync_mode.setter
    def destination_sync_mode(self, destination_sync_mode):
        """Sets the destination_sync_mode of this AirbyteStreamConfiguration.


        :param destination_sync_mode: The destination_sync_mode of this AirbyteStreamConfiguration.
        :type destination_sync_mode: DestinationSyncMode
        """
        if destination_sync_mode is None:
            raise ValueError("Invalid value for `destination_sync_mode`, must not be `None`")

        self._destination_sync_mode = destination_sync_mode

    @property
    def field_selection_enabled(self):
        """Gets the field_selection_enabled of this AirbyteStreamConfiguration.

        Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.

        :return: The field_selection_enabled of this AirbyteStreamConfiguration.
        :rtype: bool
        """
        return self._field_selection_enabled

    @field_selection_enabled.setter
    def field_selection_enabled(self, field_selection_enabled):
        """Sets the field_selection_enabled of this AirbyteStreamConfiguration.

        Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.

        :param field_selection_enabled: The field_selection_enabled of this AirbyteStreamConfiguration.
        :type field_selection_enabled: bool
        """

        self._field_selection_enabled = field_selection_enabled

    @property
    def primary_key(self):
        """Gets the primary_key of this AirbyteStreamConfiguration.

        Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.

        :return: The primary_key of this AirbyteStreamConfiguration.
        :rtype: List[List[str]]
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this AirbyteStreamConfiguration.

        Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.

        :param primary_key: The primary_key of this AirbyteStreamConfiguration.
        :type primary_key: List[List[str]]
        """

        self._primary_key = primary_key

    @property
    def selected(self):
        """Gets the selected of this AirbyteStreamConfiguration.

        If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not

        :return: The selected of this AirbyteStreamConfiguration.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this AirbyteStreamConfiguration.

        If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not

        :param selected: The selected of this AirbyteStreamConfiguration.
        :type selected: bool
        """

        self._selected = selected

    @property
    def selected_fields(self):
        """Gets the selected_fields of this AirbyteStreamConfiguration.

        Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.

        :return: The selected_fields of this AirbyteStreamConfiguration.
        :rtype: List[SelectedFieldInfo]
        """
        return self._selected_fields

    @selected_fields.setter
    def selected_fields(self, selected_fields):
        """Sets the selected_fields of this AirbyteStreamConfiguration.

        Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.

        :param selected_fields: The selected_fields of this AirbyteStreamConfiguration.
        :type selected_fields: List[SelectedFieldInfo]
        """

        self._selected_fields = selected_fields

    @property
    def suggested(self):
        """Gets the suggested of this AirbyteStreamConfiguration.

        Does the connector suggest that this stream be enabled by default?

        :return: The suggested of this AirbyteStreamConfiguration.
        :rtype: bool
        """
        return self._suggested

    @suggested.setter
    def suggested(self, suggested):
        """Sets the suggested of this AirbyteStreamConfiguration.

        Does the connector suggest that this stream be enabled by default?

        :param suggested: The suggested of this AirbyteStreamConfiguration.
        :type suggested: bool
        """

        self._suggested = suggested

    @property
    def sync_mode(self):
        """Gets the sync_mode of this AirbyteStreamConfiguration.


        :return: The sync_mode of this AirbyteStreamConfiguration.
        :rtype: SyncMode
        """
        return self._sync_mode

    @sync_mode.setter
    def sync_mode(self, sync_mode):
        """Sets the sync_mode of this AirbyteStreamConfiguration.


        :param sync_mode: The sync_mode of this AirbyteStreamConfiguration.
        :type sync_mode: SyncMode
        """
        if sync_mode is None:
            raise ValueError("Invalid value for `sync_mode`, must not be `None`")

        self._sync_mode = sync_mode
