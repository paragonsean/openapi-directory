# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.synchronous_job_read import SynchronousJobRead
from openapi_server import util


class CheckConnectionRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_info: SynchronousJobRead=None, message: str=None, status: str=None):
        """CheckConnectionRead - a model defined in OpenAPI

        :param job_info: The job_info of this CheckConnectionRead.
        :param message: The message of this CheckConnectionRead.
        :param status: The status of this CheckConnectionRead.
        """
        self.openapi_types = {
            'job_info': SynchronousJobRead,
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'job_info': 'jobInfo',
            'message': 'message',
            'status': 'status'
        }

        self._job_info = job_info
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckConnectionRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckConnectionRead of this CheckConnectionRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_info(self):
        """Gets the job_info of this CheckConnectionRead.


        :return: The job_info of this CheckConnectionRead.
        :rtype: SynchronousJobRead
        """
        return self._job_info

    @job_info.setter
    def job_info(self, job_info):
        """Sets the job_info of this CheckConnectionRead.


        :param job_info: The job_info of this CheckConnectionRead.
        :type job_info: SynchronousJobRead
        """
        if job_info is None:
            raise ValueError("Invalid value for `job_info`, must not be `None`")

        self._job_info = job_info

    @property
    def message(self):
        """Gets the message of this CheckConnectionRead.


        :return: The message of this CheckConnectionRead.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckConnectionRead.


        :param message: The message of this CheckConnectionRead.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this CheckConnectionRead.


        :return: The status of this CheckConnectionRead.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckConnectionRead.


        :param status: The status of this CheckConnectionRead.
        :type status: str
        """
        allowed_values = ["succeeded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
