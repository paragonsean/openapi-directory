# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KnownExceptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception_class_name: str=None, exception_stack: List[str]=None, message: str=None, root_cause_exception_class_name: str=None, root_cause_exception_stack: List[str]=None):
        """KnownExceptionInfo - a model defined in OpenAPI

        :param exception_class_name: The exception_class_name of this KnownExceptionInfo.
        :param exception_stack: The exception_stack of this KnownExceptionInfo.
        :param message: The message of this KnownExceptionInfo.
        :param root_cause_exception_class_name: The root_cause_exception_class_name of this KnownExceptionInfo.
        :param root_cause_exception_stack: The root_cause_exception_stack of this KnownExceptionInfo.
        """
        self.openapi_types = {
            'exception_class_name': str,
            'exception_stack': List[str],
            'message': str,
            'root_cause_exception_class_name': str,
            'root_cause_exception_stack': List[str]
        }

        self.attribute_map = {
            'exception_class_name': 'exceptionClassName',
            'exception_stack': 'exceptionStack',
            'message': 'message',
            'root_cause_exception_class_name': 'rootCauseExceptionClassName',
            'root_cause_exception_stack': 'rootCauseExceptionStack'
        }

        self._exception_class_name = exception_class_name
        self._exception_stack = exception_stack
        self._message = message
        self._root_cause_exception_class_name = root_cause_exception_class_name
        self._root_cause_exception_stack = root_cause_exception_stack

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KnownExceptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KnownExceptionInfo of this KnownExceptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception_class_name(self):
        """Gets the exception_class_name of this KnownExceptionInfo.


        :return: The exception_class_name of this KnownExceptionInfo.
        :rtype: str
        """
        return self._exception_class_name

    @exception_class_name.setter
    def exception_class_name(self, exception_class_name):
        """Sets the exception_class_name of this KnownExceptionInfo.


        :param exception_class_name: The exception_class_name of this KnownExceptionInfo.
        :type exception_class_name: str
        """

        self._exception_class_name = exception_class_name

    @property
    def exception_stack(self):
        """Gets the exception_stack of this KnownExceptionInfo.


        :return: The exception_stack of this KnownExceptionInfo.
        :rtype: List[str]
        """
        return self._exception_stack

    @exception_stack.setter
    def exception_stack(self, exception_stack):
        """Sets the exception_stack of this KnownExceptionInfo.


        :param exception_stack: The exception_stack of this KnownExceptionInfo.
        :type exception_stack: List[str]
        """

        self._exception_stack = exception_stack

    @property
    def message(self):
        """Gets the message of this KnownExceptionInfo.


        :return: The message of this KnownExceptionInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this KnownExceptionInfo.


        :param message: The message of this KnownExceptionInfo.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def root_cause_exception_class_name(self):
        """Gets the root_cause_exception_class_name of this KnownExceptionInfo.


        :return: The root_cause_exception_class_name of this KnownExceptionInfo.
        :rtype: str
        """
        return self._root_cause_exception_class_name

    @root_cause_exception_class_name.setter
    def root_cause_exception_class_name(self, root_cause_exception_class_name):
        """Sets the root_cause_exception_class_name of this KnownExceptionInfo.


        :param root_cause_exception_class_name: The root_cause_exception_class_name of this KnownExceptionInfo.
        :type root_cause_exception_class_name: str
        """

        self._root_cause_exception_class_name = root_cause_exception_class_name

    @property
    def root_cause_exception_stack(self):
        """Gets the root_cause_exception_stack of this KnownExceptionInfo.


        :return: The root_cause_exception_stack of this KnownExceptionInfo.
        :rtype: List[str]
        """
        return self._root_cause_exception_stack

    @root_cause_exception_stack.setter
    def root_cause_exception_stack(self, root_cause_exception_stack):
        """Sets the root_cause_exception_stack of this KnownExceptionInfo.


        :param root_cause_exception_stack: The root_cause_exception_stack of this KnownExceptionInfo.
        :type root_cause_exception_stack: List[str]
        """

        self._root_cause_exception_stack = root_cause_exception_stack
