# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationSnippetRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_definition_id: str=None, destination_id: str=None, destination_name: str=None, icon: str=None, name: str=None):
        """DestinationSnippetRead - a model defined in OpenAPI

        :param destination_definition_id: The destination_definition_id of this DestinationSnippetRead.
        :param destination_id: The destination_id of this DestinationSnippetRead.
        :param destination_name: The destination_name of this DestinationSnippetRead.
        :param icon: The icon of this DestinationSnippetRead.
        :param name: The name of this DestinationSnippetRead.
        """
        self.openapi_types = {
            'destination_definition_id': str,
            'destination_id': str,
            'destination_name': str,
            'icon': str,
            'name': str
        }

        self.attribute_map = {
            'destination_definition_id': 'destinationDefinitionId',
            'destination_id': 'destinationId',
            'destination_name': 'destinationName',
            'icon': 'icon',
            'name': 'name'
        }

        self._destination_definition_id = destination_definition_id
        self._destination_id = destination_id
        self._destination_name = destination_name
        self._icon = icon
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationSnippetRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationSnippetRead of this DestinationSnippetRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_definition_id(self):
        """Gets the destination_definition_id of this DestinationSnippetRead.


        :return: The destination_definition_id of this DestinationSnippetRead.
        :rtype: str
        """
        return self._destination_definition_id

    @destination_definition_id.setter
    def destination_definition_id(self, destination_definition_id):
        """Sets the destination_definition_id of this DestinationSnippetRead.


        :param destination_definition_id: The destination_definition_id of this DestinationSnippetRead.
        :type destination_definition_id: str
        """
        if destination_definition_id is None:
            raise ValueError("Invalid value for `destination_definition_id`, must not be `None`")

        self._destination_definition_id = destination_definition_id

    @property
    def destination_id(self):
        """Gets the destination_id of this DestinationSnippetRead.


        :return: The destination_id of this DestinationSnippetRead.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this DestinationSnippetRead.


        :param destination_id: The destination_id of this DestinationSnippetRead.
        :type destination_id: str
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this DestinationSnippetRead.


        :return: The destination_name of this DestinationSnippetRead.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this DestinationSnippetRead.


        :param destination_name: The destination_name of this DestinationSnippetRead.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")

        self._destination_name = destination_name

    @property
    def icon(self):
        """Gets the icon of this DestinationSnippetRead.


        :return: The icon of this DestinationSnippetRead.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinationSnippetRead.


        :param icon: The icon of this DestinationSnippetRead.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this DestinationSnippetRead.


        :return: The name of this DestinationSnippetRead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinationSnippetRead.


        :param name: The name of this DestinationSnippetRead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
