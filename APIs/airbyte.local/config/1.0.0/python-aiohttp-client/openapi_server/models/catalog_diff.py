# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_transform import StreamTransform
from openapi_server import util


class CatalogDiff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transforms: List[StreamTransform]=None):
        """CatalogDiff - a model defined in OpenAPI

        :param transforms: The transforms of this CatalogDiff.
        """
        self.openapi_types = {
            'transforms': List[StreamTransform]
        }

        self.attribute_map = {
            'transforms': 'transforms'
        }

        self._transforms = transforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDiff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogDiff of this CatalogDiff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transforms(self):
        """Gets the transforms of this CatalogDiff.

        list of stream transformations. order does not matter.

        :return: The transforms of this CatalogDiff.
        :rtype: List[StreamTransform]
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this CatalogDiff.

        list of stream transformations. order does not matter.

        :param transforms: The transforms of this CatalogDiff.
        :type transforms: List[StreamTransform]
        """
        if transforms is None:
            raise ValueError("Invalid value for `transforms`, must not be `None`")

        self._transforms = transforms
