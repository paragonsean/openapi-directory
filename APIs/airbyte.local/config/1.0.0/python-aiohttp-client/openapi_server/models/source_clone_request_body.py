# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_clone_configuration import SourceCloneConfiguration
from openapi_server import util


class SourceCloneRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_clone_id: str=None, source_configuration: SourceCloneConfiguration=None):
        """SourceCloneRequestBody - a model defined in OpenAPI

        :param source_clone_id: The source_clone_id of this SourceCloneRequestBody.
        :param source_configuration: The source_configuration of this SourceCloneRequestBody.
        """
        self.openapi_types = {
            'source_clone_id': str,
            'source_configuration': SourceCloneConfiguration
        }

        self.attribute_map = {
            'source_clone_id': 'sourceCloneId',
            'source_configuration': 'sourceConfiguration'
        }

        self._source_clone_id = source_clone_id
        self._source_configuration = source_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCloneRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCloneRequestBody of this SourceCloneRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_clone_id(self):
        """Gets the source_clone_id of this SourceCloneRequestBody.


        :return: The source_clone_id of this SourceCloneRequestBody.
        :rtype: str
        """
        return self._source_clone_id

    @source_clone_id.setter
    def source_clone_id(self, source_clone_id):
        """Sets the source_clone_id of this SourceCloneRequestBody.


        :param source_clone_id: The source_clone_id of this SourceCloneRequestBody.
        :type source_clone_id: str
        """
        if source_clone_id is None:
            raise ValueError("Invalid value for `source_clone_id`, must not be `None`")

        self._source_clone_id = source_clone_id

    @property
    def source_configuration(self):
        """Gets the source_configuration of this SourceCloneRequestBody.


        :return: The source_configuration of this SourceCloneRequestBody.
        :rtype: SourceCloneConfiguration
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this SourceCloneRequestBody.


        :param source_configuration: The source_configuration of this SourceCloneRequestBody.
        :type source_configuration: SourceCloneConfiguration
        """

        self._source_configuration = source_configuration
