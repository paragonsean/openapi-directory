# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_read import AttemptRead
from openapi_server.models.log_read import LogRead
from openapi_server import util


class AttemptInfoRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt: AttemptRead=None, logs: LogRead=None):
        """AttemptInfoRead - a model defined in OpenAPI

        :param attempt: The attempt of this AttemptInfoRead.
        :param logs: The logs of this AttemptInfoRead.
        """
        self.openapi_types = {
            'attempt': AttemptRead,
            'logs': LogRead
        }

        self.attribute_map = {
            'attempt': 'attempt',
            'logs': 'logs'
        }

        self._attempt = attempt
        self._logs = logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptInfoRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptInfoRead of this AttemptInfoRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt(self):
        """Gets the attempt of this AttemptInfoRead.


        :return: The attempt of this AttemptInfoRead.
        :rtype: AttemptRead
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this AttemptInfoRead.


        :param attempt: The attempt of this AttemptInfoRead.
        :type attempt: AttemptRead
        """
        if attempt is None:
            raise ValueError("Invalid value for `attempt`, must not be `None`")

        self._attempt = attempt

    @property
    def logs(self):
        """Gets the logs of this AttemptInfoRead.


        :return: The logs of this AttemptInfoRead.
        :rtype: LogRead
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this AttemptInfoRead.


        :param logs: The logs of this AttemptInfoRead.
        :type logs: LogRead
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs
