# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldSchemaUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_schema: object=None, old_schema: object=None):
        """FieldSchemaUpdate - a model defined in OpenAPI

        :param new_schema: The new_schema of this FieldSchemaUpdate.
        :param old_schema: The old_schema of this FieldSchemaUpdate.
        """
        self.openapi_types = {
            'new_schema': object,
            'old_schema': object
        }

        self.attribute_map = {
            'new_schema': 'newSchema',
            'old_schema': 'oldSchema'
        }

        self._new_schema = new_schema
        self._old_schema = old_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldSchemaUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldSchemaUpdate of this FieldSchemaUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_schema(self):
        """Gets the new_schema of this FieldSchemaUpdate.

        JSONSchema representation of the field

        :return: The new_schema of this FieldSchemaUpdate.
        :rtype: object
        """
        return self._new_schema

    @new_schema.setter
    def new_schema(self, new_schema):
        """Sets the new_schema of this FieldSchemaUpdate.

        JSONSchema representation of the field

        :param new_schema: The new_schema of this FieldSchemaUpdate.
        :type new_schema: object
        """
        if new_schema is None:
            raise ValueError("Invalid value for `new_schema`, must not be `None`")

        self._new_schema = new_schema

    @property
    def old_schema(self):
        """Gets the old_schema of this FieldSchemaUpdate.

        JSONSchema representation of the field

        :return: The old_schema of this FieldSchemaUpdate.
        :rtype: object
        """
        return self._old_schema

    @old_schema.setter
    def old_schema(self, old_schema):
        """Sets the old_schema of this FieldSchemaUpdate.

        JSONSchema representation of the field

        :param old_schema: The old_schema of this FieldSchemaUpdate.
        :type old_schema: object
        """
        if old_schema is None:
            raise ValueError("Invalid value for `old_schema`, must not be `None`")

        self._old_schema = old_schema
