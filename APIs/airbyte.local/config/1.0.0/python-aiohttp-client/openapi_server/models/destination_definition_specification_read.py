# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_auth import AdvancedAuth
from openapi_server.models.auth_specification import AuthSpecification
from openapi_server.models.destination_sync_mode import DestinationSyncMode
from openapi_server.models.synchronous_job_read import SynchronousJobRead
from openapi_server import util


class DestinationDefinitionSpecificationRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_auth: AdvancedAuth=None, auth_specification: AuthSpecification=None, connection_specification: object=None, destination_definition_id: str=None, documentation_url: str=None, job_info: SynchronousJobRead=None, supported_destination_sync_modes: List[DestinationSyncMode]=None):
        """DestinationDefinitionSpecificationRead - a model defined in OpenAPI

        :param advanced_auth: The advanced_auth of this DestinationDefinitionSpecificationRead.
        :param auth_specification: The auth_specification of this DestinationDefinitionSpecificationRead.
        :param connection_specification: The connection_specification of this DestinationDefinitionSpecificationRead.
        :param destination_definition_id: The destination_definition_id of this DestinationDefinitionSpecificationRead.
        :param documentation_url: The documentation_url of this DestinationDefinitionSpecificationRead.
        :param job_info: The job_info of this DestinationDefinitionSpecificationRead.
        :param supported_destination_sync_modes: The supported_destination_sync_modes of this DestinationDefinitionSpecificationRead.
        """
        self.openapi_types = {
            'advanced_auth': AdvancedAuth,
            'auth_specification': AuthSpecification,
            'connection_specification': object,
            'destination_definition_id': str,
            'documentation_url': str,
            'job_info': SynchronousJobRead,
            'supported_destination_sync_modes': List[DestinationSyncMode]
        }

        self.attribute_map = {
            'advanced_auth': 'advancedAuth',
            'auth_specification': 'authSpecification',
            'connection_specification': 'connectionSpecification',
            'destination_definition_id': 'destinationDefinitionId',
            'documentation_url': 'documentationUrl',
            'job_info': 'jobInfo',
            'supported_destination_sync_modes': 'supportedDestinationSyncModes'
        }

        self._advanced_auth = advanced_auth
        self._auth_specification = auth_specification
        self._connection_specification = connection_specification
        self._destination_definition_id = destination_definition_id
        self._documentation_url = documentation_url
        self._job_info = job_info
        self._supported_destination_sync_modes = supported_destination_sync_modes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationDefinitionSpecificationRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationDefinitionSpecificationRead of this DestinationDefinitionSpecificationRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_auth(self):
        """Gets the advanced_auth of this DestinationDefinitionSpecificationRead.


        :return: The advanced_auth of this DestinationDefinitionSpecificationRead.
        :rtype: AdvancedAuth
        """
        return self._advanced_auth

    @advanced_auth.setter
    def advanced_auth(self, advanced_auth):
        """Sets the advanced_auth of this DestinationDefinitionSpecificationRead.


        :param advanced_auth: The advanced_auth of this DestinationDefinitionSpecificationRead.
        :type advanced_auth: AdvancedAuth
        """

        self._advanced_auth = advanced_auth

    @property
    def auth_specification(self):
        """Gets the auth_specification of this DestinationDefinitionSpecificationRead.


        :return: The auth_specification of this DestinationDefinitionSpecificationRead.
        :rtype: AuthSpecification
        """
        return self._auth_specification

    @auth_specification.setter
    def auth_specification(self, auth_specification):
        """Sets the auth_specification of this DestinationDefinitionSpecificationRead.


        :param auth_specification: The auth_specification of this DestinationDefinitionSpecificationRead.
        :type auth_specification: AuthSpecification
        """

        self._auth_specification = auth_specification

    @property
    def connection_specification(self):
        """Gets the connection_specification of this DestinationDefinitionSpecificationRead.

        The specification for what values are required to configure the destinationDefinition.

        :return: The connection_specification of this DestinationDefinitionSpecificationRead.
        :rtype: object
        """
        return self._connection_specification

    @connection_specification.setter
    def connection_specification(self, connection_specification):
        """Sets the connection_specification of this DestinationDefinitionSpecificationRead.

        The specification for what values are required to configure the destinationDefinition.

        :param connection_specification: The connection_specification of this DestinationDefinitionSpecificationRead.
        :type connection_specification: object
        """

        self._connection_specification = connection_specification

    @property
    def destination_definition_id(self):
        """Gets the destination_definition_id of this DestinationDefinitionSpecificationRead.


        :return: The destination_definition_id of this DestinationDefinitionSpecificationRead.
        :rtype: str
        """
        return self._destination_definition_id

    @destination_definition_id.setter
    def destination_definition_id(self, destination_definition_id):
        """Sets the destination_definition_id of this DestinationDefinitionSpecificationRead.


        :param destination_definition_id: The destination_definition_id of this DestinationDefinitionSpecificationRead.
        :type destination_definition_id: str
        """
        if destination_definition_id is None:
            raise ValueError("Invalid value for `destination_definition_id`, must not be `None`")

        self._destination_definition_id = destination_definition_id

    @property
    def documentation_url(self):
        """Gets the documentation_url of this DestinationDefinitionSpecificationRead.


        :return: The documentation_url of this DestinationDefinitionSpecificationRead.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this DestinationDefinitionSpecificationRead.


        :param documentation_url: The documentation_url of this DestinationDefinitionSpecificationRead.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def job_info(self):
        """Gets the job_info of this DestinationDefinitionSpecificationRead.


        :return: The job_info of this DestinationDefinitionSpecificationRead.
        :rtype: SynchronousJobRead
        """
        return self._job_info

    @job_info.setter
    def job_info(self, job_info):
        """Sets the job_info of this DestinationDefinitionSpecificationRead.


        :param job_info: The job_info of this DestinationDefinitionSpecificationRead.
        :type job_info: SynchronousJobRead
        """
        if job_info is None:
            raise ValueError("Invalid value for `job_info`, must not be `None`")

        self._job_info = job_info

    @property
    def supported_destination_sync_modes(self):
        """Gets the supported_destination_sync_modes of this DestinationDefinitionSpecificationRead.


        :return: The supported_destination_sync_modes of this DestinationDefinitionSpecificationRead.
        :rtype: List[DestinationSyncMode]
        """
        return self._supported_destination_sync_modes

    @supported_destination_sync_modes.setter
    def supported_destination_sync_modes(self, supported_destination_sync_modes):
        """Sets the supported_destination_sync_modes of this DestinationDefinitionSpecificationRead.


        :param supported_destination_sync_modes: The supported_destination_sync_modes of this DestinationDefinitionSpecificationRead.
        :type supported_destination_sync_modes: List[DestinationSyncMode]
        """

        self._supported_destination_sync_modes = supported_destination_sync_modes
