# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_state import StreamState
from openapi_server import util


class GlobalState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shared_state: object=None, stream_states: List[StreamState]=None):
        """GlobalState - a model defined in OpenAPI

        :param shared_state: The shared_state of this GlobalState.
        :param stream_states: The stream_states of this GlobalState.
        """
        self.openapi_types = {
            'shared_state': object,
            'stream_states': List[StreamState]
        }

        self.attribute_map = {
            'shared_state': 'shared_state',
            'stream_states': 'streamStates'
        }

        self._shared_state = shared_state
        self._stream_states = stream_states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalState of this GlobalState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shared_state(self):
        """Gets the shared_state of this GlobalState.


        :return: The shared_state of this GlobalState.
        :rtype: object
        """
        return self._shared_state

    @shared_state.setter
    def shared_state(self, shared_state):
        """Sets the shared_state of this GlobalState.


        :param shared_state: The shared_state of this GlobalState.
        :type shared_state: object
        """

        self._shared_state = shared_state

    @property
    def stream_states(self):
        """Gets the stream_states of this GlobalState.


        :return: The stream_states of this GlobalState.
        :rtype: List[StreamState]
        """
        return self._stream_states

    @stream_states.setter
    def stream_states(self, stream_states):
        """Sets the stream_states of this GlobalState.


        :param stream_states: The stream_states of this GlobalState.
        :type stream_states: List[StreamState]
        """
        if stream_states is None:
            raise ValueError("Invalid value for `stream_states`, must not be `None`")

        self._stream_states = stream_states
