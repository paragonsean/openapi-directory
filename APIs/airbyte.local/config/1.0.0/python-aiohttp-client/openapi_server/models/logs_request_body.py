# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_type import LogType
from openapi_server import util


class LogsRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_type: LogType=None):
        """LogsRequestBody - a model defined in OpenAPI

        :param log_type: The log_type of this LogsRequestBody.
        """
        self.openapi_types = {
            'log_type': LogType
        }

        self.attribute_map = {
            'log_type': 'logType'
        }

        self._log_type = log_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogsRequestBody of this LogsRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_type(self):
        """Gets the log_type of this LogsRequestBody.


        :return: The log_type of this LogsRequestBody.
        :rtype: LogType
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this LogsRequestBody.


        :param log_type: The log_type of this LogsRequestBody.
        :type log_type: LogType
        """
        if log_type is None:
            raise ValueError("Invalid value for `log_type`, must not be `None`")

        self._log_type = log_type
