# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_failure_origin import AttemptFailureOrigin
from openapi_server.models.attempt_failure_type import AttemptFailureType
from openapi_server import util


class AttemptFailureReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_message: str=None, failure_origin: AttemptFailureOrigin=None, failure_type: AttemptFailureType=None, internal_message: str=None, retryable: bool=None, stacktrace: str=None, timestamp: int=None):
        """AttemptFailureReason - a model defined in OpenAPI

        :param external_message: The external_message of this AttemptFailureReason.
        :param failure_origin: The failure_origin of this AttemptFailureReason.
        :param failure_type: The failure_type of this AttemptFailureReason.
        :param internal_message: The internal_message of this AttemptFailureReason.
        :param retryable: The retryable of this AttemptFailureReason.
        :param stacktrace: The stacktrace of this AttemptFailureReason.
        :param timestamp: The timestamp of this AttemptFailureReason.
        """
        self.openapi_types = {
            'external_message': str,
            'failure_origin': AttemptFailureOrigin,
            'failure_type': AttemptFailureType,
            'internal_message': str,
            'retryable': bool,
            'stacktrace': str,
            'timestamp': int
        }

        self.attribute_map = {
            'external_message': 'externalMessage',
            'failure_origin': 'failureOrigin',
            'failure_type': 'failureType',
            'internal_message': 'internalMessage',
            'retryable': 'retryable',
            'stacktrace': 'stacktrace',
            'timestamp': 'timestamp'
        }

        self._external_message = external_message
        self._failure_origin = failure_origin
        self._failure_type = failure_type
        self._internal_message = internal_message
        self._retryable = retryable
        self._stacktrace = stacktrace
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptFailureReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptFailureReason of this AttemptFailureReason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_message(self):
        """Gets the external_message of this AttemptFailureReason.


        :return: The external_message of this AttemptFailureReason.
        :rtype: str
        """
        return self._external_message

    @external_message.setter
    def external_message(self, external_message):
        """Sets the external_message of this AttemptFailureReason.


        :param external_message: The external_message of this AttemptFailureReason.
        :type external_message: str
        """

        self._external_message = external_message

    @property
    def failure_origin(self):
        """Gets the failure_origin of this AttemptFailureReason.


        :return: The failure_origin of this AttemptFailureReason.
        :rtype: AttemptFailureOrigin
        """
        return self._failure_origin

    @failure_origin.setter
    def failure_origin(self, failure_origin):
        """Sets the failure_origin of this AttemptFailureReason.


        :param failure_origin: The failure_origin of this AttemptFailureReason.
        :type failure_origin: AttemptFailureOrigin
        """

        self._failure_origin = failure_origin

    @property
    def failure_type(self):
        """Gets the failure_type of this AttemptFailureReason.


        :return: The failure_type of this AttemptFailureReason.
        :rtype: AttemptFailureType
        """
        return self._failure_type

    @failure_type.setter
    def failure_type(self, failure_type):
        """Sets the failure_type of this AttemptFailureReason.


        :param failure_type: The failure_type of this AttemptFailureReason.
        :type failure_type: AttemptFailureType
        """

        self._failure_type = failure_type

    @property
    def internal_message(self):
        """Gets the internal_message of this AttemptFailureReason.


        :return: The internal_message of this AttemptFailureReason.
        :rtype: str
        """
        return self._internal_message

    @internal_message.setter
    def internal_message(self, internal_message):
        """Sets the internal_message of this AttemptFailureReason.


        :param internal_message: The internal_message of this AttemptFailureReason.
        :type internal_message: str
        """

        self._internal_message = internal_message

    @property
    def retryable(self):
        """Gets the retryable of this AttemptFailureReason.

        True if it is known that retrying may succeed, e.g. for a transient failure. False if it is known that a retry will not succeed, e.g. for a configuration issue. If not set, retryable status is not well known.

        :return: The retryable of this AttemptFailureReason.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """Sets the retryable of this AttemptFailureReason.

        True if it is known that retrying may succeed, e.g. for a transient failure. False if it is known that a retry will not succeed, e.g. for a configuration issue. If not set, retryable status is not well known.

        :param retryable: The retryable of this AttemptFailureReason.
        :type retryable: bool
        """

        self._retryable = retryable

    @property
    def stacktrace(self):
        """Gets the stacktrace of this AttemptFailureReason.


        :return: The stacktrace of this AttemptFailureReason.
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this AttemptFailureReason.


        :param stacktrace: The stacktrace of this AttemptFailureReason.
        :type stacktrace: str
        """

        self._stacktrace = stacktrace

    @property
    def timestamp(self):
        """Gets the timestamp of this AttemptFailureReason.


        :return: The timestamp of this AttemptFailureReason.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AttemptFailureReason.


        :param timestamp: The timestamp of this AttemptFailureReason.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
