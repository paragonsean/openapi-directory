# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvalidInputProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invalid_value: str=None, message: str=None, property_path: str=None):
        """InvalidInputProperty - a model defined in OpenAPI

        :param invalid_value: The invalid_value of this InvalidInputProperty.
        :param message: The message of this InvalidInputProperty.
        :param property_path: The property_path of this InvalidInputProperty.
        """
        self.openapi_types = {
            'invalid_value': str,
            'message': str,
            'property_path': str
        }

        self.attribute_map = {
            'invalid_value': 'invalidValue',
            'message': 'message',
            'property_path': 'propertyPath'
        }

        self._invalid_value = invalid_value
        self._message = message
        self._property_path = property_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvalidInputProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvalidInputProperty of this InvalidInputProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invalid_value(self):
        """Gets the invalid_value of this InvalidInputProperty.


        :return: The invalid_value of this InvalidInputProperty.
        :rtype: str
        """
        return self._invalid_value

    @invalid_value.setter
    def invalid_value(self, invalid_value):
        """Sets the invalid_value of this InvalidInputProperty.


        :param invalid_value: The invalid_value of this InvalidInputProperty.
        :type invalid_value: str
        """

        self._invalid_value = invalid_value

    @property
    def message(self):
        """Gets the message of this InvalidInputProperty.


        :return: The message of this InvalidInputProperty.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvalidInputProperty.


        :param message: The message of this InvalidInputProperty.
        :type message: str
        """

        self._message = message

    @property
    def property_path(self):
        """Gets the property_path of this InvalidInputProperty.


        :return: The property_path of this InvalidInputProperty.
        :rtype: str
        """
        return self._property_path

    @property_path.setter
    def property_path(self, property_path):
        """Sets the property_path of this InvalidInputProperty.


        :param property_path: The property_path of this InvalidInputProperty.
        :type property_path: str
        """
        if property_path is None:
            raise ValueError("Invalid value for `property_path`, must not be `None`")

        self._property_path = property_path
