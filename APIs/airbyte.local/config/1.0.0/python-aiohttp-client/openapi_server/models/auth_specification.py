# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_auth2_specification import OAuth2Specification
from openapi_server import util


class AuthSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, oauth2_specification: OAuth2Specification=None):
        """AuthSpecification - a model defined in OpenAPI

        :param auth_type: The auth_type of this AuthSpecification.
        :param oauth2_specification: The oauth2_specification of this AuthSpecification.
        """
        self.openapi_types = {
            'auth_type': str,
            'oauth2_specification': OAuth2Specification
        }

        self.attribute_map = {
            'auth_type': 'auth_type',
            'oauth2_specification': 'oauth2Specification'
        }

        self._auth_type = auth_type
        self._oauth2_specification = oauth2_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthSpecification of this AuthSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this AuthSpecification.


        :return: The auth_type of this AuthSpecification.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AuthSpecification.


        :param auth_type: The auth_type of this AuthSpecification.
        :type auth_type: str
        """
        allowed_values = ["oauth2.0"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def oauth2_specification(self):
        """Gets the oauth2_specification of this AuthSpecification.


        :return: The oauth2_specification of this AuthSpecification.
        :rtype: OAuth2Specification
        """
        return self._oauth2_specification

    @oauth2_specification.setter
    def oauth2_specification(self, oauth2_specification):
        """Sets the oauth2_specification of this AuthSpecification.


        :param oauth2_specification: The oauth2_specification of this AuthSpecification.
        :type oauth2_specification: OAuth2Specification
        """

        self._oauth2_specification = oauth2_specification
