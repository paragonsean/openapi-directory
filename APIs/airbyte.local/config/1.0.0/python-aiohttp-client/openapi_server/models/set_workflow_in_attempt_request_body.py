# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetWorkflowInAttemptRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt_number: int=None, job_id: int=None, processing_task_queue: str='', workflow_id: str=None):
        """SetWorkflowInAttemptRequestBody - a model defined in OpenAPI

        :param attempt_number: The attempt_number of this SetWorkflowInAttemptRequestBody.
        :param job_id: The job_id of this SetWorkflowInAttemptRequestBody.
        :param processing_task_queue: The processing_task_queue of this SetWorkflowInAttemptRequestBody.
        :param workflow_id: The workflow_id of this SetWorkflowInAttemptRequestBody.
        """
        self.openapi_types = {
            'attempt_number': int,
            'job_id': int,
            'processing_task_queue': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'attempt_number': 'attemptNumber',
            'job_id': 'jobId',
            'processing_task_queue': 'processingTaskQueue',
            'workflow_id': 'workflowId'
        }

        self._attempt_number = attempt_number
        self._job_id = job_id
        self._processing_task_queue = processing_task_queue
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetWorkflowInAttemptRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetWorkflowInAttemptRequestBody of this SetWorkflowInAttemptRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt_number(self):
        """Gets the attempt_number of this SetWorkflowInAttemptRequestBody.


        :return: The attempt_number of this SetWorkflowInAttemptRequestBody.
        :rtype: int
        """
        return self._attempt_number

    @attempt_number.setter
    def attempt_number(self, attempt_number):
        """Sets the attempt_number of this SetWorkflowInAttemptRequestBody.


        :param attempt_number: The attempt_number of this SetWorkflowInAttemptRequestBody.
        :type attempt_number: int
        """
        if attempt_number is None:
            raise ValueError("Invalid value for `attempt_number`, must not be `None`")

        self._attempt_number = attempt_number

    @property
    def job_id(self):
        """Gets the job_id of this SetWorkflowInAttemptRequestBody.


        :return: The job_id of this SetWorkflowInAttemptRequestBody.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this SetWorkflowInAttemptRequestBody.


        :param job_id: The job_id of this SetWorkflowInAttemptRequestBody.
        :type job_id: int
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def processing_task_queue(self):
        """Gets the processing_task_queue of this SetWorkflowInAttemptRequestBody.


        :return: The processing_task_queue of this SetWorkflowInAttemptRequestBody.
        :rtype: str
        """
        return self._processing_task_queue

    @processing_task_queue.setter
    def processing_task_queue(self, processing_task_queue):
        """Sets the processing_task_queue of this SetWorkflowInAttemptRequestBody.


        :param processing_task_queue: The processing_task_queue of this SetWorkflowInAttemptRequestBody.
        :type processing_task_queue: str
        """

        self._processing_task_queue = processing_task_queue

    @property
    def workflow_id(self):
        """Gets the workflow_id of this SetWorkflowInAttemptRequestBody.


        :return: The workflow_id of this SetWorkflowInAttemptRequestBody.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this SetWorkflowInAttemptRequestBody.


        :param workflow_id: The workflow_id of this SetWorkflowInAttemptRequestBody.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id
