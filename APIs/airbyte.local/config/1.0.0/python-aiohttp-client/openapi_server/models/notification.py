# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_type import NotificationType
from openapi_server.models.slack_notification_configuration import SlackNotificationConfiguration
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customerio_configuration: object=None, notification_type: NotificationType=None, send_on_failure: bool=True, send_on_success: bool=False, slack_configuration: SlackNotificationConfiguration=None):
        """Notification - a model defined in OpenAPI

        :param customerio_configuration: The customerio_configuration of this Notification.
        :param notification_type: The notification_type of this Notification.
        :param send_on_failure: The send_on_failure of this Notification.
        :param send_on_success: The send_on_success of this Notification.
        :param slack_configuration: The slack_configuration of this Notification.
        """
        self.openapi_types = {
            'customerio_configuration': object,
            'notification_type': NotificationType,
            'send_on_failure': bool,
            'send_on_success': bool,
            'slack_configuration': SlackNotificationConfiguration
        }

        self.attribute_map = {
            'customerio_configuration': 'customerioConfiguration',
            'notification_type': 'notificationType',
            'send_on_failure': 'sendOnFailure',
            'send_on_success': 'sendOnSuccess',
            'slack_configuration': 'slackConfiguration'
        }

        self._customerio_configuration = customerio_configuration
        self._notification_type = notification_type
        self._send_on_failure = send_on_failure
        self._send_on_success = send_on_success
        self._slack_configuration = slack_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customerio_configuration(self):
        """Gets the customerio_configuration of this Notification.


        :return: The customerio_configuration of this Notification.
        :rtype: object
        """
        return self._customerio_configuration

    @customerio_configuration.setter
    def customerio_configuration(self, customerio_configuration):
        """Sets the customerio_configuration of this Notification.


        :param customerio_configuration: The customerio_configuration of this Notification.
        :type customerio_configuration: object
        """

        self._customerio_configuration = customerio_configuration

    @property
    def notification_type(self):
        """Gets the notification_type of this Notification.


        :return: The notification_type of this Notification.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Notification.


        :param notification_type: The notification_type of this Notification.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")

        self._notification_type = notification_type

    @property
    def send_on_failure(self):
        """Gets the send_on_failure of this Notification.


        :return: The send_on_failure of this Notification.
        :rtype: bool
        """
        return self._send_on_failure

    @send_on_failure.setter
    def send_on_failure(self, send_on_failure):
        """Sets the send_on_failure of this Notification.


        :param send_on_failure: The send_on_failure of this Notification.
        :type send_on_failure: bool
        """
        if send_on_failure is None:
            raise ValueError("Invalid value for `send_on_failure`, must not be `None`")

        self._send_on_failure = send_on_failure

    @property
    def send_on_success(self):
        """Gets the send_on_success of this Notification.


        :return: The send_on_success of this Notification.
        :rtype: bool
        """
        return self._send_on_success

    @send_on_success.setter
    def send_on_success(self, send_on_success):
        """Sets the send_on_success of this Notification.


        :param send_on_success: The send_on_success of this Notification.
        :type send_on_success: bool
        """
        if send_on_success is None:
            raise ValueError("Invalid value for `send_on_success`, must not be `None`")

        self._send_on_success = send_on_success

    @property
    def slack_configuration(self):
        """Gets the slack_configuration of this Notification.


        :return: The slack_configuration of this Notification.
        :rtype: SlackNotificationConfiguration
        """
        return self._slack_configuration

    @slack_configuration.setter
    def slack_configuration(self, slack_configuration):
        """Sets the slack_configuration of this Notification.


        :param slack_configuration: The slack_configuration of this Notification.
        :type slack_configuration: SlackNotificationConfiguration
        """

        self._slack_configuration = slack_configuration
