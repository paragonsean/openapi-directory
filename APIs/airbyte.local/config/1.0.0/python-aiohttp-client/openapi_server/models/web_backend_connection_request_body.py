# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebBackendConnectionRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, with_refreshed_catalog: bool=None):
        """WebBackendConnectionRequestBody - a model defined in OpenAPI

        :param connection_id: The connection_id of this WebBackendConnectionRequestBody.
        :param with_refreshed_catalog: The with_refreshed_catalog of this WebBackendConnectionRequestBody.
        """
        self.openapi_types = {
            'connection_id': str,
            'with_refreshed_catalog': bool
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'with_refreshed_catalog': 'withRefreshedCatalog'
        }

        self._connection_id = connection_id
        self._with_refreshed_catalog = with_refreshed_catalog

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebBackendConnectionRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebBackendConnectionRequestBody of this WebBackendConnectionRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this WebBackendConnectionRequestBody.


        :return: The connection_id of this WebBackendConnectionRequestBody.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this WebBackendConnectionRequestBody.


        :param connection_id: The connection_id of this WebBackendConnectionRequestBody.
        :type connection_id: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")

        self._connection_id = connection_id

    @property
    def with_refreshed_catalog(self):
        """Gets the with_refreshed_catalog of this WebBackendConnectionRequestBody.


        :return: The with_refreshed_catalog of this WebBackendConnectionRequestBody.
        :rtype: bool
        """
        return self._with_refreshed_catalog

    @with_refreshed_catalog.setter
    def with_refreshed_catalog(self, with_refreshed_catalog):
        """Sets the with_refreshed_catalog of this WebBackendConnectionRequestBody.


        :param with_refreshed_catalog: The with_refreshed_catalog of this WebBackendConnectionRequestBody.
        :type with_refreshed_catalog: bool
        """

        self._with_refreshed_catalog = with_refreshed_catalog
