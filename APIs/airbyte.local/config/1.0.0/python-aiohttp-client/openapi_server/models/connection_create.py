# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airbyte_catalog import AirbyteCatalog
from openapi_server.models.connection_schedule import ConnectionSchedule
from openapi_server.models.connection_schedule_data import ConnectionScheduleData
from openapi_server.models.connection_schedule_type import ConnectionScheduleType
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.geography import Geography
from openapi_server.models.namespace_definition_type import NamespaceDefinitionType
from openapi_server.models.non_breaking_changes_preference import NonBreakingChangesPreference
from openapi_server.models.resource_requirements import ResourceRequirements
from openapi_server import util


class ConnectionCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_id: str=None, geography: Geography=None, name: str=None, namespace_definition: NamespaceDefinitionType=None, namespace_format: str=None, non_breaking_changes_preference: NonBreakingChangesPreference=None, notify_schema_changes: bool=None, operation_ids: List[str]=None, prefix: str=None, resource_requirements: ResourceRequirements=None, schedule: ConnectionSchedule=None, schedule_data: ConnectionScheduleData=None, schedule_type: ConnectionScheduleType=None, source_catalog_id: str=None, source_id: str=None, status: ConnectionStatus=None, sync_catalog: AirbyteCatalog=None):
        """ConnectionCreate - a model defined in OpenAPI

        :param destination_id: The destination_id of this ConnectionCreate.
        :param geography: The geography of this ConnectionCreate.
        :param name: The name of this ConnectionCreate.
        :param namespace_definition: The namespace_definition of this ConnectionCreate.
        :param namespace_format: The namespace_format of this ConnectionCreate.
        :param non_breaking_changes_preference: The non_breaking_changes_preference of this ConnectionCreate.
        :param notify_schema_changes: The notify_schema_changes of this ConnectionCreate.
        :param operation_ids: The operation_ids of this ConnectionCreate.
        :param prefix: The prefix of this ConnectionCreate.
        :param resource_requirements: The resource_requirements of this ConnectionCreate.
        :param schedule: The schedule of this ConnectionCreate.
        :param schedule_data: The schedule_data of this ConnectionCreate.
        :param schedule_type: The schedule_type of this ConnectionCreate.
        :param source_catalog_id: The source_catalog_id of this ConnectionCreate.
        :param source_id: The source_id of this ConnectionCreate.
        :param status: The status of this ConnectionCreate.
        :param sync_catalog: The sync_catalog of this ConnectionCreate.
        """
        self.openapi_types = {
            'destination_id': str,
            'geography': Geography,
            'name': str,
            'namespace_definition': NamespaceDefinitionType,
            'namespace_format': str,
            'non_breaking_changes_preference': NonBreakingChangesPreference,
            'notify_schema_changes': bool,
            'operation_ids': List[str],
            'prefix': str,
            'resource_requirements': ResourceRequirements,
            'schedule': ConnectionSchedule,
            'schedule_data': ConnectionScheduleData,
            'schedule_type': ConnectionScheduleType,
            'source_catalog_id': str,
            'source_id': str,
            'status': ConnectionStatus,
            'sync_catalog': AirbyteCatalog
        }

        self.attribute_map = {
            'destination_id': 'destinationId',
            'geography': 'geography',
            'name': 'name',
            'namespace_definition': 'namespaceDefinition',
            'namespace_format': 'namespaceFormat',
            'non_breaking_changes_preference': 'nonBreakingChangesPreference',
            'notify_schema_changes': 'notifySchemaChanges',
            'operation_ids': 'operationIds',
            'prefix': 'prefix',
            'resource_requirements': 'resourceRequirements',
            'schedule': 'schedule',
            'schedule_data': 'scheduleData',
            'schedule_type': 'scheduleType',
            'source_catalog_id': 'sourceCatalogId',
            'source_id': 'sourceId',
            'status': 'status',
            'sync_catalog': 'syncCatalog'
        }

        self._destination_id = destination_id
        self._geography = geography
        self._name = name
        self._namespace_definition = namespace_definition
        self._namespace_format = namespace_format
        self._non_breaking_changes_preference = non_breaking_changes_preference
        self._notify_schema_changes = notify_schema_changes
        self._operation_ids = operation_ids
        self._prefix = prefix
        self._resource_requirements = resource_requirements
        self._schedule = schedule
        self._schedule_data = schedule_data
        self._schedule_type = schedule_type
        self._source_catalog_id = source_catalog_id
        self._source_id = source_id
        self._status = status
        self._sync_catalog = sync_catalog

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionCreate of this ConnectionCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_id(self):
        """Gets the destination_id of this ConnectionCreate.


        :return: The destination_id of this ConnectionCreate.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this ConnectionCreate.


        :param destination_id: The destination_id of this ConnectionCreate.
        :type destination_id: str
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")

        self._destination_id = destination_id

    @property
    def geography(self):
        """Gets the geography of this ConnectionCreate.


        :return: The geography of this ConnectionCreate.
        :rtype: Geography
        """
        return self._geography

    @geography.setter
    def geography(self, geography):
        """Sets the geography of this ConnectionCreate.


        :param geography: The geography of this ConnectionCreate.
        :type geography: Geography
        """

        self._geography = geography

    @property
    def name(self):
        """Gets the name of this ConnectionCreate.

        Optional name of the connection

        :return: The name of this ConnectionCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionCreate.

        Optional name of the connection

        :param name: The name of this ConnectionCreate.
        :type name: str
        """

        self._name = name

    @property
    def namespace_definition(self):
        """Gets the namespace_definition of this ConnectionCreate.


        :return: The namespace_definition of this ConnectionCreate.
        :rtype: NamespaceDefinitionType
        """
        return self._namespace_definition

    @namespace_definition.setter
    def namespace_definition(self, namespace_definition):
        """Sets the namespace_definition of this ConnectionCreate.


        :param namespace_definition: The namespace_definition of this ConnectionCreate.
        :type namespace_definition: NamespaceDefinitionType
        """

        self._namespace_definition = namespace_definition

    @property
    def namespace_format(self):
        """Gets the namespace_format of this ConnectionCreate.

        Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.

        :return: The namespace_format of this ConnectionCreate.
        :rtype: str
        """
        return self._namespace_format

    @namespace_format.setter
    def namespace_format(self, namespace_format):
        """Sets the namespace_format of this ConnectionCreate.

        Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.

        :param namespace_format: The namespace_format of this ConnectionCreate.
        :type namespace_format: str
        """

        self._namespace_format = namespace_format

    @property
    def non_breaking_changes_preference(self):
        """Gets the non_breaking_changes_preference of this ConnectionCreate.


        :return: The non_breaking_changes_preference of this ConnectionCreate.
        :rtype: NonBreakingChangesPreference
        """
        return self._non_breaking_changes_preference

    @non_breaking_changes_preference.setter
    def non_breaking_changes_preference(self, non_breaking_changes_preference):
        """Sets the non_breaking_changes_preference of this ConnectionCreate.


        :param non_breaking_changes_preference: The non_breaking_changes_preference of this ConnectionCreate.
        :type non_breaking_changes_preference: NonBreakingChangesPreference
        """

        self._non_breaking_changes_preference = non_breaking_changes_preference

    @property
    def notify_schema_changes(self):
        """Gets the notify_schema_changes of this ConnectionCreate.


        :return: The notify_schema_changes of this ConnectionCreate.
        :rtype: bool
        """
        return self._notify_schema_changes

    @notify_schema_changes.setter
    def notify_schema_changes(self, notify_schema_changes):
        """Sets the notify_schema_changes of this ConnectionCreate.


        :param notify_schema_changes: The notify_schema_changes of this ConnectionCreate.
        :type notify_schema_changes: bool
        """

        self._notify_schema_changes = notify_schema_changes

    @property
    def operation_ids(self):
        """Gets the operation_ids of this ConnectionCreate.


        :return: The operation_ids of this ConnectionCreate.
        :rtype: List[str]
        """
        return self._operation_ids

    @operation_ids.setter
    def operation_ids(self, operation_ids):
        """Sets the operation_ids of this ConnectionCreate.


        :param operation_ids: The operation_ids of this ConnectionCreate.
        :type operation_ids: List[str]
        """

        self._operation_ids = operation_ids

    @property
    def prefix(self):
        """Gets the prefix of this ConnectionCreate.

        Prefix that will be prepended to the name of each stream when it is written to the destination.

        :return: The prefix of this ConnectionCreate.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ConnectionCreate.

        Prefix that will be prepended to the name of each stream when it is written to the destination.

        :param prefix: The prefix of this ConnectionCreate.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this ConnectionCreate.


        :return: The resource_requirements of this ConnectionCreate.
        :rtype: ResourceRequirements
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this ConnectionCreate.


        :param resource_requirements: The resource_requirements of this ConnectionCreate.
        :type resource_requirements: ResourceRequirements
        """

        self._resource_requirements = resource_requirements

    @property
    def schedule(self):
        """Gets the schedule of this ConnectionCreate.


        :return: The schedule of this ConnectionCreate.
        :rtype: ConnectionSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ConnectionCreate.


        :param schedule: The schedule of this ConnectionCreate.
        :type schedule: ConnectionSchedule
        """

        self._schedule = schedule

    @property
    def schedule_data(self):
        """Gets the schedule_data of this ConnectionCreate.


        :return: The schedule_data of this ConnectionCreate.
        :rtype: ConnectionScheduleData
        """
        return self._schedule_data

    @schedule_data.setter
    def schedule_data(self, schedule_data):
        """Sets the schedule_data of this ConnectionCreate.


        :param schedule_data: The schedule_data of this ConnectionCreate.
        :type schedule_data: ConnectionScheduleData
        """

        self._schedule_data = schedule_data

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ConnectionCreate.


        :return: The schedule_type of this ConnectionCreate.
        :rtype: ConnectionScheduleType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ConnectionCreate.


        :param schedule_type: The schedule_type of this ConnectionCreate.
        :type schedule_type: ConnectionScheduleType
        """

        self._schedule_type = schedule_type

    @property
    def source_catalog_id(self):
        """Gets the source_catalog_id of this ConnectionCreate.


        :return: The source_catalog_id of this ConnectionCreate.
        :rtype: str
        """
        return self._source_catalog_id

    @source_catalog_id.setter
    def source_catalog_id(self, source_catalog_id):
        """Sets the source_catalog_id of this ConnectionCreate.


        :param source_catalog_id: The source_catalog_id of this ConnectionCreate.
        :type source_catalog_id: str
        """

        self._source_catalog_id = source_catalog_id

    @property
    def source_id(self):
        """Gets the source_id of this ConnectionCreate.


        :return: The source_id of this ConnectionCreate.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ConnectionCreate.


        :param source_id: The source_id of this ConnectionCreate.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def status(self):
        """Gets the status of this ConnectionCreate.


        :return: The status of this ConnectionCreate.
        :rtype: ConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectionCreate.


        :param status: The status of this ConnectionCreate.
        :type status: ConnectionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def sync_catalog(self):
        """Gets the sync_catalog of this ConnectionCreate.


        :return: The sync_catalog of this ConnectionCreate.
        :rtype: AirbyteCatalog
        """
        return self._sync_catalog

    @sync_catalog.setter
    def sync_catalog(self, sync_catalog):
        """Sets the sync_catalog of this ConnectionCreate.


        :param sync_catalog: The sync_catalog of this ConnectionCreate.
        :type sync_catalog: AirbyteCatalog
        """

        self._sync_catalog = sync_catalog
