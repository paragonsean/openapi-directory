# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_definition_read import DestinationDefinitionRead
from openapi_server.models.job_config_type import JobConfigType
from openapi_server.models.job_status import JobStatus
from openapi_server.models.source_definition_read import SourceDefinitionRead
from openapi_server import util


class JobDebugRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airbyte_version: str=None, config_id: str=None, config_type: JobConfigType=None, destination_definition: DestinationDefinitionRead=None, id: int=None, source_definition: SourceDefinitionRead=None, status: JobStatus=None):
        """JobDebugRead - a model defined in OpenAPI

        :param airbyte_version: The airbyte_version of this JobDebugRead.
        :param config_id: The config_id of this JobDebugRead.
        :param config_type: The config_type of this JobDebugRead.
        :param destination_definition: The destination_definition of this JobDebugRead.
        :param id: The id of this JobDebugRead.
        :param source_definition: The source_definition of this JobDebugRead.
        :param status: The status of this JobDebugRead.
        """
        self.openapi_types = {
            'airbyte_version': str,
            'config_id': str,
            'config_type': JobConfigType,
            'destination_definition': DestinationDefinitionRead,
            'id': int,
            'source_definition': SourceDefinitionRead,
            'status': JobStatus
        }

        self.attribute_map = {
            'airbyte_version': 'airbyteVersion',
            'config_id': 'configId',
            'config_type': 'configType',
            'destination_definition': 'destinationDefinition',
            'id': 'id',
            'source_definition': 'sourceDefinition',
            'status': 'status'
        }

        self._airbyte_version = airbyte_version
        self._config_id = config_id
        self._config_type = config_type
        self._destination_definition = destination_definition
        self._id = id
        self._source_definition = source_definition
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDebugRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDebugRead of this JobDebugRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airbyte_version(self):
        """Gets the airbyte_version of this JobDebugRead.


        :return: The airbyte_version of this JobDebugRead.
        :rtype: str
        """
        return self._airbyte_version

    @airbyte_version.setter
    def airbyte_version(self, airbyte_version):
        """Sets the airbyte_version of this JobDebugRead.


        :param airbyte_version: The airbyte_version of this JobDebugRead.
        :type airbyte_version: str
        """
        if airbyte_version is None:
            raise ValueError("Invalid value for `airbyte_version`, must not be `None`")

        self._airbyte_version = airbyte_version

    @property
    def config_id(self):
        """Gets the config_id of this JobDebugRead.


        :return: The config_id of this JobDebugRead.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this JobDebugRead.


        :param config_id: The config_id of this JobDebugRead.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def config_type(self):
        """Gets the config_type of this JobDebugRead.


        :return: The config_type of this JobDebugRead.
        :rtype: JobConfigType
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this JobDebugRead.


        :param config_type: The config_type of this JobDebugRead.
        :type config_type: JobConfigType
        """
        if config_type is None:
            raise ValueError("Invalid value for `config_type`, must not be `None`")

        self._config_type = config_type

    @property
    def destination_definition(self):
        """Gets the destination_definition of this JobDebugRead.


        :return: The destination_definition of this JobDebugRead.
        :rtype: DestinationDefinitionRead
        """
        return self._destination_definition

    @destination_definition.setter
    def destination_definition(self, destination_definition):
        """Sets the destination_definition of this JobDebugRead.


        :param destination_definition: The destination_definition of this JobDebugRead.
        :type destination_definition: DestinationDefinitionRead
        """
        if destination_definition is None:
            raise ValueError("Invalid value for `destination_definition`, must not be `None`")

        self._destination_definition = destination_definition

    @property
    def id(self):
        """Gets the id of this JobDebugRead.


        :return: The id of this JobDebugRead.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDebugRead.


        :param id: The id of this JobDebugRead.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def source_definition(self):
        """Gets the source_definition of this JobDebugRead.


        :return: The source_definition of this JobDebugRead.
        :rtype: SourceDefinitionRead
        """
        return self._source_definition

    @source_definition.setter
    def source_definition(self, source_definition):
        """Sets the source_definition of this JobDebugRead.


        :param source_definition: The source_definition of this JobDebugRead.
        :type source_definition: SourceDefinitionRead
        """
        if source_definition is None:
            raise ValueError("Invalid value for `source_definition`, must not be `None`")

        self._source_definition = source_definition

    @property
    def status(self):
        """Gets the status of this JobDebugRead.


        :return: The status of this JobDebugRead.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobDebugRead.


        :param status: The status of this JobDebugRead.
        :type status: JobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
