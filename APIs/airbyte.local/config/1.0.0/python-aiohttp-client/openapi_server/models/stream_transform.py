# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_transform import FieldTransform
from openapi_server.models.stream_descriptor import StreamDescriptor
from openapi_server import util


class StreamTransform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_descriptor: StreamDescriptor=None, transform_type: str=None, update_stream: List[FieldTransform]=None):
        """StreamTransform - a model defined in OpenAPI

        :param stream_descriptor: The stream_descriptor of this StreamTransform.
        :param transform_type: The transform_type of this StreamTransform.
        :param update_stream: The update_stream of this StreamTransform.
        """
        self.openapi_types = {
            'stream_descriptor': StreamDescriptor,
            'transform_type': str,
            'update_stream': List[FieldTransform]
        }

        self.attribute_map = {
            'stream_descriptor': 'streamDescriptor',
            'transform_type': 'transformType',
            'update_stream': 'updateStream'
        }

        self._stream_descriptor = stream_descriptor
        self._transform_type = transform_type
        self._update_stream = update_stream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamTransform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamTransform of this StreamTransform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_descriptor(self):
        """Gets the stream_descriptor of this StreamTransform.


        :return: The stream_descriptor of this StreamTransform.
        :rtype: StreamDescriptor
        """
        return self._stream_descriptor

    @stream_descriptor.setter
    def stream_descriptor(self, stream_descriptor):
        """Sets the stream_descriptor of this StreamTransform.


        :param stream_descriptor: The stream_descriptor of this StreamTransform.
        :type stream_descriptor: StreamDescriptor
        """
        if stream_descriptor is None:
            raise ValueError("Invalid value for `stream_descriptor`, must not be `None`")

        self._stream_descriptor = stream_descriptor

    @property
    def transform_type(self):
        """Gets the transform_type of this StreamTransform.


        :return: The transform_type of this StreamTransform.
        :rtype: str
        """
        return self._transform_type

    @transform_type.setter
    def transform_type(self, transform_type):
        """Sets the transform_type of this StreamTransform.


        :param transform_type: The transform_type of this StreamTransform.
        :type transform_type: str
        """
        allowed_values = ["add_stream", "remove_stream", "update_stream"]  # noqa: E501
        if transform_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transform_type` ({0}), must be one of {1}"
                .format(transform_type, allowed_values)
            )

        self._transform_type = transform_type

    @property
    def update_stream(self):
        """Gets the update_stream of this StreamTransform.

        list of field transformations. order does not matter.

        :return: The update_stream of this StreamTransform.
        :rtype: List[FieldTransform]
        """
        return self._update_stream

    @update_stream.setter
    def update_stream(self, update_stream):
        """Sets the update_stream of this StreamTransform.

        list of field transformations. order does not matter.

        :param update_stream: The update_stream of this StreamTransform.
        :type update_stream: List[FieldTransform]
        """

        self._update_stream = update_stream
