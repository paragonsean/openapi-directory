# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attempt_stats import AttemptStats
from openapi_server import util


class AttemptStreamStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stats: AttemptStats=None, stream_name: str=None, stream_namespace: str=None):
        """AttemptStreamStats - a model defined in OpenAPI

        :param stats: The stats of this AttemptStreamStats.
        :param stream_name: The stream_name of this AttemptStreamStats.
        :param stream_namespace: The stream_namespace of this AttemptStreamStats.
        """
        self.openapi_types = {
            'stats': AttemptStats,
            'stream_name': str,
            'stream_namespace': str
        }

        self.attribute_map = {
            'stats': 'stats',
            'stream_name': 'streamName',
            'stream_namespace': 'streamNamespace'
        }

        self._stats = stats
        self._stream_name = stream_name
        self._stream_namespace = stream_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptStreamStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptStreamStats of this AttemptStreamStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stats(self):
        """Gets the stats of this AttemptStreamStats.


        :return: The stats of this AttemptStreamStats.
        :rtype: AttemptStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this AttemptStreamStats.


        :param stats: The stats of this AttemptStreamStats.
        :type stats: AttemptStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def stream_name(self):
        """Gets the stream_name of this AttemptStreamStats.


        :return: The stream_name of this AttemptStreamStats.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this AttemptStreamStats.


        :param stream_name: The stream_name of this AttemptStreamStats.
        :type stream_name: str
        """
        if stream_name is None:
            raise ValueError("Invalid value for `stream_name`, must not be `None`")

        self._stream_name = stream_name

    @property
    def stream_namespace(self):
        """Gets the stream_namespace of this AttemptStreamStats.


        :return: The stream_namespace of this AttemptStreamStats.
        :rtype: str
        """
        return self._stream_namespace

    @stream_namespace.setter
    def stream_namespace(self, stream_namespace):
        """Sets the stream_namespace of this AttemptStreamStats.


        :param stream_namespace: The stream_namespace of this AttemptStreamStats.
        :type stream_namespace: str
        """

        self._stream_namespace = stream_namespace
