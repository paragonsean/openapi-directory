# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationOauthConsentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_definition_id: str=None, destination_id: str=None, o_auth_input_configuration: object=None, redirect_url: str=None, workspace_id: str=None):
        """DestinationOauthConsentRequest - a model defined in OpenAPI

        :param destination_definition_id: The destination_definition_id of this DestinationOauthConsentRequest.
        :param destination_id: The destination_id of this DestinationOauthConsentRequest.
        :param o_auth_input_configuration: The o_auth_input_configuration of this DestinationOauthConsentRequest.
        :param redirect_url: The redirect_url of this DestinationOauthConsentRequest.
        :param workspace_id: The workspace_id of this DestinationOauthConsentRequest.
        """
        self.openapi_types = {
            'destination_definition_id': str,
            'destination_id': str,
            'o_auth_input_configuration': object,
            'redirect_url': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'destination_definition_id': 'destinationDefinitionId',
            'destination_id': 'destinationId',
            'o_auth_input_configuration': 'oAuthInputConfiguration',
            'redirect_url': 'redirectUrl',
            'workspace_id': 'workspaceId'
        }

        self._destination_definition_id = destination_definition_id
        self._destination_id = destination_id
        self._o_auth_input_configuration = o_auth_input_configuration
        self._redirect_url = redirect_url
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationOauthConsentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationOauthConsentRequest of this DestinationOauthConsentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_definition_id(self):
        """Gets the destination_definition_id of this DestinationOauthConsentRequest.


        :return: The destination_definition_id of this DestinationOauthConsentRequest.
        :rtype: str
        """
        return self._destination_definition_id

    @destination_definition_id.setter
    def destination_definition_id(self, destination_definition_id):
        """Sets the destination_definition_id of this DestinationOauthConsentRequest.


        :param destination_definition_id: The destination_definition_id of this DestinationOauthConsentRequest.
        :type destination_definition_id: str
        """
        if destination_definition_id is None:
            raise ValueError("Invalid value for `destination_definition_id`, must not be `None`")

        self._destination_definition_id = destination_definition_id

    @property
    def destination_id(self):
        """Gets the destination_id of this DestinationOauthConsentRequest.


        :return: The destination_id of this DestinationOauthConsentRequest.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this DestinationOauthConsentRequest.


        :param destination_id: The destination_id of this DestinationOauthConsentRequest.
        :type destination_id: str
        """

        self._destination_id = destination_id

    @property
    def o_auth_input_configuration(self):
        """Gets the o_auth_input_configuration of this DestinationOauthConsentRequest.

        The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.

        :return: The o_auth_input_configuration of this DestinationOauthConsentRequest.
        :rtype: object
        """
        return self._o_auth_input_configuration

    @o_auth_input_configuration.setter
    def o_auth_input_configuration(self, o_auth_input_configuration):
        """Sets the o_auth_input_configuration of this DestinationOauthConsentRequest.

        The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.

        :param o_auth_input_configuration: The o_auth_input_configuration of this DestinationOauthConsentRequest.
        :type o_auth_input_configuration: object
        """

        self._o_auth_input_configuration = o_auth_input_configuration

    @property
    def redirect_url(self):
        """Gets the redirect_url of this DestinationOauthConsentRequest.

        The url to redirect to after getting the user consent

        :return: The redirect_url of this DestinationOauthConsentRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this DestinationOauthConsentRequest.

        The url to redirect to after getting the user consent

        :param redirect_url: The redirect_url of this DestinationOauthConsentRequest.
        :type redirect_url: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")

        self._redirect_url = redirect_url

    @property
    def workspace_id(self):
        """Gets the workspace_id of this DestinationOauthConsentRequest.


        :return: The workspace_id of this DestinationOauthConsentRequest.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this DestinationOauthConsentRequest.


        :param workspace_id: The workspace_id of this DestinationOauthConsentRequest.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
