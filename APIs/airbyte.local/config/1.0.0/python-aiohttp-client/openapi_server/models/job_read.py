# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_config_type import JobConfigType
from openapi_server.models.job_status import JobStatus
from openapi_server.models.reset_config import ResetConfig
from openapi_server import util


class JobRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_id: str=None, config_type: JobConfigType=None, created_at: int=None, id: int=None, reset_config: ResetConfig=None, started_at: int=None, status: JobStatus=None, updated_at: int=None):
        """JobRead - a model defined in OpenAPI

        :param config_id: The config_id of this JobRead.
        :param config_type: The config_type of this JobRead.
        :param created_at: The created_at of this JobRead.
        :param id: The id of this JobRead.
        :param reset_config: The reset_config of this JobRead.
        :param started_at: The started_at of this JobRead.
        :param status: The status of this JobRead.
        :param updated_at: The updated_at of this JobRead.
        """
        self.openapi_types = {
            'config_id': str,
            'config_type': JobConfigType,
            'created_at': int,
            'id': int,
            'reset_config': ResetConfig,
            'started_at': int,
            'status': JobStatus,
            'updated_at': int
        }

        self.attribute_map = {
            'config_id': 'configId',
            'config_type': 'configType',
            'created_at': 'createdAt',
            'id': 'id',
            'reset_config': 'resetConfig',
            'started_at': 'startedAt',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._config_id = config_id
        self._config_type = config_type
        self._created_at = created_at
        self._id = id
        self._reset_config = reset_config
        self._started_at = started_at
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRead of this JobRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_id(self):
        """Gets the config_id of this JobRead.


        :return: The config_id of this JobRead.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this JobRead.


        :param config_id: The config_id of this JobRead.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def config_type(self):
        """Gets the config_type of this JobRead.


        :return: The config_type of this JobRead.
        :rtype: JobConfigType
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this JobRead.


        :param config_type: The config_type of this JobRead.
        :type config_type: JobConfigType
        """
        if config_type is None:
            raise ValueError("Invalid value for `config_type`, must not be `None`")

        self._config_type = config_type

    @property
    def created_at(self):
        """Gets the created_at of this JobRead.


        :return: The created_at of this JobRead.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JobRead.


        :param created_at: The created_at of this JobRead.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this JobRead.


        :return: The id of this JobRead.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobRead.


        :param id: The id of this JobRead.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reset_config(self):
        """Gets the reset_config of this JobRead.


        :return: The reset_config of this JobRead.
        :rtype: ResetConfig
        """
        return self._reset_config

    @reset_config.setter
    def reset_config(self, reset_config):
        """Sets the reset_config of this JobRead.


        :param reset_config: The reset_config of this JobRead.
        :type reset_config: ResetConfig
        """

        self._reset_config = reset_config

    @property
    def started_at(self):
        """Gets the started_at of this JobRead.


        :return: The started_at of this JobRead.
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this JobRead.


        :param started_at: The started_at of this JobRead.
        :type started_at: int
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this JobRead.


        :return: The status of this JobRead.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobRead.


        :param status: The status of this JobRead.
        :type status: JobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this JobRead.


        :return: The updated_at of this JobRead.
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this JobRead.


        :param updated_at: The updated_at of this JobRead.
        :type updated_at: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
