# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_state_type import ConnectionStateType
from openapi_server.models.global_state import GlobalState
from openapi_server.models.stream_state import StreamState
from openapi_server import util


class ConnectionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, global_state: GlobalState=None, state: object=None, state_type: ConnectionStateType=None, stream_state: List[StreamState]=None):
        """ConnectionState - a model defined in OpenAPI

        :param connection_id: The connection_id of this ConnectionState.
        :param global_state: The global_state of this ConnectionState.
        :param state: The state of this ConnectionState.
        :param state_type: The state_type of this ConnectionState.
        :param stream_state: The stream_state of this ConnectionState.
        """
        self.openapi_types = {
            'connection_id': str,
            'global_state': GlobalState,
            'state': object,
            'state_type': ConnectionStateType,
            'stream_state': List[StreamState]
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'global_state': 'globalState',
            'state': 'state',
            'state_type': 'stateType',
            'stream_state': 'streamState'
        }

        self._connection_id = connection_id
        self._global_state = global_state
        self._state = state
        self._state_type = state_type
        self._stream_state = stream_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionState of this ConnectionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this ConnectionState.


        :return: The connection_id of this ConnectionState.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ConnectionState.


        :param connection_id: The connection_id of this ConnectionState.
        :type connection_id: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")

        self._connection_id = connection_id

    @property
    def global_state(self):
        """Gets the global_state of this ConnectionState.


        :return: The global_state of this ConnectionState.
        :rtype: GlobalState
        """
        return self._global_state

    @global_state.setter
    def global_state(self, global_state):
        """Sets the global_state of this ConnectionState.


        :param global_state: The global_state of this ConnectionState.
        :type global_state: GlobalState
        """

        self._global_state = global_state

    @property
    def state(self):
        """Gets the state of this ConnectionState.


        :return: The state of this ConnectionState.
        :rtype: object
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectionState.


        :param state: The state of this ConnectionState.
        :type state: object
        """

        self._state = state

    @property
    def state_type(self):
        """Gets the state_type of this ConnectionState.


        :return: The state_type of this ConnectionState.
        :rtype: ConnectionStateType
        """
        return self._state_type

    @state_type.setter
    def state_type(self, state_type):
        """Sets the state_type of this ConnectionState.


        :param state_type: The state_type of this ConnectionState.
        :type state_type: ConnectionStateType
        """
        if state_type is None:
            raise ValueError("Invalid value for `state_type`, must not be `None`")

        self._state_type = state_type

    @property
    def stream_state(self):
        """Gets the stream_state of this ConnectionState.


        :return: The stream_state of this ConnectionState.
        :rtype: List[StreamState]
        """
        return self._stream_state

    @stream_state.setter
    def stream_state(self, stream_state):
        """Sets the stream_state of this ConnectionState.


        :param stream_state: The stream_state of this ConnectionState.
        :type stream_state: List[StreamState]
        """

        self._stream_state = stream_state
