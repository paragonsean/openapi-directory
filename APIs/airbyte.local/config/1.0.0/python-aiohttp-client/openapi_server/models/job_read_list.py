# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_with_attempts_read import JobWithAttemptsRead
from openapi_server import util


class JobReadList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jobs: List[JobWithAttemptsRead]=None, total_job_count: int=None):
        """JobReadList - a model defined in OpenAPI

        :param jobs: The jobs of this JobReadList.
        :param total_job_count: The total_job_count of this JobReadList.
        """
        self.openapi_types = {
            'jobs': List[JobWithAttemptsRead],
            'total_job_count': int
        }

        self.attribute_map = {
            'jobs': 'jobs',
            'total_job_count': 'totalJobCount'
        }

        self._jobs = jobs
        self._total_job_count = total_job_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobReadList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobReadList of this JobReadList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jobs(self):
        """Gets the jobs of this JobReadList.


        :return: The jobs of this JobReadList.
        :rtype: List[JobWithAttemptsRead]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this JobReadList.


        :param jobs: The jobs of this JobReadList.
        :type jobs: List[JobWithAttemptsRead]
        """
        if jobs is None:
            raise ValueError("Invalid value for `jobs`, must not be `None`")

        self._jobs = jobs

    @property
    def total_job_count(self):
        """Gets the total_job_count of this JobReadList.

        the total count of jobs for the specified connection

        :return: The total_job_count of this JobReadList.
        :rtype: int
        """
        return self._total_job_count

    @total_job_count.setter
    def total_job_count(self, total_job_count):
        """Sets the total_job_count of this JobReadList.

        the total count of jobs for the specified connection

        :param total_job_count: The total_job_count of this JobReadList.
        :type total_job_count: int
        """
        if total_job_count is None:
            raise ValueError("Invalid value for `total_job_count`, must not be `None`")

        self._total_job_count = total_job_count
