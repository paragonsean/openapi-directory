# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operator_configuration import OperatorConfiguration
from openapi_server import util


class OperationCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, operator_configuration: OperatorConfiguration=None, workspace_id: str=None):
        """OperationCreate - a model defined in OpenAPI

        :param name: The name of this OperationCreate.
        :param operator_configuration: The operator_configuration of this OperationCreate.
        :param workspace_id: The workspace_id of this OperationCreate.
        """
        self.openapi_types = {
            'name': str,
            'operator_configuration': OperatorConfiguration,
            'workspace_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'operator_configuration': 'operatorConfiguration',
            'workspace_id': 'workspaceId'
        }

        self._name = name
        self._operator_configuration = operator_configuration
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationCreate of this OperationCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OperationCreate.


        :return: The name of this OperationCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationCreate.


        :param name: The name of this OperationCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operator_configuration(self):
        """Gets the operator_configuration of this OperationCreate.


        :return: The operator_configuration of this OperationCreate.
        :rtype: OperatorConfiguration
        """
        return self._operator_configuration

    @operator_configuration.setter
    def operator_configuration(self, operator_configuration):
        """Sets the operator_configuration of this OperationCreate.


        :param operator_configuration: The operator_configuration of this OperationCreate.
        :type operator_configuration: OperatorConfiguration
        """
        if operator_configuration is None:
            raise ValueError("Invalid value for `operator_configuration`, must not be `None`")

        self._operator_configuration = operator_configuration

    @property
    def workspace_id(self):
        """Gets the workspace_id of this OperationCreate.


        :return: The workspace_id of this OperationCreate.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this OperationCreate.


        :param workspace_id: The workspace_id of this OperationCreate.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
