# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebBackendConnectionListRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_id: List[str]=None, source_id: List[str]=None, workspace_id: str=None):
        """WebBackendConnectionListRequestBody - a model defined in OpenAPI

        :param destination_id: The destination_id of this WebBackendConnectionListRequestBody.
        :param source_id: The source_id of this WebBackendConnectionListRequestBody.
        :param workspace_id: The workspace_id of this WebBackendConnectionListRequestBody.
        """
        self.openapi_types = {
            'destination_id': List[str],
            'source_id': List[str],
            'workspace_id': str
        }

        self.attribute_map = {
            'destination_id': 'destinationId',
            'source_id': 'sourceId',
            'workspace_id': 'workspaceId'
        }

        self._destination_id = destination_id
        self._source_id = source_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebBackendConnectionListRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebBackendConnectionListRequestBody of this WebBackendConnectionListRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_id(self):
        """Gets the destination_id of this WebBackendConnectionListRequestBody.


        :return: The destination_id of this WebBackendConnectionListRequestBody.
        :rtype: List[str]
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this WebBackendConnectionListRequestBody.


        :param destination_id: The destination_id of this WebBackendConnectionListRequestBody.
        :type destination_id: List[str]
        """

        self._destination_id = destination_id

    @property
    def source_id(self):
        """Gets the source_id of this WebBackendConnectionListRequestBody.


        :return: The source_id of this WebBackendConnectionListRequestBody.
        :rtype: List[str]
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this WebBackendConnectionListRequestBody.


        :param source_id: The source_id of this WebBackendConnectionListRequestBody.
        :type source_id: List[str]
        """

        self._source_id = source_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WebBackendConnectionListRequestBody.


        :return: The workspace_id of this WebBackendConnectionListRequestBody.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WebBackendConnectionListRequestBody.


        :param workspace_id: The workspace_id of this WebBackendConnectionListRequestBody.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
