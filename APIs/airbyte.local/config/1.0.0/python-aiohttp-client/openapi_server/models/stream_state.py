# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_descriptor import StreamDescriptor
from openapi_server import util


class StreamState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_descriptor: StreamDescriptor=None, stream_state: object=None):
        """StreamState - a model defined in OpenAPI

        :param stream_descriptor: The stream_descriptor of this StreamState.
        :param stream_state: The stream_state of this StreamState.
        """
        self.openapi_types = {
            'stream_descriptor': StreamDescriptor,
            'stream_state': object
        }

        self.attribute_map = {
            'stream_descriptor': 'streamDescriptor',
            'stream_state': 'streamState'
        }

        self._stream_descriptor = stream_descriptor
        self._stream_state = stream_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamState of this StreamState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_descriptor(self):
        """Gets the stream_descriptor of this StreamState.


        :return: The stream_descriptor of this StreamState.
        :rtype: StreamDescriptor
        """
        return self._stream_descriptor

    @stream_descriptor.setter
    def stream_descriptor(self, stream_descriptor):
        """Sets the stream_descriptor of this StreamState.


        :param stream_descriptor: The stream_descriptor of this StreamState.
        :type stream_descriptor: StreamDescriptor
        """
        if stream_descriptor is None:
            raise ValueError("Invalid value for `stream_descriptor`, must not be `None`")

        self._stream_descriptor = stream_descriptor

    @property
    def stream_state(self):
        """Gets the stream_state of this StreamState.


        :return: The stream_state of this StreamState.
        :rtype: object
        """
        return self._stream_state

    @stream_state.setter
    def stream_state(self, stream_state):
        """Sets the stream_state of this StreamState.


        :param stream_state: The stream_state of this StreamState.
        :type stream_state: object
        """

        self._stream_state = stream_state
