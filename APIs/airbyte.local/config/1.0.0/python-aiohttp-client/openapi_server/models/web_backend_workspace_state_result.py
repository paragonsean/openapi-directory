# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebBackendWorkspaceStateResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_connections: bool=None, has_destinations: bool=None, has_sources: bool=None):
        """WebBackendWorkspaceStateResult - a model defined in OpenAPI

        :param has_connections: The has_connections of this WebBackendWorkspaceStateResult.
        :param has_destinations: The has_destinations of this WebBackendWorkspaceStateResult.
        :param has_sources: The has_sources of this WebBackendWorkspaceStateResult.
        """
        self.openapi_types = {
            'has_connections': bool,
            'has_destinations': bool,
            'has_sources': bool
        }

        self.attribute_map = {
            'has_connections': 'hasConnections',
            'has_destinations': 'hasDestinations',
            'has_sources': 'hasSources'
        }

        self._has_connections = has_connections
        self._has_destinations = has_destinations
        self._has_sources = has_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebBackendWorkspaceStateResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebBackendWorkspaceStateResult of this WebBackendWorkspaceStateResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_connections(self):
        """Gets the has_connections of this WebBackendWorkspaceStateResult.


        :return: The has_connections of this WebBackendWorkspaceStateResult.
        :rtype: bool
        """
        return self._has_connections

    @has_connections.setter
    def has_connections(self, has_connections):
        """Sets the has_connections of this WebBackendWorkspaceStateResult.


        :param has_connections: The has_connections of this WebBackendWorkspaceStateResult.
        :type has_connections: bool
        """
        if has_connections is None:
            raise ValueError("Invalid value for `has_connections`, must not be `None`")

        self._has_connections = has_connections

    @property
    def has_destinations(self):
        """Gets the has_destinations of this WebBackendWorkspaceStateResult.


        :return: The has_destinations of this WebBackendWorkspaceStateResult.
        :rtype: bool
        """
        return self._has_destinations

    @has_destinations.setter
    def has_destinations(self, has_destinations):
        """Sets the has_destinations of this WebBackendWorkspaceStateResult.


        :param has_destinations: The has_destinations of this WebBackendWorkspaceStateResult.
        :type has_destinations: bool
        """
        if has_destinations is None:
            raise ValueError("Invalid value for `has_destinations`, must not be `None`")

        self._has_destinations = has_destinations

    @property
    def has_sources(self):
        """Gets the has_sources of this WebBackendWorkspaceStateResult.


        :return: The has_sources of this WebBackendWorkspaceStateResult.
        :rtype: bool
        """
        return self._has_sources

    @has_sources.setter
    def has_sources(self, has_sources):
        """Sets the has_sources of this WebBackendWorkspaceStateResult.


        :param has_sources: The has_sources of this WebBackendWorkspaceStateResult.
        :type has_sources: bool
        """
        if has_sources is None:
            raise ValueError("Invalid value for `has_sources`, must not be `None`")

        self._has_sources = has_sources
