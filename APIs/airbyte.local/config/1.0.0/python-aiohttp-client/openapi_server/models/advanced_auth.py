# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_auth_config_specification import OAuthConfigSpecification
from openapi_server import util


class AdvancedAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_flow_type: str=None, oauth_config_specification: OAuthConfigSpecification=None, predicate_key: List[str]=None, predicate_value: str=None):
        """AdvancedAuth - a model defined in OpenAPI

        :param auth_flow_type: The auth_flow_type of this AdvancedAuth.
        :param oauth_config_specification: The oauth_config_specification of this AdvancedAuth.
        :param predicate_key: The predicate_key of this AdvancedAuth.
        :param predicate_value: The predicate_value of this AdvancedAuth.
        """
        self.openapi_types = {
            'auth_flow_type': str,
            'oauth_config_specification': OAuthConfigSpecification,
            'predicate_key': List[str],
            'predicate_value': str
        }

        self.attribute_map = {
            'auth_flow_type': 'authFlowType',
            'oauth_config_specification': 'oauthConfigSpecification',
            'predicate_key': 'predicateKey',
            'predicate_value': 'predicateValue'
        }

        self._auth_flow_type = auth_flow_type
        self._oauth_config_specification = oauth_config_specification
        self._predicate_key = predicate_key
        self._predicate_value = predicate_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvancedAuth of this AdvancedAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_flow_type(self):
        """Gets the auth_flow_type of this AdvancedAuth.


        :return: The auth_flow_type of this AdvancedAuth.
        :rtype: str
        """
        return self._auth_flow_type

    @auth_flow_type.setter
    def auth_flow_type(self, auth_flow_type):
        """Sets the auth_flow_type of this AdvancedAuth.


        :param auth_flow_type: The auth_flow_type of this AdvancedAuth.
        :type auth_flow_type: str
        """
        allowed_values = ["oauth2.0", "oauth1.0"]  # noqa: E501
        if auth_flow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_flow_type` ({0}), must be one of {1}"
                .format(auth_flow_type, allowed_values)
            )

        self._auth_flow_type = auth_flow_type

    @property
    def oauth_config_specification(self):
        """Gets the oauth_config_specification of this AdvancedAuth.


        :return: The oauth_config_specification of this AdvancedAuth.
        :rtype: OAuthConfigSpecification
        """
        return self._oauth_config_specification

    @oauth_config_specification.setter
    def oauth_config_specification(self, oauth_config_specification):
        """Sets the oauth_config_specification of this AdvancedAuth.


        :param oauth_config_specification: The oauth_config_specification of this AdvancedAuth.
        :type oauth_config_specification: OAuthConfigSpecification
        """

        self._oauth_config_specification = oauth_config_specification

    @property
    def predicate_key(self):
        """Gets the predicate_key of this AdvancedAuth.

        Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.

        :return: The predicate_key of this AdvancedAuth.
        :rtype: List[str]
        """
        return self._predicate_key

    @predicate_key.setter
    def predicate_key(self, predicate_key):
        """Sets the predicate_key of this AdvancedAuth.

        Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.

        :param predicate_key: The predicate_key of this AdvancedAuth.
        :type predicate_key: List[str]
        """

        self._predicate_key = predicate_key

    @property
    def predicate_value(self):
        """Gets the predicate_value of this AdvancedAuth.

        Value of the predicate_key fields for the advanced auth to be applicable.

        :return: The predicate_value of this AdvancedAuth.
        :rtype: str
        """
        return self._predicate_value

    @predicate_value.setter
    def predicate_value(self, predicate_value):
        """Sets the predicate_value of this AdvancedAuth.

        Value of the predicate_key fields for the advanced auth to be applicable.

        :param predicate_value: The predicate_value of this AdvancedAuth.
        :type predicate_value: str
        """

        self._predicate_value = predicate_value
