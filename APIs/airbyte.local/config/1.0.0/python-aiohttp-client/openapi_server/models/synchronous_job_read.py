# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_config_type import JobConfigType
from openapi_server.models.log_read import LogRead
from openapi_server import util


class SynchronousJobRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_id: str=None, config_type: JobConfigType=None, connector_configuration_updated: bool=False, created_at: int=None, ended_at: int=None, id: str=None, logs: LogRead=None, succeeded: bool=None):
        """SynchronousJobRead - a model defined in OpenAPI

        :param config_id: The config_id of this SynchronousJobRead.
        :param config_type: The config_type of this SynchronousJobRead.
        :param connector_configuration_updated: The connector_configuration_updated of this SynchronousJobRead.
        :param created_at: The created_at of this SynchronousJobRead.
        :param ended_at: The ended_at of this SynchronousJobRead.
        :param id: The id of this SynchronousJobRead.
        :param logs: The logs of this SynchronousJobRead.
        :param succeeded: The succeeded of this SynchronousJobRead.
        """
        self.openapi_types = {
            'config_id': str,
            'config_type': JobConfigType,
            'connector_configuration_updated': bool,
            'created_at': int,
            'ended_at': int,
            'id': str,
            'logs': LogRead,
            'succeeded': bool
        }

        self.attribute_map = {
            'config_id': 'configId',
            'config_type': 'configType',
            'connector_configuration_updated': 'connectorConfigurationUpdated',
            'created_at': 'createdAt',
            'ended_at': 'endedAt',
            'id': 'id',
            'logs': 'logs',
            'succeeded': 'succeeded'
        }

        self._config_id = config_id
        self._config_type = config_type
        self._connector_configuration_updated = connector_configuration_updated
        self._created_at = created_at
        self._ended_at = ended_at
        self._id = id
        self._logs = logs
        self._succeeded = succeeded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynchronousJobRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynchronousJobRead of this SynchronousJobRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_id(self):
        """Gets the config_id of this SynchronousJobRead.

        only present if a config id was provided.

        :return: The config_id of this SynchronousJobRead.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this SynchronousJobRead.

        only present if a config id was provided.

        :param config_id: The config_id of this SynchronousJobRead.
        :type config_id: str
        """

        self._config_id = config_id

    @property
    def config_type(self):
        """Gets the config_type of this SynchronousJobRead.


        :return: The config_type of this SynchronousJobRead.
        :rtype: JobConfigType
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this SynchronousJobRead.


        :param config_type: The config_type of this SynchronousJobRead.
        :type config_type: JobConfigType
        """
        if config_type is None:
            raise ValueError("Invalid value for `config_type`, must not be `None`")

        self._config_type = config_type

    @property
    def connector_configuration_updated(self):
        """Gets the connector_configuration_updated of this SynchronousJobRead.


        :return: The connector_configuration_updated of this SynchronousJobRead.
        :rtype: bool
        """
        return self._connector_configuration_updated

    @connector_configuration_updated.setter
    def connector_configuration_updated(self, connector_configuration_updated):
        """Sets the connector_configuration_updated of this SynchronousJobRead.


        :param connector_configuration_updated: The connector_configuration_updated of this SynchronousJobRead.
        :type connector_configuration_updated: bool
        """

        self._connector_configuration_updated = connector_configuration_updated

    @property
    def created_at(self):
        """Gets the created_at of this SynchronousJobRead.


        :return: The created_at of this SynchronousJobRead.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SynchronousJobRead.


        :param created_at: The created_at of this SynchronousJobRead.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this SynchronousJobRead.


        :return: The ended_at of this SynchronousJobRead.
        :rtype: int
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this SynchronousJobRead.


        :param ended_at: The ended_at of this SynchronousJobRead.
        :type ended_at: int
        """
        if ended_at is None:
            raise ValueError("Invalid value for `ended_at`, must not be `None`")

        self._ended_at = ended_at

    @property
    def id(self):
        """Gets the id of this SynchronousJobRead.


        :return: The id of this SynchronousJobRead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SynchronousJobRead.


        :param id: The id of this SynchronousJobRead.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logs(self):
        """Gets the logs of this SynchronousJobRead.


        :return: The logs of this SynchronousJobRead.
        :rtype: LogRead
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this SynchronousJobRead.


        :param logs: The logs of this SynchronousJobRead.
        :type logs: LogRead
        """

        self._logs = logs

    @property
    def succeeded(self):
        """Gets the succeeded of this SynchronousJobRead.


        :return: The succeeded of this SynchronousJobRead.
        :rtype: bool
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this SynchronousJobRead.


        :param succeeded: The succeeded of this SynchronousJobRead.
        :type succeeded: bool
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")

        self._succeeded = succeeded
