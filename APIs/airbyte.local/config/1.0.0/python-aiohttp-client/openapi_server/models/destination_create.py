# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_configuration: object=None, destination_definition_id: str=None, name: str=None, workspace_id: str=None):
        """DestinationCreate - a model defined in OpenAPI

        :param connection_configuration: The connection_configuration of this DestinationCreate.
        :param destination_definition_id: The destination_definition_id of this DestinationCreate.
        :param name: The name of this DestinationCreate.
        :param workspace_id: The workspace_id of this DestinationCreate.
        """
        self.openapi_types = {
            'connection_configuration': object,
            'destination_definition_id': str,
            'name': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'connection_configuration': 'connectionConfiguration',
            'destination_definition_id': 'destinationDefinitionId',
            'name': 'name',
            'workspace_id': 'workspaceId'
        }

        self._connection_configuration = connection_configuration
        self._destination_definition_id = destination_definition_id
        self._name = name
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationCreate of this DestinationCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_configuration(self):
        """Gets the connection_configuration of this DestinationCreate.

        The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.

        :return: The connection_configuration of this DestinationCreate.
        :rtype: object
        """
        return self._connection_configuration

    @connection_configuration.setter
    def connection_configuration(self, connection_configuration):
        """Sets the connection_configuration of this DestinationCreate.

        The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.

        :param connection_configuration: The connection_configuration of this DestinationCreate.
        :type connection_configuration: object
        """
        if connection_configuration is None:
            raise ValueError("Invalid value for `connection_configuration`, must not be `None`")

        self._connection_configuration = connection_configuration

    @property
    def destination_definition_id(self):
        """Gets the destination_definition_id of this DestinationCreate.


        :return: The destination_definition_id of this DestinationCreate.
        :rtype: str
        """
        return self._destination_definition_id

    @destination_definition_id.setter
    def destination_definition_id(self, destination_definition_id):
        """Sets the destination_definition_id of this DestinationCreate.


        :param destination_definition_id: The destination_definition_id of this DestinationCreate.
        :type destination_definition_id: str
        """
        if destination_definition_id is None:
            raise ValueError("Invalid value for `destination_definition_id`, must not be `None`")

        self._destination_definition_id = destination_definition_id

    @property
    def name(self):
        """Gets the name of this DestinationCreate.


        :return: The name of this DestinationCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinationCreate.


        :param name: The name of this DestinationCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this DestinationCreate.


        :return: The workspace_id of this DestinationCreate.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this DestinationCreate.


        :param workspace_id: The workspace_id of this DestinationCreate.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
