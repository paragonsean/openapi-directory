# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceSnippetRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon: str=None, name: str=None, source_definition_id: str=None, source_id: str=None, source_name: str=None):
        """SourceSnippetRead - a model defined in OpenAPI

        :param icon: The icon of this SourceSnippetRead.
        :param name: The name of this SourceSnippetRead.
        :param source_definition_id: The source_definition_id of this SourceSnippetRead.
        :param source_id: The source_id of this SourceSnippetRead.
        :param source_name: The source_name of this SourceSnippetRead.
        """
        self.openapi_types = {
            'icon': str,
            'name': str,
            'source_definition_id': str,
            'source_id': str,
            'source_name': str
        }

        self.attribute_map = {
            'icon': 'icon',
            'name': 'name',
            'source_definition_id': 'sourceDefinitionId',
            'source_id': 'sourceId',
            'source_name': 'sourceName'
        }

        self._icon = icon
        self._name = name
        self._source_definition_id = source_definition_id
        self._source_id = source_id
        self._source_name = source_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceSnippetRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceSnippetRead of this SourceSnippetRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon(self):
        """Gets the icon of this SourceSnippetRead.


        :return: The icon of this SourceSnippetRead.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this SourceSnippetRead.


        :param icon: The icon of this SourceSnippetRead.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this SourceSnippetRead.


        :return: The name of this SourceSnippetRead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceSnippetRead.


        :param name: The name of this SourceSnippetRead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_definition_id(self):
        """Gets the source_definition_id of this SourceSnippetRead.


        :return: The source_definition_id of this SourceSnippetRead.
        :rtype: str
        """
        return self._source_definition_id

    @source_definition_id.setter
    def source_definition_id(self, source_definition_id):
        """Sets the source_definition_id of this SourceSnippetRead.


        :param source_definition_id: The source_definition_id of this SourceSnippetRead.
        :type source_definition_id: str
        """
        if source_definition_id is None:
            raise ValueError("Invalid value for `source_definition_id`, must not be `None`")

        self._source_definition_id = source_definition_id

    @property
    def source_id(self):
        """Gets the source_id of this SourceSnippetRead.


        :return: The source_id of this SourceSnippetRead.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this SourceSnippetRead.


        :param source_id: The source_id of this SourceSnippetRead.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this SourceSnippetRead.


        :return: The source_name of this SourceSnippetRead.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this SourceSnippetRead.


        :param source_name: The source_name of this SourceSnippetRead.
        :type source_name: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")

        self._source_name = source_name
