# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airbyte_stream_and_configuration import AirbyteStreamAndConfiguration
from openapi_server import util


class AirbyteCatalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, streams: List[AirbyteStreamAndConfiguration]=None):
        """AirbyteCatalog - a model defined in OpenAPI

        :param streams: The streams of this AirbyteCatalog.
        """
        self.openapi_types = {
            'streams': List[AirbyteStreamAndConfiguration]
        }

        self.attribute_map = {
            'streams': 'streams'
        }

        self._streams = streams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirbyteCatalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirbyteCatalog of this AirbyteCatalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def streams(self):
        """Gets the streams of this AirbyteCatalog.


        :return: The streams of this AirbyteCatalog.
        :rtype: List[AirbyteStreamAndConfiguration]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this AirbyteCatalog.


        :param streams: The streams of this AirbyteCatalog.
        :type streams: List[AirbyteStreamAndConfiguration]
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")

        self._streams = streams
