# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invalid_input_property import InvalidInputProperty
from openapi_server import util


class InvalidInputExceptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception_class_name: str=None, exception_stack: List[str]=None, message: str=None, validation_errors: List[InvalidInputProperty]=None):
        """InvalidInputExceptionInfo - a model defined in OpenAPI

        :param exception_class_name: The exception_class_name of this InvalidInputExceptionInfo.
        :param exception_stack: The exception_stack of this InvalidInputExceptionInfo.
        :param message: The message of this InvalidInputExceptionInfo.
        :param validation_errors: The validation_errors of this InvalidInputExceptionInfo.
        """
        self.openapi_types = {
            'exception_class_name': str,
            'exception_stack': List[str],
            'message': str,
            'validation_errors': List[InvalidInputProperty]
        }

        self.attribute_map = {
            'exception_class_name': 'exceptionClassName',
            'exception_stack': 'exceptionStack',
            'message': 'message',
            'validation_errors': 'validationErrors'
        }

        self._exception_class_name = exception_class_name
        self._exception_stack = exception_stack
        self._message = message
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvalidInputExceptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvalidInputExceptionInfo of this InvalidInputExceptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception_class_name(self):
        """Gets the exception_class_name of this InvalidInputExceptionInfo.


        :return: The exception_class_name of this InvalidInputExceptionInfo.
        :rtype: str
        """
        return self._exception_class_name

    @exception_class_name.setter
    def exception_class_name(self, exception_class_name):
        """Sets the exception_class_name of this InvalidInputExceptionInfo.


        :param exception_class_name: The exception_class_name of this InvalidInputExceptionInfo.
        :type exception_class_name: str
        """

        self._exception_class_name = exception_class_name

    @property
    def exception_stack(self):
        """Gets the exception_stack of this InvalidInputExceptionInfo.


        :return: The exception_stack of this InvalidInputExceptionInfo.
        :rtype: List[str]
        """
        return self._exception_stack

    @exception_stack.setter
    def exception_stack(self, exception_stack):
        """Sets the exception_stack of this InvalidInputExceptionInfo.


        :param exception_stack: The exception_stack of this InvalidInputExceptionInfo.
        :type exception_stack: List[str]
        """

        self._exception_stack = exception_stack

    @property
    def message(self):
        """Gets the message of this InvalidInputExceptionInfo.


        :return: The message of this InvalidInputExceptionInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvalidInputExceptionInfo.


        :param message: The message of this InvalidInputExceptionInfo.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def validation_errors(self):
        """Gets the validation_errors of this InvalidInputExceptionInfo.


        :return: The validation_errors of this InvalidInputExceptionInfo.
        :rtype: List[InvalidInputProperty]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this InvalidInputExceptionInfo.


        :param validation_errors: The validation_errors of this InvalidInputExceptionInfo.
        :type validation_errors: List[InvalidInputProperty]
        """
        if validation_errors is None:
            raise ValueError("Invalid value for `validation_errors`, must not be `None`")

        self._validation_errors = validation_errors
