# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geography import Geography
from openapi_server.models.notification import Notification
from openapi_server.models.webhook_config_write import WebhookConfigWrite
from openapi_server import util


class WorkspaceUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anonymous_data_collection: bool=None, default_geography: Geography=None, display_setup_wizard: bool=None, email: str=None, initial_setup_complete: bool=None, news: bool=None, notifications: List[Notification]=None, security_updates: bool=None, webhook_configs: List[WebhookConfigWrite]=None, workspace_id: str=None):
        """WorkspaceUpdate - a model defined in OpenAPI

        :param anonymous_data_collection: The anonymous_data_collection of this WorkspaceUpdate.
        :param default_geography: The default_geography of this WorkspaceUpdate.
        :param display_setup_wizard: The display_setup_wizard of this WorkspaceUpdate.
        :param email: The email of this WorkspaceUpdate.
        :param initial_setup_complete: The initial_setup_complete of this WorkspaceUpdate.
        :param news: The news of this WorkspaceUpdate.
        :param notifications: The notifications of this WorkspaceUpdate.
        :param security_updates: The security_updates of this WorkspaceUpdate.
        :param webhook_configs: The webhook_configs of this WorkspaceUpdate.
        :param workspace_id: The workspace_id of this WorkspaceUpdate.
        """
        self.openapi_types = {
            'anonymous_data_collection': bool,
            'default_geography': Geography,
            'display_setup_wizard': bool,
            'email': str,
            'initial_setup_complete': bool,
            'news': bool,
            'notifications': List[Notification],
            'security_updates': bool,
            'webhook_configs': List[WebhookConfigWrite],
            'workspace_id': str
        }

        self.attribute_map = {
            'anonymous_data_collection': 'anonymousDataCollection',
            'default_geography': 'defaultGeography',
            'display_setup_wizard': 'displaySetupWizard',
            'email': 'email',
            'initial_setup_complete': 'initialSetupComplete',
            'news': 'news',
            'notifications': 'notifications',
            'security_updates': 'securityUpdates',
            'webhook_configs': 'webhookConfigs',
            'workspace_id': 'workspaceId'
        }

        self._anonymous_data_collection = anonymous_data_collection
        self._default_geography = default_geography
        self._display_setup_wizard = display_setup_wizard
        self._email = email
        self._initial_setup_complete = initial_setup_complete
        self._news = news
        self._notifications = notifications
        self._security_updates = security_updates
        self._webhook_configs = webhook_configs
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceUpdate of this WorkspaceUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anonymous_data_collection(self):
        """Gets the anonymous_data_collection of this WorkspaceUpdate.


        :return: The anonymous_data_collection of this WorkspaceUpdate.
        :rtype: bool
        """
        return self._anonymous_data_collection

    @anonymous_data_collection.setter
    def anonymous_data_collection(self, anonymous_data_collection):
        """Sets the anonymous_data_collection of this WorkspaceUpdate.


        :param anonymous_data_collection: The anonymous_data_collection of this WorkspaceUpdate.
        :type anonymous_data_collection: bool
        """

        self._anonymous_data_collection = anonymous_data_collection

    @property
    def default_geography(self):
        """Gets the default_geography of this WorkspaceUpdate.


        :return: The default_geography of this WorkspaceUpdate.
        :rtype: Geography
        """
        return self._default_geography

    @default_geography.setter
    def default_geography(self, default_geography):
        """Sets the default_geography of this WorkspaceUpdate.


        :param default_geography: The default_geography of this WorkspaceUpdate.
        :type default_geography: Geography
        """

        self._default_geography = default_geography

    @property
    def display_setup_wizard(self):
        """Gets the display_setup_wizard of this WorkspaceUpdate.


        :return: The display_setup_wizard of this WorkspaceUpdate.
        :rtype: bool
        """
        return self._display_setup_wizard

    @display_setup_wizard.setter
    def display_setup_wizard(self, display_setup_wizard):
        """Sets the display_setup_wizard of this WorkspaceUpdate.


        :param display_setup_wizard: The display_setup_wizard of this WorkspaceUpdate.
        :type display_setup_wizard: bool
        """

        self._display_setup_wizard = display_setup_wizard

    @property
    def email(self):
        """Gets the email of this WorkspaceUpdate.


        :return: The email of this WorkspaceUpdate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this WorkspaceUpdate.


        :param email: The email of this WorkspaceUpdate.
        :type email: str
        """

        self._email = email

    @property
    def initial_setup_complete(self):
        """Gets the initial_setup_complete of this WorkspaceUpdate.


        :return: The initial_setup_complete of this WorkspaceUpdate.
        :rtype: bool
        """
        return self._initial_setup_complete

    @initial_setup_complete.setter
    def initial_setup_complete(self, initial_setup_complete):
        """Sets the initial_setup_complete of this WorkspaceUpdate.


        :param initial_setup_complete: The initial_setup_complete of this WorkspaceUpdate.
        :type initial_setup_complete: bool
        """

        self._initial_setup_complete = initial_setup_complete

    @property
    def news(self):
        """Gets the news of this WorkspaceUpdate.


        :return: The news of this WorkspaceUpdate.
        :rtype: bool
        """
        return self._news

    @news.setter
    def news(self, news):
        """Sets the news of this WorkspaceUpdate.


        :param news: The news of this WorkspaceUpdate.
        :type news: bool
        """

        self._news = news

    @property
    def notifications(self):
        """Gets the notifications of this WorkspaceUpdate.


        :return: The notifications of this WorkspaceUpdate.
        :rtype: List[Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this WorkspaceUpdate.


        :param notifications: The notifications of this WorkspaceUpdate.
        :type notifications: List[Notification]
        """

        self._notifications = notifications

    @property
    def security_updates(self):
        """Gets the security_updates of this WorkspaceUpdate.


        :return: The security_updates of this WorkspaceUpdate.
        :rtype: bool
        """
        return self._security_updates

    @security_updates.setter
    def security_updates(self, security_updates):
        """Sets the security_updates of this WorkspaceUpdate.


        :param security_updates: The security_updates of this WorkspaceUpdate.
        :type security_updates: bool
        """

        self._security_updates = security_updates

    @property
    def webhook_configs(self):
        """Gets the webhook_configs of this WorkspaceUpdate.


        :return: The webhook_configs of this WorkspaceUpdate.
        :rtype: List[WebhookConfigWrite]
        """
        return self._webhook_configs

    @webhook_configs.setter
    def webhook_configs(self, webhook_configs):
        """Sets the webhook_configs of this WorkspaceUpdate.


        :param webhook_configs: The webhook_configs of this WorkspaceUpdate.
        :type webhook_configs: List[WebhookConfigWrite]
        """

        self._webhook_configs = webhook_configs

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceUpdate.


        :return: The workspace_id of this WorkspaceUpdate.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceUpdate.


        :param workspace_id: The workspace_id of this WorkspaceUpdate.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
