# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_type import JobType
from openapi_server.models.resource_requirements import ResourceRequirements
from openapi_server import util


class JobTypeResourceLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_type: JobType=None, resource_requirements: ResourceRequirements=None):
        """JobTypeResourceLimit - a model defined in OpenAPI

        :param job_type: The job_type of this JobTypeResourceLimit.
        :param resource_requirements: The resource_requirements of this JobTypeResourceLimit.
        """
        self.openapi_types = {
            'job_type': JobType,
            'resource_requirements': ResourceRequirements
        }

        self.attribute_map = {
            'job_type': 'jobType',
            'resource_requirements': 'resourceRequirements'
        }

        self._job_type = job_type
        self._resource_requirements = resource_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobTypeResourceLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobTypeResourceLimit of this JobTypeResourceLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_type(self):
        """Gets the job_type of this JobTypeResourceLimit.


        :return: The job_type of this JobTypeResourceLimit.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobTypeResourceLimit.


        :param job_type: The job_type of this JobTypeResourceLimit.
        :type job_type: JobType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this JobTypeResourceLimit.


        :return: The resource_requirements of this JobTypeResourceLimit.
        :rtype: ResourceRequirements
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this JobTypeResourceLimit.


        :param resource_requirements: The resource_requirements of this JobTypeResourceLimit.
        :type resource_requirements: ResourceRequirements
        """
        if resource_requirements is None:
            raise ValueError("Invalid value for `resource_requirements`, must not be `None`")

        self._resource_requirements = resource_requirements
