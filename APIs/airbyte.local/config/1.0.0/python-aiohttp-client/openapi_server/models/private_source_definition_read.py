# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_definition_read import SourceDefinitionRead
from openapi_server import util


class PrivateSourceDefinitionRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, granted: bool=None, source_definition: SourceDefinitionRead=None):
        """PrivateSourceDefinitionRead - a model defined in OpenAPI

        :param granted: The granted of this PrivateSourceDefinitionRead.
        :param source_definition: The source_definition of this PrivateSourceDefinitionRead.
        """
        self.openapi_types = {
            'granted': bool,
            'source_definition': SourceDefinitionRead
        }

        self.attribute_map = {
            'granted': 'granted',
            'source_definition': 'sourceDefinition'
        }

        self._granted = granted
        self._source_definition = source_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateSourceDefinitionRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateSourceDefinitionRead of this PrivateSourceDefinitionRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def granted(self):
        """Gets the granted of this PrivateSourceDefinitionRead.


        :return: The granted of this PrivateSourceDefinitionRead.
        :rtype: bool
        """
        return self._granted

    @granted.setter
    def granted(self, granted):
        """Sets the granted of this PrivateSourceDefinitionRead.


        :param granted: The granted of this PrivateSourceDefinitionRead.
        :type granted: bool
        """
        if granted is None:
            raise ValueError("Invalid value for `granted`, must not be `None`")

        self._granted = granted

    @property
    def source_definition(self):
        """Gets the source_definition of this PrivateSourceDefinitionRead.


        :return: The source_definition of this PrivateSourceDefinitionRead.
        :rtype: SourceDefinitionRead
        """
        return self._source_definition

    @source_definition.setter
    def source_definition(self, source_definition):
        """Sets the source_definition of this PrivateSourceDefinitionRead.


        :param source_definition: The source_definition of this PrivateSourceDefinitionRead.
        :type source_definition: SourceDefinitionRead
        """
        if source_definition is None:
            raise ValueError("Invalid value for `source_definition`, must not be `None`")

        self._source_definition = source_definition
