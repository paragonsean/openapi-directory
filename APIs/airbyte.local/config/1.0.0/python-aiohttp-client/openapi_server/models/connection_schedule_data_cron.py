# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionScheduleDataCron(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cron_expression: str=None, cron_time_zone: str=None):
        """ConnectionScheduleDataCron - a model defined in OpenAPI

        :param cron_expression: The cron_expression of this ConnectionScheduleDataCron.
        :param cron_time_zone: The cron_time_zone of this ConnectionScheduleDataCron.
        """
        self.openapi_types = {
            'cron_expression': str,
            'cron_time_zone': str
        }

        self.attribute_map = {
            'cron_expression': 'cronExpression',
            'cron_time_zone': 'cronTimeZone'
        }

        self._cron_expression = cron_expression
        self._cron_time_zone = cron_time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionScheduleDataCron':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionScheduleData_cron of this ConnectionScheduleDataCron.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cron_expression(self):
        """Gets the cron_expression of this ConnectionScheduleDataCron.


        :return: The cron_expression of this ConnectionScheduleDataCron.
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this ConnectionScheduleDataCron.


        :param cron_expression: The cron_expression of this ConnectionScheduleDataCron.
        :type cron_expression: str
        """
        if cron_expression is None:
            raise ValueError("Invalid value for `cron_expression`, must not be `None`")

        self._cron_expression = cron_expression

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this ConnectionScheduleDataCron.


        :return: The cron_time_zone of this ConnectionScheduleDataCron.
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this ConnectionScheduleDataCron.


        :param cron_time_zone: The cron_time_zone of this ConnectionScheduleDataCron.
        :type cron_time_zone: str
        """
        if cron_time_zone is None:
            raise ValueError("Invalid value for `cron_time_zone`, must not be `None`")

        self._cron_time_zone = cron_time_zone
