# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperatorDbt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dbt_arguments: str=None, docker_image: str=None, git_repo_branch: str=None, git_repo_url: str=None):
        """OperatorDbt - a model defined in OpenAPI

        :param dbt_arguments: The dbt_arguments of this OperatorDbt.
        :param docker_image: The docker_image of this OperatorDbt.
        :param git_repo_branch: The git_repo_branch of this OperatorDbt.
        :param git_repo_url: The git_repo_url of this OperatorDbt.
        """
        self.openapi_types = {
            'dbt_arguments': str,
            'docker_image': str,
            'git_repo_branch': str,
            'git_repo_url': str
        }

        self.attribute_map = {
            'dbt_arguments': 'dbtArguments',
            'docker_image': 'dockerImage',
            'git_repo_branch': 'gitRepoBranch',
            'git_repo_url': 'gitRepoUrl'
        }

        self._dbt_arguments = dbt_arguments
        self._docker_image = docker_image
        self._git_repo_branch = git_repo_branch
        self._git_repo_url = git_repo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperatorDbt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperatorDbt of this OperatorDbt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dbt_arguments(self):
        """Gets the dbt_arguments of this OperatorDbt.


        :return: The dbt_arguments of this OperatorDbt.
        :rtype: str
        """
        return self._dbt_arguments

    @dbt_arguments.setter
    def dbt_arguments(self, dbt_arguments):
        """Sets the dbt_arguments of this OperatorDbt.


        :param dbt_arguments: The dbt_arguments of this OperatorDbt.
        :type dbt_arguments: str
        """

        self._dbt_arguments = dbt_arguments

    @property
    def docker_image(self):
        """Gets the docker_image of this OperatorDbt.


        :return: The docker_image of this OperatorDbt.
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this OperatorDbt.


        :param docker_image: The docker_image of this OperatorDbt.
        :type docker_image: str
        """

        self._docker_image = docker_image

    @property
    def git_repo_branch(self):
        """Gets the git_repo_branch of this OperatorDbt.


        :return: The git_repo_branch of this OperatorDbt.
        :rtype: str
        """
        return self._git_repo_branch

    @git_repo_branch.setter
    def git_repo_branch(self, git_repo_branch):
        """Sets the git_repo_branch of this OperatorDbt.


        :param git_repo_branch: The git_repo_branch of this OperatorDbt.
        :type git_repo_branch: str
        """

        self._git_repo_branch = git_repo_branch

    @property
    def git_repo_url(self):
        """Gets the git_repo_url of this OperatorDbt.


        :return: The git_repo_url of this OperatorDbt.
        :rtype: str
        """
        return self._git_repo_url

    @git_repo_url.setter
    def git_repo_url(self, git_repo_url):
        """Sets the git_repo_url of this OperatorDbt.


        :param git_repo_url: The git_repo_url of this OperatorDbt.
        :type git_repo_url: str
        """
        if git_repo_url is None:
            raise ValueError("Invalid value for `git_repo_url`, must not be `None`")

        self._git_repo_url = git_repo_url
