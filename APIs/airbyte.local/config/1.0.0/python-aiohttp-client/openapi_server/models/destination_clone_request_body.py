# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_clone_configuration import DestinationCloneConfiguration
from openapi_server import util


class DestinationCloneRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_clone_id: str=None, destination_configuration: DestinationCloneConfiguration=None):
        """DestinationCloneRequestBody - a model defined in OpenAPI

        :param destination_clone_id: The destination_clone_id of this DestinationCloneRequestBody.
        :param destination_configuration: The destination_configuration of this DestinationCloneRequestBody.
        """
        self.openapi_types = {
            'destination_clone_id': str,
            'destination_configuration': DestinationCloneConfiguration
        }

        self.attribute_map = {
            'destination_clone_id': 'destinationCloneId',
            'destination_configuration': 'destinationConfiguration'
        }

        self._destination_clone_id = destination_clone_id
        self._destination_configuration = destination_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationCloneRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationCloneRequestBody of this DestinationCloneRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_clone_id(self):
        """Gets the destination_clone_id of this DestinationCloneRequestBody.


        :return: The destination_clone_id of this DestinationCloneRequestBody.
        :rtype: str
        """
        return self._destination_clone_id

    @destination_clone_id.setter
    def destination_clone_id(self, destination_clone_id):
        """Sets the destination_clone_id of this DestinationCloneRequestBody.


        :param destination_clone_id: The destination_clone_id of this DestinationCloneRequestBody.
        :type destination_clone_id: str
        """
        if destination_clone_id is None:
            raise ValueError("Invalid value for `destination_clone_id`, must not be `None`")

        self._destination_clone_id = destination_clone_id

    @property
    def destination_configuration(self):
        """Gets the destination_configuration of this DestinationCloneRequestBody.


        :return: The destination_configuration of this DestinationCloneRequestBody.
        :rtype: DestinationCloneConfiguration
        """
        return self._destination_configuration

    @destination_configuration.setter
    def destination_configuration(self, destination_configuration):
        """Sets the destination_configuration of this DestinationCloneRequestBody.


        :param destination_configuration: The destination_configuration of this DestinationCloneRequestBody.
        :type destination_configuration: DestinationCloneConfiguration
        """

        self._destination_configuration = destination_configuration
