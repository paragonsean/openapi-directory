# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_destination_definition_read import PrivateDestinationDefinitionRead
from openapi_server import util


class PrivateDestinationDefinitionReadList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_definitions: List[PrivateDestinationDefinitionRead]=None):
        """PrivateDestinationDefinitionReadList - a model defined in OpenAPI

        :param destination_definitions: The destination_definitions of this PrivateDestinationDefinitionReadList.
        """
        self.openapi_types = {
            'destination_definitions': List[PrivateDestinationDefinitionRead]
        }

        self.attribute_map = {
            'destination_definitions': 'destinationDefinitions'
        }

        self._destination_definitions = destination_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateDestinationDefinitionReadList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateDestinationDefinitionReadList of this PrivateDestinationDefinitionReadList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_definitions(self):
        """Gets the destination_definitions of this PrivateDestinationDefinitionReadList.


        :return: The destination_definitions of this PrivateDestinationDefinitionReadList.
        :rtype: List[PrivateDestinationDefinitionRead]
        """
        return self._destination_definitions

    @destination_definitions.setter
    def destination_definitions(self, destination_definitions):
        """Sets the destination_definitions of this PrivateDestinationDefinitionReadList.


        :param destination_definitions: The destination_definitions of this PrivateDestinationDefinitionReadList.
        :type destination_definitions: List[PrivateDestinationDefinitionRead]
        """
        if destination_definitions is None:
            raise ValueError("Invalid value for `destination_definitions`, must not be `None`")

        self._destination_definitions = destination_definitions
