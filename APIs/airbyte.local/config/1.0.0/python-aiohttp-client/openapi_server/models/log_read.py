# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_lines: List[str]=None):
        """LogRead - a model defined in OpenAPI

        :param log_lines: The log_lines of this LogRead.
        """
        self.openapi_types = {
            'log_lines': List[str]
        }

        self.attribute_map = {
            'log_lines': 'logLines'
        }

        self._log_lines = log_lines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogRead of this LogRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_lines(self):
        """Gets the log_lines of this LogRead.


        :return: The log_lines of this LogRead.
        :rtype: List[str]
        """
        return self._log_lines

    @log_lines.setter
    def log_lines(self, log_lines):
        """Sets the log_lines of this LogRead.


        :param log_lines: The log_lines of this LogRead.
        :type log_lines: List[str]
        """
        if log_lines is None:
            raise ValueError("Invalid value for `log_lines`, must not be `None`")

        self._log_lines = log_lines
