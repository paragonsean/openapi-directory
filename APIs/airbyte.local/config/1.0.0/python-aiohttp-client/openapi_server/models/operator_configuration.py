# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operator_dbt import OperatorDbt
from openapi_server.models.operator_normalization import OperatorNormalization
from openapi_server.models.operator_type import OperatorType
from openapi_server.models.operator_webhook import OperatorWebhook
from openapi_server import util


class OperatorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dbt: OperatorDbt=None, normalization: OperatorNormalization=None, operator_type: OperatorType=None, webhook: OperatorWebhook=None):
        """OperatorConfiguration - a model defined in OpenAPI

        :param dbt: The dbt of this OperatorConfiguration.
        :param normalization: The normalization of this OperatorConfiguration.
        :param operator_type: The operator_type of this OperatorConfiguration.
        :param webhook: The webhook of this OperatorConfiguration.
        """
        self.openapi_types = {
            'dbt': OperatorDbt,
            'normalization': OperatorNormalization,
            'operator_type': OperatorType,
            'webhook': OperatorWebhook
        }

        self.attribute_map = {
            'dbt': 'dbt',
            'normalization': 'normalization',
            'operator_type': 'operatorType',
            'webhook': 'webhook'
        }

        self._dbt = dbt
        self._normalization = normalization
        self._operator_type = operator_type
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperatorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperatorConfiguration of this OperatorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dbt(self):
        """Gets the dbt of this OperatorConfiguration.


        :return: The dbt of this OperatorConfiguration.
        :rtype: OperatorDbt
        """
        return self._dbt

    @dbt.setter
    def dbt(self, dbt):
        """Sets the dbt of this OperatorConfiguration.


        :param dbt: The dbt of this OperatorConfiguration.
        :type dbt: OperatorDbt
        """

        self._dbt = dbt

    @property
    def normalization(self):
        """Gets the normalization of this OperatorConfiguration.


        :return: The normalization of this OperatorConfiguration.
        :rtype: OperatorNormalization
        """
        return self._normalization

    @normalization.setter
    def normalization(self, normalization):
        """Sets the normalization of this OperatorConfiguration.


        :param normalization: The normalization of this OperatorConfiguration.
        :type normalization: OperatorNormalization
        """

        self._normalization = normalization

    @property
    def operator_type(self):
        """Gets the operator_type of this OperatorConfiguration.


        :return: The operator_type of this OperatorConfiguration.
        :rtype: OperatorType
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this OperatorConfiguration.


        :param operator_type: The operator_type of this OperatorConfiguration.
        :type operator_type: OperatorType
        """
        if operator_type is None:
            raise ValueError("Invalid value for `operator_type`, must not be `None`")

        self._operator_type = operator_type

    @property
    def webhook(self):
        """Gets the webhook of this OperatorConfiguration.


        :return: The webhook of this OperatorConfiguration.
        :rtype: OperatorWebhook
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this OperatorConfiguration.


        :param webhook: The webhook of this OperatorConfiguration.
        :type webhook: OperatorWebhook
        """

        self._webhook = webhook
