# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_read import WorkspaceRead
from openapi_server import util


class WorkspaceReadList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workspaces: List[WorkspaceRead]=None):
        """WorkspaceReadList - a model defined in OpenAPI

        :param workspaces: The workspaces of this WorkspaceReadList.
        """
        self.openapi_types = {
            'workspaces': List[WorkspaceRead]
        }

        self.attribute_map = {
            'workspaces': 'workspaces'
        }

        self._workspaces = workspaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceReadList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceReadList of this WorkspaceReadList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workspaces(self):
        """Gets the workspaces of this WorkspaceReadList.


        :return: The workspaces of this WorkspaceReadList.
        :rtype: List[WorkspaceRead]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this WorkspaceReadList.


        :param workspaces: The workspaces of this WorkspaceReadList.
        :type workspaces: List[WorkspaceRead]
        """
        if workspaces is None:
            raise ValueError("Invalid value for `workspaces`, must not be `None`")

        self._workspaces = workspaces
