# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionScheduleDataBasicSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_unit: str=None, units: int=None):
        """ConnectionScheduleDataBasicSchedule - a model defined in OpenAPI

        :param time_unit: The time_unit of this ConnectionScheduleDataBasicSchedule.
        :param units: The units of this ConnectionScheduleDataBasicSchedule.
        """
        self.openapi_types = {
            'time_unit': str,
            'units': int
        }

        self.attribute_map = {
            'time_unit': 'timeUnit',
            'units': 'units'
        }

        self._time_unit = time_unit
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionScheduleDataBasicSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionScheduleData_basicSchedule of this ConnectionScheduleDataBasicSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_unit(self):
        """Gets the time_unit of this ConnectionScheduleDataBasicSchedule.


        :return: The time_unit of this ConnectionScheduleDataBasicSchedule.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this ConnectionScheduleDataBasicSchedule.


        :param time_unit: The time_unit of this ConnectionScheduleDataBasicSchedule.
        :type time_unit: str
        """
        allowed_values = ["minutes", "hours", "days", "weeks", "months"]  # noqa: E501
        if time_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `time_unit` ({0}), must be one of {1}"
                .format(time_unit, allowed_values)
            )

        self._time_unit = time_unit

    @property
    def units(self):
        """Gets the units of this ConnectionScheduleDataBasicSchedule.


        :return: The units of this ConnectionScheduleDataBasicSchedule.
        :rtype: int
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ConnectionScheduleDataBasicSchedule.


        :param units: The units of this ConnectionScheduleDataBasicSchedule.
        :type units: int
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
