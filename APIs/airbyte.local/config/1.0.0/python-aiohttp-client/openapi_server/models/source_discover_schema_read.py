# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airbyte_catalog import AirbyteCatalog
from openapi_server.models.catalog_diff import CatalogDiff
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.synchronous_job_read import SynchronousJobRead
from openapi_server import util


class SourceDiscoverSchemaRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breaking_change: bool=None, catalog: AirbyteCatalog=None, catalog_diff: CatalogDiff=None, catalog_id: str=None, connection_status: ConnectionStatus=None, job_info: SynchronousJobRead=None):
        """SourceDiscoverSchemaRead - a model defined in OpenAPI

        :param breaking_change: The breaking_change of this SourceDiscoverSchemaRead.
        :param catalog: The catalog of this SourceDiscoverSchemaRead.
        :param catalog_diff: The catalog_diff of this SourceDiscoverSchemaRead.
        :param catalog_id: The catalog_id of this SourceDiscoverSchemaRead.
        :param connection_status: The connection_status of this SourceDiscoverSchemaRead.
        :param job_info: The job_info of this SourceDiscoverSchemaRead.
        """
        self.openapi_types = {
            'breaking_change': bool,
            'catalog': AirbyteCatalog,
            'catalog_diff': CatalogDiff,
            'catalog_id': str,
            'connection_status': ConnectionStatus,
            'job_info': SynchronousJobRead
        }

        self.attribute_map = {
            'breaking_change': 'breakingChange',
            'catalog': 'catalog',
            'catalog_diff': 'catalogDiff',
            'catalog_id': 'catalogId',
            'connection_status': 'connectionStatus',
            'job_info': 'jobInfo'
        }

        self._breaking_change = breaking_change
        self._catalog = catalog
        self._catalog_diff = catalog_diff
        self._catalog_id = catalog_id
        self._connection_status = connection_status
        self._job_info = job_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceDiscoverSchemaRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceDiscoverSchemaRead of this SourceDiscoverSchemaRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breaking_change(self):
        """Gets the breaking_change of this SourceDiscoverSchemaRead.


        :return: The breaking_change of this SourceDiscoverSchemaRead.
        :rtype: bool
        """
        return self._breaking_change

    @breaking_change.setter
    def breaking_change(self, breaking_change):
        """Sets the breaking_change of this SourceDiscoverSchemaRead.


        :param breaking_change: The breaking_change of this SourceDiscoverSchemaRead.
        :type breaking_change: bool
        """

        self._breaking_change = breaking_change

    @property
    def catalog(self):
        """Gets the catalog of this SourceDiscoverSchemaRead.


        :return: The catalog of this SourceDiscoverSchemaRead.
        :rtype: AirbyteCatalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this SourceDiscoverSchemaRead.


        :param catalog: The catalog of this SourceDiscoverSchemaRead.
        :type catalog: AirbyteCatalog
        """

        self._catalog = catalog

    @property
    def catalog_diff(self):
        """Gets the catalog_diff of this SourceDiscoverSchemaRead.


        :return: The catalog_diff of this SourceDiscoverSchemaRead.
        :rtype: CatalogDiff
        """
        return self._catalog_diff

    @catalog_diff.setter
    def catalog_diff(self, catalog_diff):
        """Sets the catalog_diff of this SourceDiscoverSchemaRead.


        :param catalog_diff: The catalog_diff of this SourceDiscoverSchemaRead.
        :type catalog_diff: CatalogDiff
        """

        self._catalog_diff = catalog_diff

    @property
    def catalog_id(self):
        """Gets the catalog_id of this SourceDiscoverSchemaRead.


        :return: The catalog_id of this SourceDiscoverSchemaRead.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this SourceDiscoverSchemaRead.


        :param catalog_id: The catalog_id of this SourceDiscoverSchemaRead.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def connection_status(self):
        """Gets the connection_status of this SourceDiscoverSchemaRead.


        :return: The connection_status of this SourceDiscoverSchemaRead.
        :rtype: ConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this SourceDiscoverSchemaRead.


        :param connection_status: The connection_status of this SourceDiscoverSchemaRead.
        :type connection_status: ConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def job_info(self):
        """Gets the job_info of this SourceDiscoverSchemaRead.


        :return: The job_info of this SourceDiscoverSchemaRead.
        :rtype: SynchronousJobRead
        """
        return self._job_info

    @job_info.setter
    def job_info(self, job_info):
        """Sets the job_info of this SourceDiscoverSchemaRead.


        :param job_info: The job_info of this SourceDiscoverSchemaRead.
        :type job_info: SynchronousJobRead
        """
        if job_info is None:
            raise ValueError("Invalid value for `job_info`, must not be `None`")

        self._job_info = job_info
