from typing import List, Dict
from aiohttp import web

from openapi_server.models.connection_create import ConnectionCreate
from openapi_server.models.connection_id_request_body import ConnectionIdRequestBody
from openapi_server.models.connection_read import ConnectionRead
from openapi_server.models.connection_read_list import ConnectionReadList
from openapi_server.models.connection_search import ConnectionSearch
from openapi_server.models.connection_update import ConnectionUpdate
from openapi_server.models.invalid_input_exception_info import InvalidInputExceptionInfo
from openapi_server.models.job_info_read import JobInfoRead
from openapi_server.models.not_found_known_exception_info import NotFoundKnownExceptionInfo
from openapi_server.models.workspace_id_request_body import WorkspaceIdRequestBody
from openapi_server import util


async def create_connection(request: web.Request, body) -> web.Response:
    """Create a connection between a source and a destination

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionCreate.from_dict(body)
    return web.Response(status=200)


async def delete_connection(request: web.Request, body) -> web.Response:
    """Delete a connection

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def get_connection(request: web.Request, body) -> web.Response:
    """Get a connection

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def list_all_connections_for_workspace(request: web.Request, body) -> web.Response:
    """Returns all connections for a workspace, including deleted connections.

    List connections for workspace, including deleted connections.

    :param body: 
    :type body: dict | bytes

    """
    body = WorkspaceIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def list_connections_for_workspace(request: web.Request, body) -> web.Response:
    """Returns all connections for a workspace.

    List connections for workspace. Does not return deleted connections.

    :param body: 
    :type body: dict | bytes

    """
    body = WorkspaceIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def reset_connection(request: web.Request, body) -> web.Response:
    """Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def search_connections(request: web.Request, body) -> web.Response:
    """Search connections

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionSearch.from_dict(body)
    return web.Response(status=200)


async def sync_connection(request: web.Request, body) -> web.Response:
    """Trigger a manual sync of the connection

    

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionIdRequestBody.from_dict(body)
    return web.Response(status=200)


async def update_connection(request: web.Request, body) -> web.Response:
    """Update a connection

    Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 

    :param body: 
    :type body: dict | bytes

    """
    body = ConnectionUpdate.from_dict(body)
    return web.Response(status=200)
