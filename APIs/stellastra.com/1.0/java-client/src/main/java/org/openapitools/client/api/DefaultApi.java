/*
 * Stellastra
 * Stellastra makes it easy to get reviews for your cybersecurity solution in real-time with its platform-agnostic REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@stellastra.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PostReviewPost200Response;
import org.openapitools.client.model.PostReviewPost400Response;
import org.openapitools.client.model.PostReviewPost401Response;
import org.openapitools.client.model.PostReviewPost403Response;
import org.openapitools.client.model.PostReviewPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postReviewPost
     * @param userEmail User&#39;s email to which the review verification will be sent.  (required)
     * @param rating The user&#39;s star rating, must be a single integer from [1, 2, 3, 4, 5] (required)
     * @param postReviewPostRequest The request body requires the user_email and rating. The parameter use_name is optional.  (required)
     * @param userName The user&#39;s name, defaults to empty string \&quot;\&quot;.  Thus, if this is omitted, the email to the user will not use the user&#39;s name.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response code of 200 means the request was succesful, and the user has been sent an email confirming their review. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A status code of 400 is returned when a required parameter is mising, such as &#39;rating&#39; or &#39;user_email&#39;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 response can have many detailed response messages related to the user&#39;s email address validation </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://stellastra.com/docs/api">Posts the user&#39;s review to Stellastra Documentation</a>
     */
    public okhttp3.Call postReviewPostCall(String userEmail, Integer rating, PostReviewPostRequest postReviewPostRequest, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postReviewPostRequest;

        // create path and map variables
        String localVarPath = "/post-review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_email", userEmail));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name", userName));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postReviewPostValidateBeforeCall(String userEmail, Integer rating, PostReviewPostRequest postReviewPostRequest, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling postReviewPost(Async)");
        }

        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling postReviewPost(Async)");
        }

        // verify the required parameter 'postReviewPostRequest' is set
        if (postReviewPostRequest == null) {
            throw new ApiException("Missing the required parameter 'postReviewPostRequest' when calling postReviewPost(Async)");
        }

        return postReviewPostCall(userEmail, rating, postReviewPostRequest, userName, _callback);

    }

    /**
     * Posts the user&#39;s review to Stellastra
     * 
     * @param userEmail User&#39;s email to which the review verification will be sent.  (required)
     * @param rating The user&#39;s star rating, must be a single integer from [1, 2, 3, 4, 5] (required)
     * @param postReviewPostRequest The request body requires the user_email and rating. The parameter use_name is optional.  (required)
     * @param userName The user&#39;s name, defaults to empty string \&quot;\&quot;.  Thus, if this is omitted, the email to the user will not use the user&#39;s name.  (optional)
     * @return PostReviewPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response code of 200 means the request was succesful, and the user has been sent an email confirming their review. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A status code of 400 is returned when a required parameter is mising, such as &#39;rating&#39; or &#39;user_email&#39;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 response can have many detailed response messages related to the user&#39;s email address validation </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://stellastra.com/docs/api">Posts the user&#39;s review to Stellastra Documentation</a>
     */
    public PostReviewPost200Response postReviewPost(String userEmail, Integer rating, PostReviewPostRequest postReviewPostRequest, String userName) throws ApiException {
        ApiResponse<PostReviewPost200Response> localVarResp = postReviewPostWithHttpInfo(userEmail, rating, postReviewPostRequest, userName);
        return localVarResp.getData();
    }

    /**
     * Posts the user&#39;s review to Stellastra
     * 
     * @param userEmail User&#39;s email to which the review verification will be sent.  (required)
     * @param rating The user&#39;s star rating, must be a single integer from [1, 2, 3, 4, 5] (required)
     * @param postReviewPostRequest The request body requires the user_email and rating. The parameter use_name is optional.  (required)
     * @param userName The user&#39;s name, defaults to empty string \&quot;\&quot;.  Thus, if this is omitted, the email to the user will not use the user&#39;s name.  (optional)
     * @return ApiResponse&lt;PostReviewPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response code of 200 means the request was succesful, and the user has been sent an email confirming their review. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A status code of 400 is returned when a required parameter is mising, such as &#39;rating&#39; or &#39;user_email&#39;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 response can have many detailed response messages related to the user&#39;s email address validation </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://stellastra.com/docs/api">Posts the user&#39;s review to Stellastra Documentation</a>
     */
    public ApiResponse<PostReviewPost200Response> postReviewPostWithHttpInfo(String userEmail, Integer rating, PostReviewPostRequest postReviewPostRequest, String userName) throws ApiException {
        okhttp3.Call localVarCall = postReviewPostValidateBeforeCall(userEmail, rating, postReviewPostRequest, userName, null);
        Type localVarReturnType = new TypeToken<PostReviewPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Posts the user&#39;s review to Stellastra (asynchronously)
     * 
     * @param userEmail User&#39;s email to which the review verification will be sent.  (required)
     * @param rating The user&#39;s star rating, must be a single integer from [1, 2, 3, 4, 5] (required)
     * @param postReviewPostRequest The request body requires the user_email and rating. The parameter use_name is optional.  (required)
     * @param userName The user&#39;s name, defaults to empty string \&quot;\&quot;.  Thus, if this is omitted, the email to the user will not use the user&#39;s name.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response code of 200 means the request was succesful, and the user has been sent an email confirming their review. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A status code of 400 is returned when a required parameter is mising, such as &#39;rating&#39; or &#39;user_email&#39;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 response can have many detailed response messages related to the user&#39;s email address validation </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://stellastra.com/docs/api">Posts the user&#39;s review to Stellastra Documentation</a>
     */
    public okhttp3.Call postReviewPostAsync(String userEmail, Integer rating, PostReviewPostRequest postReviewPostRequest, String userName, final ApiCallback<PostReviewPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postReviewPostValidateBeforeCall(userEmail, rating, postReviewPostRequest, userName, _callback);
        Type localVarReturnType = new TypeToken<PostReviewPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
