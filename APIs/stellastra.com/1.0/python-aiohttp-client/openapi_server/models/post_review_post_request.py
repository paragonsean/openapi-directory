# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostReviewPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rating: int=None, user_email: str=None, user_name: str=None):
        """PostReviewPostRequest - a model defined in OpenAPI

        :param rating: The rating of this PostReviewPostRequest.
        :param user_email: The user_email of this PostReviewPostRequest.
        :param user_name: The user_name of this PostReviewPostRequest.
        """
        self.openapi_types = {
            'rating': int,
            'user_email': str,
            'user_name': str
        }

        self.attribute_map = {
            'rating': 'rating',
            'user_email': 'user_email',
            'user_name': 'user_name'
        }

        self._rating = rating
        self._user_email = user_email
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostReviewPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _post_review_post_request of this PostReviewPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rating(self):
        """Gets the rating of this PostReviewPostRequest.


        :return: The rating of this PostReviewPostRequest.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this PostReviewPostRequest.


        :param rating: The rating of this PostReviewPostRequest.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def user_email(self):
        """Gets the user_email of this PostReviewPostRequest.


        :return: The user_email of this PostReviewPostRequest.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this PostReviewPostRequest.


        :param user_email: The user_email of this PostReviewPostRequest.
        :type user_email: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this PostReviewPostRequest.


        :return: The user_name of this PostReviewPostRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PostReviewPostRequest.


        :param user_name: The user_name of this PostReviewPostRequest.
        :type user_name: str
        """

        self._user_name = user_name
