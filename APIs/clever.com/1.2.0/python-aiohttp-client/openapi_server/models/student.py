# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credentials import Credentials
from openapi_server.models.location import Location
from openapi_server.models.name import Name
import re
from openapi_server import util


class Student(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, credentials: Credentials=None, district: str=None, dob: str=None, ell_status: str=None, email: str=None, gender: str=None, grade: str=None, graduation_year: str=None, hispanic_ethnicity: str=None, id: str=None, last_modified: str=None, location: Location=None, name: Name=None, race: str=None, school: str=None, schools: List[str]=None, sis_id: str=None, state_id: str=None, student_number: str=None):
        """Student - a model defined in OpenAPI

        :param created: The created of this Student.
        :param credentials: The credentials of this Student.
        :param district: The district of this Student.
        :param dob: The dob of this Student.
        :param ell_status: The ell_status of this Student.
        :param email: The email of this Student.
        :param gender: The gender of this Student.
        :param grade: The grade of this Student.
        :param graduation_year: The graduation_year of this Student.
        :param hispanic_ethnicity: The hispanic_ethnicity of this Student.
        :param id: The id of this Student.
        :param last_modified: The last_modified of this Student.
        :param location: The location of this Student.
        :param name: The name of this Student.
        :param race: The race of this Student.
        :param school: The school of this Student.
        :param schools: The schools of this Student.
        :param sis_id: The sis_id of this Student.
        :param state_id: The state_id of this Student.
        :param student_number: The student_number of this Student.
        """
        self.openapi_types = {
            'created': str,
            'credentials': Credentials,
            'district': str,
            'dob': str,
            'ell_status': str,
            'email': str,
            'gender': str,
            'grade': str,
            'graduation_year': str,
            'hispanic_ethnicity': str,
            'id': str,
            'last_modified': str,
            'location': Location,
            'name': Name,
            'race': str,
            'school': str,
            'schools': List[str],
            'sis_id': str,
            'state_id': str,
            'student_number': str
        }

        self.attribute_map = {
            'created': 'created',
            'credentials': 'credentials',
            'district': 'district',
            'dob': 'dob',
            'ell_status': 'ell_status',
            'email': 'email',
            'gender': 'gender',
            'grade': 'grade',
            'graduation_year': 'graduation_year',
            'hispanic_ethnicity': 'hispanic_ethnicity',
            'id': 'id',
            'last_modified': 'last_modified',
            'location': 'location',
            'name': 'name',
            'race': 'race',
            'school': 'school',
            'schools': 'schools',
            'sis_id': 'sis_id',
            'state_id': 'state_id',
            'student_number': 'student_number'
        }

        self._created = created
        self._credentials = credentials
        self._district = district
        self._dob = dob
        self._ell_status = ell_status
        self._email = email
        self._gender = gender
        self._grade = grade
        self._graduation_year = graduation_year
        self._hispanic_ethnicity = hispanic_ethnicity
        self._id = id
        self._last_modified = last_modified
        self._location = location
        self._name = name
        self._race = race
        self._school = school
        self._schools = schools
        self._sis_id = sis_id
        self._state_id = state_id
        self._student_number = student_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Student':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Student of this Student.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Student.


        :return: The created of this Student.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Student.


        :param created: The created of this Student.
        :type created: str
        """

        self._created = created

    @property
    def credentials(self):
        """Gets the credentials of this Student.


        :return: The credentials of this Student.
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Student.


        :param credentials: The credentials of this Student.
        :type credentials: Credentials
        """

        self._credentials = credentials

    @property
    def district(self):
        """Gets the district of this Student.


        :return: The district of this Student.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Student.


        :param district: The district of this Student.
        :type district: str
        """

        self._district = district

    @property
    def dob(self):
        """Gets the dob of this Student.


        :return: The dob of this Student.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Student.


        :param dob: The dob of this Student.
        :type dob: str
        """
        if dob is not None and not re.search(r'(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})', dob):
            raise ValueError("Invalid value for `dob`, must be a follow pattern or equal to `/(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/`")

        self._dob = dob

    @property
    def ell_status(self):
        """Gets the ell_status of this Student.


        :return: The ell_status of this Student.
        :rtype: str
        """
        return self._ell_status

    @ell_status.setter
    def ell_status(self, ell_status):
        """Sets the ell_status of this Student.


        :param ell_status: The ell_status of this Student.
        :type ell_status: str
        """
        allowed_values = [None,"Y", "N", ""]  # noqa: E501
        if ell_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ell_status` ({0}), must be one of {1}"
                .format(ell_status, allowed_values)
            )

        self._ell_status = ell_status

    @property
    def email(self):
        """Gets the email of this Student.


        :return: The email of this Student.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Student.


        :param email: The email of this Student.
        :type email: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this Student.


        :return: The gender of this Student.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Student.


        :param gender: The gender of this Student.
        :type gender: str
        """
        allowed_values = [None,"M", "F", ""]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def grade(self):
        """Gets the grade of this Student.


        :return: The grade of this Student.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Student.


        :param grade: The grade of this Student.
        :type grade: str
        """
        allowed_values = [None,"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "PreKindergarten", "Kindergarten", "PostGraduate", "Other"]  # noqa: E501
        if grade not in allowed_values:
            raise ValueError(
                "Invalid value for `grade` ({0}), must be one of {1}"
                .format(grade, allowed_values)
            )

        self._grade = grade

    @property
    def graduation_year(self):
        """Gets the graduation_year of this Student.


        :return: The graduation_year of this Student.
        :rtype: str
        """
        return self._graduation_year

    @graduation_year.setter
    def graduation_year(self, graduation_year):
        """Sets the graduation_year of this Student.


        :param graduation_year: The graduation_year of this Student.
        :type graduation_year: str
        """

        self._graduation_year = graduation_year

    @property
    def hispanic_ethnicity(self):
        """Gets the hispanic_ethnicity of this Student.


        :return: The hispanic_ethnicity of this Student.
        :rtype: str
        """
        return self._hispanic_ethnicity

    @hispanic_ethnicity.setter
    def hispanic_ethnicity(self, hispanic_ethnicity):
        """Sets the hispanic_ethnicity of this Student.


        :param hispanic_ethnicity: The hispanic_ethnicity of this Student.
        :type hispanic_ethnicity: str
        """
        allowed_values = [None,"Y", "N", ""]  # noqa: E501
        if hispanic_ethnicity not in allowed_values:
            raise ValueError(
                "Invalid value for `hispanic_ethnicity` ({0}), must be one of {1}"
                .format(hispanic_ethnicity, allowed_values)
            )

        self._hispanic_ethnicity = hispanic_ethnicity

    @property
    def id(self):
        """Gets the id of this Student.


        :return: The id of this Student.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Student.


        :param id: The id of this Student.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this Student.


        :return: The last_modified of this Student.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Student.


        :param last_modified: The last_modified of this Student.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def location(self):
        """Gets the location of this Student.


        :return: The location of this Student.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Student.


        :param location: The location of this Student.
        :type location: Location
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Student.


        :return: The name of this Student.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Student.


        :param name: The name of this Student.
        :type name: Name
        """

        self._name = name

    @property
    def race(self):
        """Gets the race of this Student.


        :return: The race of this Student.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this Student.


        :param race: The race of this Student.
        :type race: str
        """
        allowed_values = [None,"Caucasian", "Asian", "Black or African American", "American Indian", "Hawaiian or Other Pacific Islander", "Two or More Races", "Unknown", ""]  # noqa: E501
        if race not in allowed_values:
            raise ValueError(
                "Invalid value for `race` ({0}), must be one of {1}"
                .format(race, allowed_values)
            )

        self._race = race

    @property
    def school(self):
        """Gets the school of this Student.


        :return: The school of this Student.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Student.


        :param school: The school of this Student.
        :type school: str
        """

        self._school = school

    @property
    def schools(self):
        """Gets the schools of this Student.


        :return: The schools of this Student.
        :rtype: List[str]
        """
        return self._schools

    @schools.setter
    def schools(self, schools):
        """Sets the schools of this Student.


        :param schools: The schools of this Student.
        :type schools: List[str]
        """

        self._schools = schools

    @property
    def sis_id(self):
        """Gets the sis_id of this Student.


        :return: The sis_id of this Student.
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this Student.


        :param sis_id: The sis_id of this Student.
        :type sis_id: str
        """

        self._sis_id = sis_id

    @property
    def state_id(self):
        """Gets the state_id of this Student.


        :return: The state_id of this Student.
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this Student.


        :param state_id: The state_id of this Student.
        :type state_id: str
        """

        self._state_id = state_id

    @property
    def student_number(self):
        """Gets the student_number of this Student.


        :return: The student_number of this Student.
        :rtype: str
        """
        return self._student_number

    @student_number.setter
    def student_number(self, student_number):
        """Sets the student_number of this Student.


        :param student_number: The student_number of this Student.
        :type student_number: str
        """

        self._student_number = student_number
