# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, lat: str=None, lon: str=None, state: str=None, zip: str=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param city: The city of this Location.
        :param lat: The lat of this Location.
        :param lon: The lon of this Location.
        :param state: The state of this Location.
        :param zip: The zip of this Location.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'lat': str,
            'lon': str,
            'state': str,
            'zip': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'lat': 'lat',
            'lon': 'lon',
            'state': 'state',
            'zip': 'zip'
        }

        self._address = address
        self._city = city
        self._lat = lat
        self._lon = lon
        self._state = state
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.


        :return: The address of this Location.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this Location.


        :return: The city of this Location.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.


        :param city: The city of this Location.
        :type city: str
        """

        self._city = city

    @property
    def lat(self):
        """Gets the lat of this Location.


        :return: The lat of this Location.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.


        :param lat: The lat of this Location.
        :type lat: str
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Location.


        :return: The lon of this Location.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Location.


        :param lon: The lon of this Location.
        :type lon: str
        """

        self._lon = lon

    @property
    def state(self):
        """Gets the state of this Location.


        :return: The state of this Location.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Location.


        :param state: The state of this Location.
        :type state: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this Location.


        :return: The zip of this Location.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Location.


        :param zip: The zip of this Location.
        :type zip: str
        """

        self._zip = zip
