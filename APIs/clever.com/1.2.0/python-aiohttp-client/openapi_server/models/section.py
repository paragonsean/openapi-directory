# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.term import Term
from openapi_server import util


class Section(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_description: str=None, course_name: str=None, course_number: str=None, created: str=None, district: str=None, grade: str=None, id: str=None, last_modified: str=None, name: str=None, period: str=None, school: str=None, section_number: str=None, sis_id: str=None, students: List[str]=None, subject: str=None, teacher: str=None, teachers: List[str]=None, term: Term=None):
        """Section - a model defined in OpenAPI

        :param course_description: The course_description of this Section.
        :param course_name: The course_name of this Section.
        :param course_number: The course_number of this Section.
        :param created: The created of this Section.
        :param district: The district of this Section.
        :param grade: The grade of this Section.
        :param id: The id of this Section.
        :param last_modified: The last_modified of this Section.
        :param name: The name of this Section.
        :param period: The period of this Section.
        :param school: The school of this Section.
        :param section_number: The section_number of this Section.
        :param sis_id: The sis_id of this Section.
        :param students: The students of this Section.
        :param subject: The subject of this Section.
        :param teacher: The teacher of this Section.
        :param teachers: The teachers of this Section.
        :param term: The term of this Section.
        """
        self.openapi_types = {
            'course_description': str,
            'course_name': str,
            'course_number': str,
            'created': str,
            'district': str,
            'grade': str,
            'id': str,
            'last_modified': str,
            'name': str,
            'period': str,
            'school': str,
            'section_number': str,
            'sis_id': str,
            'students': List[str],
            'subject': str,
            'teacher': str,
            'teachers': List[str],
            'term': Term
        }

        self.attribute_map = {
            'course_description': 'course_description',
            'course_name': 'course_name',
            'course_number': 'course_number',
            'created': 'created',
            'district': 'district',
            'grade': 'grade',
            'id': 'id',
            'last_modified': 'last_modified',
            'name': 'name',
            'period': 'period',
            'school': 'school',
            'section_number': 'section_number',
            'sis_id': 'sis_id',
            'students': 'students',
            'subject': 'subject',
            'teacher': 'teacher',
            'teachers': 'teachers',
            'term': 'term'
        }

        self._course_description = course_description
        self._course_name = course_name
        self._course_number = course_number
        self._created = created
        self._district = district
        self._grade = grade
        self._id = id
        self._last_modified = last_modified
        self._name = name
        self._period = period
        self._school = school
        self._section_number = section_number
        self._sis_id = sis_id
        self._students = students
        self._subject = subject
        self._teacher = teacher
        self._teachers = teachers
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Section':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Section of this Section.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_description(self):
        """Gets the course_description of this Section.


        :return: The course_description of this Section.
        :rtype: str
        """
        return self._course_description

    @course_description.setter
    def course_description(self, course_description):
        """Sets the course_description of this Section.


        :param course_description: The course_description of this Section.
        :type course_description: str
        """

        self._course_description = course_description

    @property
    def course_name(self):
        """Gets the course_name of this Section.


        :return: The course_name of this Section.
        :rtype: str
        """
        return self._course_name

    @course_name.setter
    def course_name(self, course_name):
        """Sets the course_name of this Section.


        :param course_name: The course_name of this Section.
        :type course_name: str
        """

        self._course_name = course_name

    @property
    def course_number(self):
        """Gets the course_number of this Section.


        :return: The course_number of this Section.
        :rtype: str
        """
        return self._course_number

    @course_number.setter
    def course_number(self, course_number):
        """Sets the course_number of this Section.


        :param course_number: The course_number of this Section.
        :type course_number: str
        """

        self._course_number = course_number

    @property
    def created(self):
        """Gets the created of this Section.


        :return: The created of this Section.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Section.


        :param created: The created of this Section.
        :type created: str
        """

        self._created = created

    @property
    def district(self):
        """Gets the district of this Section.


        :return: The district of this Section.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Section.


        :param district: The district of this Section.
        :type district: str
        """

        self._district = district

    @property
    def grade(self):
        """Gets the grade of this Section.


        :return: The grade of this Section.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Section.


        :param grade: The grade of this Section.
        :type grade: str
        """
        allowed_values = [None,"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "PreKindergarten", "Kindergarten", "PostGraduate", "Other"]  # noqa: E501
        if grade not in allowed_values:
            raise ValueError(
                "Invalid value for `grade` ({0}), must be one of {1}"
                .format(grade, allowed_values)
            )

        self._grade = grade

    @property
    def id(self):
        """Gets the id of this Section.


        :return: The id of this Section.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Section.


        :param id: The id of this Section.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this Section.


        :return: The last_modified of this Section.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Section.


        :param last_modified: The last_modified of this Section.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this Section.


        :return: The name of this Section.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Section.


        :param name: The name of this Section.
        :type name: str
        """

        self._name = name

    @property
    def period(self):
        """Gets the period of this Section.


        :return: The period of this Section.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Section.


        :param period: The period of this Section.
        :type period: str
        """

        self._period = period

    @property
    def school(self):
        """Gets the school of this Section.


        :return: The school of this Section.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Section.


        :param school: The school of this Section.
        :type school: str
        """

        self._school = school

    @property
    def section_number(self):
        """Gets the section_number of this Section.


        :return: The section_number of this Section.
        :rtype: str
        """
        return self._section_number

    @section_number.setter
    def section_number(self, section_number):
        """Sets the section_number of this Section.


        :param section_number: The section_number of this Section.
        :type section_number: str
        """

        self._section_number = section_number

    @property
    def sis_id(self):
        """Gets the sis_id of this Section.


        :return: The sis_id of this Section.
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this Section.


        :param sis_id: The sis_id of this Section.
        :type sis_id: str
        """

        self._sis_id = sis_id

    @property
    def students(self):
        """Gets the students of this Section.


        :return: The students of this Section.
        :rtype: List[str]
        """
        return self._students

    @students.setter
    def students(self, students):
        """Sets the students of this Section.


        :param students: The students of this Section.
        :type students: List[str]
        """

        self._students = students

    @property
    def subject(self):
        """Gets the subject of this Section.


        :return: The subject of this Section.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Section.


        :param subject: The subject of this Section.
        :type subject: str
        """
        allowed_values = ["english/language arts", "math", "science", "social studies", "language", "homeroom/advisory", "interventions/online learning", "technology and engineering", "PE and health", "arts and music", "other"]  # noqa: E501
        if subject not in allowed_values:
            raise ValueError(
                "Invalid value for `subject` ({0}), must be one of {1}"
                .format(subject, allowed_values)
            )

        self._subject = subject

    @property
    def teacher(self):
        """Gets the teacher of this Section.


        :return: The teacher of this Section.
        :rtype: str
        """
        return self._teacher

    @teacher.setter
    def teacher(self, teacher):
        """Sets the teacher of this Section.


        :param teacher: The teacher of this Section.
        :type teacher: str
        """

        self._teacher = teacher

    @property
    def teachers(self):
        """Gets the teachers of this Section.


        :return: The teachers of this Section.
        :rtype: List[str]
        """
        return self._teachers

    @teachers.setter
    def teachers(self, teachers):
        """Sets the teachers of this Section.


        :param teachers: The teachers of this Section.
        :type teachers: List[str]
        """

        self._teachers = teachers

    @property
    def term(self):
        """Gets the term of this Section.


        :return: The term of this Section.
        :rtype: Term
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Section.


        :param term: The term of this Section.
        :type term: Term
        """

        self._term = term
