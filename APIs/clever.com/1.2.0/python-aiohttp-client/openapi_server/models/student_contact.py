# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StudentContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, district: str=None, email: str=None, id: str=None, name: str=None, phone: str=None, phone_type: str=None, relationship: str=None, sis_id: str=None, student: str=None, type: str=None):
        """StudentContact - a model defined in OpenAPI

        :param district: The district of this StudentContact.
        :param email: The email of this StudentContact.
        :param id: The id of this StudentContact.
        :param name: The name of this StudentContact.
        :param phone: The phone of this StudentContact.
        :param phone_type: The phone_type of this StudentContact.
        :param relationship: The relationship of this StudentContact.
        :param sis_id: The sis_id of this StudentContact.
        :param student: The student of this StudentContact.
        :param type: The type of this StudentContact.
        """
        self.openapi_types = {
            'district': str,
            'email': str,
            'id': str,
            'name': str,
            'phone': str,
            'phone_type': str,
            'relationship': str,
            'sis_id': str,
            'student': str,
            'type': str
        }

        self.attribute_map = {
            'district': 'district',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'phone': 'phone',
            'phone_type': 'phone_type',
            'relationship': 'relationship',
            'sis_id': 'sis_id',
            'student': 'student',
            'type': 'type'
        }

        self._district = district
        self._email = email
        self._id = id
        self._name = name
        self._phone = phone
        self._phone_type = phone_type
        self._relationship = relationship
        self._sis_id = sis_id
        self._student = student
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StudentContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StudentContact of this StudentContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def district(self):
        """Gets the district of this StudentContact.


        :return: The district of this StudentContact.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this StudentContact.


        :param district: The district of this StudentContact.
        :type district: str
        """

        self._district = district

    @property
    def email(self):
        """Gets the email of this StudentContact.


        :return: The email of this StudentContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this StudentContact.


        :param email: The email of this StudentContact.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this StudentContact.


        :return: The id of this StudentContact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudentContact.


        :param id: The id of this StudentContact.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StudentContact.


        :return: The name of this StudentContact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudentContact.


        :param name: The name of this StudentContact.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this StudentContact.


        :return: The phone of this StudentContact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this StudentContact.


        :param phone: The phone of this StudentContact.
        :type phone: str
        """

        self._phone = phone

    @property
    def phone_type(self):
        """Gets the phone_type of this StudentContact.


        :return: The phone_type of this StudentContact.
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """Sets the phone_type of this StudentContact.


        :param phone_type: The phone_type of this StudentContact.
        :type phone_type: str
        """

        self._phone_type = phone_type

    @property
    def relationship(self):
        """Gets the relationship of this StudentContact.


        :return: The relationship of this StudentContact.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this StudentContact.


        :param relationship: The relationship of this StudentContact.
        :type relationship: str
        """

        self._relationship = relationship

    @property
    def sis_id(self):
        """Gets the sis_id of this StudentContact.


        :return: The sis_id of this StudentContact.
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this StudentContact.


        :param sis_id: The sis_id of this StudentContact.
        :type sis_id: str
        """

        self._sis_id = sis_id

    @property
    def student(self):
        """Gets the student of this StudentContact.


        :return: The student of this StudentContact.
        :rtype: str
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this StudentContact.


        :param student: The student of this StudentContact.
        :type student: str
        """

        self._student = student

    @property
    def type(self):
        """Gets the type of this StudentContact.


        :return: The type of this StudentContact.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StudentContact.


        :param type: The type of this StudentContact.
        :type type: str
        """

        self._type = type
