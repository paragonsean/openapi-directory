# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server.models.principal import Principal
from openapi_server import util


class School(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, district: str=None, high_grade: str=None, id: str=None, last_modified: str=None, location: Location=None, low_grade: str=None, mdr_number: str=None, name: str=None, nces_id: str=None, phone: str=None, principal: Principal=None, school_number: str=None, sis_id: str=None, state_id: str=None):
        """School - a model defined in OpenAPI

        :param created: The created of this School.
        :param district: The district of this School.
        :param high_grade: The high_grade of this School.
        :param id: The id of this School.
        :param last_modified: The last_modified of this School.
        :param location: The location of this School.
        :param low_grade: The low_grade of this School.
        :param mdr_number: The mdr_number of this School.
        :param name: The name of this School.
        :param nces_id: The nces_id of this School.
        :param phone: The phone of this School.
        :param principal: The principal of this School.
        :param school_number: The school_number of this School.
        :param sis_id: The sis_id of this School.
        :param state_id: The state_id of this School.
        """
        self.openapi_types = {
            'created': str,
            'district': str,
            'high_grade': str,
            'id': str,
            'last_modified': str,
            'location': Location,
            'low_grade': str,
            'mdr_number': str,
            'name': str,
            'nces_id': str,
            'phone': str,
            'principal': Principal,
            'school_number': str,
            'sis_id': str,
            'state_id': str
        }

        self.attribute_map = {
            'created': 'created',
            'district': 'district',
            'high_grade': 'high_grade',
            'id': 'id',
            'last_modified': 'last_modified',
            'location': 'location',
            'low_grade': 'low_grade',
            'mdr_number': 'mdr_number',
            'name': 'name',
            'nces_id': 'nces_id',
            'phone': 'phone',
            'principal': 'principal',
            'school_number': 'school_number',
            'sis_id': 'sis_id',
            'state_id': 'state_id'
        }

        self._created = created
        self._district = district
        self._high_grade = high_grade
        self._id = id
        self._last_modified = last_modified
        self._location = location
        self._low_grade = low_grade
        self._mdr_number = mdr_number
        self._name = name
        self._nces_id = nces_id
        self._phone = phone
        self._principal = principal
        self._school_number = school_number
        self._sis_id = sis_id
        self._state_id = state_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'School':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The School of this School.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this School.


        :return: The created of this School.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this School.


        :param created: The created of this School.
        :type created: str
        """

        self._created = created

    @property
    def district(self):
        """Gets the district of this School.


        :return: The district of this School.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this School.


        :param district: The district of this School.
        :type district: str
        """

        self._district = district

    @property
    def high_grade(self):
        """Gets the high_grade of this School.


        :return: The high_grade of this School.
        :rtype: str
        """
        return self._high_grade

    @high_grade.setter
    def high_grade(self, high_grade):
        """Sets the high_grade of this School.


        :param high_grade: The high_grade of this School.
        :type high_grade: str
        """
        allowed_values = [None,"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "PreKindergarten", "Kindergarten", "PostGraduate", "Other"]  # noqa: E501
        if high_grade not in allowed_values:
            raise ValueError(
                "Invalid value for `high_grade` ({0}), must be one of {1}"
                .format(high_grade, allowed_values)
            )

        self._high_grade = high_grade

    @property
    def id(self):
        """Gets the id of this School.


        :return: The id of this School.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this School.


        :param id: The id of this School.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this School.


        :return: The last_modified of this School.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this School.


        :param last_modified: The last_modified of this School.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def location(self):
        """Gets the location of this School.


        :return: The location of this School.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this School.


        :param location: The location of this School.
        :type location: Location
        """

        self._location = location

    @property
    def low_grade(self):
        """Gets the low_grade of this School.


        :return: The low_grade of this School.
        :rtype: str
        """
        return self._low_grade

    @low_grade.setter
    def low_grade(self, low_grade):
        """Sets the low_grade of this School.


        :param low_grade: The low_grade of this School.
        :type low_grade: str
        """
        allowed_values = [None,"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "PreKindergarten", "Kindergarten", "PostGraduate", "Other"]  # noqa: E501
        if low_grade not in allowed_values:
            raise ValueError(
                "Invalid value for `low_grade` ({0}), must be one of {1}"
                .format(low_grade, allowed_values)
            )

        self._low_grade = low_grade

    @property
    def mdr_number(self):
        """Gets the mdr_number of this School.


        :return: The mdr_number of this School.
        :rtype: str
        """
        return self._mdr_number

    @mdr_number.setter
    def mdr_number(self, mdr_number):
        """Sets the mdr_number of this School.


        :param mdr_number: The mdr_number of this School.
        :type mdr_number: str
        """

        self._mdr_number = mdr_number

    @property
    def name(self):
        """Gets the name of this School.


        :return: The name of this School.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this School.


        :param name: The name of this School.
        :type name: str
        """

        self._name = name

    @property
    def nces_id(self):
        """Gets the nces_id of this School.


        :return: The nces_id of this School.
        :rtype: str
        """
        return self._nces_id

    @nces_id.setter
    def nces_id(self, nces_id):
        """Sets the nces_id of this School.


        :param nces_id: The nces_id of this School.
        :type nces_id: str
        """

        self._nces_id = nces_id

    @property
    def phone(self):
        """Gets the phone of this School.


        :return: The phone of this School.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this School.


        :param phone: The phone of this School.
        :type phone: str
        """

        self._phone = phone

    @property
    def principal(self):
        """Gets the principal of this School.


        :return: The principal of this School.
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this School.


        :param principal: The principal of this School.
        :type principal: Principal
        """

        self._principal = principal

    @property
    def school_number(self):
        """Gets the school_number of this School.


        :return: The school_number of this School.
        :rtype: str
        """
        return self._school_number

    @school_number.setter
    def school_number(self, school_number):
        """Sets the school_number of this School.


        :param school_number: The school_number of this School.
        :type school_number: str
        """

        self._school_number = school_number

    @property
    def sis_id(self):
        """Gets the sis_id of this School.


        :return: The sis_id of this School.
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this School.


        :param sis_id: The sis_id of this School.
        :type sis_id: str
        """

        self._sis_id = sis_id

    @property
    def state_id(self):
        """Gets the state_id of this School.


        :return: The state_id of this School.
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this School.


        :param state_id: The state_id of this School.
        :type state_id: str
        """

        self._state_id = state_id
