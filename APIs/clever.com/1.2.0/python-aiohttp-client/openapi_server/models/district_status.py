# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistrictStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, id: str=None, instant_login: bool=None, last_sync: str=None, launch_date: str=None, pause_end: str=None, pause_start: str=None, sis_type: str=None, state: str=None):
        """DistrictStatus - a model defined in OpenAPI

        :param error: The error of this DistrictStatus.
        :param id: The id of this DistrictStatus.
        :param instant_login: The instant_login of this DistrictStatus.
        :param last_sync: The last_sync of this DistrictStatus.
        :param launch_date: The launch_date of this DistrictStatus.
        :param pause_end: The pause_end of this DistrictStatus.
        :param pause_start: The pause_start of this DistrictStatus.
        :param sis_type: The sis_type of this DistrictStatus.
        :param state: The state of this DistrictStatus.
        """
        self.openapi_types = {
            'error': str,
            'id': str,
            'instant_login': bool,
            'last_sync': str,
            'launch_date': str,
            'pause_end': str,
            'pause_start': str,
            'sis_type': str,
            'state': str
        }

        self.attribute_map = {
            'error': 'error',
            'id': 'id',
            'instant_login': 'instant_login',
            'last_sync': 'last_sync',
            'launch_date': 'launch_date',
            'pause_end': 'pause_end',
            'pause_start': 'pause_start',
            'sis_type': 'sis_type',
            'state': 'state'
        }

        self._error = error
        self._id = id
        self._instant_login = instant_login
        self._last_sync = last_sync
        self._launch_date = launch_date
        self._pause_end = pause_end
        self._pause_start = pause_start
        self._sis_type = sis_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistrictStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistrictStatus of this DistrictStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this DistrictStatus.


        :return: The error of this DistrictStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DistrictStatus.


        :param error: The error of this DistrictStatus.
        :type error: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this DistrictStatus.


        :return: The id of this DistrictStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DistrictStatus.


        :param id: The id of this DistrictStatus.
        :type id: str
        """

        self._id = id

    @property
    def instant_login(self):
        """Gets the instant_login of this DistrictStatus.


        :return: The instant_login of this DistrictStatus.
        :rtype: bool
        """
        return self._instant_login

    @instant_login.setter
    def instant_login(self, instant_login):
        """Sets the instant_login of this DistrictStatus.


        :param instant_login: The instant_login of this DistrictStatus.
        :type instant_login: bool
        """

        self._instant_login = instant_login

    @property
    def last_sync(self):
        """Gets the last_sync of this DistrictStatus.


        :return: The last_sync of this DistrictStatus.
        :rtype: str
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this DistrictStatus.


        :param last_sync: The last_sync of this DistrictStatus.
        :type last_sync: str
        """

        self._last_sync = last_sync

    @property
    def launch_date(self):
        """Gets the launch_date of this DistrictStatus.


        :return: The launch_date of this DistrictStatus.
        :rtype: str
        """
        return self._launch_date

    @launch_date.setter
    def launch_date(self, launch_date):
        """Sets the launch_date of this DistrictStatus.


        :param launch_date: The launch_date of this DistrictStatus.
        :type launch_date: str
        """

        self._launch_date = launch_date

    @property
    def pause_end(self):
        """Gets the pause_end of this DistrictStatus.


        :return: The pause_end of this DistrictStatus.
        :rtype: str
        """
        return self._pause_end

    @pause_end.setter
    def pause_end(self, pause_end):
        """Sets the pause_end of this DistrictStatus.


        :param pause_end: The pause_end of this DistrictStatus.
        :type pause_end: str
        """

        self._pause_end = pause_end

    @property
    def pause_start(self):
        """Gets the pause_start of this DistrictStatus.


        :return: The pause_start of this DistrictStatus.
        :rtype: str
        """
        return self._pause_start

    @pause_start.setter
    def pause_start(self, pause_start):
        """Sets the pause_start of this DistrictStatus.


        :param pause_start: The pause_start of this DistrictStatus.
        :type pause_start: str
        """

        self._pause_start = pause_start

    @property
    def sis_type(self):
        """Gets the sis_type of this DistrictStatus.


        :return: The sis_type of this DistrictStatus.
        :rtype: str
        """
        return self._sis_type

    @sis_type.setter
    def sis_type(self, sis_type):
        """Sets the sis_type of this DistrictStatus.


        :param sis_type: The sis_type of this DistrictStatus.
        :type sis_type: str
        """

        self._sis_type = sis_type

    @property
    def state(self):
        """Gets the state of this DistrictStatus.


        :return: The state of this DistrictStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DistrictStatus.


        :param state: The state of this DistrictStatus.
        :type state: str
        """
        allowed_values = ["running", "pending", "error", "paused"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
