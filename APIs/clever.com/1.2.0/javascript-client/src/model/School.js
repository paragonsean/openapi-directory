/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import Principal from './Principal';

/**
 * The School model module.
 * @module model/School
 * @version 1.2.0
 */
class School {
    /**
     * Constructs a new <code>School</code>.
     * @alias module:model/School
     */
    constructor() { 
        
        School.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>School</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/School} obj Optional instance to populate.
     * @return {module:model/School} The populated <code>School</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new School();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('high_grade')) {
                obj['high_grade'] = ApiClient.convertToType(data['high_grade'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_modified')) {
                obj['last_modified'] = ApiClient.convertToType(data['last_modified'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('low_grade')) {
                obj['low_grade'] = ApiClient.convertToType(data['low_grade'], 'String');
            }
            if (data.hasOwnProperty('mdr_number')) {
                obj['mdr_number'] = ApiClient.convertToType(data['mdr_number'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nces_id')) {
                obj['nces_id'] = ApiClient.convertToType(data['nces_id'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = Principal.constructFromObject(data['principal']);
            }
            if (data.hasOwnProperty('school_number')) {
                obj['school_number'] = ApiClient.convertToType(data['school_number'], 'String');
            }
            if (data.hasOwnProperty('sis_id')) {
                obj['sis_id'] = ApiClient.convertToType(data['sis_id'], 'String');
            }
            if (data.hasOwnProperty('state_id')) {
                obj['state_id'] = ApiClient.convertToType(data['state_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>School</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>School</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['high_grade'] && !(typeof data['high_grade'] === 'string' || data['high_grade'] instanceof String)) {
            throw new Error("Expected the field `high_grade` to be a primitive type in the JSON string but got " + data['high_grade']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_modified'] && !(typeof data['last_modified'] === 'string' || data['last_modified'] instanceof String)) {
            throw new Error("Expected the field `last_modified` to be a primitive type in the JSON string but got " + data['last_modified']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['low_grade'] && !(typeof data['low_grade'] === 'string' || data['low_grade'] instanceof String)) {
            throw new Error("Expected the field `low_grade` to be a primitive type in the JSON string but got " + data['low_grade']);
        }
        // ensure the json data is a string
        if (data['mdr_number'] && !(typeof data['mdr_number'] === 'string' || data['mdr_number'] instanceof String)) {
            throw new Error("Expected the field `mdr_number` to be a primitive type in the JSON string but got " + data['mdr_number']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nces_id'] && !(typeof data['nces_id'] === 'string' || data['nces_id'] instanceof String)) {
            throw new Error("Expected the field `nces_id` to be a primitive type in the JSON string but got " + data['nces_id']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `principal`
        if (data['principal']) { // data not null
          Principal.validateJSON(data['principal']);
        }
        // ensure the json data is a string
        if (data['school_number'] && !(typeof data['school_number'] === 'string' || data['school_number'] instanceof String)) {
            throw new Error("Expected the field `school_number` to be a primitive type in the JSON string but got " + data['school_number']);
        }
        // ensure the json data is a string
        if (data['sis_id'] && !(typeof data['sis_id'] === 'string' || data['sis_id'] instanceof String)) {
            throw new Error("Expected the field `sis_id` to be a primitive type in the JSON string but got " + data['sis_id']);
        }
        // ensure the json data is a string
        if (data['state_id'] && !(typeof data['state_id'] === 'string' || data['state_id'] instanceof String)) {
            throw new Error("Expected the field `state_id` to be a primitive type in the JSON string but got " + data['state_id']);
        }

        return true;
    }


}



/**
 * @member {String} created
 */
School.prototype['created'] = undefined;

/**
 * @member {String} district
 */
School.prototype['district'] = undefined;

/**
 * @member {module:model/School.HighGradeEnum} high_grade
 */
School.prototype['high_grade'] = undefined;

/**
 * @member {String} id
 */
School.prototype['id'] = undefined;

/**
 * @member {String} last_modified
 */
School.prototype['last_modified'] = undefined;

/**
 * @member {module:model/Location} location
 */
School.prototype['location'] = undefined;

/**
 * @member {module:model/School.LowGradeEnum} low_grade
 */
School.prototype['low_grade'] = undefined;

/**
 * @member {String} mdr_number
 */
School.prototype['mdr_number'] = undefined;

/**
 * @member {String} name
 */
School.prototype['name'] = undefined;

/**
 * @member {String} nces_id
 */
School.prototype['nces_id'] = undefined;

/**
 * @member {String} phone
 */
School.prototype['phone'] = undefined;

/**
 * @member {module:model/Principal} principal
 */
School.prototype['principal'] = undefined;

/**
 * @member {String} school_number
 */
School.prototype['school_number'] = undefined;

/**
 * @member {String} sis_id
 */
School.prototype['sis_id'] = undefined;

/**
 * @member {String} state_id
 */
School.prototype['state_id'] = undefined;





/**
 * Allowed values for the <code>high_grade</code> property.
 * @enum {String}
 * @readonly
 */
School['HighGradeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7",

    /**
     * value: "8"
     * @const
     */
    "8": "8",

    /**
     * value: "9"
     * @const
     */
    "9": "9",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12",

    /**
     * value: "PreKindergarten"
     * @const
     */
    "PreKindergarten": "PreKindergarten",

    /**
     * value: "Kindergarten"
     * @const
     */
    "Kindergarten": "Kindergarten",

    /**
     * value: "PostGraduate"
     * @const
     */
    "PostGraduate": "PostGraduate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>low_grade</code> property.
 * @enum {String}
 * @readonly
 */
School['LowGradeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7",

    /**
     * value: "8"
     * @const
     */
    "8": "8",

    /**
     * value: "9"
     * @const
     */
    "9": "9",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12",

    /**
     * value: "PreKindergarten"
     * @const
     */
    "PreKindergarten": "PreKindergarten",

    /**
     * value: "Kindergarten"
     * @const
     */
    "Kindergarten": "Kindergarten",

    /**
     * value: "PostGraduate"
     * @const
     */
    "PostGraduate": "PostGraduate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default School;

