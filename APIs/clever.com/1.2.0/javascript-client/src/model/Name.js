/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Name model module.
 * @module model/Name
 * @version 1.2.0
 */
class Name {
    /**
     * Constructs a new <code>Name</code>.
     * @alias module:model/Name
     */
    constructor() { 
        
        Name.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Name();

            if (data.hasOwnProperty('first')) {
                obj['first'] = ApiClient.convertToType(data['first'], 'String');
            }
            if (data.hasOwnProperty('last')) {
                obj['last'] = ApiClient.convertToType(data['last'], 'String');
            }
            if (data.hasOwnProperty('middle')) {
                obj['middle'] = ApiClient.convertToType(data['middle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Name</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Name</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['first'] && !(typeof data['first'] === 'string' || data['first'] instanceof String)) {
            throw new Error("Expected the field `first` to be a primitive type in the JSON string but got " + data['first']);
        }
        // ensure the json data is a string
        if (data['last'] && !(typeof data['last'] === 'string' || data['last'] instanceof String)) {
            throw new Error("Expected the field `last` to be a primitive type in the JSON string but got " + data['last']);
        }
        // ensure the json data is a string
        if (data['middle'] && !(typeof data['middle'] === 'string' || data['middle'] instanceof String)) {
            throw new Error("Expected the field `middle` to be a primitive type in the JSON string but got " + data['middle']);
        }

        return true;
    }


}



/**
 * @member {String} first
 */
Name.prototype['first'] = undefined;

/**
 * @member {String} last
 */
Name.prototype['last'] = undefined;

/**
 * @member {String} middle
 */
Name.prototype['middle'] = undefined;






export default Name;

