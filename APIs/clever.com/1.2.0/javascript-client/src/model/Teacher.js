/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Credentials from './Credentials';
import Name from './Name';

/**
 * The Teacher model module.
 * @module model/Teacher
 * @version 1.2.0
 */
class Teacher {
    /**
     * Constructs a new <code>Teacher</code>.
     * @alias module:model/Teacher
     */
    constructor() { 
        
        Teacher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Teacher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Teacher} obj Optional instance to populate.
     * @return {module:model/Teacher} The populated <code>Teacher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Teacher();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = Credentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_modified')) {
                obj['last_modified'] = ApiClient.convertToType(data['last_modified'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('schools')) {
                obj['schools'] = ApiClient.convertToType(data['schools'], ['String']);
            }
            if (data.hasOwnProperty('sis_id')) {
                obj['sis_id'] = ApiClient.convertToType(data['sis_id'], 'String');
            }
            if (data.hasOwnProperty('state_id')) {
                obj['state_id'] = ApiClient.convertToType(data['state_id'], 'String');
            }
            if (data.hasOwnProperty('teacher_number')) {
                obj['teacher_number'] = ApiClient.convertToType(data['teacher_number'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Teacher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Teacher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          Credentials.validateJSON(data['credentials']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_modified'] && !(typeof data['last_modified'] === 'string' || data['last_modified'] instanceof String)) {
            throw new Error("Expected the field `last_modified` to be a primitive type in the JSON string but got " + data['last_modified']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schools'])) {
            throw new Error("Expected the field `schools` to be an array in the JSON data but got " + data['schools']);
        }
        // ensure the json data is a string
        if (data['sis_id'] && !(typeof data['sis_id'] === 'string' || data['sis_id'] instanceof String)) {
            throw new Error("Expected the field `sis_id` to be a primitive type in the JSON string but got " + data['sis_id']);
        }
        // ensure the json data is a string
        if (data['state_id'] && !(typeof data['state_id'] === 'string' || data['state_id'] instanceof String)) {
            throw new Error("Expected the field `state_id` to be a primitive type in the JSON string but got " + data['state_id']);
        }
        // ensure the json data is a string
        if (data['teacher_number'] && !(typeof data['teacher_number'] === 'string' || data['teacher_number'] instanceof String)) {
            throw new Error("Expected the field `teacher_number` to be a primitive type in the JSON string but got " + data['teacher_number']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} created
 */
Teacher.prototype['created'] = undefined;

/**
 * @member {module:model/Credentials} credentials
 */
Teacher.prototype['credentials'] = undefined;

/**
 * @member {String} district
 */
Teacher.prototype['district'] = undefined;

/**
 * @member {String} email
 */
Teacher.prototype['email'] = undefined;

/**
 * @member {String} id
 */
Teacher.prototype['id'] = undefined;

/**
 * @member {String} last_modified
 */
Teacher.prototype['last_modified'] = undefined;

/**
 * @member {module:model/Name} name
 */
Teacher.prototype['name'] = undefined;

/**
 * @member {String} school
 */
Teacher.prototype['school'] = undefined;

/**
 * @member {Array.<String>} schools
 */
Teacher.prototype['schools'] = undefined;

/**
 * @member {String} sis_id
 */
Teacher.prototype['sis_id'] = undefined;

/**
 * @member {String} state_id
 */
Teacher.prototype['state_id'] = undefined;

/**
 * @member {String} teacher_number
 */
Teacher.prototype['teacher_number'] = undefined;

/**
 * @member {String} title
 */
Teacher.prototype['title'] = undefined;






export default Teacher;

