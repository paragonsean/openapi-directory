/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StudentContact model module.
 * @module model/StudentContact
 * @version 1.2.0
 */
class StudentContact {
    /**
     * Constructs a new <code>StudentContact</code>.
     * @alias module:model/StudentContact
     */
    constructor() { 
        
        StudentContact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StudentContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudentContact} obj Optional instance to populate.
     * @return {module:model/StudentContact} The populated <code>StudentContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudentContact();

            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phone_type')) {
                obj['phone_type'] = ApiClient.convertToType(data['phone_type'], 'String');
            }
            if (data.hasOwnProperty('relationship')) {
                obj['relationship'] = ApiClient.convertToType(data['relationship'], 'String');
            }
            if (data.hasOwnProperty('sis_id')) {
                obj['sis_id'] = ApiClient.convertToType(data['sis_id'], 'String');
            }
            if (data.hasOwnProperty('student')) {
                obj['student'] = ApiClient.convertToType(data['student'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudentContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudentContact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phone_type'] && !(typeof data['phone_type'] === 'string' || data['phone_type'] instanceof String)) {
            throw new Error("Expected the field `phone_type` to be a primitive type in the JSON string but got " + data['phone_type']);
        }
        // ensure the json data is a string
        if (data['relationship'] && !(typeof data['relationship'] === 'string' || data['relationship'] instanceof String)) {
            throw new Error("Expected the field `relationship` to be a primitive type in the JSON string but got " + data['relationship']);
        }
        // ensure the json data is a string
        if (data['sis_id'] && !(typeof data['sis_id'] === 'string' || data['sis_id'] instanceof String)) {
            throw new Error("Expected the field `sis_id` to be a primitive type in the JSON string but got " + data['sis_id']);
        }
        // ensure the json data is a string
        if (data['student'] && !(typeof data['student'] === 'string' || data['student'] instanceof String)) {
            throw new Error("Expected the field `student` to be a primitive type in the JSON string but got " + data['student']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} district
 */
StudentContact.prototype['district'] = undefined;

/**
 * @member {String} email
 */
StudentContact.prototype['email'] = undefined;

/**
 * @member {String} id
 */
StudentContact.prototype['id'] = undefined;

/**
 * @member {String} name
 */
StudentContact.prototype['name'] = undefined;

/**
 * @member {String} phone
 */
StudentContact.prototype['phone'] = undefined;

/**
 * @member {String} phone_type
 */
StudentContact.prototype['phone_type'] = undefined;

/**
 * @member {String} relationship
 */
StudentContact.prototype['relationship'] = undefined;

/**
 * @member {String} sis_id
 */
StudentContact.prototype['sis_id'] = undefined;

/**
 * @member {String} student
 */
StudentContact.prototype['student'] = undefined;

/**
 * @member {String} type
 */
StudentContact.prototype['type'] = undefined;






export default StudentContact;

