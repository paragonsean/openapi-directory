/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Term from './Term';

/**
 * The Section model module.
 * @module model/Section
 * @version 1.2.0
 */
class Section {
    /**
     * Constructs a new <code>Section</code>.
     * @alias module:model/Section
     */
    constructor() { 
        
        Section.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Section</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Section} obj Optional instance to populate.
     * @return {module:model/Section} The populated <code>Section</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Section();

            if (data.hasOwnProperty('course_description')) {
                obj['course_description'] = ApiClient.convertToType(data['course_description'], 'String');
            }
            if (data.hasOwnProperty('course_name')) {
                obj['course_name'] = ApiClient.convertToType(data['course_name'], 'String');
            }
            if (data.hasOwnProperty('course_number')) {
                obj['course_number'] = ApiClient.convertToType(data['course_number'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_modified')) {
                obj['last_modified'] = ApiClient.convertToType(data['last_modified'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'String');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('section_number')) {
                obj['section_number'] = ApiClient.convertToType(data['section_number'], 'String');
            }
            if (data.hasOwnProperty('sis_id')) {
                obj['sis_id'] = ApiClient.convertToType(data['sis_id'], 'String');
            }
            if (data.hasOwnProperty('students')) {
                obj['students'] = ApiClient.convertToType(data['students'], ['String']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('teacher')) {
                obj['teacher'] = ApiClient.convertToType(data['teacher'], 'String');
            }
            if (data.hasOwnProperty('teachers')) {
                obj['teachers'] = ApiClient.convertToType(data['teachers'], ['String']);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = Term.constructFromObject(data['term']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Section</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Section</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['course_description'] && !(typeof data['course_description'] === 'string' || data['course_description'] instanceof String)) {
            throw new Error("Expected the field `course_description` to be a primitive type in the JSON string but got " + data['course_description']);
        }
        // ensure the json data is a string
        if (data['course_name'] && !(typeof data['course_name'] === 'string' || data['course_name'] instanceof String)) {
            throw new Error("Expected the field `course_name` to be a primitive type in the JSON string but got " + data['course_name']);
        }
        // ensure the json data is a string
        if (data['course_number'] && !(typeof data['course_number'] === 'string' || data['course_number'] instanceof String)) {
            throw new Error("Expected the field `course_number` to be a primitive type in the JSON string but got " + data['course_number']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_modified'] && !(typeof data['last_modified'] === 'string' || data['last_modified'] instanceof String)) {
            throw new Error("Expected the field `last_modified` to be a primitive type in the JSON string but got " + data['last_modified']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['period'] && !(typeof data['period'] === 'string' || data['period'] instanceof String)) {
            throw new Error("Expected the field `period` to be a primitive type in the JSON string but got " + data['period']);
        }
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is a string
        if (data['section_number'] && !(typeof data['section_number'] === 'string' || data['section_number'] instanceof String)) {
            throw new Error("Expected the field `section_number` to be a primitive type in the JSON string but got " + data['section_number']);
        }
        // ensure the json data is a string
        if (data['sis_id'] && !(typeof data['sis_id'] === 'string' || data['sis_id'] instanceof String)) {
            throw new Error("Expected the field `sis_id` to be a primitive type in the JSON string but got " + data['sis_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['students'])) {
            throw new Error("Expected the field `students` to be an array in the JSON data but got " + data['students']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['teacher'] && !(typeof data['teacher'] === 'string' || data['teacher'] instanceof String)) {
            throw new Error("Expected the field `teacher` to be a primitive type in the JSON string but got " + data['teacher']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teachers'])) {
            throw new Error("Expected the field `teachers` to be an array in the JSON data but got " + data['teachers']);
        }
        // validate the optional field `term`
        if (data['term']) { // data not null
          Term.validateJSON(data['term']);
        }

        return true;
    }


}



/**
 * @member {String} course_description
 */
Section.prototype['course_description'] = undefined;

/**
 * @member {String} course_name
 */
Section.prototype['course_name'] = undefined;

/**
 * @member {String} course_number
 */
Section.prototype['course_number'] = undefined;

/**
 * @member {String} created
 */
Section.prototype['created'] = undefined;

/**
 * @member {String} district
 */
Section.prototype['district'] = undefined;

/**
 * @member {module:model/Section.GradeEnum} grade
 */
Section.prototype['grade'] = undefined;

/**
 * @member {String} id
 */
Section.prototype['id'] = undefined;

/**
 * @member {String} last_modified
 */
Section.prototype['last_modified'] = undefined;

/**
 * @member {String} name
 */
Section.prototype['name'] = undefined;

/**
 * @member {String} period
 */
Section.prototype['period'] = undefined;

/**
 * @member {String} school
 */
Section.prototype['school'] = undefined;

/**
 * @member {String} section_number
 */
Section.prototype['section_number'] = undefined;

/**
 * @member {String} sis_id
 */
Section.prototype['sis_id'] = undefined;

/**
 * @member {Array.<String>} students
 */
Section.prototype['students'] = undefined;

/**
 * @member {module:model/Section.SubjectEnum} subject
 */
Section.prototype['subject'] = undefined;

/**
 * @member {String} teacher
 */
Section.prototype['teacher'] = undefined;

/**
 * @member {Array.<String>} teachers
 */
Section.prototype['teachers'] = undefined;

/**
 * @member {module:model/Term} term
 */
Section.prototype['term'] = undefined;





/**
 * Allowed values for the <code>grade</code> property.
 * @enum {String}
 * @readonly
 */
Section['GradeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7",

    /**
     * value: "8"
     * @const
     */
    "8": "8",

    /**
     * value: "9"
     * @const
     */
    "9": "9",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12",

    /**
     * value: "PreKindergarten"
     * @const
     */
    "PreKindergarten": "PreKindergarten",

    /**
     * value: "Kindergarten"
     * @const
     */
    "Kindergarten": "Kindergarten",

    /**
     * value: "PostGraduate"
     * @const
     */
    "PostGraduate": "PostGraduate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>subject</code> property.
 * @enum {String}
 * @readonly
 */
Section['SubjectEnum'] = {

    /**
     * value: "english/language arts"
     * @const
     */
    "english/language arts": "english/language arts",

    /**
     * value: "math"
     * @const
     */
    "math": "math",

    /**
     * value: "science"
     * @const
     */
    "science": "science",

    /**
     * value: "social studies"
     * @const
     */
    "social studies": "social studies",

    /**
     * value: "language"
     * @const
     */
    "language": "language",

    /**
     * value: "homeroom/advisory"
     * @const
     */
    "homeroom/advisory": "homeroom/advisory",

    /**
     * value: "interventions/online learning"
     * @const
     */
    "interventions/online learning": "interventions/online learning",

    /**
     * value: "technology and engineering"
     * @const
     */
    "technology and engineering": "technology and engineering",

    /**
     * value: "PE and health"
     * @const
     */
    "PE and health": "PE and health",

    /**
     * value: "arts and music"
     * @const
     */
    "arts and music": "arts and music",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Section;

