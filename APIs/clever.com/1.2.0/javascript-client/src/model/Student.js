/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Credentials from './Credentials';
import Location from './Location';
import Name from './Name';

/**
 * The Student model module.
 * @module model/Student
 * @version 1.2.0
 */
class Student {
    /**
     * Constructs a new <code>Student</code>.
     * @alias module:model/Student
     */
    constructor() { 
        
        Student.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Student</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Student} obj Optional instance to populate.
     * @return {module:model/Student} The populated <code>Student</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Student();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = Credentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'String');
            }
            if (data.hasOwnProperty('ell_status')) {
                obj['ell_status'] = ApiClient.convertToType(data['ell_status'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('graduation_year')) {
                obj['graduation_year'] = ApiClient.convertToType(data['graduation_year'], 'String');
            }
            if (data.hasOwnProperty('hispanic_ethnicity')) {
                obj['hispanic_ethnicity'] = ApiClient.convertToType(data['hispanic_ethnicity'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_modified')) {
                obj['last_modified'] = ApiClient.convertToType(data['last_modified'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('race')) {
                obj['race'] = ApiClient.convertToType(data['race'], 'String');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('schools')) {
                obj['schools'] = ApiClient.convertToType(data['schools'], ['String']);
            }
            if (data.hasOwnProperty('sis_id')) {
                obj['sis_id'] = ApiClient.convertToType(data['sis_id'], 'String');
            }
            if (data.hasOwnProperty('state_id')) {
                obj['state_id'] = ApiClient.convertToType(data['state_id'], 'String');
            }
            if (data.hasOwnProperty('student_number')) {
                obj['student_number'] = ApiClient.convertToType(data['student_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Student</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Student</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          Credentials.validateJSON(data['credentials']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['dob'] && !(typeof data['dob'] === 'string' || data['dob'] instanceof String)) {
            throw new Error("Expected the field `dob` to be a primitive type in the JSON string but got " + data['dob']);
        }
        // ensure the json data is a string
        if (data['ell_status'] && !(typeof data['ell_status'] === 'string' || data['ell_status'] instanceof String)) {
            throw new Error("Expected the field `ell_status` to be a primitive type in the JSON string but got " + data['ell_status']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // ensure the json data is a string
        if (data['graduation_year'] && !(typeof data['graduation_year'] === 'string' || data['graduation_year'] instanceof String)) {
            throw new Error("Expected the field `graduation_year` to be a primitive type in the JSON string but got " + data['graduation_year']);
        }
        // ensure the json data is a string
        if (data['hispanic_ethnicity'] && !(typeof data['hispanic_ethnicity'] === 'string' || data['hispanic_ethnicity'] instanceof String)) {
            throw new Error("Expected the field `hispanic_ethnicity` to be a primitive type in the JSON string but got " + data['hispanic_ethnicity']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_modified'] && !(typeof data['last_modified'] === 'string' || data['last_modified'] instanceof String)) {
            throw new Error("Expected the field `last_modified` to be a primitive type in the JSON string but got " + data['last_modified']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['race'] && !(typeof data['race'] === 'string' || data['race'] instanceof String)) {
            throw new Error("Expected the field `race` to be a primitive type in the JSON string but got " + data['race']);
        }
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schools'])) {
            throw new Error("Expected the field `schools` to be an array in the JSON data but got " + data['schools']);
        }
        // ensure the json data is a string
        if (data['sis_id'] && !(typeof data['sis_id'] === 'string' || data['sis_id'] instanceof String)) {
            throw new Error("Expected the field `sis_id` to be a primitive type in the JSON string but got " + data['sis_id']);
        }
        // ensure the json data is a string
        if (data['state_id'] && !(typeof data['state_id'] === 'string' || data['state_id'] instanceof String)) {
            throw new Error("Expected the field `state_id` to be a primitive type in the JSON string but got " + data['state_id']);
        }
        // ensure the json data is a string
        if (data['student_number'] && !(typeof data['student_number'] === 'string' || data['student_number'] instanceof String)) {
            throw new Error("Expected the field `student_number` to be a primitive type in the JSON string but got " + data['student_number']);
        }

        return true;
    }


}



/**
 * @member {String} created
 */
Student.prototype['created'] = undefined;

/**
 * @member {module:model/Credentials} credentials
 */
Student.prototype['credentials'] = undefined;

/**
 * @member {String} district
 */
Student.prototype['district'] = undefined;

/**
 * @member {String} dob
 */
Student.prototype['dob'] = undefined;

/**
 * @member {module:model/Student.EllStatusEnum} ell_status
 */
Student.prototype['ell_status'] = undefined;

/**
 * @member {String} email
 */
Student.prototype['email'] = undefined;

/**
 * @member {module:model/Student.GenderEnum} gender
 */
Student.prototype['gender'] = undefined;

/**
 * @member {module:model/Student.GradeEnum} grade
 */
Student.prototype['grade'] = undefined;

/**
 * @member {String} graduation_year
 */
Student.prototype['graduation_year'] = undefined;

/**
 * @member {module:model/Student.HispanicEthnicityEnum} hispanic_ethnicity
 */
Student.prototype['hispanic_ethnicity'] = undefined;

/**
 * @member {String} id
 */
Student.prototype['id'] = undefined;

/**
 * @member {String} last_modified
 */
Student.prototype['last_modified'] = undefined;

/**
 * @member {module:model/Location} location
 */
Student.prototype['location'] = undefined;

/**
 * @member {module:model/Name} name
 */
Student.prototype['name'] = undefined;

/**
 * @member {module:model/Student.RaceEnum} race
 */
Student.prototype['race'] = undefined;

/**
 * @member {String} school
 */
Student.prototype['school'] = undefined;

/**
 * @member {Array.<String>} schools
 */
Student.prototype['schools'] = undefined;

/**
 * @member {String} sis_id
 */
Student.prototype['sis_id'] = undefined;

/**
 * @member {String} state_id
 */
Student.prototype['state_id'] = undefined;

/**
 * @member {String} student_number
 */
Student.prototype['student_number'] = undefined;





/**
 * Allowed values for the <code>ell_status</code> property.
 * @enum {String}
 * @readonly
 */
Student['EllStatusEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Student['GenderEnum'] = {

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>grade</code> property.
 * @enum {String}
 * @readonly
 */
Student['GradeEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7",

    /**
     * value: "8"
     * @const
     */
    "8": "8",

    /**
     * value: "9"
     * @const
     */
    "9": "9",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12",

    /**
     * value: "PreKindergarten"
     * @const
     */
    "PreKindergarten": "PreKindergarten",

    /**
     * value: "Kindergarten"
     * @const
     */
    "Kindergarten": "Kindergarten",

    /**
     * value: "PostGraduate"
     * @const
     */
    "PostGraduate": "PostGraduate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>hispanic_ethnicity</code> property.
 * @enum {String}
 * @readonly
 */
Student['HispanicEthnicityEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>race</code> property.
 * @enum {String}
 * @readonly
 */
Student['RaceEnum'] = {

    /**
     * value: "Caucasian"
     * @const
     */
    "Caucasian": "Caucasian",

    /**
     * value: "Asian"
     * @const
     */
    "Asian": "Asian",

    /**
     * value: "Black or African American"
     * @const
     */
    "Black or African American": "Black or African American",

    /**
     * value: "American Indian"
     * @const
     */
    "American Indian": "American Indian",

    /**
     * value: "Hawaiian or Other Pacific Islander"
     * @const
     */
    "Hawaiian or Other Pacific Islander": "Hawaiian or Other Pacific Islander",

    /**
     * value: "Two or More Races"
     * @const
     */
    "Two or More Races": "Two or More Races",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};



export default Student;

