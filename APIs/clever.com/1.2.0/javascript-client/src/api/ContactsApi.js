/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistrictResponse from '../model/DistrictResponse';
import NotFound from '../model/NotFound';
import StudentContactResponse from '../model/StudentContactResponse';
import StudentContactsResponse from '../model/StudentContactsResponse';
import StudentResponse from '../model/StudentResponse';

/**
* Contacts service.
* @module api/ContactsApi
* @version 1.2.0
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/ContactsApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific student contact
     * @param {String} id 
     * @param {module:api/ContactsApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentContactResponse}
     */
    getContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentContactResponse;
      return this.apiClient.callApi(
        '/contacts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/ContactsApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentContactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of student contacts
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/ContactsApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentContactsResponse}
     */
    getContacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentContactsResponse;
      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictForStudentContact operation.
     * @callback module:api/ContactsApi~getDistrictForStudentContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistrictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the district for a student contact
     * @param {String} id 
     * @param {module:api/ContactsApi~getDistrictForStudentContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistrictResponse}
     */
    getDistrictForStudentContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistrictForStudentContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistrictResponse;
      return this.apiClient.callApi(
        '/contacts/{id}/district', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudentForContact operation.
     * @callback module:api/ContactsApi~getStudentForContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the student for a student contact
     * @param {String} id 
     * @param {module:api/ContactsApi~getStudentForContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentResponse}
     */
    getStudentForContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStudentForContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentResponse;
      return this.apiClient.callApi(
        '/contacts/{id}/student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
