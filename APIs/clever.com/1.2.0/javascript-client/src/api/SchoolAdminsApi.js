/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotFound from '../model/NotFound';
import SchoolAdminResponse from '../model/SchoolAdminResponse';
import SchoolAdminsResponse from '../model/SchoolAdminsResponse';
import SchoolsResponse from '../model/SchoolsResponse';

/**
* SchoolAdmins service.
* @module api/SchoolAdminsApi
* @version 1.2.0
*/
export default class SchoolAdminsApi {

    /**
    * Constructs a new SchoolAdminsApi. 
    * @alias module:api/SchoolAdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSchoolAdmin operation.
     * @callback module:api/SchoolAdminsApi~getSchoolAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchoolAdminResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific school admin
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [include] 
     * @param {module:api/SchoolAdminsApi~getSchoolAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchoolAdminResponse}
     */
    getSchoolAdmin(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchoolAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchoolAdminResponse;
      return this.apiClient.callApi(
        '/school_admins/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchoolAdmins operation.
     * @callback module:api/SchoolAdminsApi~getSchoolAdminsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchoolAdminsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of school admins
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {String} [where] 
     * @param {module:api/SchoolAdminsApi~getSchoolAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchoolAdminsResponse}
     */
    getSchoolAdmins(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore'],
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchoolAdminsResponse;
      return this.apiClient.callApi(
        '/school_admins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchoolsForSchoolAdmin operation.
     * @callback module:api/SchoolAdminsApi~getSchoolsForSchoolAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchoolsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the schools for a school admin
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/SchoolAdminsApi~getSchoolsForSchoolAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchoolsResponse}
     */
    getSchoolsForSchoolAdmin(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchoolsForSchoolAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchoolsResponse;
      return this.apiClient.callApi(
        '/school_admins/{id}/schools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
