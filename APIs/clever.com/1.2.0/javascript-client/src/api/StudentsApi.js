/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistrictResponse from '../model/DistrictResponse';
import NotFound from '../model/NotFound';
import SchoolResponse from '../model/SchoolResponse';
import SectionsResponse from '../model/SectionsResponse';
import StudentContactsForStudentResponse from '../model/StudentContactsForStudentResponse';
import StudentResponse from '../model/StudentResponse';
import StudentsResponse from '../model/StudentsResponse';
import TeachersResponse from '../model/TeachersResponse';

/**
* Students service.
* @module api/StudentsApi
* @version 1.2.0
*/
export default class StudentsApi {

    /**
    * Constructs a new StudentsApi. 
    * @alias module:api/StudentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContactsForStudent operation.
     * @callback module:api/StudentsApi~getContactsForStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentContactsForStudentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the contacts for a student
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {module:api/StudentsApi~getContactsForStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentContactsForStudentResponse}
     */
    getContactsForStudent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContactsForStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentContactsForStudentResponse;
      return this.apiClient.callApi(
        '/students/{id}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistrictForStudent operation.
     * @callback module:api/StudentsApi~getDistrictForStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistrictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the district for a student
     * @param {String} id 
     * @param {module:api/StudentsApi~getDistrictForStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistrictResponse}
     */
    getDistrictForStudent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistrictForStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistrictResponse;
      return this.apiClient.callApi(
        '/students/{id}/district', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchoolForStudent operation.
     * @callback module:api/StudentsApi~getSchoolForStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchoolResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the primary school for a student
     * @param {String} id 
     * @param {module:api/StudentsApi~getSchoolForStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchoolResponse}
     */
    getSchoolForStudent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchoolForStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchoolResponse;
      return this.apiClient.callApi(
        '/students/{id}/school', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectionsForStudent operation.
     * @callback module:api/StudentsApi~getSectionsForStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the sections for a student
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/StudentsApi~getSectionsForStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SectionsResponse}
     */
    getSectionsForStudent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSectionsForStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectionsResponse;
      return this.apiClient.callApi(
        '/students/{id}/sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudent operation.
     * @callback module:api/StudentsApi~getStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific student
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [include] 
     * @param {module:api/StudentsApi~getStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentResponse}
     */
    getStudent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentResponse;
      return this.apiClient.callApi(
        '/students/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudents operation.
     * @callback module:api/StudentsApi~getStudentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of students
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {String} [where] 
     * @param {module:api/StudentsApi~getStudentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentsResponse}
     */
    getStudents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore'],
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentsResponse;
      return this.apiClient.callApi(
        '/students', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeachersForStudent operation.
     * @callback module:api/StudentsApi~getTeachersForStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeachersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the teachers for a student
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/StudentsApi~getTeachersForStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeachersResponse}
     */
    getTeachersForStudent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeachersForStudent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeachersResponse;
      return this.apiClient.callApi(
        '/students/{id}/teachers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
