/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistrictResponse from '../model/DistrictResponse';
import GradeLevelsResponse from '../model/GradeLevelsResponse';
import NotFound from '../model/NotFound';
import SchoolResponse from '../model/SchoolResponse';
import SectionsResponse from '../model/SectionsResponse';
import StudentsResponse from '../model/StudentsResponse';
import TeacherResponse from '../model/TeacherResponse';
import TeachersResponse from '../model/TeachersResponse';

/**
* Teachers service.
* @module api/TeachersApi
* @version 1.2.0
*/
export default class TeachersApi {

    /**
    * Constructs a new TeachersApi. 
    * @alias module:api/TeachersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistrictForTeacher operation.
     * @callback module:api/TeachersApi~getDistrictForTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistrictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the district for a teacher
     * @param {String} id 
     * @param {module:api/TeachersApi~getDistrictForTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistrictResponse}
     */
    getDistrictForTeacher(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistrictForTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistrictResponse;
      return this.apiClient.callApi(
        '/teachers/{id}/district', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGradeLevelsForTeacher operation.
     * @callback module:api/TeachersApi~getGradeLevelsForTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GradeLevelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the grade levels for sections a teacher teaches
     * @param {String} id 
     * @param {module:api/TeachersApi~getGradeLevelsForTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GradeLevelsResponse}
     */
    getGradeLevelsForTeacher(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGradeLevelsForTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GradeLevelsResponse;
      return this.apiClient.callApi(
        '/teachers/{id}/grade_levels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchoolForTeacher operation.
     * @callback module:api/TeachersApi~getSchoolForTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchoolResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves school info for a teacher.
     * @param {String} id 
     * @param {module:api/TeachersApi~getSchoolForTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchoolResponse}
     */
    getSchoolForTeacher(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchoolForTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchoolResponse;
      return this.apiClient.callApi(
        '/teachers/{id}/school', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectionsForTeacher operation.
     * @callback module:api/TeachersApi~getSectionsForTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the sections for a teacher
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/TeachersApi~getSectionsForTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SectionsResponse}
     */
    getSectionsForTeacher(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSectionsForTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectionsResponse;
      return this.apiClient.callApi(
        '/teachers/{id}/sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudentsForTeacher operation.
     * @callback module:api/TeachersApi~getStudentsForTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the students for a teacher
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {module:api/TeachersApi~getStudentsForTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentsResponse}
     */
    getStudentsForTeacher(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStudentsForTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentsResponse;
      return this.apiClient.callApi(
        '/teachers/{id}/students', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeacher operation.
     * @callback module:api/TeachersApi~getTeacherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeacherResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific teacher
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [include] 
     * @param {module:api/TeachersApi~getTeacherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeacherResponse}
     */
    getTeacher(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeacher");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeacherResponse;
      return this.apiClient.callApi(
        '/teachers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeachers operation.
     * @callback module:api/TeachersApi~getTeachersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeachersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of teachers
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [startingAfter] 
     * @param {String} [endingBefore] 
     * @param {String} [where] 
     * @param {module:api/TeachersApi~getTeachersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeachersResponse}
     */
    getTeachers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'starting_after': opts['startingAfter'],
        'ending_before': opts['endingBefore'],
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeachersResponse;
      return this.apiClient.callApi(
        '/teachers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
