/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DistrictResponse;
import org.openapitools.client.model.GradeLevelsResponse;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.SchoolResponse;
import org.openapitools.client.model.SectionsResponse;
import org.openapitools.client.model.StudentsResponse;
import org.openapitools.client.model.TeacherResponse;
import org.openapitools.client.model.TeachersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeachersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeachersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeachersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDistrictForTeacher
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistrictForTeacherCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}/district"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistrictForTeacherValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistrictForTeacher(Async)");
        }

        return getDistrictForTeacherCall(id, _callback);

    }

    /**
     * 
     * Returns the district for a teacher
     * @param id  (required)
     * @return DistrictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DistrictResponse getDistrictForTeacher(String id) throws ApiException {
        ApiResponse<DistrictResponse> localVarResp = getDistrictForTeacherWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the district for a teacher
     * @param id  (required)
     * @return ApiResponse&lt;DistrictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistrictResponse> getDistrictForTeacherWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDistrictForTeacherValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DistrictResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the district for a teacher
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistrictForTeacherAsync(String id, final ApiCallback<DistrictResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistrictForTeacherValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DistrictResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGradeLevelsForTeacher
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGradeLevelsForTeacherCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}/grade_levels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGradeLevelsForTeacherValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGradeLevelsForTeacher(Async)");
        }

        return getGradeLevelsForTeacherCall(id, _callback);

    }

    /**
     * 
     * Returns the grade levels for sections a teacher teaches
     * @param id  (required)
     * @return GradeLevelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GradeLevelsResponse getGradeLevelsForTeacher(String id) throws ApiException {
        ApiResponse<GradeLevelsResponse> localVarResp = getGradeLevelsForTeacherWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the grade levels for sections a teacher teaches
     * @param id  (required)
     * @return ApiResponse&lt;GradeLevelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GradeLevelsResponse> getGradeLevelsForTeacherWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getGradeLevelsForTeacherValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GradeLevelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the grade levels for sections a teacher teaches
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGradeLevelsForTeacherAsync(String id, final ApiCallback<GradeLevelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGradeLevelsForTeacherValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GradeLevelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchoolForTeacher
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolForTeacherCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}/school"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchoolForTeacherValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchoolForTeacher(Async)");
        }

        return getSchoolForTeacherCall(id, _callback);

    }

    /**
     * 
     * Retrieves school info for a teacher.
     * @param id  (required)
     * @return SchoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SchoolResponse getSchoolForTeacher(String id) throws ApiException {
        ApiResponse<SchoolResponse> localVarResp = getSchoolForTeacherWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves school info for a teacher.
     * @param id  (required)
     * @return ApiResponse&lt;SchoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchoolResponse> getSchoolForTeacherWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSchoolForTeacherValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SchoolResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves school info for a teacher.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolForTeacherAsync(String id, final ApiCallback<SchoolResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchoolForTeacherValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SchoolResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSectionsForTeacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSectionsForTeacherCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}/sections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSectionsForTeacherValidateBeforeCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSectionsForTeacher(Async)");
        }

        return getSectionsForTeacherCall(id, limit, startingAfter, endingBefore, _callback);

    }

    /**
     * 
     * Returns the sections for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return SectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SectionsResponse getSectionsForTeacher(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<SectionsResponse> localVarResp = getSectionsForTeacherWithHttpInfo(id, limit, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the sections for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return ApiResponse&lt;SectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SectionsResponse> getSectionsForTeacherWithHttpInfo(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getSectionsForTeacherValidateBeforeCall(id, limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<SectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the sections for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSectionsForTeacherAsync(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback<SectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSectionsForTeacherValidateBeforeCall(id, limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<SectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStudentsForTeacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudentsForTeacherCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}/students"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStudentsForTeacherValidateBeforeCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStudentsForTeacher(Async)");
        }

        return getStudentsForTeacherCall(id, limit, startingAfter, endingBefore, _callback);

    }

    /**
     * 
     * Returns the students for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return StudentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StudentsResponse getStudentsForTeacher(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<StudentsResponse> localVarResp = getStudentsForTeacherWithHttpInfo(id, limit, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the students for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return ApiResponse&lt;StudentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StudentsResponse> getStudentsForTeacherWithHttpInfo(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getStudentsForTeacherValidateBeforeCall(id, limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<StudentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the students for a teacher
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudentsForTeacherAsync(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback<StudentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStudentsForTeacherValidateBeforeCall(id, limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<StudentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeacher
     * @param id  (required)
     * @param include  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeacherCall(String id, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeacherValidateBeforeCall(String id, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTeacher(Async)");
        }

        return getTeacherCall(id, include, _callback);

    }

    /**
     * 
     * Returns a specific teacher
     * @param id  (required)
     * @param include  (optional)
     * @return TeacherResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TeacherResponse getTeacher(String id, String include) throws ApiException {
        ApiResponse<TeacherResponse> localVarResp = getTeacherWithHttpInfo(id, include);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a specific teacher
     * @param id  (required)
     * @param include  (optional)
     * @return ApiResponse&lt;TeacherResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeacherResponse> getTeacherWithHttpInfo(String id, String include) throws ApiException {
        okhttp3.Call localVarCall = getTeacherValidateBeforeCall(id, include, null);
        Type localVarReturnType = new TypeToken<TeacherResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a specific teacher
     * @param id  (required)
     * @param include  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeacherAsync(String id, String include, final ApiCallback<TeacherResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeacherValidateBeforeCall(id, include, _callback);
        Type localVarReturnType = new TypeToken<TeacherResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeachers
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeachersCall(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teachers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeachersValidateBeforeCall(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback _callback) throws ApiException {
        return getTeachersCall(limit, startingAfter, endingBefore, where, _callback);

    }

    /**
     * 
     * Returns a list of teachers
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @return TeachersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public TeachersResponse getTeachers(Integer limit, String startingAfter, String endingBefore, String where) throws ApiException {
        ApiResponse<TeachersResponse> localVarResp = getTeachersWithHttpInfo(limit, startingAfter, endingBefore, where);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of teachers
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @return ApiResponse&lt;TeachersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeachersResponse> getTeachersWithHttpInfo(Integer limit, String startingAfter, String endingBefore, String where) throws ApiException {
        okhttp3.Call localVarCall = getTeachersValidateBeforeCall(limit, startingAfter, endingBefore, where, null);
        Type localVarReturnType = new TypeToken<TeachersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of teachers
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeachersAsync(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback<TeachersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeachersValidateBeforeCall(limit, startingAfter, endingBefore, where, _callback);
        Type localVarReturnType = new TypeToken<TeachersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
