/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Principal;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * School
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:00.989992-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class School {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  /**
   * Gets or Sets highGrade
   */
  @JsonAdapter(HighGradeEnum.Adapter.class)
  public enum HighGradeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    PRE_KINDERGARTEN("PreKindergarten"),
    
    KINDERGARTEN("Kindergarten"),
    
    POST_GRADUATE("PostGraduate"),
    
    OTHER("Other");

    private String value;

    HighGradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighGradeEnum fromValue(String value) {
      for (HighGradeEnum b : HighGradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HighGradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighGradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighGradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighGradeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighGradeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGH_GRADE = "high_grade";
  @SerializedName(SERIALIZED_NAME_HIGH_GRADE)
  private HighGradeEnum highGrade;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  /**
   * Gets or Sets lowGrade
   */
  @JsonAdapter(LowGradeEnum.Adapter.class)
  public enum LowGradeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    PRE_KINDERGARTEN("PreKindergarten"),
    
    KINDERGARTEN("Kindergarten"),
    
    POST_GRADUATE("PostGraduate"),
    
    OTHER("Other");

    private String value;

    LowGradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LowGradeEnum fromValue(String value) {
      for (LowGradeEnum b : LowGradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LowGradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LowGradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LowGradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LowGradeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LowGradeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOW_GRADE = "low_grade";
  @SerializedName(SERIALIZED_NAME_LOW_GRADE)
  private LowGradeEnum lowGrade;

  public static final String SERIALIZED_NAME_MDR_NUMBER = "mdr_number";
  @SerializedName(SERIALIZED_NAME_MDR_NUMBER)
  private String mdrNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NCES_ID = "nces_id";
  @SerializedName(SERIALIZED_NAME_NCES_ID)
  private String ncesId;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private Principal principal;

  public static final String SERIALIZED_NAME_SCHOOL_NUMBER = "school_number";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NUMBER)
  private String schoolNumber;

  public static final String SERIALIZED_NAME_SIS_ID = "sis_id";
  @SerializedName(SERIALIZED_NAME_SIS_ID)
  private String sisId;

  public static final String SERIALIZED_NAME_STATE_ID = "state_id";
  @SerializedName(SERIALIZED_NAME_STATE_ID)
  private String stateId;

  public School() {
  }

  public School created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public School district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public School highGrade(HighGradeEnum highGrade) {
    this.highGrade = highGrade;
    return this;
  }

  /**
   * Get highGrade
   * @return highGrade
   */
  @javax.annotation.Nullable
  public HighGradeEnum getHighGrade() {
    return highGrade;
  }

  public void setHighGrade(HighGradeEnum highGrade) {
    this.highGrade = highGrade;
  }


  public School id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public School lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public School location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public School lowGrade(LowGradeEnum lowGrade) {
    this.lowGrade = lowGrade;
    return this;
  }

  /**
   * Get lowGrade
   * @return lowGrade
   */
  @javax.annotation.Nullable
  public LowGradeEnum getLowGrade() {
    return lowGrade;
  }

  public void setLowGrade(LowGradeEnum lowGrade) {
    this.lowGrade = lowGrade;
  }


  public School mdrNumber(String mdrNumber) {
    this.mdrNumber = mdrNumber;
    return this;
  }

  /**
   * Get mdrNumber
   * @return mdrNumber
   */
  @javax.annotation.Nullable
  public String getMdrNumber() {
    return mdrNumber;
  }

  public void setMdrNumber(String mdrNumber) {
    this.mdrNumber = mdrNumber;
  }


  public School name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public School ncesId(String ncesId) {
    this.ncesId = ncesId;
    return this;
  }

  /**
   * Get ncesId
   * @return ncesId
   */
  @javax.annotation.Nullable
  public String getNcesId() {
    return ncesId;
  }

  public void setNcesId(String ncesId) {
    this.ncesId = ncesId;
  }


  public School phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public School principal(Principal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public Principal getPrincipal() {
    return principal;
  }

  public void setPrincipal(Principal principal) {
    this.principal = principal;
  }


  public School schoolNumber(String schoolNumber) {
    this.schoolNumber = schoolNumber;
    return this;
  }

  /**
   * Get schoolNumber
   * @return schoolNumber
   */
  @javax.annotation.Nullable
  public String getSchoolNumber() {
    return schoolNumber;
  }

  public void setSchoolNumber(String schoolNumber) {
    this.schoolNumber = schoolNumber;
  }


  public School sisId(String sisId) {
    this.sisId = sisId;
    return this;
  }

  /**
   * Get sisId
   * @return sisId
   */
  @javax.annotation.Nullable
  public String getSisId() {
    return sisId;
  }

  public void setSisId(String sisId) {
    this.sisId = sisId;
  }


  public School stateId(String stateId) {
    this.stateId = stateId;
    return this;
  }

  /**
   * Get stateId
   * @return stateId
   */
  @javax.annotation.Nullable
  public String getStateId() {
    return stateId;
  }

  public void setStateId(String stateId) {
    this.stateId = stateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    School school = (School) o;
    return Objects.equals(this.created, school.created) &&
        Objects.equals(this.district, school.district) &&
        Objects.equals(this.highGrade, school.highGrade) &&
        Objects.equals(this.id, school.id) &&
        Objects.equals(this.lastModified, school.lastModified) &&
        Objects.equals(this.location, school.location) &&
        Objects.equals(this.lowGrade, school.lowGrade) &&
        Objects.equals(this.mdrNumber, school.mdrNumber) &&
        Objects.equals(this.name, school.name) &&
        Objects.equals(this.ncesId, school.ncesId) &&
        Objects.equals(this.phone, school.phone) &&
        Objects.equals(this.principal, school.principal) &&
        Objects.equals(this.schoolNumber, school.schoolNumber) &&
        Objects.equals(this.sisId, school.sisId) &&
        Objects.equals(this.stateId, school.stateId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, district, highGrade, id, lastModified, location, lowGrade, mdrNumber, name, ncesId, phone, principal, schoolNumber, sisId, stateId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class School {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    highGrade: ").append(toIndentedString(highGrade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lowGrade: ").append(toIndentedString(lowGrade)).append("\n");
    sb.append("    mdrNumber: ").append(toIndentedString(mdrNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ncesId: ").append(toIndentedString(ncesId)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    schoolNumber: ").append(toIndentedString(schoolNumber)).append("\n");
    sb.append("    sisId: ").append(toIndentedString(sisId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("district");
    openapiFields.add("high_grade");
    openapiFields.add("id");
    openapiFields.add("last_modified");
    openapiFields.add("location");
    openapiFields.add("low_grade");
    openapiFields.add("mdr_number");
    openapiFields.add("name");
    openapiFields.add("nces_id");
    openapiFields.add("phone");
    openapiFields.add("principal");
    openapiFields.add("school_number");
    openapiFields.add("sis_id");
    openapiFields.add("state_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to School
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!School.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in School is not found in the empty JSON string", School.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!School.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `School` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("high_grade") != null && !jsonObj.get("high_grade").isJsonNull()) && !jsonObj.get("high_grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `high_grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("high_grade").toString()));
      }
      // validate the optional field `high_grade`
      if (jsonObj.get("high_grade") != null && !jsonObj.get("high_grade").isJsonNull()) {
        HighGradeEnum.validateJsonElement(jsonObj.get("high_grade"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("low_grade") != null && !jsonObj.get("low_grade").isJsonNull()) && !jsonObj.get("low_grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `low_grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("low_grade").toString()));
      }
      // validate the optional field `low_grade`
      if (jsonObj.get("low_grade") != null && !jsonObj.get("low_grade").isJsonNull()) {
        LowGradeEnum.validateJsonElement(jsonObj.get("low_grade"));
      }
      if ((jsonObj.get("mdr_number") != null && !jsonObj.get("mdr_number").isJsonNull()) && !jsonObj.get("mdr_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdr_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdr_number").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nces_id") != null && !jsonObj.get("nces_id").isJsonNull()) && !jsonObj.get("nces_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nces_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nces_id").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      // validate the optional field `principal`
      if (jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) {
        Principal.validateJsonElement(jsonObj.get("principal"));
      }
      if ((jsonObj.get("school_number") != null && !jsonObj.get("school_number").isJsonNull()) && !jsonObj.get("school_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school_number").toString()));
      }
      if ((jsonObj.get("sis_id") != null && !jsonObj.get("sis_id").isJsonNull()) && !jsonObj.get("sis_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sis_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sis_id").toString()));
      }
      if ((jsonObj.get("state_id") != null && !jsonObj.get("state_id").isJsonNull()) && !jsonObj.get("state_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!School.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'School' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<School> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(School.class));

       return (TypeAdapter<T>) new TypeAdapter<School>() {
           @Override
           public void write(JsonWriter out, School value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public School read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of School given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of School
   * @throws IOException if the JSON string is invalid with respect to School
   */
  public static School fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, School.class);
  }

  /**
   * Convert an instance of School to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

