/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Name;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Student
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:00.989992-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Student {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private Credentials credentials;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  /**
   * Gets or Sets ellStatus
   */
  @JsonAdapter(EllStatusEnum.Adapter.class)
  public enum EllStatusEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    EllStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EllStatusEnum fromValue(String value) {
      for (EllStatusEnum b : EllStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EllStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EllStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EllStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EllStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EllStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELL_STATUS = "ell_status";
  @SerializedName(SERIALIZED_NAME_ELL_STATUS)
  private EllStatusEnum ellStatus;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    M("M"),
    
    F("F"),
    
    EMPTY("");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  /**
   * Gets or Sets grade
   */
  @JsonAdapter(GradeEnum.Adapter.class)
  public enum GradeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    PRE_KINDERGARTEN("PreKindergarten"),
    
    KINDERGARTEN("Kindergarten"),
    
    POST_GRADUATE("PostGraduate"),
    
    OTHER("Other");

    private String value;

    GradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeEnum fromValue(String value) {
      for (GradeEnum b : GradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GradeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private GradeEnum grade;

  public static final String SERIALIZED_NAME_GRADUATION_YEAR = "graduation_year";
  @SerializedName(SERIALIZED_NAME_GRADUATION_YEAR)
  private String graduationYear;

  /**
   * Gets or Sets hispanicEthnicity
   */
  @JsonAdapter(HispanicEthnicityEnum.Adapter.class)
  public enum HispanicEthnicityEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    HispanicEthnicityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HispanicEthnicityEnum fromValue(String value) {
      for (HispanicEthnicityEnum b : HispanicEthnicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HispanicEthnicityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HispanicEthnicityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HispanicEthnicityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HispanicEthnicityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HispanicEthnicityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HISPANIC_ETHNICITY = "hispanic_ethnicity";
  @SerializedName(SERIALIZED_NAME_HISPANIC_ETHNICITY)
  private HispanicEthnicityEnum hispanicEthnicity;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  /**
   * Gets or Sets race
   */
  @JsonAdapter(RaceEnum.Adapter.class)
  public enum RaceEnum {
    CAUCASIAN("Caucasian"),
    
    ASIAN("Asian"),
    
    BLACK_OR_AFRICAN_AMERICAN("Black or African American"),
    
    AMERICAN_INDIAN("American Indian"),
    
    HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER("Hawaiian or Other Pacific Islander"),
    
    TWO_OR_MORE_RACES("Two or More Races"),
    
    UNKNOWN("Unknown"),
    
    EMPTY("");

    private String value;

    RaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaceEnum fromValue(String value) {
      for (RaceEnum b : RaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RACE = "race";
  @SerializedName(SERIALIZED_NAME_RACE)
  private RaceEnum race;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_SCHOOLS = "schools";
  @SerializedName(SERIALIZED_NAME_SCHOOLS)
  private List<String> schools = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIS_ID = "sis_id";
  @SerializedName(SERIALIZED_NAME_SIS_ID)
  private String sisId;

  public static final String SERIALIZED_NAME_STATE_ID = "state_id";
  @SerializedName(SERIALIZED_NAME_STATE_ID)
  private String stateId;

  public static final String SERIALIZED_NAME_STUDENT_NUMBER = "student_number";
  @SerializedName(SERIALIZED_NAME_STUDENT_NUMBER)
  private String studentNumber;

  public Student() {
  }

  public Student created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Student credentials(Credentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public Credentials getCredentials() {
    return credentials;
  }

  public void setCredentials(Credentials credentials) {
    this.credentials = credentials;
  }


  public Student district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public Student dob(String dob) {
    this.dob = dob;
    return this;
  }

  /**
   * Get dob
   * @return dob
   */
  @javax.annotation.Nullable
  public String getDob() {
    return dob;
  }

  public void setDob(String dob) {
    this.dob = dob;
  }


  public Student ellStatus(EllStatusEnum ellStatus) {
    this.ellStatus = ellStatus;
    return this;
  }

  /**
   * Get ellStatus
   * @return ellStatus
   */
  @javax.annotation.Nullable
  public EllStatusEnum getEllStatus() {
    return ellStatus;
  }

  public void setEllStatus(EllStatusEnum ellStatus) {
    this.ellStatus = ellStatus;
  }


  public Student email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Student gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Student grade(GradeEnum grade) {
    this.grade = grade;
    return this;
  }

  /**
   * Get grade
   * @return grade
   */
  @javax.annotation.Nullable
  public GradeEnum getGrade() {
    return grade;
  }

  public void setGrade(GradeEnum grade) {
    this.grade = grade;
  }


  public Student graduationYear(String graduationYear) {
    this.graduationYear = graduationYear;
    return this;
  }

  /**
   * Get graduationYear
   * @return graduationYear
   */
  @javax.annotation.Nullable
  public String getGraduationYear() {
    return graduationYear;
  }

  public void setGraduationYear(String graduationYear) {
    this.graduationYear = graduationYear;
  }


  public Student hispanicEthnicity(HispanicEthnicityEnum hispanicEthnicity) {
    this.hispanicEthnicity = hispanicEthnicity;
    return this;
  }

  /**
   * Get hispanicEthnicity
   * @return hispanicEthnicity
   */
  @javax.annotation.Nullable
  public HispanicEthnicityEnum getHispanicEthnicity() {
    return hispanicEthnicity;
  }

  public void setHispanicEthnicity(HispanicEthnicityEnum hispanicEthnicity) {
    this.hispanicEthnicity = hispanicEthnicity;
  }


  public Student id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Student lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public Student location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Student name(Name name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }


  public Student race(RaceEnum race) {
    this.race = race;
    return this;
  }

  /**
   * Get race
   * @return race
   */
  @javax.annotation.Nullable
  public RaceEnum getRace() {
    return race;
  }

  public void setRace(RaceEnum race) {
    this.race = race;
  }


  public Student school(String school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public String getSchool() {
    return school;
  }

  public void setSchool(String school) {
    this.school = school;
  }


  public Student schools(List<String> schools) {
    this.schools = schools;
    return this;
  }

  public Student addSchoolsItem(String schoolsItem) {
    if (this.schools == null) {
      this.schools = new ArrayList<>();
    }
    this.schools.add(schoolsItem);
    return this;
  }

  /**
   * Get schools
   * @return schools
   */
  @javax.annotation.Nullable
  public List<String> getSchools() {
    return schools;
  }

  public void setSchools(List<String> schools) {
    this.schools = schools;
  }


  public Student sisId(String sisId) {
    this.sisId = sisId;
    return this;
  }

  /**
   * Get sisId
   * @return sisId
   */
  @javax.annotation.Nullable
  public String getSisId() {
    return sisId;
  }

  public void setSisId(String sisId) {
    this.sisId = sisId;
  }


  public Student stateId(String stateId) {
    this.stateId = stateId;
    return this;
  }

  /**
   * Get stateId
   * @return stateId
   */
  @javax.annotation.Nullable
  public String getStateId() {
    return stateId;
  }

  public void setStateId(String stateId) {
    this.stateId = stateId;
  }


  public Student studentNumber(String studentNumber) {
    this.studentNumber = studentNumber;
    return this;
  }

  /**
   * Get studentNumber
   * @return studentNumber
   */
  @javax.annotation.Nullable
  public String getStudentNumber() {
    return studentNumber;
  }

  public void setStudentNumber(String studentNumber) {
    this.studentNumber = studentNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Student student = (Student) o;
    return Objects.equals(this.created, student.created) &&
        Objects.equals(this.credentials, student.credentials) &&
        Objects.equals(this.district, student.district) &&
        Objects.equals(this.dob, student.dob) &&
        Objects.equals(this.ellStatus, student.ellStatus) &&
        Objects.equals(this.email, student.email) &&
        Objects.equals(this.gender, student.gender) &&
        Objects.equals(this.grade, student.grade) &&
        Objects.equals(this.graduationYear, student.graduationYear) &&
        Objects.equals(this.hispanicEthnicity, student.hispanicEthnicity) &&
        Objects.equals(this.id, student.id) &&
        Objects.equals(this.lastModified, student.lastModified) &&
        Objects.equals(this.location, student.location) &&
        Objects.equals(this.name, student.name) &&
        Objects.equals(this.race, student.race) &&
        Objects.equals(this.school, student.school) &&
        Objects.equals(this.schools, student.schools) &&
        Objects.equals(this.sisId, student.sisId) &&
        Objects.equals(this.stateId, student.stateId) &&
        Objects.equals(this.studentNumber, student.studentNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, credentials, district, dob, ellStatus, email, gender, grade, graduationYear, hispanicEthnicity, id, lastModified, location, name, race, school, schools, sisId, stateId, studentNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Student {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    ellStatus: ").append(toIndentedString(ellStatus)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    graduationYear: ").append(toIndentedString(graduationYear)).append("\n");
    sb.append("    hispanicEthnicity: ").append(toIndentedString(hispanicEthnicity)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    race: ").append(toIndentedString(race)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    schools: ").append(toIndentedString(schools)).append("\n");
    sb.append("    sisId: ").append(toIndentedString(sisId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("    studentNumber: ").append(toIndentedString(studentNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("credentials");
    openapiFields.add("district");
    openapiFields.add("dob");
    openapiFields.add("ell_status");
    openapiFields.add("email");
    openapiFields.add("gender");
    openapiFields.add("grade");
    openapiFields.add("graduation_year");
    openapiFields.add("hispanic_ethnicity");
    openapiFields.add("id");
    openapiFields.add("last_modified");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("race");
    openapiFields.add("school");
    openapiFields.add("schools");
    openapiFields.add("sis_id");
    openapiFields.add("state_id");
    openapiFields.add("student_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Student
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Student.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Student is not found in the empty JSON string", Student.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Student.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Student` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `credentials`
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        Credentials.validateJsonElement(jsonObj.get("credentials"));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("ell_status") != null && !jsonObj.get("ell_status").isJsonNull()) && !jsonObj.get("ell_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ell_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ell_status").toString()));
      }
      // validate the optional field `ell_status`
      if (jsonObj.get("ell_status") != null && !jsonObj.get("ell_status").isJsonNull()) {
        EllStatusEnum.validateJsonElement(jsonObj.get("ell_status"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) && !jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      // validate the optional field `grade`
      if (jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) {
        GradeEnum.validateJsonElement(jsonObj.get("grade"));
      }
      if ((jsonObj.get("graduation_year") != null && !jsonObj.get("graduation_year").isJsonNull()) && !jsonObj.get("graduation_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `graduation_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("graduation_year").toString()));
      }
      if ((jsonObj.get("hispanic_ethnicity") != null && !jsonObj.get("hispanic_ethnicity").isJsonNull()) && !jsonObj.get("hispanic_ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hispanic_ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hispanic_ethnicity").toString()));
      }
      // validate the optional field `hispanic_ethnicity`
      if (jsonObj.get("hispanic_ethnicity") != null && !jsonObj.get("hispanic_ethnicity").isJsonNull()) {
        HispanicEthnicityEnum.validateJsonElement(jsonObj.get("hispanic_ethnicity"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("race") != null && !jsonObj.get("race").isJsonNull()) && !jsonObj.get("race").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `race` to be a primitive type in the JSON string but got `%s`", jsonObj.get("race").toString()));
      }
      // validate the optional field `race`
      if (jsonObj.get("race") != null && !jsonObj.get("race").isJsonNull()) {
        RaceEnum.validateJsonElement(jsonObj.get("race"));
      }
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schools") != null && !jsonObj.get("schools").isJsonNull() && !jsonObj.get("schools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schools` to be an array in the JSON string but got `%s`", jsonObj.get("schools").toString()));
      }
      if ((jsonObj.get("sis_id") != null && !jsonObj.get("sis_id").isJsonNull()) && !jsonObj.get("sis_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sis_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sis_id").toString()));
      }
      if ((jsonObj.get("state_id") != null && !jsonObj.get("state_id").isJsonNull()) && !jsonObj.get("state_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_id").toString()));
      }
      if ((jsonObj.get("student_number") != null && !jsonObj.get("student_number").isJsonNull()) && !jsonObj.get("student_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `student_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("student_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Student.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Student' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Student> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Student.class));

       return (TypeAdapter<T>) new TypeAdapter<Student>() {
           @Override
           public void write(JsonWriter out, Student value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Student read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Student given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Student
   * @throws IOException if the JSON string is invalid with respect to Student
   */
  public static Student fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Student.class);
  }

  /**
   * Convert an instance of Student to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

