/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.SchoolAdminResponse;
import org.openapitools.client.model.SchoolAdminsResponse;
import org.openapitools.client.model.SchoolsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchoolAdminsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchoolAdminsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchoolAdminsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSchoolAdmin
     * @param id  (required)
     * @param include  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolAdminCall(String id, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/school_admins/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchoolAdminValidateBeforeCall(String id, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchoolAdmin(Async)");
        }

        return getSchoolAdminCall(id, include, _callback);

    }

    /**
     * 
     * Returns a specific school admin
     * @param id  (required)
     * @param include  (optional)
     * @return SchoolAdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SchoolAdminResponse getSchoolAdmin(String id, String include) throws ApiException {
        ApiResponse<SchoolAdminResponse> localVarResp = getSchoolAdminWithHttpInfo(id, include);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a specific school admin
     * @param id  (required)
     * @param include  (optional)
     * @return ApiResponse&lt;SchoolAdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchoolAdminResponse> getSchoolAdminWithHttpInfo(String id, String include) throws ApiException {
        okhttp3.Call localVarCall = getSchoolAdminValidateBeforeCall(id, include, null);
        Type localVarReturnType = new TypeToken<SchoolAdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a specific school admin
     * @param id  (required)
     * @param include  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolAdminAsync(String id, String include, final ApiCallback<SchoolAdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchoolAdminValidateBeforeCall(id, include, _callback);
        Type localVarReturnType = new TypeToken<SchoolAdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchoolAdmins
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolAdminsCall(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/school_admins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchoolAdminsValidateBeforeCall(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback _callback) throws ApiException {
        return getSchoolAdminsCall(limit, startingAfter, endingBefore, where, _callback);

    }

    /**
     * 
     * Returns a list of school admins
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @return SchoolAdminsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public SchoolAdminsResponse getSchoolAdmins(Integer limit, String startingAfter, String endingBefore, String where) throws ApiException {
        ApiResponse<SchoolAdminsResponse> localVarResp = getSchoolAdminsWithHttpInfo(limit, startingAfter, endingBefore, where);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of school admins
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @return ApiResponse&lt;SchoolAdminsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchoolAdminsResponse> getSchoolAdminsWithHttpInfo(Integer limit, String startingAfter, String endingBefore, String where) throws ApiException {
        okhttp3.Call localVarCall = getSchoolAdminsValidateBeforeCall(limit, startingAfter, endingBefore, where, null);
        Type localVarReturnType = new TypeToken<SchoolAdminsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of school admins
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param where  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolAdminsAsync(Integer limit, String startingAfter, String endingBefore, String where, final ApiCallback<SchoolAdminsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchoolAdminsValidateBeforeCall(limit, startingAfter, endingBefore, where, _callback);
        Type localVarReturnType = new TypeToken<SchoolAdminsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchoolsForSchoolAdmin
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolsForSchoolAdminCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/school_admins/{id}/schools"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchoolsForSchoolAdminValidateBeforeCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchoolsForSchoolAdmin(Async)");
        }

        return getSchoolsForSchoolAdminCall(id, limit, startingAfter, endingBefore, _callback);

    }

    /**
     * 
     * Returns the schools for a school admin
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return SchoolsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SchoolsResponse getSchoolsForSchoolAdmin(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<SchoolsResponse> localVarResp = getSchoolsForSchoolAdminWithHttpInfo(id, limit, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the schools for a school admin
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @return ApiResponse&lt;SchoolsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchoolsResponse> getSchoolsForSchoolAdminWithHttpInfo(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getSchoolsForSchoolAdminValidateBeforeCall(id, limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<SchoolsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the schools for a school admin
     * @param id  (required)
     * @param limit  (optional)
     * @param startingAfter  (optional)
     * @param endingBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchoolsForSchoolAdminAsync(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback<SchoolsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchoolsForSchoolAdminValidateBeforeCall(id, limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<SchoolsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
