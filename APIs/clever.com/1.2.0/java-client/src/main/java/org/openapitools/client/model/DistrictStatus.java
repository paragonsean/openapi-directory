/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DistrictStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:00.989992-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistrictStatus {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANT_LOGIN = "instant_login";
  @SerializedName(SERIALIZED_NAME_INSTANT_LOGIN)
  private Boolean instantLogin;

  public static final String SERIALIZED_NAME_LAST_SYNC = "last_sync";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  private String lastSync;

  public static final String SERIALIZED_NAME_LAUNCH_DATE = "launch_date";
  @SerializedName(SERIALIZED_NAME_LAUNCH_DATE)
  private String launchDate;

  public static final String SERIALIZED_NAME_PAUSE_END = "pause_end";
  @SerializedName(SERIALIZED_NAME_PAUSE_END)
  private String pauseEnd;

  public static final String SERIALIZED_NAME_PAUSE_START = "pause_start";
  @SerializedName(SERIALIZED_NAME_PAUSE_START)
  private String pauseStart;

  public static final String SERIALIZED_NAME_SIS_TYPE = "sis_type";
  @SerializedName(SERIALIZED_NAME_SIS_TYPE)
  private String sisType;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    RUNNING("running"),
    
    PENDING("pending"),
    
    ERROR("error"),
    
    PAUSED("paused");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DistrictStatus() {
  }

  public DistrictStatus error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public DistrictStatus id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DistrictStatus instantLogin(Boolean instantLogin) {
    this.instantLogin = instantLogin;
    return this;
  }

  /**
   * Get instantLogin
   * @return instantLogin
   */
  @javax.annotation.Nullable
  public Boolean getInstantLogin() {
    return instantLogin;
  }

  public void setInstantLogin(Boolean instantLogin) {
    this.instantLogin = instantLogin;
  }


  public DistrictStatus lastSync(String lastSync) {
    this.lastSync = lastSync;
    return this;
  }

  /**
   * Get lastSync
   * @return lastSync
   */
  @javax.annotation.Nullable
  public String getLastSync() {
    return lastSync;
  }

  public void setLastSync(String lastSync) {
    this.lastSync = lastSync;
  }


  public DistrictStatus launchDate(String launchDate) {
    this.launchDate = launchDate;
    return this;
  }

  /**
   * Get launchDate
   * @return launchDate
   */
  @javax.annotation.Nullable
  public String getLaunchDate() {
    return launchDate;
  }

  public void setLaunchDate(String launchDate) {
    this.launchDate = launchDate;
  }


  public DistrictStatus pauseEnd(String pauseEnd) {
    this.pauseEnd = pauseEnd;
    return this;
  }

  /**
   * Get pauseEnd
   * @return pauseEnd
   */
  @javax.annotation.Nullable
  public String getPauseEnd() {
    return pauseEnd;
  }

  public void setPauseEnd(String pauseEnd) {
    this.pauseEnd = pauseEnd;
  }


  public DistrictStatus pauseStart(String pauseStart) {
    this.pauseStart = pauseStart;
    return this;
  }

  /**
   * Get pauseStart
   * @return pauseStart
   */
  @javax.annotation.Nullable
  public String getPauseStart() {
    return pauseStart;
  }

  public void setPauseStart(String pauseStart) {
    this.pauseStart = pauseStart;
  }


  public DistrictStatus sisType(String sisType) {
    this.sisType = sisType;
    return this;
  }

  /**
   * Get sisType
   * @return sisType
   */
  @javax.annotation.Nullable
  public String getSisType() {
    return sisType;
  }

  public void setSisType(String sisType) {
    this.sisType = sisType;
  }


  public DistrictStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistrictStatus districtStatus = (DistrictStatus) o;
    return Objects.equals(this.error, districtStatus.error) &&
        Objects.equals(this.id, districtStatus.id) &&
        Objects.equals(this.instantLogin, districtStatus.instantLogin) &&
        Objects.equals(this.lastSync, districtStatus.lastSync) &&
        Objects.equals(this.launchDate, districtStatus.launchDate) &&
        Objects.equals(this.pauseEnd, districtStatus.pauseEnd) &&
        Objects.equals(this.pauseStart, districtStatus.pauseStart) &&
        Objects.equals(this.sisType, districtStatus.sisType) &&
        Objects.equals(this.state, districtStatus.state);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, id, instantLogin, lastSync, launchDate, pauseEnd, pauseStart, sisType, state);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistrictStatus {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instantLogin: ").append(toIndentedString(instantLogin)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    launchDate: ").append(toIndentedString(launchDate)).append("\n");
    sb.append("    pauseEnd: ").append(toIndentedString(pauseEnd)).append("\n");
    sb.append("    pauseStart: ").append(toIndentedString(pauseStart)).append("\n");
    sb.append("    sisType: ").append(toIndentedString(sisType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("instant_login");
    openapiFields.add("last_sync");
    openapiFields.add("launch_date");
    openapiFields.add("pause_end");
    openapiFields.add("pause_start");
    openapiFields.add("sis_type");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistrictStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistrictStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistrictStatus is not found in the empty JSON string", DistrictStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistrictStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistrictStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_sync") != null && !jsonObj.get("last_sync").isJsonNull()) && !jsonObj.get("last_sync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_sync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_sync").toString()));
      }
      if ((jsonObj.get("launch_date") != null && !jsonObj.get("launch_date").isJsonNull()) && !jsonObj.get("launch_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launch_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launch_date").toString()));
      }
      if ((jsonObj.get("pause_end") != null && !jsonObj.get("pause_end").isJsonNull()) && !jsonObj.get("pause_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pause_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pause_end").toString()));
      }
      if ((jsonObj.get("pause_start") != null && !jsonObj.get("pause_start").isJsonNull()) && !jsonObj.get("pause_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pause_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pause_start").toString()));
      }
      if ((jsonObj.get("sis_type") != null && !jsonObj.get("sis_type").isJsonNull()) && !jsonObj.get("sis_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sis_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sis_type").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistrictStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistrictStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistrictStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistrictStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DistrictStatus>() {
           @Override
           public void write(JsonWriter out, DistrictStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistrictStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistrictStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistrictStatus
   * @throws IOException if the JSON string is invalid with respect to DistrictStatus
   */
  public static DistrictStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistrictStatus.class);
  }

  /**
   * Convert an instance of DistrictStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

