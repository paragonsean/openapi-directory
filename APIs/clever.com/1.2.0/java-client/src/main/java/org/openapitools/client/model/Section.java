/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Term;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Section
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:00.989992-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Section {
  public static final String SERIALIZED_NAME_COURSE_DESCRIPTION = "course_description";
  @SerializedName(SERIALIZED_NAME_COURSE_DESCRIPTION)
  private String courseDescription;

  public static final String SERIALIZED_NAME_COURSE_NAME = "course_name";
  @SerializedName(SERIALIZED_NAME_COURSE_NAME)
  private String courseName;

  public static final String SERIALIZED_NAME_COURSE_NUMBER = "course_number";
  @SerializedName(SERIALIZED_NAME_COURSE_NUMBER)
  private String courseNumber;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  /**
   * Gets or Sets grade
   */
  @JsonAdapter(GradeEnum.Adapter.class)
  public enum GradeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    PRE_KINDERGARTEN("PreKindergarten"),
    
    KINDERGARTEN("Kindergarten"),
    
    POST_GRADUATE("PostGraduate"),
    
    OTHER("Other");

    private String value;

    GradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeEnum fromValue(String value) {
      for (GradeEnum b : GradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GradeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private GradeEnum grade;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_SECTION_NUMBER = "section_number";
  @SerializedName(SERIALIZED_NAME_SECTION_NUMBER)
  private String sectionNumber;

  public static final String SERIALIZED_NAME_SIS_ID = "sis_id";
  @SerializedName(SERIALIZED_NAME_SIS_ID)
  private String sisId;

  public static final String SERIALIZED_NAME_STUDENTS = "students";
  @SerializedName(SERIALIZED_NAME_STUDENTS)
  private List<String> students = new ArrayList<>();

  /**
   * Gets or Sets subject
   */
  @JsonAdapter(SubjectEnum.Adapter.class)
  public enum SubjectEnum {
    ENGLISH_LANGUAGE_ARTS("english/language arts"),
    
    MATH("math"),
    
    SCIENCE("science"),
    
    SOCIAL_STUDIES("social studies"),
    
    LANGUAGE("language"),
    
    HOMEROOM_ADVISORY("homeroom/advisory"),
    
    INTERVENTIONS_ONLINE_LEARNING("interventions/online learning"),
    
    TECHNOLOGY_AND_ENGINEERING("technology and engineering"),
    
    PE_AND_HEALTH("PE and health"),
    
    ARTS_AND_MUSIC("arts and music"),
    
    OTHER("other");

    private String value;

    SubjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubjectEnum fromValue(String value) {
      for (SubjectEnum b : SubjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private SubjectEnum subject;

  public static final String SERIALIZED_NAME_TEACHER = "teacher";
  @SerializedName(SERIALIZED_NAME_TEACHER)
  private String teacher;

  public static final String SERIALIZED_NAME_TEACHERS = "teachers";
  @SerializedName(SERIALIZED_NAME_TEACHERS)
  private List<String> teachers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private Term term;

  public Section() {
  }

  public Section courseDescription(String courseDescription) {
    this.courseDescription = courseDescription;
    return this;
  }

  /**
   * Get courseDescription
   * @return courseDescription
   */
  @javax.annotation.Nullable
  public String getCourseDescription() {
    return courseDescription;
  }

  public void setCourseDescription(String courseDescription) {
    this.courseDescription = courseDescription;
  }


  public Section courseName(String courseName) {
    this.courseName = courseName;
    return this;
  }

  /**
   * Get courseName
   * @return courseName
   */
  @javax.annotation.Nullable
  public String getCourseName() {
    return courseName;
  }

  public void setCourseName(String courseName) {
    this.courseName = courseName;
  }


  public Section courseNumber(String courseNumber) {
    this.courseNumber = courseNumber;
    return this;
  }

  /**
   * Get courseNumber
   * @return courseNumber
   */
  @javax.annotation.Nullable
  public String getCourseNumber() {
    return courseNumber;
  }

  public void setCourseNumber(String courseNumber) {
    this.courseNumber = courseNumber;
  }


  public Section created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Section district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public Section grade(GradeEnum grade) {
    this.grade = grade;
    return this;
  }

  /**
   * Get grade
   * @return grade
   */
  @javax.annotation.Nullable
  public GradeEnum getGrade() {
    return grade;
  }

  public void setGrade(GradeEnum grade) {
    this.grade = grade;
  }


  public Section id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Section lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public Section name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Section period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public Section school(String school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public String getSchool() {
    return school;
  }

  public void setSchool(String school) {
    this.school = school;
  }


  public Section sectionNumber(String sectionNumber) {
    this.sectionNumber = sectionNumber;
    return this;
  }

  /**
   * Get sectionNumber
   * @return sectionNumber
   */
  @javax.annotation.Nullable
  public String getSectionNumber() {
    return sectionNumber;
  }

  public void setSectionNumber(String sectionNumber) {
    this.sectionNumber = sectionNumber;
  }


  public Section sisId(String sisId) {
    this.sisId = sisId;
    return this;
  }

  /**
   * Get sisId
   * @return sisId
   */
  @javax.annotation.Nullable
  public String getSisId() {
    return sisId;
  }

  public void setSisId(String sisId) {
    this.sisId = sisId;
  }


  public Section students(List<String> students) {
    this.students = students;
    return this;
  }

  public Section addStudentsItem(String studentsItem) {
    if (this.students == null) {
      this.students = new ArrayList<>();
    }
    this.students.add(studentsItem);
    return this;
  }

  /**
   * Get students
   * @return students
   */
  @javax.annotation.Nullable
  public List<String> getStudents() {
    return students;
  }

  public void setStudents(List<String> students) {
    this.students = students;
  }


  public Section subject(SubjectEnum subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public SubjectEnum getSubject() {
    return subject;
  }

  public void setSubject(SubjectEnum subject) {
    this.subject = subject;
  }


  public Section teacher(String teacher) {
    this.teacher = teacher;
    return this;
  }

  /**
   * Get teacher
   * @return teacher
   */
  @javax.annotation.Nullable
  public String getTeacher() {
    return teacher;
  }

  public void setTeacher(String teacher) {
    this.teacher = teacher;
  }


  public Section teachers(List<String> teachers) {
    this.teachers = teachers;
    return this;
  }

  public Section addTeachersItem(String teachersItem) {
    if (this.teachers == null) {
      this.teachers = new ArrayList<>();
    }
    this.teachers.add(teachersItem);
    return this;
  }

  /**
   * Get teachers
   * @return teachers
   */
  @javax.annotation.Nullable
  public List<String> getTeachers() {
    return teachers;
  }

  public void setTeachers(List<String> teachers) {
    this.teachers = teachers;
  }


  public Section term(Term term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public Term getTerm() {
    return term;
  }

  public void setTerm(Term term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Section section = (Section) o;
    return Objects.equals(this.courseDescription, section.courseDescription) &&
        Objects.equals(this.courseName, section.courseName) &&
        Objects.equals(this.courseNumber, section.courseNumber) &&
        Objects.equals(this.created, section.created) &&
        Objects.equals(this.district, section.district) &&
        Objects.equals(this.grade, section.grade) &&
        Objects.equals(this.id, section.id) &&
        Objects.equals(this.lastModified, section.lastModified) &&
        Objects.equals(this.name, section.name) &&
        Objects.equals(this.period, section.period) &&
        Objects.equals(this.school, section.school) &&
        Objects.equals(this.sectionNumber, section.sectionNumber) &&
        Objects.equals(this.sisId, section.sisId) &&
        Objects.equals(this.students, section.students) &&
        Objects.equals(this.subject, section.subject) &&
        Objects.equals(this.teacher, section.teacher) &&
        Objects.equals(this.teachers, section.teachers) &&
        Objects.equals(this.term, section.term);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseDescription, courseName, courseNumber, created, district, grade, id, lastModified, name, period, school, sectionNumber, sisId, students, subject, teacher, teachers, term);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Section {\n");
    sb.append("    courseDescription: ").append(toIndentedString(courseDescription)).append("\n");
    sb.append("    courseName: ").append(toIndentedString(courseName)).append("\n");
    sb.append("    courseNumber: ").append(toIndentedString(courseNumber)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    sectionNumber: ").append(toIndentedString(sectionNumber)).append("\n");
    sb.append("    sisId: ").append(toIndentedString(sisId)).append("\n");
    sb.append("    students: ").append(toIndentedString(students)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    teacher: ").append(toIndentedString(teacher)).append("\n");
    sb.append("    teachers: ").append(toIndentedString(teachers)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("course_description");
    openapiFields.add("course_name");
    openapiFields.add("course_number");
    openapiFields.add("created");
    openapiFields.add("district");
    openapiFields.add("grade");
    openapiFields.add("id");
    openapiFields.add("last_modified");
    openapiFields.add("name");
    openapiFields.add("period");
    openapiFields.add("school");
    openapiFields.add("section_number");
    openapiFields.add("sis_id");
    openapiFields.add("students");
    openapiFields.add("subject");
    openapiFields.add("teacher");
    openapiFields.add("teachers");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Section
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Section.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Section is not found in the empty JSON string", Section.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Section.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Section` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("course_description") != null && !jsonObj.get("course_description").isJsonNull()) && !jsonObj.get("course_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `course_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("course_description").toString()));
      }
      if ((jsonObj.get("course_name") != null && !jsonObj.get("course_name").isJsonNull()) && !jsonObj.get("course_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `course_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("course_name").toString()));
      }
      if ((jsonObj.get("course_number") != null && !jsonObj.get("course_number").isJsonNull()) && !jsonObj.get("course_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `course_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("course_number").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) && !jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      // validate the optional field `grade`
      if (jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) {
        GradeEnum.validateJsonElement(jsonObj.get("grade"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      if ((jsonObj.get("section_number") != null && !jsonObj.get("section_number").isJsonNull()) && !jsonObj.get("section_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section_number").toString()));
      }
      if ((jsonObj.get("sis_id") != null && !jsonObj.get("sis_id").isJsonNull()) && !jsonObj.get("sis_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sis_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sis_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("students") != null && !jsonObj.get("students").isJsonNull() && !jsonObj.get("students").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `students` to be an array in the JSON string but got `%s`", jsonObj.get("students").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        SubjectEnum.validateJsonElement(jsonObj.get("subject"));
      }
      if ((jsonObj.get("teacher") != null && !jsonObj.get("teacher").isJsonNull()) && !jsonObj.get("teacher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teacher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teacher").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("teachers") != null && !jsonObj.get("teachers").isJsonNull() && !jsonObj.get("teachers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teachers` to be an array in the JSON string but got `%s`", jsonObj.get("teachers").toString()));
      }
      // validate the optional field `term`
      if (jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) {
        Term.validateJsonElement(jsonObj.get("term"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Section.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Section' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Section> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Section.class));

       return (TypeAdapter<T>) new TypeAdapter<Section>() {
           @Override
           public void write(JsonWriter out, Section value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Section read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Section given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Section
   * @throws IOException if the JSON string is invalid with respect to Section
   */
  public static Section fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Section.class);
  }

  /**
   * Convert an instance of Section to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

