/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DistrictResponse;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.SchoolResponse;
import org.openapitools.client.model.SectionsResponse;
import org.openapitools.client.model.StudentContactsForStudentResponse;
import org.openapitools.client.model.StudentResponse;
import org.openapitools.client.model.StudentsResponse;
import org.openapitools.client.model.TeachersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StudentsApi
 */
@Disabled
public class StudentsApiTest {

    private final StudentsApi api = new StudentsApi();

    /**
     * Returns the contacts for a student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsForStudentTest() throws ApiException {
        String id = null;
        Integer limit = null;
        StudentContactsForStudentResponse response = api.getContactsForStudent(id, limit);
        // TODO: test validations
    }

    /**
     * Returns the district for a student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistrictForStudentTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForStudent(id);
        // TODO: test validations
    }

    /**
     * Returns the primary school for a student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchoolForStudentTest() throws ApiException {
        String id = null;
        SchoolResponse response = api.getSchoolForStudent(id);
        // TODO: test validations
    }

    /**
     * Returns the sections for a student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSectionsForStudentTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForStudent(id, limit, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Returns a specific student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudentTest() throws ApiException {
        String id = null;
        String include = null;
        StudentResponse response = api.getStudent(id, include);
        // TODO: test validations
    }

    /**
     * Returns a list of students
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudentsTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        String where = null;
        StudentsResponse response = api.getStudents(limit, startingAfter, endingBefore, where);
        // TODO: test validations
    }

    /**
     * Returns the teachers for a student
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeachersForStudentTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        TeachersResponse response = api.getTeachersForStudent(id, limit, startingAfter, endingBefore);
        // TODO: test validations
    }

}
