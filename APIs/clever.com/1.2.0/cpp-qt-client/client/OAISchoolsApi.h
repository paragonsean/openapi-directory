/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISchoolsApi_H
#define OAI_OAISchoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictResponse.h"
#include "OAINotFound.h"
#include "OAISchoolResponse.h"
#include "OAISchoolsResponse.h"
#include "OAISectionsResponse.h"
#include "OAIStudentsResponse.h"
#include "OAITeachersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISchoolsApi : public QObject {
    Q_OBJECT

public:
    OAISchoolsApi(const int timeOut = 0);
    ~OAISchoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictForSchool(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSchool(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSchools(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSectionsForSchool(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getStudentsForSchool(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getTeachersForSchool(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictForSchoolCallback(OAIHttpRequestWorker *worker);
    void getSchoolCallback(OAIHttpRequestWorker *worker);
    void getSchoolsCallback(OAIHttpRequestWorker *worker);
    void getSectionsForSchoolCallback(OAIHttpRequestWorker *worker);
    void getStudentsForSchoolCallback(OAIHttpRequestWorker *worker);
    void getTeachersForSchoolCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictForSchoolSignal(OAIDistrictResponse summary);
    void getSchoolSignal(OAISchoolResponse summary);
    void getSchoolsSignal(OAISchoolsResponse summary);
    void getSectionsForSchoolSignal(OAISectionsResponse summary);
    void getStudentsForSchoolSignal(OAIStudentsResponse summary);
    void getTeachersForSchoolSignal(OAITeachersResponse summary);


    void getDistrictForSchoolSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getSchoolSignalFull(OAIHttpRequestWorker *worker, OAISchoolResponse summary);
    void getSchoolsSignalFull(OAIHttpRequestWorker *worker, OAISchoolsResponse summary);
    void getSectionsForSchoolSignalFull(OAIHttpRequestWorker *worker, OAISectionsResponse summary);
    void getStudentsForSchoolSignalFull(OAIHttpRequestWorker *worker, OAIStudentsResponse summary);
    void getTeachersForSchoolSignalFull(OAIHttpRequestWorker *worker, OAITeachersResponse summary);

    Q_DECL_DEPRECATED_X("Use getDistrictForSchoolSignalError() instead")
    void getDistrictForSchoolSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForSchoolSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolSignalError() instead")
    void getSchoolSignalE(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolSignalError(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsSignalError() instead")
    void getSchoolsSignalE(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsSignalError(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForSchoolSignalError() instead")
    void getSectionsForSchoolSignalE(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForSchoolSignalError(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForSchoolSignalError() instead")
    void getStudentsForSchoolSignalE(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForSchoolSignalError(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForSchoolSignalError() instead")
    void getTeachersForSchoolSignalE(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForSchoolSignalError(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictForSchoolSignalErrorFull() instead")
    void getDistrictForSchoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForSchoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolSignalErrorFull() instead")
    void getSchoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsSignalErrorFull() instead")
    void getSchoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForSchoolSignalErrorFull() instead")
    void getSectionsForSchoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForSchoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForSchoolSignalErrorFull() instead")
    void getStudentsForSchoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForSchoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForSchoolSignalErrorFull() instead")
    void getTeachersForSchoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForSchoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
