/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeachersApi_H
#define OAI_OAITeachersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictResponse.h"
#include "OAIGradeLevelsResponse.h"
#include "OAINotFound.h"
#include "OAISchoolResponse.h"
#include "OAISectionsResponse.h"
#include "OAIStudentsResponse.h"
#include "OAITeacherResponse.h"
#include "OAITeachersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeachersApi : public QObject {
    Q_OBJECT

public:
    OAITeachersApi(const int timeOut = 0);
    ~OAITeachersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictForTeacher(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getGradeLevelsForTeacher(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSchoolForTeacher(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getSectionsForTeacher(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getStudentsForTeacher(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getTeacher(const QString &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getTeachers(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictForTeacherCallback(OAIHttpRequestWorker *worker);
    void getGradeLevelsForTeacherCallback(OAIHttpRequestWorker *worker);
    void getSchoolForTeacherCallback(OAIHttpRequestWorker *worker);
    void getSectionsForTeacherCallback(OAIHttpRequestWorker *worker);
    void getStudentsForTeacherCallback(OAIHttpRequestWorker *worker);
    void getTeacherCallback(OAIHttpRequestWorker *worker);
    void getTeachersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictForTeacherSignal(OAIDistrictResponse summary);
    void getGradeLevelsForTeacherSignal(OAIGradeLevelsResponse summary);
    void getSchoolForTeacherSignal(OAISchoolResponse summary);
    void getSectionsForTeacherSignal(OAISectionsResponse summary);
    void getStudentsForTeacherSignal(OAIStudentsResponse summary);
    void getTeacherSignal(OAITeacherResponse summary);
    void getTeachersSignal(OAITeachersResponse summary);


    void getDistrictForTeacherSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getGradeLevelsForTeacherSignalFull(OAIHttpRequestWorker *worker, OAIGradeLevelsResponse summary);
    void getSchoolForTeacherSignalFull(OAIHttpRequestWorker *worker, OAISchoolResponse summary);
    void getSectionsForTeacherSignalFull(OAIHttpRequestWorker *worker, OAISectionsResponse summary);
    void getStudentsForTeacherSignalFull(OAIHttpRequestWorker *worker, OAIStudentsResponse summary);
    void getTeacherSignalFull(OAIHttpRequestWorker *worker, OAITeacherResponse summary);
    void getTeachersSignalFull(OAIHttpRequestWorker *worker, OAITeachersResponse summary);

    Q_DECL_DEPRECATED_X("Use getDistrictForTeacherSignalError() instead")
    void getDistrictForTeacherSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForTeacherSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGradeLevelsForTeacherSignalError() instead")
    void getGradeLevelsForTeacherSignalE(OAIGradeLevelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGradeLevelsForTeacherSignalError(OAIGradeLevelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForTeacherSignalError() instead")
    void getSchoolForTeacherSignalE(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForTeacherSignalError(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForTeacherSignalError() instead")
    void getSectionsForTeacherSignalE(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForTeacherSignalError(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForTeacherSignalError() instead")
    void getStudentsForTeacherSignalE(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForTeacherSignalError(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeacherSignalError() instead")
    void getTeacherSignalE(OAITeacherResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeacherSignalError(OAITeacherResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersSignalError() instead")
    void getTeachersSignalE(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersSignalError(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictForTeacherSignalErrorFull() instead")
    void getDistrictForTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGradeLevelsForTeacherSignalErrorFull() instead")
    void getGradeLevelsForTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGradeLevelsForTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForTeacherSignalErrorFull() instead")
    void getSchoolForTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForTeacherSignalErrorFull() instead")
    void getSectionsForTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForTeacherSignalErrorFull() instead")
    void getStudentsForTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeacherSignalErrorFull() instead")
    void getTeacherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeacherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersSignalErrorFull() instead")
    void getTeachersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
