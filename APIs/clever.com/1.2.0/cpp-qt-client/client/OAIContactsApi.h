/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContactsApi_H
#define OAI_OAIContactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictResponse.h"
#include "OAINotFound.h"
#include "OAIStudentContactResponse.h"
#include "OAIStudentContactsResponse.h"
#include "OAIStudentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContactsApi : public QObject {
    Q_OBJECT

public:
    OAIContactsApi(const int timeOut = 0);
    ~OAIContactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getContact(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getContacts(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictForStudentContact(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getStudentForContact(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getContactCallback(OAIHttpRequestWorker *worker);
    void getContactsCallback(OAIHttpRequestWorker *worker);
    void getDistrictForStudentContactCallback(OAIHttpRequestWorker *worker);
    void getStudentForContactCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getContactSignal(OAIStudentContactResponse summary);
    void getContactsSignal(OAIStudentContactsResponse summary);
    void getDistrictForStudentContactSignal(OAIDistrictResponse summary);
    void getStudentForContactSignal(OAIStudentResponse summary);


    void getContactSignalFull(OAIHttpRequestWorker *worker, OAIStudentContactResponse summary);
    void getContactsSignalFull(OAIHttpRequestWorker *worker, OAIStudentContactsResponse summary);
    void getDistrictForStudentContactSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getStudentForContactSignalFull(OAIHttpRequestWorker *worker, OAIStudentResponse summary);

    Q_DECL_DEPRECATED_X("Use getContactSignalError() instead")
    void getContactSignalE(OAIStudentContactResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalError(OAIStudentContactResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalError() instead")
    void getContactsSignalE(OAIStudentContactsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalError(OAIStudentContactsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictForStudentContactSignalError() instead")
    void getDistrictForStudentContactSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForStudentContactSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentForContactSignalError() instead")
    void getStudentForContactSignalE(OAIStudentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentForContactSignalError(OAIStudentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getContactSignalErrorFull() instead")
    void getContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalErrorFull() instead")
    void getContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictForStudentContactSignalErrorFull() instead")
    void getDistrictForStudentContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForStudentContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentForContactSignalErrorFull() instead")
    void getStudentForContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentForContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
