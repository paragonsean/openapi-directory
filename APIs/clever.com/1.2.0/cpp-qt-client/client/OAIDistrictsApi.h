/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDistrictsApi_H
#define OAI_OAIDistrictsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictAdminsResponse.h"
#include "OAIDistrictResponse.h"
#include "OAIDistrictStatusResponses.h"
#include "OAIDistrictsResponse.h"
#include "OAINotFound.h"
#include "OAISchoolsResponse.h"
#include "OAISectionsResponse.h"
#include "OAIStudentsResponse.h"
#include "OAITeachersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDistrictsApi : public QObject {
    Q_OBJECT

public:
    OAIDistrictsApi(const int timeOut = 0);
    ~OAIDistrictsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAdminsForDistrict(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getDistrict(const QString &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictStatus(const QString &id);


    virtual void getDistricts();

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSchoolsForDistrict(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSectionsForDistrict(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getStudentsForDistrict(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getTeachersForDistrict(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAdminsForDistrictCallback(OAIHttpRequestWorker *worker);
    void getDistrictCallback(OAIHttpRequestWorker *worker);
    void getDistrictStatusCallback(OAIHttpRequestWorker *worker);
    void getDistrictsCallback(OAIHttpRequestWorker *worker);
    void getSchoolsForDistrictCallback(OAIHttpRequestWorker *worker);
    void getSectionsForDistrictCallback(OAIHttpRequestWorker *worker);
    void getStudentsForDistrictCallback(OAIHttpRequestWorker *worker);
    void getTeachersForDistrictCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAdminsForDistrictSignal(OAIDistrictAdminsResponse summary);
    void getDistrictSignal(OAIDistrictResponse summary);
    void getDistrictStatusSignal(OAIDistrictStatusResponses summary);
    void getDistrictsSignal(OAIDistrictsResponse summary);
    void getSchoolsForDistrictSignal(OAISchoolsResponse summary);
    void getSectionsForDistrictSignal(OAISectionsResponse summary);
    void getStudentsForDistrictSignal(OAIStudentsResponse summary);
    void getTeachersForDistrictSignal(OAITeachersResponse summary);


    void getAdminsForDistrictSignalFull(OAIHttpRequestWorker *worker, OAIDistrictAdminsResponse summary);
    void getDistrictSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getDistrictStatusSignalFull(OAIHttpRequestWorker *worker, OAIDistrictStatusResponses summary);
    void getDistrictsSignalFull(OAIHttpRequestWorker *worker, OAIDistrictsResponse summary);
    void getSchoolsForDistrictSignalFull(OAIHttpRequestWorker *worker, OAISchoolsResponse summary);
    void getSectionsForDistrictSignalFull(OAIHttpRequestWorker *worker, OAISectionsResponse summary);
    void getStudentsForDistrictSignalFull(OAIHttpRequestWorker *worker, OAIStudentsResponse summary);
    void getTeachersForDistrictSignalFull(OAIHttpRequestWorker *worker, OAITeachersResponse summary);

    Q_DECL_DEPRECATED_X("Use getAdminsForDistrictSignalError() instead")
    void getAdminsForDistrictSignalE(OAIDistrictAdminsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminsForDistrictSignalError(OAIDistrictAdminsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictSignalError() instead")
    void getDistrictSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictStatusSignalError() instead")
    void getDistrictStatusSignalE(OAIDistrictStatusResponses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictStatusSignalError(OAIDistrictStatusResponses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictsSignalError() instead")
    void getDistrictsSignalE(OAIDistrictsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictsSignalError(OAIDistrictsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsForDistrictSignalError() instead")
    void getSchoolsForDistrictSignalE(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsForDistrictSignalError(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForDistrictSignalError() instead")
    void getSectionsForDistrictSignalE(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForDistrictSignalError(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForDistrictSignalError() instead")
    void getStudentsForDistrictSignalE(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForDistrictSignalError(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForDistrictSignalError() instead")
    void getTeachersForDistrictSignalE(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForDistrictSignalError(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAdminsForDistrictSignalErrorFull() instead")
    void getAdminsForDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminsForDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictSignalErrorFull() instead")
    void getDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictStatusSignalErrorFull() instead")
    void getDistrictStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictsSignalErrorFull() instead")
    void getDistrictsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsForDistrictSignalErrorFull() instead")
    void getSchoolsForDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsForDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForDistrictSignalErrorFull() instead")
    void getSectionsForDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForDistrictSignalErrorFull() instead")
    void getStudentsForDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForDistrictSignalErrorFull() instead")
    void getTeachersForDistrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForDistrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
