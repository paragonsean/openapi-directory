/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStudentsApi_H
#define OAI_OAIStudentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictResponse.h"
#include "OAINotFound.h"
#include "OAISchoolResponse.h"
#include "OAISectionsResponse.h"
#include "OAIStudentContactsForStudentResponse.h"
#include "OAIStudentResponse.h"
#include "OAIStudentsResponse.h"
#include "OAITeachersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStudentsApi : public QObject {
    Q_OBJECT

public:
    OAIStudentsApi(const int timeOut = 0);
    ~OAIStudentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getContactsForStudent(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictForStudent(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSchoolForStudent(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getSectionsForStudent(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getStudent(const QString &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getStudents(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getTeachersForStudent(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getContactsForStudentCallback(OAIHttpRequestWorker *worker);
    void getDistrictForStudentCallback(OAIHttpRequestWorker *worker);
    void getSchoolForStudentCallback(OAIHttpRequestWorker *worker);
    void getSectionsForStudentCallback(OAIHttpRequestWorker *worker);
    void getStudentCallback(OAIHttpRequestWorker *worker);
    void getStudentsCallback(OAIHttpRequestWorker *worker);
    void getTeachersForStudentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getContactsForStudentSignal(OAIStudentContactsForStudentResponse summary);
    void getDistrictForStudentSignal(OAIDistrictResponse summary);
    void getSchoolForStudentSignal(OAISchoolResponse summary);
    void getSectionsForStudentSignal(OAISectionsResponse summary);
    void getStudentSignal(OAIStudentResponse summary);
    void getStudentsSignal(OAIStudentsResponse summary);
    void getTeachersForStudentSignal(OAITeachersResponse summary);


    void getContactsForStudentSignalFull(OAIHttpRequestWorker *worker, OAIStudentContactsForStudentResponse summary);
    void getDistrictForStudentSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getSchoolForStudentSignalFull(OAIHttpRequestWorker *worker, OAISchoolResponse summary);
    void getSectionsForStudentSignalFull(OAIHttpRequestWorker *worker, OAISectionsResponse summary);
    void getStudentSignalFull(OAIHttpRequestWorker *worker, OAIStudentResponse summary);
    void getStudentsSignalFull(OAIHttpRequestWorker *worker, OAIStudentsResponse summary);
    void getTeachersForStudentSignalFull(OAIHttpRequestWorker *worker, OAITeachersResponse summary);

    Q_DECL_DEPRECATED_X("Use getContactsForStudentSignalError() instead")
    void getContactsForStudentSignalE(OAIStudentContactsForStudentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsForStudentSignalError(OAIStudentContactsForStudentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictForStudentSignalError() instead")
    void getDistrictForStudentSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForStudentSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForStudentSignalError() instead")
    void getSchoolForStudentSignalE(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForStudentSignalError(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForStudentSignalError() instead")
    void getSectionsForStudentSignalE(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForStudentSignalError(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentSignalError() instead")
    void getStudentSignalE(OAIStudentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentSignalError(OAIStudentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsSignalError() instead")
    void getStudentsSignalE(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsSignalError(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForStudentSignalError() instead")
    void getTeachersForStudentSignalE(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForStudentSignalError(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getContactsForStudentSignalErrorFull() instead")
    void getContactsForStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsForStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistrictForStudentSignalErrorFull() instead")
    void getDistrictForStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForStudentSignalErrorFull() instead")
    void getSchoolForStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForStudentSignalErrorFull() instead")
    void getSectionsForStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentSignalErrorFull() instead")
    void getStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsSignalErrorFull() instead")
    void getStudentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForStudentSignalErrorFull() instead")
    void getTeachersForStudentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForStudentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
