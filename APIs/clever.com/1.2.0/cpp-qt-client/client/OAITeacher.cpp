/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeacher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeacher::OAITeacher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeacher::OAITeacher() {
    this->initializeModel();
}

OAITeacher::~OAITeacher() {}

void OAITeacher::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_schools_isSet = false;
    m_schools_isValid = false;

    m_sis_id_isSet = false;
    m_sis_id_isValid = false;

    m_state_id_isSet = false;
    m_state_id_isValid = false;

    m_teacher_number_isSet = false;
    m_teacher_number_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITeacher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeacher::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("last_modified")]);
    m_last_modified_isSet = !json[QString("last_modified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_schools_isValid = ::OpenAPI::fromJsonValue(m_schools, json[QString("schools")]);
    m_schools_isSet = !json[QString("schools")].isNull() && m_schools_isValid;

    m_sis_id_isValid = ::OpenAPI::fromJsonValue(m_sis_id, json[QString("sis_id")]);
    m_sis_id_isSet = !json[QString("sis_id")].isNull() && m_sis_id_isValid;

    m_state_id_isValid = ::OpenAPI::fromJsonValue(m_state_id, json[QString("state_id")]);
    m_state_id_isSet = !json[QString("state_id")].isNull() && m_state_id_isValid;

    m_teacher_number_isValid = ::OpenAPI::fromJsonValue(m_teacher_number, json[QString("teacher_number")]);
    m_teacher_number_isSet = !json[QString("teacher_number")].isNull() && m_teacher_number_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAITeacher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeacher::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("last_modified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_schools.size() > 0) {
        obj.insert(QString("schools"), ::OpenAPI::toJsonValue(m_schools));
    }
    if (m_sis_id_isSet) {
        obj.insert(QString("sis_id"), ::OpenAPI::toJsonValue(m_sis_id));
    }
    if (m_state_id_isSet) {
        obj.insert(QString("state_id"), ::OpenAPI::toJsonValue(m_state_id));
    }
    if (m_teacher_number_isSet) {
        obj.insert(QString("teacher_number"), ::OpenAPI::toJsonValue(m_teacher_number));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAITeacher::getCreated() const {
    return m_created;
}
void OAITeacher::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITeacher::is_created_Set() const{
    return m_created_isSet;
}

bool OAITeacher::is_created_Valid() const{
    return m_created_isValid;
}

OAICredentials OAITeacher::getCredentials() const {
    return m_credentials;
}
void OAITeacher::setCredentials(const OAICredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAITeacher::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAITeacher::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAITeacher::getDistrict() const {
    return m_district;
}
void OAITeacher::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAITeacher::is_district_Set() const{
    return m_district_isSet;
}

bool OAITeacher::is_district_Valid() const{
    return m_district_isValid;
}

QString OAITeacher::getEmail() const {
    return m_email;
}
void OAITeacher::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITeacher::is_email_Set() const{
    return m_email_isSet;
}

bool OAITeacher::is_email_Valid() const{
    return m_email_isValid;
}

QString OAITeacher::getId() const {
    return m_id;
}
void OAITeacher::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeacher::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeacher::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITeacher::getLastModified() const {
    return m_last_modified;
}
void OAITeacher::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAITeacher::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAITeacher::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIName OAITeacher::getName() const {
    return m_name;
}
void OAITeacher::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeacher::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeacher::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeacher::getSchool() const {
    return m_school;
}
void OAITeacher::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAITeacher::is_school_Set() const{
    return m_school_isSet;
}

bool OAITeacher::is_school_Valid() const{
    return m_school_isValid;
}

QList<QString> OAITeacher::getSchools() const {
    return m_schools;
}
void OAITeacher::setSchools(const QList<QString> &schools) {
    m_schools = schools;
    m_schools_isSet = true;
}

bool OAITeacher::is_schools_Set() const{
    return m_schools_isSet;
}

bool OAITeacher::is_schools_Valid() const{
    return m_schools_isValid;
}

QString OAITeacher::getSisId() const {
    return m_sis_id;
}
void OAITeacher::setSisId(const QString &sis_id) {
    m_sis_id = sis_id;
    m_sis_id_isSet = true;
}

bool OAITeacher::is_sis_id_Set() const{
    return m_sis_id_isSet;
}

bool OAITeacher::is_sis_id_Valid() const{
    return m_sis_id_isValid;
}

QString OAITeacher::getStateId() const {
    return m_state_id;
}
void OAITeacher::setStateId(const QString &state_id) {
    m_state_id = state_id;
    m_state_id_isSet = true;
}

bool OAITeacher::is_state_id_Set() const{
    return m_state_id_isSet;
}

bool OAITeacher::is_state_id_Valid() const{
    return m_state_id_isValid;
}

QString OAITeacher::getTeacherNumber() const {
    return m_teacher_number;
}
void OAITeacher::setTeacherNumber(const QString &teacher_number) {
    m_teacher_number = teacher_number;
    m_teacher_number_isSet = true;
}

bool OAITeacher::is_teacher_number_Set() const{
    return m_teacher_number_isSet;
}

bool OAITeacher::is_teacher_number_Valid() const{
    return m_teacher_number_isValid;
}

QString OAITeacher::getTitle() const {
    return m_title;
}
void OAITeacher::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITeacher::is_title_Set() const{
    return m_title_isSet;
}

bool OAITeacher::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITeacher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teacher_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeacher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
