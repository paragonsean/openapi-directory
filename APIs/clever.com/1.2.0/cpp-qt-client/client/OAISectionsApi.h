/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISectionsApi_H
#define OAI_OAISectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistrictResponse.h"
#include "OAINotFound.h"
#include "OAISchoolResponse.h"
#include "OAISectionResponse.h"
#include "OAISectionsResponse.h"
#include "OAIStudentsResponse.h"
#include "OAITeacherResponse.h"
#include "OAITeachersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISectionsApi : public QObject {
    Q_OBJECT

public:
    OAISectionsApi(const int timeOut = 0);
    ~OAISectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDistrictForSection(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSchoolForSection(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSection(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSections(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getStudentsForSection(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getTeacherForSection(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getTeachersForSection(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistrictForSectionCallback(OAIHttpRequestWorker *worker);
    void getSchoolForSectionCallback(OAIHttpRequestWorker *worker);
    void getSectionCallback(OAIHttpRequestWorker *worker);
    void getSectionsCallback(OAIHttpRequestWorker *worker);
    void getStudentsForSectionCallback(OAIHttpRequestWorker *worker);
    void getTeacherForSectionCallback(OAIHttpRequestWorker *worker);
    void getTeachersForSectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistrictForSectionSignal(OAIDistrictResponse summary);
    void getSchoolForSectionSignal(OAISchoolResponse summary);
    void getSectionSignal(OAISectionResponse summary);
    void getSectionsSignal(OAISectionsResponse summary);
    void getStudentsForSectionSignal(OAIStudentsResponse summary);
    void getTeacherForSectionSignal(OAITeacherResponse summary);
    void getTeachersForSectionSignal(OAITeachersResponse summary);


    void getDistrictForSectionSignalFull(OAIHttpRequestWorker *worker, OAIDistrictResponse summary);
    void getSchoolForSectionSignalFull(OAIHttpRequestWorker *worker, OAISchoolResponse summary);
    void getSectionSignalFull(OAIHttpRequestWorker *worker, OAISectionResponse summary);
    void getSectionsSignalFull(OAIHttpRequestWorker *worker, OAISectionsResponse summary);
    void getStudentsForSectionSignalFull(OAIHttpRequestWorker *worker, OAIStudentsResponse summary);
    void getTeacherForSectionSignalFull(OAIHttpRequestWorker *worker, OAITeacherResponse summary);
    void getTeachersForSectionSignalFull(OAIHttpRequestWorker *worker, OAITeachersResponse summary);

    Q_DECL_DEPRECATED_X("Use getDistrictForSectionSignalError() instead")
    void getDistrictForSectionSignalE(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForSectionSignalError(OAIDistrictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForSectionSignalError() instead")
    void getSchoolForSectionSignalE(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForSectionSignalError(OAISchoolResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionSignalError() instead")
    void getSectionSignalE(OAISectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionSignalError(OAISectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsSignalError() instead")
    void getSectionsSignalE(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsSignalError(OAISectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForSectionSignalError() instead")
    void getStudentsForSectionSignalE(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForSectionSignalError(OAIStudentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeacherForSectionSignalError() instead")
    void getTeacherForSectionSignalE(OAITeacherResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeacherForSectionSignalError(OAITeacherResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForSectionSignalError() instead")
    void getTeachersForSectionSignalE(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForSectionSignalError(OAITeachersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistrictForSectionSignalErrorFull() instead")
    void getDistrictForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistrictForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolForSectionSignalErrorFull() instead")
    void getSchoolForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionSignalErrorFull() instead")
    void getSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsSignalErrorFull() instead")
    void getSectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudentsForSectionSignalErrorFull() instead")
    void getStudentsForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudentsForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeacherForSectionSignalErrorFull() instead")
    void getTeacherForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeacherForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeachersForSectionSignalErrorFull() instead")
    void getTeachersForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeachersForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
