/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISchoolAdminsApi_H
#define OAI_OAISchoolAdminsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotFound.h"
#include "OAISchoolAdminResponse.h"
#include "OAISchoolAdminsResponse.h"
#include "OAISchoolsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISchoolAdminsApi : public QObject {
    Q_OBJECT

public:
    OAISchoolAdminsApi(const int timeOut = 0);
    ~OAISchoolAdminsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getSchoolAdmin(const QString &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  where QString [optional]
    */
    virtual void getSchoolAdmins(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getSchoolsForSchoolAdmin(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSchoolAdminCallback(OAIHttpRequestWorker *worker);
    void getSchoolAdminsCallback(OAIHttpRequestWorker *worker);
    void getSchoolsForSchoolAdminCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSchoolAdminSignal(OAISchoolAdminResponse summary);
    void getSchoolAdminsSignal(OAISchoolAdminsResponse summary);
    void getSchoolsForSchoolAdminSignal(OAISchoolsResponse summary);


    void getSchoolAdminSignalFull(OAIHttpRequestWorker *worker, OAISchoolAdminResponse summary);
    void getSchoolAdminsSignalFull(OAIHttpRequestWorker *worker, OAISchoolAdminsResponse summary);
    void getSchoolsForSchoolAdminSignalFull(OAIHttpRequestWorker *worker, OAISchoolsResponse summary);

    Q_DECL_DEPRECATED_X("Use getSchoolAdminSignalError() instead")
    void getSchoolAdminSignalE(OAISchoolAdminResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolAdminSignalError(OAISchoolAdminResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolAdminsSignalError() instead")
    void getSchoolAdminsSignalE(OAISchoolAdminsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolAdminsSignalError(OAISchoolAdminsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsForSchoolAdminSignalError() instead")
    void getSchoolsForSchoolAdminSignalE(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsForSchoolAdminSignalError(OAISchoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSchoolAdminSignalErrorFull() instead")
    void getSchoolAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolAdminsSignalErrorFull() instead")
    void getSchoolAdminsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolAdminsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchoolsForSchoolAdminSignalErrorFull() instead")
    void getSchoolsForSchoolAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchoolsForSchoolAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
