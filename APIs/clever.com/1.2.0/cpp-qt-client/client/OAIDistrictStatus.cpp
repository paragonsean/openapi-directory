/**
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistrictStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistrictStatus::OAIDistrictStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistrictStatus::OAIDistrictStatus() {
    this->initializeModel();
}

OAIDistrictStatus::~OAIDistrictStatus() {}

void OAIDistrictStatus::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instant_login_isSet = false;
    m_instant_login_isValid = false;

    m_last_sync_isSet = false;
    m_last_sync_isValid = false;

    m_launch_date_isSet = false;
    m_launch_date_isValid = false;

    m_pause_end_isSet = false;
    m_pause_end_isValid = false;

    m_pause_start_isSet = false;
    m_pause_start_isValid = false;

    m_sis_type_isSet = false;
    m_sis_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDistrictStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistrictStatus::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instant_login_isValid = ::OpenAPI::fromJsonValue(m_instant_login, json[QString("instant_login")]);
    m_instant_login_isSet = !json[QString("instant_login")].isNull() && m_instant_login_isValid;

    m_last_sync_isValid = ::OpenAPI::fromJsonValue(m_last_sync, json[QString("last_sync")]);
    m_last_sync_isSet = !json[QString("last_sync")].isNull() && m_last_sync_isValid;

    m_launch_date_isValid = ::OpenAPI::fromJsonValue(m_launch_date, json[QString("launch_date")]);
    m_launch_date_isSet = !json[QString("launch_date")].isNull() && m_launch_date_isValid;

    m_pause_end_isValid = ::OpenAPI::fromJsonValue(m_pause_end, json[QString("pause_end")]);
    m_pause_end_isSet = !json[QString("pause_end")].isNull() && m_pause_end_isValid;

    m_pause_start_isValid = ::OpenAPI::fromJsonValue(m_pause_start, json[QString("pause_start")]);
    m_pause_start_isSet = !json[QString("pause_start")].isNull() && m_pause_start_isValid;

    m_sis_type_isValid = ::OpenAPI::fromJsonValue(m_sis_type, json[QString("sis_type")]);
    m_sis_type_isSet = !json[QString("sis_type")].isNull() && m_sis_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDistrictStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistrictStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instant_login_isSet) {
        obj.insert(QString("instant_login"), ::OpenAPI::toJsonValue(m_instant_login));
    }
    if (m_last_sync_isSet) {
        obj.insert(QString("last_sync"), ::OpenAPI::toJsonValue(m_last_sync));
    }
    if (m_launch_date_isSet) {
        obj.insert(QString("launch_date"), ::OpenAPI::toJsonValue(m_launch_date));
    }
    if (m_pause_end_isSet) {
        obj.insert(QString("pause_end"), ::OpenAPI::toJsonValue(m_pause_end));
    }
    if (m_pause_start_isSet) {
        obj.insert(QString("pause_start"), ::OpenAPI::toJsonValue(m_pause_start));
    }
    if (m_sis_type_isSet) {
        obj.insert(QString("sis_type"), ::OpenAPI::toJsonValue(m_sis_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDistrictStatus::getError() const {
    return m_error;
}
void OAIDistrictStatus::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIDistrictStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIDistrictStatus::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIDistrictStatus::getId() const {
    return m_id;
}
void OAIDistrictStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDistrictStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDistrictStatus::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDistrictStatus::isInstantLogin() const {
    return m_instant_login;
}
void OAIDistrictStatus::setInstantLogin(const bool &instant_login) {
    m_instant_login = instant_login;
    m_instant_login_isSet = true;
}

bool OAIDistrictStatus::is_instant_login_Set() const{
    return m_instant_login_isSet;
}

bool OAIDistrictStatus::is_instant_login_Valid() const{
    return m_instant_login_isValid;
}

QString OAIDistrictStatus::getLastSync() const {
    return m_last_sync;
}
void OAIDistrictStatus::setLastSync(const QString &last_sync) {
    m_last_sync = last_sync;
    m_last_sync_isSet = true;
}

bool OAIDistrictStatus::is_last_sync_Set() const{
    return m_last_sync_isSet;
}

bool OAIDistrictStatus::is_last_sync_Valid() const{
    return m_last_sync_isValid;
}

QString OAIDistrictStatus::getLaunchDate() const {
    return m_launch_date;
}
void OAIDistrictStatus::setLaunchDate(const QString &launch_date) {
    m_launch_date = launch_date;
    m_launch_date_isSet = true;
}

bool OAIDistrictStatus::is_launch_date_Set() const{
    return m_launch_date_isSet;
}

bool OAIDistrictStatus::is_launch_date_Valid() const{
    return m_launch_date_isValid;
}

QString OAIDistrictStatus::getPauseEnd() const {
    return m_pause_end;
}
void OAIDistrictStatus::setPauseEnd(const QString &pause_end) {
    m_pause_end = pause_end;
    m_pause_end_isSet = true;
}

bool OAIDistrictStatus::is_pause_end_Set() const{
    return m_pause_end_isSet;
}

bool OAIDistrictStatus::is_pause_end_Valid() const{
    return m_pause_end_isValid;
}

QString OAIDistrictStatus::getPauseStart() const {
    return m_pause_start;
}
void OAIDistrictStatus::setPauseStart(const QString &pause_start) {
    m_pause_start = pause_start;
    m_pause_start_isSet = true;
}

bool OAIDistrictStatus::is_pause_start_Set() const{
    return m_pause_start_isSet;
}

bool OAIDistrictStatus::is_pause_start_Valid() const{
    return m_pause_start_isValid;
}

QString OAIDistrictStatus::getSisType() const {
    return m_sis_type;
}
void OAIDistrictStatus::setSisType(const QString &sis_type) {
    m_sis_type = sis_type;
    m_sis_type_isSet = true;
}

bool OAIDistrictStatus::is_sis_type_Set() const{
    return m_sis_type_isSet;
}

bool OAIDistrictStatus::is_sis_type_Valid() const{
    return m_sis_type_isValid;
}

QString OAIDistrictStatus::getState() const {
    return m_state;
}
void OAIDistrictStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDistrictStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDistrictStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDistrictStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instant_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sis_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistrictStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
