/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatasetsApi_H
#define OAI_OAIDatasetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatasetRelatedObjectsResponse.h"
#include "OAIDatasetRestApi_post.h"
#include "OAIDatasetRestApi_put.h"
#include "OAIDistincResponseSchema.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIHttpFileElement.h"
#include "OAIRelatedResponseSchema.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_dataset__get_200_response.h"
#include "OAI_dataset__pk__get_200_response.h"
#include "OAI_dataset__pk__put_200_response.h"
#include "OAI_dataset__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatasetsApi : public QObject {
    Q_OBJECT

public:
    OAIDatasetsApi(const int timeOut = 0);
    ~OAIDatasetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void datasetDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void datasetDistinctColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void datasetExportGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void datasetGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  form_data OAIHttpFileElement [optional]
    * @param[in]  overwrite bool [optional]
    * @param[in]  passwords QString [optional]
    */
    virtual void datasetImportPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &form_data = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passwords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void datasetInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  column_id qint32 [required]
    */
    virtual void datasetPkColumnColumnIdDelete(const qint32 &pk, const qint32 &column_id);

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void datasetPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void datasetPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  metric_id qint32 [required]
    */
    virtual void datasetPkMetricMetricIdDelete(const qint32 &pk, const qint32 &metric_id);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_dataset_rest_api_put OAIDatasetRestApi_put [required]
    * @param[in]  override_columns bool [optional]
    */
    virtual void datasetPkPut(const qint32 &pk, const OAIDatasetRestApi_put &oai_dataset_rest_api_put, const ::OpenAPI::OptionalParam<bool> &override_columns = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void datasetPkRefreshPut(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void datasetPkRelatedObjectsGet(const qint32 &pk);

    /**
    * @param[in]  oai_dataset_rest_api_post OAIDatasetRestApi_post [required]
    */
    virtual void datasetPost(const OAIDatasetRestApi_post &oai_dataset_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void datasetRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void datasetDeleteCallback(OAIHttpRequestWorker *worker);
    void datasetDistinctColumnNameGetCallback(OAIHttpRequestWorker *worker);
    void datasetExportGetCallback(OAIHttpRequestWorker *worker);
    void datasetGetCallback(OAIHttpRequestWorker *worker);
    void datasetImportPostCallback(OAIHttpRequestWorker *worker);
    void datasetInfoGetCallback(OAIHttpRequestWorker *worker);
    void datasetPkColumnColumnIdDeleteCallback(OAIHttpRequestWorker *worker);
    void datasetPkDeleteCallback(OAIHttpRequestWorker *worker);
    void datasetPkGetCallback(OAIHttpRequestWorker *worker);
    void datasetPkMetricMetricIdDeleteCallback(OAIHttpRequestWorker *worker);
    void datasetPkPutCallback(OAIHttpRequestWorker *worker);
    void datasetPkRefreshPutCallback(OAIHttpRequestWorker *worker);
    void datasetPkRelatedObjectsGetCallback(OAIHttpRequestWorker *worker);
    void datasetPostCallback(OAIHttpRequestWorker *worker);
    void datasetRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void datasetDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void datasetDistinctColumnNameGetSignal(OAIDistincResponseSchema summary);
    void datasetExportGetSignal(QString summary);
    void datasetGetSignal(OAI_dataset__get_200_response summary);
    void datasetImportPostSignal(OAI_annotation_layer__get_400_response summary);
    void datasetInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void datasetPkColumnColumnIdDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void datasetPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void datasetPkGetSignal(OAI_dataset__pk__get_200_response summary);
    void datasetPkMetricMetricIdDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void datasetPkPutSignal(OAI_dataset__pk__put_200_response summary);
    void datasetPkRefreshPutSignal(OAI_annotation_layer__get_400_response summary);
    void datasetPkRelatedObjectsGetSignal(OAIDatasetRelatedObjectsResponse summary);
    void datasetPostSignal(OAI_dataset__post_201_response summary);
    void datasetRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void datasetDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetDistinctColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIDistincResponseSchema summary);
    void datasetExportGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void datasetGetSignalFull(OAIHttpRequestWorker *worker, OAI_dataset__get_200_response summary);
    void datasetImportPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void datasetPkColumnColumnIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_dataset__pk__get_200_response summary);
    void datasetPkMetricMetricIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_dataset__pk__put_200_response summary);
    void datasetPkRefreshPutSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void datasetPkRelatedObjectsGetSignalFull(OAIHttpRequestWorker *worker, OAIDatasetRelatedObjectsResponse summary);
    void datasetPostSignalFull(OAIHttpRequestWorker *worker, OAI_dataset__post_201_response summary);
    void datasetRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use datasetDeleteSignalError() instead")
    void datasetDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetDistinctColumnNameGetSignalError() instead")
    void datasetDistinctColumnNameGetSignalE(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetDistinctColumnNameGetSignalError(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetExportGetSignalError() instead")
    void datasetExportGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetExportGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetGetSignalError() instead")
    void datasetGetSignalE(OAI_dataset__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetGetSignalError(OAI_dataset__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetImportPostSignalError() instead")
    void datasetImportPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetImportPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetInfoGetSignalError() instead")
    void datasetInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkColumnColumnIdDeleteSignalError() instead")
    void datasetPkColumnColumnIdDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkColumnColumnIdDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkDeleteSignalError() instead")
    void datasetPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkGetSignalError() instead")
    void datasetPkGetSignalE(OAI_dataset__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkGetSignalError(OAI_dataset__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkMetricMetricIdDeleteSignalError() instead")
    void datasetPkMetricMetricIdDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkMetricMetricIdDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkPutSignalError() instead")
    void datasetPkPutSignalE(OAI_dataset__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkPutSignalError(OAI_dataset__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkRefreshPutSignalError() instead")
    void datasetPkRefreshPutSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkRefreshPutSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkRelatedObjectsGetSignalError() instead")
    void datasetPkRelatedObjectsGetSignalE(OAIDatasetRelatedObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkRelatedObjectsGetSignalError(OAIDatasetRelatedObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPostSignalError() instead")
    void datasetPostSignalE(OAI_dataset__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPostSignalError(OAI_dataset__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetRelatedColumnNameGetSignalError() instead")
    void datasetRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use datasetDeleteSignalErrorFull() instead")
    void datasetDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetDistinctColumnNameGetSignalErrorFull() instead")
    void datasetDistinctColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetDistinctColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetExportGetSignalErrorFull() instead")
    void datasetExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetGetSignalErrorFull() instead")
    void datasetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetImportPostSignalErrorFull() instead")
    void datasetImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetInfoGetSignalErrorFull() instead")
    void datasetInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkColumnColumnIdDeleteSignalErrorFull() instead")
    void datasetPkColumnColumnIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkColumnColumnIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkDeleteSignalErrorFull() instead")
    void datasetPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkGetSignalErrorFull() instead")
    void datasetPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkMetricMetricIdDeleteSignalErrorFull() instead")
    void datasetPkMetricMetricIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkMetricMetricIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkPutSignalErrorFull() instead")
    void datasetPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkRefreshPutSignalErrorFull() instead")
    void datasetPkRefreshPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkRefreshPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPkRelatedObjectsGetSignalErrorFull() instead")
    void datasetPkRelatedObjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPkRelatedObjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetPostSignalErrorFull() instead")
    void datasetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetRelatedColumnNameGetSignalErrorFull() instead")
    void datasetRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
