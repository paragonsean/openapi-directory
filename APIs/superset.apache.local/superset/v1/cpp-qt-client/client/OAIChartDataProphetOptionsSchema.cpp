/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataProphetOptionsSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataProphetOptionsSchema::OAIChartDataProphetOptionsSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataProphetOptionsSchema::OAIChartDataProphetOptionsSchema() {
    this->initializeModel();
}

OAIChartDataProphetOptionsSchema::~OAIChartDataProphetOptionsSchema() {}

void OAIChartDataProphetOptionsSchema::initializeModel() {

    m_confidence_interval_isSet = false;
    m_confidence_interval_isValid = false;

    m_monthly_seasonality_isSet = false;
    m_monthly_seasonality_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;

    m_weekly_seasonality_isSet = false;
    m_weekly_seasonality_isValid = false;

    m_yearly_seasonality_isSet = false;
    m_yearly_seasonality_isValid = false;
}

void OAIChartDataProphetOptionsSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataProphetOptionsSchema::fromJsonObject(QJsonObject json) {

    m_confidence_interval_isValid = ::OpenAPI::fromJsonValue(m_confidence_interval, json[QString("confidence_interval")]);
    m_confidence_interval_isSet = !json[QString("confidence_interval")].isNull() && m_confidence_interval_isValid;

    m_monthly_seasonality_isValid = ::OpenAPI::fromJsonValue(m_monthly_seasonality, json[QString("monthly_seasonality")]);
    m_monthly_seasonality_isSet = !json[QString("monthly_seasonality")].isNull() && m_monthly_seasonality_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("time_grain")]);
    m_time_grain_isSet = !json[QString("time_grain")].isNull() && m_time_grain_isValid;

    m_weekly_seasonality_isValid = ::OpenAPI::fromJsonValue(m_weekly_seasonality, json[QString("weekly_seasonality")]);
    m_weekly_seasonality_isSet = !json[QString("weekly_seasonality")].isNull() && m_weekly_seasonality_isValid;

    m_yearly_seasonality_isValid = ::OpenAPI::fromJsonValue(m_yearly_seasonality, json[QString("yearly_seasonality")]);
    m_yearly_seasonality_isSet = !json[QString("yearly_seasonality")].isNull() && m_yearly_seasonality_isValid;
}

QString OAIChartDataProphetOptionsSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataProphetOptionsSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_interval_isSet) {
        obj.insert(QString("confidence_interval"), ::OpenAPI::toJsonValue(m_confidence_interval));
    }
    if (m_monthly_seasonality_isSet) {
        obj.insert(QString("monthly_seasonality"), ::OpenAPI::toJsonValue(m_monthly_seasonality));
    }
    if (m_periods_isSet) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("time_grain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    if (m_weekly_seasonality_isSet) {
        obj.insert(QString("weekly_seasonality"), ::OpenAPI::toJsonValue(m_weekly_seasonality));
    }
    if (m_yearly_seasonality_isSet) {
        obj.insert(QString("yearly_seasonality"), ::OpenAPI::toJsonValue(m_yearly_seasonality));
    }
    return obj;
}

float OAIChartDataProphetOptionsSchema::getConfidenceInterval() const {
    return m_confidence_interval;
}
void OAIChartDataProphetOptionsSchema::setConfidenceInterval(const float &confidence_interval) {
    m_confidence_interval = confidence_interval;
    m_confidence_interval_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_confidence_interval_Set() const{
    return m_confidence_interval_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_confidence_interval_Valid() const{
    return m_confidence_interval_isValid;
}

QJsonValue OAIChartDataProphetOptionsSchema::getMonthlySeasonality() const {
    return m_monthly_seasonality;
}
void OAIChartDataProphetOptionsSchema::setMonthlySeasonality(const QJsonValue &monthly_seasonality) {
    m_monthly_seasonality = monthly_seasonality;
    m_monthly_seasonality_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_monthly_seasonality_Set() const{
    return m_monthly_seasonality_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_monthly_seasonality_Valid() const{
    return m_monthly_seasonality_isValid;
}

qint32 OAIChartDataProphetOptionsSchema::getPeriods() const {
    return m_periods;
}
void OAIChartDataProphetOptionsSchema::setPeriods(const qint32 &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_periods_Valid() const{
    return m_periods_isValid;
}

QString OAIChartDataProphetOptionsSchema::getTimeGrain() const {
    return m_time_grain;
}
void OAIChartDataProphetOptionsSchema::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

QJsonValue OAIChartDataProphetOptionsSchema::getWeeklySeasonality() const {
    return m_weekly_seasonality;
}
void OAIChartDataProphetOptionsSchema::setWeeklySeasonality(const QJsonValue &weekly_seasonality) {
    m_weekly_seasonality = weekly_seasonality;
    m_weekly_seasonality_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_weekly_seasonality_Set() const{
    return m_weekly_seasonality_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_weekly_seasonality_Valid() const{
    return m_weekly_seasonality_isValid;
}

QJsonValue OAIChartDataProphetOptionsSchema::getYearlySeasonality() const {
    return m_yearly_seasonality;
}
void OAIChartDataProphetOptionsSchema::setYearlySeasonality(const QJsonValue &yearly_seasonality) {
    m_yearly_seasonality = yearly_seasonality;
    m_yearly_seasonality_isSet = true;
}

bool OAIChartDataProphetOptionsSchema::is_yearly_seasonality_Set() const{
    return m_yearly_seasonality_isSet;
}

bool OAIChartDataProphetOptionsSchema::is_yearly_seasonality_Valid() const{
    return m_yearly_seasonality_isValid;
}

bool OAIChartDataProphetOptionsSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yearly_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataProphetOptionsSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_interval_isValid && m_periods_isValid && m_time_grain_isValid && true;
}

} // namespace OpenAPI
