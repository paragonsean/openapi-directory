/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardDatasetSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardDatasetSchema::OAIDashboardDatasetSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardDatasetSchema::OAIDashboardDatasetSchema() {
    this->initializeModel();
}

OAIDashboardDatasetSchema::~OAIDashboardDatasetSchema() {}

void OAIDashboardDatasetSchema::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_column_formats_isSet = false;
    m_column_formats_isValid = false;

    m_column_types_isSet = false;
    m_column_types_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_datasource_name_isSet = false;
    m_datasource_name_isValid = false;

    m_default_endpoint_isSet = false;
    m_default_endpoint_isValid = false;

    m_edit_url_isSet = false;
    m_edit_url_isValid = false;

    m_fetch_values_predicate_isSet = false;
    m_fetch_values_predicate_isValid = false;

    m_filter_select_isSet = false;
    m_filter_select_isValid = false;

    m_filter_select_enabled_isSet = false;
    m_filter_select_enabled_isValid = false;

    m_granularity_sqla_isSet = false;
    m_granularity_sqla_isValid = false;

    m_health_check_message_isSet = false;
    m_health_check_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_sqllab_view_isSet = false;
    m_is_sqllab_view_isValid = false;

    m_main_dttm_col_isSet = false;
    m_main_dttm_col_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_by_choices_isSet = false;
    m_order_by_choices_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_perm_isSet = false;
    m_perm_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_select_star_isSet = false;
    m_select_star_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_template_params_isSet = false;
    m_template_params_isValid = false;

    m_time_grain_sqla_isSet = false;
    m_time_grain_sqla_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_verbose_map_isSet = false;
    m_verbose_map_isValid = false;
}

void OAIDashboardDatasetSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardDatasetSchema::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_column_formats_isValid = ::OpenAPI::fromJsonValue(m_column_formats, json[QString("column_formats")]);
    m_column_formats_isSet = !json[QString("column_formats")].isNull() && m_column_formats_isValid;

    m_column_types_isValid = ::OpenAPI::fromJsonValue(m_column_types, json[QString("column_types")]);
    m_column_types_isSet = !json[QString("column_types")].isNull() && m_column_types_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_datasource_name_isValid = ::OpenAPI::fromJsonValue(m_datasource_name, json[QString("datasource_name")]);
    m_datasource_name_isSet = !json[QString("datasource_name")].isNull() && m_datasource_name_isValid;

    m_default_endpoint_isValid = ::OpenAPI::fromJsonValue(m_default_endpoint, json[QString("default_endpoint")]);
    m_default_endpoint_isSet = !json[QString("default_endpoint")].isNull() && m_default_endpoint_isValid;

    m_edit_url_isValid = ::OpenAPI::fromJsonValue(m_edit_url, json[QString("edit_url")]);
    m_edit_url_isSet = !json[QString("edit_url")].isNull() && m_edit_url_isValid;

    m_fetch_values_predicate_isValid = ::OpenAPI::fromJsonValue(m_fetch_values_predicate, json[QString("fetch_values_predicate")]);
    m_fetch_values_predicate_isSet = !json[QString("fetch_values_predicate")].isNull() && m_fetch_values_predicate_isValid;

    m_filter_select_isValid = ::OpenAPI::fromJsonValue(m_filter_select, json[QString("filter_select")]);
    m_filter_select_isSet = !json[QString("filter_select")].isNull() && m_filter_select_isValid;

    m_filter_select_enabled_isValid = ::OpenAPI::fromJsonValue(m_filter_select_enabled, json[QString("filter_select_enabled")]);
    m_filter_select_enabled_isSet = !json[QString("filter_select_enabled")].isNull() && m_filter_select_enabled_isValid;

    if(json["granularity_sqla"].isArray()){
        auto arr = json["granularity_sqla"].toArray();
        m_granularity_sqla_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_granularity_sqla_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_granularity_sqla_isSet = !jval.isNull() && m_granularity_sqla_isValid;
                m_granularity_sqla.push_back(item);
            }
        }
    }

    m_health_check_message_isValid = ::OpenAPI::fromJsonValue(m_health_check_message, json[QString("health_check_message")]);
    m_health_check_message_isSet = !json[QString("health_check_message")].isNull() && m_health_check_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_sqllab_view_isValid = ::OpenAPI::fromJsonValue(m_is_sqllab_view, json[QString("is_sqllab_view")]);
    m_is_sqllab_view_isSet = !json[QString("is_sqllab_view")].isNull() && m_is_sqllab_view_isValid;

    m_main_dttm_col_isValid = ::OpenAPI::fromJsonValue(m_main_dttm_col, json[QString("main_dttm_col")]);
    m_main_dttm_col_isSet = !json[QString("main_dttm_col")].isNull() && m_main_dttm_col_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    if(json["order_by_choices"].isArray()){
        auto arr = json["order_by_choices"].toArray();
        m_order_by_choices_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_order_by_choices_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_order_by_choices_isSet = !jval.isNull() && m_order_by_choices_isValid;
                m_order_by_choices.push_back(item);
            }
        }
    }

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_perm_isValid = ::OpenAPI::fromJsonValue(m_perm, json[QString("perm")]);
    m_perm_isSet = !json[QString("perm")].isNull() && m_perm_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_select_star_isValid = ::OpenAPI::fromJsonValue(m_select_star, json[QString("select_star")]);
    m_select_star_isSet = !json[QString("select_star")].isNull() && m_select_star_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("table_name")]);
    m_table_name_isSet = !json[QString("table_name")].isNull() && m_table_name_isValid;

    m_template_params_isValid = ::OpenAPI::fromJsonValue(m_template_params, json[QString("template_params")]);
    m_template_params_isSet = !json[QString("template_params")].isNull() && m_template_params_isValid;

    if(json["time_grain_sqla"].isArray()){
        auto arr = json["time_grain_sqla"].toArray();
        m_time_grain_sqla_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_time_grain_sqla_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_time_grain_sqla_isSet = !jval.isNull() && m_time_grain_sqla_isValid;
                m_time_grain_sqla.push_back(item);
            }
        }
    }

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_verbose_map_isValid = ::OpenAPI::fromJsonValue(m_verbose_map, json[QString("verbose_map")]);
    m_verbose_map_isSet = !json[QString("verbose_map")].isNull() && m_verbose_map_isValid;
}

QString OAIDashboardDatasetSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardDatasetSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_column_formats_isSet) {
        obj.insert(QString("column_formats"), ::OpenAPI::toJsonValue(m_column_formats));
    }
    if (m_column_types.size() > 0) {
        obj.insert(QString("column_types"), ::OpenAPI::toJsonValue(m_column_types));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_datasource_name_isSet) {
        obj.insert(QString("datasource_name"), ::OpenAPI::toJsonValue(m_datasource_name));
    }
    if (m_default_endpoint_isSet) {
        obj.insert(QString("default_endpoint"), ::OpenAPI::toJsonValue(m_default_endpoint));
    }
    if (m_edit_url_isSet) {
        obj.insert(QString("edit_url"), ::OpenAPI::toJsonValue(m_edit_url));
    }
    if (m_fetch_values_predicate_isSet) {
        obj.insert(QString("fetch_values_predicate"), ::OpenAPI::toJsonValue(m_fetch_values_predicate));
    }
    if (m_filter_select_isSet) {
        obj.insert(QString("filter_select"), ::OpenAPI::toJsonValue(m_filter_select));
    }
    if (m_filter_select_enabled_isSet) {
        obj.insert(QString("filter_select_enabled"), ::OpenAPI::toJsonValue(m_filter_select_enabled));
    }
    if (m_granularity_sqla.size() > 0) {
        
        obj.insert(QString("granularity_sqla"), toJsonValue(m_granularity_sqla));
    }
    if (m_health_check_message_isSet) {
        obj.insert(QString("health_check_message"), ::OpenAPI::toJsonValue(m_health_check_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_sqllab_view_isSet) {
        obj.insert(QString("is_sqllab_view"), ::OpenAPI::toJsonValue(m_is_sqllab_view));
    }
    if (m_main_dttm_col_isSet) {
        obj.insert(QString("main_dttm_col"), ::OpenAPI::toJsonValue(m_main_dttm_col));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_by_choices.size() > 0) {
        
        obj.insert(QString("order_by_choices"), toJsonValue(m_order_by_choices));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_params_isSet) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_perm_isSet) {
        obj.insert(QString("perm"), ::OpenAPI::toJsonValue(m_perm));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_select_star_isSet) {
        obj.insert(QString("select_star"), ::OpenAPI::toJsonValue(m_select_star));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("table_name"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_template_params_isSet) {
        obj.insert(QString("template_params"), ::OpenAPI::toJsonValue(m_template_params));
    }
    if (m_time_grain_sqla.size() > 0) {
        
        obj.insert(QString("time_grain_sqla"), toJsonValue(m_time_grain_sqla));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_verbose_map.size() > 0) {
        obj.insert(QString("verbose_map"), ::OpenAPI::toJsonValue(m_verbose_map));
    }
    return obj;
}

qint32 OAIDashboardDatasetSchema::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIDashboardDatasetSchema::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIDashboardDatasetSchema::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIDashboardDatasetSchema::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

OAIObject OAIDashboardDatasetSchema::getColumnFormats() const {
    return m_column_formats;
}
void OAIDashboardDatasetSchema::setColumnFormats(const OAIObject &column_formats) {
    m_column_formats = column_formats;
    m_column_formats_isSet = true;
}

bool OAIDashboardDatasetSchema::is_column_formats_Set() const{
    return m_column_formats_isSet;
}

bool OAIDashboardDatasetSchema::is_column_formats_Valid() const{
    return m_column_formats_isValid;
}

QList<qint32> OAIDashboardDatasetSchema::getColumnTypes() const {
    return m_column_types;
}
void OAIDashboardDatasetSchema::setColumnTypes(const QList<qint32> &column_types) {
    m_column_types = column_types;
    m_column_types_isSet = true;
}

bool OAIDashboardDatasetSchema::is_column_types_Set() const{
    return m_column_types_isSet;
}

bool OAIDashboardDatasetSchema::is_column_types_Valid() const{
    return m_column_types_isValid;
}

QList<OAIObject> OAIDashboardDatasetSchema::getColumns() const {
    return m_columns;
}
void OAIDashboardDatasetSchema::setColumns(const QList<OAIObject> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDashboardDatasetSchema::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDashboardDatasetSchema::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIDatabase OAIDashboardDatasetSchema::getDatabase() const {
    return m_database;
}
void OAIDashboardDatasetSchema::setDatabase(const OAIDatabase &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDashboardDatasetSchema::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDashboardDatasetSchema::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIDashboardDatasetSchema::getDatasourceName() const {
    return m_datasource_name;
}
void OAIDashboardDatasetSchema::setDatasourceName(const QString &datasource_name) {
    m_datasource_name = datasource_name;
    m_datasource_name_isSet = true;
}

bool OAIDashboardDatasetSchema::is_datasource_name_Set() const{
    return m_datasource_name_isSet;
}

bool OAIDashboardDatasetSchema::is_datasource_name_Valid() const{
    return m_datasource_name_isValid;
}

QString OAIDashboardDatasetSchema::getDefaultEndpoint() const {
    return m_default_endpoint;
}
void OAIDashboardDatasetSchema::setDefaultEndpoint(const QString &default_endpoint) {
    m_default_endpoint = default_endpoint;
    m_default_endpoint_isSet = true;
}

bool OAIDashboardDatasetSchema::is_default_endpoint_Set() const{
    return m_default_endpoint_isSet;
}

bool OAIDashboardDatasetSchema::is_default_endpoint_Valid() const{
    return m_default_endpoint_isValid;
}

QString OAIDashboardDatasetSchema::getEditUrl() const {
    return m_edit_url;
}
void OAIDashboardDatasetSchema::setEditUrl(const QString &edit_url) {
    m_edit_url = edit_url;
    m_edit_url_isSet = true;
}

bool OAIDashboardDatasetSchema::is_edit_url_Set() const{
    return m_edit_url_isSet;
}

bool OAIDashboardDatasetSchema::is_edit_url_Valid() const{
    return m_edit_url_isValid;
}

QString OAIDashboardDatasetSchema::getFetchValuesPredicate() const {
    return m_fetch_values_predicate;
}
void OAIDashboardDatasetSchema::setFetchValuesPredicate(const QString &fetch_values_predicate) {
    m_fetch_values_predicate = fetch_values_predicate;
    m_fetch_values_predicate_isSet = true;
}

bool OAIDashboardDatasetSchema::is_fetch_values_predicate_Set() const{
    return m_fetch_values_predicate_isSet;
}

bool OAIDashboardDatasetSchema::is_fetch_values_predicate_Valid() const{
    return m_fetch_values_predicate_isValid;
}

bool OAIDashboardDatasetSchema::isFilterSelect() const {
    return m_filter_select;
}
void OAIDashboardDatasetSchema::setFilterSelect(const bool &filter_select) {
    m_filter_select = filter_select;
    m_filter_select_isSet = true;
}

bool OAIDashboardDatasetSchema::is_filter_select_Set() const{
    return m_filter_select_isSet;
}

bool OAIDashboardDatasetSchema::is_filter_select_Valid() const{
    return m_filter_select_isValid;
}

bool OAIDashboardDatasetSchema::isFilterSelectEnabled() const {
    return m_filter_select_enabled;
}
void OAIDashboardDatasetSchema::setFilterSelectEnabled(const bool &filter_select_enabled) {
    m_filter_select_enabled = filter_select_enabled;
    m_filter_select_enabled_isSet = true;
}

bool OAIDashboardDatasetSchema::is_filter_select_enabled_Set() const{
    return m_filter_select_enabled_isSet;
}

bool OAIDashboardDatasetSchema::is_filter_select_enabled_Valid() const{
    return m_filter_select_enabled_isValid;
}

QList<QList<QString>> OAIDashboardDatasetSchema::getGranularitySqla() const {
    return m_granularity_sqla;
}
void OAIDashboardDatasetSchema::setGranularitySqla(const QList<QList<QString>> &granularity_sqla) {
    m_granularity_sqla = granularity_sqla;
    m_granularity_sqla_isSet = true;
}

bool OAIDashboardDatasetSchema::is_granularity_sqla_Set() const{
    return m_granularity_sqla_isSet;
}

bool OAIDashboardDatasetSchema::is_granularity_sqla_Valid() const{
    return m_granularity_sqla_isValid;
}

QString OAIDashboardDatasetSchema::getHealthCheckMessage() const {
    return m_health_check_message;
}
void OAIDashboardDatasetSchema::setHealthCheckMessage(const QString &health_check_message) {
    m_health_check_message = health_check_message;
    m_health_check_message_isSet = true;
}

bool OAIDashboardDatasetSchema::is_health_check_message_Set() const{
    return m_health_check_message_isSet;
}

bool OAIDashboardDatasetSchema::is_health_check_message_Valid() const{
    return m_health_check_message_isValid;
}

qint32 OAIDashboardDatasetSchema::getId() const {
    return m_id;
}
void OAIDashboardDatasetSchema::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDashboardDatasetSchema::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDashboardDatasetSchema::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDashboardDatasetSchema::isIsSqllabView() const {
    return m_is_sqllab_view;
}
void OAIDashboardDatasetSchema::setIsSqllabView(const bool &is_sqllab_view) {
    m_is_sqllab_view = is_sqllab_view;
    m_is_sqllab_view_isSet = true;
}

bool OAIDashboardDatasetSchema::is_is_sqllab_view_Set() const{
    return m_is_sqllab_view_isSet;
}

bool OAIDashboardDatasetSchema::is_is_sqllab_view_Valid() const{
    return m_is_sqllab_view_isValid;
}

QString OAIDashboardDatasetSchema::getMainDttmCol() const {
    return m_main_dttm_col;
}
void OAIDashboardDatasetSchema::setMainDttmCol(const QString &main_dttm_col) {
    m_main_dttm_col = main_dttm_col;
    m_main_dttm_col_isSet = true;
}

bool OAIDashboardDatasetSchema::is_main_dttm_col_Set() const{
    return m_main_dttm_col_isSet;
}

bool OAIDashboardDatasetSchema::is_main_dttm_col_Valid() const{
    return m_main_dttm_col_isValid;
}

QList<OAIObject> OAIDashboardDatasetSchema::getMetrics() const {
    return m_metrics;
}
void OAIDashboardDatasetSchema::setMetrics(const QList<OAIObject> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDashboardDatasetSchema::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDashboardDatasetSchema::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIDashboardDatasetSchema::getName() const {
    return m_name;
}
void OAIDashboardDatasetSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboardDatasetSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboardDatasetSchema::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDashboardDatasetSchema::getOffset() const {
    return m_offset;
}
void OAIDashboardDatasetSchema::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIDashboardDatasetSchema::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIDashboardDatasetSchema::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<QList<QString>> OAIDashboardDatasetSchema::getOrderByChoices() const {
    return m_order_by_choices;
}
void OAIDashboardDatasetSchema::setOrderByChoices(const QList<QList<QString>> &order_by_choices) {
    m_order_by_choices = order_by_choices;
    m_order_by_choices_isSet = true;
}

bool OAIDashboardDatasetSchema::is_order_by_choices_Set() const{
    return m_order_by_choices_isSet;
}

bool OAIDashboardDatasetSchema::is_order_by_choices_Valid() const{
    return m_order_by_choices_isValid;
}

QList<qint32> OAIDashboardDatasetSchema::getOwners() const {
    return m_owners;
}
void OAIDashboardDatasetSchema::setOwners(const QList<qint32> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDashboardDatasetSchema::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDashboardDatasetSchema::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDashboardDatasetSchema::getParams() const {
    return m_params;
}
void OAIDashboardDatasetSchema::setParams(const QString &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIDashboardDatasetSchema::is_params_Set() const{
    return m_params_isSet;
}

bool OAIDashboardDatasetSchema::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIDashboardDatasetSchema::getPerm() const {
    return m_perm;
}
void OAIDashboardDatasetSchema::setPerm(const QString &perm) {
    m_perm = perm;
    m_perm_isSet = true;
}

bool OAIDashboardDatasetSchema::is_perm_Set() const{
    return m_perm_isSet;
}

bool OAIDashboardDatasetSchema::is_perm_Valid() const{
    return m_perm_isValid;
}

QString OAIDashboardDatasetSchema::getSchema() const {
    return m_schema;
}
void OAIDashboardDatasetSchema::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDashboardDatasetSchema::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDashboardDatasetSchema::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDashboardDatasetSchema::getSelectStar() const {
    return m_select_star;
}
void OAIDashboardDatasetSchema::setSelectStar(const QString &select_star) {
    m_select_star = select_star;
    m_select_star_isSet = true;
}

bool OAIDashboardDatasetSchema::is_select_star_Set() const{
    return m_select_star_isSet;
}

bool OAIDashboardDatasetSchema::is_select_star_Valid() const{
    return m_select_star_isValid;
}

QString OAIDashboardDatasetSchema::getSql() const {
    return m_sql;
}
void OAIDashboardDatasetSchema::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIDashboardDatasetSchema::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIDashboardDatasetSchema::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIDashboardDatasetSchema::getTableName() const {
    return m_table_name;
}
void OAIDashboardDatasetSchema::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDashboardDatasetSchema::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDashboardDatasetSchema::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIDashboardDatasetSchema::getTemplateParams() const {
    return m_template_params;
}
void OAIDashboardDatasetSchema::setTemplateParams(const QString &template_params) {
    m_template_params = template_params;
    m_template_params_isSet = true;
}

bool OAIDashboardDatasetSchema::is_template_params_Set() const{
    return m_template_params_isSet;
}

bool OAIDashboardDatasetSchema::is_template_params_Valid() const{
    return m_template_params_isValid;
}

QList<QList<QString>> OAIDashboardDatasetSchema::getTimeGrainSqla() const {
    return m_time_grain_sqla;
}
void OAIDashboardDatasetSchema::setTimeGrainSqla(const QList<QList<QString>> &time_grain_sqla) {
    m_time_grain_sqla = time_grain_sqla;
    m_time_grain_sqla_isSet = true;
}

bool OAIDashboardDatasetSchema::is_time_grain_sqla_Set() const{
    return m_time_grain_sqla_isSet;
}

bool OAIDashboardDatasetSchema::is_time_grain_sqla_Valid() const{
    return m_time_grain_sqla_isValid;
}

QString OAIDashboardDatasetSchema::getType() const {
    return m_type;
}
void OAIDashboardDatasetSchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDashboardDatasetSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDashboardDatasetSchema::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDashboardDatasetSchema::getUid() const {
    return m_uid;
}
void OAIDashboardDatasetSchema::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIDashboardDatasetSchema::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIDashboardDatasetSchema::is_uid_Valid() const{
    return m_uid_isValid;
}

QMap<QString, QString> OAIDashboardDatasetSchema::getVerboseMap() const {
    return m_verbose_map;
}
void OAIDashboardDatasetSchema::setVerboseMap(const QMap<QString, QString> &verbose_map) {
    m_verbose_map = verbose_map;
    m_verbose_map_isSet = true;
}

bool OAIDashboardDatasetSchema::is_verbose_map_Set() const{
    return m_verbose_map_isSet;
}

bool OAIDashboardDatasetSchema::is_verbose_map_Valid() const{
    return m_verbose_map_isValid;
}

bool OAIDashboardDatasetSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_formats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_values_predicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_select_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_sqla.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sqllab_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_dttm_col_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_star_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_sqla.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbose_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardDatasetSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
