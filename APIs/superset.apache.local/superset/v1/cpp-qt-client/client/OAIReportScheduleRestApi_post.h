/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportScheduleRestApi_post.h
 *
 * 
 */

#ifndef OAIReportScheduleRestApi_post_H
#define OAIReportScheduleRestApi_post_H

#include <QJsonObject>

#include "OAIReportRecipient.h"
#include "OAIValidatorConfigJSON.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReportRecipient;
class OAIValidatorConfigJSON;

class OAIReportScheduleRestApi_post : public OAIObject {
public:
    OAIReportScheduleRestApi_post();
    OAIReportScheduleRestApi_post(QString json);
    ~OAIReportScheduleRestApi_post() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    qint32 getChart() const;
    void setChart(const qint32 &chart);
    bool is_chart_Set() const;
    bool is_chart_Valid() const;

    QString getContextMarkdown() const;
    void setContextMarkdown(const QString &context_markdown);
    bool is_context_markdown_Set() const;
    bool is_context_markdown_Valid() const;

    QJsonValue getCreationMethod() const;
    void setCreationMethod(const QJsonValue &creation_method);
    bool is_creation_method_Set() const;
    bool is_creation_method_Valid() const;

    QString getCrontab() const;
    void setCrontab(const QString &crontab);
    bool is_crontab_Set() const;
    bool is_crontab_Valid() const;

    qint32 getDashboard() const;
    void setDashboard(const qint32 &dashboard);
    bool is_dashboard_Set() const;
    bool is_dashboard_Valid() const;

    qint32 getDatabase() const;
    void setDatabase(const qint32 &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getGracePeriod() const;
    void setGracePeriod(const qint32 &grace_period);
    bool is_grace_period_Set() const;
    bool is_grace_period_Valid() const;

    qint32 getLogRetention() const;
    void setLogRetention(const qint32 &log_retention);
    bool is_log_retention_Set() const;
    bool is_log_retention_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<qint32> getOwners() const;
    void setOwners(const QList<qint32> &owners);
    bool is_owners_Set() const;
    bool is_owners_Valid() const;

    QList<OAIReportRecipient> getRecipients() const;
    void setRecipients(const QList<OAIReportRecipient> &recipients);
    bool is_recipients_Set() const;
    bool is_recipients_Valid() const;

    QString getReportFormat() const;
    void setReportFormat(const QString &report_format);
    bool is_report_format_Set() const;
    bool is_report_format_Valid() const;

    QString getSql() const;
    void setSql(const QString &sql);
    bool is_sql_Set() const;
    bool is_sql_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIValidatorConfigJSON getValidatorConfigJson() const;
    void setValidatorConfigJson(const OAIValidatorConfigJSON &validator_config_json);
    bool is_validator_config_json_Set() const;
    bool is_validator_config_json_Valid() const;

    QString getValidatorType() const;
    void setValidatorType(const QString &validator_type);
    bool is_validator_type_Set() const;
    bool is_validator_type_Valid() const;

    qint32 getWorkingTimeout() const;
    void setWorkingTimeout(const qint32 &working_timeout);
    bool is_working_timeout_Set() const;
    bool is_working_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    qint32 m_chart;
    bool m_chart_isSet;
    bool m_chart_isValid;

    QString m_context_markdown;
    bool m_context_markdown_isSet;
    bool m_context_markdown_isValid;

    QJsonValue m_creation_method;
    bool m_creation_method_isSet;
    bool m_creation_method_isValid;

    QString m_crontab;
    bool m_crontab_isSet;
    bool m_crontab_isValid;

    qint32 m_dashboard;
    bool m_dashboard_isSet;
    bool m_dashboard_isValid;

    qint32 m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_grace_period;
    bool m_grace_period_isSet;
    bool m_grace_period_isValid;

    qint32 m_log_retention;
    bool m_log_retention_isSet;
    bool m_log_retention_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<qint32> m_owners;
    bool m_owners_isSet;
    bool m_owners_isValid;

    QList<OAIReportRecipient> m_recipients;
    bool m_recipients_isSet;
    bool m_recipients_isValid;

    QString m_report_format;
    bool m_report_format_isSet;
    bool m_report_format_isValid;

    QString m_sql;
    bool m_sql_isSet;
    bool m_sql_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIValidatorConfigJSON m_validator_config_json;
    bool m_validator_config_json_isSet;
    bool m_validator_config_json_isValid;

    QString m_validator_type;
    bool m_validator_type_isSet;
    bool m_validator_type_isValid;

    qint32 m_working_timeout;
    bool m_working_timeout_isSet;
    bool m_working_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportScheduleRestApi_post)

#endif // OAIReportScheduleRestApi_post_H
