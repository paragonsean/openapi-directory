/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataFilter::OAIChartDataFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataFilter::OAIChartDataFilter() {
    this->initializeModel();
}

OAIChartDataFilter::~OAIChartDataFilter() {}

void OAIChartDataFilter::initializeModel() {

    m_col_isSet = false;
    m_col_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_val_isSet = false;
    m_val_isValid = false;
}

void OAIChartDataFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataFilter::fromJsonObject(QJsonObject json) {

    m_col_isValid = ::OpenAPI::fromJsonValue(m_col, json[QString("col")]);
    m_col_isSet = !json[QString("col")].isNull() && m_col_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_val_isValid = ::OpenAPI::fromJsonValue(m_val, json[QString("val")]);
    m_val_isSet = !json[QString("val")].isNull() && m_val_isValid;
}

QString OAIChartDataFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_col_isSet) {
        obj.insert(QString("col"), ::OpenAPI::toJsonValue(m_col));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_val_isSet) {
        obj.insert(QString("val"), ::OpenAPI::toJsonValue(m_val));
    }
    return obj;
}

QString OAIChartDataFilter::getCol() const {
    return m_col;
}
void OAIChartDataFilter::setCol(const QString &col) {
    m_col = col;
    m_col_isSet = true;
}

bool OAIChartDataFilter::is_col_Set() const{
    return m_col_isSet;
}

bool OAIChartDataFilter::is_col_Valid() const{
    return m_col_isValid;
}

QString OAIChartDataFilter::getOp() const {
    return m_op;
}
void OAIChartDataFilter::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIChartDataFilter::is_op_Set() const{
    return m_op_isSet;
}

bool OAIChartDataFilter::is_op_Valid() const{
    return m_op_isValid;
}

QJsonValue OAIChartDataFilter::getVal() const {
    return m_val;
}
void OAIChartDataFilter::setVal(const QJsonValue &val) {
    m_val = val;
    m_val_isSet = true;
}

bool OAIChartDataFilter::is_val_Set() const{
    return m_val_isSet;
}

bool OAIChartDataFilter::is_val_Valid() const{
    return m_val_isValid;
}

bool OAIChartDataFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_col_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_val_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_col_isValid && m_op_isValid && true;
}

} // namespace OpenAPI
