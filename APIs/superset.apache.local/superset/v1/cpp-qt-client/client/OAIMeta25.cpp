/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta25.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta25::OAIMeta25(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta25::OAIMeta25() {
    this->initializeModel();
}

OAIMeta25::~OAIMeta25() {}

void OAIMeta25::initializeModel() {

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_d3format_isSet = false;
    m_d3format_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_type_isSet = false;
    m_metric_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_verbose_name_isSet = false;
    m_verbose_name_isValid = false;

    m_warning_text_isSet = false;
    m_warning_text_isValid = false;
}

void OAIMeta25::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta25::fromJsonObject(QJsonObject json) {

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_d3format_isValid = ::OpenAPI::fromJsonValue(m_d3format, json[QString("d3format")]);
    m_d3format_isSet = !json[QString("d3format")].isNull() && m_d3format_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metric_name")]);
    m_metric_name_isSet = !json[QString("metric_name")].isNull() && m_metric_name_isValid;

    m_metric_type_isValid = ::OpenAPI::fromJsonValue(m_metric_type, json[QString("metric_type")]);
    m_metric_type_isSet = !json[QString("metric_type")].isNull() && m_metric_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_verbose_name_isValid = ::OpenAPI::fromJsonValue(m_verbose_name, json[QString("verbose_name")]);
    m_verbose_name_isSet = !json[QString("verbose_name")].isNull() && m_verbose_name_isValid;

    m_warning_text_isValid = ::OpenAPI::fromJsonValue(m_warning_text, json[QString("warning_text")]);
    m_warning_text_isSet = !json[QString("warning_text")].isNull() && m_warning_text_isValid;
}

QString OAIMeta25::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta25::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_d3format_isSet) {
        obj.insert(QString("d3format"), ::OpenAPI::toJsonValue(m_d3format));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metric_name"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_type_isSet) {
        obj.insert(QString("metric_type"), ::OpenAPI::toJsonValue(m_metric_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_verbose_name_isSet) {
        obj.insert(QString("verbose_name"), ::OpenAPI::toJsonValue(m_verbose_name));
    }
    if (m_warning_text_isSet) {
        obj.insert(QString("warning_text"), ::OpenAPI::toJsonValue(m_warning_text));
    }
    return obj;
}

QDateTime OAIMeta25::getChangedOn() const {
    return m_changed_on;
}
void OAIMeta25::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIMeta25::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIMeta25::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QDateTime OAIMeta25::getCreatedOn() const {
    return m_created_on;
}
void OAIMeta25::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIMeta25::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIMeta25::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIMeta25::getD3format() const {
    return m_d3format;
}
void OAIMeta25::setD3format(const QString &d3format) {
    m_d3format = d3format;
    m_d3format_isSet = true;
}

bool OAIMeta25::is_d3format_Set() const{
    return m_d3format_isSet;
}

bool OAIMeta25::is_d3format_Valid() const{
    return m_d3format_isValid;
}

QString OAIMeta25::getDescription() const {
    return m_description;
}
void OAIMeta25::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMeta25::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMeta25::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMeta25::getExpression() const {
    return m_expression;
}
void OAIMeta25::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMeta25::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMeta25::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIMeta25::getExtra() const {
    return m_extra;
}
void OAIMeta25::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIMeta25::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIMeta25::is_extra_Valid() const{
    return m_extra_isValid;
}

qint32 OAIMeta25::getId() const {
    return m_id;
}
void OAIMeta25::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMeta25::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMeta25::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMeta25::getMetricName() const {
    return m_metric_name;
}
void OAIMeta25::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMeta25::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMeta25::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIMeta25::getMetricType() const {
    return m_metric_type;
}
void OAIMeta25::setMetricType(const QString &metric_type) {
    m_metric_type = metric_type;
    m_metric_type_isSet = true;
}

bool OAIMeta25::is_metric_type_Set() const{
    return m_metric_type_isSet;
}

bool OAIMeta25::is_metric_type_Valid() const{
    return m_metric_type_isValid;
}

QString OAIMeta25::getUuid() const {
    return m_uuid;
}
void OAIMeta25::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIMeta25::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIMeta25::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIMeta25::getVerboseName() const {
    return m_verbose_name;
}
void OAIMeta25::setVerboseName(const QString &verbose_name) {
    m_verbose_name = verbose_name;
    m_verbose_name_isSet = true;
}

bool OAIMeta25::is_verbose_name_Set() const{
    return m_verbose_name_isSet;
}

bool OAIMeta25::is_verbose_name_Valid() const{
    return m_verbose_name_isValid;
}

QString OAIMeta25::getWarningText() const {
    return m_warning_text;
}
void OAIMeta25::setWarningText(const QString &warning_text) {
    m_warning_text = warning_text;
    m_warning_text_isSet = true;
}

bool OAIMeta25::is_warning_text_Set() const{
    return m_warning_text_isSet;
}

bool OAIMeta25::is_warning_text_Valid() const{
    return m_warning_text_isValid;
}

bool OAIMeta25::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d3format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbose_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta25::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_metric_name_isValid && true;
}

} // namespace OpenAPI
