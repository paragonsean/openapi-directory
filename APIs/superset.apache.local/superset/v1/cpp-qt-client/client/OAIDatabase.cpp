/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabase::OAIDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabase::OAIDatabase() {
    this->initializeModel();
}

OAIDatabase::~OAIDatabase() {}

void OAIDatabase::initializeModel() {

    m_allow_multi_schema_metadata_fetch_isSet = false;
    m_allow_multi_schema_metadata_fetch_isValid = false;

    m_allows_cost_estimate_isSet = false;
    m_allows_cost_estimate_isValid = false;

    m_allows_subquery_isSet = false;
    m_allows_subquery_isValid = false;

    m_allows_virtual_table_explore_isSet = false;
    m_allows_virtual_table_explore_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_explore_database_id_isSet = false;
    m_explore_database_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabase::fromJsonObject(QJsonObject json) {

    m_allow_multi_schema_metadata_fetch_isValid = ::OpenAPI::fromJsonValue(m_allow_multi_schema_metadata_fetch, json[QString("allow_multi_schema_metadata_fetch")]);
    m_allow_multi_schema_metadata_fetch_isSet = !json[QString("allow_multi_schema_metadata_fetch")].isNull() && m_allow_multi_schema_metadata_fetch_isValid;

    m_allows_cost_estimate_isValid = ::OpenAPI::fromJsonValue(m_allows_cost_estimate, json[QString("allows_cost_estimate")]);
    m_allows_cost_estimate_isSet = !json[QString("allows_cost_estimate")].isNull() && m_allows_cost_estimate_isValid;

    m_allows_subquery_isValid = ::OpenAPI::fromJsonValue(m_allows_subquery, json[QString("allows_subquery")]);
    m_allows_subquery_isSet = !json[QString("allows_subquery")].isNull() && m_allows_subquery_isValid;

    m_allows_virtual_table_explore_isValid = ::OpenAPI::fromJsonValue(m_allows_virtual_table_explore, json[QString("allows_virtual_table_explore")]);
    m_allows_virtual_table_explore_isSet = !json[QString("allows_virtual_table_explore")].isNull() && m_allows_virtual_table_explore_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_explore_database_id_isValid = ::OpenAPI::fromJsonValue(m_explore_database_id, json[QString("explore_database_id")]);
    m_explore_database_id_isSet = !json[QString("explore_database_id")].isNull() && m_explore_database_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_multi_schema_metadata_fetch_isSet) {
        obj.insert(QString("allow_multi_schema_metadata_fetch"), ::OpenAPI::toJsonValue(m_allow_multi_schema_metadata_fetch));
    }
    if (m_allows_cost_estimate_isSet) {
        obj.insert(QString("allows_cost_estimate"), ::OpenAPI::toJsonValue(m_allows_cost_estimate));
    }
    if (m_allows_subquery_isSet) {
        obj.insert(QString("allows_subquery"), ::OpenAPI::toJsonValue(m_allows_subquery));
    }
    if (m_allows_virtual_table_explore_isSet) {
        obj.insert(QString("allows_virtual_table_explore"), ::OpenAPI::toJsonValue(m_allows_virtual_table_explore));
    }
    if (m_backend_isSet) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_explore_database_id_isSet) {
        obj.insert(QString("explore_database_id"), ::OpenAPI::toJsonValue(m_explore_database_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIDatabase::isAllowMultiSchemaMetadataFetch() const {
    return m_allow_multi_schema_metadata_fetch;
}
void OAIDatabase::setAllowMultiSchemaMetadataFetch(const bool &allow_multi_schema_metadata_fetch) {
    m_allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch;
    m_allow_multi_schema_metadata_fetch_isSet = true;
}

bool OAIDatabase::is_allow_multi_schema_metadata_fetch_Set() const{
    return m_allow_multi_schema_metadata_fetch_isSet;
}

bool OAIDatabase::is_allow_multi_schema_metadata_fetch_Valid() const{
    return m_allow_multi_schema_metadata_fetch_isValid;
}

bool OAIDatabase::isAllowsCostEstimate() const {
    return m_allows_cost_estimate;
}
void OAIDatabase::setAllowsCostEstimate(const bool &allows_cost_estimate) {
    m_allows_cost_estimate = allows_cost_estimate;
    m_allows_cost_estimate_isSet = true;
}

bool OAIDatabase::is_allows_cost_estimate_Set() const{
    return m_allows_cost_estimate_isSet;
}

bool OAIDatabase::is_allows_cost_estimate_Valid() const{
    return m_allows_cost_estimate_isValid;
}

bool OAIDatabase::isAllowsSubquery() const {
    return m_allows_subquery;
}
void OAIDatabase::setAllowsSubquery(const bool &allows_subquery) {
    m_allows_subquery = allows_subquery;
    m_allows_subquery_isSet = true;
}

bool OAIDatabase::is_allows_subquery_Set() const{
    return m_allows_subquery_isSet;
}

bool OAIDatabase::is_allows_subquery_Valid() const{
    return m_allows_subquery_isValid;
}

bool OAIDatabase::isAllowsVirtualTableExplore() const {
    return m_allows_virtual_table_explore;
}
void OAIDatabase::setAllowsVirtualTableExplore(const bool &allows_virtual_table_explore) {
    m_allows_virtual_table_explore = allows_virtual_table_explore;
    m_allows_virtual_table_explore_isSet = true;
}

bool OAIDatabase::is_allows_virtual_table_explore_Set() const{
    return m_allows_virtual_table_explore_isSet;
}

bool OAIDatabase::is_allows_virtual_table_explore_Valid() const{
    return m_allows_virtual_table_explore_isValid;
}

QString OAIDatabase::getBackend() const {
    return m_backend;
}
void OAIDatabase::setBackend(const QString &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIDatabase::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIDatabase::is_backend_Valid() const{
    return m_backend_isValid;
}

qint32 OAIDatabase::getExploreDatabaseId() const {
    return m_explore_database_id;
}
void OAIDatabase::setExploreDatabaseId(const qint32 &explore_database_id) {
    m_explore_database_id = explore_database_id;
    m_explore_database_id_isSet = true;
}

bool OAIDatabase::is_explore_database_id_Set() const{
    return m_explore_database_id_isSet;
}

bool OAIDatabase::is_explore_database_id_Valid() const{
    return m_explore_database_id_isValid;
}

qint32 OAIDatabase::getId() const {
    return m_id;
}
void OAIDatabase::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatabase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatabase::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDatabase::getName() const {
    return m_name;
}
void OAIDatabase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabase::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_multi_schema_metadata_fetch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_cost_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_subquery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_virtual_table_explore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explore_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
