/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenshot_query_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenshot_query_schema::OAIScreenshot_query_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenshot_query_schema::OAIScreenshot_query_schema() {
    this->initializeModel();
}

OAIScreenshot_query_schema::~OAIScreenshot_query_schema() {}

void OAIScreenshot_query_schema::initializeModel() {

    m_force_isSet = false;
    m_force_isValid = false;

    m_thumb_size_isSet = false;
    m_thumb_size_isValid = false;

    m_window_size_isSet = false;
    m_window_size_isValid = false;
}

void OAIScreenshot_query_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenshot_query_schema::fromJsonObject(QJsonObject json) {

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_thumb_size_isValid = ::OpenAPI::fromJsonValue(m_thumb_size, json[QString("thumb_size")]);
    m_thumb_size_isSet = !json[QString("thumb_size")].isNull() && m_thumb_size_isValid;

    m_window_size_isValid = ::OpenAPI::fromJsonValue(m_window_size, json[QString("window_size")]);
    m_window_size_isSet = !json[QString("window_size")].isNull() && m_window_size_isValid;
}

QString OAIScreenshot_query_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenshot_query_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_thumb_size.size() > 0) {
        obj.insert(QString("thumb_size"), ::OpenAPI::toJsonValue(m_thumb_size));
    }
    if (m_window_size.size() > 0) {
        obj.insert(QString("window_size"), ::OpenAPI::toJsonValue(m_window_size));
    }
    return obj;
}

bool OAIScreenshot_query_schema::isForce() const {
    return m_force;
}
void OAIScreenshot_query_schema::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIScreenshot_query_schema::is_force_Set() const{
    return m_force_isSet;
}

bool OAIScreenshot_query_schema::is_force_Valid() const{
    return m_force_isValid;
}

QList<qint32> OAIScreenshot_query_schema::getThumbSize() const {
    return m_thumb_size;
}
void OAIScreenshot_query_schema::setThumbSize(const QList<qint32> &thumb_size) {
    m_thumb_size = thumb_size;
    m_thumb_size_isSet = true;
}

bool OAIScreenshot_query_schema::is_thumb_size_Set() const{
    return m_thumb_size_isSet;
}

bool OAIScreenshot_query_schema::is_thumb_size_Valid() const{
    return m_thumb_size_isValid;
}

QList<qint32> OAIScreenshot_query_schema::getWindowSize() const {
    return m_window_size;
}
void OAIScreenshot_query_schema::setWindowSize(const QList<qint32> &window_size) {
    m_window_size = window_size;
    m_window_size_isSet = true;
}

bool OAIScreenshot_query_schema::is_window_size_Set() const{
    return m_window_size_isSet;
}

bool OAIScreenshot_query_schema::is_window_size_Valid() const{
    return m_window_size_isValid;
}

bool OAIScreenshot_query_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenshot_query_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
