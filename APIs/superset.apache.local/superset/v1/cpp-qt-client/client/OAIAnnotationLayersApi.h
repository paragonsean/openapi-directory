/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnnotationLayersApi_H
#define OAI_OAIAnnotationLayersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnnotationLayerRestApi_post.h"
#include "OAIAnnotationLayerRestApi_put.h"
#include "OAIAnnotationRestApi_post.h"
#include "OAIAnnotationRestApi_put.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIRelatedResponseSchema.h"
#include "OAI_annotation_layer__get_200_response.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_annotation_layer__pk__annotation__annotation_id__get_200_response.h"
#include "OAI_annotation_layer__pk__annotation__annotation_id__put_200_response.h"
#include "OAI_annotation_layer__pk__annotation__get_200_response.h"
#include "OAI_annotation_layer__pk__annotation__post_201_response.h"
#include "OAI_annotation_layer__pk__get_200_response.h"
#include "OAI_annotation_layer__pk__put_200_response.h"
#include "OAI_annotation_layer__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnnotationLayersApi : public QObject {
    Q_OBJECT

public:
    OAIAnnotationLayersApi(const int timeOut = 0);
    ~OAIAnnotationLayersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void annotationLayerDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void annotationLayerGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void annotationLayerInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  annotation_id qint32 [required]
    */
    virtual void annotationLayerPkAnnotationAnnotationIdDelete(const qint32 &pk, const qint32 &annotation_id);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  annotation_id qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void annotationLayerPkAnnotationAnnotationIdGet(const qint32 &pk, const qint32 &annotation_id, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  annotation_id qint32 [required]
    * @param[in]  oai_annotation_rest_api_put OAIAnnotationRestApi_put [required]
    */
    virtual void annotationLayerPkAnnotationAnnotationIdPut(const qint32 &pk, const qint32 &annotation_id, const OAIAnnotationRestApi_put &oai_annotation_rest_api_put);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void annotationLayerPkAnnotationDelete(const qint32 &pk, const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void annotationLayerPkAnnotationGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_annotation_rest_api_post OAIAnnotationRestApi_post [required]
    */
    virtual void annotationLayerPkAnnotationPost(const qint32 &pk, const OAIAnnotationRestApi_post &oai_annotation_rest_api_post);

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void annotationLayerPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void annotationLayerPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_annotation_layer_rest_api_put OAIAnnotationLayerRestApi_put [required]
    */
    virtual void annotationLayerPkPut(const qint32 &pk, const OAIAnnotationLayerRestApi_put &oai_annotation_layer_rest_api_put);

    /**
    * @param[in]  oai_annotation_layer_rest_api_post OAIAnnotationLayerRestApi_post [required]
    */
    virtual void annotationLayerPost(const OAIAnnotationLayerRestApi_post &oai_annotation_layer_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void annotationLayerRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void annotationLayerDeleteCallback(OAIHttpRequestWorker *worker);
    void annotationLayerGetCallback(OAIHttpRequestWorker *worker);
    void annotationLayerInfoGetCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationAnnotationIdDeleteCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationAnnotationIdGetCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationAnnotationIdPutCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationDeleteCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationGetCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkAnnotationPostCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkDeleteCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkGetCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPkPutCallback(OAIHttpRequestWorker *worker);
    void annotationLayerPostCallback(OAIHttpRequestWorker *worker);
    void annotationLayerRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void annotationLayerDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void annotationLayerGetSignal(OAI_annotation_layer__get_200_response summary);
    void annotationLayerInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void annotationLayerPkAnnotationAnnotationIdDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkAnnotationAnnotationIdGetSignal(OAI_annotation_layer__pk__annotation__annotation_id__get_200_response summary);
    void annotationLayerPkAnnotationAnnotationIdPutSignal(OAI_annotation_layer__pk__annotation__annotation_id__put_200_response summary);
    void annotationLayerPkAnnotationDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkAnnotationGetSignal(OAI_annotation_layer__pk__annotation__get_200_response summary);
    void annotationLayerPkAnnotationPostSignal(OAI_annotation_layer__pk__annotation__post_201_response summary);
    void annotationLayerPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkGetSignal(OAI_annotation_layer__pk__get_200_response summary);
    void annotationLayerPkPutSignal(OAI_annotation_layer__pk__put_200_response summary);
    void annotationLayerPostSignal(OAI_annotation_layer__post_201_response summary);
    void annotationLayerRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void annotationLayerDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void annotationLayerGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_200_response summary);
    void annotationLayerInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void annotationLayerPkAnnotationAnnotationIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkAnnotationAnnotationIdGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__annotation__annotation_id__get_200_response summary);
    void annotationLayerPkAnnotationAnnotationIdPutSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__annotation__annotation_id__put_200_response summary);
    void annotationLayerPkAnnotationDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkAnnotationGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__annotation__get_200_response summary);
    void annotationLayerPkAnnotationPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__annotation__post_201_response summary);
    void annotationLayerPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void annotationLayerPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__get_200_response summary);
    void annotationLayerPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__pk__put_200_response summary);
    void annotationLayerPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__post_201_response summary);
    void annotationLayerRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use annotationLayerDeleteSignalError() instead")
    void annotationLayerDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerGetSignalError() instead")
    void annotationLayerGetSignalE(OAI_annotation_layer__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerGetSignalError(OAI_annotation_layer__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerInfoGetSignalError() instead")
    void annotationLayerInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdDeleteSignalError() instead")
    void annotationLayerPkAnnotationAnnotationIdDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdGetSignalError() instead")
    void annotationLayerPkAnnotationAnnotationIdGetSignalE(OAI_annotation_layer__pk__annotation__annotation_id__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdGetSignalError(OAI_annotation_layer__pk__annotation__annotation_id__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdPutSignalError() instead")
    void annotationLayerPkAnnotationAnnotationIdPutSignalE(OAI_annotation_layer__pk__annotation__annotation_id__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdPutSignalError(OAI_annotation_layer__pk__annotation__annotation_id__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationDeleteSignalError() instead")
    void annotationLayerPkAnnotationDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationGetSignalError() instead")
    void annotationLayerPkAnnotationGetSignalE(OAI_annotation_layer__pk__annotation__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationGetSignalError(OAI_annotation_layer__pk__annotation__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationPostSignalError() instead")
    void annotationLayerPkAnnotationPostSignalE(OAI_annotation_layer__pk__annotation__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationPostSignalError(OAI_annotation_layer__pk__annotation__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkDeleteSignalError() instead")
    void annotationLayerPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkGetSignalError() instead")
    void annotationLayerPkGetSignalE(OAI_annotation_layer__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkGetSignalError(OAI_annotation_layer__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkPutSignalError() instead")
    void annotationLayerPkPutSignalE(OAI_annotation_layer__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkPutSignalError(OAI_annotation_layer__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPostSignalError() instead")
    void annotationLayerPostSignalE(OAI_annotation_layer__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPostSignalError(OAI_annotation_layer__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerRelatedColumnNameGetSignalError() instead")
    void annotationLayerRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use annotationLayerDeleteSignalErrorFull() instead")
    void annotationLayerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerGetSignalErrorFull() instead")
    void annotationLayerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerInfoGetSignalErrorFull() instead")
    void annotationLayerInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdDeleteSignalErrorFull() instead")
    void annotationLayerPkAnnotationAnnotationIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdGetSignalErrorFull() instead")
    void annotationLayerPkAnnotationAnnotationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationAnnotationIdPutSignalErrorFull() instead")
    void annotationLayerPkAnnotationAnnotationIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationAnnotationIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationDeleteSignalErrorFull() instead")
    void annotationLayerPkAnnotationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationGetSignalErrorFull() instead")
    void annotationLayerPkAnnotationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkAnnotationPostSignalErrorFull() instead")
    void annotationLayerPkAnnotationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkAnnotationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkDeleteSignalErrorFull() instead")
    void annotationLayerPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkGetSignalErrorFull() instead")
    void annotationLayerPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPkPutSignalErrorFull() instead")
    void annotationLayerPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerPostSignalErrorFull() instead")
    void annotationLayerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use annotationLayerRelatedColumnNameGetSignalErrorFull() instead")
    void annotationLayerRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void annotationLayerRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
