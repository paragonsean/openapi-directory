/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportScheduleRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportScheduleRestApi_get_list::OAIReportScheduleRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportScheduleRestApi_get_list::OAIReportScheduleRestApi_get_list() {
    this->initializeModel();
}

OAIReportScheduleRestApi_get_list::~OAIReportScheduleRestApi_get_list() {}

void OAIReportScheduleRestApi_get_list::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_changed_by_isSet = false;
    m_changed_by_isValid = false;

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_changed_on_delta_humanized_isSet = false;
    m_changed_on_delta_humanized_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_creation_method_isSet = false;
    m_creation_method_isValid = false;

    m_crontab_isSet = false;
    m_crontab_isValid = false;

    m_crontab_humanized_isSet = false;
    m_crontab_humanized_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_eval_dttm_isSet = false;
    m_last_eval_dttm_isValid = false;

    m_last_state_isSet = false;
    m_last_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReportScheduleRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportScheduleRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_changed_by_isValid = ::OpenAPI::fromJsonValue(m_changed_by, json[QString("changed_by")]);
    m_changed_by_isSet = !json[QString("changed_by")].isNull() && m_changed_by_isValid;

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_changed_on_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_changed_on_delta_humanized, json[QString("changed_on_delta_humanized")]);
    m_changed_on_delta_humanized_isSet = !json[QString("changed_on_delta_humanized")].isNull() && m_changed_on_delta_humanized_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_creation_method_isValid = ::OpenAPI::fromJsonValue(m_creation_method, json[QString("creation_method")]);
    m_creation_method_isSet = !json[QString("creation_method")].isNull() && m_creation_method_isValid;

    m_crontab_isValid = ::OpenAPI::fromJsonValue(m_crontab, json[QString("crontab")]);
    m_crontab_isSet = !json[QString("crontab")].isNull() && m_crontab_isValid;

    m_crontab_humanized_isValid = ::OpenAPI::fromJsonValue(m_crontab_humanized, json[QString("crontab_humanized")]);
    m_crontab_humanized_isSet = !json[QString("crontab_humanized")].isNull() && m_crontab_humanized_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_eval_dttm_isValid = ::OpenAPI::fromJsonValue(m_last_eval_dttm, json[QString("last_eval_dttm")]);
    m_last_eval_dttm_isSet = !json[QString("last_eval_dttm")].isNull() && m_last_eval_dttm_isValid;

    m_last_state_isValid = ::OpenAPI::fromJsonValue(m_last_state, json[QString("last_state")]);
    m_last_state_isSet = !json[QString("last_state")].isNull() && m_last_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReportScheduleRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportScheduleRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_changed_by.isSet()) {
        obj.insert(QString("changed_by"), ::OpenAPI::toJsonValue(m_changed_by));
    }
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_changed_on_delta_humanized_isSet) {
        obj.insert(QString("changed_on_delta_humanized"), ::OpenAPI::toJsonValue(m_changed_on_delta_humanized));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_creation_method_isSet) {
        obj.insert(QString("creation_method"), ::OpenAPI::toJsonValue(m_creation_method));
    }
    if (m_crontab_isSet) {
        obj.insert(QString("crontab"), ::OpenAPI::toJsonValue(m_crontab));
    }
    if (m_crontab_humanized_isSet) {
        obj.insert(QString("crontab_humanized"), ::OpenAPI::toJsonValue(m_crontab_humanized));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_eval_dttm_isSet) {
        obj.insert(QString("last_eval_dttm"), ::OpenAPI::toJsonValue(m_last_eval_dttm));
    }
    if (m_last_state_isSet) {
        obj.insert(QString("last_state"), ::OpenAPI::toJsonValue(m_last_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owners.isSet()) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_recipients.isSet()) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIReportScheduleRestApi_get_list::isActive() const {
    return m_active;
}
void OAIReportScheduleRestApi_get_list::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_active_Set() const{
    return m_active_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_active_Valid() const{
    return m_active_isValid;
}

OAIMeta34 OAIReportScheduleRestApi_get_list::getChangedBy() const {
    return m_changed_by;
}
void OAIReportScheduleRestApi_get_list::setChangedBy(const OAIMeta34 &changed_by) {
    m_changed_by = changed_by;
    m_changed_by_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_changed_by_Set() const{
    return m_changed_by_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_changed_by_Valid() const{
    return m_changed_by_isValid;
}

QDateTime OAIReportScheduleRestApi_get_list::getChangedOn() const {
    return m_changed_on;
}
void OAIReportScheduleRestApi_get_list::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QJsonValue OAIReportScheduleRestApi_get_list::getChangedOnDeltaHumanized() const {
    return m_changed_on_delta_humanized;
}
void OAIReportScheduleRestApi_get_list::setChangedOnDeltaHumanized(const QJsonValue &changed_on_delta_humanized) {
    m_changed_on_delta_humanized = changed_on_delta_humanized;
    m_changed_on_delta_humanized_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_changed_on_delta_humanized_Set() const{
    return m_changed_on_delta_humanized_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_changed_on_delta_humanized_Valid() const{
    return m_changed_on_delta_humanized_isValid;
}

OAIMeta33 OAIReportScheduleRestApi_get_list::getCreatedBy() const {
    return m_created_by;
}
void OAIReportScheduleRestApi_get_list::setCreatedBy(const OAIMeta33 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIReportScheduleRestApi_get_list::getCreatedOn() const {
    return m_created_on;
}
void OAIReportScheduleRestApi_get_list::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIReportScheduleRestApi_get_list::getCreationMethod() const {
    return m_creation_method;
}
void OAIReportScheduleRestApi_get_list::setCreationMethod(const QString &creation_method) {
    m_creation_method = creation_method;
    m_creation_method_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_creation_method_Set() const{
    return m_creation_method_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_creation_method_Valid() const{
    return m_creation_method_isValid;
}

QString OAIReportScheduleRestApi_get_list::getCrontab() const {
    return m_crontab;
}
void OAIReportScheduleRestApi_get_list::setCrontab(const QString &crontab) {
    m_crontab = crontab;
    m_crontab_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_crontab_Set() const{
    return m_crontab_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_crontab_Valid() const{
    return m_crontab_isValid;
}

QJsonValue OAIReportScheduleRestApi_get_list::getCrontabHumanized() const {
    return m_crontab_humanized;
}
void OAIReportScheduleRestApi_get_list::setCrontabHumanized(const QJsonValue &crontab_humanized) {
    m_crontab_humanized = crontab_humanized;
    m_crontab_humanized_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_crontab_humanized_Set() const{
    return m_crontab_humanized_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_crontab_humanized_Valid() const{
    return m_crontab_humanized_isValid;
}

QString OAIReportScheduleRestApi_get_list::getDescription() const {
    return m_description;
}
void OAIReportScheduleRestApi_get_list::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIReportScheduleRestApi_get_list::getId() const {
    return m_id;
}
void OAIReportScheduleRestApi_get_list::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIReportScheduleRestApi_get_list::getLastEvalDttm() const {
    return m_last_eval_dttm;
}
void OAIReportScheduleRestApi_get_list::setLastEvalDttm(const QDateTime &last_eval_dttm) {
    m_last_eval_dttm = last_eval_dttm;
    m_last_eval_dttm_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_last_eval_dttm_Set() const{
    return m_last_eval_dttm_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_last_eval_dttm_Valid() const{
    return m_last_eval_dttm_isValid;
}

QString OAIReportScheduleRestApi_get_list::getLastState() const {
    return m_last_state;
}
void OAIReportScheduleRestApi_get_list::setLastState(const QString &last_state) {
    m_last_state = last_state;
    m_last_state_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_last_state_Set() const{
    return m_last_state_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_last_state_Valid() const{
    return m_last_state_isValid;
}

QString OAIReportScheduleRestApi_get_list::getName() const {
    return m_name;
}
void OAIReportScheduleRestApi_get_list::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_name_Valid() const{
    return m_name_isValid;
}

OAIMeta36 OAIReportScheduleRestApi_get_list::getOwners() const {
    return m_owners;
}
void OAIReportScheduleRestApi_get_list::setOwners(const OAIMeta36 &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_owners_Valid() const{
    return m_owners_isValid;
}

OAIMeta35 OAIReportScheduleRestApi_get_list::getRecipients() const {
    return m_recipients;
}
void OAIReportScheduleRestApi_get_list::setRecipients(const OAIMeta35 &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIReportScheduleRestApi_get_list::getTimezone() const {
    return m_timezone;
}
void OAIReportScheduleRestApi_get_list::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIReportScheduleRestApi_get_list::getType() const {
    return m_type;
}
void OAIReportScheduleRestApi_get_list::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportScheduleRestApi_get_list::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportScheduleRestApi_get_list::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReportScheduleRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crontab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crontab_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_eval_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportScheduleRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_crontab_isValid && m_name_isValid && m_recipients_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
