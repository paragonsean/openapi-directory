/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseRestApi_get_list::OAIDatabaseRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseRestApi_get_list::OAIDatabaseRestApi_get_list() {
    this->initializeModel();
}

OAIDatabaseRestApi_get_list::~OAIDatabaseRestApi_get_list() {}

void OAIDatabaseRestApi_get_list::initializeModel() {

    m_allow_csv_upload_isSet = false;
    m_allow_csv_upload_isValid = false;

    m_allow_ctas_isSet = false;
    m_allow_ctas_isValid = false;

    m_allow_cvas_isSet = false;
    m_allow_cvas_isValid = false;

    m_allow_dml_isSet = false;
    m_allow_dml_isValid = false;

    m_allow_multi_schema_metadata_fetch_isSet = false;
    m_allow_multi_schema_metadata_fetch_isValid = false;

    m_allow_run_async_isSet = false;
    m_allow_run_async_isValid = false;

    m_allows_cost_estimate_isSet = false;
    m_allows_cost_estimate_isValid = false;

    m_allows_subquery_isSet = false;
    m_allows_subquery_isValid = false;

    m_allows_virtual_table_explore_isSet = false;
    m_allows_virtual_table_explore_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_changed_on_delta_humanized_isSet = false;
    m_changed_on_delta_humanized_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_explore_database_id_isSet = false;
    m_explore_database_id_isValid = false;

    m_expose_in_sqllab_isSet = false;
    m_expose_in_sqllab_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_force_ctas_schema_isSet = false;
    m_force_ctas_schema_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDatabaseRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_allow_csv_upload_isValid = ::OpenAPI::fromJsonValue(m_allow_csv_upload, json[QString("allow_csv_upload")]);
    m_allow_csv_upload_isSet = !json[QString("allow_csv_upload")].isNull() && m_allow_csv_upload_isValid;

    m_allow_ctas_isValid = ::OpenAPI::fromJsonValue(m_allow_ctas, json[QString("allow_ctas")]);
    m_allow_ctas_isSet = !json[QString("allow_ctas")].isNull() && m_allow_ctas_isValid;

    m_allow_cvas_isValid = ::OpenAPI::fromJsonValue(m_allow_cvas, json[QString("allow_cvas")]);
    m_allow_cvas_isSet = !json[QString("allow_cvas")].isNull() && m_allow_cvas_isValid;

    m_allow_dml_isValid = ::OpenAPI::fromJsonValue(m_allow_dml, json[QString("allow_dml")]);
    m_allow_dml_isSet = !json[QString("allow_dml")].isNull() && m_allow_dml_isValid;

    m_allow_multi_schema_metadata_fetch_isValid = ::OpenAPI::fromJsonValue(m_allow_multi_schema_metadata_fetch, json[QString("allow_multi_schema_metadata_fetch")]);
    m_allow_multi_schema_metadata_fetch_isSet = !json[QString("allow_multi_schema_metadata_fetch")].isNull() && m_allow_multi_schema_metadata_fetch_isValid;

    m_allow_run_async_isValid = ::OpenAPI::fromJsonValue(m_allow_run_async, json[QString("allow_run_async")]);
    m_allow_run_async_isSet = !json[QString("allow_run_async")].isNull() && m_allow_run_async_isValid;

    m_allows_cost_estimate_isValid = ::OpenAPI::fromJsonValue(m_allows_cost_estimate, json[QString("allows_cost_estimate")]);
    m_allows_cost_estimate_isSet = !json[QString("allows_cost_estimate")].isNull() && m_allows_cost_estimate_isValid;

    m_allows_subquery_isValid = ::OpenAPI::fromJsonValue(m_allows_subquery, json[QString("allows_subquery")]);
    m_allows_subquery_isSet = !json[QString("allows_subquery")].isNull() && m_allows_subquery_isValid;

    m_allows_virtual_table_explore_isValid = ::OpenAPI::fromJsonValue(m_allows_virtual_table_explore, json[QString("allows_virtual_table_explore")]);
    m_allows_virtual_table_explore_isSet = !json[QString("allows_virtual_table_explore")].isNull() && m_allows_virtual_table_explore_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_changed_on_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_changed_on_delta_humanized, json[QString("changed_on_delta_humanized")]);
    m_changed_on_delta_humanized_isSet = !json[QString("changed_on_delta_humanized")].isNull() && m_changed_on_delta_humanized_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("database_name")]);
    m_database_name_isSet = !json[QString("database_name")].isNull() && m_database_name_isValid;

    m_explore_database_id_isValid = ::OpenAPI::fromJsonValue(m_explore_database_id, json[QString("explore_database_id")]);
    m_explore_database_id_isSet = !json[QString("explore_database_id")].isNull() && m_explore_database_id_isValid;

    m_expose_in_sqllab_isValid = ::OpenAPI::fromJsonValue(m_expose_in_sqllab, json[QString("expose_in_sqllab")]);
    m_expose_in_sqllab_isSet = !json[QString("expose_in_sqllab")].isNull() && m_expose_in_sqllab_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_force_ctas_schema_isValid = ::OpenAPI::fromJsonValue(m_force_ctas_schema, json[QString("force_ctas_schema")]);
    m_force_ctas_schema_isSet = !json[QString("force_ctas_schema")].isNull() && m_force_ctas_schema_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIDatabaseRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_csv_upload_isSet) {
        obj.insert(QString("allow_csv_upload"), ::OpenAPI::toJsonValue(m_allow_csv_upload));
    }
    if (m_allow_ctas_isSet) {
        obj.insert(QString("allow_ctas"), ::OpenAPI::toJsonValue(m_allow_ctas));
    }
    if (m_allow_cvas_isSet) {
        obj.insert(QString("allow_cvas"), ::OpenAPI::toJsonValue(m_allow_cvas));
    }
    if (m_allow_dml_isSet) {
        obj.insert(QString("allow_dml"), ::OpenAPI::toJsonValue(m_allow_dml));
    }
    if (m_allow_multi_schema_metadata_fetch_isSet) {
        obj.insert(QString("allow_multi_schema_metadata_fetch"), ::OpenAPI::toJsonValue(m_allow_multi_schema_metadata_fetch));
    }
    if (m_allow_run_async_isSet) {
        obj.insert(QString("allow_run_async"), ::OpenAPI::toJsonValue(m_allow_run_async));
    }
    if (m_allows_cost_estimate_isSet) {
        obj.insert(QString("allows_cost_estimate"), ::OpenAPI::toJsonValue(m_allows_cost_estimate));
    }
    if (m_allows_subquery_isSet) {
        obj.insert(QString("allows_subquery"), ::OpenAPI::toJsonValue(m_allows_subquery));
    }
    if (m_allows_virtual_table_explore_isSet) {
        obj.insert(QString("allows_virtual_table_explore"), ::OpenAPI::toJsonValue(m_allows_virtual_table_explore));
    }
    if (m_backend_isSet) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_changed_on_delta_humanized_isSet) {
        obj.insert(QString("changed_on_delta_humanized"), ::OpenAPI::toJsonValue(m_changed_on_delta_humanized));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("database_name"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_explore_database_id_isSet) {
        obj.insert(QString("explore_database_id"), ::OpenAPI::toJsonValue(m_explore_database_id));
    }
    if (m_expose_in_sqllab_isSet) {
        obj.insert(QString("expose_in_sqllab"), ::OpenAPI::toJsonValue(m_expose_in_sqllab));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_force_ctas_schema_isSet) {
        obj.insert(QString("force_ctas_schema"), ::OpenAPI::toJsonValue(m_force_ctas_schema));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

bool OAIDatabaseRestApi_get_list::isAllowCsvUpload() const {
    return m_allow_csv_upload;
}
void OAIDatabaseRestApi_get_list::setAllowCsvUpload(const bool &allow_csv_upload) {
    m_allow_csv_upload = allow_csv_upload;
    m_allow_csv_upload_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_csv_upload_Set() const{
    return m_allow_csv_upload_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_csv_upload_Valid() const{
    return m_allow_csv_upload_isValid;
}

bool OAIDatabaseRestApi_get_list::isAllowCtas() const {
    return m_allow_ctas;
}
void OAIDatabaseRestApi_get_list::setAllowCtas(const bool &allow_ctas) {
    m_allow_ctas = allow_ctas;
    m_allow_ctas_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_ctas_Set() const{
    return m_allow_ctas_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_ctas_Valid() const{
    return m_allow_ctas_isValid;
}

bool OAIDatabaseRestApi_get_list::isAllowCvas() const {
    return m_allow_cvas;
}
void OAIDatabaseRestApi_get_list::setAllowCvas(const bool &allow_cvas) {
    m_allow_cvas = allow_cvas;
    m_allow_cvas_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_cvas_Set() const{
    return m_allow_cvas_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_cvas_Valid() const{
    return m_allow_cvas_isValid;
}

bool OAIDatabaseRestApi_get_list::isAllowDml() const {
    return m_allow_dml;
}
void OAIDatabaseRestApi_get_list::setAllowDml(const bool &allow_dml) {
    m_allow_dml = allow_dml;
    m_allow_dml_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_dml_Set() const{
    return m_allow_dml_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_dml_Valid() const{
    return m_allow_dml_isValid;
}

bool OAIDatabaseRestApi_get_list::isAllowMultiSchemaMetadataFetch() const {
    return m_allow_multi_schema_metadata_fetch;
}
void OAIDatabaseRestApi_get_list::setAllowMultiSchemaMetadataFetch(const bool &allow_multi_schema_metadata_fetch) {
    m_allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch;
    m_allow_multi_schema_metadata_fetch_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_multi_schema_metadata_fetch_Set() const{
    return m_allow_multi_schema_metadata_fetch_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_multi_schema_metadata_fetch_Valid() const{
    return m_allow_multi_schema_metadata_fetch_isValid;
}

bool OAIDatabaseRestApi_get_list::isAllowRunAsync() const {
    return m_allow_run_async;
}
void OAIDatabaseRestApi_get_list::setAllowRunAsync(const bool &allow_run_async) {
    m_allow_run_async = allow_run_async;
    m_allow_run_async_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allow_run_async_Set() const{
    return m_allow_run_async_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allow_run_async_Valid() const{
    return m_allow_run_async_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getAllowsCostEstimate() const {
    return m_allows_cost_estimate;
}
void OAIDatabaseRestApi_get_list::setAllowsCostEstimate(const QJsonValue &allows_cost_estimate) {
    m_allows_cost_estimate = allows_cost_estimate;
    m_allows_cost_estimate_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allows_cost_estimate_Set() const{
    return m_allows_cost_estimate_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allows_cost_estimate_Valid() const{
    return m_allows_cost_estimate_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getAllowsSubquery() const {
    return m_allows_subquery;
}
void OAIDatabaseRestApi_get_list::setAllowsSubquery(const QJsonValue &allows_subquery) {
    m_allows_subquery = allows_subquery;
    m_allows_subquery_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allows_subquery_Set() const{
    return m_allows_subquery_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allows_subquery_Valid() const{
    return m_allows_subquery_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getAllowsVirtualTableExplore() const {
    return m_allows_virtual_table_explore;
}
void OAIDatabaseRestApi_get_list::setAllowsVirtualTableExplore(const QJsonValue &allows_virtual_table_explore) {
    m_allows_virtual_table_explore = allows_virtual_table_explore;
    m_allows_virtual_table_explore_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_allows_virtual_table_explore_Set() const{
    return m_allows_virtual_table_explore_isSet;
}

bool OAIDatabaseRestApi_get_list::is_allows_virtual_table_explore_Valid() const{
    return m_allows_virtual_table_explore_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getBackend() const {
    return m_backend;
}
void OAIDatabaseRestApi_get_list::setBackend(const QJsonValue &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIDatabaseRestApi_get_list::is_backend_Valid() const{
    return m_backend_isValid;
}

QDateTime OAIDatabaseRestApi_get_list::getChangedOn() const {
    return m_changed_on;
}
void OAIDatabaseRestApi_get_list::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIDatabaseRestApi_get_list::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getChangedOnDeltaHumanized() const {
    return m_changed_on_delta_humanized;
}
void OAIDatabaseRestApi_get_list::setChangedOnDeltaHumanized(const QJsonValue &changed_on_delta_humanized) {
    m_changed_on_delta_humanized = changed_on_delta_humanized;
    m_changed_on_delta_humanized_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_changed_on_delta_humanized_Set() const{
    return m_changed_on_delta_humanized_isSet;
}

bool OAIDatabaseRestApi_get_list::is_changed_on_delta_humanized_Valid() const{
    return m_changed_on_delta_humanized_isValid;
}

OAIMeta18 OAIDatabaseRestApi_get_list::getCreatedBy() const {
    return m_created_by;
}
void OAIDatabaseRestApi_get_list::setCreatedBy(const OAIMeta18 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDatabaseRestApi_get_list::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDatabaseRestApi_get_list::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseRestApi_get_list::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseRestApi_get_list::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QJsonValue OAIDatabaseRestApi_get_list::getExploreDatabaseId() const {
    return m_explore_database_id;
}
void OAIDatabaseRestApi_get_list::setExploreDatabaseId(const QJsonValue &explore_database_id) {
    m_explore_database_id = explore_database_id;
    m_explore_database_id_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_explore_database_id_Set() const{
    return m_explore_database_id_isSet;
}

bool OAIDatabaseRestApi_get_list::is_explore_database_id_Valid() const{
    return m_explore_database_id_isValid;
}

bool OAIDatabaseRestApi_get_list::isExposeInSqllab() const {
    return m_expose_in_sqllab;
}
void OAIDatabaseRestApi_get_list::setExposeInSqllab(const bool &expose_in_sqllab) {
    m_expose_in_sqllab = expose_in_sqllab;
    m_expose_in_sqllab_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_expose_in_sqllab_Set() const{
    return m_expose_in_sqllab_isSet;
}

bool OAIDatabaseRestApi_get_list::is_expose_in_sqllab_Valid() const{
    return m_expose_in_sqllab_isValid;
}

QString OAIDatabaseRestApi_get_list::getExtra() const {
    return m_extra;
}
void OAIDatabaseRestApi_get_list::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIDatabaseRestApi_get_list::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIDatabaseRestApi_get_list::getForceCtasSchema() const {
    return m_force_ctas_schema;
}
void OAIDatabaseRestApi_get_list::setForceCtasSchema(const QString &force_ctas_schema) {
    m_force_ctas_schema = force_ctas_schema;
    m_force_ctas_schema_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_force_ctas_schema_Set() const{
    return m_force_ctas_schema_isSet;
}

bool OAIDatabaseRestApi_get_list::is_force_ctas_schema_Valid() const{
    return m_force_ctas_schema_isValid;
}

qint32 OAIDatabaseRestApi_get_list::getId() const {
    return m_id;
}
void OAIDatabaseRestApi_get_list::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatabaseRestApi_get_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatabaseRestApi_get_list::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDatabaseRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_csv_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_ctas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_cvas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_dml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_multi_schema_metadata_fetch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_run_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_cost_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_subquery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_virtual_table_explore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explore_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_in_sqllab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_ctas_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && true;
}

} // namespace OpenAPI
