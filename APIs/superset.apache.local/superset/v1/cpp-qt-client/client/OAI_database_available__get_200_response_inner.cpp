/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_database_available__get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_database_available__get_200_response_inner::OAI_database_available__get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_database_available__get_200_response_inner::OAI_database_available__get_200_response_inner() {
    this->initializeModel();
}

OAI_database_available__get_200_response_inner::~OAI_database_available__get_200_response_inner() {}

void OAI_database_available__get_200_response_inner::initializeModel() {

    m_available_drivers_isSet = false;
    m_available_drivers_isValid = false;

    m_default_driver_isSet = false;
    m_default_driver_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_sqlalchemy_uri_placeholder_isSet = false;
    m_sqlalchemy_uri_placeholder_isValid = false;
}

void OAI_database_available__get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_database_available__get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_available_drivers_isValid = ::OpenAPI::fromJsonValue(m_available_drivers, json[QString("available_drivers")]);
    m_available_drivers_isSet = !json[QString("available_drivers")].isNull() && m_available_drivers_isValid;

    m_default_driver_isValid = ::OpenAPI::fromJsonValue(m_default_driver, json[QString("default_driver")]);
    m_default_driver_isSet = !json[QString("default_driver")].isNull() && m_default_driver_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_sqlalchemy_uri_placeholder_isValid = ::OpenAPI::fromJsonValue(m_sqlalchemy_uri_placeholder, json[QString("sqlalchemy_uri_placeholder")]);
    m_sqlalchemy_uri_placeholder_isSet = !json[QString("sqlalchemy_uri_placeholder")].isNull() && m_sqlalchemy_uri_placeholder_isValid;
}

QString OAI_database_available__get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_database_available__get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_available_drivers.size() > 0) {
        obj.insert(QString("available_drivers"), ::OpenAPI::toJsonValue(m_available_drivers));
    }
    if (m_default_driver_isSet) {
        obj.insert(QString("default_driver"), ::OpenAPI::toJsonValue(m_default_driver));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_sqlalchemy_uri_placeholder_isSet) {
        obj.insert(QString("sqlalchemy_uri_placeholder"), ::OpenAPI::toJsonValue(m_sqlalchemy_uri_placeholder));
    }
    return obj;
}

QList<QString> OAI_database_available__get_200_response_inner::getAvailableDrivers() const {
    return m_available_drivers;
}
void OAI_database_available__get_200_response_inner::setAvailableDrivers(const QList<QString> &available_drivers) {
    m_available_drivers = available_drivers;
    m_available_drivers_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_available_drivers_Set() const{
    return m_available_drivers_isSet;
}

bool OAI_database_available__get_200_response_inner::is_available_drivers_Valid() const{
    return m_available_drivers_isValid;
}

QString OAI_database_available__get_200_response_inner::getDefaultDriver() const {
    return m_default_driver;
}
void OAI_database_available__get_200_response_inner::setDefaultDriver(const QString &default_driver) {
    m_default_driver = default_driver;
    m_default_driver_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_default_driver_Set() const{
    return m_default_driver_isSet;
}

bool OAI_database_available__get_200_response_inner::is_default_driver_Valid() const{
    return m_default_driver_isValid;
}

QString OAI_database_available__get_200_response_inner::getEngine() const {
    return m_engine;
}
void OAI_database_available__get_200_response_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAI_database_available__get_200_response_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAI_database_available__get_200_response_inner::getName() const {
    return m_name;
}
void OAI_database_available__get_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_database_available__get_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAI_database_available__get_200_response_inner::getParameters() const {
    return m_parameters;
}
void OAI_database_available__get_200_response_inner::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAI_database_available__get_200_response_inner::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAI_database_available__get_200_response_inner::isPreferred() const {
    return m_preferred;
}
void OAI_database_available__get_200_response_inner::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAI_database_available__get_200_response_inner::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAI_database_available__get_200_response_inner::getSqlalchemyUriPlaceholder() const {
    return m_sqlalchemy_uri_placeholder;
}
void OAI_database_available__get_200_response_inner::setSqlalchemyUriPlaceholder(const QString &sqlalchemy_uri_placeholder) {
    m_sqlalchemy_uri_placeholder = sqlalchemy_uri_placeholder;
    m_sqlalchemy_uri_placeholder_isSet = true;
}

bool OAI_database_available__get_200_response_inner::is_sqlalchemy_uri_placeholder_Set() const{
    return m_sqlalchemy_uri_placeholder_isSet;
}

bool OAI_database_available__get_200_response_inner::is_sqlalchemy_uri_placeholder_Valid() const{
    return m_sqlalchemy_uri_placeholder_isValid;
}

bool OAI_database_available__get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_drivers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlalchemy_uri_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_database_available__get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
