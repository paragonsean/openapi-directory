/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportSchedulesApi_H
#define OAI_OAIReportSchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIRelatedResponseSchema.h"
#include "OAIReportScheduleRestApi_post.h"
#include "OAIReportScheduleRestApi_put.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_report__get_200_response.h"
#include "OAI_report__pk__get_200_response.h"
#include "OAI_report__pk__log__get_200_response.h"
#include "OAI_report__pk__log__log_id__get_200_response.h"
#include "OAI_report__pk__put_200_response.h"
#include "OAI_report__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportSchedulesApi : public QObject {
    Q_OBJECT

public:
    OAIReportSchedulesApi(const int timeOut = 0);
    ~OAIReportSchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void reportDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void reportGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void reportInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void reportPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void reportPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void reportPkLogGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  log_id qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void reportPkLogLogIdGet(const qint32 &pk, const qint32 &log_id, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_report_schedule_rest_api_put OAIReportScheduleRestApi_put [required]
    */
    virtual void reportPkPut(const qint32 &pk, const OAIReportScheduleRestApi_put &oai_report_schedule_rest_api_put);

    /**
    * @param[in]  oai_report_schedule_rest_api_post OAIReportScheduleRestApi_post [required]
    */
    virtual void reportPost(const OAIReportScheduleRestApi_post &oai_report_schedule_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void reportRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reportDeleteCallback(OAIHttpRequestWorker *worker);
    void reportGetCallback(OAIHttpRequestWorker *worker);
    void reportInfoGetCallback(OAIHttpRequestWorker *worker);
    void reportPkDeleteCallback(OAIHttpRequestWorker *worker);
    void reportPkGetCallback(OAIHttpRequestWorker *worker);
    void reportPkLogGetCallback(OAIHttpRequestWorker *worker);
    void reportPkLogLogIdGetCallback(OAIHttpRequestWorker *worker);
    void reportPkPutCallback(OAIHttpRequestWorker *worker);
    void reportPostCallback(OAIHttpRequestWorker *worker);
    void reportRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reportDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void reportGetSignal(OAI_report__get_200_response summary);
    void reportInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void reportPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void reportPkGetSignal(OAI_report__pk__get_200_response summary);
    void reportPkLogGetSignal(OAI_report__pk__log__get_200_response summary);
    void reportPkLogLogIdGetSignal(OAI_report__pk__log__log_id__get_200_response summary);
    void reportPkPutSignal(OAI_report__pk__put_200_response summary);
    void reportPostSignal(OAI_report__post_201_response summary);
    void reportRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void reportDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void reportGetSignalFull(OAIHttpRequestWorker *worker, OAI_report__get_200_response summary);
    void reportInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void reportPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void reportPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_report__pk__get_200_response summary);
    void reportPkLogGetSignalFull(OAIHttpRequestWorker *worker, OAI_report__pk__log__get_200_response summary);
    void reportPkLogLogIdGetSignalFull(OAIHttpRequestWorker *worker, OAI_report__pk__log__log_id__get_200_response summary);
    void reportPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_report__pk__put_200_response summary);
    void reportPostSignalFull(OAIHttpRequestWorker *worker, OAI_report__post_201_response summary);
    void reportRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use reportDeleteSignalError() instead")
    void reportDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportGetSignalError() instead")
    void reportGetSignalE(OAI_report__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportGetSignalError(OAI_report__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportInfoGetSignalError() instead")
    void reportInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkDeleteSignalError() instead")
    void reportPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkGetSignalError() instead")
    void reportPkGetSignalE(OAI_report__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkGetSignalError(OAI_report__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkLogGetSignalError() instead")
    void reportPkLogGetSignalE(OAI_report__pk__log__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkLogGetSignalError(OAI_report__pk__log__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkLogLogIdGetSignalError() instead")
    void reportPkLogLogIdGetSignalE(OAI_report__pk__log__log_id__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkLogLogIdGetSignalError(OAI_report__pk__log__log_id__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkPutSignalError() instead")
    void reportPkPutSignalE(OAI_report__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkPutSignalError(OAI_report__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPostSignalError() instead")
    void reportPostSignalE(OAI_report__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPostSignalError(OAI_report__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportRelatedColumnNameGetSignalError() instead")
    void reportRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reportDeleteSignalErrorFull() instead")
    void reportDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportGetSignalErrorFull() instead")
    void reportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportInfoGetSignalErrorFull() instead")
    void reportInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkDeleteSignalErrorFull() instead")
    void reportPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkGetSignalErrorFull() instead")
    void reportPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkLogGetSignalErrorFull() instead")
    void reportPkLogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkLogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkLogLogIdGetSignalErrorFull() instead")
    void reportPkLogLogIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkLogLogIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPkPutSignalErrorFull() instead")
    void reportPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPostSignalErrorFull() instead")
    void reportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportRelatedColumnNameGetSignalErrorFull() instead")
    void reportRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
