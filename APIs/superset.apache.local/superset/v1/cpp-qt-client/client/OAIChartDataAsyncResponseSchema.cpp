/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataAsyncResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataAsyncResponseSchema::OAIChartDataAsyncResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataAsyncResponseSchema::OAIChartDataAsyncResponseSchema() {
    this->initializeModel();
}

OAIChartDataAsyncResponseSchema::~OAIChartDataAsyncResponseSchema() {}

void OAIChartDataAsyncResponseSchema::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_result_url_isSet = false;
    m_result_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIChartDataAsyncResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataAsyncResponseSchema::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("job_id")]);
    m_job_id_isSet = !json[QString("job_id")].isNull() && m_job_id_isValid;

    m_result_url_isValid = ::OpenAPI::fromJsonValue(m_result_url, json[QString("result_url")]);
    m_result_url_isSet = !json[QString("result_url")].isNull() && m_result_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIChartDataAsyncResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataAsyncResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("job_id"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_result_url_isSet) {
        obj.insert(QString("result_url"), ::OpenAPI::toJsonValue(m_result_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIChartDataAsyncResponseSchema::getChannelId() const {
    return m_channel_id;
}
void OAIChartDataAsyncResponseSchema::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChartDataAsyncResponseSchema::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChartDataAsyncResponseSchema::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIChartDataAsyncResponseSchema::getJobId() const {
    return m_job_id;
}
void OAIChartDataAsyncResponseSchema::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIChartDataAsyncResponseSchema::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIChartDataAsyncResponseSchema::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIChartDataAsyncResponseSchema::getResultUrl() const {
    return m_result_url;
}
void OAIChartDataAsyncResponseSchema::setResultUrl(const QString &result_url) {
    m_result_url = result_url;
    m_result_url_isSet = true;
}

bool OAIChartDataAsyncResponseSchema::is_result_url_Set() const{
    return m_result_url_isSet;
}

bool OAIChartDataAsyncResponseSchema::is_result_url_Valid() const{
    return m_result_url_isValid;
}

QString OAIChartDataAsyncResponseSchema::getStatus() const {
    return m_status;
}
void OAIChartDataAsyncResponseSchema::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChartDataAsyncResponseSchema::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChartDataAsyncResponseSchema::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIChartDataAsyncResponseSchema::getUserId() const {
    return m_user_id;
}
void OAIChartDataAsyncResponseSchema::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIChartDataAsyncResponseSchema::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIChartDataAsyncResponseSchema::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIChartDataAsyncResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataAsyncResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
