/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataPivotOptionsSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataPivotOptionsSchema::OAIChartDataPivotOptionsSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataPivotOptionsSchema::OAIChartDataPivotOptionsSchema() {
    this->initializeModel();
}

OAIChartDataPivotOptionsSchema::~OAIChartDataPivotOptionsSchema() {}

void OAIChartDataPivotOptionsSchema::initializeModel() {

    m_aggregates_isSet = false;
    m_aggregates_isValid = false;

    m_column_fill_value_isSet = false;
    m_column_fill_value_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_drop_missing_columns_isSet = false;
    m_drop_missing_columns_isValid = false;

    m_marginal_distribution_name_isSet = false;
    m_marginal_distribution_name_isValid = false;

    m_marginal_distributions_isSet = false;
    m_marginal_distributions_isValid = false;

    m_metric_fill_value_isSet = false;
    m_metric_fill_value_isValid = false;
}

void OAIChartDataPivotOptionsSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataPivotOptionsSchema::fromJsonObject(QJsonObject json) {

    m_aggregates_isValid = ::OpenAPI::fromJsonValue(m_aggregates, json[QString("aggregates")]);
    m_aggregates_isSet = !json[QString("aggregates")].isNull() && m_aggregates_isValid;

    m_column_fill_value_isValid = ::OpenAPI::fromJsonValue(m_column_fill_value, json[QString("column_fill_value")]);
    m_column_fill_value_isSet = !json[QString("column_fill_value")].isNull() && m_column_fill_value_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_drop_missing_columns_isValid = ::OpenAPI::fromJsonValue(m_drop_missing_columns, json[QString("drop_missing_columns")]);
    m_drop_missing_columns_isSet = !json[QString("drop_missing_columns")].isNull() && m_drop_missing_columns_isValid;

    m_marginal_distribution_name_isValid = ::OpenAPI::fromJsonValue(m_marginal_distribution_name, json[QString("marginal_distribution_name")]);
    m_marginal_distribution_name_isSet = !json[QString("marginal_distribution_name")].isNull() && m_marginal_distribution_name_isValid;

    m_marginal_distributions_isValid = ::OpenAPI::fromJsonValue(m_marginal_distributions, json[QString("marginal_distributions")]);
    m_marginal_distributions_isSet = !json[QString("marginal_distributions")].isNull() && m_marginal_distributions_isValid;

    m_metric_fill_value_isValid = ::OpenAPI::fromJsonValue(m_metric_fill_value, json[QString("metric_fill_value")]);
    m_metric_fill_value_isSet = !json[QString("metric_fill_value")].isNull() && m_metric_fill_value_isValid;
}

QString OAIChartDataPivotOptionsSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataPivotOptionsSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregates_isSet) {
        obj.insert(QString("aggregates"), ::OpenAPI::toJsonValue(m_aggregates));
    }
    if (m_column_fill_value_isSet) {
        obj.insert(QString("column_fill_value"), ::OpenAPI::toJsonValue(m_column_fill_value));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_drop_missing_columns_isSet) {
        obj.insert(QString("drop_missing_columns"), ::OpenAPI::toJsonValue(m_drop_missing_columns));
    }
    if (m_marginal_distribution_name_isSet) {
        obj.insert(QString("marginal_distribution_name"), ::OpenAPI::toJsonValue(m_marginal_distribution_name));
    }
    if (m_marginal_distributions_isSet) {
        obj.insert(QString("marginal_distributions"), ::OpenAPI::toJsonValue(m_marginal_distributions));
    }
    if (m_metric_fill_value_isSet) {
        obj.insert(QString("metric_fill_value"), ::OpenAPI::toJsonValue(m_metric_fill_value));
    }
    return obj;
}

OAIObject OAIChartDataPivotOptionsSchema::getAggregates() const {
    return m_aggregates;
}
void OAIChartDataPivotOptionsSchema::setAggregates(const OAIObject &aggregates) {
    m_aggregates = aggregates;
    m_aggregates_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_aggregates_Set() const{
    return m_aggregates_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_aggregates_Valid() const{
    return m_aggregates_isValid;
}

QString OAIChartDataPivotOptionsSchema::getColumnFillValue() const {
    return m_column_fill_value;
}
void OAIChartDataPivotOptionsSchema::setColumnFillValue(const QString &column_fill_value) {
    m_column_fill_value = column_fill_value;
    m_column_fill_value_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_column_fill_value_Set() const{
    return m_column_fill_value_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_column_fill_value_Valid() const{
    return m_column_fill_value_isValid;
}

QList<QString> OAIChartDataPivotOptionsSchema::getColumns() const {
    return m_columns;
}
void OAIChartDataPivotOptionsSchema::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIChartDataPivotOptionsSchema::isDropMissingColumns() const {
    return m_drop_missing_columns;
}
void OAIChartDataPivotOptionsSchema::setDropMissingColumns(const bool &drop_missing_columns) {
    m_drop_missing_columns = drop_missing_columns;
    m_drop_missing_columns_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_drop_missing_columns_Set() const{
    return m_drop_missing_columns_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_drop_missing_columns_Valid() const{
    return m_drop_missing_columns_isValid;
}

QString OAIChartDataPivotOptionsSchema::getMarginalDistributionName() const {
    return m_marginal_distribution_name;
}
void OAIChartDataPivotOptionsSchema::setMarginalDistributionName(const QString &marginal_distribution_name) {
    m_marginal_distribution_name = marginal_distribution_name;
    m_marginal_distribution_name_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_marginal_distribution_name_Set() const{
    return m_marginal_distribution_name_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_marginal_distribution_name_Valid() const{
    return m_marginal_distribution_name_isValid;
}

bool OAIChartDataPivotOptionsSchema::isMarginalDistributions() const {
    return m_marginal_distributions;
}
void OAIChartDataPivotOptionsSchema::setMarginalDistributions(const bool &marginal_distributions) {
    m_marginal_distributions = marginal_distributions;
    m_marginal_distributions_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_marginal_distributions_Set() const{
    return m_marginal_distributions_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_marginal_distributions_Valid() const{
    return m_marginal_distributions_isValid;
}

double OAIChartDataPivotOptionsSchema::getMetricFillValue() const {
    return m_metric_fill_value;
}
void OAIChartDataPivotOptionsSchema::setMetricFillValue(const double &metric_fill_value) {
    m_metric_fill_value = metric_fill_value;
    m_metric_fill_value_isSet = true;
}

bool OAIChartDataPivotOptionsSchema::is_metric_fill_value_Set() const{
    return m_metric_fill_value_isSet;
}

bool OAIChartDataPivotOptionsSchema::is_metric_fill_value_Valid() const{
    return m_metric_fill_value_isValid;
}

bool OAIChartDataPivotOptionsSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_fill_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_missing_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marginal_distribution_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marginal_distributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_fill_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataPivotOptionsSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
