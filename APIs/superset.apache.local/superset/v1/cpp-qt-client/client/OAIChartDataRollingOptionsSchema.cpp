/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataRollingOptionsSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataRollingOptionsSchema::OAIChartDataRollingOptionsSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataRollingOptionsSchema::OAIChartDataRollingOptionsSchema() {
    this->initializeModel();
}

OAIChartDataRollingOptionsSchema::~OAIChartDataRollingOptionsSchema() {}

void OAIChartDataRollingOptionsSchema::initializeModel() {

    m_center_isSet = false;
    m_center_isValid = false;

    m_min_periods_isSet = false;
    m_min_periods_isValid = false;

    m_rolling_type_isSet = false;
    m_rolling_type_isValid = false;

    m_rolling_type_options_isSet = false;
    m_rolling_type_options_isValid = false;

    m_win_type_isSet = false;
    m_win_type_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAIChartDataRollingOptionsSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataRollingOptionsSchema::fromJsonObject(QJsonObject json) {

    m_center_isValid = ::OpenAPI::fromJsonValue(m_center, json[QString("center")]);
    m_center_isSet = !json[QString("center")].isNull() && m_center_isValid;

    m_min_periods_isValid = ::OpenAPI::fromJsonValue(m_min_periods, json[QString("min_periods")]);
    m_min_periods_isSet = !json[QString("min_periods")].isNull() && m_min_periods_isValid;

    m_rolling_type_isValid = ::OpenAPI::fromJsonValue(m_rolling_type, json[QString("rolling_type")]);
    m_rolling_type_isSet = !json[QString("rolling_type")].isNull() && m_rolling_type_isValid;

    m_rolling_type_options_isValid = ::OpenAPI::fromJsonValue(m_rolling_type_options, json[QString("rolling_type_options")]);
    m_rolling_type_options_isSet = !json[QString("rolling_type_options")].isNull() && m_rolling_type_options_isValid;

    m_win_type_isValid = ::OpenAPI::fromJsonValue(m_win_type, json[QString("win_type")]);
    m_win_type_isSet = !json[QString("win_type")].isNull() && m_win_type_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAIChartDataRollingOptionsSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataRollingOptionsSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_center_isSet) {
        obj.insert(QString("center"), ::OpenAPI::toJsonValue(m_center));
    }
    if (m_min_periods_isSet) {
        obj.insert(QString("min_periods"), ::OpenAPI::toJsonValue(m_min_periods));
    }
    if (m_rolling_type_isSet) {
        obj.insert(QString("rolling_type"), ::OpenAPI::toJsonValue(m_rolling_type));
    }
    if (m_rolling_type_options_isSet) {
        obj.insert(QString("rolling_type_options"), ::OpenAPI::toJsonValue(m_rolling_type_options));
    }
    if (m_win_type_isSet) {
        obj.insert(QString("win_type"), ::OpenAPI::toJsonValue(m_win_type));
    }
    if (m_window_isSet) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

bool OAIChartDataRollingOptionsSchema::isCenter() const {
    return m_center;
}
void OAIChartDataRollingOptionsSchema::setCenter(const bool &center) {
    m_center = center;
    m_center_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_center_Set() const{
    return m_center_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_center_Valid() const{
    return m_center_isValid;
}

qint32 OAIChartDataRollingOptionsSchema::getMinPeriods() const {
    return m_min_periods;
}
void OAIChartDataRollingOptionsSchema::setMinPeriods(const qint32 &min_periods) {
    m_min_periods = min_periods;
    m_min_periods_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_min_periods_Set() const{
    return m_min_periods_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_min_periods_Valid() const{
    return m_min_periods_isValid;
}

QString OAIChartDataRollingOptionsSchema::getRollingType() const {
    return m_rolling_type;
}
void OAIChartDataRollingOptionsSchema::setRollingType(const QString &rolling_type) {
    m_rolling_type = rolling_type;
    m_rolling_type_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_rolling_type_Set() const{
    return m_rolling_type_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_rolling_type_Valid() const{
    return m_rolling_type_isValid;
}

OAIObject OAIChartDataRollingOptionsSchema::getRollingTypeOptions() const {
    return m_rolling_type_options;
}
void OAIChartDataRollingOptionsSchema::setRollingTypeOptions(const OAIObject &rolling_type_options) {
    m_rolling_type_options = rolling_type_options;
    m_rolling_type_options_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_rolling_type_options_Set() const{
    return m_rolling_type_options_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_rolling_type_options_Valid() const{
    return m_rolling_type_options_isValid;
}

QString OAIChartDataRollingOptionsSchema::getWinType() const {
    return m_win_type;
}
void OAIChartDataRollingOptionsSchema::setWinType(const QString &win_type) {
    m_win_type = win_type;
    m_win_type_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_win_type_Set() const{
    return m_win_type_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_win_type_Valid() const{
    return m_win_type_isValid;
}

qint32 OAIChartDataRollingOptionsSchema::getWindow() const {
    return m_window;
}
void OAIChartDataRollingOptionsSchema::setWindow(const qint32 &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAIChartDataRollingOptionsSchema::is_window_Set() const{
    return m_window_isSet;
}

bool OAIChartDataRollingOptionsSchema::is_window_Valid() const{
    return m_window_isValid;
}

bool OAIChartDataRollingOptionsSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_type_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataRollingOptionsSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rolling_type_isValid && m_window_isValid && true;
}

} // namespace OpenAPI
