/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseValidateParametersSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseValidateParametersSchema::OAIDatabaseValidateParametersSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseValidateParametersSchema::OAIDatabaseValidateParametersSchema() {
    this->initializeModel();
}

OAIDatabaseValidateParametersSchema::~OAIDatabaseValidateParametersSchema() {}

void OAIDatabaseValidateParametersSchema::initializeModel() {

    m_configuration_method_isSet = false;
    m_configuration_method_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_encrypted_extra_isSet = false;
    m_encrypted_extra_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_impersonate_user_isSet = false;
    m_impersonate_user_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_server_cert_isSet = false;
    m_server_cert_isValid = false;
}

void OAIDatabaseValidateParametersSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseValidateParametersSchema::fromJsonObject(QJsonObject json) {

    m_configuration_method_isValid = ::OpenAPI::fromJsonValue(m_configuration_method, json[QString("configuration_method")]);
    m_configuration_method_isSet = !json[QString("configuration_method")].isNull() && m_configuration_method_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("database_name")]);
    m_database_name_isSet = !json[QString("database_name")].isNull() && m_database_name_isValid;

    m_encrypted_extra_isValid = ::OpenAPI::fromJsonValue(m_encrypted_extra, json[QString("encrypted_extra")]);
    m_encrypted_extra_isSet = !json[QString("encrypted_extra")].isNull() && m_encrypted_extra_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_impersonate_user_isValid = ::OpenAPI::fromJsonValue(m_impersonate_user, json[QString("impersonate_user")]);
    m_impersonate_user_isSet = !json[QString("impersonate_user")].isNull() && m_impersonate_user_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_server_cert_isValid = ::OpenAPI::fromJsonValue(m_server_cert, json[QString("server_cert")]);
    m_server_cert_isSet = !json[QString("server_cert")].isNull() && m_server_cert_isValid;
}

QString OAIDatabaseValidateParametersSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseValidateParametersSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_method_isSet) {
        obj.insert(QString("configuration_method"), ::OpenAPI::toJsonValue(m_configuration_method));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("database_name"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_encrypted_extra_isSet) {
        obj.insert(QString("encrypted_extra"), ::OpenAPI::toJsonValue(m_encrypted_extra));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_impersonate_user_isSet) {
        obj.insert(QString("impersonate_user"), ::OpenAPI::toJsonValue(m_impersonate_user));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_server_cert_isSet) {
        obj.insert(QString("server_cert"), ::OpenAPI::toJsonValue(m_server_cert));
    }
    return obj;
}

QJsonValue OAIDatabaseValidateParametersSchema::getConfigurationMethod() const {
    return m_configuration_method;
}
void OAIDatabaseValidateParametersSchema::setConfigurationMethod(const QJsonValue &configuration_method) {
    m_configuration_method = configuration_method;
    m_configuration_method_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_configuration_method_Set() const{
    return m_configuration_method_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_configuration_method_Valid() const{
    return m_configuration_method_isValid;
}

QString OAIDatabaseValidateParametersSchema::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseValidateParametersSchema::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatabaseValidateParametersSchema::getEncryptedExtra() const {
    return m_encrypted_extra;
}
void OAIDatabaseValidateParametersSchema::setEncryptedExtra(const QString &encrypted_extra) {
    m_encrypted_extra = encrypted_extra;
    m_encrypted_extra_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_encrypted_extra_Set() const{
    return m_encrypted_extra_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_encrypted_extra_Valid() const{
    return m_encrypted_extra_isValid;
}

QString OAIDatabaseValidateParametersSchema::getEngine() const {
    return m_engine;
}
void OAIDatabaseValidateParametersSchema::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDatabaseValidateParametersSchema::getExtra() const {
    return m_extra;
}
void OAIDatabaseValidateParametersSchema::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_extra_Valid() const{
    return m_extra_isValid;
}

bool OAIDatabaseValidateParametersSchema::isImpersonateUser() const {
    return m_impersonate_user;
}
void OAIDatabaseValidateParametersSchema::setImpersonateUser(const bool &impersonate_user) {
    m_impersonate_user = impersonate_user;
    m_impersonate_user_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_impersonate_user_Set() const{
    return m_impersonate_user_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_impersonate_user_Valid() const{
    return m_impersonate_user_isValid;
}

QMap<QString, QJsonValue> OAIDatabaseValidateParametersSchema::getParameters() const {
    return m_parameters;
}
void OAIDatabaseValidateParametersSchema::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDatabaseValidateParametersSchema::getServerCert() const {
    return m_server_cert;
}
void OAIDatabaseValidateParametersSchema::setServerCert(const QString &server_cert) {
    m_server_cert = server_cert;
    m_server_cert_isSet = true;
}

bool OAIDatabaseValidateParametersSchema::is_server_cert_Set() const{
    return m_server_cert_isSet;
}

bool OAIDatabaseValidateParametersSchema::is_server_cert_Valid() const{
    return m_server_cert_isValid;
}

bool OAIDatabaseValidateParametersSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impersonate_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseValidateParametersSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_method_isValid && m_engine_isValid && true;
}

} // namespace OpenAPI
