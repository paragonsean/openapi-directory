/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChartDataResponseResult.h
 *
 * 
 */

#ifndef OAIChartDataResponseResult_H
#define OAIChartDataResponseResult_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChartDataResponseResult : public OAIObject {
public:
    OAIChartDataResponseResult();
    OAIChartDataResponseResult(QString json);
    ~OAIChartDataResponseResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QMap<QString, QString>> getAnnotationData() const;
    void setAnnotationData(const QList<QMap<QString, QString>> &annotation_data);
    bool is_annotation_data_Set() const;
    bool is_annotation_data_Valid() const;

    QList<OAIObject> getAppliedFilters() const;
    void setAppliedFilters(const QList<OAIObject> &applied_filters);
    bool is_applied_filters_Set() const;
    bool is_applied_filters_Valid() const;

    QString getCacheKey() const;
    void setCacheKey(const QString &cache_key);
    bool is_cache_key_Set() const;
    bool is_cache_key_Valid() const;

    qint32 getCacheTimeout() const;
    void setCacheTimeout(const qint32 &cache_timeout);
    bool is_cache_timeout_Set() const;
    bool is_cache_timeout_Valid() const;

    QString getCachedDttm() const;
    void setCachedDttm(const QString &cached_dttm);
    bool is_cached_dttm_Set() const;
    bool is_cached_dttm_Valid() const;

    QList<OAIObject> getData() const;
    void setData(const QList<OAIObject> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    bool isIsCached() const;
    void setIsCached(const bool &is_cached);
    bool is_is_cached_Set() const;
    bool is_is_cached_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    QList<OAIObject> getRejectedFilters() const;
    void setRejectedFilters(const QList<OAIObject> &rejected_filters);
    bool is_rejected_filters_Set() const;
    bool is_rejected_filters_Valid() const;

    qint32 getRowcount() const;
    void setRowcount(const qint32 &rowcount);
    bool is_rowcount_Set() const;
    bool is_rowcount_Valid() const;

    QString getStacktrace() const;
    void setStacktrace(const QString &stacktrace);
    bool is_stacktrace_Set() const;
    bool is_stacktrace_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QMap<QString, QString>> m_annotation_data;
    bool m_annotation_data_isSet;
    bool m_annotation_data_isValid;

    QList<OAIObject> m_applied_filters;
    bool m_applied_filters_isSet;
    bool m_applied_filters_isValid;

    QString m_cache_key;
    bool m_cache_key_isSet;
    bool m_cache_key_isValid;

    qint32 m_cache_timeout;
    bool m_cache_timeout_isSet;
    bool m_cache_timeout_isValid;

    QString m_cached_dttm;
    bool m_cached_dttm_isSet;
    bool m_cached_dttm_isValid;

    QList<OAIObject> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    bool m_is_cached;
    bool m_is_cached_isSet;
    bool m_is_cached_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    QList<OAIObject> m_rejected_filters;
    bool m_rejected_filters_isSet;
    bool m_rejected_filters_isValid;

    qint32 m_rowcount;
    bool m_rowcount_isSet;
    bool m_rowcount_isValid;

    QString m_stacktrace;
    bool m_stacktrace_isSet;
    bool m_stacktrace_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChartDataResponseResult)

#endif // OAIChartDataResponseResult_H
