/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataQueryContextSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataQueryContextSchema::OAIChartDataQueryContextSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataQueryContextSchema::OAIChartDataQueryContextSchema() {
    this->initializeModel();
}

OAIChartDataQueryContextSchema::~OAIChartDataQueryContextSchema() {}

void OAIChartDataQueryContextSchema::initializeModel() {

    m_datasource_isSet = false;
    m_datasource_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_result_format_isSet = false;
    m_result_format_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;
}

void OAIChartDataQueryContextSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataQueryContextSchema::fromJsonObject(QJsonObject json) {

    m_datasource_isValid = ::OpenAPI::fromJsonValue(m_datasource, json[QString("datasource")]);
    m_datasource_isSet = !json[QString("datasource")].isNull() && m_datasource_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_result_format_isValid = ::OpenAPI::fromJsonValue(m_result_format, json[QString("result_format")]);
    m_result_format_isSet = !json[QString("result_format")].isNull() && m_result_format_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;
}

QString OAIChartDataQueryContextSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataQueryContextSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_datasource.isSet()) {
        obj.insert(QString("datasource"), ::OpenAPI::toJsonValue(m_datasource));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_result_format_isSet) {
        obj.insert(QString("result_format"), ::OpenAPI::toJsonValue(m_result_format));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    return obj;
}

OAIChartDataDatasource OAIChartDataQueryContextSchema::getDatasource() const {
    return m_datasource;
}
void OAIChartDataQueryContextSchema::setDatasource(const OAIChartDataDatasource &datasource) {
    m_datasource = datasource;
    m_datasource_isSet = true;
}

bool OAIChartDataQueryContextSchema::is_datasource_Set() const{
    return m_datasource_isSet;
}

bool OAIChartDataQueryContextSchema::is_datasource_Valid() const{
    return m_datasource_isValid;
}

bool OAIChartDataQueryContextSchema::isForce() const {
    return m_force;
}
void OAIChartDataQueryContextSchema::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIChartDataQueryContextSchema::is_force_Set() const{
    return m_force_isSet;
}

bool OAIChartDataQueryContextSchema::is_force_Valid() const{
    return m_force_isValid;
}

QList<OAIChartDataQueryObject> OAIChartDataQueryContextSchema::getQueries() const {
    return m_queries;
}
void OAIChartDataQueryContextSchema::setQueries(const QList<OAIChartDataQueryObject> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIChartDataQueryContextSchema::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIChartDataQueryContextSchema::is_queries_Valid() const{
    return m_queries_isValid;
}

QJsonValue OAIChartDataQueryContextSchema::getResultFormat() const {
    return m_result_format;
}
void OAIChartDataQueryContextSchema::setResultFormat(const QJsonValue &result_format) {
    m_result_format = result_format;
    m_result_format_isSet = true;
}

bool OAIChartDataQueryContextSchema::is_result_format_Set() const{
    return m_result_format_isSet;
}

bool OAIChartDataQueryContextSchema::is_result_format_Valid() const{
    return m_result_format_isValid;
}

QJsonValue OAIChartDataQueryContextSchema::getResultType() const {
    return m_result_type;
}
void OAIChartDataQueryContextSchema::setResultType(const QJsonValue &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIChartDataQueryContextSchema::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIChartDataQueryContextSchema::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIChartDataQueryContextSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataQueryContextSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
