/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatasetRestApi_put.h
 *
 * 
 */

#ifndef OAIDatasetRestApi_put_H
#define OAIDatasetRestApi_put_H

#include <QJsonObject>

#include "OAIDatasetColumnsPut.h"
#include "OAIDatasetMetricsPut.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatasetColumnsPut;
class OAIDatasetMetricsPut;

class OAIDatasetRestApi_put : public OAIObject {
public:
    OAIDatasetRestApi_put();
    OAIDatasetRestApi_put(QString json);
    ~OAIDatasetRestApi_put() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCacheTimeout() const;
    void setCacheTimeout(const qint32 &cache_timeout);
    bool is_cache_timeout_Set() const;
    bool is_cache_timeout_Valid() const;

    QList<OAIDatasetColumnsPut> getColumns() const;
    void setColumns(const QList<OAIDatasetColumnsPut> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    qint32 getDatabaseId() const;
    void setDatabaseId(const qint32 &database_id);
    bool is_database_id_Set() const;
    bool is_database_id_Valid() const;

    QString getDefaultEndpoint() const;
    void setDefaultEndpoint(const QString &default_endpoint);
    bool is_default_endpoint_Set() const;
    bool is_default_endpoint_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExtra() const;
    void setExtra(const QString &extra);
    bool is_extra_Set() const;
    bool is_extra_Valid() const;

    QString getFetchValuesPredicate() const;
    void setFetchValuesPredicate(const QString &fetch_values_predicate);
    bool is_fetch_values_predicate_Set() const;
    bool is_fetch_values_predicate_Valid() const;

    bool isFilterSelectEnabled() const;
    void setFilterSelectEnabled(const bool &filter_select_enabled);
    bool is_filter_select_enabled_Set() const;
    bool is_filter_select_enabled_Valid() const;

    bool isIsSqllabView() const;
    void setIsSqllabView(const bool &is_sqllab_view);
    bool is_is_sqllab_view_Set() const;
    bool is_is_sqllab_view_Valid() const;

    QString getMainDttmCol() const;
    void setMainDttmCol(const QString &main_dttm_col);
    bool is_main_dttm_col_Set() const;
    bool is_main_dttm_col_Valid() const;

    QList<OAIDatasetMetricsPut> getMetrics() const;
    void setMetrics(const QList<OAIDatasetMetricsPut> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<qint32> getOwners() const;
    void setOwners(const QList<qint32> &owners);
    bool is_owners_Set() const;
    bool is_owners_Valid() const;

    QString getSchema() const;
    void setSchema(const QString &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    QString getSql() const;
    void setSql(const QString &sql);
    bool is_sql_Set() const;
    bool is_sql_Valid() const;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QString getTemplateParams() const;
    void setTemplateParams(const QString &template_params);
    bool is_template_params_Set() const;
    bool is_template_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cache_timeout;
    bool m_cache_timeout_isSet;
    bool m_cache_timeout_isValid;

    QList<OAIDatasetColumnsPut> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    qint32 m_database_id;
    bool m_database_id_isSet;
    bool m_database_id_isValid;

    QString m_default_endpoint;
    bool m_default_endpoint_isSet;
    bool m_default_endpoint_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_extra;
    bool m_extra_isSet;
    bool m_extra_isValid;

    QString m_fetch_values_predicate;
    bool m_fetch_values_predicate_isSet;
    bool m_fetch_values_predicate_isValid;

    bool m_filter_select_enabled;
    bool m_filter_select_enabled_isSet;
    bool m_filter_select_enabled_isValid;

    bool m_is_sqllab_view;
    bool m_is_sqllab_view_isSet;
    bool m_is_sqllab_view_isValid;

    QString m_main_dttm_col;
    bool m_main_dttm_col_isSet;
    bool m_main_dttm_col_isValid;

    QList<OAIDatasetMetricsPut> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<qint32> m_owners;
    bool m_owners_isSet;
    bool m_owners_isValid;

    QString m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    QString m_sql;
    bool m_sql_isSet;
    bool m_sql_isValid;

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QString m_template_params;
    bool m_template_params_isSet;
    bool m_template_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatasetRestApi_put)

#endif // OAIDatasetRestApi_put_H
