/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationRestApi_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationRestApi_post::OAIAnnotationRestApi_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationRestApi_post::OAIAnnotationRestApi_post() {
    this->initializeModel();
}

OAIAnnotationRestApi_post::~OAIAnnotationRestApi_post() {}

void OAIAnnotationRestApi_post::initializeModel() {

    m_end_dttm_isSet = false;
    m_end_dttm_isValid = false;

    m_json_metadata_isSet = false;
    m_json_metadata_isValid = false;

    m_long_descr_isSet = false;
    m_long_descr_isValid = false;

    m_short_descr_isSet = false;
    m_short_descr_isValid = false;

    m_start_dttm_isSet = false;
    m_start_dttm_isValid = false;
}

void OAIAnnotationRestApi_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationRestApi_post::fromJsonObject(QJsonObject json) {

    m_end_dttm_isValid = ::OpenAPI::fromJsonValue(m_end_dttm, json[QString("end_dttm")]);
    m_end_dttm_isSet = !json[QString("end_dttm")].isNull() && m_end_dttm_isValid;

    m_json_metadata_isValid = ::OpenAPI::fromJsonValue(m_json_metadata, json[QString("json_metadata")]);
    m_json_metadata_isSet = !json[QString("json_metadata")].isNull() && m_json_metadata_isValid;

    m_long_descr_isValid = ::OpenAPI::fromJsonValue(m_long_descr, json[QString("long_descr")]);
    m_long_descr_isSet = !json[QString("long_descr")].isNull() && m_long_descr_isValid;

    m_short_descr_isValid = ::OpenAPI::fromJsonValue(m_short_descr, json[QString("short_descr")]);
    m_short_descr_isSet = !json[QString("short_descr")].isNull() && m_short_descr_isValid;

    m_start_dttm_isValid = ::OpenAPI::fromJsonValue(m_start_dttm, json[QString("start_dttm")]);
    m_start_dttm_isSet = !json[QString("start_dttm")].isNull() && m_start_dttm_isValid;
}

QString OAIAnnotationRestApi_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationRestApi_post::asJsonObject() const {
    QJsonObject obj;
    if (m_end_dttm_isSet) {
        obj.insert(QString("end_dttm"), ::OpenAPI::toJsonValue(m_end_dttm));
    }
    if (m_json_metadata_isSet) {
        obj.insert(QString("json_metadata"), ::OpenAPI::toJsonValue(m_json_metadata));
    }
    if (m_long_descr_isSet) {
        obj.insert(QString("long_descr"), ::OpenAPI::toJsonValue(m_long_descr));
    }
    if (m_short_descr_isSet) {
        obj.insert(QString("short_descr"), ::OpenAPI::toJsonValue(m_short_descr));
    }
    if (m_start_dttm_isSet) {
        obj.insert(QString("start_dttm"), ::OpenAPI::toJsonValue(m_start_dttm));
    }
    return obj;
}

QDateTime OAIAnnotationRestApi_post::getEndDttm() const {
    return m_end_dttm;
}
void OAIAnnotationRestApi_post::setEndDttm(const QDateTime &end_dttm) {
    m_end_dttm = end_dttm;
    m_end_dttm_isSet = true;
}

bool OAIAnnotationRestApi_post::is_end_dttm_Set() const{
    return m_end_dttm_isSet;
}

bool OAIAnnotationRestApi_post::is_end_dttm_Valid() const{
    return m_end_dttm_isValid;
}

QString OAIAnnotationRestApi_post::getJsonMetadata() const {
    return m_json_metadata;
}
void OAIAnnotationRestApi_post::setJsonMetadata(const QString &json_metadata) {
    m_json_metadata = json_metadata;
    m_json_metadata_isSet = true;
}

bool OAIAnnotationRestApi_post::is_json_metadata_Set() const{
    return m_json_metadata_isSet;
}

bool OAIAnnotationRestApi_post::is_json_metadata_Valid() const{
    return m_json_metadata_isValid;
}

QString OAIAnnotationRestApi_post::getLongDescr() const {
    return m_long_descr;
}
void OAIAnnotationRestApi_post::setLongDescr(const QString &long_descr) {
    m_long_descr = long_descr;
    m_long_descr_isSet = true;
}

bool OAIAnnotationRestApi_post::is_long_descr_Set() const{
    return m_long_descr_isSet;
}

bool OAIAnnotationRestApi_post::is_long_descr_Valid() const{
    return m_long_descr_isValid;
}

QString OAIAnnotationRestApi_post::getShortDescr() const {
    return m_short_descr;
}
void OAIAnnotationRestApi_post::setShortDescr(const QString &short_descr) {
    m_short_descr = short_descr;
    m_short_descr_isSet = true;
}

bool OAIAnnotationRestApi_post::is_short_descr_Set() const{
    return m_short_descr_isSet;
}

bool OAIAnnotationRestApi_post::is_short_descr_Valid() const{
    return m_short_descr_isValid;
}

QDateTime OAIAnnotationRestApi_post::getStartDttm() const {
    return m_start_dttm;
}
void OAIAnnotationRestApi_post::setStartDttm(const QDateTime &start_dttm) {
    m_start_dttm = start_dttm;
    m_start_dttm_isSet = true;
}

bool OAIAnnotationRestApi_post::is_start_dttm_Set() const{
    return m_start_dttm_isSet;
}

bool OAIAnnotationRestApi_post::is_start_dttm_Valid() const{
    return m_start_dttm_isValid;
}

bool OAIAnnotationRestApi_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_descr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_descr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationRestApi_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
