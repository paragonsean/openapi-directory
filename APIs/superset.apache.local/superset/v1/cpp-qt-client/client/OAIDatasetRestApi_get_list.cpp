/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetRestApi_get_list::OAIDatasetRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetRestApi_get_list::OAIDatasetRestApi_get_list() {
    this->initializeModel();
}

OAIDatasetRestApi_get_list::~OAIDatasetRestApi_get_list() {}

void OAIDatasetRestApi_get_list::initializeModel() {

    m_changed_by_isSet = false;
    m_changed_by_isValid = false;

    m_changed_by_name_isSet = false;
    m_changed_by_name_isValid = false;

    m_changed_by_url_isSet = false;
    m_changed_by_url_isValid = false;

    m_changed_on_delta_humanized_isSet = false;
    m_changed_on_delta_humanized_isValid = false;

    m_changed_on_utc_isSet = false;
    m_changed_on_utc_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_default_endpoint_isSet = false;
    m_default_endpoint_isValid = false;

    m_explore_url_isSet = false;
    m_explore_url_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIDatasetRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_changed_by_isValid = ::OpenAPI::fromJsonValue(m_changed_by, json[QString("changed_by")]);
    m_changed_by_isSet = !json[QString("changed_by")].isNull() && m_changed_by_isValid;

    m_changed_by_name_isValid = ::OpenAPI::fromJsonValue(m_changed_by_name, json[QString("changed_by_name")]);
    m_changed_by_name_isSet = !json[QString("changed_by_name")].isNull() && m_changed_by_name_isValid;

    m_changed_by_url_isValid = ::OpenAPI::fromJsonValue(m_changed_by_url, json[QString("changed_by_url")]);
    m_changed_by_url_isSet = !json[QString("changed_by_url")].isNull() && m_changed_by_url_isValid;

    m_changed_on_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_changed_on_delta_humanized, json[QString("changed_on_delta_humanized")]);
    m_changed_on_delta_humanized_isSet = !json[QString("changed_on_delta_humanized")].isNull() && m_changed_on_delta_humanized_isValid;

    m_changed_on_utc_isValid = ::OpenAPI::fromJsonValue(m_changed_on_utc, json[QString("changed_on_utc")]);
    m_changed_on_utc_isSet = !json[QString("changed_on_utc")].isNull() && m_changed_on_utc_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_default_endpoint_isValid = ::OpenAPI::fromJsonValue(m_default_endpoint, json[QString("default_endpoint")]);
    m_default_endpoint_isSet = !json[QString("default_endpoint")].isNull() && m_default_endpoint_isValid;

    m_explore_url_isValid = ::OpenAPI::fromJsonValue(m_explore_url, json[QString("explore_url")]);
    m_explore_url_isSet = !json[QString("explore_url")].isNull() && m_explore_url_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("table_name")]);
    m_table_name_isSet = !json[QString("table_name")].isNull() && m_table_name_isValid;
}

QString OAIDatasetRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_by.isSet()) {
        obj.insert(QString("changed_by"), ::OpenAPI::toJsonValue(m_changed_by));
    }
    if (m_changed_by_name_isSet) {
        obj.insert(QString("changed_by_name"), ::OpenAPI::toJsonValue(m_changed_by_name));
    }
    if (m_changed_by_url_isSet) {
        obj.insert(QString("changed_by_url"), ::OpenAPI::toJsonValue(m_changed_by_url));
    }
    if (m_changed_on_delta_humanized_isSet) {
        obj.insert(QString("changed_on_delta_humanized"), ::OpenAPI::toJsonValue(m_changed_on_delta_humanized));
    }
    if (m_changed_on_utc_isSet) {
        obj.insert(QString("changed_on_utc"), ::OpenAPI::toJsonValue(m_changed_on_utc));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_default_endpoint_isSet) {
        obj.insert(QString("default_endpoint"), ::OpenAPI::toJsonValue(m_default_endpoint));
    }
    if (m_explore_url_isSet) {
        obj.insert(QString("explore_url"), ::OpenAPI::toJsonValue(m_explore_url));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_owners.isSet()) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("table_name"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

OAIMeta19 OAIDatasetRestApi_get_list::getChangedBy() const {
    return m_changed_by;
}
void OAIDatasetRestApi_get_list::setChangedBy(const OAIMeta19 &changed_by) {
    m_changed_by = changed_by;
    m_changed_by_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_changed_by_Set() const{
    return m_changed_by_isSet;
}

bool OAIDatasetRestApi_get_list::is_changed_by_Valid() const{
    return m_changed_by_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getChangedByName() const {
    return m_changed_by_name;
}
void OAIDatasetRestApi_get_list::setChangedByName(const QJsonValue &changed_by_name) {
    m_changed_by_name = changed_by_name;
    m_changed_by_name_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_changed_by_name_Set() const{
    return m_changed_by_name_isSet;
}

bool OAIDatasetRestApi_get_list::is_changed_by_name_Valid() const{
    return m_changed_by_name_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getChangedByUrl() const {
    return m_changed_by_url;
}
void OAIDatasetRestApi_get_list::setChangedByUrl(const QJsonValue &changed_by_url) {
    m_changed_by_url = changed_by_url;
    m_changed_by_url_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_changed_by_url_Set() const{
    return m_changed_by_url_isSet;
}

bool OAIDatasetRestApi_get_list::is_changed_by_url_Valid() const{
    return m_changed_by_url_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getChangedOnDeltaHumanized() const {
    return m_changed_on_delta_humanized;
}
void OAIDatasetRestApi_get_list::setChangedOnDeltaHumanized(const QJsonValue &changed_on_delta_humanized) {
    m_changed_on_delta_humanized = changed_on_delta_humanized;
    m_changed_on_delta_humanized_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_changed_on_delta_humanized_Set() const{
    return m_changed_on_delta_humanized_isSet;
}

bool OAIDatasetRestApi_get_list::is_changed_on_delta_humanized_Valid() const{
    return m_changed_on_delta_humanized_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getChangedOnUtc() const {
    return m_changed_on_utc;
}
void OAIDatasetRestApi_get_list::setChangedOnUtc(const QJsonValue &changed_on_utc) {
    m_changed_on_utc = changed_on_utc;
    m_changed_on_utc_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_changed_on_utc_Set() const{
    return m_changed_on_utc_isSet;
}

bool OAIDatasetRestApi_get_list::is_changed_on_utc_Valid() const{
    return m_changed_on_utc_isValid;
}

OAIMeta21 OAIDatasetRestApi_get_list::getDatabase() const {
    return m_database;
}
void OAIDatasetRestApi_get_list::setDatabase(const OAIMeta21 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDatasetRestApi_get_list::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIDatasetRestApi_get_list::getDefaultEndpoint() const {
    return m_default_endpoint;
}
void OAIDatasetRestApi_get_list::setDefaultEndpoint(const QString &default_endpoint) {
    m_default_endpoint = default_endpoint;
    m_default_endpoint_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_default_endpoint_Set() const{
    return m_default_endpoint_isSet;
}

bool OAIDatasetRestApi_get_list::is_default_endpoint_Valid() const{
    return m_default_endpoint_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getExploreUrl() const {
    return m_explore_url;
}
void OAIDatasetRestApi_get_list::setExploreUrl(const QJsonValue &explore_url) {
    m_explore_url = explore_url;
    m_explore_url_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_explore_url_Set() const{
    return m_explore_url_isSet;
}

bool OAIDatasetRestApi_get_list::is_explore_url_Valid() const{
    return m_explore_url_isValid;
}

QString OAIDatasetRestApi_get_list::getExtra() const {
    return m_extra;
}
void OAIDatasetRestApi_get_list::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIDatasetRestApi_get_list::is_extra_Valid() const{
    return m_extra_isValid;
}

qint32 OAIDatasetRestApi_get_list::getId() const {
    return m_id;
}
void OAIDatasetRestApi_get_list::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatasetRestApi_get_list::is_id_Valid() const{
    return m_id_isValid;
}

QJsonValue OAIDatasetRestApi_get_list::getKind() const {
    return m_kind;
}
void OAIDatasetRestApi_get_list::setKind(const QJsonValue &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatasetRestApi_get_list::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIMeta20 OAIDatasetRestApi_get_list::getOwners() const {
    return m_owners;
}
void OAIDatasetRestApi_get_list::setOwners(const OAIMeta20 &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDatasetRestApi_get_list::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDatasetRestApi_get_list::getSchema() const {
    return m_schema;
}
void OAIDatasetRestApi_get_list::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDatasetRestApi_get_list::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDatasetRestApi_get_list::getSql() const {
    return m_sql;
}
void OAIDatasetRestApi_get_list::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIDatasetRestApi_get_list::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIDatasetRestApi_get_list::getTableName() const {
    return m_table_name;
}
void OAIDatasetRestApi_get_list::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDatasetRestApi_get_list::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDatasetRestApi_get_list::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIDatasetRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_by_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_by_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explore_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
