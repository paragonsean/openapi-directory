/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabaseApi_H
#define OAI_OAIDatabaseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabaseFunctionNamesResponse.h"
#include "OAIDatabaseRelatedObjectsResponse.h"
#include "OAIDatabaseRestApi_post.h"
#include "OAIDatabaseRestApi_put.h"
#include "OAIDatabaseTestConnectionSchema.h"
#include "OAIDatabaseValidateParametersSchema.h"
#include "OAIDatabase_schemas_query_schema.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIHttpFileElement.h"
#include "OAISchemasResponseSchema.h"
#include "OAISelectStarResponseSchema.h"
#include "OAITableMetadataResponseSchema.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_database__get_200_response.h"
#include "OAI_database__pk__get_200_response.h"
#include "OAI_database__pk__put_200_response.h"
#include "OAI_database__post_201_response.h"
#include "OAI_database_available__get_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabaseApi : public QObject {
    Q_OBJECT

public:
    OAIDatabaseApi(const int timeOut = 0);
    ~OAIDatabaseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void databaseAvailableGet();

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void databaseExportGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void databaseGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  form_data OAIHttpFileElement [optional]
    * @param[in]  overwrite bool [optional]
    * @param[in]  passwords QString [optional]
    */
    virtual void databaseImportPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &form_data = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passwords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void databaseInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void databasePkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void databasePkFunctionNamesGet(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void databasePkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_database_rest_api_put OAIDatabaseRestApi_put [required]
    */
    virtual void databasePkPut(const qint32 &pk, const OAIDatabaseRestApi_put &oai_database_rest_api_put);

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void databasePkRelatedObjectsGet(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIDatabase_schemas_query_schema [optional]
    */
    virtual void databasePkSchemasGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIDatabase_schemas_query_schema> &q = ::OpenAPI::OptionalParam<OAIDatabase_schemas_query_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  table_name QString [required]
    * @param[in]  schema_name QString [required]
    */
    virtual void databasePkSelectStarTableNameGet(const qint32 &pk, const QString &table_name, const QString &schema_name);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  table_name QString [required]
    * @param[in]  schema_name QString [required]
    */
    virtual void databasePkSelectStarTableNameSchemaNameGet(const qint32 &pk, const QString &table_name, const QString &schema_name);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  table_name QString [required]
    * @param[in]  schema_name QString [required]
    */
    virtual void databasePkTableTableNameSchemaNameGet(const qint32 &pk, const QString &table_name, const QString &schema_name);

    /**
    * @param[in]  oai_database_rest_api_post OAIDatabaseRestApi_post [required]
    */
    virtual void databasePost(const OAIDatabaseRestApi_post &oai_database_rest_api_post);

    /**
    * @param[in]  oai_database_test_connection_schema OAIDatabaseTestConnectionSchema [required]
    */
    virtual void databaseTestConnectionPost(const OAIDatabaseTestConnectionSchema &oai_database_test_connection_schema);

    /**
    * @param[in]  oai_database_validate_parameters_schema OAIDatabaseValidateParametersSchema [required]
    */
    virtual void databaseValidateParametersPost(const OAIDatabaseValidateParametersSchema &oai_database_validate_parameters_schema);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseAvailableGetCallback(OAIHttpRequestWorker *worker);
    void databaseExportGetCallback(OAIHttpRequestWorker *worker);
    void databaseGetCallback(OAIHttpRequestWorker *worker);
    void databaseImportPostCallback(OAIHttpRequestWorker *worker);
    void databaseInfoGetCallback(OAIHttpRequestWorker *worker);
    void databasePkDeleteCallback(OAIHttpRequestWorker *worker);
    void databasePkFunctionNamesGetCallback(OAIHttpRequestWorker *worker);
    void databasePkGetCallback(OAIHttpRequestWorker *worker);
    void databasePkPutCallback(OAIHttpRequestWorker *worker);
    void databasePkRelatedObjectsGetCallback(OAIHttpRequestWorker *worker);
    void databasePkSchemasGetCallback(OAIHttpRequestWorker *worker);
    void databasePkSelectStarTableNameGetCallback(OAIHttpRequestWorker *worker);
    void databasePkSelectStarTableNameSchemaNameGetCallback(OAIHttpRequestWorker *worker);
    void databasePkTableTableNameSchemaNameGetCallback(OAIHttpRequestWorker *worker);
    void databasePostCallback(OAIHttpRequestWorker *worker);
    void databaseTestConnectionPostCallback(OAIHttpRequestWorker *worker);
    void databaseValidateParametersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseAvailableGetSignal(QList<OAI_database_available__get_200_response_inner> summary);
    void databaseExportGetSignal(OAIHttpFileElement summary);
    void databaseGetSignal(OAI_database__get_200_response summary);
    void databaseImportPostSignal(OAI_annotation_layer__get_400_response summary);
    void databaseInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void databasePkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void databasePkFunctionNamesGetSignal(OAIDatabaseFunctionNamesResponse summary);
    void databasePkGetSignal(OAI_database__pk__get_200_response summary);
    void databasePkPutSignal(OAI_database__pk__put_200_response summary);
    void databasePkRelatedObjectsGetSignal(OAIDatabaseRelatedObjectsResponse summary);
    void databasePkSchemasGetSignal(OAISchemasResponseSchema summary);
    void databasePkSelectStarTableNameGetSignal(OAISelectStarResponseSchema summary);
    void databasePkSelectStarTableNameSchemaNameGetSignal(OAISelectStarResponseSchema summary);
    void databasePkTableTableNameSchemaNameGetSignal(OAITableMetadataResponseSchema summary);
    void databasePostSignal(OAI_database__post_201_response summary);
    void databaseTestConnectionPostSignal(OAI_annotation_layer__get_400_response summary);
    void databaseValidateParametersPostSignal(OAI_annotation_layer__get_400_response summary);


    void databaseAvailableGetSignalFull(OAIHttpRequestWorker *worker, QList<OAI_database_available__get_200_response_inner> summary);
    void databaseExportGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void databaseGetSignalFull(OAIHttpRequestWorker *worker, OAI_database__get_200_response summary);
    void databaseImportPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void databaseInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void databasePkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void databasePkFunctionNamesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseFunctionNamesResponse summary);
    void databasePkGetSignalFull(OAIHttpRequestWorker *worker, OAI_database__pk__get_200_response summary);
    void databasePkPutSignalFull(OAIHttpRequestWorker *worker, OAI_database__pk__put_200_response summary);
    void databasePkRelatedObjectsGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseRelatedObjectsResponse summary);
    void databasePkSchemasGetSignalFull(OAIHttpRequestWorker *worker, OAISchemasResponseSchema summary);
    void databasePkSelectStarTableNameGetSignalFull(OAIHttpRequestWorker *worker, OAISelectStarResponseSchema summary);
    void databasePkSelectStarTableNameSchemaNameGetSignalFull(OAIHttpRequestWorker *worker, OAISelectStarResponseSchema summary);
    void databasePkTableTableNameSchemaNameGetSignalFull(OAIHttpRequestWorker *worker, OAITableMetadataResponseSchema summary);
    void databasePostSignalFull(OAIHttpRequestWorker *worker, OAI_database__post_201_response summary);
    void databaseTestConnectionPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void databaseValidateParametersPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);

    Q_DECL_DEPRECATED_X("Use databaseAvailableGetSignalError() instead")
    void databaseAvailableGetSignalE(QList<OAI_database_available__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAvailableGetSignalError(QList<OAI_database_available__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseExportGetSignalError() instead")
    void databaseExportGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseExportGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseGetSignalError() instead")
    void databaseGetSignalE(OAI_database__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseGetSignalError(OAI_database__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseImportPostSignalError() instead")
    void databaseImportPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseImportPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseInfoGetSignalError() instead")
    void databaseInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkDeleteSignalError() instead")
    void databasePkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkFunctionNamesGetSignalError() instead")
    void databasePkFunctionNamesGetSignalE(OAIDatabaseFunctionNamesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkFunctionNamesGetSignalError(OAIDatabaseFunctionNamesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkGetSignalError() instead")
    void databasePkGetSignalE(OAI_database__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkGetSignalError(OAI_database__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkPutSignalError() instead")
    void databasePkPutSignalE(OAI_database__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkPutSignalError(OAI_database__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkRelatedObjectsGetSignalError() instead")
    void databasePkRelatedObjectsGetSignalE(OAIDatabaseRelatedObjectsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkRelatedObjectsGetSignalError(OAIDatabaseRelatedObjectsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSchemasGetSignalError() instead")
    void databasePkSchemasGetSignalE(OAISchemasResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSchemasGetSignalError(OAISchemasResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSelectStarTableNameGetSignalError() instead")
    void databasePkSelectStarTableNameGetSignalE(OAISelectStarResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSelectStarTableNameGetSignalError(OAISelectStarResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSelectStarTableNameSchemaNameGetSignalError() instead")
    void databasePkSelectStarTableNameSchemaNameGetSignalE(OAISelectStarResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSelectStarTableNameSchemaNameGetSignalError(OAISelectStarResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkTableTableNameSchemaNameGetSignalError() instead")
    void databasePkTableTableNameSchemaNameGetSignalE(OAITableMetadataResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkTableTableNameSchemaNameGetSignalError(OAITableMetadataResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePostSignalError() instead")
    void databasePostSignalE(OAI_database__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePostSignalError(OAI_database__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseTestConnectionPostSignalError() instead")
    void databaseTestConnectionPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseTestConnectionPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseValidateParametersPostSignalError() instead")
    void databaseValidateParametersPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseValidateParametersPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseAvailableGetSignalErrorFull() instead")
    void databaseAvailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAvailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseExportGetSignalErrorFull() instead")
    void databaseExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseGetSignalErrorFull() instead")
    void databaseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseImportPostSignalErrorFull() instead")
    void databaseImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseInfoGetSignalErrorFull() instead")
    void databaseInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkDeleteSignalErrorFull() instead")
    void databasePkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkFunctionNamesGetSignalErrorFull() instead")
    void databasePkFunctionNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkFunctionNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkGetSignalErrorFull() instead")
    void databasePkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkPutSignalErrorFull() instead")
    void databasePkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkRelatedObjectsGetSignalErrorFull() instead")
    void databasePkRelatedObjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkRelatedObjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSchemasGetSignalErrorFull() instead")
    void databasePkSchemasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSchemasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSelectStarTableNameGetSignalErrorFull() instead")
    void databasePkSelectStarTableNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSelectStarTableNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkSelectStarTableNameSchemaNameGetSignalErrorFull() instead")
    void databasePkSelectStarTableNameSchemaNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkSelectStarTableNameSchemaNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePkTableTableNameSchemaNameGetSignalErrorFull() instead")
    void databasePkTableTableNameSchemaNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePkTableTableNameSchemaNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasePostSignalErrorFull() instead")
    void databasePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseTestConnectionPostSignalErrorFull() instead")
    void databaseTestConnectionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseTestConnectionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseValidateParametersPostSignalErrorFull() instead")
    void databaseValidateParametersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseValidateParametersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
