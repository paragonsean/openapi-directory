/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogRestApi_get_list::OAILogRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogRestApi_get_list::OAILogRestApi_get_list() {
    this->initializeModel();
}

OAILogRestApi_get_list::~OAILogRestApi_get_list() {}

void OAILogRestApi_get_list::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_dttm_isSet = false;
    m_dttm_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_json_isSet = false;
    m_json_isValid = false;

    m_referrer_isSet = false;
    m_referrer_isValid = false;

    m_slice_id_isSet = false;
    m_slice_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAILogRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("dashboard_id")]);
    m_dashboard_id_isSet = !json[QString("dashboard_id")].isNull() && m_dashboard_id_isValid;

    m_dttm_isValid = ::OpenAPI::fromJsonValue(m_dttm, json[QString("dttm")]);
    m_dttm_isSet = !json[QString("dttm")].isNull() && m_dttm_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("duration_ms")]);
    m_duration_ms_isSet = !json[QString("duration_ms")].isNull() && m_duration_ms_isValid;

    m_json_isValid = ::OpenAPI::fromJsonValue(m_json, json[QString("json")]);
    m_json_isSet = !json[QString("json")].isNull() && m_json_isValid;

    m_referrer_isValid = ::OpenAPI::fromJsonValue(m_referrer, json[QString("referrer")]);
    m_referrer_isSet = !json[QString("referrer")].isNull() && m_referrer_isValid;

    m_slice_id_isValid = ::OpenAPI::fromJsonValue(m_slice_id, json[QString("slice_id")]);
    m_slice_id_isSet = !json[QString("slice_id")].isNull() && m_slice_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAILogRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_dashboard_id_isSet) {
        obj.insert(QString("dashboard_id"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_dttm_isSet) {
        obj.insert(QString("dttm"), ::OpenAPI::toJsonValue(m_dttm));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("duration_ms"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_json_isSet) {
        obj.insert(QString("json"), ::OpenAPI::toJsonValue(m_json));
    }
    if (m_referrer_isSet) {
        obj.insert(QString("referrer"), ::OpenAPI::toJsonValue(m_referrer));
    }
    if (m_slice_id_isSet) {
        obj.insert(QString("slice_id"), ::OpenAPI::toJsonValue(m_slice_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAILogRestApi_get_list::getAction() const {
    return m_action;
}
void OAILogRestApi_get_list::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAILogRestApi_get_list::is_action_Set() const{
    return m_action_isSet;
}

bool OAILogRestApi_get_list::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAILogRestApi_get_list::getDashboardId() const {
    return m_dashboard_id;
}
void OAILogRestApi_get_list::setDashboardId(const qint32 &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAILogRestApi_get_list::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAILogRestApi_get_list::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QDateTime OAILogRestApi_get_list::getDttm() const {
    return m_dttm;
}
void OAILogRestApi_get_list::setDttm(const QDateTime &dttm) {
    m_dttm = dttm;
    m_dttm_isSet = true;
}

bool OAILogRestApi_get_list::is_dttm_Set() const{
    return m_dttm_isSet;
}

bool OAILogRestApi_get_list::is_dttm_Valid() const{
    return m_dttm_isValid;
}

qint32 OAILogRestApi_get_list::getDurationMs() const {
    return m_duration_ms;
}
void OAILogRestApi_get_list::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAILogRestApi_get_list::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAILogRestApi_get_list::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

QString OAILogRestApi_get_list::getJson() const {
    return m_json;
}
void OAILogRestApi_get_list::setJson(const QString &json) {
    m_json = json;
    m_json_isSet = true;
}

bool OAILogRestApi_get_list::is_json_Set() const{
    return m_json_isSet;
}

bool OAILogRestApi_get_list::is_json_Valid() const{
    return m_json_isValid;
}

QString OAILogRestApi_get_list::getReferrer() const {
    return m_referrer;
}
void OAILogRestApi_get_list::setReferrer(const QString &referrer) {
    m_referrer = referrer;
    m_referrer_isSet = true;
}

bool OAILogRestApi_get_list::is_referrer_Set() const{
    return m_referrer_isSet;
}

bool OAILogRestApi_get_list::is_referrer_Valid() const{
    return m_referrer_isValid;
}

qint32 OAILogRestApi_get_list::getSliceId() const {
    return m_slice_id;
}
void OAILogRestApi_get_list::setSliceId(const qint32 &slice_id) {
    m_slice_id = slice_id;
    m_slice_id_isSet = true;
}

bool OAILogRestApi_get_list::is_slice_id_Set() const{
    return m_slice_id_isSet;
}

bool OAILogRestApi_get_list::is_slice_id_Valid() const{
    return m_slice_id_isValid;
}

OAIMeta42 OAILogRestApi_get_list::getUser() const {
    return m_user;
}
void OAILogRestApi_get_list::setUser(const OAIMeta42 &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAILogRestApi_get_list::is_user_Set() const{
    return m_user_isSet;
}

bool OAILogRestApi_get_list::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAILogRestApi_get_list::getUserId() const {
    return m_user_id;
}
void OAILogRestApi_get_list::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAILogRestApi_get_list::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAILogRestApi_get_list::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAILogRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
