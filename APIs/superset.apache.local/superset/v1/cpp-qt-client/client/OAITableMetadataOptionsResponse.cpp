/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableMetadataOptionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableMetadataOptionsResponse::OAITableMetadataOptionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableMetadataOptionsResponse::OAITableMetadataOptionsResponse() {
    this->initializeModel();
}

OAITableMetadataOptionsResponse::~OAITableMetadataOptionsResponse() {}

void OAITableMetadataOptionsResponse::initializeModel() {

    m_deferrable_isSet = false;
    m_deferrable_isValid = false;

    m_initially_isSet = false;
    m_initially_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_ondelete_isSet = false;
    m_ondelete_isValid = false;

    m_onupdate_isSet = false;
    m_onupdate_isValid = false;
}

void OAITableMetadataOptionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableMetadataOptionsResponse::fromJsonObject(QJsonObject json) {

    m_deferrable_isValid = ::OpenAPI::fromJsonValue(m_deferrable, json[QString("deferrable")]);
    m_deferrable_isSet = !json[QString("deferrable")].isNull() && m_deferrable_isValid;

    m_initially_isValid = ::OpenAPI::fromJsonValue(m_initially, json[QString("initially")]);
    m_initially_isSet = !json[QString("initially")].isNull() && m_initially_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_ondelete_isValid = ::OpenAPI::fromJsonValue(m_ondelete, json[QString("ondelete")]);
    m_ondelete_isSet = !json[QString("ondelete")].isNull() && m_ondelete_isValid;

    m_onupdate_isValid = ::OpenAPI::fromJsonValue(m_onupdate, json[QString("onupdate")]);
    m_onupdate_isSet = !json[QString("onupdate")].isNull() && m_onupdate_isValid;
}

QString OAITableMetadataOptionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableMetadataOptionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deferrable_isSet) {
        obj.insert(QString("deferrable"), ::OpenAPI::toJsonValue(m_deferrable));
    }
    if (m_initially_isSet) {
        obj.insert(QString("initially"), ::OpenAPI::toJsonValue(m_initially));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_ondelete_isSet) {
        obj.insert(QString("ondelete"), ::OpenAPI::toJsonValue(m_ondelete));
    }
    if (m_onupdate_isSet) {
        obj.insert(QString("onupdate"), ::OpenAPI::toJsonValue(m_onupdate));
    }
    return obj;
}

bool OAITableMetadataOptionsResponse::isDeferrable() const {
    return m_deferrable;
}
void OAITableMetadataOptionsResponse::setDeferrable(const bool &deferrable) {
    m_deferrable = deferrable;
    m_deferrable_isSet = true;
}

bool OAITableMetadataOptionsResponse::is_deferrable_Set() const{
    return m_deferrable_isSet;
}

bool OAITableMetadataOptionsResponse::is_deferrable_Valid() const{
    return m_deferrable_isValid;
}

bool OAITableMetadataOptionsResponse::isInitially() const {
    return m_initially;
}
void OAITableMetadataOptionsResponse::setInitially(const bool &initially) {
    m_initially = initially;
    m_initially_isSet = true;
}

bool OAITableMetadataOptionsResponse::is_initially_Set() const{
    return m_initially_isSet;
}

bool OAITableMetadataOptionsResponse::is_initially_Valid() const{
    return m_initially_isValid;
}

bool OAITableMetadataOptionsResponse::isMatch() const {
    return m_match;
}
void OAITableMetadataOptionsResponse::setMatch(const bool &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAITableMetadataOptionsResponse::is_match_Set() const{
    return m_match_isSet;
}

bool OAITableMetadataOptionsResponse::is_match_Valid() const{
    return m_match_isValid;
}

bool OAITableMetadataOptionsResponse::isOndelete() const {
    return m_ondelete;
}
void OAITableMetadataOptionsResponse::setOndelete(const bool &ondelete) {
    m_ondelete = ondelete;
    m_ondelete_isSet = true;
}

bool OAITableMetadataOptionsResponse::is_ondelete_Set() const{
    return m_ondelete_isSet;
}

bool OAITableMetadataOptionsResponse::is_ondelete_Valid() const{
    return m_ondelete_isValid;
}

bool OAITableMetadataOptionsResponse::isOnupdate() const {
    return m_onupdate;
}
void OAITableMetadataOptionsResponse::setOnupdate(const bool &onupdate) {
    m_onupdate = onupdate;
    m_onupdate_isSet = true;
}

bool OAITableMetadataOptionsResponse::is_onupdate_Set() const{
    return m_onupdate_isSet;
}

bool OAITableMetadataOptionsResponse::is_onupdate_Valid() const{
    return m_onupdate_isValid;
}

bool OAITableMetadataOptionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deferrable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initially_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ondelete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onupdate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableMetadataOptionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
