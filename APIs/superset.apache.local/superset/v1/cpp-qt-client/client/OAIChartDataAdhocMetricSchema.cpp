/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataAdhocMetricSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataAdhocMetricSchema::OAIChartDataAdhocMetricSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataAdhocMetricSchema::OAIChartDataAdhocMetricSchema() {
    this->initializeModel();
}

OAIChartDataAdhocMetricSchema::~OAIChartDataAdhocMetricSchema() {}

void OAIChartDataAdhocMetricSchema::initializeModel() {

    m_aggregate_isSet = false;
    m_aggregate_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_expression_type_isSet = false;
    m_expression_type_isValid = false;

    m_has_custom_label_isSet = false;
    m_has_custom_label_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_option_name_isSet = false;
    m_option_name_isValid = false;

    m_sql_expression_isSet = false;
    m_sql_expression_isValid = false;
}

void OAIChartDataAdhocMetricSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataAdhocMetricSchema::fromJsonObject(QJsonObject json) {

    m_aggregate_isValid = ::OpenAPI::fromJsonValue(m_aggregate, json[QString("aggregate")]);
    m_aggregate_isSet = !json[QString("aggregate")].isNull() && m_aggregate_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_expression_type_isValid = ::OpenAPI::fromJsonValue(m_expression_type, json[QString("expressionType")]);
    m_expression_type_isSet = !json[QString("expressionType")].isNull() && m_expression_type_isValid;

    m_has_custom_label_isValid = ::OpenAPI::fromJsonValue(m_has_custom_label, json[QString("hasCustomLabel")]);
    m_has_custom_label_isSet = !json[QString("hasCustomLabel")].isNull() && m_has_custom_label_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_option_name_isValid = ::OpenAPI::fromJsonValue(m_option_name, json[QString("optionName")]);
    m_option_name_isSet = !json[QString("optionName")].isNull() && m_option_name_isValid;

    m_sql_expression_isValid = ::OpenAPI::fromJsonValue(m_sql_expression, json[QString("sqlExpression")]);
    m_sql_expression_isSet = !json[QString("sqlExpression")].isNull() && m_sql_expression_isValid;
}

QString OAIChartDataAdhocMetricSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataAdhocMetricSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_isSet) {
        obj.insert(QString("aggregate"), ::OpenAPI::toJsonValue(m_aggregate));
    }
    if (m_column.isSet()) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_expression_type_isSet) {
        obj.insert(QString("expressionType"), ::OpenAPI::toJsonValue(m_expression_type));
    }
    if (m_has_custom_label_isSet) {
        obj.insert(QString("hasCustomLabel"), ::OpenAPI::toJsonValue(m_has_custom_label));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_option_name_isSet) {
        obj.insert(QString("optionName"), ::OpenAPI::toJsonValue(m_option_name));
    }
    if (m_sql_expression_isSet) {
        obj.insert(QString("sqlExpression"), ::OpenAPI::toJsonValue(m_sql_expression));
    }
    return obj;
}

QString OAIChartDataAdhocMetricSchema::getAggregate() const {
    return m_aggregate;
}
void OAIChartDataAdhocMetricSchema::setAggregate(const QString &aggregate) {
    m_aggregate = aggregate;
    m_aggregate_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_aggregate_Set() const{
    return m_aggregate_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_aggregate_Valid() const{
    return m_aggregate_isValid;
}

OAIChartDataColumn OAIChartDataAdhocMetricSchema::getColumn() const {
    return m_column;
}
void OAIChartDataAdhocMetricSchema::setColumn(const OAIChartDataColumn &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_column_Set() const{
    return m_column_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIChartDataAdhocMetricSchema::getExpressionType() const {
    return m_expression_type;
}
void OAIChartDataAdhocMetricSchema::setExpressionType(const QString &expression_type) {
    m_expression_type = expression_type;
    m_expression_type_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_expression_type_Set() const{
    return m_expression_type_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_expression_type_Valid() const{
    return m_expression_type_isValid;
}

bool OAIChartDataAdhocMetricSchema::isHasCustomLabel() const {
    return m_has_custom_label;
}
void OAIChartDataAdhocMetricSchema::setHasCustomLabel(const bool &has_custom_label) {
    m_has_custom_label = has_custom_label;
    m_has_custom_label_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_has_custom_label_Set() const{
    return m_has_custom_label_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_has_custom_label_Valid() const{
    return m_has_custom_label_isValid;
}

QString OAIChartDataAdhocMetricSchema::getLabel() const {
    return m_label;
}
void OAIChartDataAdhocMetricSchema::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_label_Set() const{
    return m_label_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIChartDataAdhocMetricSchema::getOptionName() const {
    return m_option_name;
}
void OAIChartDataAdhocMetricSchema::setOptionName(const QString &option_name) {
    m_option_name = option_name;
    m_option_name_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_option_name_Set() const{
    return m_option_name_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_option_name_Valid() const{
    return m_option_name_isValid;
}

QString OAIChartDataAdhocMetricSchema::getSqlExpression() const {
    return m_sql_expression;
}
void OAIChartDataAdhocMetricSchema::setSqlExpression(const QString &sql_expression) {
    m_sql_expression = sql_expression;
    m_sql_expression_isSet = true;
}

bool OAIChartDataAdhocMetricSchema::is_sql_expression_Set() const{
    return m_sql_expression_isSet;
}

bool OAIChartDataAdhocMetricSchema::is_sql_expression_Valid() const{
    return m_sql_expression_isValid;
}

bool OAIChartDataAdhocMetricSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataAdhocMetricSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_type_isValid && true;
}

} // namespace OpenAPI
