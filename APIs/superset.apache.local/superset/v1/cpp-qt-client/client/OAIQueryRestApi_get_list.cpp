/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRestApi_get_list::OAIQueryRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRestApi_get_list::OAIQueryRestApi_get_list() {
    this->initializeModel();
}

OAIQueryRestApi_get_list::~OAIQueryRestApi_get_list() {}

void OAIQueryRestApi_get_list::initializeModel() {

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_executed_sql_isSet = false;
    m_executed_sql_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_sql_tables_isSet = false;
    m_sql_tables_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tab_name_isSet = false;
    m_tab_name_isValid = false;

    m_tmp_table_name_isSet = false;
    m_tmp_table_name_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIQueryRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_executed_sql_isValid = ::OpenAPI::fromJsonValue(m_executed_sql, json[QString("executed_sql")]);
    m_executed_sql_isSet = !json[QString("executed_sql")].isNull() && m_executed_sql_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_sql_tables_isValid = ::OpenAPI::fromJsonValue(m_sql_tables, json[QString("sql_tables")]);
    m_sql_tables_isSet = !json[QString("sql_tables")].isNull() && m_sql_tables_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tab_name_isValid = ::OpenAPI::fromJsonValue(m_tab_name, json[QString("tab_name")]);
    m_tab_name_isSet = !json[QString("tab_name")].isNull() && m_tab_name_isValid;

    m_tmp_table_name_isValid = ::OpenAPI::fromJsonValue(m_tmp_table_name, json[QString("tmp_table_name")]);
    m_tmp_table_name_isSet = !json[QString("tmp_table_name")].isNull() && m_tmp_table_name_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("tracking_url")]);
    m_tracking_url_isSet = !json[QString("tracking_url")].isNull() && m_tracking_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIQueryRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_executed_sql_isSet) {
        obj.insert(QString("executed_sql"), ::OpenAPI::toJsonValue(m_executed_sql));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_sql_tables_isSet) {
        obj.insert(QString("sql_tables"), ::OpenAPI::toJsonValue(m_sql_tables));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tab_name_isSet) {
        obj.insert(QString("tab_name"), ::OpenAPI::toJsonValue(m_tab_name));
    }
    if (m_tmp_table_name_isSet) {
        obj.insert(QString("tmp_table_name"), ::OpenAPI::toJsonValue(m_tmp_table_name));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("tracking_url"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIQueryRestApi_get_list::getChangedOn() const {
    return m_changed_on;
}
void OAIQueryRestApi_get_list::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIQueryRestApi_get_list::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIQueryRestApi_get_list::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

OAIMeta27 OAIQueryRestApi_get_list::getDatabase() const {
    return m_database;
}
void OAIQueryRestApi_get_list::setDatabase(const OAIMeta27 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIQueryRestApi_get_list::is_database_Set() const{
    return m_database_isSet;
}

bool OAIQueryRestApi_get_list::is_database_Valid() const{
    return m_database_isValid;
}

double OAIQueryRestApi_get_list::getEndTime() const {
    return m_end_time;
}
void OAIQueryRestApi_get_list::setEndTime(const double &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIQueryRestApi_get_list::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIQueryRestApi_get_list::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIQueryRestApi_get_list::getExecutedSql() const {
    return m_executed_sql;
}
void OAIQueryRestApi_get_list::setExecutedSql(const QString &executed_sql) {
    m_executed_sql = executed_sql;
    m_executed_sql_isSet = true;
}

bool OAIQueryRestApi_get_list::is_executed_sql_Set() const{
    return m_executed_sql_isSet;
}

bool OAIQueryRestApi_get_list::is_executed_sql_Valid() const{
    return m_executed_sql_isValid;
}

qint32 OAIQueryRestApi_get_list::getId() const {
    return m_id;
}
void OAIQueryRestApi_get_list::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueryRestApi_get_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueryRestApi_get_list::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIQueryRestApi_get_list::getRows() const {
    return m_rows;
}
void OAIQueryRestApi_get_list::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryRestApi_get_list::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryRestApi_get_list::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIQueryRestApi_get_list::getSchema() const {
    return m_schema;
}
void OAIQueryRestApi_get_list::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIQueryRestApi_get_list::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIQueryRestApi_get_list::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIQueryRestApi_get_list::getSql() const {
    return m_sql;
}
void OAIQueryRestApi_get_list::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIQueryRestApi_get_list::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIQueryRestApi_get_list::is_sql_Valid() const{
    return m_sql_isValid;
}

QJsonValue OAIQueryRestApi_get_list::getSqlTables() const {
    return m_sql_tables;
}
void OAIQueryRestApi_get_list::setSqlTables(const QJsonValue &sql_tables) {
    m_sql_tables = sql_tables;
    m_sql_tables_isSet = true;
}

bool OAIQueryRestApi_get_list::is_sql_tables_Set() const{
    return m_sql_tables_isSet;
}

bool OAIQueryRestApi_get_list::is_sql_tables_Valid() const{
    return m_sql_tables_isValid;
}

double OAIQueryRestApi_get_list::getStartTime() const {
    return m_start_time;
}
void OAIQueryRestApi_get_list::setStartTime(const double &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIQueryRestApi_get_list::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIQueryRestApi_get_list::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIQueryRestApi_get_list::getStatus() const {
    return m_status;
}
void OAIQueryRestApi_get_list::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQueryRestApi_get_list::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQueryRestApi_get_list::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIQueryRestApi_get_list::getTabName() const {
    return m_tab_name;
}
void OAIQueryRestApi_get_list::setTabName(const QString &tab_name) {
    m_tab_name = tab_name;
    m_tab_name_isSet = true;
}

bool OAIQueryRestApi_get_list::is_tab_name_Set() const{
    return m_tab_name_isSet;
}

bool OAIQueryRestApi_get_list::is_tab_name_Valid() const{
    return m_tab_name_isValid;
}

QString OAIQueryRestApi_get_list::getTmpTableName() const {
    return m_tmp_table_name;
}
void OAIQueryRestApi_get_list::setTmpTableName(const QString &tmp_table_name) {
    m_tmp_table_name = tmp_table_name;
    m_tmp_table_name_isSet = true;
}

bool OAIQueryRestApi_get_list::is_tmp_table_name_Set() const{
    return m_tmp_table_name_isSet;
}

bool OAIQueryRestApi_get_list::is_tmp_table_name_Valid() const{
    return m_tmp_table_name_isValid;
}

QString OAIQueryRestApi_get_list::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIQueryRestApi_get_list::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIQueryRestApi_get_list::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIQueryRestApi_get_list::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

OAIMeta26 OAIQueryRestApi_get_list::getUser() const {
    return m_user;
}
void OAIQueryRestApi_get_list::setUser(const OAIMeta26 &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryRestApi_get_list::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryRestApi_get_list::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIQueryRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executed_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_tables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tab_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmp_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && true;
}

} // namespace OpenAPI
