/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataQueryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataQueryObject::OAIChartDataQueryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataQueryObject::OAIChartDataQueryObject() {
    this->initializeModel();
}

OAIChartDataQueryObject::~OAIChartDataQueryObject() {}

void OAIChartDataQueryObject::initializeModel() {

    m_annotation_layers_isSet = false;
    m_annotation_layers_isValid = false;

    m_applied_time_extras_isSet = false;
    m_applied_time_extras_isValid = false;

    m_apply_fetch_values_predicate_isSet = false;
    m_apply_fetch_values_predicate_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_datasource_isSet = false;
    m_datasource_isValid = false;

    m_druid_time_origin_isSet = false;
    m_druid_time_origin_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_granularity_sqla_isSet = false;
    m_granularity_sqla_isValid = false;

    m_groupby_isSet = false;
    m_groupby_isValid = false;

    m_having_isSet = false;
    m_having_isValid = false;

    m_having_filters_isSet = false;
    m_having_filters_isValid = false;

    m_is_rowcount_isSet = false;
    m_is_rowcount_isValid = false;

    m_is_timeseries_isSet = false;
    m_is_timeseries_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_order_desc_isSet = false;
    m_order_desc_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_post_processing_isSet = false;
    m_post_processing_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;

    m_row_limit_isSet = false;
    m_row_limit_isValid = false;

    m_row_offset_isSet = false;
    m_row_offset_isValid = false;

    m_time_offsets_isSet = false;
    m_time_offsets_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_time_shift_isSet = false;
    m_time_shift_isValid = false;

    m_timeseries_limit_isSet = false;
    m_timeseries_limit_isValid = false;

    m_timeseries_limit_metric_isSet = false;
    m_timeseries_limit_metric_isValid = false;

    m_url_params_isSet = false;
    m_url_params_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;
}

void OAIChartDataQueryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataQueryObject::fromJsonObject(QJsonObject json) {

    m_annotation_layers_isValid = ::OpenAPI::fromJsonValue(m_annotation_layers, json[QString("annotation_layers")]);
    m_annotation_layers_isSet = !json[QString("annotation_layers")].isNull() && m_annotation_layers_isValid;

    m_applied_time_extras_isValid = ::OpenAPI::fromJsonValue(m_applied_time_extras, json[QString("applied_time_extras")]);
    m_applied_time_extras_isSet = !json[QString("applied_time_extras")].isNull() && m_applied_time_extras_isValid;

    m_apply_fetch_values_predicate_isValid = ::OpenAPI::fromJsonValue(m_apply_fetch_values_predicate, json[QString("apply_fetch_values_predicate")]);
    m_apply_fetch_values_predicate_isSet = !json[QString("apply_fetch_values_predicate")].isNull() && m_apply_fetch_values_predicate_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_datasource_isValid = ::OpenAPI::fromJsonValue(m_datasource, json[QString("datasource")]);
    m_datasource_isSet = !json[QString("datasource")].isNull() && m_datasource_isValid;

    m_druid_time_origin_isValid = ::OpenAPI::fromJsonValue(m_druid_time_origin, json[QString("druid_time_origin")]);
    m_druid_time_origin_isSet = !json[QString("druid_time_origin")].isNull() && m_druid_time_origin_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_granularity_sqla_isValid = ::OpenAPI::fromJsonValue(m_granularity_sqla, json[QString("granularity_sqla")]);
    m_granularity_sqla_isSet = !json[QString("granularity_sqla")].isNull() && m_granularity_sqla_isValid;

    m_groupby_isValid = ::OpenAPI::fromJsonValue(m_groupby, json[QString("groupby")]);
    m_groupby_isSet = !json[QString("groupby")].isNull() && m_groupby_isValid;

    m_having_isValid = ::OpenAPI::fromJsonValue(m_having, json[QString("having")]);
    m_having_isSet = !json[QString("having")].isNull() && m_having_isValid;

    m_having_filters_isValid = ::OpenAPI::fromJsonValue(m_having_filters, json[QString("having_filters")]);
    m_having_filters_isSet = !json[QString("having_filters")].isNull() && m_having_filters_isValid;

    m_is_rowcount_isValid = ::OpenAPI::fromJsonValue(m_is_rowcount, json[QString("is_rowcount")]);
    m_is_rowcount_isSet = !json[QString("is_rowcount")].isNull() && m_is_rowcount_isValid;

    m_is_timeseries_isValid = ::OpenAPI::fromJsonValue(m_is_timeseries, json[QString("is_timeseries")]);
    m_is_timeseries_isSet = !json[QString("is_timeseries")].isNull() && m_is_timeseries_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_order_desc_isValid = ::OpenAPI::fromJsonValue(m_order_desc, json[QString("order_desc")]);
    m_order_desc_isSet = !json[QString("order_desc")].isNull() && m_order_desc_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_post_processing_isValid = ::OpenAPI::fromJsonValue(m_post_processing, json[QString("post_processing")]);
    m_post_processing_isSet = !json[QString("post_processing")].isNull() && m_post_processing_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("result_type")]);
    m_result_type_isSet = !json[QString("result_type")].isNull() && m_result_type_isValid;

    m_row_limit_isValid = ::OpenAPI::fromJsonValue(m_row_limit, json[QString("row_limit")]);
    m_row_limit_isSet = !json[QString("row_limit")].isNull() && m_row_limit_isValid;

    m_row_offset_isValid = ::OpenAPI::fromJsonValue(m_row_offset, json[QString("row_offset")]);
    m_row_offset_isSet = !json[QString("row_offset")].isNull() && m_row_offset_isValid;

    m_time_offsets_isValid = ::OpenAPI::fromJsonValue(m_time_offsets, json[QString("time_offsets")]);
    m_time_offsets_isSet = !json[QString("time_offsets")].isNull() && m_time_offsets_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("time_range")]);
    m_time_range_isSet = !json[QString("time_range")].isNull() && m_time_range_isValid;

    m_time_shift_isValid = ::OpenAPI::fromJsonValue(m_time_shift, json[QString("time_shift")]);
    m_time_shift_isSet = !json[QString("time_shift")].isNull() && m_time_shift_isValid;

    m_timeseries_limit_isValid = ::OpenAPI::fromJsonValue(m_timeseries_limit, json[QString("timeseries_limit")]);
    m_timeseries_limit_isSet = !json[QString("timeseries_limit")].isNull() && m_timeseries_limit_isValid;

    m_timeseries_limit_metric_isValid = ::OpenAPI::fromJsonValue(m_timeseries_limit_metric, json[QString("timeseries_limit_metric")]);
    m_timeseries_limit_metric_isSet = !json[QString("timeseries_limit_metric")].isNull() && m_timeseries_limit_metric_isValid;

    m_url_params_isValid = ::OpenAPI::fromJsonValue(m_url_params, json[QString("url_params")]);
    m_url_params_isSet = !json[QString("url_params")].isNull() && m_url_params_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;
}

QString OAIChartDataQueryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataQueryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_layers.size() > 0) {
        obj.insert(QString("annotation_layers"), ::OpenAPI::toJsonValue(m_annotation_layers));
    }
    if (m_applied_time_extras_isSet) {
        obj.insert(QString("applied_time_extras"), ::OpenAPI::toJsonValue(m_applied_time_extras));
    }
    if (m_apply_fetch_values_predicate_isSet) {
        obj.insert(QString("apply_fetch_values_predicate"), ::OpenAPI::toJsonValue(m_apply_fetch_values_predicate));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_datasource.isSet()) {
        obj.insert(QString("datasource"), ::OpenAPI::toJsonValue(m_datasource));
    }
    if (m_druid_time_origin_isSet) {
        obj.insert(QString("druid_time_origin"), ::OpenAPI::toJsonValue(m_druid_time_origin));
    }
    if (m_extras.isSet()) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_granularity_sqla_isSet) {
        obj.insert(QString("granularity_sqla"), ::OpenAPI::toJsonValue(m_granularity_sqla));
    }
    if (m_groupby.size() > 0) {
        obj.insert(QString("groupby"), ::OpenAPI::toJsonValue(m_groupby));
    }
    if (m_having_isSet) {
        obj.insert(QString("having"), ::OpenAPI::toJsonValue(m_having));
    }
    if (m_having_filters.size() > 0) {
        obj.insert(QString("having_filters"), ::OpenAPI::toJsonValue(m_having_filters));
    }
    if (m_is_rowcount_isSet) {
        obj.insert(QString("is_rowcount"), ::OpenAPI::toJsonValue(m_is_rowcount));
    }
    if (m_is_timeseries_isSet) {
        obj.insert(QString("is_timeseries"), ::OpenAPI::toJsonValue(m_is_timeseries));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_order_desc_isSet) {
        obj.insert(QString("order_desc"), ::OpenAPI::toJsonValue(m_order_desc));
    }
    if (m_orderby.size() > 0) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_post_processing.size() > 0) {
        obj.insert(QString("post_processing"), ::OpenAPI::toJsonValue(m_post_processing));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("result_type"), ::OpenAPI::toJsonValue(m_result_type));
    }
    if (m_row_limit_isSet) {
        obj.insert(QString("row_limit"), ::OpenAPI::toJsonValue(m_row_limit));
    }
    if (m_row_offset_isSet) {
        obj.insert(QString("row_offset"), ::OpenAPI::toJsonValue(m_row_offset));
    }
    if (m_time_offsets.size() > 0) {
        obj.insert(QString("time_offsets"), ::OpenAPI::toJsonValue(m_time_offsets));
    }
    if (m_time_range_isSet) {
        obj.insert(QString("time_range"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_time_shift_isSet) {
        obj.insert(QString("time_shift"), ::OpenAPI::toJsonValue(m_time_shift));
    }
    if (m_timeseries_limit_isSet) {
        obj.insert(QString("timeseries_limit"), ::OpenAPI::toJsonValue(m_timeseries_limit));
    }
    if (m_timeseries_limit_metric_isSet) {
        obj.insert(QString("timeseries_limit_metric"), ::OpenAPI::toJsonValue(m_timeseries_limit_metric));
    }
    if (m_url_params.size() > 0) {
        obj.insert(QString("url_params"), ::OpenAPI::toJsonValue(m_url_params));
    }
    if (m_where_isSet) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    return obj;
}

QList<OAIAnnotationLayer> OAIChartDataQueryObject::getAnnotationLayers() const {
    return m_annotation_layers;
}
void OAIChartDataQueryObject::setAnnotationLayers(const QList<OAIAnnotationLayer> &annotation_layers) {
    m_annotation_layers = annotation_layers;
    m_annotation_layers_isSet = true;
}

bool OAIChartDataQueryObject::is_annotation_layers_Set() const{
    return m_annotation_layers_isSet;
}

bool OAIChartDataQueryObject::is_annotation_layers_Valid() const{
    return m_annotation_layers_isValid;
}

OAIObject OAIChartDataQueryObject::getAppliedTimeExtras() const {
    return m_applied_time_extras;
}
void OAIChartDataQueryObject::setAppliedTimeExtras(const OAIObject &applied_time_extras) {
    m_applied_time_extras = applied_time_extras;
    m_applied_time_extras_isSet = true;
}

bool OAIChartDataQueryObject::is_applied_time_extras_Set() const{
    return m_applied_time_extras_isSet;
}

bool OAIChartDataQueryObject::is_applied_time_extras_Valid() const{
    return m_applied_time_extras_isValid;
}

bool OAIChartDataQueryObject::isApplyFetchValuesPredicate() const {
    return m_apply_fetch_values_predicate;
}
void OAIChartDataQueryObject::setApplyFetchValuesPredicate(const bool &apply_fetch_values_predicate) {
    m_apply_fetch_values_predicate = apply_fetch_values_predicate;
    m_apply_fetch_values_predicate_isSet = true;
}

bool OAIChartDataQueryObject::is_apply_fetch_values_predicate_Set() const{
    return m_apply_fetch_values_predicate_isSet;
}

bool OAIChartDataQueryObject::is_apply_fetch_values_predicate_Valid() const{
    return m_apply_fetch_values_predicate_isValid;
}

QList<QString> OAIChartDataQueryObject::getColumns() const {
    return m_columns;
}
void OAIChartDataQueryObject::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIChartDataQueryObject::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIChartDataQueryObject::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIChartDataDatasource OAIChartDataQueryObject::getDatasource() const {
    return m_datasource;
}
void OAIChartDataQueryObject::setDatasource(const OAIChartDataDatasource &datasource) {
    m_datasource = datasource;
    m_datasource_isSet = true;
}

bool OAIChartDataQueryObject::is_datasource_Set() const{
    return m_datasource_isSet;
}

bool OAIChartDataQueryObject::is_datasource_Valid() const{
    return m_datasource_isValid;
}

QString OAIChartDataQueryObject::getDruidTimeOrigin() const {
    return m_druid_time_origin;
}
void OAIChartDataQueryObject::setDruidTimeOrigin(const QString &druid_time_origin) {
    m_druid_time_origin = druid_time_origin;
    m_druid_time_origin_isSet = true;
}

bool OAIChartDataQueryObject::is_druid_time_origin_Set() const{
    return m_druid_time_origin_isSet;
}

bool OAIChartDataQueryObject::is_druid_time_origin_Valid() const{
    return m_druid_time_origin_isValid;
}

OAIChartDataExtras OAIChartDataQueryObject::getExtras() const {
    return m_extras;
}
void OAIChartDataQueryObject::setExtras(const OAIChartDataExtras &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIChartDataQueryObject::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIChartDataQueryObject::is_extras_Valid() const{
    return m_extras_isValid;
}

QList<OAIChartDataFilter> OAIChartDataQueryObject::getFilters() const {
    return m_filters;
}
void OAIChartDataQueryObject::setFilters(const QList<OAIChartDataFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIChartDataQueryObject::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIChartDataQueryObject::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIChartDataQueryObject::getGranularity() const {
    return m_granularity;
}
void OAIChartDataQueryObject::setGranularity(const QString &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIChartDataQueryObject::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIChartDataQueryObject::is_granularity_Valid() const{
    return m_granularity_isValid;
}

QString OAIChartDataQueryObject::getGranularitySqla() const {
    return m_granularity_sqla;
}
void OAIChartDataQueryObject::setGranularitySqla(const QString &granularity_sqla) {
    m_granularity_sqla = granularity_sqla;
    m_granularity_sqla_isSet = true;
}

bool OAIChartDataQueryObject::is_granularity_sqla_Set() const{
    return m_granularity_sqla_isSet;
}

bool OAIChartDataQueryObject::is_granularity_sqla_Valid() const{
    return m_granularity_sqla_isValid;
}

QList<QString> OAIChartDataQueryObject::getGroupby() const {
    return m_groupby;
}
void OAIChartDataQueryObject::setGroupby(const QList<QString> &groupby) {
    m_groupby = groupby;
    m_groupby_isSet = true;
}

bool OAIChartDataQueryObject::is_groupby_Set() const{
    return m_groupby_isSet;
}

bool OAIChartDataQueryObject::is_groupby_Valid() const{
    return m_groupby_isValid;
}

QString OAIChartDataQueryObject::getHaving() const {
    return m_having;
}
void OAIChartDataQueryObject::setHaving(const QString &having) {
    m_having = having;
    m_having_isSet = true;
}

bool OAIChartDataQueryObject::is_having_Set() const{
    return m_having_isSet;
}

bool OAIChartDataQueryObject::is_having_Valid() const{
    return m_having_isValid;
}

QList<OAIChartDataFilter> OAIChartDataQueryObject::getHavingFilters() const {
    return m_having_filters;
}
void OAIChartDataQueryObject::setHavingFilters(const QList<OAIChartDataFilter> &having_filters) {
    m_having_filters = having_filters;
    m_having_filters_isSet = true;
}

bool OAIChartDataQueryObject::is_having_filters_Set() const{
    return m_having_filters_isSet;
}

bool OAIChartDataQueryObject::is_having_filters_Valid() const{
    return m_having_filters_isValid;
}

bool OAIChartDataQueryObject::isIsRowcount() const {
    return m_is_rowcount;
}
void OAIChartDataQueryObject::setIsRowcount(const bool &is_rowcount) {
    m_is_rowcount = is_rowcount;
    m_is_rowcount_isSet = true;
}

bool OAIChartDataQueryObject::is_is_rowcount_Set() const{
    return m_is_rowcount_isSet;
}

bool OAIChartDataQueryObject::is_is_rowcount_Valid() const{
    return m_is_rowcount_isValid;
}

bool OAIChartDataQueryObject::isIsTimeseries() const {
    return m_is_timeseries;
}
void OAIChartDataQueryObject::setIsTimeseries(const bool &is_timeseries) {
    m_is_timeseries = is_timeseries;
    m_is_timeseries_isSet = true;
}

bool OAIChartDataQueryObject::is_is_timeseries_Set() const{
    return m_is_timeseries_isSet;
}

bool OAIChartDataQueryObject::is_is_timeseries_Valid() const{
    return m_is_timeseries_isValid;
}

QList<QJsonValue> OAIChartDataQueryObject::getMetrics() const {
    return m_metrics;
}
void OAIChartDataQueryObject::setMetrics(const QList<QJsonValue> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIChartDataQueryObject::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIChartDataQueryObject::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIChartDataQueryObject::isOrderDesc() const {
    return m_order_desc;
}
void OAIChartDataQueryObject::setOrderDesc(const bool &order_desc) {
    m_order_desc = order_desc;
    m_order_desc_isSet = true;
}

bool OAIChartDataQueryObject::is_order_desc_Set() const{
    return m_order_desc_isSet;
}

bool OAIChartDataQueryObject::is_order_desc_Valid() const{
    return m_order_desc_isValid;
}

QList<QJsonValue> OAIChartDataQueryObject::getOrderby() const {
    return m_orderby;
}
void OAIChartDataQueryObject::setOrderby(const QList<QJsonValue> &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAIChartDataQueryObject::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAIChartDataQueryObject::is_orderby_Valid() const{
    return m_orderby_isValid;
}

QList<OAIChartDataPostProcessingOperation> OAIChartDataQueryObject::getPostProcessing() const {
    return m_post_processing;
}
void OAIChartDataQueryObject::setPostProcessing(const QList<OAIChartDataPostProcessingOperation> &post_processing) {
    m_post_processing = post_processing;
    m_post_processing_isSet = true;
}

bool OAIChartDataQueryObject::is_post_processing_Set() const{
    return m_post_processing_isSet;
}

bool OAIChartDataQueryObject::is_post_processing_Valid() const{
    return m_post_processing_isValid;
}

QJsonValue OAIChartDataQueryObject::getResultType() const {
    return m_result_type;
}
void OAIChartDataQueryObject::setResultType(const QJsonValue &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIChartDataQueryObject::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIChartDataQueryObject::is_result_type_Valid() const{
    return m_result_type_isValid;
}

qint32 OAIChartDataQueryObject::getRowLimit() const {
    return m_row_limit;
}
void OAIChartDataQueryObject::setRowLimit(const qint32 &row_limit) {
    m_row_limit = row_limit;
    m_row_limit_isSet = true;
}

bool OAIChartDataQueryObject::is_row_limit_Set() const{
    return m_row_limit_isSet;
}

bool OAIChartDataQueryObject::is_row_limit_Valid() const{
    return m_row_limit_isValid;
}

qint32 OAIChartDataQueryObject::getRowOffset() const {
    return m_row_offset;
}
void OAIChartDataQueryObject::setRowOffset(const qint32 &row_offset) {
    m_row_offset = row_offset;
    m_row_offset_isSet = true;
}

bool OAIChartDataQueryObject::is_row_offset_Set() const{
    return m_row_offset_isSet;
}

bool OAIChartDataQueryObject::is_row_offset_Valid() const{
    return m_row_offset_isValid;
}

QList<QString> OAIChartDataQueryObject::getTimeOffsets() const {
    return m_time_offsets;
}
void OAIChartDataQueryObject::setTimeOffsets(const QList<QString> &time_offsets) {
    m_time_offsets = time_offsets;
    m_time_offsets_isSet = true;
}

bool OAIChartDataQueryObject::is_time_offsets_Set() const{
    return m_time_offsets_isSet;
}

bool OAIChartDataQueryObject::is_time_offsets_Valid() const{
    return m_time_offsets_isValid;
}

QString OAIChartDataQueryObject::getTimeRange() const {
    return m_time_range;
}
void OAIChartDataQueryObject::setTimeRange(const QString &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIChartDataQueryObject::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIChartDataQueryObject::is_time_range_Valid() const{
    return m_time_range_isValid;
}

QString OAIChartDataQueryObject::getTimeShift() const {
    return m_time_shift;
}
void OAIChartDataQueryObject::setTimeShift(const QString &time_shift) {
    m_time_shift = time_shift;
    m_time_shift_isSet = true;
}

bool OAIChartDataQueryObject::is_time_shift_Set() const{
    return m_time_shift_isSet;
}

bool OAIChartDataQueryObject::is_time_shift_Valid() const{
    return m_time_shift_isValid;
}

qint32 OAIChartDataQueryObject::getTimeseriesLimit() const {
    return m_timeseries_limit;
}
void OAIChartDataQueryObject::setTimeseriesLimit(const qint32 &timeseries_limit) {
    m_timeseries_limit = timeseries_limit;
    m_timeseries_limit_isSet = true;
}

bool OAIChartDataQueryObject::is_timeseries_limit_Set() const{
    return m_timeseries_limit_isSet;
}

bool OAIChartDataQueryObject::is_timeseries_limit_Valid() const{
    return m_timeseries_limit_isValid;
}

QJsonValue OAIChartDataQueryObject::getTimeseriesLimitMetric() const {
    return m_timeseries_limit_metric;
}
void OAIChartDataQueryObject::setTimeseriesLimitMetric(const QJsonValue &timeseries_limit_metric) {
    m_timeseries_limit_metric = timeseries_limit_metric;
    m_timeseries_limit_metric_isSet = true;
}

bool OAIChartDataQueryObject::is_timeseries_limit_metric_Set() const{
    return m_timeseries_limit_metric_isSet;
}

bool OAIChartDataQueryObject::is_timeseries_limit_metric_Valid() const{
    return m_timeseries_limit_metric_isValid;
}

QMap<QString, QString> OAIChartDataQueryObject::getUrlParams() const {
    return m_url_params;
}
void OAIChartDataQueryObject::setUrlParams(const QMap<QString, QString> &url_params) {
    m_url_params = url_params;
    m_url_params_isSet = true;
}

bool OAIChartDataQueryObject::is_url_params_Set() const{
    return m_url_params_isSet;
}

bool OAIChartDataQueryObject::is_url_params_Valid() const{
    return m_url_params_isValid;
}

QString OAIChartDataQueryObject::getWhere() const {
    return m_where;
}
void OAIChartDataQueryObject::setWhere(const QString &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIChartDataQueryObject::is_where_Set() const{
    return m_where_isSet;
}

bool OAIChartDataQueryObject::is_where_Valid() const{
    return m_where_isValid;
}

bool OAIChartDataQueryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_layers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_time_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_fetch_values_predicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_druid_time_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_sqla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupby.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_having_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_having_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rowcount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timeseries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_processing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_offsets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_shift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeseries_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeseries_limit_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_where_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataQueryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
