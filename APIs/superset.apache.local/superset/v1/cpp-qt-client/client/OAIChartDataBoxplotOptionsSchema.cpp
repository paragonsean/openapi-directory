/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataBoxplotOptionsSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataBoxplotOptionsSchema::OAIChartDataBoxplotOptionsSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataBoxplotOptionsSchema::OAIChartDataBoxplotOptionsSchema() {
    this->initializeModel();
}

OAIChartDataBoxplotOptionsSchema::~OAIChartDataBoxplotOptionsSchema() {}

void OAIChartDataBoxplotOptionsSchema::initializeModel() {

    m_groupby_isSet = false;
    m_groupby_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_percentiles_isSet = false;
    m_percentiles_isValid = false;

    m_whisker_type_isSet = false;
    m_whisker_type_isValid = false;
}

void OAIChartDataBoxplotOptionsSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataBoxplotOptionsSchema::fromJsonObject(QJsonObject json) {

    m_groupby_isValid = ::OpenAPI::fromJsonValue(m_groupby, json[QString("groupby")]);
    m_groupby_isSet = !json[QString("groupby")].isNull() && m_groupby_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_percentiles_isValid = ::OpenAPI::fromJsonValue(m_percentiles, json[QString("percentiles")]);
    m_percentiles_isSet = !json[QString("percentiles")].isNull() && m_percentiles_isValid;

    m_whisker_type_isValid = ::OpenAPI::fromJsonValue(m_whisker_type, json[QString("whisker_type")]);
    m_whisker_type_isSet = !json[QString("whisker_type")].isNull() && m_whisker_type_isValid;
}

QString OAIChartDataBoxplotOptionsSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataBoxplotOptionsSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_groupby.size() > 0) {
        obj.insert(QString("groupby"), ::OpenAPI::toJsonValue(m_groupby));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_percentiles_isSet) {
        obj.insert(QString("percentiles"), ::OpenAPI::toJsonValue(m_percentiles));
    }
    if (m_whisker_type_isSet) {
        obj.insert(QString("whisker_type"), ::OpenAPI::toJsonValue(m_whisker_type));
    }
    return obj;
}

QList<QString> OAIChartDataBoxplotOptionsSchema::getGroupby() const {
    return m_groupby;
}
void OAIChartDataBoxplotOptionsSchema::setGroupby(const QList<QString> &groupby) {
    m_groupby = groupby;
    m_groupby_isSet = true;
}

bool OAIChartDataBoxplotOptionsSchema::is_groupby_Set() const{
    return m_groupby_isSet;
}

bool OAIChartDataBoxplotOptionsSchema::is_groupby_Valid() const{
    return m_groupby_isValid;
}

QList<QJsonValue> OAIChartDataBoxplotOptionsSchema::getMetrics() const {
    return m_metrics;
}
void OAIChartDataBoxplotOptionsSchema::setMetrics(const QList<QJsonValue> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIChartDataBoxplotOptionsSchema::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIChartDataBoxplotOptionsSchema::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QJsonValue OAIChartDataBoxplotOptionsSchema::getPercentiles() const {
    return m_percentiles;
}
void OAIChartDataBoxplotOptionsSchema::setPercentiles(const QJsonValue &percentiles) {
    m_percentiles = percentiles;
    m_percentiles_isSet = true;
}

bool OAIChartDataBoxplotOptionsSchema::is_percentiles_Set() const{
    return m_percentiles_isSet;
}

bool OAIChartDataBoxplotOptionsSchema::is_percentiles_Valid() const{
    return m_percentiles_isValid;
}

QString OAIChartDataBoxplotOptionsSchema::getWhiskerType() const {
    return m_whisker_type;
}
void OAIChartDataBoxplotOptionsSchema::setWhiskerType(const QString &whisker_type) {
    m_whisker_type = whisker_type;
    m_whisker_type_isSet = true;
}

bool OAIChartDataBoxplotOptionsSchema::is_whisker_type_Set() const{
    return m_whisker_type_isSet;
}

bool OAIChartDataBoxplotOptionsSchema::is_whisker_type_Valid() const{
    return m_whisker_type_isValid;
}

bool OAIChartDataBoxplotOptionsSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groupby.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentiles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whisker_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataBoxplotOptionsSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_whisker_type_isValid && true;
}

} // namespace OpenAPI
