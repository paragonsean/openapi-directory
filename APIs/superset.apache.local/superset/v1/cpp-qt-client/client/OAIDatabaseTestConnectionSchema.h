/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseTestConnectionSchema.h
 *
 * 
 */

#ifndef OAIDatabaseTestConnectionSchema_H
#define OAIDatabaseTestConnectionSchema_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDatabaseTestConnectionSchema : public OAIObject {
public:
    OAIDatabaseTestConnectionSchema();
    OAIDatabaseTestConnectionSchema(QString json);
    ~OAIDatabaseTestConnectionSchema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QJsonValue getConfigurationMethod() const;
    void setConfigurationMethod(const QJsonValue &configuration_method);
    bool is_configuration_method_Set() const;
    bool is_configuration_method_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getEncryptedExtra() const;
    void setEncryptedExtra(const QString &encrypted_extra);
    bool is_encrypted_extra_Set() const;
    bool is_encrypted_extra_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getExtra() const;
    void setExtra(const QString &extra);
    bool is_extra_Set() const;
    bool is_extra_Valid() const;

    bool isImpersonateUser() const;
    void setImpersonateUser(const bool &impersonate_user);
    bool is_impersonate_user_Set() const;
    bool is_impersonate_user_Valid() const;

    QMap<QString, QJsonValue> getParameters() const;
    void setParameters(const QMap<QString, QJsonValue> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getServerCert() const;
    void setServerCert(const QString &server_cert);
    bool is_server_cert_Set() const;
    bool is_server_cert_Valid() const;

    QString getSqlalchemyUri() const;
    void setSqlalchemyUri(const QString &sqlalchemy_uri);
    bool is_sqlalchemy_uri_Set() const;
    bool is_sqlalchemy_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QJsonValue m_configuration_method;
    bool m_configuration_method_isSet;
    bool m_configuration_method_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_encrypted_extra;
    bool m_encrypted_extra_isSet;
    bool m_encrypted_extra_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_extra;
    bool m_extra_isSet;
    bool m_extra_isValid;

    bool m_impersonate_user;
    bool m_impersonate_user_isSet;
    bool m_impersonate_user_isValid;

    QMap<QString, QJsonValue> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_server_cert;
    bool m_server_cert_isSet;
    bool m_server_cert_isValid;

    QString m_sqlalchemy_uri;
    bool m_sqlalchemy_uri_isSet;
    bool m_sqlalchemy_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseTestConnectionSchema)

#endif // OAIDatabaseTestConnectionSchema_H
