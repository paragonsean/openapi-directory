/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationLayer::OAIAnnotationLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationLayer::OAIAnnotationLayer() {
    this->initializeModel();
}

OAIAnnotationLayer::~OAIAnnotationLayer() {}

void OAIAnnotationLayer::initializeModel() {

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_columns_isSet = false;
    m_description_columns_isValid = false;

    m_hide_line_isSet = false;
    m_hide_line_isValid = false;

    m_interval_end_column_isSet = false;
    m_interval_end_column_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_show_markers_isSet = false;
    m_show_markers_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_time_column_isSet = false;
    m_time_column_isValid = false;

    m_title_column_isSet = false;
    m_title_column_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIAnnotationLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationLayer::fromJsonObject(QJsonObject json) {

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotationType")]);
    m_annotation_type_isSet = !json[QString("annotationType")].isNull() && m_annotation_type_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_columns_isValid = ::OpenAPI::fromJsonValue(m_description_columns, json[QString("descriptionColumns")]);
    m_description_columns_isSet = !json[QString("descriptionColumns")].isNull() && m_description_columns_isValid;

    m_hide_line_isValid = ::OpenAPI::fromJsonValue(m_hide_line, json[QString("hideLine")]);
    m_hide_line_isSet = !json[QString("hideLine")].isNull() && m_hide_line_isValid;

    m_interval_end_column_isValid = ::OpenAPI::fromJsonValue(m_interval_end_column, json[QString("intervalEndColumn")]);
    m_interval_end_column_isSet = !json[QString("intervalEndColumn")].isNull() && m_interval_end_column_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_show_markers_isValid = ::OpenAPI::fromJsonValue(m_show_markers, json[QString("showMarkers")]);
    m_show_markers_isSet = !json[QString("showMarkers")].isNull() && m_show_markers_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_time_column_isValid = ::OpenAPI::fromJsonValue(m_time_column, json[QString("timeColumn")]);
    m_time_column_isSet = !json[QString("timeColumn")].isNull() && m_time_column_isValid;

    m_title_column_isValid = ::OpenAPI::fromJsonValue(m_title_column, json[QString("titleColumn")]);
    m_title_column_isSet = !json[QString("titleColumn")].isNull() && m_title_column_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIAnnotationLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_type_isSet) {
        obj.insert(QString("annotationType"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_columns.size() > 0) {
        obj.insert(QString("descriptionColumns"), ::OpenAPI::toJsonValue(m_description_columns));
    }
    if (m_hide_line_isSet) {
        obj.insert(QString("hideLine"), ::OpenAPI::toJsonValue(m_hide_line));
    }
    if (m_interval_end_column_isSet) {
        obj.insert(QString("intervalEndColumn"), ::OpenAPI::toJsonValue(m_interval_end_column));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_overrides.size() > 0) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_show_markers_isSet) {
        obj.insert(QString("showMarkers"), ::OpenAPI::toJsonValue(m_show_markers));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_time_column_isSet) {
        obj.insert(QString("timeColumn"), ::OpenAPI::toJsonValue(m_time_column));
    }
    if (m_title_column_isSet) {
        obj.insert(QString("titleColumn"), ::OpenAPI::toJsonValue(m_title_column));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIAnnotationLayer::getAnnotationType() const {
    return m_annotation_type;
}
void OAIAnnotationLayer::setAnnotationType(const QString &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAIAnnotationLayer::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAIAnnotationLayer::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

QString OAIAnnotationLayer::getColor() const {
    return m_color;
}
void OAIAnnotationLayer::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIAnnotationLayer::is_color_Set() const{
    return m_color_isSet;
}

bool OAIAnnotationLayer::is_color_Valid() const{
    return m_color_isValid;
}

QList<QString> OAIAnnotationLayer::getDescriptionColumns() const {
    return m_description_columns;
}
void OAIAnnotationLayer::setDescriptionColumns(const QList<QString> &description_columns) {
    m_description_columns = description_columns;
    m_description_columns_isSet = true;
}

bool OAIAnnotationLayer::is_description_columns_Set() const{
    return m_description_columns_isSet;
}

bool OAIAnnotationLayer::is_description_columns_Valid() const{
    return m_description_columns_isValid;
}

bool OAIAnnotationLayer::isHideLine() const {
    return m_hide_line;
}
void OAIAnnotationLayer::setHideLine(const bool &hide_line) {
    m_hide_line = hide_line;
    m_hide_line_isSet = true;
}

bool OAIAnnotationLayer::is_hide_line_Set() const{
    return m_hide_line_isSet;
}

bool OAIAnnotationLayer::is_hide_line_Valid() const{
    return m_hide_line_isValid;
}

QString OAIAnnotationLayer::getIntervalEndColumn() const {
    return m_interval_end_column;
}
void OAIAnnotationLayer::setIntervalEndColumn(const QString &interval_end_column) {
    m_interval_end_column = interval_end_column;
    m_interval_end_column_isSet = true;
}

bool OAIAnnotationLayer::is_interval_end_column_Set() const{
    return m_interval_end_column_isSet;
}

bool OAIAnnotationLayer::is_interval_end_column_Valid() const{
    return m_interval_end_column_isValid;
}

QString OAIAnnotationLayer::getName() const {
    return m_name;
}
void OAIAnnotationLayer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnnotationLayer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnnotationLayer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnnotationLayer::getOpacity() const {
    return m_opacity;
}
void OAIAnnotationLayer::setOpacity(const QString &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIAnnotationLayer::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIAnnotationLayer::is_opacity_Valid() const{
    return m_opacity_isValid;
}

QMap<QString, QJsonValue> OAIAnnotationLayer::getOverrides() const {
    return m_overrides;
}
void OAIAnnotationLayer::setOverrides(const QMap<QString, QJsonValue> &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIAnnotationLayer::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIAnnotationLayer::is_overrides_Valid() const{
    return m_overrides_isValid;
}

bool OAIAnnotationLayer::isShow() const {
    return m_show;
}
void OAIAnnotationLayer::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAIAnnotationLayer::is_show_Set() const{
    return m_show_isSet;
}

bool OAIAnnotationLayer::is_show_Valid() const{
    return m_show_isValid;
}

bool OAIAnnotationLayer::isShowMarkers() const {
    return m_show_markers;
}
void OAIAnnotationLayer::setShowMarkers(const bool &show_markers) {
    m_show_markers = show_markers;
    m_show_markers_isSet = true;
}

bool OAIAnnotationLayer::is_show_markers_Set() const{
    return m_show_markers_isSet;
}

bool OAIAnnotationLayer::is_show_markers_Valid() const{
    return m_show_markers_isValid;
}

QString OAIAnnotationLayer::getSourceType() const {
    return m_source_type;
}
void OAIAnnotationLayer::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIAnnotationLayer::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIAnnotationLayer::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIAnnotationLayer::getStyle() const {
    return m_style;
}
void OAIAnnotationLayer::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIAnnotationLayer::is_style_Set() const{
    return m_style_isSet;
}

bool OAIAnnotationLayer::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIAnnotationLayer::getTimeColumn() const {
    return m_time_column;
}
void OAIAnnotationLayer::setTimeColumn(const QString &time_column) {
    m_time_column = time_column;
    m_time_column_isSet = true;
}

bool OAIAnnotationLayer::is_time_column_Set() const{
    return m_time_column_isSet;
}

bool OAIAnnotationLayer::is_time_column_Valid() const{
    return m_time_column_isValid;
}

QString OAIAnnotationLayer::getTitleColumn() const {
    return m_title_column;
}
void OAIAnnotationLayer::setTitleColumn(const QString &title_column) {
    m_title_column = title_column;
    m_title_column_isSet = true;
}

bool OAIAnnotationLayer::is_title_column_Set() const{
    return m_title_column_isSet;
}

bool OAIAnnotationLayer::is_title_column_Valid() const{
    return m_title_column_isValid;
}

QJsonValue OAIAnnotationLayer::getValue() const {
    return m_value;
}
void OAIAnnotationLayer::setValue(const QJsonValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAnnotationLayer::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAnnotationLayer::is_value_Valid() const{
    return m_value_isValid;
}

float OAIAnnotationLayer::getWidth() const {
    return m_width;
}
void OAIAnnotationLayer::setWidth(const float &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAnnotationLayer::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAnnotationLayer::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIAnnotationLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_end_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_markers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_show_isValid && m_show_markers_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
