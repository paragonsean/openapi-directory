/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_related_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_related_schema::OAIGet_related_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_related_schema::OAIGet_related_schema() {
    this->initializeModel();
}

OAIGet_related_schema::~OAIGet_related_schema() {}

void OAIGet_related_schema::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_include_ids_isSet = false;
    m_include_ids_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIGet_related_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_related_schema::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_include_ids_isValid = ::OpenAPI::fromJsonValue(m_include_ids, json[QString("include_ids")]);
    m_include_ids_isSet = !json[QString("include_ids")].isNull() && m_include_ids_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;
}

QString OAIGet_related_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_related_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_include_ids.size() > 0) {
        obj.insert(QString("include_ids"), ::OpenAPI::toJsonValue(m_include_ids));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QString OAIGet_related_schema::getFilter() const {
    return m_filter;
}
void OAIGet_related_schema::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGet_related_schema::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGet_related_schema::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<qint32> OAIGet_related_schema::getIncludeIds() const {
    return m_include_ids;
}
void OAIGet_related_schema::setIncludeIds(const QList<qint32> &include_ids) {
    m_include_ids = include_ids;
    m_include_ids_isSet = true;
}

bool OAIGet_related_schema::is_include_ids_Set() const{
    return m_include_ids_isSet;
}

bool OAIGet_related_schema::is_include_ids_Valid() const{
    return m_include_ids_isValid;
}

qint32 OAIGet_related_schema::getPage() const {
    return m_page;
}
void OAIGet_related_schema::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGet_related_schema::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGet_related_schema::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIGet_related_schema::getPageSize() const {
    return m_page_size;
}
void OAIGet_related_schema::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGet_related_schema::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGet_related_schema::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIGet_related_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_related_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
