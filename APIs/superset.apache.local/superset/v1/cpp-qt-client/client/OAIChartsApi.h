/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChartsApi_H
#define OAI_OAIChartsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChartCacheScreenshotResponseSchema.h"
#include "OAIChartDataAsyncResponseSchema.h"
#include "OAIChartDataQueryContextSchema.h"
#include "OAIChartDataResponseSchema.h"
#include "OAIChartRestApi_post.h"
#include "OAIChartRestApi_put.h"
#include "OAIGetFavStarIdsSchema.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIHttpFileElement.h"
#include "OAIRelatedResponseSchema.h"
#include "OAIScreenshot_query_schema.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_chart__get_200_response.h"
#include "OAI_chart__pk__get_200_response.h"
#include "OAI_chart__pk__put_200_response.h"
#include "OAI_chart__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChartsApi : public QObject {
    Q_OBJECT

public:
    OAIChartsApi(const int timeOut = 0);
    ~OAIChartsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cache_key QString [required]
    */
    virtual void chartDataCacheKeyGet(const QString &cache_key);

    /**
    * @param[in]  oai_chart_data_query_context_schema OAIChartDataQueryContextSchema [required]
    */
    virtual void chartDataPost(const OAIChartDataQueryContextSchema &oai_chart_data_query_context_schema);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void chartDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void chartExportGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void chartFavoriteStatusGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void chartGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  form_data OAIHttpFileElement [optional]
    * @param[in]  overwrite bool [optional]
    * @param[in]  passwords QString [optional]
    */
    virtual void chartImportPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &form_data = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passwords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void chartInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIScreenshot_query_schema [optional]
    */
    virtual void chartPkCacheScreenshotGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIScreenshot_query_schema> &q = ::OpenAPI::OptionalParam<OAIScreenshot_query_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  format QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void chartPkDataGet(const qint32 &pk, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void chartPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void chartPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_chart_rest_api_put OAIChartRestApi_put [required]
    */
    virtual void chartPkPut(const qint32 &pk, const OAIChartRestApi_put &oai_chart_rest_api_put);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  digest QString [required]
    */
    virtual void chartPkScreenshotDigestGet(const qint32 &pk, const QString &digest);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  digest QString [required]
    */
    virtual void chartPkThumbnailDigestGet(const qint32 &pk, const QString &digest);

    /**
    * @param[in]  oai_chart_rest_api_post OAIChartRestApi_post [required]
    */
    virtual void chartPost(const OAIChartRestApi_post &oai_chart_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void chartRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chartDataCacheKeyGetCallback(OAIHttpRequestWorker *worker);
    void chartDataPostCallback(OAIHttpRequestWorker *worker);
    void chartDeleteCallback(OAIHttpRequestWorker *worker);
    void chartExportGetCallback(OAIHttpRequestWorker *worker);
    void chartFavoriteStatusGetCallback(OAIHttpRequestWorker *worker);
    void chartGetCallback(OAIHttpRequestWorker *worker);
    void chartImportPostCallback(OAIHttpRequestWorker *worker);
    void chartInfoGetCallback(OAIHttpRequestWorker *worker);
    void chartPkCacheScreenshotGetCallback(OAIHttpRequestWorker *worker);
    void chartPkDataGetCallback(OAIHttpRequestWorker *worker);
    void chartPkDeleteCallback(OAIHttpRequestWorker *worker);
    void chartPkGetCallback(OAIHttpRequestWorker *worker);
    void chartPkPutCallback(OAIHttpRequestWorker *worker);
    void chartPkScreenshotDigestGetCallback(OAIHttpRequestWorker *worker);
    void chartPkThumbnailDigestGetCallback(OAIHttpRequestWorker *worker);
    void chartPostCallback(OAIHttpRequestWorker *worker);
    void chartRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chartDataCacheKeyGetSignal(OAIChartDataResponseSchema summary);
    void chartDataPostSignal(OAIChartDataResponseSchema summary);
    void chartDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void chartExportGetSignal(OAIHttpFileElement summary);
    void chartFavoriteStatusGetSignal(OAIGetFavStarIdsSchema summary);
    void chartGetSignal(OAI_chart__get_200_response summary);
    void chartImportPostSignal(OAI_annotation_layer__get_400_response summary);
    void chartInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void chartPkCacheScreenshotGetSignal(OAIChartCacheScreenshotResponseSchema summary);
    void chartPkDataGetSignal(OAIChartDataResponseSchema summary);
    void chartPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void chartPkGetSignal(OAI_chart__pk__get_200_response summary);
    void chartPkPutSignal(OAI_chart__pk__put_200_response summary);
    void chartPkScreenshotDigestGetSignal(OAIHttpFileElement summary);
    void chartPkThumbnailDigestGetSignal(OAIHttpFileElement summary);
    void chartPostSignal(OAI_chart__post_201_response summary);
    void chartRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void chartDataCacheKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIChartDataResponseSchema summary);
    void chartDataPostSignalFull(OAIHttpRequestWorker *worker, OAIChartDataResponseSchema summary);
    void chartDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void chartExportGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void chartFavoriteStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIGetFavStarIdsSchema summary);
    void chartGetSignalFull(OAIHttpRequestWorker *worker, OAI_chart__get_200_response summary);
    void chartImportPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void chartInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void chartPkCacheScreenshotGetSignalFull(OAIHttpRequestWorker *worker, OAIChartCacheScreenshotResponseSchema summary);
    void chartPkDataGetSignalFull(OAIHttpRequestWorker *worker, OAIChartDataResponseSchema summary);
    void chartPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void chartPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_chart__pk__get_200_response summary);
    void chartPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_chart__pk__put_200_response summary);
    void chartPkScreenshotDigestGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void chartPkThumbnailDigestGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void chartPostSignalFull(OAIHttpRequestWorker *worker, OAI_chart__post_201_response summary);
    void chartRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use chartDataCacheKeyGetSignalError() instead")
    void chartDataCacheKeyGetSignalE(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataCacheKeyGetSignalError(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDataPostSignalError() instead")
    void chartDataPostSignalE(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataPostSignalError(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDeleteSignalError() instead")
    void chartDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartExportGetSignalError() instead")
    void chartExportGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartExportGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartFavoriteStatusGetSignalError() instead")
    void chartFavoriteStatusGetSignalE(OAIGetFavStarIdsSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartFavoriteStatusGetSignalError(OAIGetFavStarIdsSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartGetSignalError() instead")
    void chartGetSignalE(OAI_chart__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartGetSignalError(OAI_chart__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartImportPostSignalError() instead")
    void chartImportPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartImportPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartInfoGetSignalError() instead")
    void chartInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkCacheScreenshotGetSignalError() instead")
    void chartPkCacheScreenshotGetSignalE(OAIChartCacheScreenshotResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkCacheScreenshotGetSignalError(OAIChartCacheScreenshotResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkDataGetSignalError() instead")
    void chartPkDataGetSignalE(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkDataGetSignalError(OAIChartDataResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkDeleteSignalError() instead")
    void chartPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkGetSignalError() instead")
    void chartPkGetSignalE(OAI_chart__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkGetSignalError(OAI_chart__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkPutSignalError() instead")
    void chartPkPutSignalE(OAI_chart__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkPutSignalError(OAI_chart__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkScreenshotDigestGetSignalError() instead")
    void chartPkScreenshotDigestGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkScreenshotDigestGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkThumbnailDigestGetSignalError() instead")
    void chartPkThumbnailDigestGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkThumbnailDigestGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPostSignalError() instead")
    void chartPostSignalE(OAI_chart__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPostSignalError(OAI_chart__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartRelatedColumnNameGetSignalError() instead")
    void chartRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chartDataCacheKeyGetSignalErrorFull() instead")
    void chartDataCacheKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataCacheKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDataPostSignalErrorFull() instead")
    void chartDataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDeleteSignalErrorFull() instead")
    void chartDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartExportGetSignalErrorFull() instead")
    void chartExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartFavoriteStatusGetSignalErrorFull() instead")
    void chartFavoriteStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartFavoriteStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartGetSignalErrorFull() instead")
    void chartGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartImportPostSignalErrorFull() instead")
    void chartImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartInfoGetSignalErrorFull() instead")
    void chartInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkCacheScreenshotGetSignalErrorFull() instead")
    void chartPkCacheScreenshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkCacheScreenshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkDataGetSignalErrorFull() instead")
    void chartPkDataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkDataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkDeleteSignalErrorFull() instead")
    void chartPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkGetSignalErrorFull() instead")
    void chartPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkPutSignalErrorFull() instead")
    void chartPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkScreenshotDigestGetSignalErrorFull() instead")
    void chartPkScreenshotDigestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkScreenshotDigestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPkThumbnailDigestGetSignalErrorFull() instead")
    void chartPkThumbnailDigestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPkThumbnailDigestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartPostSignalErrorFull() instead")
    void chartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartRelatedColumnNameGetSignalErrorFull() instead")
    void chartRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
