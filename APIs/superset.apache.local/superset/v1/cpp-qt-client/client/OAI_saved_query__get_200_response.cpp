/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_saved_query__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_saved_query__get_200_response::OAI_saved_query__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_saved_query__get_200_response::OAI_saved_query__get_200_response() {
    this->initializeModel();
}

OAI_saved_query__get_200_response::~OAI_saved_query__get_200_response() {}

void OAI_saved_query__get_200_response::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_description_columns_isSet = false;
    m_description_columns_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_label_columns_isSet = false;
    m_label_columns_isValid = false;

    m_list_columns_isSet = false;
    m_list_columns_isValid = false;

    m_list_title_isSet = false;
    m_list_title_isValid = false;

    m_order_columns_isSet = false;
    m_order_columns_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAI_saved_query__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_saved_query__get_200_response::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_description_columns_isValid = ::OpenAPI::fromJsonValue(m_description_columns, json[QString("description_columns")]);
    m_description_columns_isSet = !json[QString("description_columns")].isNull() && m_description_columns_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_label_columns_isValid = ::OpenAPI::fromJsonValue(m_label_columns, json[QString("label_columns")]);
    m_label_columns_isSet = !json[QString("label_columns")].isNull() && m_label_columns_isValid;

    m_list_columns_isValid = ::OpenAPI::fromJsonValue(m_list_columns, json[QString("list_columns")]);
    m_list_columns_isSet = !json[QString("list_columns")].isNull() && m_list_columns_isValid;

    m_list_title_isValid = ::OpenAPI::fromJsonValue(m_list_title, json[QString("list_title")]);
    m_list_title_isSet = !json[QString("list_title")].isNull() && m_list_title_isValid;

    m_order_columns_isValid = ::OpenAPI::fromJsonValue(m_order_columns, json[QString("order_columns")]);
    m_order_columns_isSet = !json[QString("order_columns")].isNull() && m_order_columns_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAI_saved_query__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_saved_query__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_description_columns.isSet()) {
        obj.insert(QString("description_columns"), ::OpenAPI::toJsonValue(m_description_columns));
    }
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_label_columns.isSet()) {
        obj.insert(QString("label_columns"), ::OpenAPI::toJsonValue(m_label_columns));
    }
    if (m_list_columns.size() > 0) {
        obj.insert(QString("list_columns"), ::OpenAPI::toJsonValue(m_list_columns));
    }
    if (m_list_title_isSet) {
        obj.insert(QString("list_title"), ::OpenAPI::toJsonValue(m_list_title));
    }
    if (m_order_columns.size() > 0) {
        obj.insert(QString("order_columns"), ::OpenAPI::toJsonValue(m_order_columns));
    }
    if (m_result.size() > 0) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

double OAI_saved_query__get_200_response::getCount() const {
    return m_count;
}
void OAI_saved_query__get_200_response::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAI_saved_query__get_200_response::is_count_Set() const{
    return m_count_isSet;
}

bool OAI_saved_query__get_200_response::is_count_Valid() const{
    return m_count_isValid;
}

OAI_annotation_layer__get_200_response_description_columns OAI_saved_query__get_200_response::getDescriptionColumns() const {
    return m_description_columns;
}
void OAI_saved_query__get_200_response::setDescriptionColumns(const OAI_annotation_layer__get_200_response_description_columns &description_columns) {
    m_description_columns = description_columns;
    m_description_columns_isSet = true;
}

bool OAI_saved_query__get_200_response::is_description_columns_Set() const{
    return m_description_columns_isSet;
}

bool OAI_saved_query__get_200_response::is_description_columns_Valid() const{
    return m_description_columns_isValid;
}

QList<QString> OAI_saved_query__get_200_response::getIds() const {
    return m_ids;
}
void OAI_saved_query__get_200_response::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAI_saved_query__get_200_response::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAI_saved_query__get_200_response::is_ids_Valid() const{
    return m_ids_isValid;
}

OAI_annotation_layer__get_200_response_label_columns OAI_saved_query__get_200_response::getLabelColumns() const {
    return m_label_columns;
}
void OAI_saved_query__get_200_response::setLabelColumns(const OAI_annotation_layer__get_200_response_label_columns &label_columns) {
    m_label_columns = label_columns;
    m_label_columns_isSet = true;
}

bool OAI_saved_query__get_200_response::is_label_columns_Set() const{
    return m_label_columns_isSet;
}

bool OAI_saved_query__get_200_response::is_label_columns_Valid() const{
    return m_label_columns_isValid;
}

QList<QString> OAI_saved_query__get_200_response::getListColumns() const {
    return m_list_columns;
}
void OAI_saved_query__get_200_response::setListColumns(const QList<QString> &list_columns) {
    m_list_columns = list_columns;
    m_list_columns_isSet = true;
}

bool OAI_saved_query__get_200_response::is_list_columns_Set() const{
    return m_list_columns_isSet;
}

bool OAI_saved_query__get_200_response::is_list_columns_Valid() const{
    return m_list_columns_isValid;
}

QString OAI_saved_query__get_200_response::getListTitle() const {
    return m_list_title;
}
void OAI_saved_query__get_200_response::setListTitle(const QString &list_title) {
    m_list_title = list_title;
    m_list_title_isSet = true;
}

bool OAI_saved_query__get_200_response::is_list_title_Set() const{
    return m_list_title_isSet;
}

bool OAI_saved_query__get_200_response::is_list_title_Valid() const{
    return m_list_title_isValid;
}

QList<QString> OAI_saved_query__get_200_response::getOrderColumns() const {
    return m_order_columns;
}
void OAI_saved_query__get_200_response::setOrderColumns(const QList<QString> &order_columns) {
    m_order_columns = order_columns;
    m_order_columns_isSet = true;
}

bool OAI_saved_query__get_200_response::is_order_columns_Set() const{
    return m_order_columns_isSet;
}

bool OAI_saved_query__get_200_response::is_order_columns_Valid() const{
    return m_order_columns_isValid;
}

QList<OAISavedQueryRestApi_get_list> OAI_saved_query__get_200_response::getResult() const {
    return m_result;
}
void OAI_saved_query__get_200_response::setResult(const QList<OAISavedQueryRestApi_get_list> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAI_saved_query__get_200_response::is_result_Set() const{
    return m_result_isSet;
}

bool OAI_saved_query__get_200_response::is_result_Valid() const{
    return m_result_isValid;
}

bool OAI_saved_query__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_saved_query__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
