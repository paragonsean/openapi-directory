/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartCacheScreenshotResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartCacheScreenshotResponseSchema::OAIChartCacheScreenshotResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartCacheScreenshotResponseSchema::OAIChartCacheScreenshotResponseSchema() {
    this->initializeModel();
}

OAIChartCacheScreenshotResponseSchema::~OAIChartCacheScreenshotResponseSchema() {}

void OAIChartCacheScreenshotResponseSchema::initializeModel() {

    m_cache_key_isSet = false;
    m_cache_key_isValid = false;

    m_chart_url_isSet = false;
    m_chart_url_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;
}

void OAIChartCacheScreenshotResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartCacheScreenshotResponseSchema::fromJsonObject(QJsonObject json) {

    m_cache_key_isValid = ::OpenAPI::fromJsonValue(m_cache_key, json[QString("cache_key")]);
    m_cache_key_isSet = !json[QString("cache_key")].isNull() && m_cache_key_isValid;

    m_chart_url_isValid = ::OpenAPI::fromJsonValue(m_chart_url, json[QString("chart_url")]);
    m_chart_url_isSet = !json[QString("chart_url")].isNull() && m_chart_url_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;
}

QString OAIChartCacheScreenshotResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartCacheScreenshotResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_key_isSet) {
        obj.insert(QString("cache_key"), ::OpenAPI::toJsonValue(m_cache_key));
    }
    if (m_chart_url_isSet) {
        obj.insert(QString("chart_url"), ::OpenAPI::toJsonValue(m_chart_url));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    return obj;
}

QString OAIChartCacheScreenshotResponseSchema::getCacheKey() const {
    return m_cache_key;
}
void OAIChartCacheScreenshotResponseSchema::setCacheKey(const QString &cache_key) {
    m_cache_key = cache_key;
    m_cache_key_isSet = true;
}

bool OAIChartCacheScreenshotResponseSchema::is_cache_key_Set() const{
    return m_cache_key_isSet;
}

bool OAIChartCacheScreenshotResponseSchema::is_cache_key_Valid() const{
    return m_cache_key_isValid;
}

QString OAIChartCacheScreenshotResponseSchema::getChartUrl() const {
    return m_chart_url;
}
void OAIChartCacheScreenshotResponseSchema::setChartUrl(const QString &chart_url) {
    m_chart_url = chart_url;
    m_chart_url_isSet = true;
}

bool OAIChartCacheScreenshotResponseSchema::is_chart_url_Set() const{
    return m_chart_url_isSet;
}

bool OAIChartCacheScreenshotResponseSchema::is_chart_url_Valid() const{
    return m_chart_url_isValid;
}

QString OAIChartCacheScreenshotResponseSchema::getImageUrl() const {
    return m_image_url;
}
void OAIChartCacheScreenshotResponseSchema::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIChartCacheScreenshotResponseSchema::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIChartCacheScreenshotResponseSchema::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIChartCacheScreenshotResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartCacheScreenshotResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
