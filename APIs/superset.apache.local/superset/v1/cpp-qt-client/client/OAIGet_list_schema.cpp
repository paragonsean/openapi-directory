/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_list_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_list_schema::OAIGet_list_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_list_schema::OAIGet_list_schema() {
    this->initializeModel();
}

OAIGet_list_schema::~OAIGet_list_schema() {}

void OAIGet_list_schema::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_order_column_isSet = false;
    m_order_column_isValid = false;

    m_order_direction_isSet = false;
    m_order_direction_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIGet_list_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_list_schema::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_order_column_isValid = ::OpenAPI::fromJsonValue(m_order_column, json[QString("order_column")]);
    m_order_column_isSet = !json[QString("order_column")].isNull() && m_order_column_isValid;

    m_order_direction_isValid = ::OpenAPI::fromJsonValue(m_order_direction, json[QString("order_direction")]);
    m_order_direction_isSet = !json[QString("order_direction")].isNull() && m_order_direction_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;
}

QString OAIGet_list_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_list_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_keys.size() > 0) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_order_column_isSet) {
        obj.insert(QString("order_column"), ::OpenAPI::toJsonValue(m_order_column));
    }
    if (m_order_direction_isSet) {
        obj.insert(QString("order_direction"), ::OpenAPI::toJsonValue(m_order_direction));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QList<QString> OAIGet_list_schema::getColumns() const {
    return m_columns;
}
void OAIGet_list_schema::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIGet_list_schema::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIGet_list_schema::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<OAIGet_list_schema_filters_inner> OAIGet_list_schema::getFilters() const {
    return m_filters;
}
void OAIGet_list_schema::setFilters(const QList<OAIGet_list_schema_filters_inner> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGet_list_schema::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGet_list_schema::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<QString> OAIGet_list_schema::getKeys() const {
    return m_keys;
}
void OAIGet_list_schema::setKeys(const QList<QString> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIGet_list_schema::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIGet_list_schema::is_keys_Valid() const{
    return m_keys_isValid;
}

QString OAIGet_list_schema::getOrderColumn() const {
    return m_order_column;
}
void OAIGet_list_schema::setOrderColumn(const QString &order_column) {
    m_order_column = order_column;
    m_order_column_isSet = true;
}

bool OAIGet_list_schema::is_order_column_Set() const{
    return m_order_column_isSet;
}

bool OAIGet_list_schema::is_order_column_Valid() const{
    return m_order_column_isValid;
}

QString OAIGet_list_schema::getOrderDirection() const {
    return m_order_direction;
}
void OAIGet_list_schema::setOrderDirection(const QString &order_direction) {
    m_order_direction = order_direction;
    m_order_direction_isSet = true;
}

bool OAIGet_list_schema::is_order_direction_Set() const{
    return m_order_direction_isSet;
}

bool OAIGet_list_schema::is_order_direction_Valid() const{
    return m_order_direction_isValid;
}

qint32 OAIGet_list_schema::getPage() const {
    return m_page;
}
void OAIGet_list_schema::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGet_list_schema::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGet_list_schema::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIGet_list_schema::getPageSize() const {
    return m_page_size;
}
void OAIGet_list_schema::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGet_list_schema::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGet_list_schema::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIGet_list_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_list_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
