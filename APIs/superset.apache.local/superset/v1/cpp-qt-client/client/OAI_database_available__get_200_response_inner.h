/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_database_available__get_200_response_inner.h
 *
 * 
 */

#ifndef OAI_database_available__get_200_response_inner_H
#define OAI_database_available__get_200_response_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_database_available__get_200_response_inner : public OAIObject {
public:
    OAI_database_available__get_200_response_inner();
    OAI_database_available__get_200_response_inner(QString json);
    ~OAI_database_available__get_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAvailableDrivers() const;
    void setAvailableDrivers(const QList<QString> &available_drivers);
    bool is_available_drivers_Set() const;
    bool is_available_drivers_Valid() const;

    QString getDefaultDriver() const;
    void setDefaultDriver(const QString &default_driver);
    bool is_default_driver_Set() const;
    bool is_default_driver_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIObject getParameters() const;
    void setParameters(const OAIObject &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    bool isPreferred() const;
    void setPreferred(const bool &preferred);
    bool is_preferred_Set() const;
    bool is_preferred_Valid() const;

    QString getSqlalchemyUriPlaceholder() const;
    void setSqlalchemyUriPlaceholder(const QString &sqlalchemy_uri_placeholder);
    bool is_sqlalchemy_uri_placeholder_Set() const;
    bool is_sqlalchemy_uri_placeholder_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_available_drivers;
    bool m_available_drivers_isSet;
    bool m_available_drivers_isValid;

    QString m_default_driver;
    bool m_default_driver_isSet;
    bool m_default_driver_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIObject m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    bool m_preferred;
    bool m_preferred_isSet;
    bool m_preferred_isValid;

    QString m_sqlalchemy_uri_placeholder;
    bool m_sqlalchemy_uri_placeholder_isSet;
    bool m_sqlalchemy_uri_placeholder_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_database_available__get_200_response_inner)

#endif // OAI_database_available__get_200_response_inner_H
