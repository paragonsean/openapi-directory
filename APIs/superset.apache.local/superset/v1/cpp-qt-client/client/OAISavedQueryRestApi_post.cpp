/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedQueryRestApi_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedQueryRestApi_post::OAISavedQueryRestApi_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedQueryRestApi_post::OAISavedQueryRestApi_post() {
    this->initializeModel();
}

OAISavedQueryRestApi_post::~OAISavedQueryRestApi_post() {}

void OAISavedQueryRestApi_post::initializeModel() {

    m_db_id_isSet = false;
    m_db_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;
}

void OAISavedQueryRestApi_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedQueryRestApi_post::fromJsonObject(QJsonObject json) {

    m_db_id_isValid = ::OpenAPI::fromJsonValue(m_db_id, json[QString("db_id")]);
    m_db_id_isSet = !json[QString("db_id")].isNull() && m_db_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;
}

QString OAISavedQueryRestApi_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedQueryRestApi_post::asJsonObject() const {
    QJsonObject obj;
    if (m_db_id_isSet) {
        obj.insert(QString("db_id"), ::OpenAPI::toJsonValue(m_db_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    return obj;
}

qint32 OAISavedQueryRestApi_post::getDbId() const {
    return m_db_id;
}
void OAISavedQueryRestApi_post::setDbId(const qint32 &db_id) {
    m_db_id = db_id;
    m_db_id_isSet = true;
}

bool OAISavedQueryRestApi_post::is_db_id_Set() const{
    return m_db_id_isSet;
}

bool OAISavedQueryRestApi_post::is_db_id_Valid() const{
    return m_db_id_isValid;
}

QString OAISavedQueryRestApi_post::getDescription() const {
    return m_description;
}
void OAISavedQueryRestApi_post::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedQueryRestApi_post::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedQueryRestApi_post::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISavedQueryRestApi_post::getLabel() const {
    return m_label;
}
void OAISavedQueryRestApi_post::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISavedQueryRestApi_post::is_label_Set() const{
    return m_label_isSet;
}

bool OAISavedQueryRestApi_post::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISavedQueryRestApi_post::getSchema() const {
    return m_schema;
}
void OAISavedQueryRestApi_post::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISavedQueryRestApi_post::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISavedQueryRestApi_post::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISavedQueryRestApi_post::getSql() const {
    return m_sql;
}
void OAISavedQueryRestApi_post::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAISavedQueryRestApi_post::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAISavedQueryRestApi_post::is_sql_Valid() const{
    return m_sql_isValid;
}

bool OAISavedQueryRestApi_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedQueryRestApi_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
