/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedQueryRestApi_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedQueryRestApi_get::OAISavedQueryRestApi_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedQueryRestApi_get::OAISavedQueryRestApi_get() {
    this->initializeModel();
}

OAISavedQueryRestApi_get::~OAISavedQueryRestApi_get() {}

void OAISavedQueryRestApi_get::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_sql_tables_isSet = false;
    m_sql_tables_isValid = false;
}

void OAISavedQueryRestApi_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedQueryRestApi_get::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_sql_tables_isValid = ::OpenAPI::fromJsonValue(m_sql_tables, json[QString("sql_tables")]);
    m_sql_tables_isSet = !json[QString("sql_tables")].isNull() && m_sql_tables_isValid;
}

QString OAISavedQueryRestApi_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedQueryRestApi_get::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_sql_tables_isSet) {
        obj.insert(QString("sql_tables"), ::OpenAPI::toJsonValue(m_sql_tables));
    }
    return obj;
}

OAIMeta31 OAISavedQueryRestApi_get::getCreatedBy() const {
    return m_created_by;
}
void OAISavedQueryRestApi_get::setCreatedBy(const OAIMeta31 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISavedQueryRestApi_get::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISavedQueryRestApi_get::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIMeta32 OAISavedQueryRestApi_get::getDatabase() const {
    return m_database;
}
void OAISavedQueryRestApi_get::setDatabase(const OAIMeta32 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAISavedQueryRestApi_get::is_database_Set() const{
    return m_database_isSet;
}

bool OAISavedQueryRestApi_get::is_database_Valid() const{
    return m_database_isValid;
}

QString OAISavedQueryRestApi_get::getDescription() const {
    return m_description;
}
void OAISavedQueryRestApi_get::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedQueryRestApi_get::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedQueryRestApi_get::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISavedQueryRestApi_get::getId() const {
    return m_id;
}
void OAISavedQueryRestApi_get::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISavedQueryRestApi_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAISavedQueryRestApi_get::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISavedQueryRestApi_get::getLabel() const {
    return m_label;
}
void OAISavedQueryRestApi_get::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISavedQueryRestApi_get::is_label_Set() const{
    return m_label_isSet;
}

bool OAISavedQueryRestApi_get::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISavedQueryRestApi_get::getSchema() const {
    return m_schema;
}
void OAISavedQueryRestApi_get::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISavedQueryRestApi_get::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISavedQueryRestApi_get::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISavedQueryRestApi_get::getSql() const {
    return m_sql;
}
void OAISavedQueryRestApi_get::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAISavedQueryRestApi_get::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAISavedQueryRestApi_get::is_sql_Valid() const{
    return m_sql_isValid;
}

QJsonValue OAISavedQueryRestApi_get::getSqlTables() const {
    return m_sql_tables;
}
void OAISavedQueryRestApi_get::setSqlTables(const QJsonValue &sql_tables) {
    m_sql_tables = sql_tables;
    m_sql_tables_isSet = true;
}

bool OAISavedQueryRestApi_get::is_sql_tables_Set() const{
    return m_sql_tables_isSet;
}

bool OAISavedQueryRestApi_get::is_sql_tables_Valid() const{
    return m_sql_tables_isValid;
}

bool OAISavedQueryRestApi_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_tables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedQueryRestApi_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
