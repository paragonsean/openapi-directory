/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDashboardsApi_H
#define OAI_OAIDashboardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDashboardRestApi_post.h"
#include "OAIDashboardRestApi_put.h"
#include "OAIGetFavStarIdsSchema.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIHttpFileElement.h"
#include "OAIRelatedResponseSchema.h"
#include "OAIThumbnail_query_schema.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_dashboard__get_200_response.h"
#include "OAI_dashboard__id_or_slug__charts_get_200_response.h"
#include "OAI_dashboard__id_or_slug__datasets_get_200_response.h"
#include "OAI_dashboard__id_or_slug__get_200_response.h"
#include "OAI_dashboard__pk__put_200_response.h"
#include "OAI_dashboard__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDashboardsApi : public QObject {
    Q_OBJECT

public:
    OAIDashboardsApi(const int timeOut = 0);
    ~OAIDashboardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void dashboardDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void dashboardExportGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void dashboardFavoriteStatusGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void dashboardGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  id_or_slug QString [required]
    */
    virtual void dashboardIdOrSlugChartsGet(const QString &id_or_slug);

    /**
    * @param[in]  id_or_slug QString [required]
    */
    virtual void dashboardIdOrSlugDatasetsGet(const QString &id_or_slug);

    /**
    * @param[in]  id_or_slug QString [required]
    */
    virtual void dashboardIdOrSlugGet(const QString &id_or_slug);

    /**
    * @param[in]  form_data OAIHttpFileElement [optional]
    * @param[in]  overwrite bool [optional]
    * @param[in]  passwords QString [optional]
    */
    virtual void dashboardImportPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &form_data = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passwords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void dashboardInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void dashboardPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_dashboard_rest_api_put OAIDashboardRestApi_put [required]
    */
    virtual void dashboardPkPut(const qint32 &pk, const OAIDashboardRestApi_put &oai_dashboard_rest_api_put);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  digest QString [required]
    * @param[in]  q OAIThumbnail_query_schema [optional]
    */
    virtual void dashboardPkThumbnailDigestGet(const qint32 &pk, const QString &digest, const ::OpenAPI::OptionalParam<OAIThumbnail_query_schema> &q = ::OpenAPI::OptionalParam<OAIThumbnail_query_schema>());

    /**
    * @param[in]  oai_dashboard_rest_api_post OAIDashboardRestApi_post [required]
    */
    virtual void dashboardPost(const OAIDashboardRestApi_post &oai_dashboard_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void dashboardRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dashboardDeleteCallback(OAIHttpRequestWorker *worker);
    void dashboardExportGetCallback(OAIHttpRequestWorker *worker);
    void dashboardFavoriteStatusGetCallback(OAIHttpRequestWorker *worker);
    void dashboardGetCallback(OAIHttpRequestWorker *worker);
    void dashboardIdOrSlugChartsGetCallback(OAIHttpRequestWorker *worker);
    void dashboardIdOrSlugDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void dashboardIdOrSlugGetCallback(OAIHttpRequestWorker *worker);
    void dashboardImportPostCallback(OAIHttpRequestWorker *worker);
    void dashboardInfoGetCallback(OAIHttpRequestWorker *worker);
    void dashboardPkDeleteCallback(OAIHttpRequestWorker *worker);
    void dashboardPkPutCallback(OAIHttpRequestWorker *worker);
    void dashboardPkThumbnailDigestGetCallback(OAIHttpRequestWorker *worker);
    void dashboardPostCallback(OAIHttpRequestWorker *worker);
    void dashboardRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dashboardDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void dashboardExportGetSignal(QString summary);
    void dashboardFavoriteStatusGetSignal(OAIGetFavStarIdsSchema summary);
    void dashboardGetSignal(OAI_dashboard__get_200_response summary);
    void dashboardIdOrSlugChartsGetSignal(OAI_dashboard__id_or_slug__charts_get_200_response summary);
    void dashboardIdOrSlugDatasetsGetSignal(OAI_dashboard__id_or_slug__datasets_get_200_response summary);
    void dashboardIdOrSlugGetSignal(OAI_dashboard__id_or_slug__get_200_response summary);
    void dashboardImportPostSignal(OAI_annotation_layer__get_400_response summary);
    void dashboardInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void dashboardPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void dashboardPkPutSignal(OAI_dashboard__pk__put_200_response summary);
    void dashboardPkThumbnailDigestGetSignal(OAIHttpFileElement summary);
    void dashboardPostSignal(OAI_dashboard__post_201_response summary);
    void dashboardRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void dashboardDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void dashboardExportGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void dashboardFavoriteStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIGetFavStarIdsSchema summary);
    void dashboardGetSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__get_200_response summary);
    void dashboardIdOrSlugChartsGetSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__id_or_slug__charts_get_200_response summary);
    void dashboardIdOrSlugDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__id_or_slug__datasets_get_200_response summary);
    void dashboardIdOrSlugGetSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__id_or_slug__get_200_response summary);
    void dashboardImportPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void dashboardInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void dashboardPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void dashboardPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__pk__put_200_response summary);
    void dashboardPkThumbnailDigestGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void dashboardPostSignalFull(OAIHttpRequestWorker *worker, OAI_dashboard__post_201_response summary);
    void dashboardRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use dashboardDeleteSignalError() instead")
    void dashboardDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardExportGetSignalError() instead")
    void dashboardExportGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardExportGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardFavoriteStatusGetSignalError() instead")
    void dashboardFavoriteStatusGetSignalE(OAIGetFavStarIdsSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardFavoriteStatusGetSignalError(OAIGetFavStarIdsSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardGetSignalError() instead")
    void dashboardGetSignalE(OAI_dashboard__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardGetSignalError(OAI_dashboard__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugChartsGetSignalError() instead")
    void dashboardIdOrSlugChartsGetSignalE(OAI_dashboard__id_or_slug__charts_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugChartsGetSignalError(OAI_dashboard__id_or_slug__charts_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugDatasetsGetSignalError() instead")
    void dashboardIdOrSlugDatasetsGetSignalE(OAI_dashboard__id_or_slug__datasets_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugDatasetsGetSignalError(OAI_dashboard__id_or_slug__datasets_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugGetSignalError() instead")
    void dashboardIdOrSlugGetSignalE(OAI_dashboard__id_or_slug__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugGetSignalError(OAI_dashboard__id_or_slug__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardImportPostSignalError() instead")
    void dashboardImportPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardImportPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardInfoGetSignalError() instead")
    void dashboardInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkDeleteSignalError() instead")
    void dashboardPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkPutSignalError() instead")
    void dashboardPkPutSignalE(OAI_dashboard__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkPutSignalError(OAI_dashboard__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkThumbnailDigestGetSignalError() instead")
    void dashboardPkThumbnailDigestGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkThumbnailDigestGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPostSignalError() instead")
    void dashboardPostSignalE(OAI_dashboard__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPostSignalError(OAI_dashboard__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardRelatedColumnNameGetSignalError() instead")
    void dashboardRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dashboardDeleteSignalErrorFull() instead")
    void dashboardDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardExportGetSignalErrorFull() instead")
    void dashboardExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardFavoriteStatusGetSignalErrorFull() instead")
    void dashboardFavoriteStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardFavoriteStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardGetSignalErrorFull() instead")
    void dashboardGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugChartsGetSignalErrorFull() instead")
    void dashboardIdOrSlugChartsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugChartsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugDatasetsGetSignalErrorFull() instead")
    void dashboardIdOrSlugDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardIdOrSlugGetSignalErrorFull() instead")
    void dashboardIdOrSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardIdOrSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardImportPostSignalErrorFull() instead")
    void dashboardImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardInfoGetSignalErrorFull() instead")
    void dashboardInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkDeleteSignalErrorFull() instead")
    void dashboardPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkPutSignalErrorFull() instead")
    void dashboardPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPkThumbnailDigestGetSignalErrorFull() instead")
    void dashboardPkThumbnailDigestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPkThumbnailDigestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardPostSignalErrorFull() instead")
    void dashboardPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardRelatedColumnNameGetSignalErrorFull() instead")
    void dashboardRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
