/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableMetadataResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableMetadataResponseSchema::OAITableMetadataResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableMetadataResponseSchema::OAITableMetadataResponseSchema() {
    this->initializeModel();
}

OAITableMetadataResponseSchema::~OAITableMetadataResponseSchema() {}

void OAITableMetadataResponseSchema::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_foreign_keys_isSet = false;
    m_foreign_keys_isValid = false;

    m_indexes_isSet = false;
    m_indexes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_select_star_isSet = false;
    m_select_star_isValid = false;
}

void OAITableMetadataResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableMetadataResponseSchema::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_foreign_keys_isValid = ::OpenAPI::fromJsonValue(m_foreign_keys, json[QString("foreignKeys")]);
    m_foreign_keys_isSet = !json[QString("foreignKeys")].isNull() && m_foreign_keys_isValid;

    m_indexes_isValid = ::OpenAPI::fromJsonValue(m_indexes, json[QString("indexes")]);
    m_indexes_isSet = !json[QString("indexes")].isNull() && m_indexes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_select_star_isValid = ::OpenAPI::fromJsonValue(m_select_star, json[QString("selectStar")]);
    m_select_star_isSet = !json[QString("selectStar")].isNull() && m_select_star_isValid;
}

QString OAITableMetadataResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableMetadataResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_foreign_keys.size() > 0) {
        obj.insert(QString("foreignKeys"), ::OpenAPI::toJsonValue(m_foreign_keys));
    }
    if (m_indexes.size() > 0) {
        obj.insert(QString("indexes"), ::OpenAPI::toJsonValue(m_indexes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_key.isSet()) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_select_star_isSet) {
        obj.insert(QString("selectStar"), ::OpenAPI::toJsonValue(m_select_star));
    }
    return obj;
}

QList<OAITableMetadataColumnsResponse> OAITableMetadataResponseSchema::getColumns() const {
    return m_columns;
}
void OAITableMetadataResponseSchema::setColumns(const QList<OAITableMetadataColumnsResponse> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITableMetadataResponseSchema::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITableMetadataResponseSchema::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<OAITableMetadataForeignKeysIndexesResponse> OAITableMetadataResponseSchema::getForeignKeys() const {
    return m_foreign_keys;
}
void OAITableMetadataResponseSchema::setForeignKeys(const QList<OAITableMetadataForeignKeysIndexesResponse> &foreign_keys) {
    m_foreign_keys = foreign_keys;
    m_foreign_keys_isSet = true;
}

bool OAITableMetadataResponseSchema::is_foreign_keys_Set() const{
    return m_foreign_keys_isSet;
}

bool OAITableMetadataResponseSchema::is_foreign_keys_Valid() const{
    return m_foreign_keys_isValid;
}

QList<OAITableMetadataForeignKeysIndexesResponse> OAITableMetadataResponseSchema::getIndexes() const {
    return m_indexes;
}
void OAITableMetadataResponseSchema::setIndexes(const QList<OAITableMetadataForeignKeysIndexesResponse> &indexes) {
    m_indexes = indexes;
    m_indexes_isSet = true;
}

bool OAITableMetadataResponseSchema::is_indexes_Set() const{
    return m_indexes_isSet;
}

bool OAITableMetadataResponseSchema::is_indexes_Valid() const{
    return m_indexes_isValid;
}

QString OAITableMetadataResponseSchema::getName() const {
    return m_name;
}
void OAITableMetadataResponseSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableMetadataResponseSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableMetadataResponseSchema::is_name_Valid() const{
    return m_name_isValid;
}

OAITableMetadataPrimaryKeyResponse OAITableMetadataResponseSchema::getPrimaryKey() const {
    return m_primary_key;
}
void OAITableMetadataResponseSchema::setPrimaryKey(const OAITableMetadataPrimaryKeyResponse &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAITableMetadataResponseSchema::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAITableMetadataResponseSchema::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAITableMetadataResponseSchema::getSelectStar() const {
    return m_select_star;
}
void OAITableMetadataResponseSchema::setSelectStar(const QString &select_star) {
    m_select_star = select_star;
    m_select_star_isSet = true;
}

bool OAITableMetadataResponseSchema::is_select_star_Set() const{
    return m_select_star_isSet;
}

bool OAITableMetadataResponseSchema::is_select_star_Valid() const{
    return m_select_star_isValid;
}

bool OAITableMetadataResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreign_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_star_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableMetadataResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
