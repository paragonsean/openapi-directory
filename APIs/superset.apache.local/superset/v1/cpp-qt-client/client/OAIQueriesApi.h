/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueriesApi_H
#define OAI_OAIQueriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistincResponseSchema.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIHttpFileElement.h"
#include "OAIRelatedResponseSchema.h"
#include "OAISavedQueryRestApi_post.h"
#include "OAISavedQueryRestApi_put.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_query__get_200_response.h"
#include "OAI_query__pk__get_200_response.h"
#include "OAI_saved_query__get_200_response.h"
#include "OAI_saved_query__pk__get_200_response.h"
#include "OAI_saved_query__pk__put_200_response.h"
#include "OAI_saved_query__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueriesApi : public QObject {
    Q_OBJECT

public:
    OAIQueriesApi(const int timeOut = 0);
    ~OAIQueriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void queryDistinctColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void queryGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void queryPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void queryRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void savedQueryDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void savedQueryDistinctColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void savedQueryExportGet(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void savedQueryGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  form_data OAIHttpFileElement [optional]
    * @param[in]  overwrite bool [optional]
    * @param[in]  passwords QString [optional]
    */
    virtual void savedQueryImportPost(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &form_data = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passwords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void savedQueryInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void savedQueryPkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void savedQueryPkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_saved_query_rest_api_put OAISavedQueryRestApi_put [required]
    */
    virtual void savedQueryPkPut(const qint32 &pk, const OAISavedQueryRestApi_put &oai_saved_query_rest_api_put);

    /**
    * @param[in]  oai_saved_query_rest_api_post OAISavedQueryRestApi_post [required]
    */
    virtual void savedQueryPost(const OAISavedQueryRestApi_post &oai_saved_query_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void savedQueryRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryDistinctColumnNameGetCallback(OAIHttpRequestWorker *worker);
    void queryGetCallback(OAIHttpRequestWorker *worker);
    void queryPkGetCallback(OAIHttpRequestWorker *worker);
    void queryRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryDeleteCallback(OAIHttpRequestWorker *worker);
    void savedQueryDistinctColumnNameGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryExportGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryImportPostCallback(OAIHttpRequestWorker *worker);
    void savedQueryInfoGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryPkDeleteCallback(OAIHttpRequestWorker *worker);
    void savedQueryPkGetCallback(OAIHttpRequestWorker *worker);
    void savedQueryPkPutCallback(OAIHttpRequestWorker *worker);
    void savedQueryPostCallback(OAIHttpRequestWorker *worker);
    void savedQueryRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryDistinctColumnNameGetSignal(OAIDistincResponseSchema summary);
    void queryGetSignal(OAI_query__get_200_response summary);
    void queryPkGetSignal(OAI_query__pk__get_200_response summary);
    void queryRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);
    void savedQueryDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void savedQueryDistinctColumnNameGetSignal(OAIDistincResponseSchema summary);
    void savedQueryExportGetSignal(OAIHttpFileElement summary);
    void savedQueryGetSignal(OAI_saved_query__get_200_response summary);
    void savedQueryImportPostSignal(OAI_annotation_layer__get_400_response summary);
    void savedQueryInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void savedQueryPkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void savedQueryPkGetSignal(OAI_saved_query__pk__get_200_response summary);
    void savedQueryPkPutSignal(OAI_saved_query__pk__put_200_response summary);
    void savedQueryPostSignal(OAI_saved_query__post_201_response summary);
    void savedQueryRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void queryDistinctColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIDistincResponseSchema summary);
    void queryGetSignalFull(OAIHttpRequestWorker *worker, OAI_query__get_200_response summary);
    void queryPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_query__pk__get_200_response summary);
    void queryRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);
    void savedQueryDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void savedQueryDistinctColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIDistincResponseSchema summary);
    void savedQueryExportGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void savedQueryGetSignalFull(OAIHttpRequestWorker *worker, OAI_saved_query__get_200_response summary);
    void savedQueryImportPostSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void savedQueryInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void savedQueryPkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void savedQueryPkGetSignalFull(OAIHttpRequestWorker *worker, OAI_saved_query__pk__get_200_response summary);
    void savedQueryPkPutSignalFull(OAIHttpRequestWorker *worker, OAI_saved_query__pk__put_200_response summary);
    void savedQueryPostSignalFull(OAIHttpRequestWorker *worker, OAI_saved_query__post_201_response summary);
    void savedQueryRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use queryDistinctColumnNameGetSignalError() instead")
    void queryDistinctColumnNameGetSignalE(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDistinctColumnNameGetSignalError(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryGetSignalError() instead")
    void queryGetSignalE(OAI_query__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryGetSignalError(OAI_query__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPkGetSignalError() instead")
    void queryPkGetSignalE(OAI_query__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPkGetSignalError(OAI_query__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRelatedColumnNameGetSignalError() instead")
    void queryRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryDeleteSignalError() instead")
    void savedQueryDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryDistinctColumnNameGetSignalError() instead")
    void savedQueryDistinctColumnNameGetSignalE(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryDistinctColumnNameGetSignalError(OAIDistincResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryExportGetSignalError() instead")
    void savedQueryExportGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryExportGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryGetSignalError() instead")
    void savedQueryGetSignalE(OAI_saved_query__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryGetSignalError(OAI_saved_query__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryImportPostSignalError() instead")
    void savedQueryImportPostSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryImportPostSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryInfoGetSignalError() instead")
    void savedQueryInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkDeleteSignalError() instead")
    void savedQueryPkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkGetSignalError() instead")
    void savedQueryPkGetSignalE(OAI_saved_query__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkGetSignalError(OAI_saved_query__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkPutSignalError() instead")
    void savedQueryPkPutSignalE(OAI_saved_query__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkPutSignalError(OAI_saved_query__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPostSignalError() instead")
    void savedQueryPostSignalE(OAI_saved_query__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPostSignalError(OAI_saved_query__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryRelatedColumnNameGetSignalError() instead")
    void savedQueryRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryDistinctColumnNameGetSignalErrorFull() instead")
    void queryDistinctColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDistinctColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryGetSignalErrorFull() instead")
    void queryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPkGetSignalErrorFull() instead")
    void queryPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRelatedColumnNameGetSignalErrorFull() instead")
    void queryRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryDeleteSignalErrorFull() instead")
    void savedQueryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryDistinctColumnNameGetSignalErrorFull() instead")
    void savedQueryDistinctColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryDistinctColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryExportGetSignalErrorFull() instead")
    void savedQueryExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryGetSignalErrorFull() instead")
    void savedQueryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryImportPostSignalErrorFull() instead")
    void savedQueryImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryInfoGetSignalErrorFull() instead")
    void savedQueryInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkDeleteSignalErrorFull() instead")
    void savedQueryPkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkGetSignalErrorFull() instead")
    void savedQueryPkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPkPutSignalErrorFull() instead")
    void savedQueryPkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryPostSignalErrorFull() instead")
    void savedQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedQueryRelatedColumnNameGetSignalErrorFull() instead")
    void savedQueryRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedQueryRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
