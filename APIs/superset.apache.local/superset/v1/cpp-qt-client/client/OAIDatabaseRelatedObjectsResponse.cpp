/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseRelatedObjectsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseRelatedObjectsResponse::OAIDatabaseRelatedObjectsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseRelatedObjectsResponse::OAIDatabaseRelatedObjectsResponse() {
    this->initializeModel();
}

OAIDatabaseRelatedObjectsResponse::~OAIDatabaseRelatedObjectsResponse() {}

void OAIDatabaseRelatedObjectsResponse::initializeModel() {

    m_charts_isSet = false;
    m_charts_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;
}

void OAIDatabaseRelatedObjectsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseRelatedObjectsResponse::fromJsonObject(QJsonObject json) {

    m_charts_isValid = ::OpenAPI::fromJsonValue(m_charts, json[QString("charts")]);
    m_charts_isSet = !json[QString("charts")].isNull() && m_charts_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("dashboards")]);
    m_dashboards_isSet = !json[QString("dashboards")].isNull() && m_dashboards_isValid;
}

QString OAIDatabaseRelatedObjectsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseRelatedObjectsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_charts.isSet()) {
        obj.insert(QString("charts"), ::OpenAPI::toJsonValue(m_charts));
    }
    if (m_dashboards.isSet()) {
        obj.insert(QString("dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    return obj;
}

OAIDatabaseRelatedCharts OAIDatabaseRelatedObjectsResponse::getCharts() const {
    return m_charts;
}
void OAIDatabaseRelatedObjectsResponse::setCharts(const OAIDatabaseRelatedCharts &charts) {
    m_charts = charts;
    m_charts_isSet = true;
}

bool OAIDatabaseRelatedObjectsResponse::is_charts_Set() const{
    return m_charts_isSet;
}

bool OAIDatabaseRelatedObjectsResponse::is_charts_Valid() const{
    return m_charts_isValid;
}

OAIDatabaseRelatedDashboards OAIDatabaseRelatedObjectsResponse::getDashboards() const {
    return m_dashboards;
}
void OAIDatabaseRelatedObjectsResponse::setDashboards(const OAIDatabaseRelatedDashboards &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIDatabaseRelatedObjectsResponse::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIDatabaseRelatedObjectsResponse::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

bool OAIDatabaseRelatedObjectsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseRelatedObjectsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
