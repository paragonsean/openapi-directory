/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedQueryRestApi_get_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedQueryRestApi_get_list::OAISavedQueryRestApi_get_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedQueryRestApi_get_list::OAISavedQueryRestApi_get_list() {
    this->initializeModel();
}

OAISavedQueryRestApi_get_list::~OAISavedQueryRestApi_get_list() {}

void OAISavedQueryRestApi_get_list::initializeModel() {

    m_changed_on_delta_humanized_isSet = false;
    m_changed_on_delta_humanized_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_db_id_isSet = false;
    m_db_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_run_delta_humanized_isSet = false;
    m_last_run_delta_humanized_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_sql_tables_isSet = false;
    m_sql_tables_isValid = false;
}

void OAISavedQueryRestApi_get_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedQueryRestApi_get_list::fromJsonObject(QJsonObject json) {

    m_changed_on_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_changed_on_delta_humanized, json[QString("changed_on_delta_humanized")]);
    m_changed_on_delta_humanized_isSet = !json[QString("changed_on_delta_humanized")].isNull() && m_changed_on_delta_humanized_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_db_id_isValid = ::OpenAPI::fromJsonValue(m_db_id, json[QString("db_id")]);
    m_db_id_isSet = !json[QString("db_id")].isNull() && m_db_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_run_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_last_run_delta_humanized, json[QString("last_run_delta_humanized")]);
    m_last_run_delta_humanized_isSet = !json[QString("last_run_delta_humanized")].isNull() && m_last_run_delta_humanized_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_sql_tables_isValid = ::OpenAPI::fromJsonValue(m_sql_tables, json[QString("sql_tables")]);
    m_sql_tables_isSet = !json[QString("sql_tables")].isNull() && m_sql_tables_isValid;
}

QString OAISavedQueryRestApi_get_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedQueryRestApi_get_list::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_on_delta_humanized_isSet) {
        obj.insert(QString("changed_on_delta_humanized"), ::OpenAPI::toJsonValue(m_changed_on_delta_humanized));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_db_id_isSet) {
        obj.insert(QString("db_id"), ::OpenAPI::toJsonValue(m_db_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_run_delta_humanized_isSet) {
        obj.insert(QString("last_run_delta_humanized"), ::OpenAPI::toJsonValue(m_last_run_delta_humanized));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_sql_tables_isSet) {
        obj.insert(QString("sql_tables"), ::OpenAPI::toJsonValue(m_sql_tables));
    }
    return obj;
}

QJsonValue OAISavedQueryRestApi_get_list::getChangedOnDeltaHumanized() const {
    return m_changed_on_delta_humanized;
}
void OAISavedQueryRestApi_get_list::setChangedOnDeltaHumanized(const QJsonValue &changed_on_delta_humanized) {
    m_changed_on_delta_humanized = changed_on_delta_humanized;
    m_changed_on_delta_humanized_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_changed_on_delta_humanized_Set() const{
    return m_changed_on_delta_humanized_isSet;
}

bool OAISavedQueryRestApi_get_list::is_changed_on_delta_humanized_Valid() const{
    return m_changed_on_delta_humanized_isValid;
}

OAIMeta29 OAISavedQueryRestApi_get_list::getCreatedBy() const {
    return m_created_by;
}
void OAISavedQueryRestApi_get_list::setCreatedBy(const OAIMeta29 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISavedQueryRestApi_get_list::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAISavedQueryRestApi_get_list::getCreatedOn() const {
    return m_created_on;
}
void OAISavedQueryRestApi_get_list::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAISavedQueryRestApi_get_list::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIMeta30 OAISavedQueryRestApi_get_list::getDatabase() const {
    return m_database;
}
void OAISavedQueryRestApi_get_list::setDatabase(const OAIMeta30 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_database_Set() const{
    return m_database_isSet;
}

bool OAISavedQueryRestApi_get_list::is_database_Valid() const{
    return m_database_isValid;
}

qint32 OAISavedQueryRestApi_get_list::getDbId() const {
    return m_db_id;
}
void OAISavedQueryRestApi_get_list::setDbId(const qint32 &db_id) {
    m_db_id = db_id;
    m_db_id_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_db_id_Set() const{
    return m_db_id_isSet;
}

bool OAISavedQueryRestApi_get_list::is_db_id_Valid() const{
    return m_db_id_isValid;
}

QString OAISavedQueryRestApi_get_list::getDescription() const {
    return m_description;
}
void OAISavedQueryRestApi_get_list::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedQueryRestApi_get_list::is_description_Valid() const{
    return m_description_isValid;
}

QJsonValue OAISavedQueryRestApi_get_list::getExtra() const {
    return m_extra;
}
void OAISavedQueryRestApi_get_list::setExtra(const QJsonValue &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAISavedQueryRestApi_get_list::is_extra_Valid() const{
    return m_extra_isValid;
}

qint32 OAISavedQueryRestApi_get_list::getId() const {
    return m_id;
}
void OAISavedQueryRestApi_get_list::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAISavedQueryRestApi_get_list::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISavedQueryRestApi_get_list::getLabel() const {
    return m_label;
}
void OAISavedQueryRestApi_get_list::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_label_Set() const{
    return m_label_isSet;
}

bool OAISavedQueryRestApi_get_list::is_label_Valid() const{
    return m_label_isValid;
}

QJsonValue OAISavedQueryRestApi_get_list::getLastRunDeltaHumanized() const {
    return m_last_run_delta_humanized;
}
void OAISavedQueryRestApi_get_list::setLastRunDeltaHumanized(const QJsonValue &last_run_delta_humanized) {
    m_last_run_delta_humanized = last_run_delta_humanized;
    m_last_run_delta_humanized_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_last_run_delta_humanized_Set() const{
    return m_last_run_delta_humanized_isSet;
}

bool OAISavedQueryRestApi_get_list::is_last_run_delta_humanized_Valid() const{
    return m_last_run_delta_humanized_isValid;
}

qint32 OAISavedQueryRestApi_get_list::getRows() const {
    return m_rows;
}
void OAISavedQueryRestApi_get_list::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAISavedQueryRestApi_get_list::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAISavedQueryRestApi_get_list::getSchema() const {
    return m_schema;
}
void OAISavedQueryRestApi_get_list::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISavedQueryRestApi_get_list::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISavedQueryRestApi_get_list::getSql() const {
    return m_sql;
}
void OAISavedQueryRestApi_get_list::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAISavedQueryRestApi_get_list::is_sql_Valid() const{
    return m_sql_isValid;
}

QJsonValue OAISavedQueryRestApi_get_list::getSqlTables() const {
    return m_sql_tables;
}
void OAISavedQueryRestApi_get_list::setSqlTables(const QJsonValue &sql_tables) {
    m_sql_tables = sql_tables;
    m_sql_tables_isSet = true;
}

bool OAISavedQueryRestApi_get_list::is_sql_tables_Set() const{
    return m_sql_tables_isSet;
}

bool OAISavedQueryRestApi_get_list::is_sql_tables_Valid() const{
    return m_sql_tables_isValid;
}

bool OAISavedQueryRestApi_get_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_on_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_tables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedQueryRestApi_get_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
