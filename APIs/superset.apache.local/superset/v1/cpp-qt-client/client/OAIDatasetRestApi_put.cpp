/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetRestApi_put.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetRestApi_put::OAIDatasetRestApi_put(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetRestApi_put::OAIDatasetRestApi_put() {
    this->initializeModel();
}

OAIDatasetRestApi_put::~OAIDatasetRestApi_put() {}

void OAIDatasetRestApi_put::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_default_endpoint_isSet = false;
    m_default_endpoint_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_fetch_values_predicate_isSet = false;
    m_fetch_values_predicate_isValid = false;

    m_filter_select_enabled_isSet = false;
    m_filter_select_enabled_isValid = false;

    m_is_sqllab_view_isSet = false;
    m_is_sqllab_view_isValid = false;

    m_main_dttm_col_isSet = false;
    m_main_dttm_col_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_template_params_isSet = false;
    m_template_params_isValid = false;
}

void OAIDatasetRestApi_put::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetRestApi_put::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("database_id")]);
    m_database_id_isSet = !json[QString("database_id")].isNull() && m_database_id_isValid;

    m_default_endpoint_isValid = ::OpenAPI::fromJsonValue(m_default_endpoint, json[QString("default_endpoint")]);
    m_default_endpoint_isSet = !json[QString("default_endpoint")].isNull() && m_default_endpoint_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_fetch_values_predicate_isValid = ::OpenAPI::fromJsonValue(m_fetch_values_predicate, json[QString("fetch_values_predicate")]);
    m_fetch_values_predicate_isSet = !json[QString("fetch_values_predicate")].isNull() && m_fetch_values_predicate_isValid;

    m_filter_select_enabled_isValid = ::OpenAPI::fromJsonValue(m_filter_select_enabled, json[QString("filter_select_enabled")]);
    m_filter_select_enabled_isSet = !json[QString("filter_select_enabled")].isNull() && m_filter_select_enabled_isValid;

    m_is_sqllab_view_isValid = ::OpenAPI::fromJsonValue(m_is_sqllab_view, json[QString("is_sqllab_view")]);
    m_is_sqllab_view_isSet = !json[QString("is_sqllab_view")].isNull() && m_is_sqllab_view_isValid;

    m_main_dttm_col_isValid = ::OpenAPI::fromJsonValue(m_main_dttm_col, json[QString("main_dttm_col")]);
    m_main_dttm_col_isSet = !json[QString("main_dttm_col")].isNull() && m_main_dttm_col_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("table_name")]);
    m_table_name_isSet = !json[QString("table_name")].isNull() && m_table_name_isValid;

    m_template_params_isValid = ::OpenAPI::fromJsonValue(m_template_params, json[QString("template_params")]);
    m_template_params_isSet = !json[QString("template_params")].isNull() && m_template_params_isValid;
}

QString OAIDatasetRestApi_put::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetRestApi_put::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("database_id"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_default_endpoint_isSet) {
        obj.insert(QString("default_endpoint"), ::OpenAPI::toJsonValue(m_default_endpoint));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_fetch_values_predicate_isSet) {
        obj.insert(QString("fetch_values_predicate"), ::OpenAPI::toJsonValue(m_fetch_values_predicate));
    }
    if (m_filter_select_enabled_isSet) {
        obj.insert(QString("filter_select_enabled"), ::OpenAPI::toJsonValue(m_filter_select_enabled));
    }
    if (m_is_sqllab_view_isSet) {
        obj.insert(QString("is_sqllab_view"), ::OpenAPI::toJsonValue(m_is_sqllab_view));
    }
    if (m_main_dttm_col_isSet) {
        obj.insert(QString("main_dttm_col"), ::OpenAPI::toJsonValue(m_main_dttm_col));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("table_name"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_template_params_isSet) {
        obj.insert(QString("template_params"), ::OpenAPI::toJsonValue(m_template_params));
    }
    return obj;
}

qint32 OAIDatasetRestApi_put::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIDatasetRestApi_put::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIDatasetRestApi_put::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIDatasetRestApi_put::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

QList<OAIDatasetColumnsPut> OAIDatasetRestApi_put::getColumns() const {
    return m_columns;
}
void OAIDatasetRestApi_put::setColumns(const QList<OAIDatasetColumnsPut> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDatasetRestApi_put::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDatasetRestApi_put::is_columns_Valid() const{
    return m_columns_isValid;
}

qint32 OAIDatasetRestApi_put::getDatabaseId() const {
    return m_database_id;
}
void OAIDatasetRestApi_put::setDatabaseId(const qint32 &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIDatasetRestApi_put::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIDatasetRestApi_put::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIDatasetRestApi_put::getDefaultEndpoint() const {
    return m_default_endpoint;
}
void OAIDatasetRestApi_put::setDefaultEndpoint(const QString &default_endpoint) {
    m_default_endpoint = default_endpoint;
    m_default_endpoint_isSet = true;
}

bool OAIDatasetRestApi_put::is_default_endpoint_Set() const{
    return m_default_endpoint_isSet;
}

bool OAIDatasetRestApi_put::is_default_endpoint_Valid() const{
    return m_default_endpoint_isValid;
}

QString OAIDatasetRestApi_put::getDescription() const {
    return m_description;
}
void OAIDatasetRestApi_put::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDatasetRestApi_put::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDatasetRestApi_put::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDatasetRestApi_put::getExtra() const {
    return m_extra;
}
void OAIDatasetRestApi_put::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIDatasetRestApi_put::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIDatasetRestApi_put::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIDatasetRestApi_put::getFetchValuesPredicate() const {
    return m_fetch_values_predicate;
}
void OAIDatasetRestApi_put::setFetchValuesPredicate(const QString &fetch_values_predicate) {
    m_fetch_values_predicate = fetch_values_predicate;
    m_fetch_values_predicate_isSet = true;
}

bool OAIDatasetRestApi_put::is_fetch_values_predicate_Set() const{
    return m_fetch_values_predicate_isSet;
}

bool OAIDatasetRestApi_put::is_fetch_values_predicate_Valid() const{
    return m_fetch_values_predicate_isValid;
}

bool OAIDatasetRestApi_put::isFilterSelectEnabled() const {
    return m_filter_select_enabled;
}
void OAIDatasetRestApi_put::setFilterSelectEnabled(const bool &filter_select_enabled) {
    m_filter_select_enabled = filter_select_enabled;
    m_filter_select_enabled_isSet = true;
}

bool OAIDatasetRestApi_put::is_filter_select_enabled_Set() const{
    return m_filter_select_enabled_isSet;
}

bool OAIDatasetRestApi_put::is_filter_select_enabled_Valid() const{
    return m_filter_select_enabled_isValid;
}

bool OAIDatasetRestApi_put::isIsSqllabView() const {
    return m_is_sqllab_view;
}
void OAIDatasetRestApi_put::setIsSqllabView(const bool &is_sqllab_view) {
    m_is_sqllab_view = is_sqllab_view;
    m_is_sqllab_view_isSet = true;
}

bool OAIDatasetRestApi_put::is_is_sqllab_view_Set() const{
    return m_is_sqllab_view_isSet;
}

bool OAIDatasetRestApi_put::is_is_sqllab_view_Valid() const{
    return m_is_sqllab_view_isValid;
}

QString OAIDatasetRestApi_put::getMainDttmCol() const {
    return m_main_dttm_col;
}
void OAIDatasetRestApi_put::setMainDttmCol(const QString &main_dttm_col) {
    m_main_dttm_col = main_dttm_col;
    m_main_dttm_col_isSet = true;
}

bool OAIDatasetRestApi_put::is_main_dttm_col_Set() const{
    return m_main_dttm_col_isSet;
}

bool OAIDatasetRestApi_put::is_main_dttm_col_Valid() const{
    return m_main_dttm_col_isValid;
}

QList<OAIDatasetMetricsPut> OAIDatasetRestApi_put::getMetrics() const {
    return m_metrics;
}
void OAIDatasetRestApi_put::setMetrics(const QList<OAIDatasetMetricsPut> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDatasetRestApi_put::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDatasetRestApi_put::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint32 OAIDatasetRestApi_put::getOffset() const {
    return m_offset;
}
void OAIDatasetRestApi_put::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIDatasetRestApi_put::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIDatasetRestApi_put::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<qint32> OAIDatasetRestApi_put::getOwners() const {
    return m_owners;
}
void OAIDatasetRestApi_put::setOwners(const QList<qint32> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDatasetRestApi_put::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDatasetRestApi_put::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDatasetRestApi_put::getSchema() const {
    return m_schema;
}
void OAIDatasetRestApi_put::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDatasetRestApi_put::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDatasetRestApi_put::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDatasetRestApi_put::getSql() const {
    return m_sql;
}
void OAIDatasetRestApi_put::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIDatasetRestApi_put::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIDatasetRestApi_put::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIDatasetRestApi_put::getTableName() const {
    return m_table_name;
}
void OAIDatasetRestApi_put::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDatasetRestApi_put::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDatasetRestApi_put::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIDatasetRestApi_put::getTemplateParams() const {
    return m_template_params;
}
void OAIDatasetRestApi_put::setTemplateParams(const QString &template_params) {
    m_template_params = template_params;
    m_template_params_isSet = true;
}

bool OAIDatasetRestApi_put::is_template_params_Set() const{
    return m_template_params_isSet;
}

bool OAIDatasetRestApi_put::is_template_params_Valid() const{
    return m_template_params_isValid;
}

bool OAIDatasetRestApi_put::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_values_predicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_select_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sqllab_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_dttm_col_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_params_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetRestApi_put::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
