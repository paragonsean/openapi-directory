/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICSSTemplatesApi_H
#define OAI_OAICSSTemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICssTemplateRestApi_post.h"
#include "OAICssTemplateRestApi_put.h"
#include "OAIGet_info_schema.h"
#include "OAIGet_item_schema.h"
#include "OAIGet_list_schema.h"
#include "OAIGet_related_schema.h"
#include "OAIRelatedResponseSchema.h"
#include "OAI_annotation_layer__get_400_response.h"
#include "OAI_annotation_layer__info_get_200_response.h"
#include "OAI_css_template__get_200_response.h"
#include "OAI_css_template__pk__get_200_response.h"
#include "OAI_css_template__pk__put_200_response.h"
#include "OAI_css_template__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICSSTemplatesApi : public QObject {
    Q_OBJECT

public:
    OAICSSTemplatesApi(const int timeOut = 0);
    ~OAICSSTemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QList<qint32> [optional]
    */
    virtual void cssTemplateDelete(const ::OpenAPI::OptionalParam<QList<qint32>> &q = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  q OAIGet_list_schema [optional]
    */
    virtual void cssTemplateGet(const ::OpenAPI::OptionalParam<OAIGet_list_schema> &q = ::OpenAPI::OptionalParam<OAIGet_list_schema>());

    /**
    * @param[in]  q OAIGet_info_schema [optional]
    */
    virtual void cssTemplateInfoGet(const ::OpenAPI::OptionalParam<OAIGet_info_schema> &q = ::OpenAPI::OptionalParam<OAIGet_info_schema>());

    /**
    * @param[in]  pk qint32 [required]
    */
    virtual void cssTemplatePkDelete(const qint32 &pk);

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  q OAIGet_item_schema [optional]
    */
    virtual void cssTemplatePkGet(const qint32 &pk, const ::OpenAPI::OptionalParam<OAIGet_item_schema> &q = ::OpenAPI::OptionalParam<OAIGet_item_schema>());

    /**
    * @param[in]  pk qint32 [required]
    * @param[in]  oai_css_template_rest_api_put OAICssTemplateRestApi_put [required]
    */
    virtual void cssTemplatePkPut(const qint32 &pk, const OAICssTemplateRestApi_put &oai_css_template_rest_api_put);

    /**
    * @param[in]  oai_css_template_rest_api_post OAICssTemplateRestApi_post [required]
    */
    virtual void cssTemplatePost(const OAICssTemplateRestApi_post &oai_css_template_rest_api_post);

    /**
    * @param[in]  column_name QString [required]
    * @param[in]  q OAIGet_related_schema [optional]
    */
    virtual void cssTemplateRelatedColumnNameGet(const QString &column_name, const ::OpenAPI::OptionalParam<OAIGet_related_schema> &q = ::OpenAPI::OptionalParam<OAIGet_related_schema>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cssTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void cssTemplateGetCallback(OAIHttpRequestWorker *worker);
    void cssTemplateInfoGetCallback(OAIHttpRequestWorker *worker);
    void cssTemplatePkDeleteCallback(OAIHttpRequestWorker *worker);
    void cssTemplatePkGetCallback(OAIHttpRequestWorker *worker);
    void cssTemplatePkPutCallback(OAIHttpRequestWorker *worker);
    void cssTemplatePostCallback(OAIHttpRequestWorker *worker);
    void cssTemplateRelatedColumnNameGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cssTemplateDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void cssTemplateGetSignal(OAI_css_template__get_200_response summary);
    void cssTemplateInfoGetSignal(OAI_annotation_layer__info_get_200_response summary);
    void cssTemplatePkDeleteSignal(OAI_annotation_layer__get_400_response summary);
    void cssTemplatePkGetSignal(OAI_css_template__pk__get_200_response summary);
    void cssTemplatePkPutSignal(OAI_css_template__pk__put_200_response summary);
    void cssTemplatePostSignal(OAI_css_template__post_201_response summary);
    void cssTemplateRelatedColumnNameGetSignal(OAIRelatedResponseSchema summary);


    void cssTemplateDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void cssTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAI_css_template__get_200_response summary);
    void cssTemplateInfoGetSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__info_get_200_response summary);
    void cssTemplatePkDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_annotation_layer__get_400_response summary);
    void cssTemplatePkGetSignalFull(OAIHttpRequestWorker *worker, OAI_css_template__pk__get_200_response summary);
    void cssTemplatePkPutSignalFull(OAIHttpRequestWorker *worker, OAI_css_template__pk__put_200_response summary);
    void cssTemplatePostSignalFull(OAIHttpRequestWorker *worker, OAI_css_template__post_201_response summary);
    void cssTemplateRelatedColumnNameGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedResponseSchema summary);

    Q_DECL_DEPRECATED_X("Use cssTemplateDeleteSignalError() instead")
    void cssTemplateDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateGetSignalError() instead")
    void cssTemplateGetSignalE(OAI_css_template__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateGetSignalError(OAI_css_template__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateInfoGetSignalError() instead")
    void cssTemplateInfoGetSignalE(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateInfoGetSignalError(OAI_annotation_layer__info_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkDeleteSignalError() instead")
    void cssTemplatePkDeleteSignalE(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkDeleteSignalError(OAI_annotation_layer__get_400_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkGetSignalError() instead")
    void cssTemplatePkGetSignalE(OAI_css_template__pk__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkGetSignalError(OAI_css_template__pk__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkPutSignalError() instead")
    void cssTemplatePkPutSignalE(OAI_css_template__pk__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkPutSignalError(OAI_css_template__pk__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePostSignalError() instead")
    void cssTemplatePostSignalE(OAI_css_template__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePostSignalError(OAI_css_template__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateRelatedColumnNameGetSignalError() instead")
    void cssTemplateRelatedColumnNameGetSignalE(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateRelatedColumnNameGetSignalError(OAIRelatedResponseSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cssTemplateDeleteSignalErrorFull() instead")
    void cssTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateGetSignalErrorFull() instead")
    void cssTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateInfoGetSignalErrorFull() instead")
    void cssTemplateInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkDeleteSignalErrorFull() instead")
    void cssTemplatePkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkGetSignalErrorFull() instead")
    void cssTemplatePkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePkPutSignalErrorFull() instead")
    void cssTemplatePkPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePkPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplatePostSignalErrorFull() instead")
    void cssTemplatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cssTemplateRelatedColumnNameGetSignalErrorFull() instead")
    void cssTemplateRelatedColumnNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cssTemplateRelatedColumnNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
