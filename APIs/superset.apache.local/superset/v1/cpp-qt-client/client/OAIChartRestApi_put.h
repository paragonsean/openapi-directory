/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChartRestApi_put.h
 *
 * 
 */

#ifndef OAIChartRestApi_put_H
#define OAIChartRestApi_put_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChartRestApi_put : public OAIObject {
public:
    OAIChartRestApi_put();
    OAIChartRestApi_put(QString json);
    ~OAIChartRestApi_put() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCacheTimeout() const;
    void setCacheTimeout(const qint32 &cache_timeout);
    bool is_cache_timeout_Set() const;
    bool is_cache_timeout_Valid() const;

    QList<qint32> getDashboards() const;
    void setDashboards(const QList<qint32> &dashboards);
    bool is_dashboards_Set() const;
    bool is_dashboards_Valid() const;

    qint32 getDatasourceId() const;
    void setDatasourceId(const qint32 &datasource_id);
    bool is_datasource_id_Set() const;
    bool is_datasource_id_Valid() const;

    QString getDatasourceType() const;
    void setDatasourceType(const QString &datasource_type);
    bool is_datasource_type_Set() const;
    bool is_datasource_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<qint32> getOwners() const;
    void setOwners(const QList<qint32> &owners);
    bool is_owners_Set() const;
    bool is_owners_Valid() const;

    QString getParams() const;
    void setParams(const QString &params);
    bool is_params_Set() const;
    bool is_params_Valid() const;

    QString getQueryContext() const;
    void setQueryContext(const QString &query_context);
    bool is_query_context_Set() const;
    bool is_query_context_Valid() const;

    QString getSliceName() const;
    void setSliceName(const QString &slice_name);
    bool is_slice_name_Set() const;
    bool is_slice_name_Valid() const;

    QString getVizType() const;
    void setVizType(const QString &viz_type);
    bool is_viz_type_Set() const;
    bool is_viz_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cache_timeout;
    bool m_cache_timeout_isSet;
    bool m_cache_timeout_isValid;

    QList<qint32> m_dashboards;
    bool m_dashboards_isSet;
    bool m_dashboards_isValid;

    qint32 m_datasource_id;
    bool m_datasource_id_isSet;
    bool m_datasource_id_isValid;

    QString m_datasource_type;
    bool m_datasource_type_isSet;
    bool m_datasource_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<qint32> m_owners;
    bool m_owners_isSet;
    bool m_owners_isValid;

    QString m_params;
    bool m_params_isSet;
    bool m_params_isValid;

    QString m_query_context;
    bool m_query_context_isSet;
    bool m_query_context_isValid;

    QString m_slice_name;
    bool m_slice_name_isSet;
    bool m_slice_name_isValid;

    QString m_viz_type;
    bool m_viz_type_isSet;
    bool m_viz_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChartRestApi_put)

#endif // OAIChartRestApi_put_H
