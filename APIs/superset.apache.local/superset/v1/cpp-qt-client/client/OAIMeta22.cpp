/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta22.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta22::OAIMeta22(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta22::OAIMeta22() {
    this->initializeModel();
}

OAIMeta22::~OAIMeta22() {}

void OAIMeta22::initializeModel() {

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_filterable_isSet = false;
    m_filterable_isValid = false;

    m_groupby_isSet = false;
    m_groupby_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_dttm_isSet = false;
    m_is_dttm_isValid = false;

    m_python_date_format_isSet = false;
    m_python_date_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_generic_isSet = false;
    m_type_generic_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_verbose_name_isSet = false;
    m_verbose_name_isValid = false;
}

void OAIMeta22::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta22::fromJsonObject(QJsonObject json) {

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("column_name")]);
    m_column_name_isSet = !json[QString("column_name")].isNull() && m_column_name_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_filterable_isValid = ::OpenAPI::fromJsonValue(m_filterable, json[QString("filterable")]);
    m_filterable_isSet = !json[QString("filterable")].isNull() && m_filterable_isValid;

    m_groupby_isValid = ::OpenAPI::fromJsonValue(m_groupby, json[QString("groupby")]);
    m_groupby_isSet = !json[QString("groupby")].isNull() && m_groupby_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_dttm_isValid = ::OpenAPI::fromJsonValue(m_is_dttm, json[QString("is_dttm")]);
    m_is_dttm_isSet = !json[QString("is_dttm")].isNull() && m_is_dttm_isValid;

    m_python_date_format_isValid = ::OpenAPI::fromJsonValue(m_python_date_format, json[QString("python_date_format")]);
    m_python_date_format_isSet = !json[QString("python_date_format")].isNull() && m_python_date_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_generic_isValid = ::OpenAPI::fromJsonValue(m_type_generic, json[QString("type_generic")]);
    m_type_generic_isSet = !json[QString("type_generic")].isNull() && m_type_generic_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_verbose_name_isValid = ::OpenAPI::fromJsonValue(m_verbose_name, json[QString("verbose_name")]);
    m_verbose_name_isSet = !json[QString("verbose_name")].isNull() && m_verbose_name_isValid;
}

QString OAIMeta22::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta22::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("column_name"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_filterable_isSet) {
        obj.insert(QString("filterable"), ::OpenAPI::toJsonValue(m_filterable));
    }
    if (m_groupby_isSet) {
        obj.insert(QString("groupby"), ::OpenAPI::toJsonValue(m_groupby));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_dttm_isSet) {
        obj.insert(QString("is_dttm"), ::OpenAPI::toJsonValue(m_is_dttm));
    }
    if (m_python_date_format_isSet) {
        obj.insert(QString("python_date_format"), ::OpenAPI::toJsonValue(m_python_date_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_generic_isSet) {
        obj.insert(QString("type_generic"), ::OpenAPI::toJsonValue(m_type_generic));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_verbose_name_isSet) {
        obj.insert(QString("verbose_name"), ::OpenAPI::toJsonValue(m_verbose_name));
    }
    return obj;
}

QDateTime OAIMeta22::getChangedOn() const {
    return m_changed_on;
}
void OAIMeta22::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIMeta22::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIMeta22::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QString OAIMeta22::getColumnName() const {
    return m_column_name;
}
void OAIMeta22::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIMeta22::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIMeta22::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QDateTime OAIMeta22::getCreatedOn() const {
    return m_created_on;
}
void OAIMeta22::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIMeta22::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIMeta22::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIMeta22::getDescription() const {
    return m_description;
}
void OAIMeta22::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMeta22::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMeta22::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMeta22::getExpression() const {
    return m_expression;
}
void OAIMeta22::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMeta22::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMeta22::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIMeta22::isFilterable() const {
    return m_filterable;
}
void OAIMeta22::setFilterable(const bool &filterable) {
    m_filterable = filterable;
    m_filterable_isSet = true;
}

bool OAIMeta22::is_filterable_Set() const{
    return m_filterable_isSet;
}

bool OAIMeta22::is_filterable_Valid() const{
    return m_filterable_isValid;
}

bool OAIMeta22::isGroupby() const {
    return m_groupby;
}
void OAIMeta22::setGroupby(const bool &groupby) {
    m_groupby = groupby;
    m_groupby_isSet = true;
}

bool OAIMeta22::is_groupby_Set() const{
    return m_groupby_isSet;
}

bool OAIMeta22::is_groupby_Valid() const{
    return m_groupby_isValid;
}

qint32 OAIMeta22::getId() const {
    return m_id;
}
void OAIMeta22::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMeta22::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMeta22::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMeta22::isIsActive() const {
    return m_is_active;
}
void OAIMeta22::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIMeta22::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIMeta22::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIMeta22::isIsDttm() const {
    return m_is_dttm;
}
void OAIMeta22::setIsDttm(const bool &is_dttm) {
    m_is_dttm = is_dttm;
    m_is_dttm_isSet = true;
}

bool OAIMeta22::is_is_dttm_Set() const{
    return m_is_dttm_isSet;
}

bool OAIMeta22::is_is_dttm_Valid() const{
    return m_is_dttm_isValid;
}

QString OAIMeta22::getPythonDateFormat() const {
    return m_python_date_format;
}
void OAIMeta22::setPythonDateFormat(const QString &python_date_format) {
    m_python_date_format = python_date_format;
    m_python_date_format_isSet = true;
}

bool OAIMeta22::is_python_date_format_Set() const{
    return m_python_date_format_isSet;
}

bool OAIMeta22::is_python_date_format_Valid() const{
    return m_python_date_format_isValid;
}

QString OAIMeta22::getType() const {
    return m_type;
}
void OAIMeta22::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMeta22::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMeta22::is_type_Valid() const{
    return m_type_isValid;
}

QJsonValue OAIMeta22::getTypeGeneric() const {
    return m_type_generic;
}
void OAIMeta22::setTypeGeneric(const QJsonValue &type_generic) {
    m_type_generic = type_generic;
    m_type_generic_isSet = true;
}

bool OAIMeta22::is_type_generic_Set() const{
    return m_type_generic_isSet;
}

bool OAIMeta22::is_type_generic_Valid() const{
    return m_type_generic_isValid;
}

QString OAIMeta22::getUuid() const {
    return m_uuid;
}
void OAIMeta22::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIMeta22::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIMeta22::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIMeta22::getVerboseName() const {
    return m_verbose_name;
}
void OAIMeta22::setVerboseName(const QString &verbose_name) {
    m_verbose_name = verbose_name;
    m_verbose_name_isSet = true;
}

bool OAIMeta22::is_verbose_name_Set() const{
    return m_verbose_name_isSet;
}

bool OAIMeta22::is_verbose_name_Valid() const{
    return m_verbose_name_isValid;
}

bool OAIMeta22::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filterable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_generic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbose_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta22::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && true;
}

} // namespace OpenAPI
