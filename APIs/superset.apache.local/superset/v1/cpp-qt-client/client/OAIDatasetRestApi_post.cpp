/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetRestApi_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetRestApi_post::OAIDatasetRestApi_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetRestApi_post::OAIDatasetRestApi_post() {
    this->initializeModel();
}

OAIDatasetRestApi_post::~OAIDatasetRestApi_post() {}

void OAIDatasetRestApi_post::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIDatasetRestApi_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetRestApi_post::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("table_name")]);
    m_table_name_isSet = !json[QString("table_name")].isNull() && m_table_name_isValid;
}

QString OAIDatasetRestApi_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetRestApi_post::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("table_name"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

qint32 OAIDatasetRestApi_post::getDatabase() const {
    return m_database;
}
void OAIDatasetRestApi_post::setDatabase(const qint32 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDatasetRestApi_post::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDatasetRestApi_post::is_database_Valid() const{
    return m_database_isValid;
}

QList<qint32> OAIDatasetRestApi_post::getOwners() const {
    return m_owners;
}
void OAIDatasetRestApi_post::setOwners(const QList<qint32> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDatasetRestApi_post::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDatasetRestApi_post::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDatasetRestApi_post::getSchema() const {
    return m_schema;
}
void OAIDatasetRestApi_post::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDatasetRestApi_post::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDatasetRestApi_post::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDatasetRestApi_post::getTableName() const {
    return m_table_name;
}
void OAIDatasetRestApi_post::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDatasetRestApi_post::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDatasetRestApi_post::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIDatasetRestApi_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetRestApi_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
