/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasource::OAIDatasource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasource::OAIDatasource() {
    this->initializeModel();
}

OAIDatasource::~OAIDatasource() {}

void OAIDatasource::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_datasource_name_isSet = false;
    m_datasource_name_isValid = false;

    m_datasource_type_isSet = false;
    m_datasource_type_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIDatasource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasource::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("database_name")]);
    m_database_name_isSet = !json[QString("database_name")].isNull() && m_database_name_isValid;

    m_datasource_name_isValid = ::OpenAPI::fromJsonValue(m_datasource_name, json[QString("datasource_name")]);
    m_datasource_name_isSet = !json[QString("datasource_name")].isNull() && m_datasource_name_isValid;

    m_datasource_type_isValid = ::OpenAPI::fromJsonValue(m_datasource_type, json[QString("datasource_type")]);
    m_datasource_type_isSet = !json[QString("datasource_type")].isNull() && m_datasource_type_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIDatasource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasource::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("database_name"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_datasource_name_isSet) {
        obj.insert(QString("datasource_name"), ::OpenAPI::toJsonValue(m_datasource_name));
    }
    if (m_datasource_type_isSet) {
        obj.insert(QString("datasource_type"), ::OpenAPI::toJsonValue(m_datasource_type));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAIDatasource::getDatabaseName() const {
    return m_database_name;
}
void OAIDatasource::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatasource::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatasource::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatasource::getDatasourceName() const {
    return m_datasource_name;
}
void OAIDatasource::setDatasourceName(const QString &datasource_name) {
    m_datasource_name = datasource_name;
    m_datasource_name_isSet = true;
}

bool OAIDatasource::is_datasource_name_Set() const{
    return m_datasource_name_isSet;
}

bool OAIDatasource::is_datasource_name_Valid() const{
    return m_datasource_name_isValid;
}

QString OAIDatasource::getDatasourceType() const {
    return m_datasource_type;
}
void OAIDatasource::setDatasourceType(const QString &datasource_type) {
    m_datasource_type = datasource_type;
    m_datasource_type_isSet = true;
}

bool OAIDatasource::is_datasource_type_Set() const{
    return m_datasource_type_isSet;
}

bool OAIDatasource::is_datasource_type_Valid() const{
    return m_datasource_type_isValid;
}

QString OAIDatasource::getSchema() const {
    return m_schema;
}
void OAIDatasource::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDatasource::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDatasource::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIDatasource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datasource_type_isValid && true;
}

} // namespace OpenAPI
