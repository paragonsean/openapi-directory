/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportScheduleRestApi_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportScheduleRestApi_get::OAIReportScheduleRestApi_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportScheduleRestApi_get::OAIReportScheduleRestApi_get() {
    this->initializeModel();
}

OAIReportScheduleRestApi_get::~OAIReportScheduleRestApi_get() {}

void OAIReportScheduleRestApi_get::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_context_markdown_isSet = false;
    m_context_markdown_isValid = false;

    m_creation_method_isSet = false;
    m_creation_method_isValid = false;

    m_crontab_isSet = false;
    m_crontab_isValid = false;

    m_dashboard_isSet = false;
    m_dashboard_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_grace_period_isSet = false;
    m_grace_period_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_eval_dttm_isSet = false;
    m_last_eval_dttm_isValid = false;

    m_last_state_isSet = false;
    m_last_state_isValid = false;

    m_last_value_isSet = false;
    m_last_value_isValid = false;

    m_last_value_row_json_isSet = false;
    m_last_value_row_json_isValid = false;

    m_log_retention_isSet = false;
    m_log_retention_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_report_format_isSet = false;
    m_report_format_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validator_config_json_isSet = false;
    m_validator_config_json_isValid = false;

    m_validator_type_isSet = false;
    m_validator_type_isValid = false;

    m_working_timeout_isSet = false;
    m_working_timeout_isValid = false;
}

void OAIReportScheduleRestApi_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportScheduleRestApi_get::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_context_markdown_isValid = ::OpenAPI::fromJsonValue(m_context_markdown, json[QString("context_markdown")]);
    m_context_markdown_isSet = !json[QString("context_markdown")].isNull() && m_context_markdown_isValid;

    m_creation_method_isValid = ::OpenAPI::fromJsonValue(m_creation_method, json[QString("creation_method")]);
    m_creation_method_isSet = !json[QString("creation_method")].isNull() && m_creation_method_isValid;

    m_crontab_isValid = ::OpenAPI::fromJsonValue(m_crontab, json[QString("crontab")]);
    m_crontab_isSet = !json[QString("crontab")].isNull() && m_crontab_isValid;

    m_dashboard_isValid = ::OpenAPI::fromJsonValue(m_dashboard, json[QString("dashboard")]);
    m_dashboard_isSet = !json[QString("dashboard")].isNull() && m_dashboard_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_grace_period_isValid = ::OpenAPI::fromJsonValue(m_grace_period, json[QString("grace_period")]);
    m_grace_period_isSet = !json[QString("grace_period")].isNull() && m_grace_period_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_eval_dttm_isValid = ::OpenAPI::fromJsonValue(m_last_eval_dttm, json[QString("last_eval_dttm")]);
    m_last_eval_dttm_isSet = !json[QString("last_eval_dttm")].isNull() && m_last_eval_dttm_isValid;

    m_last_state_isValid = ::OpenAPI::fromJsonValue(m_last_state, json[QString("last_state")]);
    m_last_state_isSet = !json[QString("last_state")].isNull() && m_last_state_isValid;

    m_last_value_isValid = ::OpenAPI::fromJsonValue(m_last_value, json[QString("last_value")]);
    m_last_value_isSet = !json[QString("last_value")].isNull() && m_last_value_isValid;

    m_last_value_row_json_isValid = ::OpenAPI::fromJsonValue(m_last_value_row_json, json[QString("last_value_row_json")]);
    m_last_value_row_json_isSet = !json[QString("last_value_row_json")].isNull() && m_last_value_row_json_isValid;

    m_log_retention_isValid = ::OpenAPI::fromJsonValue(m_log_retention, json[QString("log_retention")]);
    m_log_retention_isSet = !json[QString("log_retention")].isNull() && m_log_retention_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_report_format_isValid = ::OpenAPI::fromJsonValue(m_report_format, json[QString("report_format")]);
    m_report_format_isSet = !json[QString("report_format")].isNull() && m_report_format_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validator_config_json_isValid = ::OpenAPI::fromJsonValue(m_validator_config_json, json[QString("validator_config_json")]);
    m_validator_config_json_isSet = !json[QString("validator_config_json")].isNull() && m_validator_config_json_isValid;

    m_validator_type_isValid = ::OpenAPI::fromJsonValue(m_validator_type, json[QString("validator_type")]);
    m_validator_type_isSet = !json[QString("validator_type")].isNull() && m_validator_type_isValid;

    m_working_timeout_isValid = ::OpenAPI::fromJsonValue(m_working_timeout, json[QString("working_timeout")]);
    m_working_timeout_isSet = !json[QString("working_timeout")].isNull() && m_working_timeout_isValid;
}

QString OAIReportScheduleRestApi_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportScheduleRestApi_get::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_chart.isSet()) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_context_markdown_isSet) {
        obj.insert(QString("context_markdown"), ::OpenAPI::toJsonValue(m_context_markdown));
    }
    if (m_creation_method_isSet) {
        obj.insert(QString("creation_method"), ::OpenAPI::toJsonValue(m_creation_method));
    }
    if (m_crontab_isSet) {
        obj.insert(QString("crontab"), ::OpenAPI::toJsonValue(m_crontab));
    }
    if (m_dashboard.isSet()) {
        obj.insert(QString("dashboard"), ::OpenAPI::toJsonValue(m_dashboard));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_grace_period_isSet) {
        obj.insert(QString("grace_period"), ::OpenAPI::toJsonValue(m_grace_period));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_eval_dttm_isSet) {
        obj.insert(QString("last_eval_dttm"), ::OpenAPI::toJsonValue(m_last_eval_dttm));
    }
    if (m_last_state_isSet) {
        obj.insert(QString("last_state"), ::OpenAPI::toJsonValue(m_last_state));
    }
    if (m_last_value_isSet) {
        obj.insert(QString("last_value"), ::OpenAPI::toJsonValue(m_last_value));
    }
    if (m_last_value_row_json_isSet) {
        obj.insert(QString("last_value_row_json"), ::OpenAPI::toJsonValue(m_last_value_row_json));
    }
    if (m_log_retention_isSet) {
        obj.insert(QString("log_retention"), ::OpenAPI::toJsonValue(m_log_retention));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owners.isSet()) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_recipients.isSet()) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_report_format_isSet) {
        obj.insert(QString("report_format"), ::OpenAPI::toJsonValue(m_report_format));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validator_config_json_isSet) {
        obj.insert(QString("validator_config_json"), ::OpenAPI::toJsonValue(m_validator_config_json));
    }
    if (m_validator_type_isSet) {
        obj.insert(QString("validator_type"), ::OpenAPI::toJsonValue(m_validator_type));
    }
    if (m_working_timeout_isSet) {
        obj.insert(QString("working_timeout"), ::OpenAPI::toJsonValue(m_working_timeout));
    }
    return obj;
}

bool OAIReportScheduleRestApi_get::isActive() const {
    return m_active;
}
void OAIReportScheduleRestApi_get::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_active_Set() const{
    return m_active_isSet;
}

bool OAIReportScheduleRestApi_get::is_active_Valid() const{
    return m_active_isValid;
}

OAIMeta40 OAIReportScheduleRestApi_get::getChart() const {
    return m_chart;
}
void OAIReportScheduleRestApi_get::setChart(const OAIMeta40 &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAIReportScheduleRestApi_get::is_chart_Valid() const{
    return m_chart_isValid;
}

QString OAIReportScheduleRestApi_get::getContextMarkdown() const {
    return m_context_markdown;
}
void OAIReportScheduleRestApi_get::setContextMarkdown(const QString &context_markdown) {
    m_context_markdown = context_markdown;
    m_context_markdown_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_context_markdown_Set() const{
    return m_context_markdown_isSet;
}

bool OAIReportScheduleRestApi_get::is_context_markdown_Valid() const{
    return m_context_markdown_isValid;
}

QString OAIReportScheduleRestApi_get::getCreationMethod() const {
    return m_creation_method;
}
void OAIReportScheduleRestApi_get::setCreationMethod(const QString &creation_method) {
    m_creation_method = creation_method;
    m_creation_method_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_creation_method_Set() const{
    return m_creation_method_isSet;
}

bool OAIReportScheduleRestApi_get::is_creation_method_Valid() const{
    return m_creation_method_isValid;
}

QString OAIReportScheduleRestApi_get::getCrontab() const {
    return m_crontab;
}
void OAIReportScheduleRestApi_get::setCrontab(const QString &crontab) {
    m_crontab = crontab;
    m_crontab_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_crontab_Set() const{
    return m_crontab_isSet;
}

bool OAIReportScheduleRestApi_get::is_crontab_Valid() const{
    return m_crontab_isValid;
}

OAIMeta41 OAIReportScheduleRestApi_get::getDashboard() const {
    return m_dashboard;
}
void OAIReportScheduleRestApi_get::setDashboard(const OAIMeta41 &dashboard) {
    m_dashboard = dashboard;
    m_dashboard_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_dashboard_Set() const{
    return m_dashboard_isSet;
}

bool OAIReportScheduleRestApi_get::is_dashboard_Valid() const{
    return m_dashboard_isValid;
}

OAIMeta37 OAIReportScheduleRestApi_get::getDatabase() const {
    return m_database;
}
void OAIReportScheduleRestApi_get::setDatabase(const OAIMeta37 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_database_Set() const{
    return m_database_isSet;
}

bool OAIReportScheduleRestApi_get::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIReportScheduleRestApi_get::getDescription() const {
    return m_description;
}
void OAIReportScheduleRestApi_get::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportScheduleRestApi_get::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIReportScheduleRestApi_get::getGracePeriod() const {
    return m_grace_period;
}
void OAIReportScheduleRestApi_get::setGracePeriod(const qint32 &grace_period) {
    m_grace_period = grace_period;
    m_grace_period_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_grace_period_Set() const{
    return m_grace_period_isSet;
}

bool OAIReportScheduleRestApi_get::is_grace_period_Valid() const{
    return m_grace_period_isValid;
}

qint32 OAIReportScheduleRestApi_get::getId() const {
    return m_id;
}
void OAIReportScheduleRestApi_get::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReportScheduleRestApi_get::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIReportScheduleRestApi_get::getLastEvalDttm() const {
    return m_last_eval_dttm;
}
void OAIReportScheduleRestApi_get::setLastEvalDttm(const QDateTime &last_eval_dttm) {
    m_last_eval_dttm = last_eval_dttm;
    m_last_eval_dttm_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_last_eval_dttm_Set() const{
    return m_last_eval_dttm_isSet;
}

bool OAIReportScheduleRestApi_get::is_last_eval_dttm_Valid() const{
    return m_last_eval_dttm_isValid;
}

QString OAIReportScheduleRestApi_get::getLastState() const {
    return m_last_state;
}
void OAIReportScheduleRestApi_get::setLastState(const QString &last_state) {
    m_last_state = last_state;
    m_last_state_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_last_state_Set() const{
    return m_last_state_isSet;
}

bool OAIReportScheduleRestApi_get::is_last_state_Valid() const{
    return m_last_state_isValid;
}

float OAIReportScheduleRestApi_get::getLastValue() const {
    return m_last_value;
}
void OAIReportScheduleRestApi_get::setLastValue(const float &last_value) {
    m_last_value = last_value;
    m_last_value_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_last_value_Set() const{
    return m_last_value_isSet;
}

bool OAIReportScheduleRestApi_get::is_last_value_Valid() const{
    return m_last_value_isValid;
}

QString OAIReportScheduleRestApi_get::getLastValueRowJson() const {
    return m_last_value_row_json;
}
void OAIReportScheduleRestApi_get::setLastValueRowJson(const QString &last_value_row_json) {
    m_last_value_row_json = last_value_row_json;
    m_last_value_row_json_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_last_value_row_json_Set() const{
    return m_last_value_row_json_isSet;
}

bool OAIReportScheduleRestApi_get::is_last_value_row_json_Valid() const{
    return m_last_value_row_json_isValid;
}

qint32 OAIReportScheduleRestApi_get::getLogRetention() const {
    return m_log_retention;
}
void OAIReportScheduleRestApi_get::setLogRetention(const qint32 &log_retention) {
    m_log_retention = log_retention;
    m_log_retention_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_log_retention_Set() const{
    return m_log_retention_isSet;
}

bool OAIReportScheduleRestApi_get::is_log_retention_Valid() const{
    return m_log_retention_isValid;
}

QString OAIReportScheduleRestApi_get::getName() const {
    return m_name;
}
void OAIReportScheduleRestApi_get::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReportScheduleRestApi_get::is_name_Valid() const{
    return m_name_isValid;
}

OAIMeta39 OAIReportScheduleRestApi_get::getOwners() const {
    return m_owners;
}
void OAIReportScheduleRestApi_get::setOwners(const OAIMeta39 &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIReportScheduleRestApi_get::is_owners_Valid() const{
    return m_owners_isValid;
}

OAIMeta38 OAIReportScheduleRestApi_get::getRecipients() const {
    return m_recipients;
}
void OAIReportScheduleRestApi_get::setRecipients(const OAIMeta38 &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIReportScheduleRestApi_get::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIReportScheduleRestApi_get::getReportFormat() const {
    return m_report_format;
}
void OAIReportScheduleRestApi_get::setReportFormat(const QString &report_format) {
    m_report_format = report_format;
    m_report_format_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_report_format_Set() const{
    return m_report_format_isSet;
}

bool OAIReportScheduleRestApi_get::is_report_format_Valid() const{
    return m_report_format_isValid;
}

QString OAIReportScheduleRestApi_get::getSql() const {
    return m_sql;
}
void OAIReportScheduleRestApi_get::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIReportScheduleRestApi_get::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIReportScheduleRestApi_get::getTimezone() const {
    return m_timezone;
}
void OAIReportScheduleRestApi_get::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIReportScheduleRestApi_get::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIReportScheduleRestApi_get::getType() const {
    return m_type;
}
void OAIReportScheduleRestApi_get::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportScheduleRestApi_get::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReportScheduleRestApi_get::getValidatorConfigJson() const {
    return m_validator_config_json;
}
void OAIReportScheduleRestApi_get::setValidatorConfigJson(const QString &validator_config_json) {
    m_validator_config_json = validator_config_json;
    m_validator_config_json_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_validator_config_json_Set() const{
    return m_validator_config_json_isSet;
}

bool OAIReportScheduleRestApi_get::is_validator_config_json_Valid() const{
    return m_validator_config_json_isValid;
}

QString OAIReportScheduleRestApi_get::getValidatorType() const {
    return m_validator_type;
}
void OAIReportScheduleRestApi_get::setValidatorType(const QString &validator_type) {
    m_validator_type = validator_type;
    m_validator_type_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_validator_type_Set() const{
    return m_validator_type_isSet;
}

bool OAIReportScheduleRestApi_get::is_validator_type_Valid() const{
    return m_validator_type_isValid;
}

qint32 OAIReportScheduleRestApi_get::getWorkingTimeout() const {
    return m_working_timeout;
}
void OAIReportScheduleRestApi_get::setWorkingTimeout(const qint32 &working_timeout) {
    m_working_timeout = working_timeout;
    m_working_timeout_isSet = true;
}

bool OAIReportScheduleRestApi_get::is_working_timeout_Set() const{
    return m_working_timeout_isSet;
}

bool OAIReportScheduleRestApi_get::is_working_timeout_Valid() const{
    return m_working_timeout_isValid;
}

bool OAIReportScheduleRestApi_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crontab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_eval_dttm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_value_row_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_config_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportScheduleRestApi_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_crontab_isValid && m_name_isValid && m_recipients_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
