/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRestApi_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRestApi_get::OAIQueryRestApi_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRestApi_get::OAIQueryRestApi_get() {
    this->initializeModel();
}

OAIQueryRestApi_get::~OAIQueryRestApi_get() {}

void OAIQueryRestApi_get::initializeModel() {

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_end_result_backend_time_isSet = false;
    m_end_result_backend_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_executed_sql_isSet = false;
    m_executed_sql_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_results_key_isSet = false;
    m_results_key_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_select_as_cta_isSet = false;
    m_select_as_cta_isValid = false;

    m_select_as_cta_used_isSet = false;
    m_select_as_cta_used_isValid = false;

    m_select_sql_isSet = false;
    m_select_sql_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_sql_editor_id_isSet = false;
    m_sql_editor_id_isValid = false;

    m_start_running_time_isSet = false;
    m_start_running_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tab_name_isSet = false;
    m_tab_name_isValid = false;

    m_tmp_schema_name_isSet = false;
    m_tmp_schema_name_isValid = false;

    m_tmp_table_name_isSet = false;
    m_tmp_table_name_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAIQueryRestApi_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRestApi_get::fromJsonObject(QJsonObject json) {

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_end_result_backend_time_isValid = ::OpenAPI::fromJsonValue(m_end_result_backend_time, json[QString("end_result_backend_time")]);
    m_end_result_backend_time_isSet = !json[QString("end_result_backend_time")].isNull() && m_end_result_backend_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_executed_sql_isValid = ::OpenAPI::fromJsonValue(m_executed_sql, json[QString("executed_sql")]);
    m_executed_sql_isSet = !json[QString("executed_sql")].isNull() && m_executed_sql_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_results_key_isValid = ::OpenAPI::fromJsonValue(m_results_key, json[QString("results_key")]);
    m_results_key_isSet = !json[QString("results_key")].isNull() && m_results_key_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_select_as_cta_isValid = ::OpenAPI::fromJsonValue(m_select_as_cta, json[QString("select_as_cta")]);
    m_select_as_cta_isSet = !json[QString("select_as_cta")].isNull() && m_select_as_cta_isValid;

    m_select_as_cta_used_isValid = ::OpenAPI::fromJsonValue(m_select_as_cta_used, json[QString("select_as_cta_used")]);
    m_select_as_cta_used_isSet = !json[QString("select_as_cta_used")].isNull() && m_select_as_cta_used_isValid;

    m_select_sql_isValid = ::OpenAPI::fromJsonValue(m_select_sql, json[QString("select_sql")]);
    m_select_sql_isSet = !json[QString("select_sql")].isNull() && m_select_sql_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_sql_editor_id_isValid = ::OpenAPI::fromJsonValue(m_sql_editor_id, json[QString("sql_editor_id")]);
    m_sql_editor_id_isSet = !json[QString("sql_editor_id")].isNull() && m_sql_editor_id_isValid;

    m_start_running_time_isValid = ::OpenAPI::fromJsonValue(m_start_running_time, json[QString("start_running_time")]);
    m_start_running_time_isSet = !json[QString("start_running_time")].isNull() && m_start_running_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tab_name_isValid = ::OpenAPI::fromJsonValue(m_tab_name, json[QString("tab_name")]);
    m_tab_name_isSet = !json[QString("tab_name")].isNull() && m_tab_name_isValid;

    m_tmp_schema_name_isValid = ::OpenAPI::fromJsonValue(m_tmp_schema_name, json[QString("tmp_schema_name")]);
    m_tmp_schema_name_isSet = !json[QString("tmp_schema_name")].isNull() && m_tmp_schema_name_isValid;

    m_tmp_table_name_isValid = ::OpenAPI::fromJsonValue(m_tmp_table_name, json[QString("tmp_table_name")]);
    m_tmp_table_name_isSet = !json[QString("tmp_table_name")].isNull() && m_tmp_table_name_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("tracking_url")]);
    m_tracking_url_isSet = !json[QString("tracking_url")].isNull() && m_tracking_url_isValid;
}

QString OAIQueryRestApi_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRestApi_get::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_end_result_backend_time_isSet) {
        obj.insert(QString("end_result_backend_time"), ::OpenAPI::toJsonValue(m_end_result_backend_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_executed_sql_isSet) {
        obj.insert(QString("executed_sql"), ::OpenAPI::toJsonValue(m_executed_sql));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_results_key_isSet) {
        obj.insert(QString("results_key"), ::OpenAPI::toJsonValue(m_results_key));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_select_as_cta_isSet) {
        obj.insert(QString("select_as_cta"), ::OpenAPI::toJsonValue(m_select_as_cta));
    }
    if (m_select_as_cta_used_isSet) {
        obj.insert(QString("select_as_cta_used"), ::OpenAPI::toJsonValue(m_select_as_cta_used));
    }
    if (m_select_sql_isSet) {
        obj.insert(QString("select_sql"), ::OpenAPI::toJsonValue(m_select_sql));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_sql_editor_id_isSet) {
        obj.insert(QString("sql_editor_id"), ::OpenAPI::toJsonValue(m_sql_editor_id));
    }
    if (m_start_running_time_isSet) {
        obj.insert(QString("start_running_time"), ::OpenAPI::toJsonValue(m_start_running_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tab_name_isSet) {
        obj.insert(QString("tab_name"), ::OpenAPI::toJsonValue(m_tab_name));
    }
    if (m_tmp_schema_name_isSet) {
        obj.insert(QString("tmp_schema_name"), ::OpenAPI::toJsonValue(m_tmp_schema_name));
    }
    if (m_tmp_table_name_isSet) {
        obj.insert(QString("tmp_table_name"), ::OpenAPI::toJsonValue(m_tmp_table_name));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("tracking_url"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

QDateTime OAIQueryRestApi_get::getChangedOn() const {
    return m_changed_on;
}
void OAIQueryRestApi_get::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIQueryRestApi_get::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIQueryRestApi_get::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QString OAIQueryRestApi_get::getClientId() const {
    return m_client_id;
}
void OAIQueryRestApi_get::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIQueryRestApi_get::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIQueryRestApi_get::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIMeta28 OAIQueryRestApi_get::getDatabase() const {
    return m_database;
}
void OAIQueryRestApi_get::setDatabase(const OAIMeta28 &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIQueryRestApi_get::is_database_Set() const{
    return m_database_isSet;
}

bool OAIQueryRestApi_get::is_database_Valid() const{
    return m_database_isValid;
}

double OAIQueryRestApi_get::getEndResultBackendTime() const {
    return m_end_result_backend_time;
}
void OAIQueryRestApi_get::setEndResultBackendTime(const double &end_result_backend_time) {
    m_end_result_backend_time = end_result_backend_time;
    m_end_result_backend_time_isSet = true;
}

bool OAIQueryRestApi_get::is_end_result_backend_time_Set() const{
    return m_end_result_backend_time_isSet;
}

bool OAIQueryRestApi_get::is_end_result_backend_time_Valid() const{
    return m_end_result_backend_time_isValid;
}

double OAIQueryRestApi_get::getEndTime() const {
    return m_end_time;
}
void OAIQueryRestApi_get::setEndTime(const double &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIQueryRestApi_get::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIQueryRestApi_get::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIQueryRestApi_get::getErrorMessage() const {
    return m_error_message;
}
void OAIQueryRestApi_get::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIQueryRestApi_get::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIQueryRestApi_get::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIQueryRestApi_get::getExecutedSql() const {
    return m_executed_sql;
}
void OAIQueryRestApi_get::setExecutedSql(const QString &executed_sql) {
    m_executed_sql = executed_sql;
    m_executed_sql_isSet = true;
}

bool OAIQueryRestApi_get::is_executed_sql_Set() const{
    return m_executed_sql_isSet;
}

bool OAIQueryRestApi_get::is_executed_sql_Valid() const{
    return m_executed_sql_isValid;
}

qint32 OAIQueryRestApi_get::getId() const {
    return m_id;
}
void OAIQueryRestApi_get::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueryRestApi_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueryRestApi_get::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIQueryRestApi_get::getLimit() const {
    return m_limit;
}
void OAIQueryRestApi_get::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryRestApi_get::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryRestApi_get::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQueryRestApi_get::getProgress() const {
    return m_progress;
}
void OAIQueryRestApi_get::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIQueryRestApi_get::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIQueryRestApi_get::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIQueryRestApi_get::getResultsKey() const {
    return m_results_key;
}
void OAIQueryRestApi_get::setResultsKey(const QString &results_key) {
    m_results_key = results_key;
    m_results_key_isSet = true;
}

bool OAIQueryRestApi_get::is_results_key_Set() const{
    return m_results_key_isSet;
}

bool OAIQueryRestApi_get::is_results_key_Valid() const{
    return m_results_key_isValid;
}

qint32 OAIQueryRestApi_get::getRows() const {
    return m_rows;
}
void OAIQueryRestApi_get::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryRestApi_get::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryRestApi_get::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIQueryRestApi_get::getSchema() const {
    return m_schema;
}
void OAIQueryRestApi_get::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIQueryRestApi_get::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIQueryRestApi_get::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIQueryRestApi_get::isSelectAsCta() const {
    return m_select_as_cta;
}
void OAIQueryRestApi_get::setSelectAsCta(const bool &select_as_cta) {
    m_select_as_cta = select_as_cta;
    m_select_as_cta_isSet = true;
}

bool OAIQueryRestApi_get::is_select_as_cta_Set() const{
    return m_select_as_cta_isSet;
}

bool OAIQueryRestApi_get::is_select_as_cta_Valid() const{
    return m_select_as_cta_isValid;
}

bool OAIQueryRestApi_get::isSelectAsCtaUsed() const {
    return m_select_as_cta_used;
}
void OAIQueryRestApi_get::setSelectAsCtaUsed(const bool &select_as_cta_used) {
    m_select_as_cta_used = select_as_cta_used;
    m_select_as_cta_used_isSet = true;
}

bool OAIQueryRestApi_get::is_select_as_cta_used_Set() const{
    return m_select_as_cta_used_isSet;
}

bool OAIQueryRestApi_get::is_select_as_cta_used_Valid() const{
    return m_select_as_cta_used_isValid;
}

QString OAIQueryRestApi_get::getSelectSql() const {
    return m_select_sql;
}
void OAIQueryRestApi_get::setSelectSql(const QString &select_sql) {
    m_select_sql = select_sql;
    m_select_sql_isSet = true;
}

bool OAIQueryRestApi_get::is_select_sql_Set() const{
    return m_select_sql_isSet;
}

bool OAIQueryRestApi_get::is_select_sql_Valid() const{
    return m_select_sql_isValid;
}

QString OAIQueryRestApi_get::getSql() const {
    return m_sql;
}
void OAIQueryRestApi_get::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIQueryRestApi_get::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIQueryRestApi_get::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIQueryRestApi_get::getSqlEditorId() const {
    return m_sql_editor_id;
}
void OAIQueryRestApi_get::setSqlEditorId(const QString &sql_editor_id) {
    m_sql_editor_id = sql_editor_id;
    m_sql_editor_id_isSet = true;
}

bool OAIQueryRestApi_get::is_sql_editor_id_Set() const{
    return m_sql_editor_id_isSet;
}

bool OAIQueryRestApi_get::is_sql_editor_id_Valid() const{
    return m_sql_editor_id_isValid;
}

double OAIQueryRestApi_get::getStartRunningTime() const {
    return m_start_running_time;
}
void OAIQueryRestApi_get::setStartRunningTime(const double &start_running_time) {
    m_start_running_time = start_running_time;
    m_start_running_time_isSet = true;
}

bool OAIQueryRestApi_get::is_start_running_time_Set() const{
    return m_start_running_time_isSet;
}

bool OAIQueryRestApi_get::is_start_running_time_Valid() const{
    return m_start_running_time_isValid;
}

double OAIQueryRestApi_get::getStartTime() const {
    return m_start_time;
}
void OAIQueryRestApi_get::setStartTime(const double &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIQueryRestApi_get::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIQueryRestApi_get::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIQueryRestApi_get::getStatus() const {
    return m_status;
}
void OAIQueryRestApi_get::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQueryRestApi_get::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQueryRestApi_get::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIQueryRestApi_get::getTabName() const {
    return m_tab_name;
}
void OAIQueryRestApi_get::setTabName(const QString &tab_name) {
    m_tab_name = tab_name;
    m_tab_name_isSet = true;
}

bool OAIQueryRestApi_get::is_tab_name_Set() const{
    return m_tab_name_isSet;
}

bool OAIQueryRestApi_get::is_tab_name_Valid() const{
    return m_tab_name_isValid;
}

QString OAIQueryRestApi_get::getTmpSchemaName() const {
    return m_tmp_schema_name;
}
void OAIQueryRestApi_get::setTmpSchemaName(const QString &tmp_schema_name) {
    m_tmp_schema_name = tmp_schema_name;
    m_tmp_schema_name_isSet = true;
}

bool OAIQueryRestApi_get::is_tmp_schema_name_Set() const{
    return m_tmp_schema_name_isSet;
}

bool OAIQueryRestApi_get::is_tmp_schema_name_Valid() const{
    return m_tmp_schema_name_isValid;
}

QString OAIQueryRestApi_get::getTmpTableName() const {
    return m_tmp_table_name;
}
void OAIQueryRestApi_get::setTmpTableName(const QString &tmp_table_name) {
    m_tmp_table_name = tmp_table_name;
    m_tmp_table_name_isSet = true;
}

bool OAIQueryRestApi_get::is_tmp_table_name_Set() const{
    return m_tmp_table_name_isSet;
}

bool OAIQueryRestApi_get::is_tmp_table_name_Valid() const{
    return m_tmp_table_name_isValid;
}

QString OAIQueryRestApi_get::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIQueryRestApi_get::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIQueryRestApi_get::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIQueryRestApi_get::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAIQueryRestApi_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_result_backend_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executed_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_as_cta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_as_cta_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_editor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_running_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tab_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmp_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmp_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRestApi_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_database_isValid && true;
}

} // namespace OpenAPI
