/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardGetResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardGetResponseSchema::OAIDashboardGetResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardGetResponseSchema::OAIDashboardGetResponseSchema() {
    this->initializeModel();
}

OAIDashboardGetResponseSchema::~OAIDashboardGetResponseSchema() {}

void OAIDashboardGetResponseSchema::initializeModel() {

    m_changed_by_isSet = false;
    m_changed_by_isValid = false;

    m_changed_by_name_isSet = false;
    m_changed_by_name_isValid = false;

    m_changed_by_url_isSet = false;
    m_changed_by_url_isValid = false;

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_changed_on_delta_humanized_isSet = false;
    m_changed_on_delta_humanized_isValid = false;

    m_charts_isSet = false;
    m_charts_isValid = false;

    m_css_isSet = false;
    m_css_isValid = false;

    m_dashboard_title_isSet = false;
    m_dashboard_title_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_json_metadata_isSet = false;
    m_json_metadata_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_position_json_isSet = false;
    m_position_json_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_table_names_isSet = false;
    m_table_names_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDashboardGetResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardGetResponseSchema::fromJsonObject(QJsonObject json) {

    m_changed_by_isValid = ::OpenAPI::fromJsonValue(m_changed_by, json[QString("changed_by")]);
    m_changed_by_isSet = !json[QString("changed_by")].isNull() && m_changed_by_isValid;

    m_changed_by_name_isValid = ::OpenAPI::fromJsonValue(m_changed_by_name, json[QString("changed_by_name")]);
    m_changed_by_name_isSet = !json[QString("changed_by_name")].isNull() && m_changed_by_name_isValid;

    m_changed_by_url_isValid = ::OpenAPI::fromJsonValue(m_changed_by_url, json[QString("changed_by_url")]);
    m_changed_by_url_isSet = !json[QString("changed_by_url")].isNull() && m_changed_by_url_isValid;

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_changed_on_delta_humanized_isValid = ::OpenAPI::fromJsonValue(m_changed_on_delta_humanized, json[QString("changed_on_delta_humanized")]);
    m_changed_on_delta_humanized_isSet = !json[QString("changed_on_delta_humanized")].isNull() && m_changed_on_delta_humanized_isValid;

    m_charts_isValid = ::OpenAPI::fromJsonValue(m_charts, json[QString("charts")]);
    m_charts_isSet = !json[QString("charts")].isNull() && m_charts_isValid;

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_dashboard_title_isValid = ::OpenAPI::fromJsonValue(m_dashboard_title, json[QString("dashboard_title")]);
    m_dashboard_title_isSet = !json[QString("dashboard_title")].isNull() && m_dashboard_title_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_json_metadata_isValid = ::OpenAPI::fromJsonValue(m_json_metadata, json[QString("json_metadata")]);
    m_json_metadata_isSet = !json[QString("json_metadata")].isNull() && m_json_metadata_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_position_json_isValid = ::OpenAPI::fromJsonValue(m_position_json, json[QString("position_json")]);
    m_position_json_isSet = !json[QString("position_json")].isNull() && m_position_json_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_table_names_isValid = ::OpenAPI::fromJsonValue(m_table_names, json[QString("table_names")]);
    m_table_names_isSet = !json[QString("table_names")].isNull() && m_table_names_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnail_url")]);
    m_thumbnail_url_isSet = !json[QString("thumbnail_url")].isNull() && m_thumbnail_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDashboardGetResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardGetResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_by.isSet()) {
        obj.insert(QString("changed_by"), ::OpenAPI::toJsonValue(m_changed_by));
    }
    if (m_changed_by_name_isSet) {
        obj.insert(QString("changed_by_name"), ::OpenAPI::toJsonValue(m_changed_by_name));
    }
    if (m_changed_by_url_isSet) {
        obj.insert(QString("changed_by_url"), ::OpenAPI::toJsonValue(m_changed_by_url));
    }
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_changed_on_delta_humanized_isSet) {
        obj.insert(QString("changed_on_delta_humanized"), ::OpenAPI::toJsonValue(m_changed_on_delta_humanized));
    }
    if (m_charts.size() > 0) {
        obj.insert(QString("charts"), ::OpenAPI::toJsonValue(m_charts));
    }
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_dashboard_title_isSet) {
        obj.insert(QString("dashboard_title"), ::OpenAPI::toJsonValue(m_dashboard_title));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_json_metadata_isSet) {
        obj.insert(QString("json_metadata"), ::OpenAPI::toJsonValue(m_json_metadata));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_position_json_isSet) {
        obj.insert(QString("position_json"), ::OpenAPI::toJsonValue(m_position_json));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_table_names_isSet) {
        obj.insert(QString("table_names"), ::OpenAPI::toJsonValue(m_table_names));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnail_url"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIUser OAIDashboardGetResponseSchema::getChangedBy() const {
    return m_changed_by;
}
void OAIDashboardGetResponseSchema::setChangedBy(const OAIUser &changed_by) {
    m_changed_by = changed_by;
    m_changed_by_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_changed_by_Set() const{
    return m_changed_by_isSet;
}

bool OAIDashboardGetResponseSchema::is_changed_by_Valid() const{
    return m_changed_by_isValid;
}

QString OAIDashboardGetResponseSchema::getChangedByName() const {
    return m_changed_by_name;
}
void OAIDashboardGetResponseSchema::setChangedByName(const QString &changed_by_name) {
    m_changed_by_name = changed_by_name;
    m_changed_by_name_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_changed_by_name_Set() const{
    return m_changed_by_name_isSet;
}

bool OAIDashboardGetResponseSchema::is_changed_by_name_Valid() const{
    return m_changed_by_name_isValid;
}

QString OAIDashboardGetResponseSchema::getChangedByUrl() const {
    return m_changed_by_url;
}
void OAIDashboardGetResponseSchema::setChangedByUrl(const QString &changed_by_url) {
    m_changed_by_url = changed_by_url;
    m_changed_by_url_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_changed_by_url_Set() const{
    return m_changed_by_url_isSet;
}

bool OAIDashboardGetResponseSchema::is_changed_by_url_Valid() const{
    return m_changed_by_url_isValid;
}

QDateTime OAIDashboardGetResponseSchema::getChangedOn() const {
    return m_changed_on;
}
void OAIDashboardGetResponseSchema::setChangedOn(const QDateTime &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIDashboardGetResponseSchema::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QString OAIDashboardGetResponseSchema::getChangedOnDeltaHumanized() const {
    return m_changed_on_delta_humanized;
}
void OAIDashboardGetResponseSchema::setChangedOnDeltaHumanized(const QString &changed_on_delta_humanized) {
    m_changed_on_delta_humanized = changed_on_delta_humanized;
    m_changed_on_delta_humanized_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_changed_on_delta_humanized_Set() const{
    return m_changed_on_delta_humanized_isSet;
}

bool OAIDashboardGetResponseSchema::is_changed_on_delta_humanized_Valid() const{
    return m_changed_on_delta_humanized_isValid;
}

QList<QString> OAIDashboardGetResponseSchema::getCharts() const {
    return m_charts;
}
void OAIDashboardGetResponseSchema::setCharts(const QList<QString> &charts) {
    m_charts = charts;
    m_charts_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_charts_Set() const{
    return m_charts_isSet;
}

bool OAIDashboardGetResponseSchema::is_charts_Valid() const{
    return m_charts_isValid;
}

QString OAIDashboardGetResponseSchema::getCss() const {
    return m_css;
}
void OAIDashboardGetResponseSchema::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_css_Set() const{
    return m_css_isSet;
}

bool OAIDashboardGetResponseSchema::is_css_Valid() const{
    return m_css_isValid;
}

QString OAIDashboardGetResponseSchema::getDashboardTitle() const {
    return m_dashboard_title;
}
void OAIDashboardGetResponseSchema::setDashboardTitle(const QString &dashboard_title) {
    m_dashboard_title = dashboard_title;
    m_dashboard_title_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_dashboard_title_Set() const{
    return m_dashboard_title_isSet;
}

bool OAIDashboardGetResponseSchema::is_dashboard_title_Valid() const{
    return m_dashboard_title_isValid;
}

qint32 OAIDashboardGetResponseSchema::getId() const {
    return m_id;
}
void OAIDashboardGetResponseSchema::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDashboardGetResponseSchema::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDashboardGetResponseSchema::getJsonMetadata() const {
    return m_json_metadata;
}
void OAIDashboardGetResponseSchema::setJsonMetadata(const QString &json_metadata) {
    m_json_metadata = json_metadata;
    m_json_metadata_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_json_metadata_Set() const{
    return m_json_metadata_isSet;
}

bool OAIDashboardGetResponseSchema::is_json_metadata_Valid() const{
    return m_json_metadata_isValid;
}

QList<OAIUser> OAIDashboardGetResponseSchema::getOwners() const {
    return m_owners;
}
void OAIDashboardGetResponseSchema::setOwners(const QList<OAIUser> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDashboardGetResponseSchema::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDashboardGetResponseSchema::getPositionJson() const {
    return m_position_json;
}
void OAIDashboardGetResponseSchema::setPositionJson(const QString &position_json) {
    m_position_json = position_json;
    m_position_json_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_position_json_Set() const{
    return m_position_json_isSet;
}

bool OAIDashboardGetResponseSchema::is_position_json_Valid() const{
    return m_position_json_isValid;
}

bool OAIDashboardGetResponseSchema::isPublished() const {
    return m_published;
}
void OAIDashboardGetResponseSchema::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_published_Set() const{
    return m_published_isSet;
}

bool OAIDashboardGetResponseSchema::is_published_Valid() const{
    return m_published_isValid;
}

QList<OAIRoles> OAIDashboardGetResponseSchema::getRoles() const {
    return m_roles;
}
void OAIDashboardGetResponseSchema::setRoles(const QList<OAIRoles> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIDashboardGetResponseSchema::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIDashboardGetResponseSchema::getSlug() const {
    return m_slug;
}
void OAIDashboardGetResponseSchema::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIDashboardGetResponseSchema::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIDashboardGetResponseSchema::getTableNames() const {
    return m_table_names;
}
void OAIDashboardGetResponseSchema::setTableNames(const QString &table_names) {
    m_table_names = table_names;
    m_table_names_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_table_names_Set() const{
    return m_table_names_isSet;
}

bool OAIDashboardGetResponseSchema::is_table_names_Valid() const{
    return m_table_names_isValid;
}

QString OAIDashboardGetResponseSchema::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIDashboardGetResponseSchema::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIDashboardGetResponseSchema::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIDashboardGetResponseSchema::getUrl() const {
    return m_url;
}
void OAIDashboardGetResponseSchema::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDashboardGetResponseSchema::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDashboardGetResponseSchema::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDashboardGetResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_by_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_by_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_delta_humanized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardGetResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
