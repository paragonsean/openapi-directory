/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartRestApi_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartRestApi_post::OAIChartRestApi_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartRestApi_post::OAIChartRestApi_post() {
    this->initializeModel();
}

OAIChartRestApi_post::~OAIChartRestApi_post() {}

void OAIChartRestApi_post::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;

    m_datasource_id_isSet = false;
    m_datasource_id_isValid = false;

    m_datasource_name_isSet = false;
    m_datasource_name_isValid = false;

    m_datasource_type_isSet = false;
    m_datasource_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_query_context_isSet = false;
    m_query_context_isValid = false;

    m_slice_name_isSet = false;
    m_slice_name_isValid = false;

    m_viz_type_isSet = false;
    m_viz_type_isValid = false;
}

void OAIChartRestApi_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartRestApi_post::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("dashboards")]);
    m_dashboards_isSet = !json[QString("dashboards")].isNull() && m_dashboards_isValid;

    m_datasource_id_isValid = ::OpenAPI::fromJsonValue(m_datasource_id, json[QString("datasource_id")]);
    m_datasource_id_isSet = !json[QString("datasource_id")].isNull() && m_datasource_id_isValid;

    m_datasource_name_isValid = ::OpenAPI::fromJsonValue(m_datasource_name, json[QString("datasource_name")]);
    m_datasource_name_isSet = !json[QString("datasource_name")].isNull() && m_datasource_name_isValid;

    m_datasource_type_isValid = ::OpenAPI::fromJsonValue(m_datasource_type, json[QString("datasource_type")]);
    m_datasource_type_isSet = !json[QString("datasource_type")].isNull() && m_datasource_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_query_context_isValid = ::OpenAPI::fromJsonValue(m_query_context, json[QString("query_context")]);
    m_query_context_isSet = !json[QString("query_context")].isNull() && m_query_context_isValid;

    m_slice_name_isValid = ::OpenAPI::fromJsonValue(m_slice_name, json[QString("slice_name")]);
    m_slice_name_isSet = !json[QString("slice_name")].isNull() && m_slice_name_isValid;

    m_viz_type_isValid = ::OpenAPI::fromJsonValue(m_viz_type, json[QString("viz_type")]);
    m_viz_type_isSet = !json[QString("viz_type")].isNull() && m_viz_type_isValid;
}

QString OAIChartRestApi_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartRestApi_post::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_dashboards.size() > 0) {
        obj.insert(QString("dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    if (m_datasource_id_isSet) {
        obj.insert(QString("datasource_id"), ::OpenAPI::toJsonValue(m_datasource_id));
    }
    if (m_datasource_name_isSet) {
        obj.insert(QString("datasource_name"), ::OpenAPI::toJsonValue(m_datasource_name));
    }
    if (m_datasource_type_isSet) {
        obj.insert(QString("datasource_type"), ::OpenAPI::toJsonValue(m_datasource_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_params_isSet) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_query_context_isSet) {
        obj.insert(QString("query_context"), ::OpenAPI::toJsonValue(m_query_context));
    }
    if (m_slice_name_isSet) {
        obj.insert(QString("slice_name"), ::OpenAPI::toJsonValue(m_slice_name));
    }
    if (m_viz_type_isSet) {
        obj.insert(QString("viz_type"), ::OpenAPI::toJsonValue(m_viz_type));
    }
    return obj;
}

qint32 OAIChartRestApi_post::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIChartRestApi_post::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIChartRestApi_post::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIChartRestApi_post::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

QList<qint32> OAIChartRestApi_post::getDashboards() const {
    return m_dashboards;
}
void OAIChartRestApi_post::setDashboards(const QList<qint32> &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIChartRestApi_post::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIChartRestApi_post::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

qint32 OAIChartRestApi_post::getDatasourceId() const {
    return m_datasource_id;
}
void OAIChartRestApi_post::setDatasourceId(const qint32 &datasource_id) {
    m_datasource_id = datasource_id;
    m_datasource_id_isSet = true;
}

bool OAIChartRestApi_post::is_datasource_id_Set() const{
    return m_datasource_id_isSet;
}

bool OAIChartRestApi_post::is_datasource_id_Valid() const{
    return m_datasource_id_isValid;
}

QString OAIChartRestApi_post::getDatasourceName() const {
    return m_datasource_name;
}
void OAIChartRestApi_post::setDatasourceName(const QString &datasource_name) {
    m_datasource_name = datasource_name;
    m_datasource_name_isSet = true;
}

bool OAIChartRestApi_post::is_datasource_name_Set() const{
    return m_datasource_name_isSet;
}

bool OAIChartRestApi_post::is_datasource_name_Valid() const{
    return m_datasource_name_isValid;
}

QString OAIChartRestApi_post::getDatasourceType() const {
    return m_datasource_type;
}
void OAIChartRestApi_post::setDatasourceType(const QString &datasource_type) {
    m_datasource_type = datasource_type;
    m_datasource_type_isSet = true;
}

bool OAIChartRestApi_post::is_datasource_type_Set() const{
    return m_datasource_type_isSet;
}

bool OAIChartRestApi_post::is_datasource_type_Valid() const{
    return m_datasource_type_isValid;
}

QString OAIChartRestApi_post::getDescription() const {
    return m_description;
}
void OAIChartRestApi_post::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChartRestApi_post::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChartRestApi_post::is_description_Valid() const{
    return m_description_isValid;
}

QList<qint32> OAIChartRestApi_post::getOwners() const {
    return m_owners;
}
void OAIChartRestApi_post::setOwners(const QList<qint32> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIChartRestApi_post::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIChartRestApi_post::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIChartRestApi_post::getParams() const {
    return m_params;
}
void OAIChartRestApi_post::setParams(const QString &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIChartRestApi_post::is_params_Set() const{
    return m_params_isSet;
}

bool OAIChartRestApi_post::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIChartRestApi_post::getQueryContext() const {
    return m_query_context;
}
void OAIChartRestApi_post::setQueryContext(const QString &query_context) {
    m_query_context = query_context;
    m_query_context_isSet = true;
}

bool OAIChartRestApi_post::is_query_context_Set() const{
    return m_query_context_isSet;
}

bool OAIChartRestApi_post::is_query_context_Valid() const{
    return m_query_context_isValid;
}

QString OAIChartRestApi_post::getSliceName() const {
    return m_slice_name;
}
void OAIChartRestApi_post::setSliceName(const QString &slice_name) {
    m_slice_name = slice_name;
    m_slice_name_isSet = true;
}

bool OAIChartRestApi_post::is_slice_name_Set() const{
    return m_slice_name_isSet;
}

bool OAIChartRestApi_post::is_slice_name_Valid() const{
    return m_slice_name_isValid;
}

QString OAIChartRestApi_post::getVizType() const {
    return m_viz_type;
}
void OAIChartRestApi_post::setVizType(const QString &viz_type) {
    m_viz_type = viz_type;
    m_viz_type_isSet = true;
}

bool OAIChartRestApi_post::is_viz_type_Set() const{
    return m_viz_type_isSet;
}

bool OAIChartRestApi_post::is_viz_type_Valid() const{
    return m_viz_type_isValid;
}

bool OAIChartRestApi_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viz_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartRestApi_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datasource_id_isValid && m_datasource_type_isValid && m_slice_name_isValid && true;
}

} // namespace OpenAPI
