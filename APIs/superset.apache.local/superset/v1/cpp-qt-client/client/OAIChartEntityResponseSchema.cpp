/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartEntityResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartEntityResponseSchema::OAIChartEntityResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartEntityResponseSchema::OAIChartEntityResponseSchema() {
    this->initializeModel();
}

OAIChartEntityResponseSchema::~OAIChartEntityResponseSchema() {}

void OAIChartEntityResponseSchema::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_changed_on_isSet = false;
    m_changed_on_isValid = false;

    m_datasource_isSet = false;
    m_datasource_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_markeddown_isSet = false;
    m_description_markeddown_isValid = false;

    m_form_data_isSet = false;
    m_form_data_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_slice_id_isSet = false;
    m_slice_id_isValid = false;

    m_slice_name_isSet = false;
    m_slice_name_isValid = false;

    m_slice_url_isSet = false;
    m_slice_url_isValid = false;
}

void OAIChartEntityResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartEntityResponseSchema::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_changed_on_isValid = ::OpenAPI::fromJsonValue(m_changed_on, json[QString("changed_on")]);
    m_changed_on_isSet = !json[QString("changed_on")].isNull() && m_changed_on_isValid;

    m_datasource_isValid = ::OpenAPI::fromJsonValue(m_datasource, json[QString("datasource")]);
    m_datasource_isSet = !json[QString("datasource")].isNull() && m_datasource_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_markeddown_isValid = ::OpenAPI::fromJsonValue(m_description_markeddown, json[QString("description_markeddown")]);
    m_description_markeddown_isSet = !json[QString("description_markeddown")].isNull() && m_description_markeddown_isValid;

    m_form_data_isValid = ::OpenAPI::fromJsonValue(m_form_data, json[QString("form_data")]);
    m_form_data_isSet = !json[QString("form_data")].isNull() && m_form_data_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_slice_id_isValid = ::OpenAPI::fromJsonValue(m_slice_id, json[QString("slice_id")]);
    m_slice_id_isSet = !json[QString("slice_id")].isNull() && m_slice_id_isValid;

    m_slice_name_isValid = ::OpenAPI::fromJsonValue(m_slice_name, json[QString("slice_name")]);
    m_slice_name_isSet = !json[QString("slice_name")].isNull() && m_slice_name_isValid;

    m_slice_url_isValid = ::OpenAPI::fromJsonValue(m_slice_url, json[QString("slice_url")]);
    m_slice_url_isSet = !json[QString("slice_url")].isNull() && m_slice_url_isValid;
}

QString OAIChartEntityResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartEntityResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_changed_on_isSet) {
        obj.insert(QString("changed_on"), ::OpenAPI::toJsonValue(m_changed_on));
    }
    if (m_datasource_isSet) {
        obj.insert(QString("datasource"), ::OpenAPI::toJsonValue(m_datasource));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_markeddown_isSet) {
        obj.insert(QString("description_markeddown"), ::OpenAPI::toJsonValue(m_description_markeddown));
    }
    if (m_form_data_isSet) {
        obj.insert(QString("form_data"), ::OpenAPI::toJsonValue(m_form_data));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_slice_id_isSet) {
        obj.insert(QString("slice_id"), ::OpenAPI::toJsonValue(m_slice_id));
    }
    if (m_slice_name_isSet) {
        obj.insert(QString("slice_name"), ::OpenAPI::toJsonValue(m_slice_name));
    }
    if (m_slice_url_isSet) {
        obj.insert(QString("slice_url"), ::OpenAPI::toJsonValue(m_slice_url));
    }
    return obj;
}

qint32 OAIChartEntityResponseSchema::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIChartEntityResponseSchema::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIChartEntityResponseSchema::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIChartEntityResponseSchema::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

QString OAIChartEntityResponseSchema::getChangedOn() const {
    return m_changed_on;
}
void OAIChartEntityResponseSchema::setChangedOn(const QString &changed_on) {
    m_changed_on = changed_on;
    m_changed_on_isSet = true;
}

bool OAIChartEntityResponseSchema::is_changed_on_Set() const{
    return m_changed_on_isSet;
}

bool OAIChartEntityResponseSchema::is_changed_on_Valid() const{
    return m_changed_on_isValid;
}

QString OAIChartEntityResponseSchema::getDatasource() const {
    return m_datasource;
}
void OAIChartEntityResponseSchema::setDatasource(const QString &datasource) {
    m_datasource = datasource;
    m_datasource_isSet = true;
}

bool OAIChartEntityResponseSchema::is_datasource_Set() const{
    return m_datasource_isSet;
}

bool OAIChartEntityResponseSchema::is_datasource_Valid() const{
    return m_datasource_isValid;
}

QString OAIChartEntityResponseSchema::getDescription() const {
    return m_description;
}
void OAIChartEntityResponseSchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChartEntityResponseSchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChartEntityResponseSchema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIChartEntityResponseSchema::getDescriptionMarkeddown() const {
    return m_description_markeddown;
}
void OAIChartEntityResponseSchema::setDescriptionMarkeddown(const QString &description_markeddown) {
    m_description_markeddown = description_markeddown;
    m_description_markeddown_isSet = true;
}

bool OAIChartEntityResponseSchema::is_description_markeddown_Set() const{
    return m_description_markeddown_isSet;
}

bool OAIChartEntityResponseSchema::is_description_markeddown_Valid() const{
    return m_description_markeddown_isValid;
}

OAIObject OAIChartEntityResponseSchema::getFormData() const {
    return m_form_data;
}
void OAIChartEntityResponseSchema::setFormData(const OAIObject &form_data) {
    m_form_data = form_data;
    m_form_data_isSet = true;
}

bool OAIChartEntityResponseSchema::is_form_data_Set() const{
    return m_form_data_isSet;
}

bool OAIChartEntityResponseSchema::is_form_data_Valid() const{
    return m_form_data_isValid;
}

QString OAIChartEntityResponseSchema::getModified() const {
    return m_modified;
}
void OAIChartEntityResponseSchema::setModified(const QString &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIChartEntityResponseSchema::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIChartEntityResponseSchema::is_modified_Valid() const{
    return m_modified_isValid;
}

qint32 OAIChartEntityResponseSchema::getSliceId() const {
    return m_slice_id;
}
void OAIChartEntityResponseSchema::setSliceId(const qint32 &slice_id) {
    m_slice_id = slice_id;
    m_slice_id_isSet = true;
}

bool OAIChartEntityResponseSchema::is_slice_id_Set() const{
    return m_slice_id_isSet;
}

bool OAIChartEntityResponseSchema::is_slice_id_Valid() const{
    return m_slice_id_isValid;
}

QString OAIChartEntityResponseSchema::getSliceName() const {
    return m_slice_name;
}
void OAIChartEntityResponseSchema::setSliceName(const QString &slice_name) {
    m_slice_name = slice_name;
    m_slice_name_isSet = true;
}

bool OAIChartEntityResponseSchema::is_slice_name_Set() const{
    return m_slice_name_isSet;
}

bool OAIChartEntityResponseSchema::is_slice_name_Valid() const{
    return m_slice_name_isValid;
}

QString OAIChartEntityResponseSchema::getSliceUrl() const {
    return m_slice_url;
}
void OAIChartEntityResponseSchema::setSliceUrl(const QString &slice_url) {
    m_slice_url = slice_url;
    m_slice_url_isSet = true;
}

bool OAIChartEntityResponseSchema::is_slice_url_Set() const{
    return m_slice_url_isSet;
}

bool OAIChartEntityResponseSchema::is_slice_url_Valid() const{
    return m_slice_url_isValid;
}

bool OAIChartEntityResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_markeddown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartEntityResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
