/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartDataExtras.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartDataExtras::OAIChartDataExtras(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartDataExtras::OAIChartDataExtras() {
    this->initializeModel();
}

OAIChartDataExtras::~OAIChartDataExtras() {}

void OAIChartDataExtras::initializeModel() {

    m_druid_time_origin_isSet = false;
    m_druid_time_origin_isValid = false;

    m_having_isSet = false;
    m_having_isValid = false;

    m_having_druid_isSet = false;
    m_having_druid_isValid = false;

    m_relative_end_isSet = false;
    m_relative_end_isValid = false;

    m_relative_start_isSet = false;
    m_relative_start_isValid = false;

    m_time_grain_sqla_isSet = false;
    m_time_grain_sqla_isValid = false;

    m_time_range_endpoints_isSet = false;
    m_time_range_endpoints_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;
}

void OAIChartDataExtras::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartDataExtras::fromJsonObject(QJsonObject json) {

    m_druid_time_origin_isValid = ::OpenAPI::fromJsonValue(m_druid_time_origin, json[QString("druid_time_origin")]);
    m_druid_time_origin_isSet = !json[QString("druid_time_origin")].isNull() && m_druid_time_origin_isValid;

    m_having_isValid = ::OpenAPI::fromJsonValue(m_having, json[QString("having")]);
    m_having_isSet = !json[QString("having")].isNull() && m_having_isValid;

    m_having_druid_isValid = ::OpenAPI::fromJsonValue(m_having_druid, json[QString("having_druid")]);
    m_having_druid_isSet = !json[QString("having_druid")].isNull() && m_having_druid_isValid;

    m_relative_end_isValid = ::OpenAPI::fromJsonValue(m_relative_end, json[QString("relative_end")]);
    m_relative_end_isSet = !json[QString("relative_end")].isNull() && m_relative_end_isValid;

    m_relative_start_isValid = ::OpenAPI::fromJsonValue(m_relative_start, json[QString("relative_start")]);
    m_relative_start_isSet = !json[QString("relative_start")].isNull() && m_relative_start_isValid;

    m_time_grain_sqla_isValid = ::OpenAPI::fromJsonValue(m_time_grain_sqla, json[QString("time_grain_sqla")]);
    m_time_grain_sqla_isSet = !json[QString("time_grain_sqla")].isNull() && m_time_grain_sqla_isValid;

    m_time_range_endpoints_isValid = ::OpenAPI::fromJsonValue(m_time_range_endpoints, json[QString("time_range_endpoints")]);
    m_time_range_endpoints_isSet = !json[QString("time_range_endpoints")].isNull() && m_time_range_endpoints_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;
}

QString OAIChartDataExtras::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartDataExtras::asJsonObject() const {
    QJsonObject obj;
    if (m_druid_time_origin_isSet) {
        obj.insert(QString("druid_time_origin"), ::OpenAPI::toJsonValue(m_druid_time_origin));
    }
    if (m_having_isSet) {
        obj.insert(QString("having"), ::OpenAPI::toJsonValue(m_having));
    }
    if (m_having_druid.size() > 0) {
        obj.insert(QString("having_druid"), ::OpenAPI::toJsonValue(m_having_druid));
    }
    if (m_relative_end_isSet) {
        obj.insert(QString("relative_end"), ::OpenAPI::toJsonValue(m_relative_end));
    }
    if (m_relative_start_isSet) {
        obj.insert(QString("relative_start"), ::OpenAPI::toJsonValue(m_relative_start));
    }
    if (m_time_grain_sqla_isSet) {
        obj.insert(QString("time_grain_sqla"), ::OpenAPI::toJsonValue(m_time_grain_sqla));
    }
    if (m_time_range_endpoints.size() > 0) {
        obj.insert(QString("time_range_endpoints"), ::OpenAPI::toJsonValue(m_time_range_endpoints));
    }
    if (m_where_isSet) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    return obj;
}

QString OAIChartDataExtras::getDruidTimeOrigin() const {
    return m_druid_time_origin;
}
void OAIChartDataExtras::setDruidTimeOrigin(const QString &druid_time_origin) {
    m_druid_time_origin = druid_time_origin;
    m_druid_time_origin_isSet = true;
}

bool OAIChartDataExtras::is_druid_time_origin_Set() const{
    return m_druid_time_origin_isSet;
}

bool OAIChartDataExtras::is_druid_time_origin_Valid() const{
    return m_druid_time_origin_isValid;
}

QString OAIChartDataExtras::getHaving() const {
    return m_having;
}
void OAIChartDataExtras::setHaving(const QString &having) {
    m_having = having;
    m_having_isSet = true;
}

bool OAIChartDataExtras::is_having_Set() const{
    return m_having_isSet;
}

bool OAIChartDataExtras::is_having_Valid() const{
    return m_having_isValid;
}

QList<OAIChartDataFilter> OAIChartDataExtras::getHavingDruid() const {
    return m_having_druid;
}
void OAIChartDataExtras::setHavingDruid(const QList<OAIChartDataFilter> &having_druid) {
    m_having_druid = having_druid;
    m_having_druid_isSet = true;
}

bool OAIChartDataExtras::is_having_druid_Set() const{
    return m_having_druid_isSet;
}

bool OAIChartDataExtras::is_having_druid_Valid() const{
    return m_having_druid_isValid;
}

QString OAIChartDataExtras::getRelativeEnd() const {
    return m_relative_end;
}
void OAIChartDataExtras::setRelativeEnd(const QString &relative_end) {
    m_relative_end = relative_end;
    m_relative_end_isSet = true;
}

bool OAIChartDataExtras::is_relative_end_Set() const{
    return m_relative_end_isSet;
}

bool OAIChartDataExtras::is_relative_end_Valid() const{
    return m_relative_end_isValid;
}

QString OAIChartDataExtras::getRelativeStart() const {
    return m_relative_start;
}
void OAIChartDataExtras::setRelativeStart(const QString &relative_start) {
    m_relative_start = relative_start;
    m_relative_start_isSet = true;
}

bool OAIChartDataExtras::is_relative_start_Set() const{
    return m_relative_start_isSet;
}

bool OAIChartDataExtras::is_relative_start_Valid() const{
    return m_relative_start_isValid;
}

QString OAIChartDataExtras::getTimeGrainSqla() const {
    return m_time_grain_sqla;
}
void OAIChartDataExtras::setTimeGrainSqla(const QString &time_grain_sqla) {
    m_time_grain_sqla = time_grain_sqla;
    m_time_grain_sqla_isSet = true;
}

bool OAIChartDataExtras::is_time_grain_sqla_Set() const{
    return m_time_grain_sqla_isSet;
}

bool OAIChartDataExtras::is_time_grain_sqla_Valid() const{
    return m_time_grain_sqla_isValid;
}

QList<QJsonValue> OAIChartDataExtras::getTimeRangeEndpoints() const {
    return m_time_range_endpoints;
}
void OAIChartDataExtras::setTimeRangeEndpoints(const QList<QJsonValue> &time_range_endpoints) {
    m_time_range_endpoints = time_range_endpoints;
    m_time_range_endpoints_isSet = true;
}

bool OAIChartDataExtras::is_time_range_endpoints_Set() const{
    return m_time_range_endpoints_isSet;
}

bool OAIChartDataExtras::is_time_range_endpoints_Valid() const{
    return m_time_range_endpoints_isValid;
}

QString OAIChartDataExtras::getWhere() const {
    return m_where;
}
void OAIChartDataExtras::setWhere(const QString &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIChartDataExtras::is_where_Set() const{
    return m_where_isSet;
}

bool OAIChartDataExtras::is_where_Valid() const{
    return m_where_isValid;
}

bool OAIChartDataExtras::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_druid_time_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_having_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_having_druid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_sqla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_where_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartDataExtras::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
