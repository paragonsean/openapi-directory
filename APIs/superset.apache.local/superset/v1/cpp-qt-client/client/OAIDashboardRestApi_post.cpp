/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardRestApi_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardRestApi_post::OAIDashboardRestApi_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardRestApi_post::OAIDashboardRestApi_post() {
    this->initializeModel();
}

OAIDashboardRestApi_post::~OAIDashboardRestApi_post() {}

void OAIDashboardRestApi_post::initializeModel() {

    m_css_isSet = false;
    m_css_isValid = false;

    m_dashboard_title_isSet = false;
    m_dashboard_title_isValid = false;

    m_json_metadata_isSet = false;
    m_json_metadata_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_position_json_isSet = false;
    m_position_json_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;
}

void OAIDashboardRestApi_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardRestApi_post::fromJsonObject(QJsonObject json) {

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_dashboard_title_isValid = ::OpenAPI::fromJsonValue(m_dashboard_title, json[QString("dashboard_title")]);
    m_dashboard_title_isSet = !json[QString("dashboard_title")].isNull() && m_dashboard_title_isValid;

    m_json_metadata_isValid = ::OpenAPI::fromJsonValue(m_json_metadata, json[QString("json_metadata")]);
    m_json_metadata_isSet = !json[QString("json_metadata")].isNull() && m_json_metadata_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_position_json_isValid = ::OpenAPI::fromJsonValue(m_position_json, json[QString("position_json")]);
    m_position_json_isSet = !json[QString("position_json")].isNull() && m_position_json_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;
}

QString OAIDashboardRestApi_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardRestApi_post::asJsonObject() const {
    QJsonObject obj;
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_dashboard_title_isSet) {
        obj.insert(QString("dashboard_title"), ::OpenAPI::toJsonValue(m_dashboard_title));
    }
    if (m_json_metadata_isSet) {
        obj.insert(QString("json_metadata"), ::OpenAPI::toJsonValue(m_json_metadata));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_position_json_isSet) {
        obj.insert(QString("position_json"), ::OpenAPI::toJsonValue(m_position_json));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    return obj;
}

QString OAIDashboardRestApi_post::getCss() const {
    return m_css;
}
void OAIDashboardRestApi_post::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIDashboardRestApi_post::is_css_Set() const{
    return m_css_isSet;
}

bool OAIDashboardRestApi_post::is_css_Valid() const{
    return m_css_isValid;
}

QString OAIDashboardRestApi_post::getDashboardTitle() const {
    return m_dashboard_title;
}
void OAIDashboardRestApi_post::setDashboardTitle(const QString &dashboard_title) {
    m_dashboard_title = dashboard_title;
    m_dashboard_title_isSet = true;
}

bool OAIDashboardRestApi_post::is_dashboard_title_Set() const{
    return m_dashboard_title_isSet;
}

bool OAIDashboardRestApi_post::is_dashboard_title_Valid() const{
    return m_dashboard_title_isValid;
}

QString OAIDashboardRestApi_post::getJsonMetadata() const {
    return m_json_metadata;
}
void OAIDashboardRestApi_post::setJsonMetadata(const QString &json_metadata) {
    m_json_metadata = json_metadata;
    m_json_metadata_isSet = true;
}

bool OAIDashboardRestApi_post::is_json_metadata_Set() const{
    return m_json_metadata_isSet;
}

bool OAIDashboardRestApi_post::is_json_metadata_Valid() const{
    return m_json_metadata_isValid;
}

QList<qint32> OAIDashboardRestApi_post::getOwners() const {
    return m_owners;
}
void OAIDashboardRestApi_post::setOwners(const QList<qint32> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIDashboardRestApi_post::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIDashboardRestApi_post::is_owners_Valid() const{
    return m_owners_isValid;
}

QString OAIDashboardRestApi_post::getPositionJson() const {
    return m_position_json;
}
void OAIDashboardRestApi_post::setPositionJson(const QString &position_json) {
    m_position_json = position_json;
    m_position_json_isSet = true;
}

bool OAIDashboardRestApi_post::is_position_json_Set() const{
    return m_position_json_isSet;
}

bool OAIDashboardRestApi_post::is_position_json_Valid() const{
    return m_position_json_isValid;
}

bool OAIDashboardRestApi_post::isPublished() const {
    return m_published;
}
void OAIDashboardRestApi_post::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIDashboardRestApi_post::is_published_Set() const{
    return m_published_isSet;
}

bool OAIDashboardRestApi_post::is_published_Valid() const{
    return m_published_isValid;
}

QList<qint32> OAIDashboardRestApi_post::getRoles() const {
    return m_roles;
}
void OAIDashboardRestApi_post::setRoles(const QList<qint32> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIDashboardRestApi_post::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIDashboardRestApi_post::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIDashboardRestApi_post::getSlug() const {
    return m_slug;
}
void OAIDashboardRestApi_post::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIDashboardRestApi_post::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIDashboardRestApi_post::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIDashboardRestApi_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardRestApi_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
