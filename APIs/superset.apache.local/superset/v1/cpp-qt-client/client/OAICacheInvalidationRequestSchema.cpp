/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheInvalidationRequestSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheInvalidationRequestSchema::OAICacheInvalidationRequestSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheInvalidationRequestSchema::OAICacheInvalidationRequestSchema() {
    this->initializeModel();
}

OAICacheInvalidationRequestSchema::~OAICacheInvalidationRequestSchema() {}

void OAICacheInvalidationRequestSchema::initializeModel() {

    m_datasource_uids_isSet = false;
    m_datasource_uids_isValid = false;

    m_datasources_isSet = false;
    m_datasources_isValid = false;
}

void OAICacheInvalidationRequestSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheInvalidationRequestSchema::fromJsonObject(QJsonObject json) {

    m_datasource_uids_isValid = ::OpenAPI::fromJsonValue(m_datasource_uids, json[QString("datasource_uids")]);
    m_datasource_uids_isSet = !json[QString("datasource_uids")].isNull() && m_datasource_uids_isValid;

    m_datasources_isValid = ::OpenAPI::fromJsonValue(m_datasources, json[QString("datasources")]);
    m_datasources_isSet = !json[QString("datasources")].isNull() && m_datasources_isValid;
}

QString OAICacheInvalidationRequestSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheInvalidationRequestSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_datasource_uids.size() > 0) {
        obj.insert(QString("datasource_uids"), ::OpenAPI::toJsonValue(m_datasource_uids));
    }
    if (m_datasources.size() > 0) {
        obj.insert(QString("datasources"), ::OpenAPI::toJsonValue(m_datasources));
    }
    return obj;
}

QList<QString> OAICacheInvalidationRequestSchema::getDatasourceUids() const {
    return m_datasource_uids;
}
void OAICacheInvalidationRequestSchema::setDatasourceUids(const QList<QString> &datasource_uids) {
    m_datasource_uids = datasource_uids;
    m_datasource_uids_isSet = true;
}

bool OAICacheInvalidationRequestSchema::is_datasource_uids_Set() const{
    return m_datasource_uids_isSet;
}

bool OAICacheInvalidationRequestSchema::is_datasource_uids_Valid() const{
    return m_datasource_uids_isValid;
}

QList<OAIDatasource> OAICacheInvalidationRequestSchema::getDatasources() const {
    return m_datasources;
}
void OAICacheInvalidationRequestSchema::setDatasources(const QList<OAIDatasource> &datasources) {
    m_datasources = datasources;
    m_datasources_isSet = true;
}

bool OAICacheInvalidationRequestSchema::is_datasources_Set() const{
    return m_datasources_isSet;
}

bool OAICacheInvalidationRequestSchema::is_datasources_Valid() const{
    return m_datasources_isValid;
}

bool OAICacheInvalidationRequestSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasource_uids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheInvalidationRequestSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
