/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseRestApi_get.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseRestApi_get::OAIDatabaseRestApi_get(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseRestApi_get::OAIDatabaseRestApi_get() {
    this->initializeModel();
}

OAIDatabaseRestApi_get::~OAIDatabaseRestApi_get() {}

void OAIDatabaseRestApi_get::initializeModel() {

    m_allow_csv_upload_isSet = false;
    m_allow_csv_upload_isValid = false;

    m_allow_ctas_isSet = false;
    m_allow_ctas_isValid = false;

    m_allow_cvas_isSet = false;
    m_allow_cvas_isValid = false;

    m_allow_dml_isSet = false;
    m_allow_dml_isValid = false;

    m_allow_multi_schema_metadata_fetch_isSet = false;
    m_allow_multi_schema_metadata_fetch_isValid = false;

    m_allow_run_async_isSet = false;
    m_allow_run_async_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_configuration_method_isSet = false;
    m_configuration_method_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_encrypted_extra_isSet = false;
    m_encrypted_extra_isValid = false;

    m_expose_in_sqllab_isSet = false;
    m_expose_in_sqllab_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_force_ctas_schema_isSet = false;
    m_force_ctas_schema_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_impersonate_user_isSet = false;
    m_impersonate_user_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_server_cert_isSet = false;
    m_server_cert_isValid = false;

    m_sqlalchemy_uri_isSet = false;
    m_sqlalchemy_uri_isValid = false;
}

void OAIDatabaseRestApi_get::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseRestApi_get::fromJsonObject(QJsonObject json) {

    m_allow_csv_upload_isValid = ::OpenAPI::fromJsonValue(m_allow_csv_upload, json[QString("allow_csv_upload")]);
    m_allow_csv_upload_isSet = !json[QString("allow_csv_upload")].isNull() && m_allow_csv_upload_isValid;

    m_allow_ctas_isValid = ::OpenAPI::fromJsonValue(m_allow_ctas, json[QString("allow_ctas")]);
    m_allow_ctas_isSet = !json[QString("allow_ctas")].isNull() && m_allow_ctas_isValid;

    m_allow_cvas_isValid = ::OpenAPI::fromJsonValue(m_allow_cvas, json[QString("allow_cvas")]);
    m_allow_cvas_isSet = !json[QString("allow_cvas")].isNull() && m_allow_cvas_isValid;

    m_allow_dml_isValid = ::OpenAPI::fromJsonValue(m_allow_dml, json[QString("allow_dml")]);
    m_allow_dml_isSet = !json[QString("allow_dml")].isNull() && m_allow_dml_isValid;

    m_allow_multi_schema_metadata_fetch_isValid = ::OpenAPI::fromJsonValue(m_allow_multi_schema_metadata_fetch, json[QString("allow_multi_schema_metadata_fetch")]);
    m_allow_multi_schema_metadata_fetch_isSet = !json[QString("allow_multi_schema_metadata_fetch")].isNull() && m_allow_multi_schema_metadata_fetch_isValid;

    m_allow_run_async_isValid = ::OpenAPI::fromJsonValue(m_allow_run_async, json[QString("allow_run_async")]);
    m_allow_run_async_isSet = !json[QString("allow_run_async")].isNull() && m_allow_run_async_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_configuration_method_isValid = ::OpenAPI::fromJsonValue(m_configuration_method, json[QString("configuration_method")]);
    m_configuration_method_isSet = !json[QString("configuration_method")].isNull() && m_configuration_method_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("database_name")]);
    m_database_name_isSet = !json[QString("database_name")].isNull() && m_database_name_isValid;

    m_encrypted_extra_isValid = ::OpenAPI::fromJsonValue(m_encrypted_extra, json[QString("encrypted_extra")]);
    m_encrypted_extra_isSet = !json[QString("encrypted_extra")].isNull() && m_encrypted_extra_isValid;

    m_expose_in_sqllab_isValid = ::OpenAPI::fromJsonValue(m_expose_in_sqllab, json[QString("expose_in_sqllab")]);
    m_expose_in_sqllab_isSet = !json[QString("expose_in_sqllab")].isNull() && m_expose_in_sqllab_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_force_ctas_schema_isValid = ::OpenAPI::fromJsonValue(m_force_ctas_schema, json[QString("force_ctas_schema")]);
    m_force_ctas_schema_isSet = !json[QString("force_ctas_schema")].isNull() && m_force_ctas_schema_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_impersonate_user_isValid = ::OpenAPI::fromJsonValue(m_impersonate_user, json[QString("impersonate_user")]);
    m_impersonate_user_isSet = !json[QString("impersonate_user")].isNull() && m_impersonate_user_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_server_cert_isValid = ::OpenAPI::fromJsonValue(m_server_cert, json[QString("server_cert")]);
    m_server_cert_isSet = !json[QString("server_cert")].isNull() && m_server_cert_isValid;

    m_sqlalchemy_uri_isValid = ::OpenAPI::fromJsonValue(m_sqlalchemy_uri, json[QString("sqlalchemy_uri")]);
    m_sqlalchemy_uri_isSet = !json[QString("sqlalchemy_uri")].isNull() && m_sqlalchemy_uri_isValid;
}

QString OAIDatabaseRestApi_get::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseRestApi_get::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_csv_upload_isSet) {
        obj.insert(QString("allow_csv_upload"), ::OpenAPI::toJsonValue(m_allow_csv_upload));
    }
    if (m_allow_ctas_isSet) {
        obj.insert(QString("allow_ctas"), ::OpenAPI::toJsonValue(m_allow_ctas));
    }
    if (m_allow_cvas_isSet) {
        obj.insert(QString("allow_cvas"), ::OpenAPI::toJsonValue(m_allow_cvas));
    }
    if (m_allow_dml_isSet) {
        obj.insert(QString("allow_dml"), ::OpenAPI::toJsonValue(m_allow_dml));
    }
    if (m_allow_multi_schema_metadata_fetch_isSet) {
        obj.insert(QString("allow_multi_schema_metadata_fetch"), ::OpenAPI::toJsonValue(m_allow_multi_schema_metadata_fetch));
    }
    if (m_allow_run_async_isSet) {
        obj.insert(QString("allow_run_async"), ::OpenAPI::toJsonValue(m_allow_run_async));
    }
    if (m_backend_isSet) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_configuration_method_isSet) {
        obj.insert(QString("configuration_method"), ::OpenAPI::toJsonValue(m_configuration_method));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("database_name"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_encrypted_extra_isSet) {
        obj.insert(QString("encrypted_extra"), ::OpenAPI::toJsonValue(m_encrypted_extra));
    }
    if (m_expose_in_sqllab_isSet) {
        obj.insert(QString("expose_in_sqllab"), ::OpenAPI::toJsonValue(m_expose_in_sqllab));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_force_ctas_schema_isSet) {
        obj.insert(QString("force_ctas_schema"), ::OpenAPI::toJsonValue(m_force_ctas_schema));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_impersonate_user_isSet) {
        obj.insert(QString("impersonate_user"), ::OpenAPI::toJsonValue(m_impersonate_user));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_server_cert_isSet) {
        obj.insert(QString("server_cert"), ::OpenAPI::toJsonValue(m_server_cert));
    }
    if (m_sqlalchemy_uri_isSet) {
        obj.insert(QString("sqlalchemy_uri"), ::OpenAPI::toJsonValue(m_sqlalchemy_uri));
    }
    return obj;
}

bool OAIDatabaseRestApi_get::isAllowCsvUpload() const {
    return m_allow_csv_upload;
}
void OAIDatabaseRestApi_get::setAllowCsvUpload(const bool &allow_csv_upload) {
    m_allow_csv_upload = allow_csv_upload;
    m_allow_csv_upload_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_csv_upload_Set() const{
    return m_allow_csv_upload_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_csv_upload_Valid() const{
    return m_allow_csv_upload_isValid;
}

bool OAIDatabaseRestApi_get::isAllowCtas() const {
    return m_allow_ctas;
}
void OAIDatabaseRestApi_get::setAllowCtas(const bool &allow_ctas) {
    m_allow_ctas = allow_ctas;
    m_allow_ctas_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_ctas_Set() const{
    return m_allow_ctas_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_ctas_Valid() const{
    return m_allow_ctas_isValid;
}

bool OAIDatabaseRestApi_get::isAllowCvas() const {
    return m_allow_cvas;
}
void OAIDatabaseRestApi_get::setAllowCvas(const bool &allow_cvas) {
    m_allow_cvas = allow_cvas;
    m_allow_cvas_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_cvas_Set() const{
    return m_allow_cvas_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_cvas_Valid() const{
    return m_allow_cvas_isValid;
}

bool OAIDatabaseRestApi_get::isAllowDml() const {
    return m_allow_dml;
}
void OAIDatabaseRestApi_get::setAllowDml(const bool &allow_dml) {
    m_allow_dml = allow_dml;
    m_allow_dml_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_dml_Set() const{
    return m_allow_dml_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_dml_Valid() const{
    return m_allow_dml_isValid;
}

bool OAIDatabaseRestApi_get::isAllowMultiSchemaMetadataFetch() const {
    return m_allow_multi_schema_metadata_fetch;
}
void OAIDatabaseRestApi_get::setAllowMultiSchemaMetadataFetch(const bool &allow_multi_schema_metadata_fetch) {
    m_allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch;
    m_allow_multi_schema_metadata_fetch_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_multi_schema_metadata_fetch_Set() const{
    return m_allow_multi_schema_metadata_fetch_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_multi_schema_metadata_fetch_Valid() const{
    return m_allow_multi_schema_metadata_fetch_isValid;
}

bool OAIDatabaseRestApi_get::isAllowRunAsync() const {
    return m_allow_run_async;
}
void OAIDatabaseRestApi_get::setAllowRunAsync(const bool &allow_run_async) {
    m_allow_run_async = allow_run_async;
    m_allow_run_async_isSet = true;
}

bool OAIDatabaseRestApi_get::is_allow_run_async_Set() const{
    return m_allow_run_async_isSet;
}

bool OAIDatabaseRestApi_get::is_allow_run_async_Valid() const{
    return m_allow_run_async_isValid;
}

QJsonValue OAIDatabaseRestApi_get::getBackend() const {
    return m_backend;
}
void OAIDatabaseRestApi_get::setBackend(const QJsonValue &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIDatabaseRestApi_get::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIDatabaseRestApi_get::is_backend_Valid() const{
    return m_backend_isValid;
}

qint32 OAIDatabaseRestApi_get::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIDatabaseRestApi_get::setCacheTimeout(const qint32 &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIDatabaseRestApi_get::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIDatabaseRestApi_get::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

QString OAIDatabaseRestApi_get::getConfigurationMethod() const {
    return m_configuration_method;
}
void OAIDatabaseRestApi_get::setConfigurationMethod(const QString &configuration_method) {
    m_configuration_method = configuration_method;
    m_configuration_method_isSet = true;
}

bool OAIDatabaseRestApi_get::is_configuration_method_Set() const{
    return m_configuration_method_isSet;
}

bool OAIDatabaseRestApi_get::is_configuration_method_Valid() const{
    return m_configuration_method_isValid;
}

QString OAIDatabaseRestApi_get::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseRestApi_get::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseRestApi_get::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseRestApi_get::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatabaseRestApi_get::getEncryptedExtra() const {
    return m_encrypted_extra;
}
void OAIDatabaseRestApi_get::setEncryptedExtra(const QString &encrypted_extra) {
    m_encrypted_extra = encrypted_extra;
    m_encrypted_extra_isSet = true;
}

bool OAIDatabaseRestApi_get::is_encrypted_extra_Set() const{
    return m_encrypted_extra_isSet;
}

bool OAIDatabaseRestApi_get::is_encrypted_extra_Valid() const{
    return m_encrypted_extra_isValid;
}

bool OAIDatabaseRestApi_get::isExposeInSqllab() const {
    return m_expose_in_sqllab;
}
void OAIDatabaseRestApi_get::setExposeInSqllab(const bool &expose_in_sqllab) {
    m_expose_in_sqllab = expose_in_sqllab;
    m_expose_in_sqllab_isSet = true;
}

bool OAIDatabaseRestApi_get::is_expose_in_sqllab_Set() const{
    return m_expose_in_sqllab_isSet;
}

bool OAIDatabaseRestApi_get::is_expose_in_sqllab_Valid() const{
    return m_expose_in_sqllab_isValid;
}

QString OAIDatabaseRestApi_get::getExtra() const {
    return m_extra;
}
void OAIDatabaseRestApi_get::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIDatabaseRestApi_get::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIDatabaseRestApi_get::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIDatabaseRestApi_get::getForceCtasSchema() const {
    return m_force_ctas_schema;
}
void OAIDatabaseRestApi_get::setForceCtasSchema(const QString &force_ctas_schema) {
    m_force_ctas_schema = force_ctas_schema;
    m_force_ctas_schema_isSet = true;
}

bool OAIDatabaseRestApi_get::is_force_ctas_schema_Set() const{
    return m_force_ctas_schema_isSet;
}

bool OAIDatabaseRestApi_get::is_force_ctas_schema_Valid() const{
    return m_force_ctas_schema_isValid;
}

qint32 OAIDatabaseRestApi_get::getId() const {
    return m_id;
}
void OAIDatabaseRestApi_get::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatabaseRestApi_get::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatabaseRestApi_get::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDatabaseRestApi_get::isImpersonateUser() const {
    return m_impersonate_user;
}
void OAIDatabaseRestApi_get::setImpersonateUser(const bool &impersonate_user) {
    m_impersonate_user = impersonate_user;
    m_impersonate_user_isSet = true;
}

bool OAIDatabaseRestApi_get::is_impersonate_user_Set() const{
    return m_impersonate_user_isSet;
}

bool OAIDatabaseRestApi_get::is_impersonate_user_Valid() const{
    return m_impersonate_user_isValid;
}

QJsonValue OAIDatabaseRestApi_get::getParameters() const {
    return m_parameters;
}
void OAIDatabaseRestApi_get::setParameters(const QJsonValue &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDatabaseRestApi_get::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDatabaseRestApi_get::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDatabaseRestApi_get::getServerCert() const {
    return m_server_cert;
}
void OAIDatabaseRestApi_get::setServerCert(const QString &server_cert) {
    m_server_cert = server_cert;
    m_server_cert_isSet = true;
}

bool OAIDatabaseRestApi_get::is_server_cert_Set() const{
    return m_server_cert_isSet;
}

bool OAIDatabaseRestApi_get::is_server_cert_Valid() const{
    return m_server_cert_isValid;
}

QString OAIDatabaseRestApi_get::getSqlalchemyUri() const {
    return m_sqlalchemy_uri;
}
void OAIDatabaseRestApi_get::setSqlalchemyUri(const QString &sqlalchemy_uri) {
    m_sqlalchemy_uri = sqlalchemy_uri;
    m_sqlalchemy_uri_isSet = true;
}

bool OAIDatabaseRestApi_get::is_sqlalchemy_uri_Set() const{
    return m_sqlalchemy_uri_isSet;
}

bool OAIDatabaseRestApi_get::is_sqlalchemy_uri_Valid() const{
    return m_sqlalchemy_uri_isValid;
}

bool OAIDatabaseRestApi_get::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_csv_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_ctas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_cvas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_dml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_multi_schema_metadata_fetch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_run_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_in_sqllab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_ctas_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impersonate_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlalchemy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseRestApi_get::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && m_sqlalchemy_uri_isValid && true;
}

} // namespace OpenAPI
