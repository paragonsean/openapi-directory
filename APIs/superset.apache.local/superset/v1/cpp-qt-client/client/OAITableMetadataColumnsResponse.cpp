/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableMetadataColumnsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableMetadataColumnsResponse::OAITableMetadataColumnsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableMetadataColumnsResponse::OAITableMetadataColumnsResponse() {
    this->initializeModel();
}

OAITableMetadataColumnsResponse::~OAITableMetadataColumnsResponse() {}

void OAITableMetadataColumnsResponse::initializeModel() {

    m_duplicates_constraint_isSet = false;
    m_duplicates_constraint_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_long_type_isSet = false;
    m_long_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITableMetadataColumnsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableMetadataColumnsResponse::fromJsonObject(QJsonObject json) {

    m_duplicates_constraint_isValid = ::OpenAPI::fromJsonValue(m_duplicates_constraint, json[QString("duplicates_constraint")]);
    m_duplicates_constraint_isSet = !json[QString("duplicates_constraint")].isNull() && m_duplicates_constraint_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_long_type_isValid = ::OpenAPI::fromJsonValue(m_long_type, json[QString("longType")]);
    m_long_type_isSet = !json[QString("longType")].isNull() && m_long_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITableMetadataColumnsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableMetadataColumnsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicates_constraint_isSet) {
        obj.insert(QString("duplicates_constraint"), ::OpenAPI::toJsonValue(m_duplicates_constraint));
    }
    if (m_keys.size() > 0) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_long_type_isSet) {
        obj.insert(QString("longType"), ::OpenAPI::toJsonValue(m_long_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITableMetadataColumnsResponse::getDuplicatesConstraint() const {
    return m_duplicates_constraint;
}
void OAITableMetadataColumnsResponse::setDuplicatesConstraint(const QString &duplicates_constraint) {
    m_duplicates_constraint = duplicates_constraint;
    m_duplicates_constraint_isSet = true;
}

bool OAITableMetadataColumnsResponse::is_duplicates_constraint_Set() const{
    return m_duplicates_constraint_isSet;
}

bool OAITableMetadataColumnsResponse::is_duplicates_constraint_Valid() const{
    return m_duplicates_constraint_isValid;
}

QList<QString> OAITableMetadataColumnsResponse::getKeys() const {
    return m_keys;
}
void OAITableMetadataColumnsResponse::setKeys(const QList<QString> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAITableMetadataColumnsResponse::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAITableMetadataColumnsResponse::is_keys_Valid() const{
    return m_keys_isValid;
}

QString OAITableMetadataColumnsResponse::getLongType() const {
    return m_long_type;
}
void OAITableMetadataColumnsResponse::setLongType(const QString &long_type) {
    m_long_type = long_type;
    m_long_type_isSet = true;
}

bool OAITableMetadataColumnsResponse::is_long_type_Set() const{
    return m_long_type_isSet;
}

bool OAITableMetadataColumnsResponse::is_long_type_Valid() const{
    return m_long_type_isValid;
}

QString OAITableMetadataColumnsResponse::getName() const {
    return m_name;
}
void OAITableMetadataColumnsResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableMetadataColumnsResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableMetadataColumnsResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITableMetadataColumnsResponse::getType() const {
    return m_type;
}
void OAITableMetadataColumnsResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITableMetadataColumnsResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAITableMetadataColumnsResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITableMetadataColumnsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicates_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableMetadataColumnsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
