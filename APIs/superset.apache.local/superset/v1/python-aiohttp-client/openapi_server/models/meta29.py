# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta29(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, id: int=None, last_name: str=None):
        """Meta29 - a model defined in OpenAPI

        :param first_name: The first_name of this Meta29.
        :param id: The id of this Meta29.
        :param last_name: The last_name of this Meta29.
        """
        self.openapi_types = {
            'first_name': str,
            'id': int,
            'last_name': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name'
        }

        self._first_name = first_name
        self._id = id
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta29':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta29 of this Meta29.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this Meta29.


        :return: The first_name of this Meta29.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Meta29.


        :param first_name: The first_name of this Meta29.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 64:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `64`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Meta29.


        :return: The id of this Meta29.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Meta29.


        :param id: The id of this Meta29.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Meta29.


        :return: The last_name of this Meta29.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Meta29.


        :param last_name: The last_name of this Meta29.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 64:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `64`")

        self._last_name = last_name
