# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataPivotOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregates: object=None, column_fill_value: str=None, columns: List[str]=None, drop_missing_columns: bool=None, marginal_distribution_name: str=None, marginal_distributions: bool=None, metric_fill_value: float=None):
        """ChartDataPivotOptionsSchema - a model defined in OpenAPI

        :param aggregates: The aggregates of this ChartDataPivotOptionsSchema.
        :param column_fill_value: The column_fill_value of this ChartDataPivotOptionsSchema.
        :param columns: The columns of this ChartDataPivotOptionsSchema.
        :param drop_missing_columns: The drop_missing_columns of this ChartDataPivotOptionsSchema.
        :param marginal_distribution_name: The marginal_distribution_name of this ChartDataPivotOptionsSchema.
        :param marginal_distributions: The marginal_distributions of this ChartDataPivotOptionsSchema.
        :param metric_fill_value: The metric_fill_value of this ChartDataPivotOptionsSchema.
        """
        self.openapi_types = {
            'aggregates': object,
            'column_fill_value': str,
            'columns': List[str],
            'drop_missing_columns': bool,
            'marginal_distribution_name': str,
            'marginal_distributions': bool,
            'metric_fill_value': float
        }

        self.attribute_map = {
            'aggregates': 'aggregates',
            'column_fill_value': 'column_fill_value',
            'columns': 'columns',
            'drop_missing_columns': 'drop_missing_columns',
            'marginal_distribution_name': 'marginal_distribution_name',
            'marginal_distributions': 'marginal_distributions',
            'metric_fill_value': 'metric_fill_value'
        }

        self._aggregates = aggregates
        self._column_fill_value = column_fill_value
        self._columns = columns
        self._drop_missing_columns = drop_missing_columns
        self._marginal_distribution_name = marginal_distribution_name
        self._marginal_distributions = marginal_distributions
        self._metric_fill_value = metric_fill_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataPivotOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataPivotOptionsSchema of this ChartDataPivotOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregates(self):
        """Gets the aggregates of this ChartDataPivotOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :return: The aggregates of this ChartDataPivotOptionsSchema.
        :rtype: object
        """
        return self._aggregates

    @aggregates.setter
    def aggregates(self, aggregates):
        """Sets the aggregates of this ChartDataPivotOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :param aggregates: The aggregates of this ChartDataPivotOptionsSchema.
        :type aggregates: object
        """

        self._aggregates = aggregates

    @property
    def column_fill_value(self):
        """Gets the column_fill_value of this ChartDataPivotOptionsSchema.

        Value to replace missing pivot columns names with.

        :return: The column_fill_value of this ChartDataPivotOptionsSchema.
        :rtype: str
        """
        return self._column_fill_value

    @column_fill_value.setter
    def column_fill_value(self, column_fill_value):
        """Sets the column_fill_value of this ChartDataPivotOptionsSchema.

        Value to replace missing pivot columns names with.

        :param column_fill_value: The column_fill_value of this ChartDataPivotOptionsSchema.
        :type column_fill_value: str
        """

        self._column_fill_value = column_fill_value

    @property
    def columns(self):
        """Gets the columns of this ChartDataPivotOptionsSchema.


        :return: The columns of this ChartDataPivotOptionsSchema.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ChartDataPivotOptionsSchema.


        :param columns: The columns of this ChartDataPivotOptionsSchema.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def drop_missing_columns(self):
        """Gets the drop_missing_columns of this ChartDataPivotOptionsSchema.

        Do not include columns whose entries are all missing (default: `true`).

        :return: The drop_missing_columns of this ChartDataPivotOptionsSchema.
        :rtype: bool
        """
        return self._drop_missing_columns

    @drop_missing_columns.setter
    def drop_missing_columns(self, drop_missing_columns):
        """Sets the drop_missing_columns of this ChartDataPivotOptionsSchema.

        Do not include columns whose entries are all missing (default: `true`).

        :param drop_missing_columns: The drop_missing_columns of this ChartDataPivotOptionsSchema.
        :type drop_missing_columns: bool
        """

        self._drop_missing_columns = drop_missing_columns

    @property
    def marginal_distribution_name(self):
        """Gets the marginal_distribution_name of this ChartDataPivotOptionsSchema.

        Name of marginal distribution row/column. (default: `All`)

        :return: The marginal_distribution_name of this ChartDataPivotOptionsSchema.
        :rtype: str
        """
        return self._marginal_distribution_name

    @marginal_distribution_name.setter
    def marginal_distribution_name(self, marginal_distribution_name):
        """Sets the marginal_distribution_name of this ChartDataPivotOptionsSchema.

        Name of marginal distribution row/column. (default: `All`)

        :param marginal_distribution_name: The marginal_distribution_name of this ChartDataPivotOptionsSchema.
        :type marginal_distribution_name: str
        """

        self._marginal_distribution_name = marginal_distribution_name

    @property
    def marginal_distributions(self):
        """Gets the marginal_distributions of this ChartDataPivotOptionsSchema.

        Add totals for row/column. (default: `false`)

        :return: The marginal_distributions of this ChartDataPivotOptionsSchema.
        :rtype: bool
        """
        return self._marginal_distributions

    @marginal_distributions.setter
    def marginal_distributions(self, marginal_distributions):
        """Sets the marginal_distributions of this ChartDataPivotOptionsSchema.

        Add totals for row/column. (default: `false`)

        :param marginal_distributions: The marginal_distributions of this ChartDataPivotOptionsSchema.
        :type marginal_distributions: bool
        """

        self._marginal_distributions = marginal_distributions

    @property
    def metric_fill_value(self):
        """Gets the metric_fill_value of this ChartDataPivotOptionsSchema.

        Value to replace missing values with in aggregate calculations.

        :return: The metric_fill_value of this ChartDataPivotOptionsSchema.
        :rtype: float
        """
        return self._metric_fill_value

    @metric_fill_value.setter
    def metric_fill_value(self, metric_fill_value):
        """Sets the metric_fill_value of this ChartDataPivotOptionsSchema.

        Value to replace missing values with in aggregate calculations.

        :param metric_fill_value: The metric_fill_value of this ChartDataPivotOptionsSchema.
        :type metric_fill_value: float
        """

        self._metric_fill_value = metric_fill_value
