# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetColumnsPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_name: str=None, description: str=None, expression: str=None, filterable: bool=None, groupby: bool=None, id: int=None, is_active: bool=None, is_dttm: bool=None, python_date_format: str=None, type: str=None, uuid: str=None, verbose_name: str=None):
        """DatasetColumnsPut - a model defined in OpenAPI

        :param column_name: The column_name of this DatasetColumnsPut.
        :param description: The description of this DatasetColumnsPut.
        :param expression: The expression of this DatasetColumnsPut.
        :param filterable: The filterable of this DatasetColumnsPut.
        :param groupby: The groupby of this DatasetColumnsPut.
        :param id: The id of this DatasetColumnsPut.
        :param is_active: The is_active of this DatasetColumnsPut.
        :param is_dttm: The is_dttm of this DatasetColumnsPut.
        :param python_date_format: The python_date_format of this DatasetColumnsPut.
        :param type: The type of this DatasetColumnsPut.
        :param uuid: The uuid of this DatasetColumnsPut.
        :param verbose_name: The verbose_name of this DatasetColumnsPut.
        """
        self.openapi_types = {
            'column_name': str,
            'description': str,
            'expression': str,
            'filterable': bool,
            'groupby': bool,
            'id': int,
            'is_active': bool,
            'is_dttm': bool,
            'python_date_format': str,
            'type': str,
            'uuid': str,
            'verbose_name': str
        }

        self.attribute_map = {
            'column_name': 'column_name',
            'description': 'description',
            'expression': 'expression',
            'filterable': 'filterable',
            'groupby': 'groupby',
            'id': 'id',
            'is_active': 'is_active',
            'is_dttm': 'is_dttm',
            'python_date_format': 'python_date_format',
            'type': 'type',
            'uuid': 'uuid',
            'verbose_name': 'verbose_name'
        }

        self._column_name = column_name
        self._description = description
        self._expression = expression
        self._filterable = filterable
        self._groupby = groupby
        self._id = id
        self._is_active = is_active
        self._is_dttm = is_dttm
        self._python_date_format = python_date_format
        self._type = type
        self._uuid = uuid
        self._verbose_name = verbose_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetColumnsPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetColumnsPut of this DatasetColumnsPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self):
        """Gets the column_name of this DatasetColumnsPut.


        :return: The column_name of this DatasetColumnsPut.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this DatasetColumnsPut.


        :param column_name: The column_name of this DatasetColumnsPut.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")
        if column_name is not None and len(column_name) > 255:
            raise ValueError("Invalid value for `column_name`, length must be less than or equal to `255`")
        if column_name is not None and len(column_name) < 1:
            raise ValueError("Invalid value for `column_name`, length must be greater than or equal to `1`")

        self._column_name = column_name

    @property
    def description(self):
        """Gets the description of this DatasetColumnsPut.


        :return: The description of this DatasetColumnsPut.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetColumnsPut.


        :param description: The description of this DatasetColumnsPut.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this DatasetColumnsPut.


        :return: The expression of this DatasetColumnsPut.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this DatasetColumnsPut.


        :param expression: The expression of this DatasetColumnsPut.
        :type expression: str
        """

        self._expression = expression

    @property
    def filterable(self):
        """Gets the filterable of this DatasetColumnsPut.


        :return: The filterable of this DatasetColumnsPut.
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this DatasetColumnsPut.


        :param filterable: The filterable of this DatasetColumnsPut.
        :type filterable: bool
        """

        self._filterable = filterable

    @property
    def groupby(self):
        """Gets the groupby of this DatasetColumnsPut.


        :return: The groupby of this DatasetColumnsPut.
        :rtype: bool
        """
        return self._groupby

    @groupby.setter
    def groupby(self, groupby):
        """Sets the groupby of this DatasetColumnsPut.


        :param groupby: The groupby of this DatasetColumnsPut.
        :type groupby: bool
        """

        self._groupby = groupby

    @property
    def id(self):
        """Gets the id of this DatasetColumnsPut.


        :return: The id of this DatasetColumnsPut.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetColumnsPut.


        :param id: The id of this DatasetColumnsPut.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this DatasetColumnsPut.


        :return: The is_active of this DatasetColumnsPut.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DatasetColumnsPut.


        :param is_active: The is_active of this DatasetColumnsPut.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_dttm(self):
        """Gets the is_dttm of this DatasetColumnsPut.


        :return: The is_dttm of this DatasetColumnsPut.
        :rtype: bool
        """
        return self._is_dttm

    @is_dttm.setter
    def is_dttm(self, is_dttm):
        """Sets the is_dttm of this DatasetColumnsPut.


        :param is_dttm: The is_dttm of this DatasetColumnsPut.
        :type is_dttm: bool
        """

        self._is_dttm = is_dttm

    @property
    def python_date_format(self):
        """Gets the python_date_format of this DatasetColumnsPut.


        :return: The python_date_format of this DatasetColumnsPut.
        :rtype: str
        """
        return self._python_date_format

    @python_date_format.setter
    def python_date_format(self, python_date_format):
        """Sets the python_date_format of this DatasetColumnsPut.


        :param python_date_format: The python_date_format of this DatasetColumnsPut.
        :type python_date_format: str
        """
        if python_date_format is not None and len(python_date_format) > 255:
            raise ValueError("Invalid value for `python_date_format`, length must be less than or equal to `255`")
        if python_date_format is not None and len(python_date_format) < 1:
            raise ValueError("Invalid value for `python_date_format`, length must be greater than or equal to `1`")

        self._python_date_format = python_date_format

    @property
    def type(self):
        """Gets the type of this DatasetColumnsPut.


        :return: The type of this DatasetColumnsPut.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatasetColumnsPut.


        :param type: The type of this DatasetColumnsPut.
        :type type: str
        """
        if type is not None and len(type) > 32:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `32`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this DatasetColumnsPut.


        :return: The uuid of this DatasetColumnsPut.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DatasetColumnsPut.


        :param uuid: The uuid of this DatasetColumnsPut.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def verbose_name(self):
        """Gets the verbose_name of this DatasetColumnsPut.


        :return: The verbose_name of this DatasetColumnsPut.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this DatasetColumnsPut.


        :param verbose_name: The verbose_name of this DatasetColumnsPut.
        :type verbose_name: str
        """

        self._verbose_name = verbose_name
