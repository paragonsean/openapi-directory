# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta19 import Meta19
from openapi_server.models.meta20 import Meta20
from openapi_server.models.meta21 import Meta21
from openapi_server import util


class DatasetRestApiGetList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_by: Meta19=None, changed_by_name: object=None, changed_by_url: object=None, changed_on_delta_humanized: object=None, changed_on_utc: object=None, database: Meta21=None, default_endpoint: str=None, explore_url: object=None, extra: str=None, id: int=None, kind: object=None, owners: Meta20=None, _schema: str=None, sql: str=None, table_name: str=None):
        """DatasetRestApiGetList - a model defined in OpenAPI

        :param changed_by: The changed_by of this DatasetRestApiGetList.
        :param changed_by_name: The changed_by_name of this DatasetRestApiGetList.
        :param changed_by_url: The changed_by_url of this DatasetRestApiGetList.
        :param changed_on_delta_humanized: The changed_on_delta_humanized of this DatasetRestApiGetList.
        :param changed_on_utc: The changed_on_utc of this DatasetRestApiGetList.
        :param database: The database of this DatasetRestApiGetList.
        :param default_endpoint: The default_endpoint of this DatasetRestApiGetList.
        :param explore_url: The explore_url of this DatasetRestApiGetList.
        :param extra: The extra of this DatasetRestApiGetList.
        :param id: The id of this DatasetRestApiGetList.
        :param kind: The kind of this DatasetRestApiGetList.
        :param owners: The owners of this DatasetRestApiGetList.
        :param _schema: The _schema of this DatasetRestApiGetList.
        :param sql: The sql of this DatasetRestApiGetList.
        :param table_name: The table_name of this DatasetRestApiGetList.
        """
        self.openapi_types = {
            'changed_by': Meta19,
            'changed_by_name': object,
            'changed_by_url': object,
            'changed_on_delta_humanized': object,
            'changed_on_utc': object,
            'database': Meta21,
            'default_endpoint': str,
            'explore_url': object,
            'extra': str,
            'id': int,
            'kind': object,
            'owners': Meta20,
            '_schema': str,
            'sql': str,
            'table_name': str
        }

        self.attribute_map = {
            'changed_by': 'changed_by',
            'changed_by_name': 'changed_by_name',
            'changed_by_url': 'changed_by_url',
            'changed_on_delta_humanized': 'changed_on_delta_humanized',
            'changed_on_utc': 'changed_on_utc',
            'database': 'database',
            'default_endpoint': 'default_endpoint',
            'explore_url': 'explore_url',
            'extra': 'extra',
            'id': 'id',
            'kind': 'kind',
            'owners': 'owners',
            '_schema': 'schema',
            'sql': 'sql',
            'table_name': 'table_name'
        }

        self._changed_by = changed_by
        self._changed_by_name = changed_by_name
        self._changed_by_url = changed_by_url
        self._changed_on_delta_humanized = changed_on_delta_humanized
        self._changed_on_utc = changed_on_utc
        self._database = database
        self._default_endpoint = default_endpoint
        self._explore_url = explore_url
        self._extra = extra
        self._id = id
        self._kind = kind
        self._owners = owners
        self.__schema = _schema
        self._sql = sql
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetRestApiGetList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetRestApi.get_list of this DatasetRestApiGetList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_by(self):
        """Gets the changed_by of this DatasetRestApiGetList.


        :return: The changed_by of this DatasetRestApiGetList.
        :rtype: Meta19
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this DatasetRestApiGetList.


        :param changed_by: The changed_by of this DatasetRestApiGetList.
        :type changed_by: Meta19
        """

        self._changed_by = changed_by

    @property
    def changed_by_name(self):
        """Gets the changed_by_name of this DatasetRestApiGetList.


        :return: The changed_by_name of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._changed_by_name

    @changed_by_name.setter
    def changed_by_name(self, changed_by_name):
        """Sets the changed_by_name of this DatasetRestApiGetList.


        :param changed_by_name: The changed_by_name of this DatasetRestApiGetList.
        :type changed_by_name: object
        """

        self._changed_by_name = changed_by_name

    @property
    def changed_by_url(self):
        """Gets the changed_by_url of this DatasetRestApiGetList.


        :return: The changed_by_url of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._changed_by_url

    @changed_by_url.setter
    def changed_by_url(self, changed_by_url):
        """Sets the changed_by_url of this DatasetRestApiGetList.


        :param changed_by_url: The changed_by_url of this DatasetRestApiGetList.
        :type changed_by_url: object
        """

        self._changed_by_url = changed_by_url

    @property
    def changed_on_delta_humanized(self):
        """Gets the changed_on_delta_humanized of this DatasetRestApiGetList.


        :return: The changed_on_delta_humanized of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._changed_on_delta_humanized

    @changed_on_delta_humanized.setter
    def changed_on_delta_humanized(self, changed_on_delta_humanized):
        """Sets the changed_on_delta_humanized of this DatasetRestApiGetList.


        :param changed_on_delta_humanized: The changed_on_delta_humanized of this DatasetRestApiGetList.
        :type changed_on_delta_humanized: object
        """

        self._changed_on_delta_humanized = changed_on_delta_humanized

    @property
    def changed_on_utc(self):
        """Gets the changed_on_utc of this DatasetRestApiGetList.


        :return: The changed_on_utc of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._changed_on_utc

    @changed_on_utc.setter
    def changed_on_utc(self, changed_on_utc):
        """Sets the changed_on_utc of this DatasetRestApiGetList.


        :param changed_on_utc: The changed_on_utc of this DatasetRestApiGetList.
        :type changed_on_utc: object
        """

        self._changed_on_utc = changed_on_utc

    @property
    def database(self):
        """Gets the database of this DatasetRestApiGetList.


        :return: The database of this DatasetRestApiGetList.
        :rtype: Meta21
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DatasetRestApiGetList.


        :param database: The database of this DatasetRestApiGetList.
        :type database: Meta21
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def default_endpoint(self):
        """Gets the default_endpoint of this DatasetRestApiGetList.


        :return: The default_endpoint of this DatasetRestApiGetList.
        :rtype: str
        """
        return self._default_endpoint

    @default_endpoint.setter
    def default_endpoint(self, default_endpoint):
        """Sets the default_endpoint of this DatasetRestApiGetList.


        :param default_endpoint: The default_endpoint of this DatasetRestApiGetList.
        :type default_endpoint: str
        """

        self._default_endpoint = default_endpoint

    @property
    def explore_url(self):
        """Gets the explore_url of this DatasetRestApiGetList.


        :return: The explore_url of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._explore_url

    @explore_url.setter
    def explore_url(self, explore_url):
        """Sets the explore_url of this DatasetRestApiGetList.


        :param explore_url: The explore_url of this DatasetRestApiGetList.
        :type explore_url: object
        """

        self._explore_url = explore_url

    @property
    def extra(self):
        """Gets the extra of this DatasetRestApiGetList.


        :return: The extra of this DatasetRestApiGetList.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatasetRestApiGetList.


        :param extra: The extra of this DatasetRestApiGetList.
        :type extra: str
        """

        self._extra = extra

    @property
    def id(self):
        """Gets the id of this DatasetRestApiGetList.


        :return: The id of this DatasetRestApiGetList.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetRestApiGetList.


        :param id: The id of this DatasetRestApiGetList.
        :type id: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this DatasetRestApiGetList.


        :return: The kind of this DatasetRestApiGetList.
        :rtype: object
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DatasetRestApiGetList.


        :param kind: The kind of this DatasetRestApiGetList.
        :type kind: object
        """

        self._kind = kind

    @property
    def owners(self):
        """Gets the owners of this DatasetRestApiGetList.


        :return: The owners of this DatasetRestApiGetList.
        :rtype: Meta20
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DatasetRestApiGetList.


        :param owners: The owners of this DatasetRestApiGetList.
        :type owners: Meta20
        """

        self._owners = owners

    @property
    def _schema(self):
        """Gets the _schema of this DatasetRestApiGetList.


        :return: The _schema of this DatasetRestApiGetList.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DatasetRestApiGetList.


        :param _schema: The _schema of this DatasetRestApiGetList.
        :type _schema: str
        """
        if _schema is not None and len(_schema) > 255:
            raise ValueError("Invalid value for `_schema`, length must be less than or equal to `255`")

        self.__schema = _schema

    @property
    def sql(self):
        """Gets the sql of this DatasetRestApiGetList.


        :return: The sql of this DatasetRestApiGetList.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this DatasetRestApiGetList.


        :param sql: The sql of this DatasetRestApiGetList.
        :type sql: str
        """

        self._sql = sql

    @property
    def table_name(self):
        """Gets the table_name of this DatasetRestApiGetList.


        :return: The table_name of this DatasetRestApiGetList.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DatasetRestApiGetList.


        :param table_name: The table_name of this DatasetRestApiGetList.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 250:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `250`")

        self._table_name = table_name
