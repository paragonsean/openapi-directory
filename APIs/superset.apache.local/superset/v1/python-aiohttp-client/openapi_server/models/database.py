# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_multi_schema_metadata_fetch: bool=None, allows_cost_estimate: bool=None, allows_subquery: bool=None, allows_virtual_table_explore: bool=None, backend: str=None, explore_database_id: int=None, id: int=None, name: str=None):
        """Database - a model defined in OpenAPI

        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this Database.
        :param allows_cost_estimate: The allows_cost_estimate of this Database.
        :param allows_subquery: The allows_subquery of this Database.
        :param allows_virtual_table_explore: The allows_virtual_table_explore of this Database.
        :param backend: The backend of this Database.
        :param explore_database_id: The explore_database_id of this Database.
        :param id: The id of this Database.
        :param name: The name of this Database.
        """
        self.openapi_types = {
            'allow_multi_schema_metadata_fetch': bool,
            'allows_cost_estimate': bool,
            'allows_subquery': bool,
            'allows_virtual_table_explore': bool,
            'backend': str,
            'explore_database_id': int,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'allow_multi_schema_metadata_fetch': 'allow_multi_schema_metadata_fetch',
            'allows_cost_estimate': 'allows_cost_estimate',
            'allows_subquery': 'allows_subquery',
            'allows_virtual_table_explore': 'allows_virtual_table_explore',
            'backend': 'backend',
            'explore_database_id': 'explore_database_id',
            'id': 'id',
            'name': 'name'
        }

        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch
        self._allows_cost_estimate = allows_cost_estimate
        self._allows_subquery = allows_subquery
        self._allows_virtual_table_explore = allows_virtual_table_explore
        self._backend = backend
        self._explore_database_id = explore_database_id
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Database of this Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_multi_schema_metadata_fetch(self):
        """Gets the allow_multi_schema_metadata_fetch of this Database.


        :return: The allow_multi_schema_metadata_fetch of this Database.
        :rtype: bool
        """
        return self._allow_multi_schema_metadata_fetch

    @allow_multi_schema_metadata_fetch.setter
    def allow_multi_schema_metadata_fetch(self, allow_multi_schema_metadata_fetch):
        """Sets the allow_multi_schema_metadata_fetch of this Database.


        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this Database.
        :type allow_multi_schema_metadata_fetch: bool
        """

        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch

    @property
    def allows_cost_estimate(self):
        """Gets the allows_cost_estimate of this Database.


        :return: The allows_cost_estimate of this Database.
        :rtype: bool
        """
        return self._allows_cost_estimate

    @allows_cost_estimate.setter
    def allows_cost_estimate(self, allows_cost_estimate):
        """Sets the allows_cost_estimate of this Database.


        :param allows_cost_estimate: The allows_cost_estimate of this Database.
        :type allows_cost_estimate: bool
        """

        self._allows_cost_estimate = allows_cost_estimate

    @property
    def allows_subquery(self):
        """Gets the allows_subquery of this Database.


        :return: The allows_subquery of this Database.
        :rtype: bool
        """
        return self._allows_subquery

    @allows_subquery.setter
    def allows_subquery(self, allows_subquery):
        """Sets the allows_subquery of this Database.


        :param allows_subquery: The allows_subquery of this Database.
        :type allows_subquery: bool
        """

        self._allows_subquery = allows_subquery

    @property
    def allows_virtual_table_explore(self):
        """Gets the allows_virtual_table_explore of this Database.


        :return: The allows_virtual_table_explore of this Database.
        :rtype: bool
        """
        return self._allows_virtual_table_explore

    @allows_virtual_table_explore.setter
    def allows_virtual_table_explore(self, allows_virtual_table_explore):
        """Sets the allows_virtual_table_explore of this Database.


        :param allows_virtual_table_explore: The allows_virtual_table_explore of this Database.
        :type allows_virtual_table_explore: bool
        """

        self._allows_virtual_table_explore = allows_virtual_table_explore

    @property
    def backend(self):
        """Gets the backend of this Database.


        :return: The backend of this Database.
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this Database.


        :param backend: The backend of this Database.
        :type backend: str
        """

        self._backend = backend

    @property
    def explore_database_id(self):
        """Gets the explore_database_id of this Database.


        :return: The explore_database_id of this Database.
        :rtype: int
        """
        return self._explore_database_id

    @explore_database_id.setter
    def explore_database_id(self, explore_database_id):
        """Sets the explore_database_id of this Database.


        :param explore_database_id: The explore_database_id of this Database.
        :type explore_database_id: int
        """

        self._explore_database_id = explore_database_id

    @property
    def id(self):
        """Gets the id of this Database.


        :return: The id of this Database.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Database.


        :param id: The id of this Database.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Database.


        :return: The name of this Database.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Database.


        :param name: The name of this Database.
        :type name: str
        """

        self._name = name
