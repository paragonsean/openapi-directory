# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_recipient import ReportRecipient
from openapi_server.models.validator_config_json import ValidatorConfigJSON
from openapi_server import util


class ReportScheduleRestApiPut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, chart: int=None, context_markdown: str=None, creation_method: object=None, crontab: str=None, dashboard: int=None, database: int=None, description: str=None, grace_period: int=None, log_retention: int=None, name: str=None, owners: List[int]=None, recipients: List[ReportRecipient]=None, report_format: str=None, sql: str=None, timezone: str=None, type: str=None, validator_config_json: ValidatorConfigJSON=None, validator_type: str=None, working_timeout: int=None):
        """ReportScheduleRestApiPut - a model defined in OpenAPI

        :param active: The active of this ReportScheduleRestApiPut.
        :param chart: The chart of this ReportScheduleRestApiPut.
        :param context_markdown: The context_markdown of this ReportScheduleRestApiPut.
        :param creation_method: The creation_method of this ReportScheduleRestApiPut.
        :param crontab: The crontab of this ReportScheduleRestApiPut.
        :param dashboard: The dashboard of this ReportScheduleRestApiPut.
        :param database: The database of this ReportScheduleRestApiPut.
        :param description: The description of this ReportScheduleRestApiPut.
        :param grace_period: The grace_period of this ReportScheduleRestApiPut.
        :param log_retention: The log_retention of this ReportScheduleRestApiPut.
        :param name: The name of this ReportScheduleRestApiPut.
        :param owners: The owners of this ReportScheduleRestApiPut.
        :param recipients: The recipients of this ReportScheduleRestApiPut.
        :param report_format: The report_format of this ReportScheduleRestApiPut.
        :param sql: The sql of this ReportScheduleRestApiPut.
        :param timezone: The timezone of this ReportScheduleRestApiPut.
        :param type: The type of this ReportScheduleRestApiPut.
        :param validator_config_json: The validator_config_json of this ReportScheduleRestApiPut.
        :param validator_type: The validator_type of this ReportScheduleRestApiPut.
        :param working_timeout: The working_timeout of this ReportScheduleRestApiPut.
        """
        self.openapi_types = {
            'active': bool,
            'chart': int,
            'context_markdown': str,
            'creation_method': object,
            'crontab': str,
            'dashboard': int,
            'database': int,
            'description': str,
            'grace_period': int,
            'log_retention': int,
            'name': str,
            'owners': List[int],
            'recipients': List[ReportRecipient],
            'report_format': str,
            'sql': str,
            'timezone': str,
            'type': str,
            'validator_config_json': ValidatorConfigJSON,
            'validator_type': str,
            'working_timeout': int
        }

        self.attribute_map = {
            'active': 'active',
            'chart': 'chart',
            'context_markdown': 'context_markdown',
            'creation_method': 'creation_method',
            'crontab': 'crontab',
            'dashboard': 'dashboard',
            'database': 'database',
            'description': 'description',
            'grace_period': 'grace_period',
            'log_retention': 'log_retention',
            'name': 'name',
            'owners': 'owners',
            'recipients': 'recipients',
            'report_format': 'report_format',
            'sql': 'sql',
            'timezone': 'timezone',
            'type': 'type',
            'validator_config_json': 'validator_config_json',
            'validator_type': 'validator_type',
            'working_timeout': 'working_timeout'
        }

        self._active = active
        self._chart = chart
        self._context_markdown = context_markdown
        self._creation_method = creation_method
        self._crontab = crontab
        self._dashboard = dashboard
        self._database = database
        self._description = description
        self._grace_period = grace_period
        self._log_retention = log_retention
        self._name = name
        self._owners = owners
        self._recipients = recipients
        self._report_format = report_format
        self._sql = sql
        self._timezone = timezone
        self._type = type
        self._validator_config_json = validator_config_json
        self._validator_type = validator_type
        self._working_timeout = working_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportScheduleRestApiPut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportScheduleRestApi.put of this ReportScheduleRestApiPut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ReportScheduleRestApiPut.


        :return: The active of this ReportScheduleRestApiPut.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReportScheduleRestApiPut.


        :param active: The active of this ReportScheduleRestApiPut.
        :type active: bool
        """

        self._active = active

    @property
    def chart(self):
        """Gets the chart of this ReportScheduleRestApiPut.


        :return: The chart of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ReportScheduleRestApiPut.


        :param chart: The chart of this ReportScheduleRestApiPut.
        :type chart: int
        """

        self._chart = chart

    @property
    def context_markdown(self):
        """Gets the context_markdown of this ReportScheduleRestApiPut.

        Markdown description

        :return: The context_markdown of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._context_markdown

    @context_markdown.setter
    def context_markdown(self, context_markdown):
        """Sets the context_markdown of this ReportScheduleRestApiPut.

        Markdown description

        :param context_markdown: The context_markdown of this ReportScheduleRestApiPut.
        :type context_markdown: str
        """

        self._context_markdown = context_markdown

    @property
    def creation_method(self):
        """Gets the creation_method of this ReportScheduleRestApiPut.

        Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.

        :return: The creation_method of this ReportScheduleRestApiPut.
        :rtype: object
        """
        return self._creation_method

    @creation_method.setter
    def creation_method(self, creation_method):
        """Sets the creation_method of this ReportScheduleRestApiPut.

        Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.

        :param creation_method: The creation_method of this ReportScheduleRestApiPut.
        :type creation_method: object
        """

        self._creation_method = creation_method

    @property
    def crontab(self):
        """Gets the crontab of this ReportScheduleRestApiPut.

        A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.

        :return: The crontab of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this ReportScheduleRestApiPut.

        A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.

        :param crontab: The crontab of this ReportScheduleRestApiPut.
        :type crontab: str
        """
        if crontab is not None and len(crontab) > 1000:
            raise ValueError("Invalid value for `crontab`, length must be less than or equal to `1000`")
        if crontab is not None and len(crontab) < 1:
            raise ValueError("Invalid value for `crontab`, length must be greater than or equal to `1`")

        self._crontab = crontab

    @property
    def dashboard(self):
        """Gets the dashboard of this ReportScheduleRestApiPut.


        :return: The dashboard of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this ReportScheduleRestApiPut.


        :param dashboard: The dashboard of this ReportScheduleRestApiPut.
        :type dashboard: int
        """

        self._dashboard = dashboard

    @property
    def database(self):
        """Gets the database of this ReportScheduleRestApiPut.


        :return: The database of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ReportScheduleRestApiPut.


        :param database: The database of this ReportScheduleRestApiPut.
        :type database: int
        """

        self._database = database

    @property
    def description(self):
        """Gets the description of this ReportScheduleRestApiPut.

        Use a nice description to give context to this Alert/Report

        :return: The description of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportScheduleRestApiPut.

        Use a nice description to give context to this Alert/Report

        :param description: The description of this ReportScheduleRestApiPut.
        :type description: str
        """

        self._description = description

    @property
    def grace_period(self):
        """Gets the grace_period of this ReportScheduleRestApiPut.

        Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)

        :return: The grace_period of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this ReportScheduleRestApiPut.

        Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)

        :param grace_period: The grace_period of this ReportScheduleRestApiPut.
        :type grace_period: int
        """
        if grace_period is not None and grace_period < 1:
            raise ValueError("Invalid value for `grace_period`, must be a value greater than or equal to `1`")

        self._grace_period = grace_period

    @property
    def log_retention(self):
        """Gets the log_retention of this ReportScheduleRestApiPut.

        How long to keep the logs around for this report (in days)

        :return: The log_retention of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._log_retention

    @log_retention.setter
    def log_retention(self, log_retention):
        """Sets the log_retention of this ReportScheduleRestApiPut.

        How long to keep the logs around for this report (in days)

        :param log_retention: The log_retention of this ReportScheduleRestApiPut.
        :type log_retention: int
        """
        if log_retention is not None and log_retention < 1:
            raise ValueError("Invalid value for `log_retention`, must be a value greater than or equal to `1`")

        self._log_retention = log_retention

    @property
    def name(self):
        """Gets the name of this ReportScheduleRestApiPut.

        The report schedule name.

        :return: The name of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportScheduleRestApiPut.

        The report schedule name.

        :param name: The name of this ReportScheduleRestApiPut.
        :type name: str
        """
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def owners(self):
        """Gets the owners of this ReportScheduleRestApiPut.


        :return: The owners of this ReportScheduleRestApiPut.
        :rtype: List[int]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ReportScheduleRestApiPut.


        :param owners: The owners of this ReportScheduleRestApiPut.
        :type owners: List[int]
        """

        self._owners = owners

    @property
    def recipients(self):
        """Gets the recipients of this ReportScheduleRestApiPut.


        :return: The recipients of this ReportScheduleRestApiPut.
        :rtype: List[ReportRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ReportScheduleRestApiPut.


        :param recipients: The recipients of this ReportScheduleRestApiPut.
        :type recipients: List[ReportRecipient]
        """

        self._recipients = recipients

    @property
    def report_format(self):
        """Gets the report_format of this ReportScheduleRestApiPut.


        :return: The report_format of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._report_format

    @report_format.setter
    def report_format(self, report_format):
        """Sets the report_format of this ReportScheduleRestApiPut.


        :param report_format: The report_format of this ReportScheduleRestApiPut.
        :type report_format: str
        """
        allowed_values = ["PNG", "CSV", "TEXT"]  # noqa: E501
        if report_format not in allowed_values:
            raise ValueError(
                "Invalid value for `report_format` ({0}), must be one of {1}"
                .format(report_format, allowed_values)
            )

        self._report_format = report_format

    @property
    def sql(self):
        """Gets the sql of this ReportScheduleRestApiPut.

        A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.

        :return: The sql of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this ReportScheduleRestApiPut.

        A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.

        :param sql: The sql of this ReportScheduleRestApiPut.
        :type sql: str
        """

        self._sql = sql

    @property
    def timezone(self):
        """Gets the timezone of this ReportScheduleRestApiPut.

        A timezone string that represents the location of the timezone.

        :return: The timezone of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ReportScheduleRestApiPut.

        A timezone string that represents the location of the timezone.

        :param timezone: The timezone of this ReportScheduleRestApiPut.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this ReportScheduleRestApiPut.

        The report schedule type

        :return: The type of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportScheduleRestApiPut.

        The report schedule type

        :param type: The type of this ReportScheduleRestApiPut.
        :type type: str
        """
        allowed_values = ["Alert", "Report"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validator_config_json(self):
        """Gets the validator_config_json of this ReportScheduleRestApiPut.


        :return: The validator_config_json of this ReportScheduleRestApiPut.
        :rtype: ValidatorConfigJSON
        """
        return self._validator_config_json

    @validator_config_json.setter
    def validator_config_json(self, validator_config_json):
        """Sets the validator_config_json of this ReportScheduleRestApiPut.


        :param validator_config_json: The validator_config_json of this ReportScheduleRestApiPut.
        :type validator_config_json: ValidatorConfigJSON
        """

        self._validator_config_json = validator_config_json

    @property
    def validator_type(self):
        """Gets the validator_type of this ReportScheduleRestApiPut.

        Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types: - Not Null - When the return value is Not NULL, Empty, or 0 - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=

        :return: The validator_type of this ReportScheduleRestApiPut.
        :rtype: str
        """
        return self._validator_type

    @validator_type.setter
    def validator_type(self, validator_type):
        """Sets the validator_type of this ReportScheduleRestApiPut.

        Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types: - Not Null - When the return value is Not NULL, Empty, or 0 - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=

        :param validator_type: The validator_type of this ReportScheduleRestApiPut.
        :type validator_type: str
        """
        allowed_values = [None,"not null", "operator"]  # noqa: E501
        if validator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validator_type` ({0}), must be one of {1}"
                .format(validator_type, allowed_values)
            )

        self._validator_type = validator_type

    @property
    def working_timeout(self):
        """Gets the working_timeout of this ReportScheduleRestApiPut.

        If an alert is staled at a working state, how long until it's state is reseted to error

        :return: The working_timeout of this ReportScheduleRestApiPut.
        :rtype: int
        """
        return self._working_timeout

    @working_timeout.setter
    def working_timeout(self, working_timeout):
        """Sets the working_timeout of this ReportScheduleRestApiPut.

        If an alert is staled at a working state, how long until it's state is reseted to error

        :param working_timeout: The working_timeout of this ReportScheduleRestApiPut.
        :type working_timeout: int
        """
        if working_timeout is not None and working_timeout < 1:
            raise ValueError("Invalid value for `working_timeout`, must be a value greater than or equal to `1`")

        self._working_timeout = working_timeout
