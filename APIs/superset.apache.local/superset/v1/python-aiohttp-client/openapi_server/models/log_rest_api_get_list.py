# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta42 import Meta42
from openapi_server import util


class LogRestApiGetList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, dashboard_id: int=None, dttm: datetime=None, duration_ms: int=None, _json: str=None, referrer: str=None, slice_id: int=None, user: Meta42=None, user_id: int=None):
        """LogRestApiGetList - a model defined in OpenAPI

        :param action: The action of this LogRestApiGetList.
        :param dashboard_id: The dashboard_id of this LogRestApiGetList.
        :param dttm: The dttm of this LogRestApiGetList.
        :param duration_ms: The duration_ms of this LogRestApiGetList.
        :param _json: The _json of this LogRestApiGetList.
        :param referrer: The referrer of this LogRestApiGetList.
        :param slice_id: The slice_id of this LogRestApiGetList.
        :param user: The user of this LogRestApiGetList.
        :param user_id: The user_id of this LogRestApiGetList.
        """
        self.openapi_types = {
            'action': str,
            'dashboard_id': int,
            'dttm': datetime,
            'duration_ms': int,
            '_json': str,
            'referrer': str,
            'slice_id': int,
            'user': Meta42,
            'user_id': int
        }

        self.attribute_map = {
            'action': 'action',
            'dashboard_id': 'dashboard_id',
            'dttm': 'dttm',
            'duration_ms': 'duration_ms',
            '_json': 'json',
            'referrer': 'referrer',
            'slice_id': 'slice_id',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._action = action
        self._dashboard_id = dashboard_id
        self._dttm = dttm
        self._duration_ms = duration_ms
        self.__json = _json
        self._referrer = referrer
        self._slice_id = slice_id
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogRestApiGetList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogRestApi.get_list of this LogRestApiGetList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LogRestApiGetList.


        :return: The action of this LogRestApiGetList.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LogRestApiGetList.


        :param action: The action of this LogRestApiGetList.
        :type action: str
        """
        if action is not None and len(action) > 512:
            raise ValueError("Invalid value for `action`, length must be less than or equal to `512`")

        self._action = action

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this LogRestApiGetList.


        :return: The dashboard_id of this LogRestApiGetList.
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this LogRestApiGetList.


        :param dashboard_id: The dashboard_id of this LogRestApiGetList.
        :type dashboard_id: int
        """

        self._dashboard_id = dashboard_id

    @property
    def dttm(self):
        """Gets the dttm of this LogRestApiGetList.


        :return: The dttm of this LogRestApiGetList.
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this LogRestApiGetList.


        :param dttm: The dttm of this LogRestApiGetList.
        :type dttm: datetime
        """

        self._dttm = dttm

    @property
    def duration_ms(self):
        """Gets the duration_ms of this LogRestApiGetList.


        :return: The duration_ms of this LogRestApiGetList.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this LogRestApiGetList.


        :param duration_ms: The duration_ms of this LogRestApiGetList.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def _json(self):
        """Gets the _json of this LogRestApiGetList.


        :return: The _json of this LogRestApiGetList.
        :rtype: str
        """
        return self.__json

    @_json.setter
    def _json(self, _json):
        """Sets the _json of this LogRestApiGetList.


        :param _json: The _json of this LogRestApiGetList.
        :type _json: str
        """

        self.__json = _json

    @property
    def referrer(self):
        """Gets the referrer of this LogRestApiGetList.


        :return: The referrer of this LogRestApiGetList.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this LogRestApiGetList.


        :param referrer: The referrer of this LogRestApiGetList.
        :type referrer: str
        """
        if referrer is not None and len(referrer) > 1024:
            raise ValueError("Invalid value for `referrer`, length must be less than or equal to `1024`")

        self._referrer = referrer

    @property
    def slice_id(self):
        """Gets the slice_id of this LogRestApiGetList.


        :return: The slice_id of this LogRestApiGetList.
        :rtype: int
        """
        return self._slice_id

    @slice_id.setter
    def slice_id(self, slice_id):
        """Sets the slice_id of this LogRestApiGetList.


        :param slice_id: The slice_id of this LogRestApiGetList.
        :type slice_id: int
        """

        self._slice_id = slice_id

    @property
    def user(self):
        """Gets the user of this LogRestApiGetList.


        :return: The user of this LogRestApiGetList.
        :rtype: Meta42
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LogRestApiGetList.


        :param user: The user of this LogRestApiGetList.
        :type user: Meta42
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this LogRestApiGetList.


        :return: The user_id of this LogRestApiGetList.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LogRestApiGetList.


        :param user_id: The user_id of this LogRestApiGetList.
        :type user_id: int
        """

        self._user_id = user_id
