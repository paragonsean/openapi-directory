# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DashboardRestApiPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css: str=None, dashboard_title: str=None, json_metadata: str=None, owners: List[int]=None, position_json: str=None, published: bool=None, roles: List[int]=None, slug: str=None):
        """DashboardRestApiPost - a model defined in OpenAPI

        :param css: The css of this DashboardRestApiPost.
        :param dashboard_title: The dashboard_title of this DashboardRestApiPost.
        :param json_metadata: The json_metadata of this DashboardRestApiPost.
        :param owners: The owners of this DashboardRestApiPost.
        :param position_json: The position_json of this DashboardRestApiPost.
        :param published: The published of this DashboardRestApiPost.
        :param roles: The roles of this DashboardRestApiPost.
        :param slug: The slug of this DashboardRestApiPost.
        """
        self.openapi_types = {
            'css': str,
            'dashboard_title': str,
            'json_metadata': str,
            'owners': List[int],
            'position_json': str,
            'published': bool,
            'roles': List[int],
            'slug': str
        }

        self.attribute_map = {
            'css': 'css',
            'dashboard_title': 'dashboard_title',
            'json_metadata': 'json_metadata',
            'owners': 'owners',
            'position_json': 'position_json',
            'published': 'published',
            'roles': 'roles',
            'slug': 'slug'
        }

        self._css = css
        self._dashboard_title = dashboard_title
        self._json_metadata = json_metadata
        self._owners = owners
        self._position_json = position_json
        self._published = published
        self._roles = roles
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardRestApiPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardRestApi.post of this DashboardRestApiPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self):
        """Gets the css of this DashboardRestApiPost.


        :return: The css of this DashboardRestApiPost.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this DashboardRestApiPost.


        :param css: The css of this DashboardRestApiPost.
        :type css: str
        """

        self._css = css

    @property
    def dashboard_title(self):
        """Gets the dashboard_title of this DashboardRestApiPost.

        A title for the dashboard.

        :return: The dashboard_title of this DashboardRestApiPost.
        :rtype: str
        """
        return self._dashboard_title

    @dashboard_title.setter
    def dashboard_title(self, dashboard_title):
        """Sets the dashboard_title of this DashboardRestApiPost.

        A title for the dashboard.

        :param dashboard_title: The dashboard_title of this DashboardRestApiPost.
        :type dashboard_title: str
        """
        if dashboard_title is not None and len(dashboard_title) > 500:
            raise ValueError("Invalid value for `dashboard_title`, length must be less than or equal to `500`")
        if dashboard_title is not None and len(dashboard_title) < 0:
            raise ValueError("Invalid value for `dashboard_title`, length must be greater than or equal to `0`")

        self._dashboard_title = dashboard_title

    @property
    def json_metadata(self):
        """Gets the json_metadata of this DashboardRestApiPost.

        This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.

        :return: The json_metadata of this DashboardRestApiPost.
        :rtype: str
        """
        return self._json_metadata

    @json_metadata.setter
    def json_metadata(self, json_metadata):
        """Sets the json_metadata of this DashboardRestApiPost.

        This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.

        :param json_metadata: The json_metadata of this DashboardRestApiPost.
        :type json_metadata: str
        """

        self._json_metadata = json_metadata

    @property
    def owners(self):
        """Gets the owners of this DashboardRestApiPost.


        :return: The owners of this DashboardRestApiPost.
        :rtype: List[int]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DashboardRestApiPost.


        :param owners: The owners of this DashboardRestApiPost.
        :type owners: List[int]
        """

        self._owners = owners

    @property
    def position_json(self):
        """Gets the position_json of this DashboardRestApiPost.

        This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view

        :return: The position_json of this DashboardRestApiPost.
        :rtype: str
        """
        return self._position_json

    @position_json.setter
    def position_json(self, position_json):
        """Sets the position_json of this DashboardRestApiPost.

        This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view

        :param position_json: The position_json of this DashboardRestApiPost.
        :type position_json: str
        """

        self._position_json = position_json

    @property
    def published(self):
        """Gets the published of this DashboardRestApiPost.

        Determines whether or not this dashboard is visible in the list of all dashboards.

        :return: The published of this DashboardRestApiPost.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this DashboardRestApiPost.

        Determines whether or not this dashboard is visible in the list of all dashboards.

        :param published: The published of this DashboardRestApiPost.
        :type published: bool
        """

        self._published = published

    @property
    def roles(self):
        """Gets the roles of this DashboardRestApiPost.


        :return: The roles of this DashboardRestApiPost.
        :rtype: List[int]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this DashboardRestApiPost.


        :param roles: The roles of this DashboardRestApiPost.
        :type roles: List[int]
        """

        self._roles = roles

    @property
    def slug(self):
        """Gets the slug of this DashboardRestApiPost.

        Unique identifying part for the web address of the dashboard.

        :return: The slug of this DashboardRestApiPost.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DashboardRestApiPost.

        Unique identifying part for the web address of the dashboard.

        :param slug: The slug of this DashboardRestApiPost.
        :type slug: str
        """
        if slug is not None and len(slug) > 255:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `255`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")

        self._slug = slug
