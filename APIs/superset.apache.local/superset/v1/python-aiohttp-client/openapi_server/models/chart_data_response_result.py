# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataResponseResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_data: List[Dict[str, str]]=None, applied_filters: List[object]=None, cache_key: str=None, cache_timeout: int=None, cached_dttm: str=None, data: List[object]=None, error: str=None, is_cached: bool=None, query: str=None, rejected_filters: List[object]=None, rowcount: int=None, stacktrace: str=None, status: str=None):
        """ChartDataResponseResult - a model defined in OpenAPI

        :param annotation_data: The annotation_data of this ChartDataResponseResult.
        :param applied_filters: The applied_filters of this ChartDataResponseResult.
        :param cache_key: The cache_key of this ChartDataResponseResult.
        :param cache_timeout: The cache_timeout of this ChartDataResponseResult.
        :param cached_dttm: The cached_dttm of this ChartDataResponseResult.
        :param data: The data of this ChartDataResponseResult.
        :param error: The error of this ChartDataResponseResult.
        :param is_cached: The is_cached of this ChartDataResponseResult.
        :param query: The query of this ChartDataResponseResult.
        :param rejected_filters: The rejected_filters of this ChartDataResponseResult.
        :param rowcount: The rowcount of this ChartDataResponseResult.
        :param stacktrace: The stacktrace of this ChartDataResponseResult.
        :param status: The status of this ChartDataResponseResult.
        """
        self.openapi_types = {
            'annotation_data': List[Dict[str, str]],
            'applied_filters': List[object],
            'cache_key': str,
            'cache_timeout': int,
            'cached_dttm': str,
            'data': List[object],
            'error': str,
            'is_cached': bool,
            'query': str,
            'rejected_filters': List[object],
            'rowcount': int,
            'stacktrace': str,
            'status': str
        }

        self.attribute_map = {
            'annotation_data': 'annotation_data',
            'applied_filters': 'applied_filters',
            'cache_key': 'cache_key',
            'cache_timeout': 'cache_timeout',
            'cached_dttm': 'cached_dttm',
            'data': 'data',
            'error': 'error',
            'is_cached': 'is_cached',
            'query': 'query',
            'rejected_filters': 'rejected_filters',
            'rowcount': 'rowcount',
            'stacktrace': 'stacktrace',
            'status': 'status'
        }

        self._annotation_data = annotation_data
        self._applied_filters = applied_filters
        self._cache_key = cache_key
        self._cache_timeout = cache_timeout
        self._cached_dttm = cached_dttm
        self._data = data
        self._error = error
        self._is_cached = is_cached
        self._query = query
        self._rejected_filters = rejected_filters
        self._rowcount = rowcount
        self._stacktrace = stacktrace
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataResponseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataResponseResult of this ChartDataResponseResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_data(self):
        """Gets the annotation_data of this ChartDataResponseResult.

        All requested annotation data

        :return: The annotation_data of this ChartDataResponseResult.
        :rtype: List[Dict[str, str]]
        """
        return self._annotation_data

    @annotation_data.setter
    def annotation_data(self, annotation_data):
        """Sets the annotation_data of this ChartDataResponseResult.

        All requested annotation data

        :param annotation_data: The annotation_data of this ChartDataResponseResult.
        :type annotation_data: List[Dict[str, str]]
        """

        self._annotation_data = annotation_data

    @property
    def applied_filters(self):
        """Gets the applied_filters of this ChartDataResponseResult.

        A list with applied filters

        :return: The applied_filters of this ChartDataResponseResult.
        :rtype: List[object]
        """
        return self._applied_filters

    @applied_filters.setter
    def applied_filters(self, applied_filters):
        """Sets the applied_filters of this ChartDataResponseResult.

        A list with applied filters

        :param applied_filters: The applied_filters of this ChartDataResponseResult.
        :type applied_filters: List[object]
        """

        self._applied_filters = applied_filters

    @property
    def cache_key(self):
        """Gets the cache_key of this ChartDataResponseResult.

        Unique cache key for query object

        :return: The cache_key of this ChartDataResponseResult.
        :rtype: str
        """
        return self._cache_key

    @cache_key.setter
    def cache_key(self, cache_key):
        """Sets the cache_key of this ChartDataResponseResult.

        Unique cache key for query object

        :param cache_key: The cache_key of this ChartDataResponseResult.
        :type cache_key: str
        """
        if cache_key is None:
            raise ValueError("Invalid value for `cache_key`, must not be `None`")

        self._cache_key = cache_key

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this ChartDataResponseResult.

        Cache timeout in following order: custom timeout, datasource timeout, default config timeout.

        :return: The cache_timeout of this ChartDataResponseResult.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this ChartDataResponseResult.

        Cache timeout in following order: custom timeout, datasource timeout, default config timeout.

        :param cache_timeout: The cache_timeout of this ChartDataResponseResult.
        :type cache_timeout: int
        """
        if cache_timeout is None:
            raise ValueError("Invalid value for `cache_timeout`, must not be `None`")

        self._cache_timeout = cache_timeout

    @property
    def cached_dttm(self):
        """Gets the cached_dttm of this ChartDataResponseResult.

        Cache timestamp

        :return: The cached_dttm of this ChartDataResponseResult.
        :rtype: str
        """
        return self._cached_dttm

    @cached_dttm.setter
    def cached_dttm(self, cached_dttm):
        """Sets the cached_dttm of this ChartDataResponseResult.

        Cache timestamp

        :param cached_dttm: The cached_dttm of this ChartDataResponseResult.
        :type cached_dttm: str
        """
        if cached_dttm is None:
            raise ValueError("Invalid value for `cached_dttm`, must not be `None`")

        self._cached_dttm = cached_dttm

    @property
    def data(self):
        """Gets the data of this ChartDataResponseResult.

        A list with results

        :return: The data of this ChartDataResponseResult.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ChartDataResponseResult.

        A list with results

        :param data: The data of this ChartDataResponseResult.
        :type data: List[object]
        """

        self._data = data

    @property
    def error(self):
        """Gets the error of this ChartDataResponseResult.

        Error

        :return: The error of this ChartDataResponseResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ChartDataResponseResult.

        Error

        :param error: The error of this ChartDataResponseResult.
        :type error: str
        """

        self._error = error

    @property
    def is_cached(self):
        """Gets the is_cached of this ChartDataResponseResult.

        Is the result cached

        :return: The is_cached of this ChartDataResponseResult.
        :rtype: bool
        """
        return self._is_cached

    @is_cached.setter
    def is_cached(self, is_cached):
        """Sets the is_cached of this ChartDataResponseResult.

        Is the result cached

        :param is_cached: The is_cached of this ChartDataResponseResult.
        :type is_cached: bool
        """
        if is_cached is None:
            raise ValueError("Invalid value for `is_cached`, must not be `None`")

        self._is_cached = is_cached

    @property
    def query(self):
        """Gets the query of this ChartDataResponseResult.

        The executed query statement

        :return: The query of this ChartDataResponseResult.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ChartDataResponseResult.

        The executed query statement

        :param query: The query of this ChartDataResponseResult.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def rejected_filters(self):
        """Gets the rejected_filters of this ChartDataResponseResult.

        A list with rejected filters

        :return: The rejected_filters of this ChartDataResponseResult.
        :rtype: List[object]
        """
        return self._rejected_filters

    @rejected_filters.setter
    def rejected_filters(self, rejected_filters):
        """Sets the rejected_filters of this ChartDataResponseResult.

        A list with rejected filters

        :param rejected_filters: The rejected_filters of this ChartDataResponseResult.
        :type rejected_filters: List[object]
        """

        self._rejected_filters = rejected_filters

    @property
    def rowcount(self):
        """Gets the rowcount of this ChartDataResponseResult.

        Amount of rows in result set

        :return: The rowcount of this ChartDataResponseResult.
        :rtype: int
        """
        return self._rowcount

    @rowcount.setter
    def rowcount(self, rowcount):
        """Sets the rowcount of this ChartDataResponseResult.

        Amount of rows in result set

        :param rowcount: The rowcount of this ChartDataResponseResult.
        :type rowcount: int
        """

        self._rowcount = rowcount

    @property
    def stacktrace(self):
        """Gets the stacktrace of this ChartDataResponseResult.


        :return: The stacktrace of this ChartDataResponseResult.
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this ChartDataResponseResult.


        :param stacktrace: The stacktrace of this ChartDataResponseResult.
        :type stacktrace: str
        """

        self._stacktrace = stacktrace

    @property
    def status(self):
        """Gets the status of this ChartDataResponseResult.

        Status of the query

        :return: The status of this ChartDataResponseResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChartDataResponseResult.

        Status of the query

        :param status: The status of this ChartDataResponseResult.
        :type status: str
        """
        allowed_values = ["stopped", "failed", "pending", "running", "scheduled", "success", "timed_out"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
