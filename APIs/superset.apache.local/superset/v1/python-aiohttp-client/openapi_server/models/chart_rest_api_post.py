# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartRestApiPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_timeout: int=None, dashboards: List[int]=None, datasource_id: int=None, datasource_name: str=None, datasource_type: str=None, description: str=None, owners: List[int]=None, params: str=None, query_context: str=None, slice_name: str=None, viz_type: str=None):
        """ChartRestApiPost - a model defined in OpenAPI

        :param cache_timeout: The cache_timeout of this ChartRestApiPost.
        :param dashboards: The dashboards of this ChartRestApiPost.
        :param datasource_id: The datasource_id of this ChartRestApiPost.
        :param datasource_name: The datasource_name of this ChartRestApiPost.
        :param datasource_type: The datasource_type of this ChartRestApiPost.
        :param description: The description of this ChartRestApiPost.
        :param owners: The owners of this ChartRestApiPost.
        :param params: The params of this ChartRestApiPost.
        :param query_context: The query_context of this ChartRestApiPost.
        :param slice_name: The slice_name of this ChartRestApiPost.
        :param viz_type: The viz_type of this ChartRestApiPost.
        """
        self.openapi_types = {
            'cache_timeout': int,
            'dashboards': List[int],
            'datasource_id': int,
            'datasource_name': str,
            'datasource_type': str,
            'description': str,
            'owners': List[int],
            'params': str,
            'query_context': str,
            'slice_name': str,
            'viz_type': str
        }

        self.attribute_map = {
            'cache_timeout': 'cache_timeout',
            'dashboards': 'dashboards',
            'datasource_id': 'datasource_id',
            'datasource_name': 'datasource_name',
            'datasource_type': 'datasource_type',
            'description': 'description',
            'owners': 'owners',
            'params': 'params',
            'query_context': 'query_context',
            'slice_name': 'slice_name',
            'viz_type': 'viz_type'
        }

        self._cache_timeout = cache_timeout
        self._dashboards = dashboards
        self._datasource_id = datasource_id
        self._datasource_name = datasource_name
        self._datasource_type = datasource_type
        self._description = description
        self._owners = owners
        self._params = params
        self._query_context = query_context
        self._slice_name = slice_name
        self._viz_type = viz_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartRestApiPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartRestApi.post of this ChartRestApiPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this ChartRestApiPost.

        Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.

        :return: The cache_timeout of this ChartRestApiPost.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this ChartRestApiPost.

        Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.

        :param cache_timeout: The cache_timeout of this ChartRestApiPost.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def dashboards(self):
        """Gets the dashboards of this ChartRestApiPost.


        :return: The dashboards of this ChartRestApiPost.
        :rtype: List[int]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this ChartRestApiPost.


        :param dashboards: The dashboards of this ChartRestApiPost.
        :type dashboards: List[int]
        """

        self._dashboards = dashboards

    @property
    def datasource_id(self):
        """Gets the datasource_id of this ChartRestApiPost.

        The id of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_id` and `datasource_type`.

        :return: The datasource_id of this ChartRestApiPost.
        :rtype: int
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """Sets the datasource_id of this ChartRestApiPost.

        The id of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_id` and `datasource_type`.

        :param datasource_id: The datasource_id of this ChartRestApiPost.
        :type datasource_id: int
        """
        if datasource_id is None:
            raise ValueError("Invalid value for `datasource_id`, must not be `None`")

        self._datasource_id = datasource_id

    @property
    def datasource_name(self):
        """Gets the datasource_name of this ChartRestApiPost.

        The datasource name.

        :return: The datasource_name of this ChartRestApiPost.
        :rtype: str
        """
        return self._datasource_name

    @datasource_name.setter
    def datasource_name(self, datasource_name):
        """Sets the datasource_name of this ChartRestApiPost.

        The datasource name.

        :param datasource_name: The datasource_name of this ChartRestApiPost.
        :type datasource_name: str
        """

        self._datasource_name = datasource_name

    @property
    def datasource_type(self):
        """Gets the datasource_type of this ChartRestApiPost.

        The type of dataset/datasource identified on `datasource_id`.

        :return: The datasource_type of this ChartRestApiPost.
        :rtype: str
        """
        return self._datasource_type

    @datasource_type.setter
    def datasource_type(self, datasource_type):
        """Sets the datasource_type of this ChartRestApiPost.

        The type of dataset/datasource identified on `datasource_id`.

        :param datasource_type: The datasource_type of this ChartRestApiPost.
        :type datasource_type: str
        """
        allowed_values = ["druid", "table", "view"]  # noqa: E501
        if datasource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `datasource_type` ({0}), must be one of {1}"
                .format(datasource_type, allowed_values)
            )

        self._datasource_type = datasource_type

    @property
    def description(self):
        """Gets the description of this ChartRestApiPost.

        A description of the chart propose.

        :return: The description of this ChartRestApiPost.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChartRestApiPost.

        A description of the chart propose.

        :param description: The description of this ChartRestApiPost.
        :type description: str
        """

        self._description = description

    @property
    def owners(self):
        """Gets the owners of this ChartRestApiPost.


        :return: The owners of this ChartRestApiPost.
        :rtype: List[int]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ChartRestApiPost.


        :param owners: The owners of this ChartRestApiPost.
        :type owners: List[int]
        """

        self._owners = owners

    @property
    def params(self):
        """Gets the params of this ChartRestApiPost.

        Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.

        :return: The params of this ChartRestApiPost.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ChartRestApiPost.

        Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.

        :param params: The params of this ChartRestApiPost.
        :type params: str
        """

        self._params = params

    @property
    def query_context(self):
        """Gets the query_context of this ChartRestApiPost.

        The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.

        :return: The query_context of this ChartRestApiPost.
        :rtype: str
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this ChartRestApiPost.

        The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.

        :param query_context: The query_context of this ChartRestApiPost.
        :type query_context: str
        """

        self._query_context = query_context

    @property
    def slice_name(self):
        """Gets the slice_name of this ChartRestApiPost.

        The name of the chart.

        :return: The slice_name of this ChartRestApiPost.
        :rtype: str
        """
        return self._slice_name

    @slice_name.setter
    def slice_name(self, slice_name):
        """Sets the slice_name of this ChartRestApiPost.

        The name of the chart.

        :param slice_name: The slice_name of this ChartRestApiPost.
        :type slice_name: str
        """
        if slice_name is None:
            raise ValueError("Invalid value for `slice_name`, must not be `None`")
        if slice_name is not None and len(slice_name) > 250:
            raise ValueError("Invalid value for `slice_name`, length must be less than or equal to `250`")
        if slice_name is not None and len(slice_name) < 1:
            raise ValueError("Invalid value for `slice_name`, length must be greater than or equal to `1`")

        self._slice_name = slice_name

    @property
    def viz_type(self):
        """Gets the viz_type of this ChartRestApiPost.

        The type of chart visualization used.

        :return: The viz_type of this ChartRestApiPost.
        :rtype: str
        """
        return self._viz_type

    @viz_type.setter
    def viz_type(self, viz_type):
        """Sets the viz_type of this ChartRestApiPost.

        The type of chart visualization used.

        :param viz_type: The viz_type of this ChartRestApiPost.
        :type viz_type: str
        """
        if viz_type is not None and len(viz_type) > 250:
            raise ValueError("Invalid value for `viz_type`, length must be less than or equal to `250`")
        if viz_type is not None and len(viz_type) < 0:
            raise ValueError("Invalid value for `viz_type`, length must be greater than or equal to `0`")

        self._viz_type = viz_type
