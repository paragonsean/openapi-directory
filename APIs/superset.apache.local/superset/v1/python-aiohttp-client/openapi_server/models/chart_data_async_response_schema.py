# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataAsyncResponseSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, job_id: str=None, result_url: str=None, status: str=None, user_id: str=None):
        """ChartDataAsyncResponseSchema - a model defined in OpenAPI

        :param channel_id: The channel_id of this ChartDataAsyncResponseSchema.
        :param job_id: The job_id of this ChartDataAsyncResponseSchema.
        :param result_url: The result_url of this ChartDataAsyncResponseSchema.
        :param status: The status of this ChartDataAsyncResponseSchema.
        :param user_id: The user_id of this ChartDataAsyncResponseSchema.
        """
        self.openapi_types = {
            'channel_id': str,
            'job_id': str,
            'result_url': str,
            'status': str,
            'user_id': str
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'job_id': 'job_id',
            'result_url': 'result_url',
            'status': 'status',
            'user_id': 'user_id'
        }

        self._channel_id = channel_id
        self._job_id = job_id
        self._result_url = result_url
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataAsyncResponseSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataAsyncResponseSchema of this ChartDataAsyncResponseSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ChartDataAsyncResponseSchema.

        Unique session async channel ID

        :return: The channel_id of this ChartDataAsyncResponseSchema.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChartDataAsyncResponseSchema.

        Unique session async channel ID

        :param channel_id: The channel_id of this ChartDataAsyncResponseSchema.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def job_id(self):
        """Gets the job_id of this ChartDataAsyncResponseSchema.

        Unique async job ID

        :return: The job_id of this ChartDataAsyncResponseSchema.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ChartDataAsyncResponseSchema.

        Unique async job ID

        :param job_id: The job_id of this ChartDataAsyncResponseSchema.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def result_url(self):
        """Gets the result_url of this ChartDataAsyncResponseSchema.

        Unique result URL for fetching async query data

        :return: The result_url of this ChartDataAsyncResponseSchema.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """Sets the result_url of this ChartDataAsyncResponseSchema.

        Unique result URL for fetching async query data

        :param result_url: The result_url of this ChartDataAsyncResponseSchema.
        :type result_url: str
        """

        self._result_url = result_url

    @property
    def status(self):
        """Gets the status of this ChartDataAsyncResponseSchema.

        Status value for async job

        :return: The status of this ChartDataAsyncResponseSchema.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChartDataAsyncResponseSchema.

        Status value for async job

        :param status: The status of this ChartDataAsyncResponseSchema.
        :type status: str
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this ChartDataAsyncResponseSchema.

        Requesting user ID

        :return: The user_id of this ChartDataAsyncResponseSchema.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ChartDataAsyncResponseSchema.

        Requesting user ID

        :param user_id: The user_id of this ChartDataAsyncResponseSchema.
        :type user_id: str
        """

        self._user_id = user_id
