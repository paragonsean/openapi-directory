# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta6(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_endpoint: str=None, table_name: str=None):
        """Meta6 - a model defined in OpenAPI

        :param default_endpoint: The default_endpoint of this Meta6.
        :param table_name: The table_name of this Meta6.
        """
        self.openapi_types = {
            'default_endpoint': str,
            'table_name': str
        }

        self.attribute_map = {
            'default_endpoint': 'default_endpoint',
            'table_name': 'table_name'
        }

        self._default_endpoint = default_endpoint
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta6':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta6 of this Meta6.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_endpoint(self):
        """Gets the default_endpoint of this Meta6.


        :return: The default_endpoint of this Meta6.
        :rtype: str
        """
        return self._default_endpoint

    @default_endpoint.setter
    def default_endpoint(self, default_endpoint):
        """Sets the default_endpoint of this Meta6.


        :param default_endpoint: The default_endpoint of this Meta6.
        :type default_endpoint: str
        """

        self._default_endpoint = default_endpoint

    @property
    def table_name(self):
        """Gets the table_name of this Meta6.


        :return: The table_name of this Meta6.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this Meta6.


        :param table_name: The table_name of this Meta6.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 250:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `250`")

        self._table_name = table_name
