# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta2 import Meta2
from openapi_server import util


class AnnotationRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_dttm: datetime=None, id: int=None, json_metadata: str=None, layer: Meta2=None, long_descr: str=None, short_descr: str=None, start_dttm: datetime=None):
        """AnnotationRestApiGet - a model defined in OpenAPI

        :param end_dttm: The end_dttm of this AnnotationRestApiGet.
        :param id: The id of this AnnotationRestApiGet.
        :param json_metadata: The json_metadata of this AnnotationRestApiGet.
        :param layer: The layer of this AnnotationRestApiGet.
        :param long_descr: The long_descr of this AnnotationRestApiGet.
        :param short_descr: The short_descr of this AnnotationRestApiGet.
        :param start_dttm: The start_dttm of this AnnotationRestApiGet.
        """
        self.openapi_types = {
            'end_dttm': datetime,
            'id': int,
            'json_metadata': str,
            'layer': Meta2,
            'long_descr': str,
            'short_descr': str,
            'start_dttm': datetime
        }

        self.attribute_map = {
            'end_dttm': 'end_dttm',
            'id': 'id',
            'json_metadata': 'json_metadata',
            'layer': 'layer',
            'long_descr': 'long_descr',
            'short_descr': 'short_descr',
            'start_dttm': 'start_dttm'
        }

        self._end_dttm = end_dttm
        self._id = id
        self._json_metadata = json_metadata
        self._layer = layer
        self._long_descr = long_descr
        self._short_descr = short_descr
        self._start_dttm = start_dttm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationRestApi.get of this AnnotationRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_dttm(self):
        """Gets the end_dttm of this AnnotationRestApiGet.


        :return: The end_dttm of this AnnotationRestApiGet.
        :rtype: datetime
        """
        return self._end_dttm

    @end_dttm.setter
    def end_dttm(self, end_dttm):
        """Sets the end_dttm of this AnnotationRestApiGet.


        :param end_dttm: The end_dttm of this AnnotationRestApiGet.
        :type end_dttm: datetime
        """

        self._end_dttm = end_dttm

    @property
    def id(self):
        """Gets the id of this AnnotationRestApiGet.


        :return: The id of this AnnotationRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnnotationRestApiGet.


        :param id: The id of this AnnotationRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def json_metadata(self):
        """Gets the json_metadata of this AnnotationRestApiGet.


        :return: The json_metadata of this AnnotationRestApiGet.
        :rtype: str
        """
        return self._json_metadata

    @json_metadata.setter
    def json_metadata(self, json_metadata):
        """Sets the json_metadata of this AnnotationRestApiGet.


        :param json_metadata: The json_metadata of this AnnotationRestApiGet.
        :type json_metadata: str
        """

        self._json_metadata = json_metadata

    @property
    def layer(self):
        """Gets the layer of this AnnotationRestApiGet.


        :return: The layer of this AnnotationRestApiGet.
        :rtype: Meta2
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this AnnotationRestApiGet.


        :param layer: The layer of this AnnotationRestApiGet.
        :type layer: Meta2
        """
        if layer is None:
            raise ValueError("Invalid value for `layer`, must not be `None`")

        self._layer = layer

    @property
    def long_descr(self):
        """Gets the long_descr of this AnnotationRestApiGet.


        :return: The long_descr of this AnnotationRestApiGet.
        :rtype: str
        """
        return self._long_descr

    @long_descr.setter
    def long_descr(self, long_descr):
        """Sets the long_descr of this AnnotationRestApiGet.


        :param long_descr: The long_descr of this AnnotationRestApiGet.
        :type long_descr: str
        """

        self._long_descr = long_descr

    @property
    def short_descr(self):
        """Gets the short_descr of this AnnotationRestApiGet.


        :return: The short_descr of this AnnotationRestApiGet.
        :rtype: str
        """
        return self._short_descr

    @short_descr.setter
    def short_descr(self, short_descr):
        """Sets the short_descr of this AnnotationRestApiGet.


        :param short_descr: The short_descr of this AnnotationRestApiGet.
        :type short_descr: str
        """
        if short_descr is not None and len(short_descr) > 500:
            raise ValueError("Invalid value for `short_descr`, length must be less than or equal to `500`")

        self._short_descr = short_descr

    @property
    def start_dttm(self):
        """Gets the start_dttm of this AnnotationRestApiGet.


        :return: The start_dttm of this AnnotationRestApiGet.
        :rtype: datetime
        """
        return self._start_dttm

    @start_dttm.setter
    def start_dttm(self, start_dttm):
        """Sets the start_dttm of this AnnotationRestApiGet.


        :param start_dttm: The start_dttm of this AnnotationRestApiGet.
        :type start_dttm: datetime
        """

        self._start_dttm = start_dttm
