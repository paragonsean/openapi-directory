# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartCacheScreenshotResponseSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_key: str=None, chart_url: str=None, image_url: str=None):
        """ChartCacheScreenshotResponseSchema - a model defined in OpenAPI

        :param cache_key: The cache_key of this ChartCacheScreenshotResponseSchema.
        :param chart_url: The chart_url of this ChartCacheScreenshotResponseSchema.
        :param image_url: The image_url of this ChartCacheScreenshotResponseSchema.
        """
        self.openapi_types = {
            'cache_key': str,
            'chart_url': str,
            'image_url': str
        }

        self.attribute_map = {
            'cache_key': 'cache_key',
            'chart_url': 'chart_url',
            'image_url': 'image_url'
        }

        self._cache_key = cache_key
        self._chart_url = chart_url
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartCacheScreenshotResponseSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartCacheScreenshotResponseSchema of this ChartCacheScreenshotResponseSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_key(self):
        """Gets the cache_key of this ChartCacheScreenshotResponseSchema.

        The cache key

        :return: The cache_key of this ChartCacheScreenshotResponseSchema.
        :rtype: str
        """
        return self._cache_key

    @cache_key.setter
    def cache_key(self, cache_key):
        """Sets the cache_key of this ChartCacheScreenshotResponseSchema.

        The cache key

        :param cache_key: The cache_key of this ChartCacheScreenshotResponseSchema.
        :type cache_key: str
        """

        self._cache_key = cache_key

    @property
    def chart_url(self):
        """Gets the chart_url of this ChartCacheScreenshotResponseSchema.

        The url to render the chart

        :return: The chart_url of this ChartCacheScreenshotResponseSchema.
        :rtype: str
        """
        return self._chart_url

    @chart_url.setter
    def chart_url(self, chart_url):
        """Sets the chart_url of this ChartCacheScreenshotResponseSchema.

        The url to render the chart

        :param chart_url: The chart_url of this ChartCacheScreenshotResponseSchema.
        :type chart_url: str
        """

        self._chart_url = chart_url

    @property
    def image_url(self):
        """Gets the image_url of this ChartCacheScreenshotResponseSchema.

        The url to fetch the screenshot

        :return: The image_url of this ChartCacheScreenshotResponseSchema.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ChartCacheScreenshotResponseSchema.

        The url to fetch the screenshot

        :param image_url: The image_url of this ChartCacheScreenshotResponseSchema.
        :type image_url: str
        """

        self._image_url = image_url
