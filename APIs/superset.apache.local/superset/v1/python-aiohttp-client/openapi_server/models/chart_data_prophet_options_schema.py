# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataProphetOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_interval: float=None, monthly_seasonality: object=None, periods: int=None, time_grain: str=None, weekly_seasonality: object=None, yearly_seasonality: object=None):
        """ChartDataProphetOptionsSchema - a model defined in OpenAPI

        :param confidence_interval: The confidence_interval of this ChartDataProphetOptionsSchema.
        :param monthly_seasonality: The monthly_seasonality of this ChartDataProphetOptionsSchema.
        :param periods: The periods of this ChartDataProphetOptionsSchema.
        :param time_grain: The time_grain of this ChartDataProphetOptionsSchema.
        :param weekly_seasonality: The weekly_seasonality of this ChartDataProphetOptionsSchema.
        :param yearly_seasonality: The yearly_seasonality of this ChartDataProphetOptionsSchema.
        """
        self.openapi_types = {
            'confidence_interval': float,
            'monthly_seasonality': object,
            'periods': int,
            'time_grain': str,
            'weekly_seasonality': object,
            'yearly_seasonality': object
        }

        self.attribute_map = {
            'confidence_interval': 'confidence_interval',
            'monthly_seasonality': 'monthly_seasonality',
            'periods': 'periods',
            'time_grain': 'time_grain',
            'weekly_seasonality': 'weekly_seasonality',
            'yearly_seasonality': 'yearly_seasonality'
        }

        self._confidence_interval = confidence_interval
        self._monthly_seasonality = monthly_seasonality
        self._periods = periods
        self._time_grain = time_grain
        self._weekly_seasonality = weekly_seasonality
        self._yearly_seasonality = yearly_seasonality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataProphetOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataProphetOptionsSchema of this ChartDataProphetOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_interval(self):
        """Gets the confidence_interval of this ChartDataProphetOptionsSchema.

        Width of predicted confidence interval

        :return: The confidence_interval of this ChartDataProphetOptionsSchema.
        :rtype: float
        """
        return self._confidence_interval

    @confidence_interval.setter
    def confidence_interval(self, confidence_interval):
        """Sets the confidence_interval of this ChartDataProphetOptionsSchema.

        Width of predicted confidence interval

        :param confidence_interval: The confidence_interval of this ChartDataProphetOptionsSchema.
        :type confidence_interval: float
        """
        if confidence_interval is None:
            raise ValueError("Invalid value for `confidence_interval`, must not be `None`")
        if confidence_interval is not None and confidence_interval > 1:
            raise ValueError("Invalid value for `confidence_interval`, must be a value less than or equal to `1`")
        if confidence_interval is not None and confidence_interval < 0:
            raise ValueError("Invalid value for `confidence_interval`, must be a value greater than or equal to `0`")

        self._confidence_interval = confidence_interval

    @property
    def monthly_seasonality(self):
        """Gets the monthly_seasonality of this ChartDataProphetOptionsSchema.

        Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :return: The monthly_seasonality of this ChartDataProphetOptionsSchema.
        :rtype: object
        """
        return self._monthly_seasonality

    @monthly_seasonality.setter
    def monthly_seasonality(self, monthly_seasonality):
        """Sets the monthly_seasonality of this ChartDataProphetOptionsSchema.

        Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :param monthly_seasonality: The monthly_seasonality of this ChartDataProphetOptionsSchema.
        :type monthly_seasonality: object
        """

        self._monthly_seasonality = monthly_seasonality

    @property
    def periods(self):
        """Gets the periods of this ChartDataProphetOptionsSchema.


        :return: The periods of this ChartDataProphetOptionsSchema.
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this ChartDataProphetOptionsSchema.


        :param periods: The periods of this ChartDataProphetOptionsSchema.
        :type periods: int
        """
        if periods is None:
            raise ValueError("Invalid value for `periods`, must not be `None`")

        self._periods = periods

    @property
    def time_grain(self):
        """Gets the time_grain of this ChartDataProphetOptionsSchema.

        Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.

        :return: The time_grain of this ChartDataProphetOptionsSchema.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this ChartDataProphetOptionsSchema.

        Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.

        :param time_grain: The time_grain of this ChartDataProphetOptionsSchema.
        :type time_grain: str
        """
        allowed_values = ["PT1S", "PT5S", "PT30S", "PT1M", "PT5M", "PT10M", "PT15M", "PT0.5H", "PT1H", "PT6H", "P1D", "P1W", "P1M", "P0.25Y", "P1Y", "1969-12-28T00:00:00Z/P1W", "1969-12-29T00:00:00Z/P1W", "P1W/1970-01-03T00:00:00Z", "P1W/1970-01-04T00:00:00Z"]  # noqa: E501
        if time_grain not in allowed_values:
            raise ValueError(
                "Invalid value for `time_grain` ({0}), must be one of {1}"
                .format(time_grain, allowed_values)
            )

        self._time_grain = time_grain

    @property
    def weekly_seasonality(self):
        """Gets the weekly_seasonality of this ChartDataProphetOptionsSchema.

        Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :return: The weekly_seasonality of this ChartDataProphetOptionsSchema.
        :rtype: object
        """
        return self._weekly_seasonality

    @weekly_seasonality.setter
    def weekly_seasonality(self, weekly_seasonality):
        """Sets the weekly_seasonality of this ChartDataProphetOptionsSchema.

        Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :param weekly_seasonality: The weekly_seasonality of this ChartDataProphetOptionsSchema.
        :type weekly_seasonality: object
        """

        self._weekly_seasonality = weekly_seasonality

    @property
    def yearly_seasonality(self):
        """Gets the yearly_seasonality of this ChartDataProphetOptionsSchema.

        Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :return: The yearly_seasonality of this ChartDataProphetOptionsSchema.
        :rtype: object
        """
        return self._yearly_seasonality

    @yearly_seasonality.setter
    def yearly_seasonality(self, yearly_seasonality):
        """Sets the yearly_seasonality of this ChartDataProphetOptionsSchema.

        Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.

        :param yearly_seasonality: The yearly_seasonality of this ChartDataProphetOptionsSchema.
        :type yearly_seasonality: object
        """

        self._yearly_seasonality = yearly_seasonality
