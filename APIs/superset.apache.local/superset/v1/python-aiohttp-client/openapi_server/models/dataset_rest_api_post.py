# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetRestApiPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: int=None, owners: List[int]=None, _schema: str=None, table_name: str=None):
        """DatasetRestApiPost - a model defined in OpenAPI

        :param database: The database of this DatasetRestApiPost.
        :param owners: The owners of this DatasetRestApiPost.
        :param _schema: The _schema of this DatasetRestApiPost.
        :param table_name: The table_name of this DatasetRestApiPost.
        """
        self.openapi_types = {
            'database': int,
            'owners': List[int],
            '_schema': str,
            'table_name': str
        }

        self.attribute_map = {
            'database': 'database',
            'owners': 'owners',
            '_schema': 'schema',
            'table_name': 'table_name'
        }

        self._database = database
        self._owners = owners
        self.__schema = _schema
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetRestApiPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetRestApi.post of this DatasetRestApiPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this DatasetRestApiPost.


        :return: The database of this DatasetRestApiPost.
        :rtype: int
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DatasetRestApiPost.


        :param database: The database of this DatasetRestApiPost.
        :type database: int
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def owners(self):
        """Gets the owners of this DatasetRestApiPost.


        :return: The owners of this DatasetRestApiPost.
        :rtype: List[int]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DatasetRestApiPost.


        :param owners: The owners of this DatasetRestApiPost.
        :type owners: List[int]
        """

        self._owners = owners

    @property
    def _schema(self):
        """Gets the _schema of this DatasetRestApiPost.


        :return: The _schema of this DatasetRestApiPost.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DatasetRestApiPost.


        :param _schema: The _schema of this DatasetRestApiPost.
        :type _schema: str
        """
        if _schema is not None and len(_schema) > 250:
            raise ValueError("Invalid value for `_schema`, length must be less than or equal to `250`")
        if _schema is not None and len(_schema) < 0:
            raise ValueError("Invalid value for `_schema`, length must be greater than or equal to `0`")

        self.__schema = _schema

    @property
    def table_name(self):
        """Gets the table_name of this DatasetRestApiPost.


        :return: The table_name of this DatasetRestApiPost.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DatasetRestApiPost.


        :param table_name: The table_name of this DatasetRestApiPost.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 250:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `250`")
        if table_name is not None and len(table_name) < 1:
            raise ValueError("Invalid value for `table_name`, length must be greater than or equal to `1`")

        self._table_name = table_name
