# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database import Database
from openapi_server import util


class DashboardDatasetSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_timeout: int=None, column_formats: object=None, column_types: List[int]=None, columns: List[object]=None, database: Database=None, datasource_name: str=None, default_endpoint: str=None, edit_url: str=None, fetch_values_predicate: str=None, filter_select: bool=None, filter_select_enabled: bool=None, granularity_sqla: List[List[str]]=None, health_check_message: str=None, id: int=None, is_sqllab_view: bool=None, main_dttm_col: str=None, metrics: List[object]=None, name: str=None, offset: int=None, order_by_choices: List[List[str]]=None, owners: List[int]=None, params: str=None, perm: str=None, _schema: str=None, select_star: str=None, sql: str=None, table_name: str=None, template_params: str=None, time_grain_sqla: List[List[str]]=None, type: str=None, uid: str=None, verbose_map: Dict[str, str]=None):
        """DashboardDatasetSchema - a model defined in OpenAPI

        :param cache_timeout: The cache_timeout of this DashboardDatasetSchema.
        :param column_formats: The column_formats of this DashboardDatasetSchema.
        :param column_types: The column_types of this DashboardDatasetSchema.
        :param columns: The columns of this DashboardDatasetSchema.
        :param database: The database of this DashboardDatasetSchema.
        :param datasource_name: The datasource_name of this DashboardDatasetSchema.
        :param default_endpoint: The default_endpoint of this DashboardDatasetSchema.
        :param edit_url: The edit_url of this DashboardDatasetSchema.
        :param fetch_values_predicate: The fetch_values_predicate of this DashboardDatasetSchema.
        :param filter_select: The filter_select of this DashboardDatasetSchema.
        :param filter_select_enabled: The filter_select_enabled of this DashboardDatasetSchema.
        :param granularity_sqla: The granularity_sqla of this DashboardDatasetSchema.
        :param health_check_message: The health_check_message of this DashboardDatasetSchema.
        :param id: The id of this DashboardDatasetSchema.
        :param is_sqllab_view: The is_sqllab_view of this DashboardDatasetSchema.
        :param main_dttm_col: The main_dttm_col of this DashboardDatasetSchema.
        :param metrics: The metrics of this DashboardDatasetSchema.
        :param name: The name of this DashboardDatasetSchema.
        :param offset: The offset of this DashboardDatasetSchema.
        :param order_by_choices: The order_by_choices of this DashboardDatasetSchema.
        :param owners: The owners of this DashboardDatasetSchema.
        :param params: The params of this DashboardDatasetSchema.
        :param perm: The perm of this DashboardDatasetSchema.
        :param _schema: The _schema of this DashboardDatasetSchema.
        :param select_star: The select_star of this DashboardDatasetSchema.
        :param sql: The sql of this DashboardDatasetSchema.
        :param table_name: The table_name of this DashboardDatasetSchema.
        :param template_params: The template_params of this DashboardDatasetSchema.
        :param time_grain_sqla: The time_grain_sqla of this DashboardDatasetSchema.
        :param type: The type of this DashboardDatasetSchema.
        :param uid: The uid of this DashboardDatasetSchema.
        :param verbose_map: The verbose_map of this DashboardDatasetSchema.
        """
        self.openapi_types = {
            'cache_timeout': int,
            'column_formats': object,
            'column_types': List[int],
            'columns': List[object],
            'database': Database,
            'datasource_name': str,
            'default_endpoint': str,
            'edit_url': str,
            'fetch_values_predicate': str,
            'filter_select': bool,
            'filter_select_enabled': bool,
            'granularity_sqla': List[List[str]],
            'health_check_message': str,
            'id': int,
            'is_sqllab_view': bool,
            'main_dttm_col': str,
            'metrics': List[object],
            'name': str,
            'offset': int,
            'order_by_choices': List[List[str]],
            'owners': List[int],
            'params': str,
            'perm': str,
            '_schema': str,
            'select_star': str,
            'sql': str,
            'table_name': str,
            'template_params': str,
            'time_grain_sqla': List[List[str]],
            'type': str,
            'uid': str,
            'verbose_map': Dict[str, str]
        }

        self.attribute_map = {
            'cache_timeout': 'cache_timeout',
            'column_formats': 'column_formats',
            'column_types': 'column_types',
            'columns': 'columns',
            'database': 'database',
            'datasource_name': 'datasource_name',
            'default_endpoint': 'default_endpoint',
            'edit_url': 'edit_url',
            'fetch_values_predicate': 'fetch_values_predicate',
            'filter_select': 'filter_select',
            'filter_select_enabled': 'filter_select_enabled',
            'granularity_sqla': 'granularity_sqla',
            'health_check_message': 'health_check_message',
            'id': 'id',
            'is_sqllab_view': 'is_sqllab_view',
            'main_dttm_col': 'main_dttm_col',
            'metrics': 'metrics',
            'name': 'name',
            'offset': 'offset',
            'order_by_choices': 'order_by_choices',
            'owners': 'owners',
            'params': 'params',
            'perm': 'perm',
            '_schema': 'schema',
            'select_star': 'select_star',
            'sql': 'sql',
            'table_name': 'table_name',
            'template_params': 'template_params',
            'time_grain_sqla': 'time_grain_sqla',
            'type': 'type',
            'uid': 'uid',
            'verbose_map': 'verbose_map'
        }

        self._cache_timeout = cache_timeout
        self._column_formats = column_formats
        self._column_types = column_types
        self._columns = columns
        self._database = database
        self._datasource_name = datasource_name
        self._default_endpoint = default_endpoint
        self._edit_url = edit_url
        self._fetch_values_predicate = fetch_values_predicate
        self._filter_select = filter_select
        self._filter_select_enabled = filter_select_enabled
        self._granularity_sqla = granularity_sqla
        self._health_check_message = health_check_message
        self._id = id
        self._is_sqllab_view = is_sqllab_view
        self._main_dttm_col = main_dttm_col
        self._metrics = metrics
        self._name = name
        self._offset = offset
        self._order_by_choices = order_by_choices
        self._owners = owners
        self._params = params
        self._perm = perm
        self.__schema = _schema
        self._select_star = select_star
        self._sql = sql
        self._table_name = table_name
        self._template_params = template_params
        self._time_grain_sqla = time_grain_sqla
        self._type = type
        self._uid = uid
        self._verbose_map = verbose_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardDatasetSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardDatasetSchema of this DashboardDatasetSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this DashboardDatasetSchema.


        :return: The cache_timeout of this DashboardDatasetSchema.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this DashboardDatasetSchema.


        :param cache_timeout: The cache_timeout of this DashboardDatasetSchema.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def column_formats(self):
        """Gets the column_formats of this DashboardDatasetSchema.


        :return: The column_formats of this DashboardDatasetSchema.
        :rtype: object
        """
        return self._column_formats

    @column_formats.setter
    def column_formats(self, column_formats):
        """Sets the column_formats of this DashboardDatasetSchema.


        :param column_formats: The column_formats of this DashboardDatasetSchema.
        :type column_formats: object
        """

        self._column_formats = column_formats

    @property
    def column_types(self):
        """Gets the column_types of this DashboardDatasetSchema.


        :return: The column_types of this DashboardDatasetSchema.
        :rtype: List[int]
        """
        return self._column_types

    @column_types.setter
    def column_types(self, column_types):
        """Sets the column_types of this DashboardDatasetSchema.


        :param column_types: The column_types of this DashboardDatasetSchema.
        :type column_types: List[int]
        """

        self._column_types = column_types

    @property
    def columns(self):
        """Gets the columns of this DashboardDatasetSchema.


        :return: The columns of this DashboardDatasetSchema.
        :rtype: List[object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DashboardDatasetSchema.


        :param columns: The columns of this DashboardDatasetSchema.
        :type columns: List[object]
        """

        self._columns = columns

    @property
    def database(self):
        """Gets the database of this DashboardDatasetSchema.


        :return: The database of this DashboardDatasetSchema.
        :rtype: Database
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DashboardDatasetSchema.


        :param database: The database of this DashboardDatasetSchema.
        :type database: Database
        """

        self._database = database

    @property
    def datasource_name(self):
        """Gets the datasource_name of this DashboardDatasetSchema.


        :return: The datasource_name of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._datasource_name

    @datasource_name.setter
    def datasource_name(self, datasource_name):
        """Sets the datasource_name of this DashboardDatasetSchema.


        :param datasource_name: The datasource_name of this DashboardDatasetSchema.
        :type datasource_name: str
        """

        self._datasource_name = datasource_name

    @property
    def default_endpoint(self):
        """Gets the default_endpoint of this DashboardDatasetSchema.


        :return: The default_endpoint of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._default_endpoint

    @default_endpoint.setter
    def default_endpoint(self, default_endpoint):
        """Sets the default_endpoint of this DashboardDatasetSchema.


        :param default_endpoint: The default_endpoint of this DashboardDatasetSchema.
        :type default_endpoint: str
        """

        self._default_endpoint = default_endpoint

    @property
    def edit_url(self):
        """Gets the edit_url of this DashboardDatasetSchema.


        :return: The edit_url of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._edit_url

    @edit_url.setter
    def edit_url(self, edit_url):
        """Sets the edit_url of this DashboardDatasetSchema.


        :param edit_url: The edit_url of this DashboardDatasetSchema.
        :type edit_url: str
        """

        self._edit_url = edit_url

    @property
    def fetch_values_predicate(self):
        """Gets the fetch_values_predicate of this DashboardDatasetSchema.


        :return: The fetch_values_predicate of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._fetch_values_predicate

    @fetch_values_predicate.setter
    def fetch_values_predicate(self, fetch_values_predicate):
        """Sets the fetch_values_predicate of this DashboardDatasetSchema.


        :param fetch_values_predicate: The fetch_values_predicate of this DashboardDatasetSchema.
        :type fetch_values_predicate: str
        """

        self._fetch_values_predicate = fetch_values_predicate

    @property
    def filter_select(self):
        """Gets the filter_select of this DashboardDatasetSchema.


        :return: The filter_select of this DashboardDatasetSchema.
        :rtype: bool
        """
        return self._filter_select

    @filter_select.setter
    def filter_select(self, filter_select):
        """Sets the filter_select of this DashboardDatasetSchema.


        :param filter_select: The filter_select of this DashboardDatasetSchema.
        :type filter_select: bool
        """

        self._filter_select = filter_select

    @property
    def filter_select_enabled(self):
        """Gets the filter_select_enabled of this DashboardDatasetSchema.


        :return: The filter_select_enabled of this DashboardDatasetSchema.
        :rtype: bool
        """
        return self._filter_select_enabled

    @filter_select_enabled.setter
    def filter_select_enabled(self, filter_select_enabled):
        """Sets the filter_select_enabled of this DashboardDatasetSchema.


        :param filter_select_enabled: The filter_select_enabled of this DashboardDatasetSchema.
        :type filter_select_enabled: bool
        """

        self._filter_select_enabled = filter_select_enabled

    @property
    def granularity_sqla(self):
        """Gets the granularity_sqla of this DashboardDatasetSchema.


        :return: The granularity_sqla of this DashboardDatasetSchema.
        :rtype: List[List[str]]
        """
        return self._granularity_sqla

    @granularity_sqla.setter
    def granularity_sqla(self, granularity_sqla):
        """Sets the granularity_sqla of this DashboardDatasetSchema.


        :param granularity_sqla: The granularity_sqla of this DashboardDatasetSchema.
        :type granularity_sqla: List[List[str]]
        """

        self._granularity_sqla = granularity_sqla

    @property
    def health_check_message(self):
        """Gets the health_check_message of this DashboardDatasetSchema.


        :return: The health_check_message of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._health_check_message

    @health_check_message.setter
    def health_check_message(self, health_check_message):
        """Sets the health_check_message of this DashboardDatasetSchema.


        :param health_check_message: The health_check_message of this DashboardDatasetSchema.
        :type health_check_message: str
        """

        self._health_check_message = health_check_message

    @property
    def id(self):
        """Gets the id of this DashboardDatasetSchema.


        :return: The id of this DashboardDatasetSchema.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardDatasetSchema.


        :param id: The id of this DashboardDatasetSchema.
        :type id: int
        """

        self._id = id

    @property
    def is_sqllab_view(self):
        """Gets the is_sqllab_view of this DashboardDatasetSchema.


        :return: The is_sqllab_view of this DashboardDatasetSchema.
        :rtype: bool
        """
        return self._is_sqllab_view

    @is_sqllab_view.setter
    def is_sqllab_view(self, is_sqllab_view):
        """Sets the is_sqllab_view of this DashboardDatasetSchema.


        :param is_sqllab_view: The is_sqllab_view of this DashboardDatasetSchema.
        :type is_sqllab_view: bool
        """

        self._is_sqllab_view = is_sqllab_view

    @property
    def main_dttm_col(self):
        """Gets the main_dttm_col of this DashboardDatasetSchema.


        :return: The main_dttm_col of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._main_dttm_col

    @main_dttm_col.setter
    def main_dttm_col(self, main_dttm_col):
        """Sets the main_dttm_col of this DashboardDatasetSchema.


        :param main_dttm_col: The main_dttm_col of this DashboardDatasetSchema.
        :type main_dttm_col: str
        """

        self._main_dttm_col = main_dttm_col

    @property
    def metrics(self):
        """Gets the metrics of this DashboardDatasetSchema.


        :return: The metrics of this DashboardDatasetSchema.
        :rtype: List[object]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DashboardDatasetSchema.


        :param metrics: The metrics of this DashboardDatasetSchema.
        :type metrics: List[object]
        """

        self._metrics = metrics

    @property
    def name(self):
        """Gets the name of this DashboardDatasetSchema.


        :return: The name of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardDatasetSchema.


        :param name: The name of this DashboardDatasetSchema.
        :type name: str
        """

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this DashboardDatasetSchema.


        :return: The offset of this DashboardDatasetSchema.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DashboardDatasetSchema.


        :param offset: The offset of this DashboardDatasetSchema.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by_choices(self):
        """Gets the order_by_choices of this DashboardDatasetSchema.


        :return: The order_by_choices of this DashboardDatasetSchema.
        :rtype: List[List[str]]
        """
        return self._order_by_choices

    @order_by_choices.setter
    def order_by_choices(self, order_by_choices):
        """Sets the order_by_choices of this DashboardDatasetSchema.


        :param order_by_choices: The order_by_choices of this DashboardDatasetSchema.
        :type order_by_choices: List[List[str]]
        """

        self._order_by_choices = order_by_choices

    @property
    def owners(self):
        """Gets the owners of this DashboardDatasetSchema.


        :return: The owners of this DashboardDatasetSchema.
        :rtype: List[int]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DashboardDatasetSchema.


        :param owners: The owners of this DashboardDatasetSchema.
        :type owners: List[int]
        """

        self._owners = owners

    @property
    def params(self):
        """Gets the params of this DashboardDatasetSchema.


        :return: The params of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this DashboardDatasetSchema.


        :param params: The params of this DashboardDatasetSchema.
        :type params: str
        """

        self._params = params

    @property
    def perm(self):
        """Gets the perm of this DashboardDatasetSchema.


        :return: The perm of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._perm

    @perm.setter
    def perm(self, perm):
        """Sets the perm of this DashboardDatasetSchema.


        :param perm: The perm of this DashboardDatasetSchema.
        :type perm: str
        """

        self._perm = perm

    @property
    def _schema(self):
        """Gets the _schema of this DashboardDatasetSchema.


        :return: The _schema of this DashboardDatasetSchema.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DashboardDatasetSchema.


        :param _schema: The _schema of this DashboardDatasetSchema.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def select_star(self):
        """Gets the select_star of this DashboardDatasetSchema.


        :return: The select_star of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._select_star

    @select_star.setter
    def select_star(self, select_star):
        """Sets the select_star of this DashboardDatasetSchema.


        :param select_star: The select_star of this DashboardDatasetSchema.
        :type select_star: str
        """

        self._select_star = select_star

    @property
    def sql(self):
        """Gets the sql of this DashboardDatasetSchema.


        :return: The sql of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this DashboardDatasetSchema.


        :param sql: The sql of this DashboardDatasetSchema.
        :type sql: str
        """

        self._sql = sql

    @property
    def table_name(self):
        """Gets the table_name of this DashboardDatasetSchema.


        :return: The table_name of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DashboardDatasetSchema.


        :param table_name: The table_name of this DashboardDatasetSchema.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def template_params(self):
        """Gets the template_params of this DashboardDatasetSchema.


        :return: The template_params of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._template_params

    @template_params.setter
    def template_params(self, template_params):
        """Sets the template_params of this DashboardDatasetSchema.


        :param template_params: The template_params of this DashboardDatasetSchema.
        :type template_params: str
        """

        self._template_params = template_params

    @property
    def time_grain_sqla(self):
        """Gets the time_grain_sqla of this DashboardDatasetSchema.


        :return: The time_grain_sqla of this DashboardDatasetSchema.
        :rtype: List[List[str]]
        """
        return self._time_grain_sqla

    @time_grain_sqla.setter
    def time_grain_sqla(self, time_grain_sqla):
        """Sets the time_grain_sqla of this DashboardDatasetSchema.


        :param time_grain_sqla: The time_grain_sqla of this DashboardDatasetSchema.
        :type time_grain_sqla: List[List[str]]
        """

        self._time_grain_sqla = time_grain_sqla

    @property
    def type(self):
        """Gets the type of this DashboardDatasetSchema.


        :return: The type of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardDatasetSchema.


        :param type: The type of this DashboardDatasetSchema.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this DashboardDatasetSchema.


        :return: The uid of this DashboardDatasetSchema.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DashboardDatasetSchema.


        :param uid: The uid of this DashboardDatasetSchema.
        :type uid: str
        """

        self._uid = uid

    @property
    def verbose_map(self):
        """Gets the verbose_map of this DashboardDatasetSchema.


        :return: The verbose_map of this DashboardDatasetSchema.
        :rtype: Dict[str, str]
        """
        return self._verbose_map

    @verbose_map.setter
    def verbose_map(self, verbose_map):
        """Sets the verbose_map of this DashboardDatasetSchema.


        :param verbose_map: The verbose_map of this DashboardDatasetSchema.
        :type verbose_map: Dict[str, str]
        """

        self._verbose_map = verbose_map
