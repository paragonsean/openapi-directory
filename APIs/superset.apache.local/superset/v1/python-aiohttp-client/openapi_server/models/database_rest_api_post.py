# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseRestApiPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_csv_upload: bool=None, allow_ctas: bool=None, allow_cvas: bool=None, allow_dml: bool=None, allow_multi_schema_metadata_fetch: bool=None, allow_run_async: bool=None, cache_timeout: int=None, configuration_method: object=None, database_name: str=None, encrypted_extra: str=None, engine: str=None, expose_in_sqllab: bool=None, extra: str=None, force_ctas_schema: str=None, impersonate_user: bool=None, parameters: Dict[str, object]=None, server_cert: str=None, sqlalchemy_uri: str=None):
        """DatabaseRestApiPost - a model defined in OpenAPI

        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiPost.
        :param allow_ctas: The allow_ctas of this DatabaseRestApiPost.
        :param allow_cvas: The allow_cvas of this DatabaseRestApiPost.
        :param allow_dml: The allow_dml of this DatabaseRestApiPost.
        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiPost.
        :param allow_run_async: The allow_run_async of this DatabaseRestApiPost.
        :param cache_timeout: The cache_timeout of this DatabaseRestApiPost.
        :param configuration_method: The configuration_method of this DatabaseRestApiPost.
        :param database_name: The database_name of this DatabaseRestApiPost.
        :param encrypted_extra: The encrypted_extra of this DatabaseRestApiPost.
        :param engine: The engine of this DatabaseRestApiPost.
        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiPost.
        :param extra: The extra of this DatabaseRestApiPost.
        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiPost.
        :param impersonate_user: The impersonate_user of this DatabaseRestApiPost.
        :param parameters: The parameters of this DatabaseRestApiPost.
        :param server_cert: The server_cert of this DatabaseRestApiPost.
        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseRestApiPost.
        """
        self.openapi_types = {
            'allow_csv_upload': bool,
            'allow_ctas': bool,
            'allow_cvas': bool,
            'allow_dml': bool,
            'allow_multi_schema_metadata_fetch': bool,
            'allow_run_async': bool,
            'cache_timeout': int,
            'configuration_method': object,
            'database_name': str,
            'encrypted_extra': str,
            'engine': str,
            'expose_in_sqllab': bool,
            'extra': str,
            'force_ctas_schema': str,
            'impersonate_user': bool,
            'parameters': Dict[str, object],
            'server_cert': str,
            'sqlalchemy_uri': str
        }

        self.attribute_map = {
            'allow_csv_upload': 'allow_csv_upload',
            'allow_ctas': 'allow_ctas',
            'allow_cvas': 'allow_cvas',
            'allow_dml': 'allow_dml',
            'allow_multi_schema_metadata_fetch': 'allow_multi_schema_metadata_fetch',
            'allow_run_async': 'allow_run_async',
            'cache_timeout': 'cache_timeout',
            'configuration_method': 'configuration_method',
            'database_name': 'database_name',
            'encrypted_extra': 'encrypted_extra',
            'engine': 'engine',
            'expose_in_sqllab': 'expose_in_sqllab',
            'extra': 'extra',
            'force_ctas_schema': 'force_ctas_schema',
            'impersonate_user': 'impersonate_user',
            'parameters': 'parameters',
            'server_cert': 'server_cert',
            'sqlalchemy_uri': 'sqlalchemy_uri'
        }

        self._allow_csv_upload = allow_csv_upload
        self._allow_ctas = allow_ctas
        self._allow_cvas = allow_cvas
        self._allow_dml = allow_dml
        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch
        self._allow_run_async = allow_run_async
        self._cache_timeout = cache_timeout
        self._configuration_method = configuration_method
        self._database_name = database_name
        self._encrypted_extra = encrypted_extra
        self._engine = engine
        self._expose_in_sqllab = expose_in_sqllab
        self._extra = extra
        self._force_ctas_schema = force_ctas_schema
        self._impersonate_user = impersonate_user
        self._parameters = parameters
        self._server_cert = server_cert
        self._sqlalchemy_uri = sqlalchemy_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseRestApiPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseRestApi.post of this DatabaseRestApiPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_csv_upload(self):
        """Gets the allow_csv_upload of this DatabaseRestApiPost.

        Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.

        :return: The allow_csv_upload of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_csv_upload

    @allow_csv_upload.setter
    def allow_csv_upload(self, allow_csv_upload):
        """Sets the allow_csv_upload of this DatabaseRestApiPost.

        Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.

        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiPost.
        :type allow_csv_upload: bool
        """

        self._allow_csv_upload = allow_csv_upload

    @property
    def allow_ctas(self):
        """Gets the allow_ctas of this DatabaseRestApiPost.

        Allow CREATE TABLE AS option in SQL Lab

        :return: The allow_ctas of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_ctas

    @allow_ctas.setter
    def allow_ctas(self, allow_ctas):
        """Sets the allow_ctas of this DatabaseRestApiPost.

        Allow CREATE TABLE AS option in SQL Lab

        :param allow_ctas: The allow_ctas of this DatabaseRestApiPost.
        :type allow_ctas: bool
        """

        self._allow_ctas = allow_ctas

    @property
    def allow_cvas(self):
        """Gets the allow_cvas of this DatabaseRestApiPost.

        Allow CREATE VIEW AS option in SQL Lab

        :return: The allow_cvas of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_cvas

    @allow_cvas.setter
    def allow_cvas(self, allow_cvas):
        """Sets the allow_cvas of this DatabaseRestApiPost.

        Allow CREATE VIEW AS option in SQL Lab

        :param allow_cvas: The allow_cvas of this DatabaseRestApiPost.
        :type allow_cvas: bool
        """

        self._allow_cvas = allow_cvas

    @property
    def allow_dml(self):
        """Gets the allow_dml of this DatabaseRestApiPost.

        Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab

        :return: The allow_dml of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_dml

    @allow_dml.setter
    def allow_dml(self, allow_dml):
        """Sets the allow_dml of this DatabaseRestApiPost.

        Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab

        :param allow_dml: The allow_dml of this DatabaseRestApiPost.
        :type allow_dml: bool
        """

        self._allow_dml = allow_dml

    @property
    def allow_multi_schema_metadata_fetch(self):
        """Gets the allow_multi_schema_metadata_fetch of this DatabaseRestApiPost.

        Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.

        :return: The allow_multi_schema_metadata_fetch of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_multi_schema_metadata_fetch

    @allow_multi_schema_metadata_fetch.setter
    def allow_multi_schema_metadata_fetch(self, allow_multi_schema_metadata_fetch):
        """Sets the allow_multi_schema_metadata_fetch of this DatabaseRestApiPost.

        Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.

        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiPost.
        :type allow_multi_schema_metadata_fetch: bool
        """

        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch

    @property
    def allow_run_async(self):
        """Gets the allow_run_async of this DatabaseRestApiPost.

        Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.

        :return: The allow_run_async of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._allow_run_async

    @allow_run_async.setter
    def allow_run_async(self, allow_run_async):
        """Sets the allow_run_async of this DatabaseRestApiPost.

        Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.

        :param allow_run_async: The allow_run_async of this DatabaseRestApiPost.
        :type allow_run_async: bool
        """

        self._allow_run_async = allow_run_async

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this DatabaseRestApiPost.

        Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.

        :return: The cache_timeout of this DatabaseRestApiPost.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this DatabaseRestApiPost.

        Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.

        :param cache_timeout: The cache_timeout of this DatabaseRestApiPost.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def configuration_method(self):
        """Gets the configuration_method of this DatabaseRestApiPost.

        Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.

        :return: The configuration_method of this DatabaseRestApiPost.
        :rtype: object
        """
        return self._configuration_method

    @configuration_method.setter
    def configuration_method(self, configuration_method):
        """Sets the configuration_method of this DatabaseRestApiPost.

        Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.

        :param configuration_method: The configuration_method of this DatabaseRestApiPost.
        :type configuration_method: object
        """

        self._configuration_method = configuration_method

    @property
    def database_name(self):
        """Gets the database_name of this DatabaseRestApiPost.

        A database name to identify this connection.

        :return: The database_name of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DatabaseRestApiPost.

        A database name to identify this connection.

        :param database_name: The database_name of this DatabaseRestApiPost.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 250:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `250`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")

        self._database_name = database_name

    @property
    def encrypted_extra(self):
        """Gets the encrypted_extra of this DatabaseRestApiPost.

        <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>

        :return: The encrypted_extra of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._encrypted_extra

    @encrypted_extra.setter
    def encrypted_extra(self, encrypted_extra):
        """Sets the encrypted_extra of this DatabaseRestApiPost.

        <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>

        :param encrypted_extra: The encrypted_extra of this DatabaseRestApiPost.
        :type encrypted_extra: str
        """

        self._encrypted_extra = encrypted_extra

    @property
    def engine(self):
        """Gets the engine of this DatabaseRestApiPost.

        SQLAlchemy engine to use

        :return: The engine of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DatabaseRestApiPost.

        SQLAlchemy engine to use

        :param engine: The engine of this DatabaseRestApiPost.
        :type engine: str
        """

        self._engine = engine

    @property
    def expose_in_sqllab(self):
        """Gets the expose_in_sqllab of this DatabaseRestApiPost.

        Expose this database to SQLLab

        :return: The expose_in_sqllab of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._expose_in_sqllab

    @expose_in_sqllab.setter
    def expose_in_sqllab(self, expose_in_sqllab):
        """Sets the expose_in_sqllab of this DatabaseRestApiPost.

        Expose this database to SQLLab

        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiPost.
        :type expose_in_sqllab: bool
        """

        self._expose_in_sqllab = expose_in_sqllab

    @property
    def extra(self):
        """Gets the extra of this DatabaseRestApiPost.

        <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_csv_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. the <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.</p>

        :return: The extra of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatabaseRestApiPost.

        <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_csv_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. the <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.</p>

        :param extra: The extra of this DatabaseRestApiPost.
        :type extra: str
        """

        self._extra = extra

    @property
    def force_ctas_schema(self):
        """Gets the force_ctas_schema of this DatabaseRestApiPost.

        When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema

        :return: The force_ctas_schema of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._force_ctas_schema

    @force_ctas_schema.setter
    def force_ctas_schema(self, force_ctas_schema):
        """Sets the force_ctas_schema of this DatabaseRestApiPost.

        When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema

        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiPost.
        :type force_ctas_schema: str
        """
        if force_ctas_schema is not None and len(force_ctas_schema) > 250:
            raise ValueError("Invalid value for `force_ctas_schema`, length must be less than or equal to `250`")
        if force_ctas_schema is not None and len(force_ctas_schema) < 0:
            raise ValueError("Invalid value for `force_ctas_schema`, length must be greater than or equal to `0`")

        self._force_ctas_schema = force_ctas_schema

    @property
    def impersonate_user(self):
        """Gets the impersonate_user of this DatabaseRestApiPost.

        If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.

        :return: The impersonate_user of this DatabaseRestApiPost.
        :rtype: bool
        """
        return self._impersonate_user

    @impersonate_user.setter
    def impersonate_user(self, impersonate_user):
        """Sets the impersonate_user of this DatabaseRestApiPost.

        If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.

        :param impersonate_user: The impersonate_user of this DatabaseRestApiPost.
        :type impersonate_user: bool
        """

        self._impersonate_user = impersonate_user

    @property
    def parameters(self):
        """Gets the parameters of this DatabaseRestApiPost.

        DB-specific parameters for configuration

        :return: The parameters of this DatabaseRestApiPost.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatabaseRestApiPost.

        DB-specific parameters for configuration

        :param parameters: The parameters of this DatabaseRestApiPost.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def server_cert(self):
        """Gets the server_cert of this DatabaseRestApiPost.

        <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>

        :return: The server_cert of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._server_cert

    @server_cert.setter
    def server_cert(self, server_cert):
        """Sets the server_cert of this DatabaseRestApiPost.

        <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>

        :param server_cert: The server_cert of this DatabaseRestApiPost.
        :type server_cert: str
        """

        self._server_cert = server_cert

    @property
    def sqlalchemy_uri(self):
        """Gets the sqlalchemy_uri of this DatabaseRestApiPost.

        <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>

        :return: The sqlalchemy_uri of this DatabaseRestApiPost.
        :rtype: str
        """
        return self._sqlalchemy_uri

    @sqlalchemy_uri.setter
    def sqlalchemy_uri(self, sqlalchemy_uri):
        """Sets the sqlalchemy_uri of this DatabaseRestApiPost.

        <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>

        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseRestApiPost.
        :type sqlalchemy_uri: str
        """
        if sqlalchemy_uri is not None and len(sqlalchemy_uri) > 1024:
            raise ValueError("Invalid value for `sqlalchemy_uri`, length must be less than or equal to `1024`")
        if sqlalchemy_uri is not None and len(sqlalchemy_uri) < 1:
            raise ValueError("Invalid value for `sqlalchemy_uri`, length must be greater than or equal to `1`")

        self._sqlalchemy_uri = sqlalchemy_uri
