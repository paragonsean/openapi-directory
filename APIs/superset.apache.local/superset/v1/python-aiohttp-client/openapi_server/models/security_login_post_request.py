# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityLoginPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, provider: str=None, refresh: bool=None, username: str=None):
        """SecurityLoginPostRequest - a model defined in OpenAPI

        :param password: The password of this SecurityLoginPostRequest.
        :param provider: The provider of this SecurityLoginPostRequest.
        :param refresh: The refresh of this SecurityLoginPostRequest.
        :param username: The username of this SecurityLoginPostRequest.
        """
        self.openapi_types = {
            'password': str,
            'provider': str,
            'refresh': bool,
            'username': str
        }

        self.attribute_map = {
            'password': 'password',
            'provider': 'provider',
            'refresh': 'refresh',
            'username': 'username'
        }

        self._password = password
        self._provider = provider
        self._refresh = refresh
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityLoginPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _security_login_post_request of this SecurityLoginPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this SecurityLoginPostRequest.

        The password for authentication

        :return: The password of this SecurityLoginPostRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SecurityLoginPostRequest.

        The password for authentication

        :param password: The password of this SecurityLoginPostRequest.
        :type password: str
        """

        self._password = password

    @property
    def provider(self):
        """Gets the provider of this SecurityLoginPostRequest.

        Choose an authentication provider

        :return: The provider of this SecurityLoginPostRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SecurityLoginPostRequest.

        Choose an authentication provider

        :param provider: The provider of this SecurityLoginPostRequest.
        :type provider: str
        """
        allowed_values = ["db", "ldap"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def refresh(self):
        """Gets the refresh of this SecurityLoginPostRequest.

        If true a refresh token is provided also

        :return: The refresh of this SecurityLoginPostRequest.
        :rtype: bool
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this SecurityLoginPostRequest.

        If true a refresh token is provided also

        :param refresh: The refresh of this SecurityLoginPostRequest.
        :type refresh: bool
        """

        self._refresh = refresh

    @property
    def username(self):
        """Gets the username of this SecurityLoginPostRequest.

        The username for authentication

        :return: The username of this SecurityLoginPostRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SecurityLoginPostRequest.

        The username for authentication

        :param username: The username of this SecurityLoginPostRequest.
        :type username: str
        """

        self._username = username
