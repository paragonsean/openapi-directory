# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataRollingOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, center: bool=None, min_periods: int=None, rolling_type: str=None, rolling_type_options: object=None, win_type: str=None, window: int=None):
        """ChartDataRollingOptionsSchema - a model defined in OpenAPI

        :param center: The center of this ChartDataRollingOptionsSchema.
        :param min_periods: The min_periods of this ChartDataRollingOptionsSchema.
        :param rolling_type: The rolling_type of this ChartDataRollingOptionsSchema.
        :param rolling_type_options: The rolling_type_options of this ChartDataRollingOptionsSchema.
        :param win_type: The win_type of this ChartDataRollingOptionsSchema.
        :param window: The window of this ChartDataRollingOptionsSchema.
        """
        self.openapi_types = {
            'center': bool,
            'min_periods': int,
            'rolling_type': str,
            'rolling_type_options': object,
            'win_type': str,
            'window': int
        }

        self.attribute_map = {
            'center': 'center',
            'min_periods': 'min_periods',
            'rolling_type': 'rolling_type',
            'rolling_type_options': 'rolling_type_options',
            'win_type': 'win_type',
            'window': 'window'
        }

        self._center = center
        self._min_periods = min_periods
        self._rolling_type = rolling_type
        self._rolling_type_options = rolling_type_options
        self._win_type = win_type
        self._window = window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataRollingOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataRollingOptionsSchema of this ChartDataRollingOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center(self):
        """Gets the center of this ChartDataRollingOptionsSchema.

        Should the label be at the center of the window. Default: `false`

        :return: The center of this ChartDataRollingOptionsSchema.
        :rtype: bool
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this ChartDataRollingOptionsSchema.

        Should the label be at the center of the window. Default: `false`

        :param center: The center of this ChartDataRollingOptionsSchema.
        :type center: bool
        """

        self._center = center

    @property
    def min_periods(self):
        """Gets the min_periods of this ChartDataRollingOptionsSchema.

        The minimum amount of periods required for a row to be included in the result set.

        :return: The min_periods of this ChartDataRollingOptionsSchema.
        :rtype: int
        """
        return self._min_periods

    @min_periods.setter
    def min_periods(self, min_periods):
        """Sets the min_periods of this ChartDataRollingOptionsSchema.

        The minimum amount of periods required for a row to be included in the result set.

        :param min_periods: The min_periods of this ChartDataRollingOptionsSchema.
        :type min_periods: int
        """

        self._min_periods = min_periods

    @property
    def rolling_type(self):
        """Gets the rolling_type of this ChartDataRollingOptionsSchema.

        Type of rolling window. Any numpy function will work.

        :return: The rolling_type of this ChartDataRollingOptionsSchema.
        :rtype: str
        """
        return self._rolling_type

    @rolling_type.setter
    def rolling_type(self, rolling_type):
        """Sets the rolling_type of this ChartDataRollingOptionsSchema.

        Type of rolling window. Any numpy function will work.

        :param rolling_type: The rolling_type of this ChartDataRollingOptionsSchema.
        :type rolling_type: str
        """
        allowed_values = ["average", "argmin", "argmax", "cumsum", "cumprod", "max", "mean", "median", "nansum", "nanmin", "nanmax", "nanmean", "nanmedian", "nanpercentile", "min", "percentile", "prod", "product", "std", "sum", "var"]  # noqa: E501
        if rolling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rolling_type` ({0}), must be one of {1}"
                .format(rolling_type, allowed_values)
            )

        self._rolling_type = rolling_type

    @property
    def rolling_type_options(self):
        """Gets the rolling_type_options of this ChartDataRollingOptionsSchema.


        :return: The rolling_type_options of this ChartDataRollingOptionsSchema.
        :rtype: object
        """
        return self._rolling_type_options

    @rolling_type_options.setter
    def rolling_type_options(self, rolling_type_options):
        """Sets the rolling_type_options of this ChartDataRollingOptionsSchema.


        :param rolling_type_options: The rolling_type_options of this ChartDataRollingOptionsSchema.
        :type rolling_type_options: object
        """

        self._rolling_type_options = rolling_type_options

    @property
    def win_type(self):
        """Gets the win_type of this ChartDataRollingOptionsSchema.

        Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.

        :return: The win_type of this ChartDataRollingOptionsSchema.
        :rtype: str
        """
        return self._win_type

    @win_type.setter
    def win_type(self, win_type):
        """Sets the win_type of this ChartDataRollingOptionsSchema.

        Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.

        :param win_type: The win_type of this ChartDataRollingOptionsSchema.
        :type win_type: str
        """
        allowed_values = ["boxcar", "triang", "blackman", "hamming", "bartlett", "parzen", "bohman", "blackmanharris", "nuttall", "barthann", "kaiser", "gaussian", "general_gaussian", "slepian", "exponential"]  # noqa: E501
        if win_type not in allowed_values:
            raise ValueError(
                "Invalid value for `win_type` ({0}), must be one of {1}"
                .format(win_type, allowed_values)
            )

        self._win_type = win_type

    @property
    def window(self):
        """Gets the window of this ChartDataRollingOptionsSchema.

        Size of the rolling window in days.

        :return: The window of this ChartDataRollingOptionsSchema.
        :rtype: int
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this ChartDataRollingOptionsSchema.

        Size of the rolling window in days.

        :param window: The window of this ChartDataRollingOptionsSchema.
        :type window: int
        """
        if window is None:
            raise ValueError("Invalid value for `window`, must not be `None`")

        self._window = window
