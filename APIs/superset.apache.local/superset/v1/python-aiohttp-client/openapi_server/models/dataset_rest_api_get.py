# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta22 import Meta22
from openapi_server.models.meta23 import Meta23
from openapi_server.models.meta24 import Meta24
from openapi_server.models.meta25 import Meta25
from openapi_server import util


class DatasetRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_timeout: int=None, columns: Meta22=None, database: Meta23=None, datasource_type: object=None, default_endpoint: str=None, description: str=None, extra: str=None, fetch_values_predicate: str=None, filter_select_enabled: bool=None, id: int=None, is_sqllab_view: bool=None, main_dttm_col: str=None, metrics: Meta25=None, offset: int=None, owners: Meta24=None, _schema: str=None, sql: str=None, table_name: str=None, template_params: str=None, url: object=None):
        """DatasetRestApiGet - a model defined in OpenAPI

        :param cache_timeout: The cache_timeout of this DatasetRestApiGet.
        :param columns: The columns of this DatasetRestApiGet.
        :param database: The database of this DatasetRestApiGet.
        :param datasource_type: The datasource_type of this DatasetRestApiGet.
        :param default_endpoint: The default_endpoint of this DatasetRestApiGet.
        :param description: The description of this DatasetRestApiGet.
        :param extra: The extra of this DatasetRestApiGet.
        :param fetch_values_predicate: The fetch_values_predicate of this DatasetRestApiGet.
        :param filter_select_enabled: The filter_select_enabled of this DatasetRestApiGet.
        :param id: The id of this DatasetRestApiGet.
        :param is_sqllab_view: The is_sqllab_view of this DatasetRestApiGet.
        :param main_dttm_col: The main_dttm_col of this DatasetRestApiGet.
        :param metrics: The metrics of this DatasetRestApiGet.
        :param offset: The offset of this DatasetRestApiGet.
        :param owners: The owners of this DatasetRestApiGet.
        :param _schema: The _schema of this DatasetRestApiGet.
        :param sql: The sql of this DatasetRestApiGet.
        :param table_name: The table_name of this DatasetRestApiGet.
        :param template_params: The template_params of this DatasetRestApiGet.
        :param url: The url of this DatasetRestApiGet.
        """
        self.openapi_types = {
            'cache_timeout': int,
            'columns': Meta22,
            'database': Meta23,
            'datasource_type': object,
            'default_endpoint': str,
            'description': str,
            'extra': str,
            'fetch_values_predicate': str,
            'filter_select_enabled': bool,
            'id': int,
            'is_sqllab_view': bool,
            'main_dttm_col': str,
            'metrics': Meta25,
            'offset': int,
            'owners': Meta24,
            '_schema': str,
            'sql': str,
            'table_name': str,
            'template_params': str,
            'url': object
        }

        self.attribute_map = {
            'cache_timeout': 'cache_timeout',
            'columns': 'columns',
            'database': 'database',
            'datasource_type': 'datasource_type',
            'default_endpoint': 'default_endpoint',
            'description': 'description',
            'extra': 'extra',
            'fetch_values_predicate': 'fetch_values_predicate',
            'filter_select_enabled': 'filter_select_enabled',
            'id': 'id',
            'is_sqllab_view': 'is_sqllab_view',
            'main_dttm_col': 'main_dttm_col',
            'metrics': 'metrics',
            'offset': 'offset',
            'owners': 'owners',
            '_schema': 'schema',
            'sql': 'sql',
            'table_name': 'table_name',
            'template_params': 'template_params',
            'url': 'url'
        }

        self._cache_timeout = cache_timeout
        self._columns = columns
        self._database = database
        self._datasource_type = datasource_type
        self._default_endpoint = default_endpoint
        self._description = description
        self._extra = extra
        self._fetch_values_predicate = fetch_values_predicate
        self._filter_select_enabled = filter_select_enabled
        self._id = id
        self._is_sqllab_view = is_sqllab_view
        self._main_dttm_col = main_dttm_col
        self._metrics = metrics
        self._offset = offset
        self._owners = owners
        self.__schema = _schema
        self._sql = sql
        self._table_name = table_name
        self._template_params = template_params
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetRestApi.get of this DatasetRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this DatasetRestApiGet.


        :return: The cache_timeout of this DatasetRestApiGet.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this DatasetRestApiGet.


        :param cache_timeout: The cache_timeout of this DatasetRestApiGet.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def columns(self):
        """Gets the columns of this DatasetRestApiGet.


        :return: The columns of this DatasetRestApiGet.
        :rtype: Meta22
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DatasetRestApiGet.


        :param columns: The columns of this DatasetRestApiGet.
        :type columns: Meta22
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")

        self._columns = columns

    @property
    def database(self):
        """Gets the database of this DatasetRestApiGet.


        :return: The database of this DatasetRestApiGet.
        :rtype: Meta23
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DatasetRestApiGet.


        :param database: The database of this DatasetRestApiGet.
        :type database: Meta23
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def datasource_type(self):
        """Gets the datasource_type of this DatasetRestApiGet.


        :return: The datasource_type of this DatasetRestApiGet.
        :rtype: object
        """
        return self._datasource_type

    @datasource_type.setter
    def datasource_type(self, datasource_type):
        """Sets the datasource_type of this DatasetRestApiGet.


        :param datasource_type: The datasource_type of this DatasetRestApiGet.
        :type datasource_type: object
        """

        self._datasource_type = datasource_type

    @property
    def default_endpoint(self):
        """Gets the default_endpoint of this DatasetRestApiGet.


        :return: The default_endpoint of this DatasetRestApiGet.
        :rtype: str
        """
        return self._default_endpoint

    @default_endpoint.setter
    def default_endpoint(self, default_endpoint):
        """Sets the default_endpoint of this DatasetRestApiGet.


        :param default_endpoint: The default_endpoint of this DatasetRestApiGet.
        :type default_endpoint: str
        """

        self._default_endpoint = default_endpoint

    @property
    def description(self):
        """Gets the description of this DatasetRestApiGet.


        :return: The description of this DatasetRestApiGet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetRestApiGet.


        :param description: The description of this DatasetRestApiGet.
        :type description: str
        """

        self._description = description

    @property
    def extra(self):
        """Gets the extra of this DatasetRestApiGet.


        :return: The extra of this DatasetRestApiGet.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatasetRestApiGet.


        :param extra: The extra of this DatasetRestApiGet.
        :type extra: str
        """

        self._extra = extra

    @property
    def fetch_values_predicate(self):
        """Gets the fetch_values_predicate of this DatasetRestApiGet.


        :return: The fetch_values_predicate of this DatasetRestApiGet.
        :rtype: str
        """
        return self._fetch_values_predicate

    @fetch_values_predicate.setter
    def fetch_values_predicate(self, fetch_values_predicate):
        """Sets the fetch_values_predicate of this DatasetRestApiGet.


        :param fetch_values_predicate: The fetch_values_predicate of this DatasetRestApiGet.
        :type fetch_values_predicate: str
        """
        if fetch_values_predicate is not None and len(fetch_values_predicate) > 1000:
            raise ValueError("Invalid value for `fetch_values_predicate`, length must be less than or equal to `1000`")

        self._fetch_values_predicate = fetch_values_predicate

    @property
    def filter_select_enabled(self):
        """Gets the filter_select_enabled of this DatasetRestApiGet.


        :return: The filter_select_enabled of this DatasetRestApiGet.
        :rtype: bool
        """
        return self._filter_select_enabled

    @filter_select_enabled.setter
    def filter_select_enabled(self, filter_select_enabled):
        """Sets the filter_select_enabled of this DatasetRestApiGet.


        :param filter_select_enabled: The filter_select_enabled of this DatasetRestApiGet.
        :type filter_select_enabled: bool
        """

        self._filter_select_enabled = filter_select_enabled

    @property
    def id(self):
        """Gets the id of this DatasetRestApiGet.


        :return: The id of this DatasetRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetRestApiGet.


        :param id: The id of this DatasetRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def is_sqllab_view(self):
        """Gets the is_sqllab_view of this DatasetRestApiGet.


        :return: The is_sqllab_view of this DatasetRestApiGet.
        :rtype: bool
        """
        return self._is_sqllab_view

    @is_sqllab_view.setter
    def is_sqllab_view(self, is_sqllab_view):
        """Sets the is_sqllab_view of this DatasetRestApiGet.


        :param is_sqllab_view: The is_sqllab_view of this DatasetRestApiGet.
        :type is_sqllab_view: bool
        """

        self._is_sqllab_view = is_sqllab_view

    @property
    def main_dttm_col(self):
        """Gets the main_dttm_col of this DatasetRestApiGet.


        :return: The main_dttm_col of this DatasetRestApiGet.
        :rtype: str
        """
        return self._main_dttm_col

    @main_dttm_col.setter
    def main_dttm_col(self, main_dttm_col):
        """Sets the main_dttm_col of this DatasetRestApiGet.


        :param main_dttm_col: The main_dttm_col of this DatasetRestApiGet.
        :type main_dttm_col: str
        """
        if main_dttm_col is not None and len(main_dttm_col) > 250:
            raise ValueError("Invalid value for `main_dttm_col`, length must be less than or equal to `250`")

        self._main_dttm_col = main_dttm_col

    @property
    def metrics(self):
        """Gets the metrics of this DatasetRestApiGet.


        :return: The metrics of this DatasetRestApiGet.
        :rtype: Meta25
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DatasetRestApiGet.


        :param metrics: The metrics of this DatasetRestApiGet.
        :type metrics: Meta25
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics

    @property
    def offset(self):
        """Gets the offset of this DatasetRestApiGet.


        :return: The offset of this DatasetRestApiGet.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DatasetRestApiGet.


        :param offset: The offset of this DatasetRestApiGet.
        :type offset: int
        """

        self._offset = offset

    @property
    def owners(self):
        """Gets the owners of this DatasetRestApiGet.


        :return: The owners of this DatasetRestApiGet.
        :rtype: Meta24
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DatasetRestApiGet.


        :param owners: The owners of this DatasetRestApiGet.
        :type owners: Meta24
        """

        self._owners = owners

    @property
    def _schema(self):
        """Gets the _schema of this DatasetRestApiGet.


        :return: The _schema of this DatasetRestApiGet.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DatasetRestApiGet.


        :param _schema: The _schema of this DatasetRestApiGet.
        :type _schema: str
        """
        if _schema is not None and len(_schema) > 255:
            raise ValueError("Invalid value for `_schema`, length must be less than or equal to `255`")

        self.__schema = _schema

    @property
    def sql(self):
        """Gets the sql of this DatasetRestApiGet.


        :return: The sql of this DatasetRestApiGet.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this DatasetRestApiGet.


        :param sql: The sql of this DatasetRestApiGet.
        :type sql: str
        """

        self._sql = sql

    @property
    def table_name(self):
        """Gets the table_name of this DatasetRestApiGet.


        :return: The table_name of this DatasetRestApiGet.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DatasetRestApiGet.


        :param table_name: The table_name of this DatasetRestApiGet.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 250:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `250`")

        self._table_name = table_name

    @property
    def template_params(self):
        """Gets the template_params of this DatasetRestApiGet.


        :return: The template_params of this DatasetRestApiGet.
        :rtype: str
        """
        return self._template_params

    @template_params.setter
    def template_params(self, template_params):
        """Sets the template_params of this DatasetRestApiGet.


        :param template_params: The template_params of this DatasetRestApiGet.
        :type template_params: str
        """

        self._template_params = template_params

    @property
    def url(self):
        """Gets the url of this DatasetRestApiGet.


        :return: The url of this DatasetRestApiGet.
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DatasetRestApiGet.


        :param url: The url of this DatasetRestApiGet.
        :type url: object
        """

        self._url = url
