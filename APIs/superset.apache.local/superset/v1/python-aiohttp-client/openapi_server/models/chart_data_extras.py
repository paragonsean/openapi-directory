# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data_filter import ChartDataFilter
from openapi_server import util


class ChartDataExtras(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, druid_time_origin: str=None, having: str=None, having_druid: List[ChartDataFilter]=None, relative_end: str=None, relative_start: str=None, time_grain_sqla: str=None, time_range_endpoints: List[object]=None, where: str=None):
        """ChartDataExtras - a model defined in OpenAPI

        :param druid_time_origin: The druid_time_origin of this ChartDataExtras.
        :param having: The having of this ChartDataExtras.
        :param having_druid: The having_druid of this ChartDataExtras.
        :param relative_end: The relative_end of this ChartDataExtras.
        :param relative_start: The relative_start of this ChartDataExtras.
        :param time_grain_sqla: The time_grain_sqla of this ChartDataExtras.
        :param time_range_endpoints: The time_range_endpoints of this ChartDataExtras.
        :param where: The where of this ChartDataExtras.
        """
        self.openapi_types = {
            'druid_time_origin': str,
            'having': str,
            'having_druid': List[ChartDataFilter],
            'relative_end': str,
            'relative_start': str,
            'time_grain_sqla': str,
            'time_range_endpoints': List[object],
            'where': str
        }

        self.attribute_map = {
            'druid_time_origin': 'druid_time_origin',
            'having': 'having',
            'having_druid': 'having_druid',
            'relative_end': 'relative_end',
            'relative_start': 'relative_start',
            'time_grain_sqla': 'time_grain_sqla',
            'time_range_endpoints': 'time_range_endpoints',
            'where': 'where'
        }

        self._druid_time_origin = druid_time_origin
        self._having = having
        self._having_druid = having_druid
        self._relative_end = relative_end
        self._relative_start = relative_start
        self._time_grain_sqla = time_grain_sqla
        self._time_range_endpoints = time_range_endpoints
        self._where = where

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataExtras':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataExtras of this ChartDataExtras.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def druid_time_origin(self):
        """Gets the druid_time_origin of this ChartDataExtras.

        Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week.

        :return: The druid_time_origin of this ChartDataExtras.
        :rtype: str
        """
        return self._druid_time_origin

    @druid_time_origin.setter
    def druid_time_origin(self, druid_time_origin):
        """Sets the druid_time_origin of this ChartDataExtras.

        Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week.

        :param druid_time_origin: The druid_time_origin of this ChartDataExtras.
        :type druid_time_origin: str
        """

        self._druid_time_origin = druid_time_origin

    @property
    def having(self):
        """Gets the having of this ChartDataExtras.

        HAVING clause to be added to aggregate queries using AND operator.

        :return: The having of this ChartDataExtras.
        :rtype: str
        """
        return self._having

    @having.setter
    def having(self, having):
        """Sets the having of this ChartDataExtras.

        HAVING clause to be added to aggregate queries using AND operator.

        :param having: The having of this ChartDataExtras.
        :type having: str
        """

        self._having = having

    @property
    def having_druid(self):
        """Gets the having_druid of this ChartDataExtras.

        HAVING filters to be added to legacy Druid datasource queries.

        :return: The having_druid of this ChartDataExtras.
        :rtype: List[ChartDataFilter]
        """
        return self._having_druid

    @having_druid.setter
    def having_druid(self, having_druid):
        """Sets the having_druid of this ChartDataExtras.

        HAVING filters to be added to legacy Druid datasource queries.

        :param having_druid: The having_druid of this ChartDataExtras.
        :type having_druid: List[ChartDataFilter]
        """

        self._having_druid = having_druid

    @property
    def relative_end(self):
        """Gets the relative_end of this ChartDataExtras.

        End time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`

        :return: The relative_end of this ChartDataExtras.
        :rtype: str
        """
        return self._relative_end

    @relative_end.setter
    def relative_end(self, relative_end):
        """Sets the relative_end of this ChartDataExtras.

        End time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`

        :param relative_end: The relative_end of this ChartDataExtras.
        :type relative_end: str
        """
        allowed_values = ["today", "now"]  # noqa: E501
        if relative_end not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_end` ({0}), must be one of {1}"
                .format(relative_end, allowed_values)
            )

        self._relative_end = relative_end

    @property
    def relative_start(self):
        """Gets the relative_start of this ChartDataExtras.

        Start time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`

        :return: The relative_start of this ChartDataExtras.
        :rtype: str
        """
        return self._relative_start

    @relative_start.setter
    def relative_start(self, relative_start):
        """Sets the relative_start of this ChartDataExtras.

        Start time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`

        :param relative_start: The relative_start of this ChartDataExtras.
        :type relative_start: str
        """
        allowed_values = ["today", "now"]  # noqa: E501
        if relative_start not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_start` ({0}), must be one of {1}"
                .format(relative_start, allowed_values)
            )

        self._relative_start = relative_start

    @property
    def time_grain_sqla(self):
        """Gets the time_grain_sqla of this ChartDataExtras.

        To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.

        :return: The time_grain_sqla of this ChartDataExtras.
        :rtype: str
        """
        return self._time_grain_sqla

    @time_grain_sqla.setter
    def time_grain_sqla(self, time_grain_sqla):
        """Sets the time_grain_sqla of this ChartDataExtras.

        To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.

        :param time_grain_sqla: The time_grain_sqla of this ChartDataExtras.
        :type time_grain_sqla: str
        """
        allowed_values = [None,"PT1S", "PT5S", "PT30S", "PT1M", "PT5M", "PT10M", "PT15M", "PT0.5H", "PT1H", "PT6H", "P1D", "P1W", "P1M", "P0.25Y", "P1Y", "1969-12-28T00:00:00Z/P1W", "1969-12-29T00:00:00Z/P1W", "P1W/1970-01-03T00:00:00Z", "P1W/1970-01-04T00:00:00Z"]  # noqa: E501
        if time_grain_sqla not in allowed_values:
            raise ValueError(
                "Invalid value for `time_grain_sqla` ({0}), must be one of {1}"
                .format(time_grain_sqla, allowed_values)
            )

        self._time_grain_sqla = time_grain_sqla

    @property
    def time_range_endpoints(self):
        """Gets the time_range_endpoints of this ChartDataExtras.


        :return: The time_range_endpoints of this ChartDataExtras.
        :rtype: List[object]
        """
        return self._time_range_endpoints

    @time_range_endpoints.setter
    def time_range_endpoints(self, time_range_endpoints):
        """Sets the time_range_endpoints of this ChartDataExtras.


        :param time_range_endpoints: The time_range_endpoints of this ChartDataExtras.
        :type time_range_endpoints: List[object]
        """

        self._time_range_endpoints = time_range_endpoints

    @property
    def where(self):
        """Gets the where of this ChartDataExtras.

        WHERE clause to be added to queries using AND operator.

        :return: The where of this ChartDataExtras.
        :rtype: str
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this ChartDataExtras.

        WHERE clause to be added to queries using AND operator.

        :param where: The where of this ChartDataExtras.
        :type where: str
        """

        self._where = where
