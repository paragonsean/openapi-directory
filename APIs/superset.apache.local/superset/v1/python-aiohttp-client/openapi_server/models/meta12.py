# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta12(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, changed_on: datetime=None, created_on: datetime=None, email: str=None, fail_login_count: int=None, first_name: str=None, id: int=None, last_login: datetime=None, last_name: str=None, login_count: int=None, password: str=None, username: str=None):
        """Meta12 - a model defined in OpenAPI

        :param active: The active of this Meta12.
        :param changed_on: The changed_on of this Meta12.
        :param created_on: The created_on of this Meta12.
        :param email: The email of this Meta12.
        :param fail_login_count: The fail_login_count of this Meta12.
        :param first_name: The first_name of this Meta12.
        :param id: The id of this Meta12.
        :param last_login: The last_login of this Meta12.
        :param last_name: The last_name of this Meta12.
        :param login_count: The login_count of this Meta12.
        :param password: The password of this Meta12.
        :param username: The username of this Meta12.
        """
        self.openapi_types = {
            'active': bool,
            'changed_on': datetime,
            'created_on': datetime,
            'email': str,
            'fail_login_count': int,
            'first_name': str,
            'id': int,
            'last_login': datetime,
            'last_name': str,
            'login_count': int,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'active': 'active',
            'changed_on': 'changed_on',
            'created_on': 'created_on',
            'email': 'email',
            'fail_login_count': 'fail_login_count',
            'first_name': 'first_name',
            'id': 'id',
            'last_login': 'last_login',
            'last_name': 'last_name',
            'login_count': 'login_count',
            'password': 'password',
            'username': 'username'
        }

        self._active = active
        self._changed_on = changed_on
        self._created_on = created_on
        self._email = email
        self._fail_login_count = fail_login_count
        self._first_name = first_name
        self._id = id
        self._last_login = last_login
        self._last_name = last_name
        self._login_count = login_count
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta12':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta12 of this Meta12.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Meta12.


        :return: The active of this Meta12.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Meta12.


        :param active: The active of this Meta12.
        :type active: bool
        """

        self._active = active

    @property
    def changed_on(self):
        """Gets the changed_on of this Meta12.


        :return: The changed_on of this Meta12.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on):
        """Sets the changed_on of this Meta12.


        :param changed_on: The changed_on of this Meta12.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def created_on(self):
        """Gets the created_on of this Meta12.


        :return: The created_on of this Meta12.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Meta12.


        :param created_on: The created_on of this Meta12.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def email(self):
        """Gets the email of this Meta12.


        :return: The email of this Meta12.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Meta12.


        :param email: The email of this Meta12.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 64:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")

        self._email = email

    @property
    def fail_login_count(self):
        """Gets the fail_login_count of this Meta12.


        :return: The fail_login_count of this Meta12.
        :rtype: int
        """
        return self._fail_login_count

    @fail_login_count.setter
    def fail_login_count(self, fail_login_count):
        """Sets the fail_login_count of this Meta12.


        :param fail_login_count: The fail_login_count of this Meta12.
        :type fail_login_count: int
        """

        self._fail_login_count = fail_login_count

    @property
    def first_name(self):
        """Gets the first_name of this Meta12.


        :return: The first_name of this Meta12.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Meta12.


        :param first_name: The first_name of this Meta12.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 64:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `64`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Meta12.


        :return: The id of this Meta12.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Meta12.


        :param id: The id of this Meta12.
        :type id: int
        """

        self._id = id

    @property
    def last_login(self):
        """Gets the last_login of this Meta12.


        :return: The last_login of this Meta12.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Meta12.


        :param last_login: The last_login of this Meta12.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def last_name(self):
        """Gets the last_name of this Meta12.


        :return: The last_name of this Meta12.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Meta12.


        :param last_name: The last_name of this Meta12.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 64:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `64`")

        self._last_name = last_name

    @property
    def login_count(self):
        """Gets the login_count of this Meta12.


        :return: The login_count of this Meta12.
        :rtype: int
        """
        return self._login_count

    @login_count.setter
    def login_count(self, login_count):
        """Sets the login_count of this Meta12.


        :param login_count: The login_count of this Meta12.
        :type login_count: int
        """

        self._login_count = login_count

    @property
    def password(self):
        """Gets the password of this Meta12.


        :return: The password of this Meta12.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Meta12.


        :param password: The password of this Meta12.
        :type password: str
        """
        if password is not None and len(password) > 256:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `256`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this Meta12.


        :return: The username of this Meta12.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Meta12.


        :param username: The username of this Meta12.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 64:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `64`")

        self._username = username
