# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetItemSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, keys: List[str]=None):
        """GetItemSchema - a model defined in OpenAPI

        :param columns: The columns of this GetItemSchema.
        :param keys: The keys of this GetItemSchema.
        """
        self.openapi_types = {
            'columns': List[str],
            'keys': List[str]
        }

        self.attribute_map = {
            'columns': 'columns',
            'keys': 'keys'
        }

        self._columns = columns
        self._keys = keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetItemSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_item_schema of this GetItemSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this GetItemSchema.


        :return: The columns of this GetItemSchema.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this GetItemSchema.


        :param columns: The columns of this GetItemSchema.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def keys(self):
        """Gets the keys of this GetItemSchema.


        :return: The keys of this GetItemSchema.
        :rtype: List[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this GetItemSchema.


        :param keys: The keys of this GetItemSchema.
        :type keys: List[str]
        """
        allowed_values = ["show_columns", "description_columns", "label_columns", "show_title", "none"]  # noqa: E501
        if not set(keys).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `keys` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(keys) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._keys = keys
