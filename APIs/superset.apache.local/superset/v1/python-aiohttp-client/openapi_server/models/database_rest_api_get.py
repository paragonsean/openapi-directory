# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_csv_upload: bool=None, allow_ctas: bool=None, allow_cvas: bool=None, allow_dml: bool=None, allow_multi_schema_metadata_fetch: bool=None, allow_run_async: bool=None, backend: object=None, cache_timeout: int=None, configuration_method: str=None, database_name: str=None, encrypted_extra: str=None, expose_in_sqllab: bool=None, extra: str=None, force_ctas_schema: str=None, id: int=None, impersonate_user: bool=None, parameters: object=None, server_cert: str=None, sqlalchemy_uri: str=None):
        """DatabaseRestApiGet - a model defined in OpenAPI

        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiGet.
        :param allow_ctas: The allow_ctas of this DatabaseRestApiGet.
        :param allow_cvas: The allow_cvas of this DatabaseRestApiGet.
        :param allow_dml: The allow_dml of this DatabaseRestApiGet.
        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGet.
        :param allow_run_async: The allow_run_async of this DatabaseRestApiGet.
        :param backend: The backend of this DatabaseRestApiGet.
        :param cache_timeout: The cache_timeout of this DatabaseRestApiGet.
        :param configuration_method: The configuration_method of this DatabaseRestApiGet.
        :param database_name: The database_name of this DatabaseRestApiGet.
        :param encrypted_extra: The encrypted_extra of this DatabaseRestApiGet.
        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiGet.
        :param extra: The extra of this DatabaseRestApiGet.
        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiGet.
        :param id: The id of this DatabaseRestApiGet.
        :param impersonate_user: The impersonate_user of this DatabaseRestApiGet.
        :param parameters: The parameters of this DatabaseRestApiGet.
        :param server_cert: The server_cert of this DatabaseRestApiGet.
        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseRestApiGet.
        """
        self.openapi_types = {
            'allow_csv_upload': bool,
            'allow_ctas': bool,
            'allow_cvas': bool,
            'allow_dml': bool,
            'allow_multi_schema_metadata_fetch': bool,
            'allow_run_async': bool,
            'backend': object,
            'cache_timeout': int,
            'configuration_method': str,
            'database_name': str,
            'encrypted_extra': str,
            'expose_in_sqllab': bool,
            'extra': str,
            'force_ctas_schema': str,
            'id': int,
            'impersonate_user': bool,
            'parameters': object,
            'server_cert': str,
            'sqlalchemy_uri': str
        }

        self.attribute_map = {
            'allow_csv_upload': 'allow_csv_upload',
            'allow_ctas': 'allow_ctas',
            'allow_cvas': 'allow_cvas',
            'allow_dml': 'allow_dml',
            'allow_multi_schema_metadata_fetch': 'allow_multi_schema_metadata_fetch',
            'allow_run_async': 'allow_run_async',
            'backend': 'backend',
            'cache_timeout': 'cache_timeout',
            'configuration_method': 'configuration_method',
            'database_name': 'database_name',
            'encrypted_extra': 'encrypted_extra',
            'expose_in_sqllab': 'expose_in_sqllab',
            'extra': 'extra',
            'force_ctas_schema': 'force_ctas_schema',
            'id': 'id',
            'impersonate_user': 'impersonate_user',
            'parameters': 'parameters',
            'server_cert': 'server_cert',
            'sqlalchemy_uri': 'sqlalchemy_uri'
        }

        self._allow_csv_upload = allow_csv_upload
        self._allow_ctas = allow_ctas
        self._allow_cvas = allow_cvas
        self._allow_dml = allow_dml
        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch
        self._allow_run_async = allow_run_async
        self._backend = backend
        self._cache_timeout = cache_timeout
        self._configuration_method = configuration_method
        self._database_name = database_name
        self._encrypted_extra = encrypted_extra
        self._expose_in_sqllab = expose_in_sqllab
        self._extra = extra
        self._force_ctas_schema = force_ctas_schema
        self._id = id
        self._impersonate_user = impersonate_user
        self._parameters = parameters
        self._server_cert = server_cert
        self._sqlalchemy_uri = sqlalchemy_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseRestApi.get of this DatabaseRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_csv_upload(self):
        """Gets the allow_csv_upload of this DatabaseRestApiGet.


        :return: The allow_csv_upload of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_csv_upload

    @allow_csv_upload.setter
    def allow_csv_upload(self, allow_csv_upload):
        """Sets the allow_csv_upload of this DatabaseRestApiGet.


        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiGet.
        :type allow_csv_upload: bool
        """

        self._allow_csv_upload = allow_csv_upload

    @property
    def allow_ctas(self):
        """Gets the allow_ctas of this DatabaseRestApiGet.


        :return: The allow_ctas of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_ctas

    @allow_ctas.setter
    def allow_ctas(self, allow_ctas):
        """Sets the allow_ctas of this DatabaseRestApiGet.


        :param allow_ctas: The allow_ctas of this DatabaseRestApiGet.
        :type allow_ctas: bool
        """

        self._allow_ctas = allow_ctas

    @property
    def allow_cvas(self):
        """Gets the allow_cvas of this DatabaseRestApiGet.


        :return: The allow_cvas of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_cvas

    @allow_cvas.setter
    def allow_cvas(self, allow_cvas):
        """Sets the allow_cvas of this DatabaseRestApiGet.


        :param allow_cvas: The allow_cvas of this DatabaseRestApiGet.
        :type allow_cvas: bool
        """

        self._allow_cvas = allow_cvas

    @property
    def allow_dml(self):
        """Gets the allow_dml of this DatabaseRestApiGet.


        :return: The allow_dml of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_dml

    @allow_dml.setter
    def allow_dml(self, allow_dml):
        """Sets the allow_dml of this DatabaseRestApiGet.


        :param allow_dml: The allow_dml of this DatabaseRestApiGet.
        :type allow_dml: bool
        """

        self._allow_dml = allow_dml

    @property
    def allow_multi_schema_metadata_fetch(self):
        """Gets the allow_multi_schema_metadata_fetch of this DatabaseRestApiGet.


        :return: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_multi_schema_metadata_fetch

    @allow_multi_schema_metadata_fetch.setter
    def allow_multi_schema_metadata_fetch(self, allow_multi_schema_metadata_fetch):
        """Sets the allow_multi_schema_metadata_fetch of this DatabaseRestApiGet.


        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGet.
        :type allow_multi_schema_metadata_fetch: bool
        """

        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch

    @property
    def allow_run_async(self):
        """Gets the allow_run_async of this DatabaseRestApiGet.


        :return: The allow_run_async of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._allow_run_async

    @allow_run_async.setter
    def allow_run_async(self, allow_run_async):
        """Sets the allow_run_async of this DatabaseRestApiGet.


        :param allow_run_async: The allow_run_async of this DatabaseRestApiGet.
        :type allow_run_async: bool
        """

        self._allow_run_async = allow_run_async

    @property
    def backend(self):
        """Gets the backend of this DatabaseRestApiGet.


        :return: The backend of this DatabaseRestApiGet.
        :rtype: object
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this DatabaseRestApiGet.


        :param backend: The backend of this DatabaseRestApiGet.
        :type backend: object
        """

        self._backend = backend

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this DatabaseRestApiGet.


        :return: The cache_timeout of this DatabaseRestApiGet.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this DatabaseRestApiGet.


        :param cache_timeout: The cache_timeout of this DatabaseRestApiGet.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def configuration_method(self):
        """Gets the configuration_method of this DatabaseRestApiGet.


        :return: The configuration_method of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._configuration_method

    @configuration_method.setter
    def configuration_method(self, configuration_method):
        """Sets the configuration_method of this DatabaseRestApiGet.


        :param configuration_method: The configuration_method of this DatabaseRestApiGet.
        :type configuration_method: str
        """
        if configuration_method is not None and len(configuration_method) > 255:
            raise ValueError("Invalid value for `configuration_method`, length must be less than or equal to `255`")

        self._configuration_method = configuration_method

    @property
    def database_name(self):
        """Gets the database_name of this DatabaseRestApiGet.


        :return: The database_name of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DatabaseRestApiGet.


        :param database_name: The database_name of this DatabaseRestApiGet.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 250:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `250`")

        self._database_name = database_name

    @property
    def encrypted_extra(self):
        """Gets the encrypted_extra of this DatabaseRestApiGet.


        :return: The encrypted_extra of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._encrypted_extra

    @encrypted_extra.setter
    def encrypted_extra(self, encrypted_extra):
        """Sets the encrypted_extra of this DatabaseRestApiGet.


        :param encrypted_extra: The encrypted_extra of this DatabaseRestApiGet.
        :type encrypted_extra: str
        """

        self._encrypted_extra = encrypted_extra

    @property
    def expose_in_sqllab(self):
        """Gets the expose_in_sqllab of this DatabaseRestApiGet.


        :return: The expose_in_sqllab of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._expose_in_sqllab

    @expose_in_sqllab.setter
    def expose_in_sqllab(self, expose_in_sqllab):
        """Sets the expose_in_sqllab of this DatabaseRestApiGet.


        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiGet.
        :type expose_in_sqllab: bool
        """

        self._expose_in_sqllab = expose_in_sqllab

    @property
    def extra(self):
        """Gets the extra of this DatabaseRestApiGet.


        :return: The extra of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatabaseRestApiGet.


        :param extra: The extra of this DatabaseRestApiGet.
        :type extra: str
        """

        self._extra = extra

    @property
    def force_ctas_schema(self):
        """Gets the force_ctas_schema of this DatabaseRestApiGet.


        :return: The force_ctas_schema of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._force_ctas_schema

    @force_ctas_schema.setter
    def force_ctas_schema(self, force_ctas_schema):
        """Sets the force_ctas_schema of this DatabaseRestApiGet.


        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiGet.
        :type force_ctas_schema: str
        """
        if force_ctas_schema is not None and len(force_ctas_schema) > 250:
            raise ValueError("Invalid value for `force_ctas_schema`, length must be less than or equal to `250`")

        self._force_ctas_schema = force_ctas_schema

    @property
    def id(self):
        """Gets the id of this DatabaseRestApiGet.


        :return: The id of this DatabaseRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatabaseRestApiGet.


        :param id: The id of this DatabaseRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def impersonate_user(self):
        """Gets the impersonate_user of this DatabaseRestApiGet.


        :return: The impersonate_user of this DatabaseRestApiGet.
        :rtype: bool
        """
        return self._impersonate_user

    @impersonate_user.setter
    def impersonate_user(self, impersonate_user):
        """Sets the impersonate_user of this DatabaseRestApiGet.


        :param impersonate_user: The impersonate_user of this DatabaseRestApiGet.
        :type impersonate_user: bool
        """

        self._impersonate_user = impersonate_user

    @property
    def parameters(self):
        """Gets the parameters of this DatabaseRestApiGet.


        :return: The parameters of this DatabaseRestApiGet.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatabaseRestApiGet.


        :param parameters: The parameters of this DatabaseRestApiGet.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def server_cert(self):
        """Gets the server_cert of this DatabaseRestApiGet.


        :return: The server_cert of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._server_cert

    @server_cert.setter
    def server_cert(self, server_cert):
        """Sets the server_cert of this DatabaseRestApiGet.


        :param server_cert: The server_cert of this DatabaseRestApiGet.
        :type server_cert: str
        """

        self._server_cert = server_cert

    @property
    def sqlalchemy_uri(self):
        """Gets the sqlalchemy_uri of this DatabaseRestApiGet.


        :return: The sqlalchemy_uri of this DatabaseRestApiGet.
        :rtype: str
        """
        return self._sqlalchemy_uri

    @sqlalchemy_uri.setter
    def sqlalchemy_uri(self, sqlalchemy_uri):
        """Sets the sqlalchemy_uri of this DatabaseRestApiGet.


        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseRestApiGet.
        :type sqlalchemy_uri: str
        """
        if sqlalchemy_uri is None:
            raise ValueError("Invalid value for `sqlalchemy_uri`, must not be `None`")
        if sqlalchemy_uri is not None and len(sqlalchemy_uri) > 1024:
            raise ValueError("Invalid value for `sqlalchemy_uri`, length must be less than or equal to `1024`")

        self._sqlalchemy_uri = sqlalchemy_uri
