# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataBoxplotOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groupby: List[str]=None, metrics: List[object]=None, percentiles: object=None, whisker_type: str=None):
        """ChartDataBoxplotOptionsSchema - a model defined in OpenAPI

        :param groupby: The groupby of this ChartDataBoxplotOptionsSchema.
        :param metrics: The metrics of this ChartDataBoxplotOptionsSchema.
        :param percentiles: The percentiles of this ChartDataBoxplotOptionsSchema.
        :param whisker_type: The whisker_type of this ChartDataBoxplotOptionsSchema.
        """
        self.openapi_types = {
            'groupby': List[str],
            'metrics': List[object],
            'percentiles': object,
            'whisker_type': str
        }

        self.attribute_map = {
            'groupby': 'groupby',
            'metrics': 'metrics',
            'percentiles': 'percentiles',
            'whisker_type': 'whisker_type'
        }

        self._groupby = groupby
        self._metrics = metrics
        self._percentiles = percentiles
        self._whisker_type = whisker_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataBoxplotOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataBoxplotOptionsSchema of this ChartDataBoxplotOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groupby(self):
        """Gets the groupby of this ChartDataBoxplotOptionsSchema.


        :return: The groupby of this ChartDataBoxplotOptionsSchema.
        :rtype: List[str]
        """
        return self._groupby

    @groupby.setter
    def groupby(self, groupby):
        """Sets the groupby of this ChartDataBoxplotOptionsSchema.


        :param groupby: The groupby of this ChartDataBoxplotOptionsSchema.
        :type groupby: List[str]
        """

        self._groupby = groupby

    @property
    def metrics(self):
        """Gets the metrics of this ChartDataBoxplotOptionsSchema.

        Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.

        :return: The metrics of this ChartDataBoxplotOptionsSchema.
        :rtype: List[object]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ChartDataBoxplotOptionsSchema.

        Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.

        :param metrics: The metrics of this ChartDataBoxplotOptionsSchema.
        :type metrics: List[object]
        """

        self._metrics = metrics

    @property
    def percentiles(self):
        """Gets the percentiles of this ChartDataBoxplotOptionsSchema.

        Upper and lower percentiles for percentile whisker type.

        :return: The percentiles of this ChartDataBoxplotOptionsSchema.
        :rtype: object
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this ChartDataBoxplotOptionsSchema.

        Upper and lower percentiles for percentile whisker type.

        :param percentiles: The percentiles of this ChartDataBoxplotOptionsSchema.
        :type percentiles: object
        """

        self._percentiles = percentiles

    @property
    def whisker_type(self):
        """Gets the whisker_type of this ChartDataBoxplotOptionsSchema.

        Whisker type. Any numpy function will work.

        :return: The whisker_type of this ChartDataBoxplotOptionsSchema.
        :rtype: str
        """
        return self._whisker_type

    @whisker_type.setter
    def whisker_type(self, whisker_type):
        """Sets the whisker_type of this ChartDataBoxplotOptionsSchema.

        Whisker type. Any numpy function will work.

        :param whisker_type: The whisker_type of this ChartDataBoxplotOptionsSchema.
        :type whisker_type: str
        """
        allowed_values = ["tukey", "min/max", "percentile"]  # noqa: E501
        if whisker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `whisker_type` ({0}), must be one of {1}"
                .format(whisker_type, allowed_values)
            )

        self._whisker_type = whisker_type
