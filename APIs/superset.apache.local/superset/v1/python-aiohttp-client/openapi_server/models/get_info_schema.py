# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_info_schema_add_columns_value import GetInfoSchemaAddColumnsValue
from openapi_server import util


class GetInfoSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_columns: Dict[str, GetInfoSchemaAddColumnsValue]=None, edit_columns: Dict[str, GetInfoSchemaAddColumnsValue]=None, keys: List[str]=None):
        """GetInfoSchema - a model defined in OpenAPI

        :param add_columns: The add_columns of this GetInfoSchema.
        :param edit_columns: The edit_columns of this GetInfoSchema.
        :param keys: The keys of this GetInfoSchema.
        """
        self.openapi_types = {
            'add_columns': Dict[str, GetInfoSchemaAddColumnsValue],
            'edit_columns': Dict[str, GetInfoSchemaAddColumnsValue],
            'keys': List[str]
        }

        self.attribute_map = {
            'add_columns': 'add_columns',
            'edit_columns': 'edit_columns',
            'keys': 'keys'
        }

        self._add_columns = add_columns
        self._edit_columns = edit_columns
        self._keys = keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInfoSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_info_schema of this GetInfoSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_columns(self):
        """Gets the add_columns of this GetInfoSchema.


        :return: The add_columns of this GetInfoSchema.
        :rtype: Dict[str, GetInfoSchemaAddColumnsValue]
        """
        return self._add_columns

    @add_columns.setter
    def add_columns(self, add_columns):
        """Sets the add_columns of this GetInfoSchema.


        :param add_columns: The add_columns of this GetInfoSchema.
        :type add_columns: Dict[str, GetInfoSchemaAddColumnsValue]
        """

        self._add_columns = add_columns

    @property
    def edit_columns(self):
        """Gets the edit_columns of this GetInfoSchema.


        :return: The edit_columns of this GetInfoSchema.
        :rtype: Dict[str, GetInfoSchemaAddColumnsValue]
        """
        return self._edit_columns

    @edit_columns.setter
    def edit_columns(self, edit_columns):
        """Sets the edit_columns of this GetInfoSchema.


        :param edit_columns: The edit_columns of this GetInfoSchema.
        :type edit_columns: Dict[str, GetInfoSchemaAddColumnsValue]
        """

        self._edit_columns = edit_columns

    @property
    def keys(self):
        """Gets the keys of this GetInfoSchema.


        :return: The keys of this GetInfoSchema.
        :rtype: List[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this GetInfoSchema.


        :param keys: The keys of this GetInfoSchema.
        :type keys: List[str]
        """
        allowed_values = ["add_columns", "edit_columns", "filters", "permissions", "add_title", "edit_title", "none"]  # noqa: E501
        if not set(keys).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `keys` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(keys) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._keys = keys
