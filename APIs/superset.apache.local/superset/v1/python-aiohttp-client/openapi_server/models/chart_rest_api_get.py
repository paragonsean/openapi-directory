# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta10 import Meta10
from openapi_server.models.meta9 import Meta9
from openapi_server import util


class ChartRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_timeout: int=None, dashboards: Meta9=None, description: str=None, owners: Meta10=None, params: str=None, query_context: str=None, slice_name: str=None, viz_type: str=None):
        """ChartRestApiGet - a model defined in OpenAPI

        :param cache_timeout: The cache_timeout of this ChartRestApiGet.
        :param dashboards: The dashboards of this ChartRestApiGet.
        :param description: The description of this ChartRestApiGet.
        :param owners: The owners of this ChartRestApiGet.
        :param params: The params of this ChartRestApiGet.
        :param query_context: The query_context of this ChartRestApiGet.
        :param slice_name: The slice_name of this ChartRestApiGet.
        :param viz_type: The viz_type of this ChartRestApiGet.
        """
        self.openapi_types = {
            'cache_timeout': int,
            'dashboards': Meta9,
            'description': str,
            'owners': Meta10,
            'params': str,
            'query_context': str,
            'slice_name': str,
            'viz_type': str
        }

        self.attribute_map = {
            'cache_timeout': 'cache_timeout',
            'dashboards': 'dashboards',
            'description': 'description',
            'owners': 'owners',
            'params': 'params',
            'query_context': 'query_context',
            'slice_name': 'slice_name',
            'viz_type': 'viz_type'
        }

        self._cache_timeout = cache_timeout
        self._dashboards = dashboards
        self._description = description
        self._owners = owners
        self._params = params
        self._query_context = query_context
        self._slice_name = slice_name
        self._viz_type = viz_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartRestApi.get of this ChartRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this ChartRestApiGet.


        :return: The cache_timeout of this ChartRestApiGet.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this ChartRestApiGet.


        :param cache_timeout: The cache_timeout of this ChartRestApiGet.
        :type cache_timeout: int
        """

        self._cache_timeout = cache_timeout

    @property
    def dashboards(self):
        """Gets the dashboards of this ChartRestApiGet.


        :return: The dashboards of this ChartRestApiGet.
        :rtype: Meta9
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this ChartRestApiGet.


        :param dashboards: The dashboards of this ChartRestApiGet.
        :type dashboards: Meta9
        """

        self._dashboards = dashboards

    @property
    def description(self):
        """Gets the description of this ChartRestApiGet.


        :return: The description of this ChartRestApiGet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChartRestApiGet.


        :param description: The description of this ChartRestApiGet.
        :type description: str
        """

        self._description = description

    @property
    def owners(self):
        """Gets the owners of this ChartRestApiGet.


        :return: The owners of this ChartRestApiGet.
        :rtype: Meta10
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ChartRestApiGet.


        :param owners: The owners of this ChartRestApiGet.
        :type owners: Meta10
        """

        self._owners = owners

    @property
    def params(self):
        """Gets the params of this ChartRestApiGet.


        :return: The params of this ChartRestApiGet.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ChartRestApiGet.


        :param params: The params of this ChartRestApiGet.
        :type params: str
        """

        self._params = params

    @property
    def query_context(self):
        """Gets the query_context of this ChartRestApiGet.


        :return: The query_context of this ChartRestApiGet.
        :rtype: str
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this ChartRestApiGet.


        :param query_context: The query_context of this ChartRestApiGet.
        :type query_context: str
        """

        self._query_context = query_context

    @property
    def slice_name(self):
        """Gets the slice_name of this ChartRestApiGet.


        :return: The slice_name of this ChartRestApiGet.
        :rtype: str
        """
        return self._slice_name

    @slice_name.setter
    def slice_name(self, slice_name):
        """Sets the slice_name of this ChartRestApiGet.


        :param slice_name: The slice_name of this ChartRestApiGet.
        :type slice_name: str
        """
        if slice_name is not None and len(slice_name) > 250:
            raise ValueError("Invalid value for `slice_name`, length must be less than or equal to `250`")

        self._slice_name = slice_name

    @property
    def viz_type(self):
        """Gets the viz_type of this ChartRestApiGet.


        :return: The viz_type of this ChartRestApiGet.
        :rtype: str
        """
        return self._viz_type

    @viz_type.setter
    def viz_type(self, viz_type):
        """Sets the viz_type of this ChartRestApiGet.


        :param viz_type: The viz_type of this ChartRestApiGet.
        :type viz_type: str
        """
        if viz_type is not None and len(viz_type) > 250:
            raise ValueError("Invalid value for `viz_type`, length must be less than or equal to `250`")

        self._viz_type = viz_type
