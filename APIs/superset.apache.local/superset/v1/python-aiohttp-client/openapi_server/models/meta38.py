# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta38(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, recipient_config_json: str=None, type: str=None):
        """Meta38 - a model defined in OpenAPI

        :param id: The id of this Meta38.
        :param recipient_config_json: The recipient_config_json of this Meta38.
        :param type: The type of this Meta38.
        """
        self.openapi_types = {
            'id': int,
            'recipient_config_json': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'recipient_config_json': 'recipient_config_json',
            'type': 'type'
        }

        self._id = id
        self._recipient_config_json = recipient_config_json
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta38':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta38 of this Meta38.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Meta38.


        :return: The id of this Meta38.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Meta38.


        :param id: The id of this Meta38.
        :type id: int
        """

        self._id = id

    @property
    def recipient_config_json(self):
        """Gets the recipient_config_json of this Meta38.


        :return: The recipient_config_json of this Meta38.
        :rtype: str
        """
        return self._recipient_config_json

    @recipient_config_json.setter
    def recipient_config_json(self, recipient_config_json):
        """Sets the recipient_config_json of this Meta38.


        :param recipient_config_json: The recipient_config_json of this Meta38.
        :type recipient_config_json: str
        """

        self._recipient_config_json = recipient_config_json

    @property
    def type(self):
        """Gets the type of this Meta38.


        :return: The type of this Meta38.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Meta38.


        :param type: The type of this Meta38.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) > 50:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `50`")

        self._type = type
