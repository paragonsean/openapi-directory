# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_list_schema_filters_inner import GetListSchemaFiltersInner
from openapi_server import util


class GetListSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, filters: List[GetListSchemaFiltersInner]=None, keys: List[str]=None, order_column: str=None, order_direction: str=None, page: int=None, page_size: int=None):
        """GetListSchema - a model defined in OpenAPI

        :param columns: The columns of this GetListSchema.
        :param filters: The filters of this GetListSchema.
        :param keys: The keys of this GetListSchema.
        :param order_column: The order_column of this GetListSchema.
        :param order_direction: The order_direction of this GetListSchema.
        :param page: The page of this GetListSchema.
        :param page_size: The page_size of this GetListSchema.
        """
        self.openapi_types = {
            'columns': List[str],
            'filters': List[GetListSchemaFiltersInner],
            'keys': List[str],
            'order_column': str,
            'order_direction': str,
            'page': int,
            'page_size': int
        }

        self.attribute_map = {
            'columns': 'columns',
            'filters': 'filters',
            'keys': 'keys',
            'order_column': 'order_column',
            'order_direction': 'order_direction',
            'page': 'page',
            'page_size': 'page_size'
        }

        self._columns = columns
        self._filters = filters
        self._keys = keys
        self._order_column = order_column
        self._order_direction = order_direction
        self._page = page
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_list_schema of this GetListSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this GetListSchema.


        :return: The columns of this GetListSchema.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this GetListSchema.


        :param columns: The columns of this GetListSchema.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def filters(self):
        """Gets the filters of this GetListSchema.


        :return: The filters of this GetListSchema.
        :rtype: List[GetListSchemaFiltersInner]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GetListSchema.


        :param filters: The filters of this GetListSchema.
        :type filters: List[GetListSchemaFiltersInner]
        """

        self._filters = filters

    @property
    def keys(self):
        """Gets the keys of this GetListSchema.


        :return: The keys of this GetListSchema.
        :rtype: List[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this GetListSchema.


        :param keys: The keys of this GetListSchema.
        :type keys: List[str]
        """
        allowed_values = ["list_columns", "order_columns", "label_columns", "description_columns", "list_title", "none"]  # noqa: E501
        if not set(keys).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `keys` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(keys) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._keys = keys

    @property
    def order_column(self):
        """Gets the order_column of this GetListSchema.


        :return: The order_column of this GetListSchema.
        :rtype: str
        """
        return self._order_column

    @order_column.setter
    def order_column(self, order_column):
        """Sets the order_column of this GetListSchema.


        :param order_column: The order_column of this GetListSchema.
        :type order_column: str
        """

        self._order_column = order_column

    @property
    def order_direction(self):
        """Gets the order_direction of this GetListSchema.


        :return: The order_direction of this GetListSchema.
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """Sets the order_direction of this GetListSchema.


        :param order_direction: The order_direction of this GetListSchema.
        :type order_direction: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if order_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `order_direction` ({0}), must be one of {1}"
                .format(order_direction, allowed_values)
            )

        self._order_direction = order_direction

    @property
    def page(self):
        """Gets the page of this GetListSchema.


        :return: The page of this GetListSchema.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetListSchema.


        :param page: The page of this GetListSchema.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this GetListSchema.


        :return: The page_size of this GetListSchema.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GetListSchema.


        :param page_size: The page_size of this GetListSchema.
        :type page_size: int
        """

        self._page_size = page_size
