# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataAggregateOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregates: object=None):
        """ChartDataAggregateOptionsSchema - a model defined in OpenAPI

        :param aggregates: The aggregates of this ChartDataAggregateOptionsSchema.
        """
        self.openapi_types = {
            'aggregates': object
        }

        self.attribute_map = {
            'aggregates': 'aggregates'
        }

        self._aggregates = aggregates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataAggregateOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataAggregateOptionsSchema of this ChartDataAggregateOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregates(self):
        """Gets the aggregates of this ChartDataAggregateOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :return: The aggregates of this ChartDataAggregateOptionsSchema.
        :rtype: object
        """
        return self._aggregates

    @aggregates.setter
    def aggregates(self, aggregates):
        """Sets the aggregates of this ChartDataAggregateOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :param aggregates: The aggregates of this ChartDataAggregateOptionsSchema.
        :type aggregates: object
        """

        self._aggregates = aggregates
