# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataSortOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregates: object=None, columns: object=None):
        """ChartDataSortOptionsSchema - a model defined in OpenAPI

        :param aggregates: The aggregates of this ChartDataSortOptionsSchema.
        :param columns: The columns of this ChartDataSortOptionsSchema.
        """
        self.openapi_types = {
            'aggregates': object,
            'columns': object
        }

        self.attribute_map = {
            'aggregates': 'aggregates',
            'columns': 'columns'
        }

        self._aggregates = aggregates
        self._columns = columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataSortOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataSortOptionsSchema of this ChartDataSortOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregates(self):
        """Gets the aggregates of this ChartDataSortOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :return: The aggregates of this ChartDataSortOptionsSchema.
        :rtype: object
        """
        return self._aggregates

    @aggregates.setter
    def aggregates(self, aggregates):
        """Sets the aggregates of this ChartDataSortOptionsSchema.

        The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.

        :param aggregates: The aggregates of this ChartDataSortOptionsSchema.
        :type aggregates: object
        """

        self._aggregates = aggregates

    @property
    def columns(self):
        """Gets the columns of this ChartDataSortOptionsSchema.

        columns by by which to sort. The key specifies the column name, value specifies if sorting in ascending order.

        :return: The columns of this ChartDataSortOptionsSchema.
        :rtype: object
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ChartDataSortOptionsSchema.

        columns by by which to sort. The key specifies the column name, value specifies if sorting in ascending order.

        :param columns: The columns of this ChartDataSortOptionsSchema.
        :type columns: object
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")

        self._columns = columns
