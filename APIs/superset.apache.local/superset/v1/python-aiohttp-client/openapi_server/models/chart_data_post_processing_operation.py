# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataPostProcessingOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, options: object=None):
        """ChartDataPostProcessingOperation - a model defined in OpenAPI

        :param operation: The operation of this ChartDataPostProcessingOperation.
        :param options: The options of this ChartDataPostProcessingOperation.
        """
        self.openapi_types = {
            'operation': str,
            'options': object
        }

        self.attribute_map = {
            'operation': 'operation',
            'options': 'options'
        }

        self._operation = operation
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataPostProcessingOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataPostProcessingOperation of this ChartDataPostProcessingOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this ChartDataPostProcessingOperation.

        Post processing operation type

        :return: The operation of this ChartDataPostProcessingOperation.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ChartDataPostProcessingOperation.

        Post processing operation type

        :param operation: The operation of this ChartDataPostProcessingOperation.
        :type operation: str
        """
        allowed_values = ["aggregate", "boxplot", "contribution", "cum", "geodetic_parse", "geohash_decode", "geohash_encode", "pivot", "prophet", "rolling", "select", "sort", "diff", "compare"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def options(self):
        """Gets the options of this ChartDataPostProcessingOperation.

        Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.

        :return: The options of this ChartDataPostProcessingOperation.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ChartDataPostProcessingOperation.

        Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.

        :param options: The options of this ChartDataPostProcessingOperation.
        :type options: object
        """

        self._options = options
