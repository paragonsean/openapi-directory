# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidatorConfigJSON(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, op: str=None, threshold: int=None):
        """ValidatorConfigJSON - a model defined in OpenAPI

        :param op: The op of this ValidatorConfigJSON.
        :param threshold: The threshold of this ValidatorConfigJSON.
        """
        self.openapi_types = {
            'op': str,
            'threshold': int
        }

        self.attribute_map = {
            'op': 'op',
            'threshold': 'threshold'
        }

        self._op = op
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidatorConfigJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidatorConfigJSON of this ValidatorConfigJSON.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def op(self):
        """Gets the op of this ValidatorConfigJSON.

        The operation to compare with a threshold to apply to the SQL output 

        :return: The op of this ValidatorConfigJSON.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this ValidatorConfigJSON.

        The operation to compare with a threshold to apply to the SQL output 

        :param op: The op of this ValidatorConfigJSON.
        :type op: str
        """
        allowed_values = ["<", "<=", ">", ">=", "==", "!="]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def threshold(self):
        """Gets the threshold of this ValidatorConfigJSON.


        :return: The threshold of this ValidatorConfigJSON.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ValidatorConfigJSON.


        :param threshold: The threshold of this ValidatorConfigJSON.
        :type threshold: int
        """

        self._threshold = threshold
