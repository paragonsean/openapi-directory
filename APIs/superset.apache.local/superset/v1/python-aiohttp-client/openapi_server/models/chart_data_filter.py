# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, col: str=None, op: str=None, val: object=None):
        """ChartDataFilter - a model defined in OpenAPI

        :param col: The col of this ChartDataFilter.
        :param op: The op of this ChartDataFilter.
        :param val: The val of this ChartDataFilter.
        """
        self.openapi_types = {
            'col': str,
            'op': str,
            'val': object
        }

        self.attribute_map = {
            'col': 'col',
            'op': 'op',
            'val': 'val'
        }

        self._col = col
        self._op = op
        self._val = val

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataFilter of this ChartDataFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def col(self):
        """Gets the col of this ChartDataFilter.

        The column to filter.

        :return: The col of this ChartDataFilter.
        :rtype: str
        """
        return self._col

    @col.setter
    def col(self, col):
        """Sets the col of this ChartDataFilter.

        The column to filter.

        :param col: The col of this ChartDataFilter.
        :type col: str
        """
        if col is None:
            raise ValueError("Invalid value for `col`, must not be `None`")

        self._col = col

    @property
    def op(self):
        """Gets the op of this ChartDataFilter.

        The comparison operator.

        :return: The op of this ChartDataFilter.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this ChartDataFilter.

        The comparison operator.

        :param op: The op of this ChartDataFilter.
        :type op: str
        """
        allowed_values = ["==", "!=", ">", "<", ">=", "<=", "LIKE", "ILIKE", "IS NULL", "IS NOT NULL", "IN", "NOT IN", "REGEX", "IS TRUE", "IS FALSE"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def val(self):
        """Gets the val of this ChartDataFilter.

        The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.

        :return: The val of this ChartDataFilter.
        :rtype: object
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this ChartDataFilter.

        The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.

        :param val: The val of this ChartDataFilter.
        :type val: object
        """

        self._val = val
