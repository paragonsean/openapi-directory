# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseAvailableGet200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_drivers: List[str]=None, default_driver: str=None, engine: str=None, name: str=None, parameters: object=None, preferred: bool=None, sqlalchemy_uri_placeholder: str=None):
        """DatabaseAvailableGet200ResponseInner - a model defined in OpenAPI

        :param available_drivers: The available_drivers of this DatabaseAvailableGet200ResponseInner.
        :param default_driver: The default_driver of this DatabaseAvailableGet200ResponseInner.
        :param engine: The engine of this DatabaseAvailableGet200ResponseInner.
        :param name: The name of this DatabaseAvailableGet200ResponseInner.
        :param parameters: The parameters of this DatabaseAvailableGet200ResponseInner.
        :param preferred: The preferred of this DatabaseAvailableGet200ResponseInner.
        :param sqlalchemy_uri_placeholder: The sqlalchemy_uri_placeholder of this DatabaseAvailableGet200ResponseInner.
        """
        self.openapi_types = {
            'available_drivers': List[str],
            'default_driver': str,
            'engine': str,
            'name': str,
            'parameters': object,
            'preferred': bool,
            'sqlalchemy_uri_placeholder': str
        }

        self.attribute_map = {
            'available_drivers': 'available_drivers',
            'default_driver': 'default_driver',
            'engine': 'engine',
            'name': 'name',
            'parameters': 'parameters',
            'preferred': 'preferred',
            'sqlalchemy_uri_placeholder': 'sqlalchemy_uri_placeholder'
        }

        self._available_drivers = available_drivers
        self._default_driver = default_driver
        self._engine = engine
        self._name = name
        self._parameters = parameters
        self._preferred = preferred
        self._sqlalchemy_uri_placeholder = sqlalchemy_uri_placeholder

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAvailableGet200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _database_available__get_200_response_inner of this DatabaseAvailableGet200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_drivers(self):
        """Gets the available_drivers of this DatabaseAvailableGet200ResponseInner.

        Installed drivers for the engine

        :return: The available_drivers of this DatabaseAvailableGet200ResponseInner.
        :rtype: List[str]
        """
        return self._available_drivers

    @available_drivers.setter
    def available_drivers(self, available_drivers):
        """Sets the available_drivers of this DatabaseAvailableGet200ResponseInner.

        Installed drivers for the engine

        :param available_drivers: The available_drivers of this DatabaseAvailableGet200ResponseInner.
        :type available_drivers: List[str]
        """

        self._available_drivers = available_drivers

    @property
    def default_driver(self):
        """Gets the default_driver of this DatabaseAvailableGet200ResponseInner.

        Default driver for the engine

        :return: The default_driver of this DatabaseAvailableGet200ResponseInner.
        :rtype: str
        """
        return self._default_driver

    @default_driver.setter
    def default_driver(self, default_driver):
        """Sets the default_driver of this DatabaseAvailableGet200ResponseInner.

        Default driver for the engine

        :param default_driver: The default_driver of this DatabaseAvailableGet200ResponseInner.
        :type default_driver: str
        """

        self._default_driver = default_driver

    @property
    def engine(self):
        """Gets the engine of this DatabaseAvailableGet200ResponseInner.

        Name of the SQLAlchemy engine

        :return: The engine of this DatabaseAvailableGet200ResponseInner.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DatabaseAvailableGet200ResponseInner.

        Name of the SQLAlchemy engine

        :param engine: The engine of this DatabaseAvailableGet200ResponseInner.
        :type engine: str
        """

        self._engine = engine

    @property
    def name(self):
        """Gets the name of this DatabaseAvailableGet200ResponseInner.

        Name of the database

        :return: The name of this DatabaseAvailableGet200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseAvailableGet200ResponseInner.

        Name of the database

        :param name: The name of this DatabaseAvailableGet200ResponseInner.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this DatabaseAvailableGet200ResponseInner.

        JSON schema defining the needed parameters

        :return: The parameters of this DatabaseAvailableGet200ResponseInner.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatabaseAvailableGet200ResponseInner.

        JSON schema defining the needed parameters

        :param parameters: The parameters of this DatabaseAvailableGet200ResponseInner.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def preferred(self):
        """Gets the preferred of this DatabaseAvailableGet200ResponseInner.

        Is the database preferred?

        :return: The preferred of this DatabaseAvailableGet200ResponseInner.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this DatabaseAvailableGet200ResponseInner.

        Is the database preferred?

        :param preferred: The preferred of this DatabaseAvailableGet200ResponseInner.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def sqlalchemy_uri_placeholder(self):
        """Gets the sqlalchemy_uri_placeholder of this DatabaseAvailableGet200ResponseInner.

        Example placeholder for the SQLAlchemy URI

        :return: The sqlalchemy_uri_placeholder of this DatabaseAvailableGet200ResponseInner.
        :rtype: str
        """
        return self._sqlalchemy_uri_placeholder

    @sqlalchemy_uri_placeholder.setter
    def sqlalchemy_uri_placeholder(self, sqlalchemy_uri_placeholder):
        """Sets the sqlalchemy_uri_placeholder of this DatabaseAvailableGet200ResponseInner.

        Example placeholder for the SQLAlchemy URI

        :param sqlalchemy_uri_placeholder: The sqlalchemy_uri_placeholder of this DatabaseAvailableGet200ResponseInner.
        :type sqlalchemy_uri_placeholder: str
        """

        self._sqlalchemy_uri_placeholder = sqlalchemy_uri_placeholder
