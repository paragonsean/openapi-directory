# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnotationLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_type: str=None, color: str=None, description_columns: List[str]=None, hide_line: bool=None, interval_end_column: str=None, name: str=None, opacity: str=None, overrides: Dict[str, object]=None, show: bool=None, show_markers: bool=None, source_type: str=None, style: str=None, time_column: str=None, title_column: str=None, value: object=None, width: float=None):
        """AnnotationLayer - a model defined in OpenAPI

        :param annotation_type: The annotation_type of this AnnotationLayer.
        :param color: The color of this AnnotationLayer.
        :param description_columns: The description_columns of this AnnotationLayer.
        :param hide_line: The hide_line of this AnnotationLayer.
        :param interval_end_column: The interval_end_column of this AnnotationLayer.
        :param name: The name of this AnnotationLayer.
        :param opacity: The opacity of this AnnotationLayer.
        :param overrides: The overrides of this AnnotationLayer.
        :param show: The show of this AnnotationLayer.
        :param show_markers: The show_markers of this AnnotationLayer.
        :param source_type: The source_type of this AnnotationLayer.
        :param style: The style of this AnnotationLayer.
        :param time_column: The time_column of this AnnotationLayer.
        :param title_column: The title_column of this AnnotationLayer.
        :param value: The value of this AnnotationLayer.
        :param width: The width of this AnnotationLayer.
        """
        self.openapi_types = {
            'annotation_type': str,
            'color': str,
            'description_columns': List[str],
            'hide_line': bool,
            'interval_end_column': str,
            'name': str,
            'opacity': str,
            'overrides': Dict[str, object],
            'show': bool,
            'show_markers': bool,
            'source_type': str,
            'style': str,
            'time_column': str,
            'title_column': str,
            'value': object,
            'width': float
        }

        self.attribute_map = {
            'annotation_type': 'annotationType',
            'color': 'color',
            'description_columns': 'descriptionColumns',
            'hide_line': 'hideLine',
            'interval_end_column': 'intervalEndColumn',
            'name': 'name',
            'opacity': 'opacity',
            'overrides': 'overrides',
            'show': 'show',
            'show_markers': 'showMarkers',
            'source_type': 'sourceType',
            'style': 'style',
            'time_column': 'timeColumn',
            'title_column': 'titleColumn',
            'value': 'value',
            'width': 'width'
        }

        self._annotation_type = annotation_type
        self._color = color
        self._description_columns = description_columns
        self._hide_line = hide_line
        self._interval_end_column = interval_end_column
        self._name = name
        self._opacity = opacity
        self._overrides = overrides
        self._show = show
        self._show_markers = show_markers
        self._source_type = source_type
        self._style = style
        self._time_column = time_column
        self._title_column = title_column
        self._value = value
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationLayer of this AnnotationLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_type(self):
        """Gets the annotation_type of this AnnotationLayer.

        Type of annotation layer

        :return: The annotation_type of this AnnotationLayer.
        :rtype: str
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this AnnotationLayer.

        Type of annotation layer

        :param annotation_type: The annotation_type of this AnnotationLayer.
        :type annotation_type: str
        """
        allowed_values = ["FORMULA", "INTERVAL", "EVENT", "TIME_SERIES"]  # noqa: E501
        if annotation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `annotation_type` ({0}), must be one of {1}"
                .format(annotation_type, allowed_values)
            )

        self._annotation_type = annotation_type

    @property
    def color(self):
        """Gets the color of this AnnotationLayer.

        Layer color

        :return: The color of this AnnotationLayer.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AnnotationLayer.

        Layer color

        :param color: The color of this AnnotationLayer.
        :type color: str
        """

        self._color = color

    @property
    def description_columns(self):
        """Gets the description_columns of this AnnotationLayer.

        Columns to use as the description. If none are provided, all will be shown.

        :return: The description_columns of this AnnotationLayer.
        :rtype: List[str]
        """
        return self._description_columns

    @description_columns.setter
    def description_columns(self, description_columns):
        """Sets the description_columns of this AnnotationLayer.

        Columns to use as the description. If none are provided, all will be shown.

        :param description_columns: The description_columns of this AnnotationLayer.
        :type description_columns: List[str]
        """

        self._description_columns = description_columns

    @property
    def hide_line(self):
        """Gets the hide_line of this AnnotationLayer.

        Should line be hidden. Only applies to line annotations

        :return: The hide_line of this AnnotationLayer.
        :rtype: bool
        """
        return self._hide_line

    @hide_line.setter
    def hide_line(self, hide_line):
        """Sets the hide_line of this AnnotationLayer.

        Should line be hidden. Only applies to line annotations

        :param hide_line: The hide_line of this AnnotationLayer.
        :type hide_line: bool
        """

        self._hide_line = hide_line

    @property
    def interval_end_column(self):
        """Gets the interval_end_column of this AnnotationLayer.

        Column containing end of interval. Only applies to interval layers

        :return: The interval_end_column of this AnnotationLayer.
        :rtype: str
        """
        return self._interval_end_column

    @interval_end_column.setter
    def interval_end_column(self, interval_end_column):
        """Sets the interval_end_column of this AnnotationLayer.

        Column containing end of interval. Only applies to interval layers

        :param interval_end_column: The interval_end_column of this AnnotationLayer.
        :type interval_end_column: str
        """

        self._interval_end_column = interval_end_column

    @property
    def name(self):
        """Gets the name of this AnnotationLayer.

        Name of layer

        :return: The name of this AnnotationLayer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnnotationLayer.

        Name of layer

        :param name: The name of this AnnotationLayer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def opacity(self):
        """Gets the opacity of this AnnotationLayer.

        Opacity of layer

        :return: The opacity of this AnnotationLayer.
        :rtype: str
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this AnnotationLayer.

        Opacity of layer

        :param opacity: The opacity of this AnnotationLayer.
        :type opacity: str
        """
        allowed_values = [None,"", "opacityLow", "opacityMedium", "opacityHigh"]  # noqa: E501
        if opacity not in allowed_values:
            raise ValueError(
                "Invalid value for `opacity` ({0}), must be one of {1}"
                .format(opacity, allowed_values)
            )

        self._opacity = opacity

    @property
    def overrides(self):
        """Gets the overrides of this AnnotationLayer.

        which properties should be overridable

        :return: The overrides of this AnnotationLayer.
        :rtype: Dict[str, object]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this AnnotationLayer.

        which properties should be overridable

        :param overrides: The overrides of this AnnotationLayer.
        :type overrides: Dict[str, object]
        """

        self._overrides = overrides

    @property
    def show(self):
        """Gets the show of this AnnotationLayer.

        Should the layer be shown

        :return: The show of this AnnotationLayer.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this AnnotationLayer.

        Should the layer be shown

        :param show: The show of this AnnotationLayer.
        :type show: bool
        """
        if show is None:
            raise ValueError("Invalid value for `show`, must not be `None`")

        self._show = show

    @property
    def show_markers(self):
        """Gets the show_markers of this AnnotationLayer.

        Should markers be shown. Only applies to line annotations.

        :return: The show_markers of this AnnotationLayer.
        :rtype: bool
        """
        return self._show_markers

    @show_markers.setter
    def show_markers(self, show_markers):
        """Sets the show_markers of this AnnotationLayer.

        Should markers be shown. Only applies to line annotations.

        :param show_markers: The show_markers of this AnnotationLayer.
        :type show_markers: bool
        """
        if show_markers is None:
            raise ValueError("Invalid value for `show_markers`, must not be `None`")

        self._show_markers = show_markers

    @property
    def source_type(self):
        """Gets the source_type of this AnnotationLayer.

        Type of source for annotation data

        :return: The source_type of this AnnotationLayer.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AnnotationLayer.

        Type of source for annotation data

        :param source_type: The source_type of this AnnotationLayer.
        :type source_type: str
        """
        allowed_values = ["", "line", "NATIVE", "table"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def style(self):
        """Gets the style of this AnnotationLayer.

        Line style. Only applies to time-series annotations

        :return: The style of this AnnotationLayer.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this AnnotationLayer.

        Line style. Only applies to time-series annotations

        :param style: The style of this AnnotationLayer.
        :type style: str
        """
        allowed_values = ["dashed", "dotted", "solid", "longDashed"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def time_column(self):
        """Gets the time_column of this AnnotationLayer.

        Column with event date or interval start date

        :return: The time_column of this AnnotationLayer.
        :rtype: str
        """
        return self._time_column

    @time_column.setter
    def time_column(self, time_column):
        """Sets the time_column of this AnnotationLayer.

        Column with event date or interval start date

        :param time_column: The time_column of this AnnotationLayer.
        :type time_column: str
        """

        self._time_column = time_column

    @property
    def title_column(self):
        """Gets the title_column of this AnnotationLayer.

        Column with title

        :return: The title_column of this AnnotationLayer.
        :rtype: str
        """
        return self._title_column

    @title_column.setter
    def title_column(self, title_column):
        """Sets the title_column of this AnnotationLayer.

        Column with title

        :param title_column: The title_column of this AnnotationLayer.
        :type title_column: str
        """

        self._title_column = title_column

    @property
    def value(self):
        """Gets the value of this AnnotationLayer.

        For formula annotations, this contains the formula. For other types, this is the primary key of the source object.

        :return: The value of this AnnotationLayer.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AnnotationLayer.

        For formula annotations, this contains the formula. For other types, this is the primary key of the source object.

        :param value: The value of this AnnotationLayer.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def width(self):
        """Gets the width of this AnnotationLayer.

        Width of annotation line

        :return: The width of this AnnotationLayer.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AnnotationLayer.

        Width of annotation line

        :param width: The width of this AnnotationLayer.
        :type width: float
        """
        if width is not None and width < 0:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")

        self._width = width
