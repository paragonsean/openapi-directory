# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_layer import AnnotationLayer
from openapi_server.models.chart_data_datasource import ChartDataDatasource
from openapi_server.models.chart_data_extras import ChartDataExtras
from openapi_server.models.chart_data_filter import ChartDataFilter
from openapi_server.models.chart_data_post_processing_operation import ChartDataPostProcessingOperation
from openapi_server import util


class ChartDataQueryObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_layers: List[AnnotationLayer]=None, applied_time_extras: object=None, apply_fetch_values_predicate: bool=None, columns: List[str]=None, datasource: ChartDataDatasource=None, druid_time_origin: str=None, extras: ChartDataExtras=None, filters: List[ChartDataFilter]=None, granularity: str=None, granularity_sqla: str=None, groupby: List[str]=None, having: str=None, having_filters: List[ChartDataFilter]=None, is_rowcount: bool=None, is_timeseries: bool=None, metrics: List[object]=None, order_desc: bool=None, orderby: List[object]=None, post_processing: List[ChartDataPostProcessingOperation]=None, result_type: object=None, row_limit: int=None, row_offset: int=None, time_offsets: List[str]=None, time_range: str=None, time_shift: str=None, timeseries_limit: int=None, timeseries_limit_metric: object=None, url_params: Dict[str, str]=None, where: str=None):
        """ChartDataQueryObject - a model defined in OpenAPI

        :param annotation_layers: The annotation_layers of this ChartDataQueryObject.
        :param applied_time_extras: The applied_time_extras of this ChartDataQueryObject.
        :param apply_fetch_values_predicate: The apply_fetch_values_predicate of this ChartDataQueryObject.
        :param columns: The columns of this ChartDataQueryObject.
        :param datasource: The datasource of this ChartDataQueryObject.
        :param druid_time_origin: The druid_time_origin of this ChartDataQueryObject.
        :param extras: The extras of this ChartDataQueryObject.
        :param filters: The filters of this ChartDataQueryObject.
        :param granularity: The granularity of this ChartDataQueryObject.
        :param granularity_sqla: The granularity_sqla of this ChartDataQueryObject.
        :param groupby: The groupby of this ChartDataQueryObject.
        :param having: The having of this ChartDataQueryObject.
        :param having_filters: The having_filters of this ChartDataQueryObject.
        :param is_rowcount: The is_rowcount of this ChartDataQueryObject.
        :param is_timeseries: The is_timeseries of this ChartDataQueryObject.
        :param metrics: The metrics of this ChartDataQueryObject.
        :param order_desc: The order_desc of this ChartDataQueryObject.
        :param orderby: The orderby of this ChartDataQueryObject.
        :param post_processing: The post_processing of this ChartDataQueryObject.
        :param result_type: The result_type of this ChartDataQueryObject.
        :param row_limit: The row_limit of this ChartDataQueryObject.
        :param row_offset: The row_offset of this ChartDataQueryObject.
        :param time_offsets: The time_offsets of this ChartDataQueryObject.
        :param time_range: The time_range of this ChartDataQueryObject.
        :param time_shift: The time_shift of this ChartDataQueryObject.
        :param timeseries_limit: The timeseries_limit of this ChartDataQueryObject.
        :param timeseries_limit_metric: The timeseries_limit_metric of this ChartDataQueryObject.
        :param url_params: The url_params of this ChartDataQueryObject.
        :param where: The where of this ChartDataQueryObject.
        """
        self.openapi_types = {
            'annotation_layers': List[AnnotationLayer],
            'applied_time_extras': object,
            'apply_fetch_values_predicate': bool,
            'columns': List[str],
            'datasource': ChartDataDatasource,
            'druid_time_origin': str,
            'extras': ChartDataExtras,
            'filters': List[ChartDataFilter],
            'granularity': str,
            'granularity_sqla': str,
            'groupby': List[str],
            'having': str,
            'having_filters': List[ChartDataFilter],
            'is_rowcount': bool,
            'is_timeseries': bool,
            'metrics': List[object],
            'order_desc': bool,
            'orderby': List[object],
            'post_processing': List[ChartDataPostProcessingOperation],
            'result_type': object,
            'row_limit': int,
            'row_offset': int,
            'time_offsets': List[str],
            'time_range': str,
            'time_shift': str,
            'timeseries_limit': int,
            'timeseries_limit_metric': object,
            'url_params': Dict[str, str],
            'where': str
        }

        self.attribute_map = {
            'annotation_layers': 'annotation_layers',
            'applied_time_extras': 'applied_time_extras',
            'apply_fetch_values_predicate': 'apply_fetch_values_predicate',
            'columns': 'columns',
            'datasource': 'datasource',
            'druid_time_origin': 'druid_time_origin',
            'extras': 'extras',
            'filters': 'filters',
            'granularity': 'granularity',
            'granularity_sqla': 'granularity_sqla',
            'groupby': 'groupby',
            'having': 'having',
            'having_filters': 'having_filters',
            'is_rowcount': 'is_rowcount',
            'is_timeseries': 'is_timeseries',
            'metrics': 'metrics',
            'order_desc': 'order_desc',
            'orderby': 'orderby',
            'post_processing': 'post_processing',
            'result_type': 'result_type',
            'row_limit': 'row_limit',
            'row_offset': 'row_offset',
            'time_offsets': 'time_offsets',
            'time_range': 'time_range',
            'time_shift': 'time_shift',
            'timeseries_limit': 'timeseries_limit',
            'timeseries_limit_metric': 'timeseries_limit_metric',
            'url_params': 'url_params',
            'where': 'where'
        }

        self._annotation_layers = annotation_layers
        self._applied_time_extras = applied_time_extras
        self._apply_fetch_values_predicate = apply_fetch_values_predicate
        self._columns = columns
        self._datasource = datasource
        self._druid_time_origin = druid_time_origin
        self._extras = extras
        self._filters = filters
        self._granularity = granularity
        self._granularity_sqla = granularity_sqla
        self._groupby = groupby
        self._having = having
        self._having_filters = having_filters
        self._is_rowcount = is_rowcount
        self._is_timeseries = is_timeseries
        self._metrics = metrics
        self._order_desc = order_desc
        self._orderby = orderby
        self._post_processing = post_processing
        self._result_type = result_type
        self._row_limit = row_limit
        self._row_offset = row_offset
        self._time_offsets = time_offsets
        self._time_range = time_range
        self._time_shift = time_shift
        self._timeseries_limit = timeseries_limit
        self._timeseries_limit_metric = timeseries_limit_metric
        self._url_params = url_params
        self._where = where

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataQueryObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataQueryObject of this ChartDataQueryObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_layers(self):
        """Gets the annotation_layers of this ChartDataQueryObject.

        Annotation layers to apply to chart

        :return: The annotation_layers of this ChartDataQueryObject.
        :rtype: List[AnnotationLayer]
        """
        return self._annotation_layers

    @annotation_layers.setter
    def annotation_layers(self, annotation_layers):
        """Sets the annotation_layers of this ChartDataQueryObject.

        Annotation layers to apply to chart

        :param annotation_layers: The annotation_layers of this ChartDataQueryObject.
        :type annotation_layers: List[AnnotationLayer]
        """

        self._annotation_layers = annotation_layers

    @property
    def applied_time_extras(self):
        """Gets the applied_time_extras of this ChartDataQueryObject.

        A mapping of temporal extras that have been applied to the query

        :return: The applied_time_extras of this ChartDataQueryObject.
        :rtype: object
        """
        return self._applied_time_extras

    @applied_time_extras.setter
    def applied_time_extras(self, applied_time_extras):
        """Sets the applied_time_extras of this ChartDataQueryObject.

        A mapping of temporal extras that have been applied to the query

        :param applied_time_extras: The applied_time_extras of this ChartDataQueryObject.
        :type applied_time_extras: object
        """

        self._applied_time_extras = applied_time_extras

    @property
    def apply_fetch_values_predicate(self):
        """Gets the apply_fetch_values_predicate of this ChartDataQueryObject.

        Add fetch values predicate (where clause) to query if defined in datasource

        :return: The apply_fetch_values_predicate of this ChartDataQueryObject.
        :rtype: bool
        """
        return self._apply_fetch_values_predicate

    @apply_fetch_values_predicate.setter
    def apply_fetch_values_predicate(self, apply_fetch_values_predicate):
        """Sets the apply_fetch_values_predicate of this ChartDataQueryObject.

        Add fetch values predicate (where clause) to query if defined in datasource

        :param apply_fetch_values_predicate: The apply_fetch_values_predicate of this ChartDataQueryObject.
        :type apply_fetch_values_predicate: bool
        """

        self._apply_fetch_values_predicate = apply_fetch_values_predicate

    @property
    def columns(self):
        """Gets the columns of this ChartDataQueryObject.

        Columns which to select in the query.

        :return: The columns of this ChartDataQueryObject.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ChartDataQueryObject.

        Columns which to select in the query.

        :param columns: The columns of this ChartDataQueryObject.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def datasource(self):
        """Gets the datasource of this ChartDataQueryObject.


        :return: The datasource of this ChartDataQueryObject.
        :rtype: ChartDataDatasource
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this ChartDataQueryObject.


        :param datasource: The datasource of this ChartDataQueryObject.
        :type datasource: ChartDataDatasource
        """

        self._datasource = datasource

    @property
    def druid_time_origin(self):
        """Gets the druid_time_origin of this ChartDataQueryObject.

        Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week. This field is deprecated and should be passed to `extras` as `druid_time_origin`.

        :return: The druid_time_origin of this ChartDataQueryObject.
        :rtype: str
        """
        return self._druid_time_origin

    @druid_time_origin.setter
    def druid_time_origin(self, druid_time_origin):
        """Sets the druid_time_origin of this ChartDataQueryObject.

        Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week. This field is deprecated and should be passed to `extras` as `druid_time_origin`.

        :param druid_time_origin: The druid_time_origin of this ChartDataQueryObject.
        :type druid_time_origin: str
        """

        self._druid_time_origin = druid_time_origin

    @property
    def extras(self):
        """Gets the extras of this ChartDataQueryObject.

        Extra parameters to add to the query.

        :return: The extras of this ChartDataQueryObject.
        :rtype: ChartDataExtras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this ChartDataQueryObject.

        Extra parameters to add to the query.

        :param extras: The extras of this ChartDataQueryObject.
        :type extras: ChartDataExtras
        """

        self._extras = extras

    @property
    def filters(self):
        """Gets the filters of this ChartDataQueryObject.


        :return: The filters of this ChartDataQueryObject.
        :rtype: List[ChartDataFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ChartDataQueryObject.


        :param filters: The filters of this ChartDataQueryObject.
        :type filters: List[ChartDataFilter]
        """

        self._filters = filters

    @property
    def granularity(self):
        """Gets the granularity of this ChartDataQueryObject.

        Name of temporal column used for time filtering. For legacy Druid datasources this defines the time grain.

        :return: The granularity of this ChartDataQueryObject.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this ChartDataQueryObject.

        Name of temporal column used for time filtering. For legacy Druid datasources this defines the time grain.

        :param granularity: The granularity of this ChartDataQueryObject.
        :type granularity: str
        """

        self._granularity = granularity

    @property
    def granularity_sqla(self):
        """Gets the granularity_sqla of this ChartDataQueryObject.

        Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use `granularity` instead.

        :return: The granularity_sqla of this ChartDataQueryObject.
        :rtype: str
        """
        return self._granularity_sqla

    @granularity_sqla.setter
    def granularity_sqla(self, granularity_sqla):
        """Sets the granularity_sqla of this ChartDataQueryObject.

        Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use `granularity` instead.

        :param granularity_sqla: The granularity_sqla of this ChartDataQueryObject.
        :type granularity_sqla: str
        """

        self._granularity_sqla = granularity_sqla

    @property
    def groupby(self):
        """Gets the groupby of this ChartDataQueryObject.


        :return: The groupby of this ChartDataQueryObject.
        :rtype: List[str]
        """
        return self._groupby

    @groupby.setter
    def groupby(self, groupby):
        """Sets the groupby of this ChartDataQueryObject.


        :param groupby: The groupby of this ChartDataQueryObject.
        :type groupby: List[str]
        """

        self._groupby = groupby

    @property
    def having(self):
        """Gets the having of this ChartDataQueryObject.

        HAVING clause to be added to aggregate queries using AND operator. This field is deprecated and should be passed to `extras`.

        :return: The having of this ChartDataQueryObject.
        :rtype: str
        """
        return self._having

    @having.setter
    def having(self, having):
        """Sets the having of this ChartDataQueryObject.

        HAVING clause to be added to aggregate queries using AND operator. This field is deprecated and should be passed to `extras`.

        :param having: The having of this ChartDataQueryObject.
        :type having: str
        """

        self._having = having

    @property
    def having_filters(self):
        """Gets the having_filters of this ChartDataQueryObject.

        HAVING filters to be added to legacy Druid datasource queries. This field is deprecated and should be passed to `extras` as `having_druid`.

        :return: The having_filters of this ChartDataQueryObject.
        :rtype: List[ChartDataFilter]
        """
        return self._having_filters

    @having_filters.setter
    def having_filters(self, having_filters):
        """Sets the having_filters of this ChartDataQueryObject.

        HAVING filters to be added to legacy Druid datasource queries. This field is deprecated and should be passed to `extras` as `having_druid`.

        :param having_filters: The having_filters of this ChartDataQueryObject.
        :type having_filters: List[ChartDataFilter]
        """

        self._having_filters = having_filters

    @property
    def is_rowcount(self):
        """Gets the is_rowcount of this ChartDataQueryObject.

        Should the rowcount of the actual query be returned

        :return: The is_rowcount of this ChartDataQueryObject.
        :rtype: bool
        """
        return self._is_rowcount

    @is_rowcount.setter
    def is_rowcount(self, is_rowcount):
        """Sets the is_rowcount of this ChartDataQueryObject.

        Should the rowcount of the actual query be returned

        :param is_rowcount: The is_rowcount of this ChartDataQueryObject.
        :type is_rowcount: bool
        """

        self._is_rowcount = is_rowcount

    @property
    def is_timeseries(self):
        """Gets the is_timeseries of this ChartDataQueryObject.

        Is the `query_object` a timeseries.

        :return: The is_timeseries of this ChartDataQueryObject.
        :rtype: bool
        """
        return self._is_timeseries

    @is_timeseries.setter
    def is_timeseries(self, is_timeseries):
        """Sets the is_timeseries of this ChartDataQueryObject.

        Is the `query_object` a timeseries.

        :param is_timeseries: The is_timeseries of this ChartDataQueryObject.
        :type is_timeseries: bool
        """

        self._is_timeseries = is_timeseries

    @property
    def metrics(self):
        """Gets the metrics of this ChartDataQueryObject.

        Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.

        :return: The metrics of this ChartDataQueryObject.
        :rtype: List[object]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ChartDataQueryObject.

        Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.

        :param metrics: The metrics of this ChartDataQueryObject.
        :type metrics: List[object]
        """

        self._metrics = metrics

    @property
    def order_desc(self):
        """Gets the order_desc of this ChartDataQueryObject.

        Reverse order. Default: `false`

        :return: The order_desc of this ChartDataQueryObject.
        :rtype: bool
        """
        return self._order_desc

    @order_desc.setter
    def order_desc(self, order_desc):
        """Sets the order_desc of this ChartDataQueryObject.

        Reverse order. Default: `false`

        :param order_desc: The order_desc of this ChartDataQueryObject.
        :type order_desc: bool
        """

        self._order_desc = order_desc

    @property
    def orderby(self):
        """Gets the orderby of this ChartDataQueryObject.

        Expects a list of lists where the first element is the column name which to sort by, and the second element is a boolean.

        :return: The orderby of this ChartDataQueryObject.
        :rtype: List[object]
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this ChartDataQueryObject.

        Expects a list of lists where the first element is the column name which to sort by, and the second element is a boolean.

        :param orderby: The orderby of this ChartDataQueryObject.
        :type orderby: List[object]
        """

        self._orderby = orderby

    @property
    def post_processing(self):
        """Gets the post_processing of this ChartDataQueryObject.

        Post processing operations to be applied to the result set. Operations are applied to the result set in sequential order.

        :return: The post_processing of this ChartDataQueryObject.
        :rtype: List[ChartDataPostProcessingOperation]
        """
        return self._post_processing

    @post_processing.setter
    def post_processing(self, post_processing):
        """Sets the post_processing of this ChartDataQueryObject.

        Post processing operations to be applied to the result set. Operations are applied to the result set in sequential order.

        :param post_processing: The post_processing of this ChartDataQueryObject.
        :type post_processing: List[ChartDataPostProcessingOperation]
        """

        self._post_processing = post_processing

    @property
    def result_type(self):
        """Gets the result_type of this ChartDataQueryObject.


        :return: The result_type of this ChartDataQueryObject.
        :rtype: object
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this ChartDataQueryObject.


        :param result_type: The result_type of this ChartDataQueryObject.
        :type result_type: object
        """

        self._result_type = result_type

    @property
    def row_limit(self):
        """Gets the row_limit of this ChartDataQueryObject.

        Maximum row count (0=disabled). Default: `config[\"ROW_LIMIT\"]`

        :return: The row_limit of this ChartDataQueryObject.
        :rtype: int
        """
        return self._row_limit

    @row_limit.setter
    def row_limit(self, row_limit):
        """Sets the row_limit of this ChartDataQueryObject.

        Maximum row count (0=disabled). Default: `config[\"ROW_LIMIT\"]`

        :param row_limit: The row_limit of this ChartDataQueryObject.
        :type row_limit: int
        """
        if row_limit is not None and row_limit < 0:
            raise ValueError("Invalid value for `row_limit`, must be a value greater than or equal to `0`")

        self._row_limit = row_limit

    @property
    def row_offset(self):
        """Gets the row_offset of this ChartDataQueryObject.

        Number of rows to skip. Default: `0`

        :return: The row_offset of this ChartDataQueryObject.
        :rtype: int
        """
        return self._row_offset

    @row_offset.setter
    def row_offset(self, row_offset):
        """Sets the row_offset of this ChartDataQueryObject.

        Number of rows to skip. Default: `0`

        :param row_offset: The row_offset of this ChartDataQueryObject.
        :type row_offset: int
        """
        if row_offset is not None and row_offset < 0:
            raise ValueError("Invalid value for `row_offset`, must be a value greater than or equal to `0`")

        self._row_offset = row_offset

    @property
    def time_offsets(self):
        """Gets the time_offsets of this ChartDataQueryObject.


        :return: The time_offsets of this ChartDataQueryObject.
        :rtype: List[str]
        """
        return self._time_offsets

    @time_offsets.setter
    def time_offsets(self, time_offsets):
        """Sets the time_offsets of this ChartDataQueryObject.


        :param time_offsets: The time_offsets of this ChartDataQueryObject.
        :type time_offsets: List[str]
        """

        self._time_offsets = time_offsets

    @property
    def time_range(self):
        """Gets the time_range of this ChartDataQueryObject.

        A time rage, either expressed as a colon separated string `since : until` or human readable freeform. Valid formats for `since` and `until` are:  - ISO 8601 - X days/years/hours/day/year/weeks - X days/years/hours/day/year/weeks ago - X days/years/hours/day/year/weeks from now  Additionally, the following freeform can be used:  - Last day - Last week - Last month - Last quarter - Last year - No filter - Last X seconds/minutes/hours/days/weeks/months/years - Next X seconds/minutes/hours/days/weeks/months/years 

        :return: The time_range of this ChartDataQueryObject.
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this ChartDataQueryObject.

        A time rage, either expressed as a colon separated string `since : until` or human readable freeform. Valid formats for `since` and `until` are:  - ISO 8601 - X days/years/hours/day/year/weeks - X days/years/hours/day/year/weeks ago - X days/years/hours/day/year/weeks from now  Additionally, the following freeform can be used:  - Last day - Last week - Last month - Last quarter - Last year - No filter - Last X seconds/minutes/hours/days/weeks/months/years - Next X seconds/minutes/hours/days/weeks/months/years 

        :param time_range: The time_range of this ChartDataQueryObject.
        :type time_range: str
        """

        self._time_range = time_range

    @property
    def time_shift(self):
        """Gets the time_shift of this ChartDataQueryObject.

        A human-readable date/time string. Please refer to [parsdatetime](https://github.com/bear/parsedatetime) documentation for details on valid values.

        :return: The time_shift of this ChartDataQueryObject.
        :rtype: str
        """
        return self._time_shift

    @time_shift.setter
    def time_shift(self, time_shift):
        """Sets the time_shift of this ChartDataQueryObject.

        A human-readable date/time string. Please refer to [parsdatetime](https://github.com/bear/parsedatetime) documentation for details on valid values.

        :param time_shift: The time_shift of this ChartDataQueryObject.
        :type time_shift: str
        """

        self._time_shift = time_shift

    @property
    def timeseries_limit(self):
        """Gets the timeseries_limit of this ChartDataQueryObject.

        Maximum row count for timeseries queries. Default: `0`

        :return: The timeseries_limit of this ChartDataQueryObject.
        :rtype: int
        """
        return self._timeseries_limit

    @timeseries_limit.setter
    def timeseries_limit(self, timeseries_limit):
        """Sets the timeseries_limit of this ChartDataQueryObject.

        Maximum row count for timeseries queries. Default: `0`

        :param timeseries_limit: The timeseries_limit of this ChartDataQueryObject.
        :type timeseries_limit: int
        """

        self._timeseries_limit = timeseries_limit

    @property
    def timeseries_limit_metric(self):
        """Gets the timeseries_limit_metric of this ChartDataQueryObject.

        Metric used to limit timeseries queries by.

        :return: The timeseries_limit_metric of this ChartDataQueryObject.
        :rtype: object
        """
        return self._timeseries_limit_metric

    @timeseries_limit_metric.setter
    def timeseries_limit_metric(self, timeseries_limit_metric):
        """Sets the timeseries_limit_metric of this ChartDataQueryObject.

        Metric used to limit timeseries queries by.

        :param timeseries_limit_metric: The timeseries_limit_metric of this ChartDataQueryObject.
        :type timeseries_limit_metric: object
        """

        self._timeseries_limit_metric = timeseries_limit_metric

    @property
    def url_params(self):
        """Gets the url_params of this ChartDataQueryObject.

        Optional query parameters passed to a dashboard or Explore view

        :return: The url_params of this ChartDataQueryObject.
        :rtype: Dict[str, str]
        """
        return self._url_params

    @url_params.setter
    def url_params(self, url_params):
        """Sets the url_params of this ChartDataQueryObject.

        Optional query parameters passed to a dashboard or Explore view

        :param url_params: The url_params of this ChartDataQueryObject.
        :type url_params: Dict[str, str]
        """

        self._url_params = url_params

    @property
    def where(self):
        """Gets the where of this ChartDataQueryObject.

        WHERE clause to be added to queries using AND operator.This field is deprecated and should be passed to `extras`.

        :return: The where of this ChartDataQueryObject.
        :rtype: str
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this ChartDataQueryObject.

        WHERE clause to be added to queries using AND operator.This field is deprecated and should be passed to `extras`.

        :param where: The where of this ChartDataQueryObject.
        :type where: str
        """

        self._where = where
