# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta27(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None):
        """Meta27 - a model defined in OpenAPI

        :param database_name: The database_name of this Meta27.
        """
        self.openapi_types = {
            'database_name': str
        }

        self.attribute_map = {
            'database_name': 'database_name'
        }

        self._database_name = database_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta27':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta27 of this Meta27.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this Meta27.


        :return: The database_name of this Meta27.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Meta27.


        :param database_name: The database_name of this Meta27.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 250:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `250`")

        self._database_name = database_name
