# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta13 import Meta13
from openapi_server import util


class CssTemplateRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: Meta13=None, css: str=None, id: int=None, template_name: str=None):
        """CssTemplateRestApiGet - a model defined in OpenAPI

        :param created_by: The created_by of this CssTemplateRestApiGet.
        :param css: The css of this CssTemplateRestApiGet.
        :param id: The id of this CssTemplateRestApiGet.
        :param template_name: The template_name of this CssTemplateRestApiGet.
        """
        self.openapi_types = {
            'created_by': Meta13,
            'css': str,
            'id': int,
            'template_name': str
        }

        self.attribute_map = {
            'created_by': 'created_by',
            'css': 'css',
            'id': 'id',
            'template_name': 'template_name'
        }

        self._created_by = created_by
        self._css = css
        self._id = id
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CssTemplateRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CssTemplateRestApi.get of this CssTemplateRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this CssTemplateRestApiGet.


        :return: The created_by of this CssTemplateRestApiGet.
        :rtype: Meta13
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CssTemplateRestApiGet.


        :param created_by: The created_by of this CssTemplateRestApiGet.
        :type created_by: Meta13
        """

        self._created_by = created_by

    @property
    def css(self):
        """Gets the css of this CssTemplateRestApiGet.


        :return: The css of this CssTemplateRestApiGet.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this CssTemplateRestApiGet.


        :param css: The css of this CssTemplateRestApiGet.
        :type css: str
        """

        self._css = css

    @property
    def id(self):
        """Gets the id of this CssTemplateRestApiGet.


        :return: The id of this CssTemplateRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CssTemplateRestApiGet.


        :param id: The id of this CssTemplateRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def template_name(self):
        """Gets the template_name of this CssTemplateRestApiGet.


        :return: The template_name of this CssTemplateRestApiGet.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CssTemplateRestApiGet.


        :param template_name: The template_name of this CssTemplateRestApiGet.
        :type template_name: str
        """
        if template_name is not None and len(template_name) > 250:
            raise ValueError("Invalid value for `template_name`, length must be less than or equal to `250`")

        self._template_name = template_name
