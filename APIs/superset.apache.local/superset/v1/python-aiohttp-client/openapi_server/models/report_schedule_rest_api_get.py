# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta37 import Meta37
from openapi_server.models.meta38 import Meta38
from openapi_server.models.meta39 import Meta39
from openapi_server.models.meta40 import Meta40
from openapi_server.models.meta41 import Meta41
from openapi_server import util


class ReportScheduleRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, chart: Meta40=None, context_markdown: str=None, creation_method: str=None, crontab: str=None, dashboard: Meta41=None, database: Meta37=None, description: str=None, grace_period: int=None, id: int=None, last_eval_dttm: datetime=None, last_state: str=None, last_value: float=None, last_value_row_json: str=None, log_retention: int=None, name: str=None, owners: Meta39=None, recipients: Meta38=None, report_format: str=None, sql: str=None, timezone: str=None, type: str=None, validator_config_json: str=None, validator_type: str=None, working_timeout: int=None):
        """ReportScheduleRestApiGet - a model defined in OpenAPI

        :param active: The active of this ReportScheduleRestApiGet.
        :param chart: The chart of this ReportScheduleRestApiGet.
        :param context_markdown: The context_markdown of this ReportScheduleRestApiGet.
        :param creation_method: The creation_method of this ReportScheduleRestApiGet.
        :param crontab: The crontab of this ReportScheduleRestApiGet.
        :param dashboard: The dashboard of this ReportScheduleRestApiGet.
        :param database: The database of this ReportScheduleRestApiGet.
        :param description: The description of this ReportScheduleRestApiGet.
        :param grace_period: The grace_period of this ReportScheduleRestApiGet.
        :param id: The id of this ReportScheduleRestApiGet.
        :param last_eval_dttm: The last_eval_dttm of this ReportScheduleRestApiGet.
        :param last_state: The last_state of this ReportScheduleRestApiGet.
        :param last_value: The last_value of this ReportScheduleRestApiGet.
        :param last_value_row_json: The last_value_row_json of this ReportScheduleRestApiGet.
        :param log_retention: The log_retention of this ReportScheduleRestApiGet.
        :param name: The name of this ReportScheduleRestApiGet.
        :param owners: The owners of this ReportScheduleRestApiGet.
        :param recipients: The recipients of this ReportScheduleRestApiGet.
        :param report_format: The report_format of this ReportScheduleRestApiGet.
        :param sql: The sql of this ReportScheduleRestApiGet.
        :param timezone: The timezone of this ReportScheduleRestApiGet.
        :param type: The type of this ReportScheduleRestApiGet.
        :param validator_config_json: The validator_config_json of this ReportScheduleRestApiGet.
        :param validator_type: The validator_type of this ReportScheduleRestApiGet.
        :param working_timeout: The working_timeout of this ReportScheduleRestApiGet.
        """
        self.openapi_types = {
            'active': bool,
            'chart': Meta40,
            'context_markdown': str,
            'creation_method': str,
            'crontab': str,
            'dashboard': Meta41,
            'database': Meta37,
            'description': str,
            'grace_period': int,
            'id': int,
            'last_eval_dttm': datetime,
            'last_state': str,
            'last_value': float,
            'last_value_row_json': str,
            'log_retention': int,
            'name': str,
            'owners': Meta39,
            'recipients': Meta38,
            'report_format': str,
            'sql': str,
            'timezone': str,
            'type': str,
            'validator_config_json': str,
            'validator_type': str,
            'working_timeout': int
        }

        self.attribute_map = {
            'active': 'active',
            'chart': 'chart',
            'context_markdown': 'context_markdown',
            'creation_method': 'creation_method',
            'crontab': 'crontab',
            'dashboard': 'dashboard',
            'database': 'database',
            'description': 'description',
            'grace_period': 'grace_period',
            'id': 'id',
            'last_eval_dttm': 'last_eval_dttm',
            'last_state': 'last_state',
            'last_value': 'last_value',
            'last_value_row_json': 'last_value_row_json',
            'log_retention': 'log_retention',
            'name': 'name',
            'owners': 'owners',
            'recipients': 'recipients',
            'report_format': 'report_format',
            'sql': 'sql',
            'timezone': 'timezone',
            'type': 'type',
            'validator_config_json': 'validator_config_json',
            'validator_type': 'validator_type',
            'working_timeout': 'working_timeout'
        }

        self._active = active
        self._chart = chart
        self._context_markdown = context_markdown
        self._creation_method = creation_method
        self._crontab = crontab
        self._dashboard = dashboard
        self._database = database
        self._description = description
        self._grace_period = grace_period
        self._id = id
        self._last_eval_dttm = last_eval_dttm
        self._last_state = last_state
        self._last_value = last_value
        self._last_value_row_json = last_value_row_json
        self._log_retention = log_retention
        self._name = name
        self._owners = owners
        self._recipients = recipients
        self._report_format = report_format
        self._sql = sql
        self._timezone = timezone
        self._type = type
        self._validator_config_json = validator_config_json
        self._validator_type = validator_type
        self._working_timeout = working_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportScheduleRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportScheduleRestApi.get of this ReportScheduleRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ReportScheduleRestApiGet.


        :return: The active of this ReportScheduleRestApiGet.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReportScheduleRestApiGet.


        :param active: The active of this ReportScheduleRestApiGet.
        :type active: bool
        """

        self._active = active

    @property
    def chart(self):
        """Gets the chart of this ReportScheduleRestApiGet.


        :return: The chart of this ReportScheduleRestApiGet.
        :rtype: Meta40
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ReportScheduleRestApiGet.


        :param chart: The chart of this ReportScheduleRestApiGet.
        :type chart: Meta40
        """

        self._chart = chart

    @property
    def context_markdown(self):
        """Gets the context_markdown of this ReportScheduleRestApiGet.


        :return: The context_markdown of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._context_markdown

    @context_markdown.setter
    def context_markdown(self, context_markdown):
        """Sets the context_markdown of this ReportScheduleRestApiGet.


        :param context_markdown: The context_markdown of this ReportScheduleRestApiGet.
        :type context_markdown: str
        """

        self._context_markdown = context_markdown

    @property
    def creation_method(self):
        """Gets the creation_method of this ReportScheduleRestApiGet.


        :return: The creation_method of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._creation_method

    @creation_method.setter
    def creation_method(self, creation_method):
        """Sets the creation_method of this ReportScheduleRestApiGet.


        :param creation_method: The creation_method of this ReportScheduleRestApiGet.
        :type creation_method: str
        """
        if creation_method is not None and len(creation_method) > 255:
            raise ValueError("Invalid value for `creation_method`, length must be less than or equal to `255`")

        self._creation_method = creation_method

    @property
    def crontab(self):
        """Gets the crontab of this ReportScheduleRestApiGet.


        :return: The crontab of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this ReportScheduleRestApiGet.


        :param crontab: The crontab of this ReportScheduleRestApiGet.
        :type crontab: str
        """
        if crontab is None:
            raise ValueError("Invalid value for `crontab`, must not be `None`")
        if crontab is not None and len(crontab) > 1000:
            raise ValueError("Invalid value for `crontab`, length must be less than or equal to `1000`")

        self._crontab = crontab

    @property
    def dashboard(self):
        """Gets the dashboard of this ReportScheduleRestApiGet.


        :return: The dashboard of this ReportScheduleRestApiGet.
        :rtype: Meta41
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this ReportScheduleRestApiGet.


        :param dashboard: The dashboard of this ReportScheduleRestApiGet.
        :type dashboard: Meta41
        """

        self._dashboard = dashboard

    @property
    def database(self):
        """Gets the database of this ReportScheduleRestApiGet.


        :return: The database of this ReportScheduleRestApiGet.
        :rtype: Meta37
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ReportScheduleRestApiGet.


        :param database: The database of this ReportScheduleRestApiGet.
        :type database: Meta37
        """

        self._database = database

    @property
    def description(self):
        """Gets the description of this ReportScheduleRestApiGet.


        :return: The description of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportScheduleRestApiGet.


        :param description: The description of this ReportScheduleRestApiGet.
        :type description: str
        """

        self._description = description

    @property
    def grace_period(self):
        """Gets the grace_period of this ReportScheduleRestApiGet.


        :return: The grace_period of this ReportScheduleRestApiGet.
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this ReportScheduleRestApiGet.


        :param grace_period: The grace_period of this ReportScheduleRestApiGet.
        :type grace_period: int
        """

        self._grace_period = grace_period

    @property
    def id(self):
        """Gets the id of this ReportScheduleRestApiGet.


        :return: The id of this ReportScheduleRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportScheduleRestApiGet.


        :param id: The id of this ReportScheduleRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def last_eval_dttm(self):
        """Gets the last_eval_dttm of this ReportScheduleRestApiGet.


        :return: The last_eval_dttm of this ReportScheduleRestApiGet.
        :rtype: datetime
        """
        return self._last_eval_dttm

    @last_eval_dttm.setter
    def last_eval_dttm(self, last_eval_dttm):
        """Sets the last_eval_dttm of this ReportScheduleRestApiGet.


        :param last_eval_dttm: The last_eval_dttm of this ReportScheduleRestApiGet.
        :type last_eval_dttm: datetime
        """

        self._last_eval_dttm = last_eval_dttm

    @property
    def last_state(self):
        """Gets the last_state of this ReportScheduleRestApiGet.


        :return: The last_state of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._last_state

    @last_state.setter
    def last_state(self, last_state):
        """Sets the last_state of this ReportScheduleRestApiGet.


        :param last_state: The last_state of this ReportScheduleRestApiGet.
        :type last_state: str
        """
        if last_state is not None and len(last_state) > 50:
            raise ValueError("Invalid value for `last_state`, length must be less than or equal to `50`")

        self._last_state = last_state

    @property
    def last_value(self):
        """Gets the last_value of this ReportScheduleRestApiGet.


        :return: The last_value of this ReportScheduleRestApiGet.
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this ReportScheduleRestApiGet.


        :param last_value: The last_value of this ReportScheduleRestApiGet.
        :type last_value: float
        """

        self._last_value = last_value

    @property
    def last_value_row_json(self):
        """Gets the last_value_row_json of this ReportScheduleRestApiGet.


        :return: The last_value_row_json of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._last_value_row_json

    @last_value_row_json.setter
    def last_value_row_json(self, last_value_row_json):
        """Sets the last_value_row_json of this ReportScheduleRestApiGet.


        :param last_value_row_json: The last_value_row_json of this ReportScheduleRestApiGet.
        :type last_value_row_json: str
        """

        self._last_value_row_json = last_value_row_json

    @property
    def log_retention(self):
        """Gets the log_retention of this ReportScheduleRestApiGet.


        :return: The log_retention of this ReportScheduleRestApiGet.
        :rtype: int
        """
        return self._log_retention

    @log_retention.setter
    def log_retention(self, log_retention):
        """Sets the log_retention of this ReportScheduleRestApiGet.


        :param log_retention: The log_retention of this ReportScheduleRestApiGet.
        :type log_retention: int
        """

        self._log_retention = log_retention

    @property
    def name(self):
        """Gets the name of this ReportScheduleRestApiGet.


        :return: The name of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportScheduleRestApiGet.


        :param name: The name of this ReportScheduleRestApiGet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")

        self._name = name

    @property
    def owners(self):
        """Gets the owners of this ReportScheduleRestApiGet.


        :return: The owners of this ReportScheduleRestApiGet.
        :rtype: Meta39
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ReportScheduleRestApiGet.


        :param owners: The owners of this ReportScheduleRestApiGet.
        :type owners: Meta39
        """

        self._owners = owners

    @property
    def recipients(self):
        """Gets the recipients of this ReportScheduleRestApiGet.


        :return: The recipients of this ReportScheduleRestApiGet.
        :rtype: Meta38
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ReportScheduleRestApiGet.


        :param recipients: The recipients of this ReportScheduleRestApiGet.
        :type recipients: Meta38
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def report_format(self):
        """Gets the report_format of this ReportScheduleRestApiGet.


        :return: The report_format of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._report_format

    @report_format.setter
    def report_format(self, report_format):
        """Sets the report_format of this ReportScheduleRestApiGet.


        :param report_format: The report_format of this ReportScheduleRestApiGet.
        :type report_format: str
        """
        if report_format is not None and len(report_format) > 50:
            raise ValueError("Invalid value for `report_format`, length must be less than or equal to `50`")

        self._report_format = report_format

    @property
    def sql(self):
        """Gets the sql of this ReportScheduleRestApiGet.


        :return: The sql of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this ReportScheduleRestApiGet.


        :param sql: The sql of this ReportScheduleRestApiGet.
        :type sql: str
        """

        self._sql = sql

    @property
    def timezone(self):
        """Gets the timezone of this ReportScheduleRestApiGet.


        :return: The timezone of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ReportScheduleRestApiGet.


        :param timezone: The timezone of this ReportScheduleRestApiGet.
        :type timezone: str
        """
        if timezone is not None and len(timezone) > 100:
            raise ValueError("Invalid value for `timezone`, length must be less than or equal to `100`")

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this ReportScheduleRestApiGet.


        :return: The type of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportScheduleRestApiGet.


        :param type: The type of this ReportScheduleRestApiGet.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) > 50:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `50`")

        self._type = type

    @property
    def validator_config_json(self):
        """Gets the validator_config_json of this ReportScheduleRestApiGet.


        :return: The validator_config_json of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._validator_config_json

    @validator_config_json.setter
    def validator_config_json(self, validator_config_json):
        """Sets the validator_config_json of this ReportScheduleRestApiGet.


        :param validator_config_json: The validator_config_json of this ReportScheduleRestApiGet.
        :type validator_config_json: str
        """

        self._validator_config_json = validator_config_json

    @property
    def validator_type(self):
        """Gets the validator_type of this ReportScheduleRestApiGet.


        :return: The validator_type of this ReportScheduleRestApiGet.
        :rtype: str
        """
        return self._validator_type

    @validator_type.setter
    def validator_type(self, validator_type):
        """Sets the validator_type of this ReportScheduleRestApiGet.


        :param validator_type: The validator_type of this ReportScheduleRestApiGet.
        :type validator_type: str
        """
        if validator_type is not None and len(validator_type) > 100:
            raise ValueError("Invalid value for `validator_type`, length must be less than or equal to `100`")

        self._validator_type = validator_type

    @property
    def working_timeout(self):
        """Gets the working_timeout of this ReportScheduleRestApiGet.


        :return: The working_timeout of this ReportScheduleRestApiGet.
        :rtype: int
        """
        return self._working_timeout

    @working_timeout.setter
    def working_timeout(self, working_timeout):
        """Sets the working_timeout of this ReportScheduleRestApiGet.


        :param working_timeout: The working_timeout of this ReportScheduleRestApiGet.
        :type working_timeout: int
        """

        self._working_timeout = working_timeout
