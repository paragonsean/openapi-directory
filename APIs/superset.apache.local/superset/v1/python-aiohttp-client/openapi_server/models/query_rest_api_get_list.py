# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta26 import Meta26
from openapi_server.models.meta27 import Meta27
from openapi_server import util


class QueryRestApiGetList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_on: datetime=None, database: Meta27=None, end_time: float=None, executed_sql: str=None, id: int=None, rows: int=None, _schema: str=None, sql: str=None, sql_tables: object=None, start_time: float=None, status: str=None, tab_name: str=None, tmp_table_name: str=None, tracking_url: str=None, user: Meta26=None):
        """QueryRestApiGetList - a model defined in OpenAPI

        :param changed_on: The changed_on of this QueryRestApiGetList.
        :param database: The database of this QueryRestApiGetList.
        :param end_time: The end_time of this QueryRestApiGetList.
        :param executed_sql: The executed_sql of this QueryRestApiGetList.
        :param id: The id of this QueryRestApiGetList.
        :param rows: The rows of this QueryRestApiGetList.
        :param _schema: The _schema of this QueryRestApiGetList.
        :param sql: The sql of this QueryRestApiGetList.
        :param sql_tables: The sql_tables of this QueryRestApiGetList.
        :param start_time: The start_time of this QueryRestApiGetList.
        :param status: The status of this QueryRestApiGetList.
        :param tab_name: The tab_name of this QueryRestApiGetList.
        :param tmp_table_name: The tmp_table_name of this QueryRestApiGetList.
        :param tracking_url: The tracking_url of this QueryRestApiGetList.
        :param user: The user of this QueryRestApiGetList.
        """
        self.openapi_types = {
            'changed_on': datetime,
            'database': Meta27,
            'end_time': float,
            'executed_sql': str,
            'id': int,
            'rows': int,
            '_schema': str,
            'sql': str,
            'sql_tables': object,
            'start_time': float,
            'status': str,
            'tab_name': str,
            'tmp_table_name': str,
            'tracking_url': str,
            'user': Meta26
        }

        self.attribute_map = {
            'changed_on': 'changed_on',
            'database': 'database',
            'end_time': 'end_time',
            'executed_sql': 'executed_sql',
            'id': 'id',
            'rows': 'rows',
            '_schema': 'schema',
            'sql': 'sql',
            'sql_tables': 'sql_tables',
            'start_time': 'start_time',
            'status': 'status',
            'tab_name': 'tab_name',
            'tmp_table_name': 'tmp_table_name',
            'tracking_url': 'tracking_url',
            'user': 'user'
        }

        self._changed_on = changed_on
        self._database = database
        self._end_time = end_time
        self._executed_sql = executed_sql
        self._id = id
        self._rows = rows
        self.__schema = _schema
        self._sql = sql
        self._sql_tables = sql_tables
        self._start_time = start_time
        self._status = status
        self._tab_name = tab_name
        self._tmp_table_name = tmp_table_name
        self._tracking_url = tracking_url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRestApiGetList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRestApi.get_list of this QueryRestApiGetList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_on(self):
        """Gets the changed_on of this QueryRestApiGetList.


        :return: The changed_on of this QueryRestApiGetList.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on):
        """Sets the changed_on of this QueryRestApiGetList.


        :param changed_on: The changed_on of this QueryRestApiGetList.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def database(self):
        """Gets the database of this QueryRestApiGetList.


        :return: The database of this QueryRestApiGetList.
        :rtype: Meta27
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this QueryRestApiGetList.


        :param database: The database of this QueryRestApiGetList.
        :type database: Meta27
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def end_time(self):
        """Gets the end_time of this QueryRestApiGetList.


        :return: The end_time of this QueryRestApiGetList.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this QueryRestApiGetList.


        :param end_time: The end_time of this QueryRestApiGetList.
        :type end_time: float
        """

        self._end_time = end_time

    @property
    def executed_sql(self):
        """Gets the executed_sql of this QueryRestApiGetList.


        :return: The executed_sql of this QueryRestApiGetList.
        :rtype: str
        """
        return self._executed_sql

    @executed_sql.setter
    def executed_sql(self, executed_sql):
        """Sets the executed_sql of this QueryRestApiGetList.


        :param executed_sql: The executed_sql of this QueryRestApiGetList.
        :type executed_sql: str
        """

        self._executed_sql = executed_sql

    @property
    def id(self):
        """Gets the id of this QueryRestApiGetList.


        :return: The id of this QueryRestApiGetList.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryRestApiGetList.


        :param id: The id of this QueryRestApiGetList.
        :type id: int
        """

        self._id = id

    @property
    def rows(self):
        """Gets the rows of this QueryRestApiGetList.


        :return: The rows of this QueryRestApiGetList.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QueryRestApiGetList.


        :param rows: The rows of this QueryRestApiGetList.
        :type rows: int
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this QueryRestApiGetList.


        :return: The _schema of this QueryRestApiGetList.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this QueryRestApiGetList.


        :param _schema: The _schema of this QueryRestApiGetList.
        :type _schema: str
        """
        if _schema is not None and len(_schema) > 256:
            raise ValueError("Invalid value for `_schema`, length must be less than or equal to `256`")

        self.__schema = _schema

    @property
    def sql(self):
        """Gets the sql of this QueryRestApiGetList.


        :return: The sql of this QueryRestApiGetList.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this QueryRestApiGetList.


        :param sql: The sql of this QueryRestApiGetList.
        :type sql: str
        """

        self._sql = sql

    @property
    def sql_tables(self):
        """Gets the sql_tables of this QueryRestApiGetList.


        :return: The sql_tables of this QueryRestApiGetList.
        :rtype: object
        """
        return self._sql_tables

    @sql_tables.setter
    def sql_tables(self, sql_tables):
        """Sets the sql_tables of this QueryRestApiGetList.


        :param sql_tables: The sql_tables of this QueryRestApiGetList.
        :type sql_tables: object
        """

        self._sql_tables = sql_tables

    @property
    def start_time(self):
        """Gets the start_time of this QueryRestApiGetList.


        :return: The start_time of this QueryRestApiGetList.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this QueryRestApiGetList.


        :param start_time: The start_time of this QueryRestApiGetList.
        :type start_time: float
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this QueryRestApiGetList.


        :return: The status of this QueryRestApiGetList.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryRestApiGetList.


        :param status: The status of this QueryRestApiGetList.
        :type status: str
        """
        if status is not None and len(status) > 16:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `16`")

        self._status = status

    @property
    def tab_name(self):
        """Gets the tab_name of this QueryRestApiGetList.


        :return: The tab_name of this QueryRestApiGetList.
        :rtype: str
        """
        return self._tab_name

    @tab_name.setter
    def tab_name(self, tab_name):
        """Sets the tab_name of this QueryRestApiGetList.


        :param tab_name: The tab_name of this QueryRestApiGetList.
        :type tab_name: str
        """
        if tab_name is not None and len(tab_name) > 256:
            raise ValueError("Invalid value for `tab_name`, length must be less than or equal to `256`")

        self._tab_name = tab_name

    @property
    def tmp_table_name(self):
        """Gets the tmp_table_name of this QueryRestApiGetList.


        :return: The tmp_table_name of this QueryRestApiGetList.
        :rtype: str
        """
        return self._tmp_table_name

    @tmp_table_name.setter
    def tmp_table_name(self, tmp_table_name):
        """Sets the tmp_table_name of this QueryRestApiGetList.


        :param tmp_table_name: The tmp_table_name of this QueryRestApiGetList.
        :type tmp_table_name: str
        """
        if tmp_table_name is not None and len(tmp_table_name) > 256:
            raise ValueError("Invalid value for `tmp_table_name`, length must be less than or equal to `256`")

        self._tmp_table_name = tmp_table_name

    @property
    def tracking_url(self):
        """Gets the tracking_url of this QueryRestApiGetList.


        :return: The tracking_url of this QueryRestApiGetList.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this QueryRestApiGetList.


        :param tracking_url: The tracking_url of this QueryRestApiGetList.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url

    @property
    def user(self):
        """Gets the user of this QueryRestApiGetList.


        :return: The user of this QueryRestApiGetList.
        :rtype: Meta26
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryRestApiGetList.


        :param user: The user of this QueryRestApiGetList.
        :type user: Meta26
        """

        self._user = user
