# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data_column import ChartDataColumn
from openapi_server import util


class ChartDataAdhocMetricSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate: str=None, column: ChartDataColumn=None, expression_type: str=None, has_custom_label: bool=None, label: str=None, option_name: str=None, sql_expression: str=None):
        """ChartDataAdhocMetricSchema - a model defined in OpenAPI

        :param aggregate: The aggregate of this ChartDataAdhocMetricSchema.
        :param column: The column of this ChartDataAdhocMetricSchema.
        :param expression_type: The expression_type of this ChartDataAdhocMetricSchema.
        :param has_custom_label: The has_custom_label of this ChartDataAdhocMetricSchema.
        :param label: The label of this ChartDataAdhocMetricSchema.
        :param option_name: The option_name of this ChartDataAdhocMetricSchema.
        :param sql_expression: The sql_expression of this ChartDataAdhocMetricSchema.
        """
        self.openapi_types = {
            'aggregate': str,
            'column': ChartDataColumn,
            'expression_type': str,
            'has_custom_label': bool,
            'label': str,
            'option_name': str,
            'sql_expression': str
        }

        self.attribute_map = {
            'aggregate': 'aggregate',
            'column': 'column',
            'expression_type': 'expressionType',
            'has_custom_label': 'hasCustomLabel',
            'label': 'label',
            'option_name': 'optionName',
            'sql_expression': 'sqlExpression'
        }

        self._aggregate = aggregate
        self._column = column
        self._expression_type = expression_type
        self._has_custom_label = has_custom_label
        self._label = label
        self._option_name = option_name
        self._sql_expression = sql_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataAdhocMetricSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataAdhocMetricSchema of this ChartDataAdhocMetricSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate(self):
        """Gets the aggregate of this ChartDataAdhocMetricSchema.

        Aggregation operator. Only required for simple expression types.

        :return: The aggregate of this ChartDataAdhocMetricSchema.
        :rtype: str
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this ChartDataAdhocMetricSchema.

        Aggregation operator. Only required for simple expression types.

        :param aggregate: The aggregate of this ChartDataAdhocMetricSchema.
        :type aggregate: str
        """
        allowed_values = ["AVG", "COUNT", "COUNT_DISTINCT", "MAX", "MIN", "SUM"]  # noqa: E501
        if aggregate not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate` ({0}), must be one of {1}"
                .format(aggregate, allowed_values)
            )

        self._aggregate = aggregate

    @property
    def column(self):
        """Gets the column of this ChartDataAdhocMetricSchema.


        :return: The column of this ChartDataAdhocMetricSchema.
        :rtype: ChartDataColumn
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ChartDataAdhocMetricSchema.


        :param column: The column of this ChartDataAdhocMetricSchema.
        :type column: ChartDataColumn
        """

        self._column = column

    @property
    def expression_type(self):
        """Gets the expression_type of this ChartDataAdhocMetricSchema.

        Simple or SQL metric

        :return: The expression_type of this ChartDataAdhocMetricSchema.
        :rtype: str
        """
        return self._expression_type

    @expression_type.setter
    def expression_type(self, expression_type):
        """Sets the expression_type of this ChartDataAdhocMetricSchema.

        Simple or SQL metric

        :param expression_type: The expression_type of this ChartDataAdhocMetricSchema.
        :type expression_type: str
        """
        allowed_values = ["SIMPLE", "SQL"]  # noqa: E501
        if expression_type not in allowed_values:
            raise ValueError(
                "Invalid value for `expression_type` ({0}), must be one of {1}"
                .format(expression_type, allowed_values)
            )

        self._expression_type = expression_type

    @property
    def has_custom_label(self):
        """Gets the has_custom_label of this ChartDataAdhocMetricSchema.

        When false, the label will be automatically generated based on the aggregate expression. When true, a custom label has to be specified.

        :return: The has_custom_label of this ChartDataAdhocMetricSchema.
        :rtype: bool
        """
        return self._has_custom_label

    @has_custom_label.setter
    def has_custom_label(self, has_custom_label):
        """Sets the has_custom_label of this ChartDataAdhocMetricSchema.

        When false, the label will be automatically generated based on the aggregate expression. When true, a custom label has to be specified.

        :param has_custom_label: The has_custom_label of this ChartDataAdhocMetricSchema.
        :type has_custom_label: bool
        """

        self._has_custom_label = has_custom_label

    @property
    def label(self):
        """Gets the label of this ChartDataAdhocMetricSchema.

        Label for the metric. Is automatically generated unless hasCustomLabel is true, in which case label must be defined.

        :return: The label of this ChartDataAdhocMetricSchema.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ChartDataAdhocMetricSchema.

        Label for the metric. Is automatically generated unless hasCustomLabel is true, in which case label must be defined.

        :param label: The label of this ChartDataAdhocMetricSchema.
        :type label: str
        """

        self._label = label

    @property
    def option_name(self):
        """Gets the option_name of this ChartDataAdhocMetricSchema.

        Unique identifier. Can be any string value, as long as all metrics have a unique identifier. If undefined, a random name will be generated.

        :return: The option_name of this ChartDataAdhocMetricSchema.
        :rtype: str
        """
        return self._option_name

    @option_name.setter
    def option_name(self, option_name):
        """Sets the option_name of this ChartDataAdhocMetricSchema.

        Unique identifier. Can be any string value, as long as all metrics have a unique identifier. If undefined, a random name will be generated.

        :param option_name: The option_name of this ChartDataAdhocMetricSchema.
        :type option_name: str
        """

        self._option_name = option_name

    @property
    def sql_expression(self):
        """Gets the sql_expression of this ChartDataAdhocMetricSchema.

        The metric as defined by a SQL aggregate expression. Only required for SQL expression type.

        :return: The sql_expression of this ChartDataAdhocMetricSchema.
        :rtype: str
        """
        return self._sql_expression

    @sql_expression.setter
    def sql_expression(self, sql_expression):
        """Sets the sql_expression of this ChartDataAdhocMetricSchema.

        The metric as defined by a SQL aggregate expression. Only required for SQL expression type.

        :param sql_expression: The sql_expression of this ChartDataAdhocMetricSchema.
        :type sql_expression: str
        """

        self._sql_expression = sql_expression
