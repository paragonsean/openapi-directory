# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data_datasource import ChartDataDatasource
from openapi_server.models.chart_data_query_object import ChartDataQueryObject
from openapi_server import util


class ChartDataQueryContextSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasource: ChartDataDatasource=None, force: bool=None, queries: List[ChartDataQueryObject]=None, result_format: object=None, result_type: object=None):
        """ChartDataQueryContextSchema - a model defined in OpenAPI

        :param datasource: The datasource of this ChartDataQueryContextSchema.
        :param force: The force of this ChartDataQueryContextSchema.
        :param queries: The queries of this ChartDataQueryContextSchema.
        :param result_format: The result_format of this ChartDataQueryContextSchema.
        :param result_type: The result_type of this ChartDataQueryContextSchema.
        """
        self.openapi_types = {
            'datasource': ChartDataDatasource,
            'force': bool,
            'queries': List[ChartDataQueryObject],
            'result_format': object,
            'result_type': object
        }

        self.attribute_map = {
            'datasource': 'datasource',
            'force': 'force',
            'queries': 'queries',
            'result_format': 'result_format',
            'result_type': 'result_type'
        }

        self._datasource = datasource
        self._force = force
        self._queries = queries
        self._result_format = result_format
        self._result_type = result_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataQueryContextSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataQueryContextSchema of this ChartDataQueryContextSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasource(self):
        """Gets the datasource of this ChartDataQueryContextSchema.


        :return: The datasource of this ChartDataQueryContextSchema.
        :rtype: ChartDataDatasource
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this ChartDataQueryContextSchema.


        :param datasource: The datasource of this ChartDataQueryContextSchema.
        :type datasource: ChartDataDatasource
        """

        self._datasource = datasource

    @property
    def force(self):
        """Gets the force of this ChartDataQueryContextSchema.

        Should the queries be forced to load from the source. Default: `false`

        :return: The force of this ChartDataQueryContextSchema.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this ChartDataQueryContextSchema.

        Should the queries be forced to load from the source. Default: `false`

        :param force: The force of this ChartDataQueryContextSchema.
        :type force: bool
        """

        self._force = force

    @property
    def queries(self):
        """Gets the queries of this ChartDataQueryContextSchema.


        :return: The queries of this ChartDataQueryContextSchema.
        :rtype: List[ChartDataQueryObject]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this ChartDataQueryContextSchema.


        :param queries: The queries of this ChartDataQueryContextSchema.
        :type queries: List[ChartDataQueryObject]
        """

        self._queries = queries

    @property
    def result_format(self):
        """Gets the result_format of this ChartDataQueryContextSchema.


        :return: The result_format of this ChartDataQueryContextSchema.
        :rtype: object
        """
        return self._result_format

    @result_format.setter
    def result_format(self, result_format):
        """Sets the result_format of this ChartDataQueryContextSchema.


        :param result_format: The result_format of this ChartDataQueryContextSchema.
        :type result_format: object
        """

        self._result_format = result_format

    @property
    def result_type(self):
        """Gets the result_type of this ChartDataQueryContextSchema.


        :return: The result_type of this ChartDataQueryContextSchema.
        :rtype: object
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this ChartDataQueryContextSchema.


        :param result_type: The result_type of this ChartDataQueryContextSchema.
        :type result_type: object
        """

        self._result_type = result_type
