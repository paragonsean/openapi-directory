# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta28 import Meta28
from openapi_server import util


class QueryRestApiGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_on: datetime=None, client_id: str=None, database: Meta28=None, end_result_backend_time: float=None, end_time: float=None, error_message: str=None, executed_sql: str=None, id: int=None, limit: int=None, progress: int=None, results_key: str=None, rows: int=None, _schema: str=None, select_as_cta: bool=None, select_as_cta_used: bool=None, select_sql: str=None, sql: str=None, sql_editor_id: str=None, start_running_time: float=None, start_time: float=None, status: str=None, tab_name: str=None, tmp_schema_name: str=None, tmp_table_name: str=None, tracking_url: str=None):
        """QueryRestApiGet - a model defined in OpenAPI

        :param changed_on: The changed_on of this QueryRestApiGet.
        :param client_id: The client_id of this QueryRestApiGet.
        :param database: The database of this QueryRestApiGet.
        :param end_result_backend_time: The end_result_backend_time of this QueryRestApiGet.
        :param end_time: The end_time of this QueryRestApiGet.
        :param error_message: The error_message of this QueryRestApiGet.
        :param executed_sql: The executed_sql of this QueryRestApiGet.
        :param id: The id of this QueryRestApiGet.
        :param limit: The limit of this QueryRestApiGet.
        :param progress: The progress of this QueryRestApiGet.
        :param results_key: The results_key of this QueryRestApiGet.
        :param rows: The rows of this QueryRestApiGet.
        :param _schema: The _schema of this QueryRestApiGet.
        :param select_as_cta: The select_as_cta of this QueryRestApiGet.
        :param select_as_cta_used: The select_as_cta_used of this QueryRestApiGet.
        :param select_sql: The select_sql of this QueryRestApiGet.
        :param sql: The sql of this QueryRestApiGet.
        :param sql_editor_id: The sql_editor_id of this QueryRestApiGet.
        :param start_running_time: The start_running_time of this QueryRestApiGet.
        :param start_time: The start_time of this QueryRestApiGet.
        :param status: The status of this QueryRestApiGet.
        :param tab_name: The tab_name of this QueryRestApiGet.
        :param tmp_schema_name: The tmp_schema_name of this QueryRestApiGet.
        :param tmp_table_name: The tmp_table_name of this QueryRestApiGet.
        :param tracking_url: The tracking_url of this QueryRestApiGet.
        """
        self.openapi_types = {
            'changed_on': datetime,
            'client_id': str,
            'database': Meta28,
            'end_result_backend_time': float,
            'end_time': float,
            'error_message': str,
            'executed_sql': str,
            'id': int,
            'limit': int,
            'progress': int,
            'results_key': str,
            'rows': int,
            '_schema': str,
            'select_as_cta': bool,
            'select_as_cta_used': bool,
            'select_sql': str,
            'sql': str,
            'sql_editor_id': str,
            'start_running_time': float,
            'start_time': float,
            'status': str,
            'tab_name': str,
            'tmp_schema_name': str,
            'tmp_table_name': str,
            'tracking_url': str
        }

        self.attribute_map = {
            'changed_on': 'changed_on',
            'client_id': 'client_id',
            'database': 'database',
            'end_result_backend_time': 'end_result_backend_time',
            'end_time': 'end_time',
            'error_message': 'error_message',
            'executed_sql': 'executed_sql',
            'id': 'id',
            'limit': 'limit',
            'progress': 'progress',
            'results_key': 'results_key',
            'rows': 'rows',
            '_schema': 'schema',
            'select_as_cta': 'select_as_cta',
            'select_as_cta_used': 'select_as_cta_used',
            'select_sql': 'select_sql',
            'sql': 'sql',
            'sql_editor_id': 'sql_editor_id',
            'start_running_time': 'start_running_time',
            'start_time': 'start_time',
            'status': 'status',
            'tab_name': 'tab_name',
            'tmp_schema_name': 'tmp_schema_name',
            'tmp_table_name': 'tmp_table_name',
            'tracking_url': 'tracking_url'
        }

        self._changed_on = changed_on
        self._client_id = client_id
        self._database = database
        self._end_result_backend_time = end_result_backend_time
        self._end_time = end_time
        self._error_message = error_message
        self._executed_sql = executed_sql
        self._id = id
        self._limit = limit
        self._progress = progress
        self._results_key = results_key
        self._rows = rows
        self.__schema = _schema
        self._select_as_cta = select_as_cta
        self._select_as_cta_used = select_as_cta_used
        self._select_sql = select_sql
        self._sql = sql
        self._sql_editor_id = sql_editor_id
        self._start_running_time = start_running_time
        self._start_time = start_time
        self._status = status
        self._tab_name = tab_name
        self._tmp_schema_name = tmp_schema_name
        self._tmp_table_name = tmp_table_name
        self._tracking_url = tracking_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRestApiGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRestApi.get of this QueryRestApiGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_on(self):
        """Gets the changed_on of this QueryRestApiGet.


        :return: The changed_on of this QueryRestApiGet.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on):
        """Sets the changed_on of this QueryRestApiGet.


        :param changed_on: The changed_on of this QueryRestApiGet.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def client_id(self):
        """Gets the client_id of this QueryRestApiGet.


        :return: The client_id of this QueryRestApiGet.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this QueryRestApiGet.


        :param client_id: The client_id of this QueryRestApiGet.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) > 11:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `11`")

        self._client_id = client_id

    @property
    def database(self):
        """Gets the database of this QueryRestApiGet.


        :return: The database of this QueryRestApiGet.
        :rtype: Meta28
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this QueryRestApiGet.


        :param database: The database of this QueryRestApiGet.
        :type database: Meta28
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def end_result_backend_time(self):
        """Gets the end_result_backend_time of this QueryRestApiGet.


        :return: The end_result_backend_time of this QueryRestApiGet.
        :rtype: float
        """
        return self._end_result_backend_time

    @end_result_backend_time.setter
    def end_result_backend_time(self, end_result_backend_time):
        """Sets the end_result_backend_time of this QueryRestApiGet.


        :param end_result_backend_time: The end_result_backend_time of this QueryRestApiGet.
        :type end_result_backend_time: float
        """

        self._end_result_backend_time = end_result_backend_time

    @property
    def end_time(self):
        """Gets the end_time of this QueryRestApiGet.


        :return: The end_time of this QueryRestApiGet.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this QueryRestApiGet.


        :param end_time: The end_time of this QueryRestApiGet.
        :type end_time: float
        """

        self._end_time = end_time

    @property
    def error_message(self):
        """Gets the error_message of this QueryRestApiGet.


        :return: The error_message of this QueryRestApiGet.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this QueryRestApiGet.


        :param error_message: The error_message of this QueryRestApiGet.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def executed_sql(self):
        """Gets the executed_sql of this QueryRestApiGet.


        :return: The executed_sql of this QueryRestApiGet.
        :rtype: str
        """
        return self._executed_sql

    @executed_sql.setter
    def executed_sql(self, executed_sql):
        """Sets the executed_sql of this QueryRestApiGet.


        :param executed_sql: The executed_sql of this QueryRestApiGet.
        :type executed_sql: str
        """

        self._executed_sql = executed_sql

    @property
    def id(self):
        """Gets the id of this QueryRestApiGet.


        :return: The id of this QueryRestApiGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryRestApiGet.


        :param id: The id of this QueryRestApiGet.
        :type id: int
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this QueryRestApiGet.


        :return: The limit of this QueryRestApiGet.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryRestApiGet.


        :param limit: The limit of this QueryRestApiGet.
        :type limit: int
        """

        self._limit = limit

    @property
    def progress(self):
        """Gets the progress of this QueryRestApiGet.


        :return: The progress of this QueryRestApiGet.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this QueryRestApiGet.


        :param progress: The progress of this QueryRestApiGet.
        :type progress: int
        """

        self._progress = progress

    @property
    def results_key(self):
        """Gets the results_key of this QueryRestApiGet.


        :return: The results_key of this QueryRestApiGet.
        :rtype: str
        """
        return self._results_key

    @results_key.setter
    def results_key(self, results_key):
        """Sets the results_key of this QueryRestApiGet.


        :param results_key: The results_key of this QueryRestApiGet.
        :type results_key: str
        """
        if results_key is not None and len(results_key) > 64:
            raise ValueError("Invalid value for `results_key`, length must be less than or equal to `64`")

        self._results_key = results_key

    @property
    def rows(self):
        """Gets the rows of this QueryRestApiGet.


        :return: The rows of this QueryRestApiGet.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QueryRestApiGet.


        :param rows: The rows of this QueryRestApiGet.
        :type rows: int
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this QueryRestApiGet.


        :return: The _schema of this QueryRestApiGet.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this QueryRestApiGet.


        :param _schema: The _schema of this QueryRestApiGet.
        :type _schema: str
        """
        if _schema is not None and len(_schema) > 256:
            raise ValueError("Invalid value for `_schema`, length must be less than or equal to `256`")

        self.__schema = _schema

    @property
    def select_as_cta(self):
        """Gets the select_as_cta of this QueryRestApiGet.


        :return: The select_as_cta of this QueryRestApiGet.
        :rtype: bool
        """
        return self._select_as_cta

    @select_as_cta.setter
    def select_as_cta(self, select_as_cta):
        """Sets the select_as_cta of this QueryRestApiGet.


        :param select_as_cta: The select_as_cta of this QueryRestApiGet.
        :type select_as_cta: bool
        """

        self._select_as_cta = select_as_cta

    @property
    def select_as_cta_used(self):
        """Gets the select_as_cta_used of this QueryRestApiGet.


        :return: The select_as_cta_used of this QueryRestApiGet.
        :rtype: bool
        """
        return self._select_as_cta_used

    @select_as_cta_used.setter
    def select_as_cta_used(self, select_as_cta_used):
        """Sets the select_as_cta_used of this QueryRestApiGet.


        :param select_as_cta_used: The select_as_cta_used of this QueryRestApiGet.
        :type select_as_cta_used: bool
        """

        self._select_as_cta_used = select_as_cta_used

    @property
    def select_sql(self):
        """Gets the select_sql of this QueryRestApiGet.


        :return: The select_sql of this QueryRestApiGet.
        :rtype: str
        """
        return self._select_sql

    @select_sql.setter
    def select_sql(self, select_sql):
        """Sets the select_sql of this QueryRestApiGet.


        :param select_sql: The select_sql of this QueryRestApiGet.
        :type select_sql: str
        """

        self._select_sql = select_sql

    @property
    def sql(self):
        """Gets the sql of this QueryRestApiGet.


        :return: The sql of this QueryRestApiGet.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this QueryRestApiGet.


        :param sql: The sql of this QueryRestApiGet.
        :type sql: str
        """

        self._sql = sql

    @property
    def sql_editor_id(self):
        """Gets the sql_editor_id of this QueryRestApiGet.


        :return: The sql_editor_id of this QueryRestApiGet.
        :rtype: str
        """
        return self._sql_editor_id

    @sql_editor_id.setter
    def sql_editor_id(self, sql_editor_id):
        """Sets the sql_editor_id of this QueryRestApiGet.


        :param sql_editor_id: The sql_editor_id of this QueryRestApiGet.
        :type sql_editor_id: str
        """
        if sql_editor_id is not None and len(sql_editor_id) > 256:
            raise ValueError("Invalid value for `sql_editor_id`, length must be less than or equal to `256`")

        self._sql_editor_id = sql_editor_id

    @property
    def start_running_time(self):
        """Gets the start_running_time of this QueryRestApiGet.


        :return: The start_running_time of this QueryRestApiGet.
        :rtype: float
        """
        return self._start_running_time

    @start_running_time.setter
    def start_running_time(self, start_running_time):
        """Sets the start_running_time of this QueryRestApiGet.


        :param start_running_time: The start_running_time of this QueryRestApiGet.
        :type start_running_time: float
        """

        self._start_running_time = start_running_time

    @property
    def start_time(self):
        """Gets the start_time of this QueryRestApiGet.


        :return: The start_time of this QueryRestApiGet.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this QueryRestApiGet.


        :param start_time: The start_time of this QueryRestApiGet.
        :type start_time: float
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this QueryRestApiGet.


        :return: The status of this QueryRestApiGet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryRestApiGet.


        :param status: The status of this QueryRestApiGet.
        :type status: str
        """
        if status is not None and len(status) > 16:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `16`")

        self._status = status

    @property
    def tab_name(self):
        """Gets the tab_name of this QueryRestApiGet.


        :return: The tab_name of this QueryRestApiGet.
        :rtype: str
        """
        return self._tab_name

    @tab_name.setter
    def tab_name(self, tab_name):
        """Sets the tab_name of this QueryRestApiGet.


        :param tab_name: The tab_name of this QueryRestApiGet.
        :type tab_name: str
        """
        if tab_name is not None and len(tab_name) > 256:
            raise ValueError("Invalid value for `tab_name`, length must be less than or equal to `256`")

        self._tab_name = tab_name

    @property
    def tmp_schema_name(self):
        """Gets the tmp_schema_name of this QueryRestApiGet.


        :return: The tmp_schema_name of this QueryRestApiGet.
        :rtype: str
        """
        return self._tmp_schema_name

    @tmp_schema_name.setter
    def tmp_schema_name(self, tmp_schema_name):
        """Sets the tmp_schema_name of this QueryRestApiGet.


        :param tmp_schema_name: The tmp_schema_name of this QueryRestApiGet.
        :type tmp_schema_name: str
        """
        if tmp_schema_name is not None and len(tmp_schema_name) > 256:
            raise ValueError("Invalid value for `tmp_schema_name`, length must be less than or equal to `256`")

        self._tmp_schema_name = tmp_schema_name

    @property
    def tmp_table_name(self):
        """Gets the tmp_table_name of this QueryRestApiGet.


        :return: The tmp_table_name of this QueryRestApiGet.
        :rtype: str
        """
        return self._tmp_table_name

    @tmp_table_name.setter
    def tmp_table_name(self, tmp_table_name):
        """Sets the tmp_table_name of this QueryRestApiGet.


        :param tmp_table_name: The tmp_table_name of this QueryRestApiGet.
        :type tmp_table_name: str
        """
        if tmp_table_name is not None and len(tmp_table_name) > 256:
            raise ValueError("Invalid value for `tmp_table_name`, length must be less than or equal to `256`")

        self._tmp_table_name = tmp_table_name

    @property
    def tracking_url(self):
        """Gets the tracking_url of this QueryRestApiGet.


        :return: The tracking_url of this QueryRestApiGet.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this QueryRestApiGet.


        :param tracking_url: The tracking_url of this QueryRestApiGet.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url
