# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Datasource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, datasource_name: str=None, datasource_type: str=None, _schema: str=None):
        """Datasource - a model defined in OpenAPI

        :param database_name: The database_name of this Datasource.
        :param datasource_name: The datasource_name of this Datasource.
        :param datasource_type: The datasource_type of this Datasource.
        :param _schema: The _schema of this Datasource.
        """
        self.openapi_types = {
            'database_name': str,
            'datasource_name': str,
            'datasource_type': str,
            '_schema': str
        }

        self.attribute_map = {
            'database_name': 'database_name',
            'datasource_name': 'datasource_name',
            'datasource_type': 'datasource_type',
            '_schema': 'schema'
        }

        self._database_name = database_name
        self._datasource_name = datasource_name
        self._datasource_type = datasource_type
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Datasource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Datasource of this Datasource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this Datasource.

        Datasource name

        :return: The database_name of this Datasource.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Datasource.

        Datasource name

        :param database_name: The database_name of this Datasource.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def datasource_name(self):
        """Gets the datasource_name of this Datasource.

        The datasource name.

        :return: The datasource_name of this Datasource.
        :rtype: str
        """
        return self._datasource_name

    @datasource_name.setter
    def datasource_name(self, datasource_name):
        """Sets the datasource_name of this Datasource.

        The datasource name.

        :param datasource_name: The datasource_name of this Datasource.
        :type datasource_name: str
        """

        self._datasource_name = datasource_name

    @property
    def datasource_type(self):
        """Gets the datasource_type of this Datasource.

        The type of dataset/datasource identified on `datasource_id`.

        :return: The datasource_type of this Datasource.
        :rtype: str
        """
        return self._datasource_type

    @datasource_type.setter
    def datasource_type(self, datasource_type):
        """Sets the datasource_type of this Datasource.

        The type of dataset/datasource identified on `datasource_id`.

        :param datasource_type: The datasource_type of this Datasource.
        :type datasource_type: str
        """
        allowed_values = ["druid", "table", "view"]  # noqa: E501
        if datasource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `datasource_type` ({0}), must be one of {1}"
                .format(datasource_type, allowed_values)
            )

        self._datasource_type = datasource_type

    @property
    def _schema(self):
        """Gets the _schema of this Datasource.

        Datasource schema

        :return: The _schema of this Datasource.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this Datasource.

        Datasource schema

        :param _schema: The _schema of this Datasource.
        :type _schema: str
        """

        self.__schema = _schema
