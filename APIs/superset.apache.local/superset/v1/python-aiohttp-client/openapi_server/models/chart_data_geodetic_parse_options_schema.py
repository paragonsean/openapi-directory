# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataGeodeticParseOptionsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude: str=None, geodetic: str=None, latitude: str=None, longitude: str=None):
        """ChartDataGeodeticParseOptionsSchema - a model defined in OpenAPI

        :param altitude: The altitude of this ChartDataGeodeticParseOptionsSchema.
        :param geodetic: The geodetic of this ChartDataGeodeticParseOptionsSchema.
        :param latitude: The latitude of this ChartDataGeodeticParseOptionsSchema.
        :param longitude: The longitude of this ChartDataGeodeticParseOptionsSchema.
        """
        self.openapi_types = {
            'altitude': str,
            'geodetic': str,
            'latitude': str,
            'longitude': str
        }

        self.attribute_map = {
            'altitude': 'altitude',
            'geodetic': 'geodetic',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._altitude = altitude
        self._geodetic = geodetic
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataGeodeticParseOptionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartDataGeodeticParseOptionsSchema of this ChartDataGeodeticParseOptionsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude(self):
        """Gets the altitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded altitude. If omitted, altitude information in geodetic string is ignored.

        :return: The altitude of this ChartDataGeodeticParseOptionsSchema.
        :rtype: str
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded altitude. If omitted, altitude information in geodetic string is ignored.

        :param altitude: The altitude of this ChartDataGeodeticParseOptionsSchema.
        :type altitude: str
        """

        self._altitude = altitude

    @property
    def geodetic(self):
        """Gets the geodetic of this ChartDataGeodeticParseOptionsSchema.

        Name of source column containing geodetic point strings

        :return: The geodetic of this ChartDataGeodeticParseOptionsSchema.
        :rtype: str
        """
        return self._geodetic

    @geodetic.setter
    def geodetic(self, geodetic):
        """Sets the geodetic of this ChartDataGeodeticParseOptionsSchema.

        Name of source column containing geodetic point strings

        :param geodetic: The geodetic of this ChartDataGeodeticParseOptionsSchema.
        :type geodetic: str
        """
        if geodetic is None:
            raise ValueError("Invalid value for `geodetic`, must not be `None`")

        self._geodetic = geodetic

    @property
    def latitude(self):
        """Gets the latitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded latitude

        :return: The latitude of this ChartDataGeodeticParseOptionsSchema.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded latitude

        :param latitude: The latitude of this ChartDataGeodeticParseOptionsSchema.
        :type latitude: str
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded longitude

        :return: The longitude of this ChartDataGeodeticParseOptionsSchema.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ChartDataGeodeticParseOptionsSchema.

        Name of target column for decoded longitude

        :param longitude: The longitude of this ChartDataGeodeticParseOptionsSchema.
        :type longitude: str
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude
