# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta25(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_on: datetime=None, created_on: datetime=None, d3format: str=None, description: str=None, expression: str=None, extra: str=None, id: int=None, metric_name: str=None, metric_type: str=None, uuid: str=None, verbose_name: str=None, warning_text: str=None):
        """Meta25 - a model defined in OpenAPI

        :param changed_on: The changed_on of this Meta25.
        :param created_on: The created_on of this Meta25.
        :param d3format: The d3format of this Meta25.
        :param description: The description of this Meta25.
        :param expression: The expression of this Meta25.
        :param extra: The extra of this Meta25.
        :param id: The id of this Meta25.
        :param metric_name: The metric_name of this Meta25.
        :param metric_type: The metric_type of this Meta25.
        :param uuid: The uuid of this Meta25.
        :param verbose_name: The verbose_name of this Meta25.
        :param warning_text: The warning_text of this Meta25.
        """
        self.openapi_types = {
            'changed_on': datetime,
            'created_on': datetime,
            'd3format': str,
            'description': str,
            'expression': str,
            'extra': str,
            'id': int,
            'metric_name': str,
            'metric_type': str,
            'uuid': str,
            'verbose_name': str,
            'warning_text': str
        }

        self.attribute_map = {
            'changed_on': 'changed_on',
            'created_on': 'created_on',
            'd3format': 'd3format',
            'description': 'description',
            'expression': 'expression',
            'extra': 'extra',
            'id': 'id',
            'metric_name': 'metric_name',
            'metric_type': 'metric_type',
            'uuid': 'uuid',
            'verbose_name': 'verbose_name',
            'warning_text': 'warning_text'
        }

        self._changed_on = changed_on
        self._created_on = created_on
        self._d3format = d3format
        self._description = description
        self._expression = expression
        self._extra = extra
        self._id = id
        self._metric_name = metric_name
        self._metric_type = metric_type
        self._uuid = uuid
        self._verbose_name = verbose_name
        self._warning_text = warning_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta25':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta25 of this Meta25.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_on(self):
        """Gets the changed_on of this Meta25.


        :return: The changed_on of this Meta25.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on):
        """Sets the changed_on of this Meta25.


        :param changed_on: The changed_on of this Meta25.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def created_on(self):
        """Gets the created_on of this Meta25.


        :return: The created_on of this Meta25.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Meta25.


        :param created_on: The created_on of this Meta25.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def d3format(self):
        """Gets the d3format of this Meta25.


        :return: The d3format of this Meta25.
        :rtype: str
        """
        return self._d3format

    @d3format.setter
    def d3format(self, d3format):
        """Sets the d3format of this Meta25.


        :param d3format: The d3format of this Meta25.
        :type d3format: str
        """
        if d3format is not None and len(d3format) > 128:
            raise ValueError("Invalid value for `d3format`, length must be less than or equal to `128`")

        self._d3format = d3format

    @property
    def description(self):
        """Gets the description of this Meta25.


        :return: The description of this Meta25.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Meta25.


        :param description: The description of this Meta25.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this Meta25.


        :return: The expression of this Meta25.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Meta25.


        :param expression: The expression of this Meta25.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def extra(self):
        """Gets the extra of this Meta25.


        :return: The extra of this Meta25.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Meta25.


        :param extra: The extra of this Meta25.
        :type extra: str
        """

        self._extra = extra

    @property
    def id(self):
        """Gets the id of this Meta25.


        :return: The id of this Meta25.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Meta25.


        :param id: The id of this Meta25.
        :type id: int
        """

        self._id = id

    @property
    def metric_name(self):
        """Gets the metric_name of this Meta25.


        :return: The metric_name of this Meta25.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this Meta25.


        :param metric_name: The metric_name of this Meta25.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")
        if metric_name is not None and len(metric_name) > 255:
            raise ValueError("Invalid value for `metric_name`, length must be less than or equal to `255`")

        self._metric_name = metric_name

    @property
    def metric_type(self):
        """Gets the metric_type of this Meta25.


        :return: The metric_type of this Meta25.
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this Meta25.


        :param metric_type: The metric_type of this Meta25.
        :type metric_type: str
        """
        if metric_type is not None and len(metric_type) > 32:
            raise ValueError("Invalid value for `metric_type`, length must be less than or equal to `32`")

        self._metric_type = metric_type

    @property
    def uuid(self):
        """Gets the uuid of this Meta25.


        :return: The uuid of this Meta25.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Meta25.


        :param uuid: The uuid of this Meta25.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def verbose_name(self):
        """Gets the verbose_name of this Meta25.


        :return: The verbose_name of this Meta25.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this Meta25.


        :param verbose_name: The verbose_name of this Meta25.
        :type verbose_name: str
        """
        if verbose_name is not None and len(verbose_name) > 1024:
            raise ValueError("Invalid value for `verbose_name`, length must be less than or equal to `1024`")

        self._verbose_name = verbose_name

    @property
    def warning_text(self):
        """Gets the warning_text of this Meta25.


        :return: The warning_text of this Meta25.
        :rtype: str
        """
        return self._warning_text

    @warning_text.setter
    def warning_text(self, warning_text):
        """Sets the warning_text of this Meta25.


        :param warning_text: The warning_text of this Meta25.
        :type warning_text: str
        """

        self._warning_text = warning_text
