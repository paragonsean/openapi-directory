# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseTestConnectionSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_method: object=None, database_name: str=None, encrypted_extra: str=None, engine: str=None, extra: str=None, impersonate_user: bool=None, parameters: Dict[str, object]=None, server_cert: str=None, sqlalchemy_uri: str=None):
        """DatabaseTestConnectionSchema - a model defined in OpenAPI

        :param configuration_method: The configuration_method of this DatabaseTestConnectionSchema.
        :param database_name: The database_name of this DatabaseTestConnectionSchema.
        :param encrypted_extra: The encrypted_extra of this DatabaseTestConnectionSchema.
        :param engine: The engine of this DatabaseTestConnectionSchema.
        :param extra: The extra of this DatabaseTestConnectionSchema.
        :param impersonate_user: The impersonate_user of this DatabaseTestConnectionSchema.
        :param parameters: The parameters of this DatabaseTestConnectionSchema.
        :param server_cert: The server_cert of this DatabaseTestConnectionSchema.
        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseTestConnectionSchema.
        """
        self.openapi_types = {
            'configuration_method': object,
            'database_name': str,
            'encrypted_extra': str,
            'engine': str,
            'extra': str,
            'impersonate_user': bool,
            'parameters': Dict[str, object],
            'server_cert': str,
            'sqlalchemy_uri': str
        }

        self.attribute_map = {
            'configuration_method': 'configuration_method',
            'database_name': 'database_name',
            'encrypted_extra': 'encrypted_extra',
            'engine': 'engine',
            'extra': 'extra',
            'impersonate_user': 'impersonate_user',
            'parameters': 'parameters',
            'server_cert': 'server_cert',
            'sqlalchemy_uri': 'sqlalchemy_uri'
        }

        self._configuration_method = configuration_method
        self._database_name = database_name
        self._encrypted_extra = encrypted_extra
        self._engine = engine
        self._extra = extra
        self._impersonate_user = impersonate_user
        self._parameters = parameters
        self._server_cert = server_cert
        self._sqlalchemy_uri = sqlalchemy_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseTestConnectionSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseTestConnectionSchema of this DatabaseTestConnectionSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_method(self):
        """Gets the configuration_method of this DatabaseTestConnectionSchema.

        Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.

        :return: The configuration_method of this DatabaseTestConnectionSchema.
        :rtype: object
        """
        return self._configuration_method

    @configuration_method.setter
    def configuration_method(self, configuration_method):
        """Sets the configuration_method of this DatabaseTestConnectionSchema.

        Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.

        :param configuration_method: The configuration_method of this DatabaseTestConnectionSchema.
        :type configuration_method: object
        """

        self._configuration_method = configuration_method

    @property
    def database_name(self):
        """Gets the database_name of this DatabaseTestConnectionSchema.

        A database name to identify this connection.

        :return: The database_name of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DatabaseTestConnectionSchema.

        A database name to identify this connection.

        :param database_name: The database_name of this DatabaseTestConnectionSchema.
        :type database_name: str
        """
        if database_name is not None and len(database_name) > 250:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `250`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")

        self._database_name = database_name

    @property
    def encrypted_extra(self):
        """Gets the encrypted_extra of this DatabaseTestConnectionSchema.

        <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>

        :return: The encrypted_extra of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._encrypted_extra

    @encrypted_extra.setter
    def encrypted_extra(self, encrypted_extra):
        """Sets the encrypted_extra of this DatabaseTestConnectionSchema.

        <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>

        :param encrypted_extra: The encrypted_extra of this DatabaseTestConnectionSchema.
        :type encrypted_extra: str
        """

        self._encrypted_extra = encrypted_extra

    @property
    def engine(self):
        """Gets the engine of this DatabaseTestConnectionSchema.

        SQLAlchemy engine to use

        :return: The engine of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DatabaseTestConnectionSchema.

        SQLAlchemy engine to use

        :param engine: The engine of this DatabaseTestConnectionSchema.
        :type engine: str
        """

        self._engine = engine

    @property
    def extra(self):
        """Gets the extra of this DatabaseTestConnectionSchema.

        <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_csv_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. the <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.</p>

        :return: The extra of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatabaseTestConnectionSchema.

        <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_csv_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. the <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.</p>

        :param extra: The extra of this DatabaseTestConnectionSchema.
        :type extra: str
        """

        self._extra = extra

    @property
    def impersonate_user(self):
        """Gets the impersonate_user of this DatabaseTestConnectionSchema.

        If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.

        :return: The impersonate_user of this DatabaseTestConnectionSchema.
        :rtype: bool
        """
        return self._impersonate_user

    @impersonate_user.setter
    def impersonate_user(self, impersonate_user):
        """Sets the impersonate_user of this DatabaseTestConnectionSchema.

        If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.

        :param impersonate_user: The impersonate_user of this DatabaseTestConnectionSchema.
        :type impersonate_user: bool
        """

        self._impersonate_user = impersonate_user

    @property
    def parameters(self):
        """Gets the parameters of this DatabaseTestConnectionSchema.

        DB-specific parameters for configuration

        :return: The parameters of this DatabaseTestConnectionSchema.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatabaseTestConnectionSchema.

        DB-specific parameters for configuration

        :param parameters: The parameters of this DatabaseTestConnectionSchema.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def server_cert(self):
        """Gets the server_cert of this DatabaseTestConnectionSchema.

        <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>

        :return: The server_cert of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._server_cert

    @server_cert.setter
    def server_cert(self, server_cert):
        """Sets the server_cert of this DatabaseTestConnectionSchema.

        <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>

        :param server_cert: The server_cert of this DatabaseTestConnectionSchema.
        :type server_cert: str
        """

        self._server_cert = server_cert

    @property
    def sqlalchemy_uri(self):
        """Gets the sqlalchemy_uri of this DatabaseTestConnectionSchema.

        <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>

        :return: The sqlalchemy_uri of this DatabaseTestConnectionSchema.
        :rtype: str
        """
        return self._sqlalchemy_uri

    @sqlalchemy_uri.setter
    def sqlalchemy_uri(self, sqlalchemy_uri):
        """Sets the sqlalchemy_uri of this DatabaseTestConnectionSchema.

        <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>

        :param sqlalchemy_uri: The sqlalchemy_uri of this DatabaseTestConnectionSchema.
        :type sqlalchemy_uri: str
        """
        if sqlalchemy_uri is not None and len(sqlalchemy_uri) > 1024:
            raise ValueError("Invalid value for `sqlalchemy_uri`, length must be less than or equal to `1024`")
        if sqlalchemy_uri is not None and len(sqlalchemy_uri) < 1:
            raise ValueError("Invalid value for `sqlalchemy_uri`, length must be greater than or equal to `1`")

        self._sqlalchemy_uri = sqlalchemy_uri
