# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableMetadataOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deferrable: bool=None, initially: bool=None, match: bool=None, ondelete: bool=None, onupdate: bool=None):
        """TableMetadataOptionsResponse - a model defined in OpenAPI

        :param deferrable: The deferrable of this TableMetadataOptionsResponse.
        :param initially: The initially of this TableMetadataOptionsResponse.
        :param match: The match of this TableMetadataOptionsResponse.
        :param ondelete: The ondelete of this TableMetadataOptionsResponse.
        :param onupdate: The onupdate of this TableMetadataOptionsResponse.
        """
        self.openapi_types = {
            'deferrable': bool,
            'initially': bool,
            'match': bool,
            'ondelete': bool,
            'onupdate': bool
        }

        self.attribute_map = {
            'deferrable': 'deferrable',
            'initially': 'initially',
            'match': 'match',
            'ondelete': 'ondelete',
            'onupdate': 'onupdate'
        }

        self._deferrable = deferrable
        self._initially = initially
        self._match = match
        self._ondelete = ondelete
        self._onupdate = onupdate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableMetadataOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableMetadataOptionsResponse of this TableMetadataOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deferrable(self):
        """Gets the deferrable of this TableMetadataOptionsResponse.


        :return: The deferrable of this TableMetadataOptionsResponse.
        :rtype: bool
        """
        return self._deferrable

    @deferrable.setter
    def deferrable(self, deferrable):
        """Sets the deferrable of this TableMetadataOptionsResponse.


        :param deferrable: The deferrable of this TableMetadataOptionsResponse.
        :type deferrable: bool
        """

        self._deferrable = deferrable

    @property
    def initially(self):
        """Gets the initially of this TableMetadataOptionsResponse.


        :return: The initially of this TableMetadataOptionsResponse.
        :rtype: bool
        """
        return self._initially

    @initially.setter
    def initially(self, initially):
        """Sets the initially of this TableMetadataOptionsResponse.


        :param initially: The initially of this TableMetadataOptionsResponse.
        :type initially: bool
        """

        self._initially = initially

    @property
    def match(self):
        """Gets the match of this TableMetadataOptionsResponse.


        :return: The match of this TableMetadataOptionsResponse.
        :rtype: bool
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this TableMetadataOptionsResponse.


        :param match: The match of this TableMetadataOptionsResponse.
        :type match: bool
        """

        self._match = match

    @property
    def ondelete(self):
        """Gets the ondelete of this TableMetadataOptionsResponse.


        :return: The ondelete of this TableMetadataOptionsResponse.
        :rtype: bool
        """
        return self._ondelete

    @ondelete.setter
    def ondelete(self, ondelete):
        """Sets the ondelete of this TableMetadataOptionsResponse.


        :param ondelete: The ondelete of this TableMetadataOptionsResponse.
        :type ondelete: bool
        """

        self._ondelete = ondelete

    @property
    def onupdate(self):
        """Gets the onupdate of this TableMetadataOptionsResponse.


        :return: The onupdate of this TableMetadataOptionsResponse.
        :rtype: bool
        """
        return self._onupdate

    @onupdate.setter
    def onupdate(self, onupdate):
        """Sets the onupdate of this TableMetadataOptionsResponse.


        :param onupdate: The onupdate of this TableMetadataOptionsResponse.
        :type onupdate: bool
        """

        self._onupdate = onupdate
