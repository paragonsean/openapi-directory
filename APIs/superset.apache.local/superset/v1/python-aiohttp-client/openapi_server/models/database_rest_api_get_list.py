# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta18 import Meta18
from openapi_server import util


class DatabaseRestApiGetList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_csv_upload: bool=None, allow_ctas: bool=None, allow_cvas: bool=None, allow_dml: bool=None, allow_multi_schema_metadata_fetch: bool=None, allow_run_async: bool=None, allows_cost_estimate: object=None, allows_subquery: object=None, allows_virtual_table_explore: object=None, backend: object=None, changed_on: datetime=None, changed_on_delta_humanized: object=None, created_by: Meta18=None, database_name: str=None, explore_database_id: object=None, expose_in_sqllab: bool=None, extra: str=None, force_ctas_schema: str=None, id: int=None):
        """DatabaseRestApiGetList - a model defined in OpenAPI

        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiGetList.
        :param allow_ctas: The allow_ctas of this DatabaseRestApiGetList.
        :param allow_cvas: The allow_cvas of this DatabaseRestApiGetList.
        :param allow_dml: The allow_dml of this DatabaseRestApiGetList.
        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGetList.
        :param allow_run_async: The allow_run_async of this DatabaseRestApiGetList.
        :param allows_cost_estimate: The allows_cost_estimate of this DatabaseRestApiGetList.
        :param allows_subquery: The allows_subquery of this DatabaseRestApiGetList.
        :param allows_virtual_table_explore: The allows_virtual_table_explore of this DatabaseRestApiGetList.
        :param backend: The backend of this DatabaseRestApiGetList.
        :param changed_on: The changed_on of this DatabaseRestApiGetList.
        :param changed_on_delta_humanized: The changed_on_delta_humanized of this DatabaseRestApiGetList.
        :param created_by: The created_by of this DatabaseRestApiGetList.
        :param database_name: The database_name of this DatabaseRestApiGetList.
        :param explore_database_id: The explore_database_id of this DatabaseRestApiGetList.
        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiGetList.
        :param extra: The extra of this DatabaseRestApiGetList.
        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiGetList.
        :param id: The id of this DatabaseRestApiGetList.
        """
        self.openapi_types = {
            'allow_csv_upload': bool,
            'allow_ctas': bool,
            'allow_cvas': bool,
            'allow_dml': bool,
            'allow_multi_schema_metadata_fetch': bool,
            'allow_run_async': bool,
            'allows_cost_estimate': object,
            'allows_subquery': object,
            'allows_virtual_table_explore': object,
            'backend': object,
            'changed_on': datetime,
            'changed_on_delta_humanized': object,
            'created_by': Meta18,
            'database_name': str,
            'explore_database_id': object,
            'expose_in_sqllab': bool,
            'extra': str,
            'force_ctas_schema': str,
            'id': int
        }

        self.attribute_map = {
            'allow_csv_upload': 'allow_csv_upload',
            'allow_ctas': 'allow_ctas',
            'allow_cvas': 'allow_cvas',
            'allow_dml': 'allow_dml',
            'allow_multi_schema_metadata_fetch': 'allow_multi_schema_metadata_fetch',
            'allow_run_async': 'allow_run_async',
            'allows_cost_estimate': 'allows_cost_estimate',
            'allows_subquery': 'allows_subquery',
            'allows_virtual_table_explore': 'allows_virtual_table_explore',
            'backend': 'backend',
            'changed_on': 'changed_on',
            'changed_on_delta_humanized': 'changed_on_delta_humanized',
            'created_by': 'created_by',
            'database_name': 'database_name',
            'explore_database_id': 'explore_database_id',
            'expose_in_sqllab': 'expose_in_sqllab',
            'extra': 'extra',
            'force_ctas_schema': 'force_ctas_schema',
            'id': 'id'
        }

        self._allow_csv_upload = allow_csv_upload
        self._allow_ctas = allow_ctas
        self._allow_cvas = allow_cvas
        self._allow_dml = allow_dml
        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch
        self._allow_run_async = allow_run_async
        self._allows_cost_estimate = allows_cost_estimate
        self._allows_subquery = allows_subquery
        self._allows_virtual_table_explore = allows_virtual_table_explore
        self._backend = backend
        self._changed_on = changed_on
        self._changed_on_delta_humanized = changed_on_delta_humanized
        self._created_by = created_by
        self._database_name = database_name
        self._explore_database_id = explore_database_id
        self._expose_in_sqllab = expose_in_sqllab
        self._extra = extra
        self._force_ctas_schema = force_ctas_schema
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseRestApiGetList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseRestApi.get_list of this DatabaseRestApiGetList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_csv_upload(self):
        """Gets the allow_csv_upload of this DatabaseRestApiGetList.


        :return: The allow_csv_upload of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_csv_upload

    @allow_csv_upload.setter
    def allow_csv_upload(self, allow_csv_upload):
        """Sets the allow_csv_upload of this DatabaseRestApiGetList.


        :param allow_csv_upload: The allow_csv_upload of this DatabaseRestApiGetList.
        :type allow_csv_upload: bool
        """

        self._allow_csv_upload = allow_csv_upload

    @property
    def allow_ctas(self):
        """Gets the allow_ctas of this DatabaseRestApiGetList.


        :return: The allow_ctas of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_ctas

    @allow_ctas.setter
    def allow_ctas(self, allow_ctas):
        """Sets the allow_ctas of this DatabaseRestApiGetList.


        :param allow_ctas: The allow_ctas of this DatabaseRestApiGetList.
        :type allow_ctas: bool
        """

        self._allow_ctas = allow_ctas

    @property
    def allow_cvas(self):
        """Gets the allow_cvas of this DatabaseRestApiGetList.


        :return: The allow_cvas of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_cvas

    @allow_cvas.setter
    def allow_cvas(self, allow_cvas):
        """Sets the allow_cvas of this DatabaseRestApiGetList.


        :param allow_cvas: The allow_cvas of this DatabaseRestApiGetList.
        :type allow_cvas: bool
        """

        self._allow_cvas = allow_cvas

    @property
    def allow_dml(self):
        """Gets the allow_dml of this DatabaseRestApiGetList.


        :return: The allow_dml of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_dml

    @allow_dml.setter
    def allow_dml(self, allow_dml):
        """Sets the allow_dml of this DatabaseRestApiGetList.


        :param allow_dml: The allow_dml of this DatabaseRestApiGetList.
        :type allow_dml: bool
        """

        self._allow_dml = allow_dml

    @property
    def allow_multi_schema_metadata_fetch(self):
        """Gets the allow_multi_schema_metadata_fetch of this DatabaseRestApiGetList.


        :return: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_multi_schema_metadata_fetch

    @allow_multi_schema_metadata_fetch.setter
    def allow_multi_schema_metadata_fetch(self, allow_multi_schema_metadata_fetch):
        """Sets the allow_multi_schema_metadata_fetch of this DatabaseRestApiGetList.


        :param allow_multi_schema_metadata_fetch: The allow_multi_schema_metadata_fetch of this DatabaseRestApiGetList.
        :type allow_multi_schema_metadata_fetch: bool
        """

        self._allow_multi_schema_metadata_fetch = allow_multi_schema_metadata_fetch

    @property
    def allow_run_async(self):
        """Gets the allow_run_async of this DatabaseRestApiGetList.


        :return: The allow_run_async of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._allow_run_async

    @allow_run_async.setter
    def allow_run_async(self, allow_run_async):
        """Sets the allow_run_async of this DatabaseRestApiGetList.


        :param allow_run_async: The allow_run_async of this DatabaseRestApiGetList.
        :type allow_run_async: bool
        """

        self._allow_run_async = allow_run_async

    @property
    def allows_cost_estimate(self):
        """Gets the allows_cost_estimate of this DatabaseRestApiGetList.


        :return: The allows_cost_estimate of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._allows_cost_estimate

    @allows_cost_estimate.setter
    def allows_cost_estimate(self, allows_cost_estimate):
        """Sets the allows_cost_estimate of this DatabaseRestApiGetList.


        :param allows_cost_estimate: The allows_cost_estimate of this DatabaseRestApiGetList.
        :type allows_cost_estimate: object
        """

        self._allows_cost_estimate = allows_cost_estimate

    @property
    def allows_subquery(self):
        """Gets the allows_subquery of this DatabaseRestApiGetList.


        :return: The allows_subquery of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._allows_subquery

    @allows_subquery.setter
    def allows_subquery(self, allows_subquery):
        """Sets the allows_subquery of this DatabaseRestApiGetList.


        :param allows_subquery: The allows_subquery of this DatabaseRestApiGetList.
        :type allows_subquery: object
        """

        self._allows_subquery = allows_subquery

    @property
    def allows_virtual_table_explore(self):
        """Gets the allows_virtual_table_explore of this DatabaseRestApiGetList.


        :return: The allows_virtual_table_explore of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._allows_virtual_table_explore

    @allows_virtual_table_explore.setter
    def allows_virtual_table_explore(self, allows_virtual_table_explore):
        """Sets the allows_virtual_table_explore of this DatabaseRestApiGetList.


        :param allows_virtual_table_explore: The allows_virtual_table_explore of this DatabaseRestApiGetList.
        :type allows_virtual_table_explore: object
        """

        self._allows_virtual_table_explore = allows_virtual_table_explore

    @property
    def backend(self):
        """Gets the backend of this DatabaseRestApiGetList.


        :return: The backend of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this DatabaseRestApiGetList.


        :param backend: The backend of this DatabaseRestApiGetList.
        :type backend: object
        """

        self._backend = backend

    @property
    def changed_on(self):
        """Gets the changed_on of this DatabaseRestApiGetList.


        :return: The changed_on of this DatabaseRestApiGetList.
        :rtype: datetime
        """
        return self._changed_on

    @changed_on.setter
    def changed_on(self, changed_on):
        """Sets the changed_on of this DatabaseRestApiGetList.


        :param changed_on: The changed_on of this DatabaseRestApiGetList.
        :type changed_on: datetime
        """

        self._changed_on = changed_on

    @property
    def changed_on_delta_humanized(self):
        """Gets the changed_on_delta_humanized of this DatabaseRestApiGetList.


        :return: The changed_on_delta_humanized of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._changed_on_delta_humanized

    @changed_on_delta_humanized.setter
    def changed_on_delta_humanized(self, changed_on_delta_humanized):
        """Sets the changed_on_delta_humanized of this DatabaseRestApiGetList.


        :param changed_on_delta_humanized: The changed_on_delta_humanized of this DatabaseRestApiGetList.
        :type changed_on_delta_humanized: object
        """

        self._changed_on_delta_humanized = changed_on_delta_humanized

    @property
    def created_by(self):
        """Gets the created_by of this DatabaseRestApiGetList.


        :return: The created_by of this DatabaseRestApiGetList.
        :rtype: Meta18
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DatabaseRestApiGetList.


        :param created_by: The created_by of this DatabaseRestApiGetList.
        :type created_by: Meta18
        """

        self._created_by = created_by

    @property
    def database_name(self):
        """Gets the database_name of this DatabaseRestApiGetList.


        :return: The database_name of this DatabaseRestApiGetList.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DatabaseRestApiGetList.


        :param database_name: The database_name of this DatabaseRestApiGetList.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 250:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `250`")

        self._database_name = database_name

    @property
    def explore_database_id(self):
        """Gets the explore_database_id of this DatabaseRestApiGetList.


        :return: The explore_database_id of this DatabaseRestApiGetList.
        :rtype: object
        """
        return self._explore_database_id

    @explore_database_id.setter
    def explore_database_id(self, explore_database_id):
        """Sets the explore_database_id of this DatabaseRestApiGetList.


        :param explore_database_id: The explore_database_id of this DatabaseRestApiGetList.
        :type explore_database_id: object
        """

        self._explore_database_id = explore_database_id

    @property
    def expose_in_sqllab(self):
        """Gets the expose_in_sqllab of this DatabaseRestApiGetList.


        :return: The expose_in_sqllab of this DatabaseRestApiGetList.
        :rtype: bool
        """
        return self._expose_in_sqllab

    @expose_in_sqllab.setter
    def expose_in_sqllab(self, expose_in_sqllab):
        """Sets the expose_in_sqllab of this DatabaseRestApiGetList.


        :param expose_in_sqllab: The expose_in_sqllab of this DatabaseRestApiGetList.
        :type expose_in_sqllab: bool
        """

        self._expose_in_sqllab = expose_in_sqllab

    @property
    def extra(self):
        """Gets the extra of this DatabaseRestApiGetList.


        :return: The extra of this DatabaseRestApiGetList.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this DatabaseRestApiGetList.


        :param extra: The extra of this DatabaseRestApiGetList.
        :type extra: str
        """

        self._extra = extra

    @property
    def force_ctas_schema(self):
        """Gets the force_ctas_schema of this DatabaseRestApiGetList.


        :return: The force_ctas_schema of this DatabaseRestApiGetList.
        :rtype: str
        """
        return self._force_ctas_schema

    @force_ctas_schema.setter
    def force_ctas_schema(self, force_ctas_schema):
        """Sets the force_ctas_schema of this DatabaseRestApiGetList.


        :param force_ctas_schema: The force_ctas_schema of this DatabaseRestApiGetList.
        :type force_ctas_schema: str
        """
        if force_ctas_schema is not None and len(force_ctas_schema) > 250:
            raise ValueError("Invalid value for `force_ctas_schema`, length must be less than or equal to `250`")

        self._force_ctas_schema = force_ctas_schema

    @property
    def id(self):
        """Gets the id of this DatabaseRestApiGetList.


        :return: The id of this DatabaseRestApiGetList.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatabaseRestApiGetList.


        :param id: The id of this DatabaseRestApiGetList.
        :type id: int
        """

        self._id = id
