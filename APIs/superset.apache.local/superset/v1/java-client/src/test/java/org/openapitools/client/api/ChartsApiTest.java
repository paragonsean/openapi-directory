/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.ChartCacheScreenshotResponseSchema;
import org.openapitools.client.model.ChartDataAsyncResponseSchema;
import org.openapitools.client.model.ChartDataQueryContextSchema;
import org.openapitools.client.model.ChartDataResponseSchema;
import org.openapitools.client.model.ChartGet200Response;
import org.openapitools.client.model.ChartPkGet200Response;
import org.openapitools.client.model.ChartPkPut200Response;
import org.openapitools.client.model.ChartPost201Response;
import org.openapitools.client.model.ChartRestApiPost;
import org.openapitools.client.model.ChartRestApiPut;
import java.io.File;
import org.openapitools.client.model.GetFavStarIdsSchema;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;
import org.openapitools.client.model.ScreenshotQuerySchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChartsApi
 */
@Disabled
public class ChartsApiTest {

    private final ChartsApi api = new ChartsApi();

    /**
     * Takes a query context cache key and returns payload data response for the given query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartDataCacheKeyGetTest() throws ApiException {
        String cacheKey = null;
        ChartDataResponseSchema response = api.chartDataCacheKeyGet(cacheKey);
        // TODO: test validations
    }

    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartDataPostTest() throws ApiException {
        ChartDataQueryContextSchema chartDataQueryContextSchema = null;
        ChartDataResponseSchema response = api.chartDataPost(chartDataQueryContextSchema);
        // TODO: test validations
    }

    /**
     * Deletes multiple Charts in a bulk operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartDeleteTest() throws ApiException {
        List<Integer> q = null;
        AnnotationLayerGet400Response response = api.chartDelete(q);
        // TODO: test validations
    }

    /**
     * Exports multiple charts and downloads them as YAML files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartExportGetTest() throws ApiException {
        List<Integer> q = null;
        File response = api.chartExportGet(q);
        // TODO: test validations
    }

    /**
     * Check favorited dashboards for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartFavoriteStatusGetTest() throws ApiException {
        List<Integer> q = null;
        GetFavStarIdsSchema response = api.chartFavoriteStatusGet(q);
        // TODO: test validations
    }

    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartGetTest() throws ApiException {
        GetListSchema q = null;
        ChartGet200Response response = api.chartGet(q);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        AnnotationLayerGet400Response response = api.chartImportPost(formData, overwrite, passwords);
        // TODO: test validations
    }

    /**
     * Several metadata information about chart API endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        AnnotationLayerInfoGet200Response response = api.chartInfoGet(q);
        // TODO: test validations
    }

    /**
     * Compute and cache a screenshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkCacheScreenshotGetTest() throws ApiException {
        Integer pk = null;
        ScreenshotQuerySchema q = null;
        ChartCacheScreenshotResponseSchema response = api.chartPkCacheScreenshotGet(pk, q);
        // TODO: test validations
    }

    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkDataGetTest() throws ApiException {
        Integer pk = null;
        String format = null;
        String type = null;
        ChartDataResponseSchema response = api.chartPkDataGet(pk, format, type);
        // TODO: test validations
    }

    /**
     * Deletes a Chart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkDeleteTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.chartPkDelete(pk);
        // TODO: test validations
    }

    /**
     * Get a chart detail information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        ChartPkGet200Response response = api.chartPkGet(pk, q);
        // TODO: test validations
    }

    /**
     * Changes a Chart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkPutTest() throws ApiException {
        Integer pk = null;
        ChartRestApiPut chartRestApiPut = null;
        ChartPkPut200Response response = api.chartPkPut(pk, chartRestApiPut);
        // TODO: test validations
    }

    /**
     * Get a computed screenshot from cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkScreenshotDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        File response = api.chartPkScreenshotDigestGet(pk, digest);
        // TODO: test validations
    }

    /**
     * Compute or get already computed chart thumbnail from cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPkThumbnailDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        File response = api.chartPkThumbnailDigestGet(pk, digest);
        // TODO: test validations
    }

    /**
     * Create a new Chart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartPostTest() throws ApiException {
        ChartRestApiPost chartRestApiPost = null;
        ChartPost201Response response = api.chartPost(chartRestApiPost);
        // TODO: test validations
    }

    /**
     * Get a list of all possible owners for a chart. Use &#x60;owners&#x60; has the &#x60;column_name&#x60; parameter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.chartRelatedColumnNameGet(columnName, q);
        // TODO: test validations
    }

}
