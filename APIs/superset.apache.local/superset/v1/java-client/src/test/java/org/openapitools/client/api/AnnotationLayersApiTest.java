/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationLayerGet200Response;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationAnnotationIdGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationAnnotationIdPut200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationPost201Response;
import org.openapitools.client.model.AnnotationLayerPkGet200Response;
import org.openapitools.client.model.AnnotationLayerPkPut200Response;
import org.openapitools.client.model.AnnotationLayerPost201Response;
import org.openapitools.client.model.AnnotationLayerRestApiPost;
import org.openapitools.client.model.AnnotationLayerRestApiPut;
import org.openapitools.client.model.AnnotationRestApiPost;
import org.openapitools.client.model.AnnotationRestApiPut;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationLayersApi
 */
@Disabled
public class AnnotationLayersApiTest {

    private final AnnotationLayersApi api = new AnnotationLayersApi();

    /**
     * Deletes multiple annotation layers in a bulk operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerDeleteTest() throws ApiException {
        List<Integer> q = null;
        AnnotationLayerGet400Response response = api.annotationLayerDelete(q);
        // TODO: test validations
    }

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerGetTest() throws ApiException {
        GetListSchema q = null;
        AnnotationLayerGet200Response response = api.annotationLayerGet(q);
        // TODO: test validations
    }

    /**
     * Get metadata information about this API resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        AnnotationLayerInfoGet200Response response = api.annotationLayerInfoGet(q);
        // TODO: test validations
    }

    /**
     * Delete Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationAnnotationIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer annotationId = null;
        AnnotationLayerGet400Response response = api.annotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId);
        // TODO: test validations
    }

    /**
     * Get an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationAnnotationIdGetTest() throws ApiException {
        Integer pk = null;
        Integer annotationId = null;
        GetItemSchema q = null;
        AnnotationLayerPkAnnotationAnnotationIdGet200Response response = api.annotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q);
        // TODO: test validations
    }

    /**
     * Update an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationAnnotationIdPutTest() throws ApiException {
        Integer pk = null;
        Integer annotationId = null;
        AnnotationRestApiPut annotationRestApiPut = null;
        AnnotationLayerPkAnnotationAnnotationIdPut200Response response = api.annotationLayerPkAnnotationAnnotationIdPut(pk, annotationId, annotationRestApiPut);
        // TODO: test validations
    }

    /**
     * Deletes multiple annotation in a bulk operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationDeleteTest() throws ApiException {
        Integer pk = null;
        List<Integer> q = null;
        AnnotationLayerGet400Response response = api.annotationLayerPkAnnotationDelete(pk, q);
        // TODO: test validations
    }

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationGetTest() throws ApiException {
        Integer pk = null;
        GetListSchema q = null;
        AnnotationLayerPkAnnotationGet200Response response = api.annotationLayerPkAnnotationGet(pk, q);
        // TODO: test validations
    }

    /**
     * Create an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkAnnotationPostTest() throws ApiException {
        Integer pk = null;
        AnnotationRestApiPost annotationRestApiPost = null;
        AnnotationLayerPkAnnotationPost201Response response = api.annotationLayerPkAnnotationPost(pk, annotationRestApiPost);
        // TODO: test validations
    }

    /**
     * Delete Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkDeleteTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.annotationLayerPkDelete(pk);
        // TODO: test validations
    }

    /**
     * Get an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        AnnotationLayerPkGet200Response response = api.annotationLayerPkGet(pk, q);
        // TODO: test validations
    }

    /**
     * Update an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPkPutTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerRestApiPut annotationLayerRestApiPut = null;
        AnnotationLayerPkPut200Response response = api.annotationLayerPkPut(pk, annotationLayerRestApiPut);
        // TODO: test validations
    }

    /**
     * Create an Annotation layer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerPostTest() throws ApiException {
        AnnotationLayerRestApiPost annotationLayerRestApiPost = null;
        AnnotationLayerPost201Response response = api.annotationLayerPost(annotationLayerRestApiPost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void annotationLayerRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.annotationLayerRelatedColumnNameGet(columnName, q);
        // TODO: test validations
    }

}
