/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.DashboardGet200Response;
import org.openapitools.client.model.DashboardIdOrSlugChartsGet200Response;
import org.openapitools.client.model.DashboardIdOrSlugDatasetsGet200Response;
import org.openapitools.client.model.DashboardIdOrSlugGet200Response;
import org.openapitools.client.model.DashboardPkPut200Response;
import org.openapitools.client.model.DashboardPost201Response;
import org.openapitools.client.model.DashboardRestApiPost;
import org.openapitools.client.model.DashboardRestApiPut;
import java.io.File;
import org.openapitools.client.model.GetFavStarIdsSchema;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;
import org.openapitools.client.model.ThumbnailQuerySchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsApi
 */
@Disabled
public class DashboardsApiTest {

    private final DashboardsApi api = new DashboardsApi();

    /**
     * Deletes multiple Dashboards in a bulk operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardDeleteTest() throws ApiException {
        List<Integer> q = null;
        AnnotationLayerGet400Response response = api.dashboardDelete(q);
        // TODO: test validations
    }

    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardExportGetTest() throws ApiException {
        List<Integer> q = null;
        String response = api.dashboardExportGet(q);
        // TODO: test validations
    }

    /**
     * Check favorited dashboards for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardFavoriteStatusGetTest() throws ApiException {
        List<Integer> q = null;
        GetFavStarIdsSchema response = api.dashboardFavoriteStatusGet(q);
        // TODO: test validations
    }

    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardGetTest() throws ApiException {
        GetListSchema q = null;
        DashboardGet200Response response = api.dashboardGet(q);
        // TODO: test validations
    }

    /**
     * Get the chart definitions for a given dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardIdOrSlugChartsGetTest() throws ApiException {
        String idOrSlug = null;
        DashboardIdOrSlugChartsGet200Response response = api.dashboardIdOrSlugChartsGet(idOrSlug);
        // TODO: test validations
    }

    /**
     * Returns a list of a dashboard&#39;s datasets. Each dataset includes only the information necessary to render the dashboard&#39;s charts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardIdOrSlugDatasetsGetTest() throws ApiException {
        String idOrSlug = null;
        DashboardIdOrSlugDatasetsGet200Response response = api.dashboardIdOrSlugDatasetsGet(idOrSlug);
        // TODO: test validations
    }

    /**
     * Get a dashboard detail information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardIdOrSlugGetTest() throws ApiException {
        String idOrSlug = null;
        DashboardIdOrSlugGet200Response response = api.dashboardIdOrSlugGet(idOrSlug);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        AnnotationLayerGet400Response response = api.dashboardImportPost(formData, overwrite, passwords);
        // TODO: test validations
    }

    /**
     * Several metadata information about dashboard API endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        AnnotationLayerInfoGet200Response response = api.dashboardInfoGet(q);
        // TODO: test validations
    }

    /**
     * Deletes a Dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardPkDeleteTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.dashboardPkDelete(pk);
        // TODO: test validations
    }

    /**
     * Changes a Dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardPkPutTest() throws ApiException {
        Integer pk = null;
        DashboardRestApiPut dashboardRestApiPut = null;
        DashboardPkPut200Response response = api.dashboardPkPut(pk, dashboardRestApiPut);
        // TODO: test validations
    }

    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardPkThumbnailDigestGetTest() throws ApiException {
        Integer pk = null;
        String digest = null;
        ThumbnailQuerySchema q = null;
        File response = api.dashboardPkThumbnailDigestGet(pk, digest, q);
        // TODO: test validations
    }

    /**
     * Create a new Dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardPostTest() throws ApiException {
        DashboardRestApiPost dashboardRestApiPost = null;
        DashboardPost201Response response = api.dashboardPost(dashboardRestApiPost);
        // TODO: test validations
    }

    /**
     * Get a list of all possible owners for a dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.dashboardRelatedColumnNameGet(columnName, q);
        // TODO: test validations
    }

}
