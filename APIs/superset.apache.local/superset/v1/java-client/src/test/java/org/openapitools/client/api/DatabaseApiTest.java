/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.DatabaseAvailableGet200ResponseInner;
import org.openapitools.client.model.DatabaseFunctionNamesResponse;
import org.openapitools.client.model.DatabaseGet200Response;
import org.openapitools.client.model.DatabasePkGet200Response;
import org.openapitools.client.model.DatabasePkPut200Response;
import org.openapitools.client.model.DatabasePost201Response;
import org.openapitools.client.model.DatabaseRelatedObjectsResponse;
import org.openapitools.client.model.DatabaseRestApiPost;
import org.openapitools.client.model.DatabaseRestApiPut;
import org.openapitools.client.model.DatabaseSchemasQuerySchema;
import org.openapitools.client.model.DatabaseTestConnectionSchema;
import org.openapitools.client.model.DatabaseValidateParametersSchema;
import java.io.File;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.SchemasResponseSchema;
import org.openapitools.client.model.SelectStarResponseSchema;
import org.openapitools.client.model.TableMetadataResponseSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabaseApi
 */
@Disabled
public class DatabaseApiTest {

    private final DatabaseApi api = new DatabaseApi();

    /**
     * Get names of databases currently available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAvailableGetTest() throws ApiException {
        List<DatabaseAvailableGet200ResponseInner> response = api.databaseAvailableGet();
        // TODO: test validations
    }

    /**
     * Download database(s) and associated dataset(s) as a zip file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseExportGetTest() throws ApiException {
        List<Integer> q = null;
        File response = api.databaseExportGet(q);
        // TODO: test validations
    }

    /**
     * Get a list of models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseGetTest() throws ApiException {
        GetListSchema q = null;
        DatabaseGet200Response response = api.databaseGet(q);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        AnnotationLayerGet400Response response = api.databaseImportPost(formData, overwrite, passwords);
        // TODO: test validations
    }

    /**
     * Get metadata information about this API resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        AnnotationLayerInfoGet200Response response = api.databaseInfoGet(q);
        // TODO: test validations
    }

    /**
     * Deletes a Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkDeleteTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.databasePkDelete(pk);
        // TODO: test validations
    }

    /**
     * Get function names supported by a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkFunctionNamesGetTest() throws ApiException {
        Integer pk = null;
        DatabaseFunctionNamesResponse response = api.databasePkFunctionNamesGet(pk);
        // TODO: test validations
    }

    /**
     * Get an item model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        DatabasePkGet200Response response = api.databasePkGet(pk, q);
        // TODO: test validations
    }

    /**
     * Changes a Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkPutTest() throws ApiException {
        Integer pk = null;
        DatabaseRestApiPut databaseRestApiPut = null;
        DatabasePkPut200Response response = api.databasePkPut(pk, databaseRestApiPut);
        // TODO: test validations
    }

    /**
     * Get charts and dashboards count associated to a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkRelatedObjectsGetTest() throws ApiException {
        Integer pk = null;
        DatabaseRelatedObjectsResponse response = api.databasePkRelatedObjectsGet(pk);
        // TODO: test validations
    }

    /**
     * Get all schemas from a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkSchemasGetTest() throws ApiException {
        Integer pk = null;
        DatabaseSchemasQuerySchema q = null;
        SchemasResponseSchema response = api.databasePkSchemasGet(pk, q);
        // TODO: test validations
    }

    /**
     * Get database select star for table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkSelectStarTableNameGetTest() throws ApiException {
        Integer pk = null;
        String tableName = null;
        String schemaName = null;
        SelectStarResponseSchema response = api.databasePkSelectStarTableNameGet(pk, tableName, schemaName);
        // TODO: test validations
    }

    /**
     * Get database select star for table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkSelectStarTableNameSchemaNameGetTest() throws ApiException {
        Integer pk = null;
        String tableName = null;
        String schemaName = null;
        SelectStarResponseSchema response = api.databasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName);
        // TODO: test validations
    }

    /**
     * Get database table metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePkTableTableNameSchemaNameGetTest() throws ApiException {
        Integer pk = null;
        String tableName = null;
        String schemaName = null;
        TableMetadataResponseSchema response = api.databasePkTableTableNameSchemaNameGet(pk, tableName, schemaName);
        // TODO: test validations
    }

    /**
     * Create a new Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasePostTest() throws ApiException {
        DatabaseRestApiPost databaseRestApiPost = null;
        DatabasePost201Response response = api.databasePost(databaseRestApiPost);
        // TODO: test validations
    }

    /**
     * Tests a database connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseTestConnectionPostTest() throws ApiException {
        DatabaseTestConnectionSchema databaseTestConnectionSchema = null;
        AnnotationLayerGet400Response response = api.databaseTestConnectionPost(databaseTestConnectionSchema);
        // TODO: test validations
    }

    /**
     * Validates parameters used to connect to a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseValidateParametersPostTest() throws ApiException {
        DatabaseValidateParametersSchema databaseValidateParametersSchema = null;
        AnnotationLayerGet400Response response = api.databaseValidateParametersPost(databaseValidateParametersSchema);
        // TODO: test validations
    }

}
