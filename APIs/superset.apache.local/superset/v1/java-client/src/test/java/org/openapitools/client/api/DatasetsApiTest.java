/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.DatasetGet200Response;
import org.openapitools.client.model.DatasetPkGet200Response;
import org.openapitools.client.model.DatasetPkPut200Response;
import org.openapitools.client.model.DatasetPost201Response;
import org.openapitools.client.model.DatasetRelatedObjectsResponse;
import org.openapitools.client.model.DatasetRestApiPost;
import org.openapitools.client.model.DatasetRestApiPut;
import org.openapitools.client.model.DistincResponseSchema;
import java.io.File;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasetsApi
 */
@Disabled
public class DatasetsApiTest {

    private final DatasetsApi api = new DatasetsApi();

    /**
     * Deletes multiple Datasets in a bulk operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetDeleteTest() throws ApiException {
        List<Integer> q = null;
        AnnotationLayerGet400Response response = api.datasetDelete(q);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetDistinctColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        DistincResponseSchema response = api.datasetDistinctColumnNameGet(columnName, q);
        // TODO: test validations
    }

    /**
     * Exports multiple datasets and downloads them as YAML files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetExportGetTest() throws ApiException {
        List<Integer> q = null;
        String response = api.datasetExportGet(q);
        // TODO: test validations
    }

    /**
     * Get a list of models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetGetTest() throws ApiException {
        GetListSchema q = null;
        DatasetGet200Response response = api.datasetGet(q);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetImportPostTest() throws ApiException {
        File formData = null;
        Boolean overwrite = null;
        String passwords = null;
        AnnotationLayerGet400Response response = api.datasetImportPost(formData, overwrite, passwords);
        // TODO: test validations
    }

    /**
     * Get metadata information about this API resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetInfoGetTest() throws ApiException {
        GetInfoSchema q = null;
        AnnotationLayerInfoGet200Response response = api.datasetInfoGet(q);
        // TODO: test validations
    }

    /**
     * Delete a Dataset column
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkColumnColumnIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer columnId = null;
        AnnotationLayerGet400Response response = api.datasetPkColumnColumnIdDelete(pk, columnId);
        // TODO: test validations
    }

    /**
     * Deletes a Dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkDeleteTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.datasetPkDelete(pk);
        // TODO: test validations
    }

    /**
     * Get an item model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkGetTest() throws ApiException {
        Integer pk = null;
        GetItemSchema q = null;
        DatasetPkGet200Response response = api.datasetPkGet(pk, q);
        // TODO: test validations
    }

    /**
     * Delete a Dataset metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkMetricMetricIdDeleteTest() throws ApiException {
        Integer pk = null;
        Integer metricId = null;
        AnnotationLayerGet400Response response = api.datasetPkMetricMetricIdDelete(pk, metricId);
        // TODO: test validations
    }

    /**
     * Changes a Dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkPutTest() throws ApiException {
        Integer pk = null;
        DatasetRestApiPut datasetRestApiPut = null;
        Boolean overrideColumns = null;
        DatasetPkPut200Response response = api.datasetPkPut(pk, datasetRestApiPut, overrideColumns);
        // TODO: test validations
    }

    /**
     * Refreshes and updates columns of a dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkRefreshPutTest() throws ApiException {
        Integer pk = null;
        AnnotationLayerGet400Response response = api.datasetPkRefreshPut(pk);
        // TODO: test validations
    }

    /**
     * Get charts and dashboards count associated to a dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPkRelatedObjectsGetTest() throws ApiException {
        Integer pk = null;
        DatasetRelatedObjectsResponse response = api.datasetPkRelatedObjectsGet(pk);
        // TODO: test validations
    }

    /**
     * Create a new Dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetPostTest() throws ApiException {
        DatasetRestApiPost datasetRestApiPost = null;
        DatasetPost201Response response = api.datasetPost(datasetRestApiPost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetRelatedColumnNameGetTest() throws ApiException {
        String columnName = null;
        GetRelatedSchema q = null;
        RelatedResponseSchema response = api.datasetRelatedColumnNameGet(columnName, q);
        // TODO: test validations
    }

}
