/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnnotationLayer;
import org.openapitools.client.model.ChartDataDatasource;
import org.openapitools.client.model.ChartDataExtras;
import org.openapitools.client.model.ChartDataFilter;
import org.openapitools.client.model.ChartDataPostProcessingOperation;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ChartDataQueryObject
 */
public class ChartDataQueryObjectTest {
    private final ChartDataQueryObject model = new ChartDataQueryObject();

    /**
     * Model tests for ChartDataQueryObject
     */
    @Test
    public void testChartDataQueryObject() {
        // TODO: test ChartDataQueryObject
    }

    /**
     * Test the property 'annotationLayers'
     */
    @Test
    public void annotationLayersTest() {
        // TODO: test annotationLayers
    }

    /**
     * Test the property 'appliedTimeExtras'
     */
    @Test
    public void appliedTimeExtrasTest() {
        // TODO: test appliedTimeExtras
    }

    /**
     * Test the property 'applyFetchValuesPredicate'
     */
    @Test
    public void applyFetchValuesPredicateTest() {
        // TODO: test applyFetchValuesPredicate
    }

    /**
     * Test the property 'columns'
     */
    @Test
    public void columnsTest() {
        // TODO: test columns
    }

    /**
     * Test the property 'datasource'
     */
    @Test
    public void datasourceTest() {
        // TODO: test datasource
    }

    /**
     * Test the property 'druidTimeOrigin'
     */
    @Test
    public void druidTimeOriginTest() {
        // TODO: test druidTimeOrigin
    }

    /**
     * Test the property 'extras'
     */
    @Test
    public void extrasTest() {
        // TODO: test extras
    }

    /**
     * Test the property 'filters'
     */
    @Test
    public void filtersTest() {
        // TODO: test filters
    }

    /**
     * Test the property 'granularity'
     */
    @Test
    public void granularityTest() {
        // TODO: test granularity
    }

    /**
     * Test the property 'granularitySqla'
     */
    @Test
    public void granularitySqlaTest() {
        // TODO: test granularitySqla
    }

    /**
     * Test the property 'groupby'
     */
    @Test
    public void groupbyTest() {
        // TODO: test groupby
    }

    /**
     * Test the property 'having'
     */
    @Test
    public void havingTest() {
        // TODO: test having
    }

    /**
     * Test the property 'havingFilters'
     */
    @Test
    public void havingFiltersTest() {
        // TODO: test havingFilters
    }

    /**
     * Test the property 'isRowcount'
     */
    @Test
    public void isRowcountTest() {
        // TODO: test isRowcount
    }

    /**
     * Test the property 'isTimeseries'
     */
    @Test
    public void isTimeseriesTest() {
        // TODO: test isTimeseries
    }

    /**
     * Test the property 'metrics'
     */
    @Test
    public void metricsTest() {
        // TODO: test metrics
    }

    /**
     * Test the property 'orderDesc'
     */
    @Test
    public void orderDescTest() {
        // TODO: test orderDesc
    }

    /**
     * Test the property 'orderby'
     */
    @Test
    public void orderbyTest() {
        // TODO: test orderby
    }

    /**
     * Test the property 'postProcessing'
     */
    @Test
    public void postProcessingTest() {
        // TODO: test postProcessing
    }

    /**
     * Test the property 'resultType'
     */
    @Test
    public void resultTypeTest() {
        // TODO: test resultType
    }

    /**
     * Test the property 'rowLimit'
     */
    @Test
    public void rowLimitTest() {
        // TODO: test rowLimit
    }

    /**
     * Test the property 'rowOffset'
     */
    @Test
    public void rowOffsetTest() {
        // TODO: test rowOffset
    }

    /**
     * Test the property 'timeOffsets'
     */
    @Test
    public void timeOffsetsTest() {
        // TODO: test timeOffsets
    }

    /**
     * Test the property 'timeRange'
     */
    @Test
    public void timeRangeTest() {
        // TODO: test timeRange
    }

    /**
     * Test the property 'timeShift'
     */
    @Test
    public void timeShiftTest() {
        // TODO: test timeShift
    }

    /**
     * Test the property 'timeseriesLimit'
     */
    @Test
    public void timeseriesLimitTest() {
        // TODO: test timeseriesLimit
    }

    /**
     * Test the property 'timeseriesLimitMetric'
     */
    @Test
    public void timeseriesLimitMetricTest() {
        // TODO: test timeseriesLimitMetric
    }

    /**
     * Test the property 'urlParams'
     */
    @Test
    public void urlParamsTest() {
        // TODO: test urlParams
    }

    /**
     * Test the property 'where'
     */
    @Test
    public void whereTest() {
        // TODO: test where
    }

}
