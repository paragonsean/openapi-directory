/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnnotationLayerGet200ResponseDescriptionColumns;
import org.openapitools.client.model.AnnotationLayerGet200ResponseLabelColumns;
import org.openapitools.client.model.DatabaseRestApiGet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabasePkGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabasePkGet200Response {
  public static final String SERIALIZED_NAME_DESCRIPTION_COLUMNS = "description_columns";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_COLUMNS)
  private AnnotationLayerGet200ResponseDescriptionColumns descriptionColumns;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL_COLUMNS = "label_columns";
  @SerializedName(SERIALIZED_NAME_LABEL_COLUMNS)
  private AnnotationLayerGet200ResponseLabelColumns labelColumns;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private DatabaseRestApiGet result;

  public static final String SERIALIZED_NAME_SHOW_COLUMNS = "show_columns";
  @SerializedName(SERIALIZED_NAME_SHOW_COLUMNS)
  private List<String> showColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_TITLE = "show_title";
  @SerializedName(SERIALIZED_NAME_SHOW_TITLE)
  private String showTitle;

  public DatabasePkGet200Response() {
  }

  public DatabasePkGet200Response descriptionColumns(AnnotationLayerGet200ResponseDescriptionColumns descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
    return this;
  }

  /**
   * Get descriptionColumns
   * @return descriptionColumns
   */
  @javax.annotation.Nullable
  public AnnotationLayerGet200ResponseDescriptionColumns getDescriptionColumns() {
    return descriptionColumns;
  }

  public void setDescriptionColumns(AnnotationLayerGet200ResponseDescriptionColumns descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
  }


  public DatabasePkGet200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The item id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DatabasePkGet200Response labelColumns(AnnotationLayerGet200ResponseLabelColumns labelColumns) {
    this.labelColumns = labelColumns;
    return this;
  }

  /**
   * Get labelColumns
   * @return labelColumns
   */
  @javax.annotation.Nullable
  public AnnotationLayerGet200ResponseLabelColumns getLabelColumns() {
    return labelColumns;
  }

  public void setLabelColumns(AnnotationLayerGet200ResponseLabelColumns labelColumns) {
    this.labelColumns = labelColumns;
  }


  public DatabasePkGet200Response result(DatabaseRestApiGet result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public DatabaseRestApiGet getResult() {
    return result;
  }

  public void setResult(DatabaseRestApiGet result) {
    this.result = result;
  }


  public DatabasePkGet200Response showColumns(List<String> showColumns) {
    this.showColumns = showColumns;
    return this;
  }

  public DatabasePkGet200Response addShowColumnsItem(String showColumnsItem) {
    if (this.showColumns == null) {
      this.showColumns = new ArrayList<>();
    }
    this.showColumns.add(showColumnsItem);
    return this;
  }

  /**
   * A list of columns
   * @return showColumns
   */
  @javax.annotation.Nullable
  public List<String> getShowColumns() {
    return showColumns;
  }

  public void setShowColumns(List<String> showColumns) {
    this.showColumns = showColumns;
  }


  public DatabasePkGet200Response showTitle(String showTitle) {
    this.showTitle = showTitle;
    return this;
  }

  /**
   * A title to render. Will be translated by babel
   * @return showTitle
   */
  @javax.annotation.Nullable
  public String getShowTitle() {
    return showTitle;
  }

  public void setShowTitle(String showTitle) {
    this.showTitle = showTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabasePkGet200Response databasePkGet200Response = (DatabasePkGet200Response) o;
    return Objects.equals(this.descriptionColumns, databasePkGet200Response.descriptionColumns) &&
        Objects.equals(this.id, databasePkGet200Response.id) &&
        Objects.equals(this.labelColumns, databasePkGet200Response.labelColumns) &&
        Objects.equals(this.result, databasePkGet200Response.result) &&
        Objects.equals(this.showColumns, databasePkGet200Response.showColumns) &&
        Objects.equals(this.showTitle, databasePkGet200Response.showTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptionColumns, id, labelColumns, result, showColumns, showTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabasePkGet200Response {\n");
    sb.append("    descriptionColumns: ").append(toIndentedString(descriptionColumns)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelColumns: ").append(toIndentedString(labelColumns)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    showColumns: ").append(toIndentedString(showColumns)).append("\n");
    sb.append("    showTitle: ").append(toIndentedString(showTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description_columns");
    openapiFields.add("id");
    openapiFields.add("label_columns");
    openapiFields.add("result");
    openapiFields.add("show_columns");
    openapiFields.add("show_title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabasePkGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabasePkGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabasePkGet200Response is not found in the empty JSON string", DatabasePkGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabasePkGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabasePkGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `description_columns`
      if (jsonObj.get("description_columns") != null && !jsonObj.get("description_columns").isJsonNull()) {
        AnnotationLayerGet200ResponseDescriptionColumns.validateJsonElement(jsonObj.get("description_columns"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `label_columns`
      if (jsonObj.get("label_columns") != null && !jsonObj.get("label_columns").isJsonNull()) {
        AnnotationLayerGet200ResponseLabelColumns.validateJsonElement(jsonObj.get("label_columns"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        DatabaseRestApiGet.validateJsonElement(jsonObj.get("result"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("show_columns") != null && !jsonObj.get("show_columns").isJsonNull() && !jsonObj.get("show_columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `show_columns` to be an array in the JSON string but got `%s`", jsonObj.get("show_columns").toString()));
      }
      if ((jsonObj.get("show_title") != null && !jsonObj.get("show_title").isJsonNull()) && !jsonObj.get("show_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `show_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("show_title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabasePkGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabasePkGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabasePkGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabasePkGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabasePkGet200Response>() {
           @Override
           public void write(JsonWriter out, DatabasePkGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabasePkGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabasePkGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabasePkGet200Response
   * @throws IOException if the JSON string is invalid with respect to DatabasePkGet200Response
   */
  public static DatabasePkGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabasePkGet200Response.class);
  }

  /**
   * Convert an instance of DatabasePkGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

