/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Meta28;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryRestApiGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryRestApiGet {
  public static final String SERIALIZED_NAME_CHANGED_ON = "changed_on";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON)
  private OffsetDateTime changedOn;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Meta28 database;

  public static final String SERIALIZED_NAME_END_RESULT_BACKEND_TIME = "end_result_backend_time";
  @SerializedName(SERIALIZED_NAME_END_RESULT_BACKEND_TIME)
  private BigDecimal endResultBackendTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private BigDecimal endTime;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXECUTED_SQL = "executed_sql";
  @SerializedName(SERIALIZED_NAME_EXECUTED_SQL)
  private String executedSql;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_RESULTS_KEY = "results_key";
  @SerializedName(SERIALIZED_NAME_RESULTS_KEY)
  private String resultsKey;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private Integer rows;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SELECT_AS_CTA = "select_as_cta";
  @SerializedName(SERIALIZED_NAME_SELECT_AS_CTA)
  private Boolean selectAsCta;

  public static final String SERIALIZED_NAME_SELECT_AS_CTA_USED = "select_as_cta_used";
  @SerializedName(SERIALIZED_NAME_SELECT_AS_CTA_USED)
  private Boolean selectAsCtaUsed;

  public static final String SERIALIZED_NAME_SELECT_SQL = "select_sql";
  @SerializedName(SERIALIZED_NAME_SELECT_SQL)
  private String selectSql;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_SQL_EDITOR_ID = "sql_editor_id";
  @SerializedName(SERIALIZED_NAME_SQL_EDITOR_ID)
  private String sqlEditorId;

  public static final String SERIALIZED_NAME_START_RUNNING_TIME = "start_running_time";
  @SerializedName(SERIALIZED_NAME_START_RUNNING_TIME)
  private BigDecimal startRunningTime;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private BigDecimal startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAB_NAME = "tab_name";
  @SerializedName(SERIALIZED_NAME_TAB_NAME)
  private String tabName;

  public static final String SERIALIZED_NAME_TMP_SCHEMA_NAME = "tmp_schema_name";
  @SerializedName(SERIALIZED_NAME_TMP_SCHEMA_NAME)
  private String tmpSchemaName;

  public static final String SERIALIZED_NAME_TMP_TABLE_NAME = "tmp_table_name";
  @SerializedName(SERIALIZED_NAME_TMP_TABLE_NAME)
  private String tmpTableName;

  public static final String SERIALIZED_NAME_TRACKING_URL = "tracking_url";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public QueryRestApiGet() {
  }

  public QueryRestApiGet changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

  /**
   * Get changedOn
   * @return changedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }


  public QueryRestApiGet clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public QueryRestApiGet database(Meta28 database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public Meta28 getDatabase() {
    return database;
  }

  public void setDatabase(Meta28 database) {
    this.database = database;
  }


  public QueryRestApiGet endResultBackendTime(BigDecimal endResultBackendTime) {
    this.endResultBackendTime = endResultBackendTime;
    return this;
  }

  /**
   * Get endResultBackendTime
   * @return endResultBackendTime
   */
  @javax.annotation.Nullable
  public BigDecimal getEndResultBackendTime() {
    return endResultBackendTime;
  }

  public void setEndResultBackendTime(BigDecimal endResultBackendTime) {
    this.endResultBackendTime = endResultBackendTime;
  }


  public QueryRestApiGet endTime(BigDecimal endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public BigDecimal getEndTime() {
    return endTime;
  }

  public void setEndTime(BigDecimal endTime) {
    this.endTime = endTime;
  }


  public QueryRestApiGet errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public QueryRestApiGet executedSql(String executedSql) {
    this.executedSql = executedSql;
    return this;
  }

  /**
   * Get executedSql
   * @return executedSql
   */
  @javax.annotation.Nullable
  public String getExecutedSql() {
    return executedSql;
  }

  public void setExecutedSql(String executedSql) {
    this.executedSql = executedSql;
  }


  public QueryRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public QueryRestApiGet limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public QueryRestApiGet progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public QueryRestApiGet resultsKey(String resultsKey) {
    this.resultsKey = resultsKey;
    return this;
  }

  /**
   * Get resultsKey
   * @return resultsKey
   */
  @javax.annotation.Nullable
  public String getResultsKey() {
    return resultsKey;
  }

  public void setResultsKey(String resultsKey) {
    this.resultsKey = resultsKey;
  }


  public QueryRestApiGet rows(Integer rows) {
    this.rows = rows;
    return this;
  }

  /**
   * Get rows
   * @return rows
   */
  @javax.annotation.Nullable
  public Integer getRows() {
    return rows;
  }

  public void setRows(Integer rows) {
    this.rows = rows;
  }


  public QueryRestApiGet schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public QueryRestApiGet selectAsCta(Boolean selectAsCta) {
    this.selectAsCta = selectAsCta;
    return this;
  }

  /**
   * Get selectAsCta
   * @return selectAsCta
   */
  @javax.annotation.Nullable
  public Boolean getSelectAsCta() {
    return selectAsCta;
  }

  public void setSelectAsCta(Boolean selectAsCta) {
    this.selectAsCta = selectAsCta;
  }


  public QueryRestApiGet selectAsCtaUsed(Boolean selectAsCtaUsed) {
    this.selectAsCtaUsed = selectAsCtaUsed;
    return this;
  }

  /**
   * Get selectAsCtaUsed
   * @return selectAsCtaUsed
   */
  @javax.annotation.Nullable
  public Boolean getSelectAsCtaUsed() {
    return selectAsCtaUsed;
  }

  public void setSelectAsCtaUsed(Boolean selectAsCtaUsed) {
    this.selectAsCtaUsed = selectAsCtaUsed;
  }


  public QueryRestApiGet selectSql(String selectSql) {
    this.selectSql = selectSql;
    return this;
  }

  /**
   * Get selectSql
   * @return selectSql
   */
  @javax.annotation.Nullable
  public String getSelectSql() {
    return selectSql;
  }

  public void setSelectSql(String selectSql) {
    this.selectSql = selectSql;
  }


  public QueryRestApiGet sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public QueryRestApiGet sqlEditorId(String sqlEditorId) {
    this.sqlEditorId = sqlEditorId;
    return this;
  }

  /**
   * Get sqlEditorId
   * @return sqlEditorId
   */
  @javax.annotation.Nullable
  public String getSqlEditorId() {
    return sqlEditorId;
  }

  public void setSqlEditorId(String sqlEditorId) {
    this.sqlEditorId = sqlEditorId;
  }


  public QueryRestApiGet startRunningTime(BigDecimal startRunningTime) {
    this.startRunningTime = startRunningTime;
    return this;
  }

  /**
   * Get startRunningTime
   * @return startRunningTime
   */
  @javax.annotation.Nullable
  public BigDecimal getStartRunningTime() {
    return startRunningTime;
  }

  public void setStartRunningTime(BigDecimal startRunningTime) {
    this.startRunningTime = startRunningTime;
  }


  public QueryRestApiGet startTime(BigDecimal startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public BigDecimal getStartTime() {
    return startTime;
  }

  public void setStartTime(BigDecimal startTime) {
    this.startTime = startTime;
  }


  public QueryRestApiGet status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public QueryRestApiGet tabName(String tabName) {
    this.tabName = tabName;
    return this;
  }

  /**
   * Get tabName
   * @return tabName
   */
  @javax.annotation.Nullable
  public String getTabName() {
    return tabName;
  }

  public void setTabName(String tabName) {
    this.tabName = tabName;
  }


  public QueryRestApiGet tmpSchemaName(String tmpSchemaName) {
    this.tmpSchemaName = tmpSchemaName;
    return this;
  }

  /**
   * Get tmpSchemaName
   * @return tmpSchemaName
   */
  @javax.annotation.Nullable
  public String getTmpSchemaName() {
    return tmpSchemaName;
  }

  public void setTmpSchemaName(String tmpSchemaName) {
    this.tmpSchemaName = tmpSchemaName;
  }


  public QueryRestApiGet tmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
    return this;
  }

  /**
   * Get tmpTableName
   * @return tmpTableName
   */
  @javax.annotation.Nullable
  public String getTmpTableName() {
    return tmpTableName;
  }

  public void setTmpTableName(String tmpTableName) {
    this.tmpTableName = tmpTableName;
  }


  public QueryRestApiGet trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * Get trackingUrl
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRestApiGet queryRestApiGet = (QueryRestApiGet) o;
    return Objects.equals(this.changedOn, queryRestApiGet.changedOn) &&
        Objects.equals(this.clientId, queryRestApiGet.clientId) &&
        Objects.equals(this.database, queryRestApiGet.database) &&
        Objects.equals(this.endResultBackendTime, queryRestApiGet.endResultBackendTime) &&
        Objects.equals(this.endTime, queryRestApiGet.endTime) &&
        Objects.equals(this.errorMessage, queryRestApiGet.errorMessage) &&
        Objects.equals(this.executedSql, queryRestApiGet.executedSql) &&
        Objects.equals(this.id, queryRestApiGet.id) &&
        Objects.equals(this.limit, queryRestApiGet.limit) &&
        Objects.equals(this.progress, queryRestApiGet.progress) &&
        Objects.equals(this.resultsKey, queryRestApiGet.resultsKey) &&
        Objects.equals(this.rows, queryRestApiGet.rows) &&
        Objects.equals(this.schema, queryRestApiGet.schema) &&
        Objects.equals(this.selectAsCta, queryRestApiGet.selectAsCta) &&
        Objects.equals(this.selectAsCtaUsed, queryRestApiGet.selectAsCtaUsed) &&
        Objects.equals(this.selectSql, queryRestApiGet.selectSql) &&
        Objects.equals(this.sql, queryRestApiGet.sql) &&
        Objects.equals(this.sqlEditorId, queryRestApiGet.sqlEditorId) &&
        Objects.equals(this.startRunningTime, queryRestApiGet.startRunningTime) &&
        Objects.equals(this.startTime, queryRestApiGet.startTime) &&
        Objects.equals(this.status, queryRestApiGet.status) &&
        Objects.equals(this.tabName, queryRestApiGet.tabName) &&
        Objects.equals(this.tmpSchemaName, queryRestApiGet.tmpSchemaName) &&
        Objects.equals(this.tmpTableName, queryRestApiGet.tmpTableName) &&
        Objects.equals(this.trackingUrl, queryRestApiGet.trackingUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedOn, clientId, database, endResultBackendTime, endTime, errorMessage, executedSql, id, limit, progress, resultsKey, rows, schema, selectAsCta, selectAsCtaUsed, selectSql, sql, sqlEditorId, startRunningTime, startTime, status, tabName, tmpSchemaName, tmpTableName, trackingUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRestApiGet {\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    endResultBackendTime: ").append(toIndentedString(endResultBackendTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executedSql: ").append(toIndentedString(executedSql)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    resultsKey: ").append(toIndentedString(resultsKey)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    selectAsCta: ").append(toIndentedString(selectAsCta)).append("\n");
    sb.append("    selectAsCtaUsed: ").append(toIndentedString(selectAsCtaUsed)).append("\n");
    sb.append("    selectSql: ").append(toIndentedString(selectSql)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    sqlEditorId: ").append(toIndentedString(sqlEditorId)).append("\n");
    sb.append("    startRunningTime: ").append(toIndentedString(startRunningTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tabName: ").append(toIndentedString(tabName)).append("\n");
    sb.append("    tmpSchemaName: ").append(toIndentedString(tmpSchemaName)).append("\n");
    sb.append("    tmpTableName: ").append(toIndentedString(tmpTableName)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_on");
    openapiFields.add("client_id");
    openapiFields.add("database");
    openapiFields.add("end_result_backend_time");
    openapiFields.add("end_time");
    openapiFields.add("error_message");
    openapiFields.add("executed_sql");
    openapiFields.add("id");
    openapiFields.add("limit");
    openapiFields.add("progress");
    openapiFields.add("results_key");
    openapiFields.add("rows");
    openapiFields.add("schema");
    openapiFields.add("select_as_cta");
    openapiFields.add("select_as_cta_used");
    openapiFields.add("select_sql");
    openapiFields.add("sql");
    openapiFields.add("sql_editor_id");
    openapiFields.add("start_running_time");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("tab_name");
    openapiFields.add("tmp_schema_name");
    openapiFields.add("tmp_table_name");
    openapiFields.add("tracking_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("client_id");
    openapiRequiredFields.add("database");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRestApiGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRestApiGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRestApiGet is not found in the empty JSON string", QueryRestApiGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRestApiGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRestApiGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryRestApiGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      // validate the required field `database`
      Meta28.validateJsonElement(jsonObj.get("database"));
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if ((jsonObj.get("executed_sql") != null && !jsonObj.get("executed_sql").isJsonNull()) && !jsonObj.get("executed_sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executed_sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executed_sql").toString()));
      }
      if ((jsonObj.get("results_key") != null && !jsonObj.get("results_key").isJsonNull()) && !jsonObj.get("results_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `results_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("results_key").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("select_sql") != null && !jsonObj.get("select_sql").isJsonNull()) && !jsonObj.get("select_sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `select_sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("select_sql").toString()));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if ((jsonObj.get("sql_editor_id") != null && !jsonObj.get("sql_editor_id").isJsonNull()) && !jsonObj.get("sql_editor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql_editor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql_editor_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tab_name") != null && !jsonObj.get("tab_name").isJsonNull()) && !jsonObj.get("tab_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tab_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tab_name").toString()));
      }
      if ((jsonObj.get("tmp_schema_name") != null && !jsonObj.get("tmp_schema_name").isJsonNull()) && !jsonObj.get("tmp_schema_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tmp_schema_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tmp_schema_name").toString()));
      }
      if ((jsonObj.get("tmp_table_name") != null && !jsonObj.get("tmp_table_name").isJsonNull()) && !jsonObj.get("tmp_table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tmp_table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tmp_table_name").toString()));
      }
      if ((jsonObj.get("tracking_url") != null && !jsonObj.get("tracking_url").isJsonNull()) && !jsonObj.get("tracking_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRestApiGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRestApiGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRestApiGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRestApiGet.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRestApiGet>() {
           @Override
           public void write(JsonWriter out, QueryRestApiGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRestApiGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRestApiGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRestApiGet
   * @throws IOException if the JSON string is invalid with respect to QueryRestApiGet
   */
  public static QueryRestApiGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRestApiGet.class);
  }

  /**
   * Convert an instance of QueryRestApiGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

