/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChartDataColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartDataAdhocMetricSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartDataAdhocMetricSchema {
  /**
   * Aggregation operator. Only required for simple expression types.
   */
  @JsonAdapter(AggregateEnum.Adapter.class)
  public enum AggregateEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    COUNT_DISTINCT("COUNT_DISTINCT"),
    
    MAX("MAX"),
    
    MIN("MIN"),
    
    SUM("SUM");

    private String value;

    AggregateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregateEnum fromValue(String value) {
      for (AggregateEnum b : AggregateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATE = "aggregate";
  @SerializedName(SERIALIZED_NAME_AGGREGATE)
  private AggregateEnum aggregate;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private ChartDataColumn column;

  /**
   * Simple or SQL metric
   */
  @JsonAdapter(ExpressionTypeEnum.Adapter.class)
  public enum ExpressionTypeEnum {
    SIMPLE("SIMPLE"),
    
    SQL("SQL");

    private String value;

    ExpressionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpressionTypeEnum fromValue(String value) {
      for (ExpressionTypeEnum b : ExpressionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpressionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpressionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpressionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpressionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpressionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPRESSION_TYPE = "expressionType";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_TYPE)
  private ExpressionTypeEnum expressionType;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_LABEL = "hasCustomLabel";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_LABEL)
  private Boolean hasCustomLabel;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_OPTION_NAME = "optionName";
  @SerializedName(SERIALIZED_NAME_OPTION_NAME)
  private String optionName;

  public static final String SERIALIZED_NAME_SQL_EXPRESSION = "sqlExpression";
  @SerializedName(SERIALIZED_NAME_SQL_EXPRESSION)
  private String sqlExpression;

  public ChartDataAdhocMetricSchema() {
  }

  public ChartDataAdhocMetricSchema aggregate(AggregateEnum aggregate) {
    this.aggregate = aggregate;
    return this;
  }

  /**
   * Aggregation operator. Only required for simple expression types.
   * @return aggregate
   */
  @javax.annotation.Nullable
  public AggregateEnum getAggregate() {
    return aggregate;
  }

  public void setAggregate(AggregateEnum aggregate) {
    this.aggregate = aggregate;
  }


  public ChartDataAdhocMetricSchema column(ChartDataColumn column) {
    this.column = column;
    return this;
  }

  /**
   * Get column
   * @return column
   */
  @javax.annotation.Nullable
  public ChartDataColumn getColumn() {
    return column;
  }

  public void setColumn(ChartDataColumn column) {
    this.column = column;
  }


  public ChartDataAdhocMetricSchema expressionType(ExpressionTypeEnum expressionType) {
    this.expressionType = expressionType;
    return this;
  }

  /**
   * Simple or SQL metric
   * @return expressionType
   */
  @javax.annotation.Nonnull
  public ExpressionTypeEnum getExpressionType() {
    return expressionType;
  }

  public void setExpressionType(ExpressionTypeEnum expressionType) {
    this.expressionType = expressionType;
  }


  public ChartDataAdhocMetricSchema hasCustomLabel(Boolean hasCustomLabel) {
    this.hasCustomLabel = hasCustomLabel;
    return this;
  }

  /**
   * When false, the label will be automatically generated based on the aggregate expression. When true, a custom label has to be specified.
   * @return hasCustomLabel
   */
  @javax.annotation.Nullable
  public Boolean getHasCustomLabel() {
    return hasCustomLabel;
  }

  public void setHasCustomLabel(Boolean hasCustomLabel) {
    this.hasCustomLabel = hasCustomLabel;
  }


  public ChartDataAdhocMetricSchema label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Label for the metric. Is automatically generated unless hasCustomLabel is true, in which case label must be defined.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ChartDataAdhocMetricSchema optionName(String optionName) {
    this.optionName = optionName;
    return this;
  }

  /**
   * Unique identifier. Can be any string value, as long as all metrics have a unique identifier. If undefined, a random name will be generated.
   * @return optionName
   */
  @javax.annotation.Nullable
  public String getOptionName() {
    return optionName;
  }

  public void setOptionName(String optionName) {
    this.optionName = optionName;
  }


  public ChartDataAdhocMetricSchema sqlExpression(String sqlExpression) {
    this.sqlExpression = sqlExpression;
    return this;
  }

  /**
   * The metric as defined by a SQL aggregate expression. Only required for SQL expression type.
   * @return sqlExpression
   */
  @javax.annotation.Nullable
  public String getSqlExpression() {
    return sqlExpression;
  }

  public void setSqlExpression(String sqlExpression) {
    this.sqlExpression = sqlExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataAdhocMetricSchema chartDataAdhocMetricSchema = (ChartDataAdhocMetricSchema) o;
    return Objects.equals(this.aggregate, chartDataAdhocMetricSchema.aggregate) &&
        Objects.equals(this.column, chartDataAdhocMetricSchema.column) &&
        Objects.equals(this.expressionType, chartDataAdhocMetricSchema.expressionType) &&
        Objects.equals(this.hasCustomLabel, chartDataAdhocMetricSchema.hasCustomLabel) &&
        Objects.equals(this.label, chartDataAdhocMetricSchema.label) &&
        Objects.equals(this.optionName, chartDataAdhocMetricSchema.optionName) &&
        Objects.equals(this.sqlExpression, chartDataAdhocMetricSchema.sqlExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregate, column, expressionType, hasCustomLabel, label, optionName, sqlExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataAdhocMetricSchema {\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    expressionType: ").append(toIndentedString(expressionType)).append("\n");
    sb.append("    hasCustomLabel: ").append(toIndentedString(hasCustomLabel)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    optionName: ").append(toIndentedString(optionName)).append("\n");
    sb.append("    sqlExpression: ").append(toIndentedString(sqlExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregate");
    openapiFields.add("column");
    openapiFields.add("expressionType");
    openapiFields.add("hasCustomLabel");
    openapiFields.add("label");
    openapiFields.add("optionName");
    openapiFields.add("sqlExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expressionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartDataAdhocMetricSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartDataAdhocMetricSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartDataAdhocMetricSchema is not found in the empty JSON string", ChartDataAdhocMetricSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartDataAdhocMetricSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartDataAdhocMetricSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChartDataAdhocMetricSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregate") != null && !jsonObj.get("aggregate").isJsonNull()) && !jsonObj.get("aggregate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregate").toString()));
      }
      // validate the optional field `aggregate`
      if (jsonObj.get("aggregate") != null && !jsonObj.get("aggregate").isJsonNull()) {
        AggregateEnum.validateJsonElement(jsonObj.get("aggregate"));
      }
      // validate the optional field `column`
      if (jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) {
        ChartDataColumn.validateJsonElement(jsonObj.get("column"));
      }
      if (!jsonObj.get("expressionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expressionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expressionType").toString()));
      }
      // validate the required field `expressionType`
      ExpressionTypeEnum.validateJsonElement(jsonObj.get("expressionType"));
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("optionName") != null && !jsonObj.get("optionName").isJsonNull()) && !jsonObj.get("optionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionName").toString()));
      }
      if ((jsonObj.get("sqlExpression") != null && !jsonObj.get("sqlExpression").isJsonNull()) && !jsonObj.get("sqlExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartDataAdhocMetricSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartDataAdhocMetricSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartDataAdhocMetricSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartDataAdhocMetricSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartDataAdhocMetricSchema>() {
           @Override
           public void write(JsonWriter out, ChartDataAdhocMetricSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartDataAdhocMetricSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartDataAdhocMetricSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartDataAdhocMetricSchema
   * @throws IOException if the JSON string is invalid with respect to ChartDataAdhocMetricSchema
   */
  public static ChartDataAdhocMetricSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartDataAdhocMetricSchema.class);
  }

  /**
   * Convert an instance of ChartDataAdhocMetricSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

