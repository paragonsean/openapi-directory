/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetListSchemaFiltersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetListSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetListSchema {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<GetListSchemaFiltersInner> filters = new ArrayList<>();

  /**
   * Gets or Sets keys
   */
  @JsonAdapter(KeysEnum.Adapter.class)
  public enum KeysEnum {
    LIST_COLUMNS("list_columns"),
    
    ORDER_COLUMNS("order_columns"),
    
    LABEL_COLUMNS("label_columns"),
    
    DESCRIPTION_COLUMNS("description_columns"),
    
    LIST_TITLE("list_title"),
    
    NONE("none");

    private String value;

    KeysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeysEnum fromValue(String value) {
      for (KeysEnum b : KeysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<KeysEnum> keys = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_COLUMN = "order_column";
  @SerializedName(SERIALIZED_NAME_ORDER_COLUMN)
  private String orderColumn;

  /**
   * Gets or Sets orderDirection
   */
  @JsonAdapter(OrderDirectionEnum.Adapter.class)
  public enum OrderDirectionEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    OrderDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderDirectionEnum fromValue(String value) {
      for (OrderDirectionEnum b : OrderDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_DIRECTION = "order_direction";
  @SerializedName(SERIALIZED_NAME_ORDER_DIRECTION)
  private OrderDirectionEnum orderDirection;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public GetListSchema() {
  }

  public GetListSchema columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public GetListSchema addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public GetListSchema filters(List<GetListSchemaFiltersInner> filters) {
    this.filters = filters;
    return this;
  }

  public GetListSchema addFiltersItem(GetListSchemaFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<GetListSchemaFiltersInner> getFilters() {
    return filters;
  }

  public void setFilters(List<GetListSchemaFiltersInner> filters) {
    this.filters = filters;
  }


  public GetListSchema keys(List<KeysEnum> keys) {
    this.keys = keys;
    return this;
  }

  public GetListSchema addKeysItem(KeysEnum keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

  /**
   * Get keys
   * @return keys
   */
  @javax.annotation.Nullable
  public List<KeysEnum> getKeys() {
    return keys;
  }

  public void setKeys(List<KeysEnum> keys) {
    this.keys = keys;
  }


  public GetListSchema orderColumn(String orderColumn) {
    this.orderColumn = orderColumn;
    return this;
  }

  /**
   * Get orderColumn
   * @return orderColumn
   */
  @javax.annotation.Nullable
  public String getOrderColumn() {
    return orderColumn;
  }

  public void setOrderColumn(String orderColumn) {
    this.orderColumn = orderColumn;
  }


  public GetListSchema orderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
    return this;
  }

  /**
   * Get orderDirection
   * @return orderDirection
   */
  @javax.annotation.Nullable
  public OrderDirectionEnum getOrderDirection() {
    return orderDirection;
  }

  public void setOrderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
  }


  public GetListSchema page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public GetListSchema pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetListSchema getListSchema = (GetListSchema) o;
    return Objects.equals(this.columns, getListSchema.columns) &&
        Objects.equals(this.filters, getListSchema.filters) &&
        Objects.equals(this.keys, getListSchema.keys) &&
        Objects.equals(this.orderColumn, getListSchema.orderColumn) &&
        Objects.equals(this.orderDirection, getListSchema.orderDirection) &&
        Objects.equals(this.page, getListSchema.page) &&
        Objects.equals(this.pageSize, getListSchema.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, filters, keys, orderColumn, orderDirection, page, pageSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetListSchema {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    orderColumn: ").append(toIndentedString(orderColumn)).append("\n");
    sb.append("    orderDirection: ").append(toIndentedString(orderDirection)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("filters");
    openapiFields.add("keys");
    openapiFields.add("order_column");
    openapiFields.add("order_direction");
    openapiFields.add("page");
    openapiFields.add("page_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetListSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetListSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetListSchema is not found in the empty JSON string", GetListSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetListSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetListSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            GetListSchemaFiltersInner.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull() && !jsonObj.get("keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be an array in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      if ((jsonObj.get("order_column") != null && !jsonObj.get("order_column").isJsonNull()) && !jsonObj.get("order_column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_column").toString()));
      }
      if ((jsonObj.get("order_direction") != null && !jsonObj.get("order_direction").isJsonNull()) && !jsonObj.get("order_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_direction").toString()));
      }
      // validate the optional field `order_direction`
      if (jsonObj.get("order_direction") != null && !jsonObj.get("order_direction").isJsonNull()) {
        OrderDirectionEnum.validateJsonElement(jsonObj.get("order_direction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetListSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetListSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetListSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetListSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GetListSchema>() {
           @Override
           public void write(JsonWriter out, GetListSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetListSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetListSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetListSchema
   * @throws IOException if the JSON string is invalid with respect to GetListSchema
   */
  public static GetListSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetListSchema.class);
  }

  /**
   * Convert an instance of GetListSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

