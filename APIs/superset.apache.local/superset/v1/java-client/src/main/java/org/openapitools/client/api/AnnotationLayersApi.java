/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotationLayerGet200Response;
import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationAnnotationIdGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationAnnotationIdPut200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationGet200Response;
import org.openapitools.client.model.AnnotationLayerPkAnnotationPost201Response;
import org.openapitools.client.model.AnnotationLayerPkGet200Response;
import org.openapitools.client.model.AnnotationLayerPkPut200Response;
import org.openapitools.client.model.AnnotationLayerPost201Response;
import org.openapitools.client.model.AnnotationLayerRestApiPost;
import org.openapitools.client.model.AnnotationLayerRestApiPut;
import org.openapitools.client.model.AnnotationRestApiPost;
import org.openapitools.client.model.AnnotationRestApiPut;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationLayersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnotationLayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationLayersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for annotationLayerDelete
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CSS templates bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerDeleteCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerDeleteValidateBeforeCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        return annotationLayerDeleteCall(q, _callback);

    }

    /**
     * 
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CSS templates bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response annotationLayerDelete(List<Integer> q) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = annotationLayerDeleteWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CSS templates bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> annotationLayerDeleteWithHttpInfo(List<Integer> q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerDeleteValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes multiple annotation layers in a bulk operation.
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CSS templates bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerDeleteAsync(List<Integer> q, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerDeleteValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerGetCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerGetValidateBeforeCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        return annotationLayerGetCall(q, _callback);

    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @return AnnotationLayerGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet200Response annotationLayerGet(GetListSchema q) throws ApiException {
        ApiResponse<AnnotationLayerGet200Response> localVarResp = annotationLayerGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet200Response> annotationLayerGetWithHttpInfo(GetListSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerGetAsync(GetListSchema q, final ApiCallback<AnnotationLayerGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerInfoGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerInfoGetCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerInfoGetValidateBeforeCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        return annotationLayerInfoGetCall(q, _callback);

    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return AnnotationLayerInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerInfoGet200Response annotationLayerInfoGet(GetInfoSchema q) throws ApiException {
        ApiResponse<AnnotationLayerInfoGet200Response> localVarResp = annotationLayerInfoGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerInfoGet200Response> annotationLayerInfoGetWithHttpInfo(GetInfoSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerInfoGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information about this API resource
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerInfoGetAsync(GetInfoSchema q, final ApiCallback<AnnotationLayerInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerInfoGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationAnnotationIdDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdDeleteCall(Integer pk, Integer annotationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/{annotation_id}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "annotation_id" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(Integer pk, Integer annotationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdDelete(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdDelete(Async)");
        }

        return annotationLayerPkAnnotationAnnotationIdDeleteCall(pk, annotationId, _callback);

    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response annotationLayerPkAnnotationAnnotationIdDelete(Integer pk, Integer annotationId) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = annotationLayerPkAnnotationAnnotationIdDeleteWithHttpInfo(pk, annotationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> annotationLayerPkAnnotationAnnotationIdDeleteWithHttpInfo(Integer pk, Integer annotationId) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(pk, annotationId, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdDeleteAsync(Integer pk, Integer annotationId, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdDeleteValidateBeforeCall(pk, annotationId, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationAnnotationIdGet
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdGetCall(Integer pk, Integer annotationId, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/{annotation_id}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "annotation_id" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(Integer pk, Integer annotationId, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdGet(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdGet(Async)");
        }

        return annotationLayerPkAnnotationAnnotationIdGetCall(pk, annotationId, q, _callback);

    }

    /**
     * 
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @return AnnotationLayerPkAnnotationAnnotationIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkAnnotationAnnotationIdGet200Response annotationLayerPkAnnotationAnnotationIdGet(Integer pk, Integer annotationId, GetItemSchema q) throws ApiException {
        ApiResponse<AnnotationLayerPkAnnotationAnnotationIdGet200Response> localVarResp = annotationLayerPkAnnotationAnnotationIdGetWithHttpInfo(pk, annotationId, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerPkAnnotationAnnotationIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkAnnotationAnnotationIdGet200Response> annotationLayerPkAnnotationAnnotationIdGetWithHttpInfo(Integer pk, Integer annotationId, GetItemSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(pk, annotationId, q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationAnnotationIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdGetAsync(Integer pk, Integer annotationId, GetItemSchema q, final ApiCallback<AnnotationLayerPkAnnotationAnnotationIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdGetValidateBeforeCall(pk, annotationId, q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationAnnotationIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationAnnotationIdPut
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param annotationRestApiPut Annotation schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdPutCall(Integer pk, Integer annotationId, AnnotationRestApiPut annotationRestApiPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotationRestApiPut;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/{annotation_id}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "annotation_id" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(Integer pk, Integer annotationId, AnnotationRestApiPut annotationRestApiPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdPut(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdPut(Async)");
        }

        // verify the required parameter 'annotationRestApiPut' is set
        if (annotationRestApiPut == null) {
            throw new ApiException("Missing the required parameter 'annotationRestApiPut' when calling annotationLayerPkAnnotationAnnotationIdPut(Async)");
        }

        return annotationLayerPkAnnotationAnnotationIdPutCall(pk, annotationId, annotationRestApiPut, _callback);

    }

    /**
     * 
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param annotationRestApiPut Annotation schema (required)
     * @return AnnotationLayerPkAnnotationAnnotationIdPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkAnnotationAnnotationIdPut200Response annotationLayerPkAnnotationAnnotationIdPut(Integer pk, Integer annotationId, AnnotationRestApiPut annotationRestApiPut) throws ApiException {
        ApiResponse<AnnotationLayerPkAnnotationAnnotationIdPut200Response> localVarResp = annotationLayerPkAnnotationAnnotationIdPutWithHttpInfo(pk, annotationId, annotationRestApiPut);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param annotationRestApiPut Annotation schema (required)
     * @return ApiResponse&lt;AnnotationLayerPkAnnotationAnnotationIdPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkAnnotationAnnotationIdPut200Response> annotationLayerPkAnnotationAnnotationIdPutWithHttpInfo(Integer pk, Integer annotationId, AnnotationRestApiPut annotationRestApiPut) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(pk, annotationId, annotationRestApiPut, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationAnnotationIdPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationId The annotation pk for this annotation (required)
     * @param annotationRestApiPut Annotation schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationAnnotationIdPutAsync(Integer pk, Integer annotationId, AnnotationRestApiPut annotationRestApiPut, final ApiCallback<AnnotationLayerPkAnnotationAnnotationIdPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationAnnotationIdPutValidateBeforeCall(pk, annotationId, annotationRestApiPut, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationAnnotationIdPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotations bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationDeleteCall(Integer pk, List<Integer> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationDeleteValidateBeforeCall(Integer pk, List<Integer> q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationDelete(Async)");
        }

        return annotationLayerPkAnnotationDeleteCall(pk, q, _callback);

    }

    /**
     * 
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotations bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response annotationLayerPkAnnotationDelete(Integer pk, List<Integer> q) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = annotationLayerPkAnnotationDeleteWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotations bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> annotationLayerPkAnnotationDeleteWithHttpInfo(Integer pk, List<Integer> q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationDeleteValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes multiple annotation in a bulk operation.
     * @param pk The annotation layer pk for this annotation (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotations bulk delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationDeleteAsync(Integer pk, List<Integer> q, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationDeleteValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationGet
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Annotations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationGetCall(Integer pk, GetListSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationGetValidateBeforeCall(Integer pk, GetListSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationGet(Async)");
        }

        return annotationLayerPkAnnotationGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @return AnnotationLayerPkAnnotationGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Annotations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkAnnotationGet200Response annotationLayerPkAnnotationGet(Integer pk, GetListSchema q) throws ApiException {
        ApiResponse<AnnotationLayerPkAnnotationGet200Response> localVarResp = annotationLayerPkAnnotationGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerPkAnnotationGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Annotations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkAnnotationGet200Response> annotationLayerPkAnnotationGetWithHttpInfo(Integer pk, GetListSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param pk The annotation layer id for this annotation (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Annotations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationGetAsync(Integer pk, GetListSchema q, final ApiCallback<AnnotationLayerPkAnnotationGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkAnnotationPost
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationRestApiPost Annotation schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationPostCall(Integer pk, AnnotationRestApiPost annotationRestApiPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotationRestApiPost;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}/annotation/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkAnnotationPostValidateBeforeCall(Integer pk, AnnotationRestApiPost annotationRestApiPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationPost(Async)");
        }

        // verify the required parameter 'annotationRestApiPost' is set
        if (annotationRestApiPost == null) {
            throw new ApiException("Missing the required parameter 'annotationRestApiPost' when calling annotationLayerPkAnnotationPost(Async)");
        }

        return annotationLayerPkAnnotationPostCall(pk, annotationRestApiPost, _callback);

    }

    /**
     * 
     * Create an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationRestApiPost Annotation schema (required)
     * @return AnnotationLayerPkAnnotationPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkAnnotationPost201Response annotationLayerPkAnnotationPost(Integer pk, AnnotationRestApiPost annotationRestApiPost) throws ApiException {
        ApiResponse<AnnotationLayerPkAnnotationPost201Response> localVarResp = annotationLayerPkAnnotationPostWithHttpInfo(pk, annotationRestApiPost);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationRestApiPost Annotation schema (required)
     * @return ApiResponse&lt;AnnotationLayerPkAnnotationPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkAnnotationPost201Response> annotationLayerPkAnnotationPostWithHttpInfo(Integer pk, AnnotationRestApiPost annotationRestApiPost) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkAnnotationPostValidateBeforeCall(pk, annotationRestApiPost, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationRestApiPost Annotation schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkAnnotationPostAsync(Integer pk, AnnotationRestApiPost annotationRestApiPost, final ApiCallback<AnnotationLayerPkAnnotationPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkAnnotationPostValidateBeforeCall(pk, annotationRestApiPost, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkAnnotationPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkDelete
     * @param pk The annotation layer pk for this annotation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkDeleteCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkDeleteValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkDelete(Async)");
        }

        return annotationLayerPkDeleteCall(pk, _callback);

    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response annotationLayerPkDelete(Integer pk) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = annotationLayerPkDeleteWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> annotationLayerPkDeleteWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkDeleteValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkDeleteAsync(Integer pk, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkDeleteValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkGet
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkGetCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkGetValidateBeforeCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkGet(Async)");
        }

        return annotationLayerPkGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @return AnnotationLayerPkGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkGet200Response annotationLayerPkGet(Integer pk, GetItemSchema q) throws ApiException {
        ApiResponse<AnnotationLayerPkGet200Response> localVarResp = annotationLayerPkGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerPkGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkGet200Response> annotationLayerPkGetWithHttpInfo(Integer pk, GetItemSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Annotation layer
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkGetAsync(Integer pk, GetItemSchema q, final ApiCallback<AnnotationLayerPkGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPkPut
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationLayerRestApiPut Annotation schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkPutCall(Integer pk, AnnotationLayerRestApiPut annotationLayerRestApiPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotationLayerRestApiPut;

        // create path and map variables
        String localVarPath = "/annotation_layer/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPkPutValidateBeforeCall(Integer pk, AnnotationLayerRestApiPut annotationLayerRestApiPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling annotationLayerPkPut(Async)");
        }

        // verify the required parameter 'annotationLayerRestApiPut' is set
        if (annotationLayerRestApiPut == null) {
            throw new ApiException("Missing the required parameter 'annotationLayerRestApiPut' when calling annotationLayerPkPut(Async)");
        }

        return annotationLayerPkPutCall(pk, annotationLayerRestApiPut, _callback);

    }

    /**
     * 
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationLayerRestApiPut Annotation schema (required)
     * @return AnnotationLayerPkPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPkPut200Response annotationLayerPkPut(Integer pk, AnnotationLayerRestApiPut annotationLayerRestApiPut) throws ApiException {
        ApiResponse<AnnotationLayerPkPut200Response> localVarResp = annotationLayerPkPutWithHttpInfo(pk, annotationLayerRestApiPut);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationLayerRestApiPut Annotation schema (required)
     * @return ApiResponse&lt;AnnotationLayerPkPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPkPut200Response> annotationLayerPkPutWithHttpInfo(Integer pk, AnnotationLayerRestApiPut annotationLayerRestApiPut) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPkPutValidateBeforeCall(pk, annotationLayerRestApiPut, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Annotation layer
     * @param pk The annotation layer pk for this annotation (required)
     * @param annotationLayerRestApiPut Annotation schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Annotation changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPkPutAsync(Integer pk, AnnotationLayerRestApiPut annotationLayerRestApiPut, final ApiCallback<AnnotationLayerPkPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPkPutValidateBeforeCall(pk, annotationLayerRestApiPut, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPkPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerPost
     * @param annotationLayerRestApiPost Annotation Layer schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPostCall(AnnotationLayerRestApiPost annotationLayerRestApiPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotationLayerRestApiPost;

        // create path and map variables
        String localVarPath = "/annotation_layer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerPostValidateBeforeCall(AnnotationLayerRestApiPost annotationLayerRestApiPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'annotationLayerRestApiPost' is set
        if (annotationLayerRestApiPost == null) {
            throw new ApiException("Missing the required parameter 'annotationLayerRestApiPost' when calling annotationLayerPost(Async)");
        }

        return annotationLayerPostCall(annotationLayerRestApiPost, _callback);

    }

    /**
     * 
     * Create an Annotation layer
     * @param annotationLayerRestApiPost Annotation Layer schema (required)
     * @return AnnotationLayerPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerPost201Response annotationLayerPost(AnnotationLayerRestApiPost annotationLayerRestApiPost) throws ApiException {
        ApiResponse<AnnotationLayerPost201Response> localVarResp = annotationLayerPostWithHttpInfo(annotationLayerRestApiPost);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an Annotation layer
     * @param annotationLayerRestApiPost Annotation Layer schema (required)
     * @return ApiResponse&lt;AnnotationLayerPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerPost201Response> annotationLayerPostWithHttpInfo(AnnotationLayerRestApiPost annotationLayerRestApiPost) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerPostValidateBeforeCall(annotationLayerRestApiPost, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Annotation layer
     * @param annotationLayerRestApiPost Annotation Layer schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Annotation added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerPostAsync(AnnotationLayerRestApiPost annotationLayerRestApiPost, final ApiCallback<AnnotationLayerPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerPostValidateBeforeCall(annotationLayerRestApiPost, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotationLayerRelatedColumnNameGet
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerRelatedColumnNameGetCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation_layer/related/{column_name}"
            .replace("{" + "column_name" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotationLayerRelatedColumnNameGetValidateBeforeCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling annotationLayerRelatedColumnNameGet(Async)");
        }

        return annotationLayerRelatedColumnNameGetCall(columnName, q, _callback);

    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return RelatedResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public RelatedResponseSchema annotationLayerRelatedColumnNameGet(String columnName, GetRelatedSchema q) throws ApiException {
        ApiResponse<RelatedResponseSchema> localVarResp = annotationLayerRelatedColumnNameGetWithHttpInfo(columnName, q);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;RelatedResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelatedResponseSchema> annotationLayerRelatedColumnNameGetWithHttpInfo(String columnName, GetRelatedSchema q) throws ApiException {
        okhttp3.Call localVarCall = annotationLayerRelatedColumnNameGetValidateBeforeCall(columnName, q, null);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotationLayerRelatedColumnNameGetAsync(String columnName, GetRelatedSchema q, final ApiCallback<RelatedResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotationLayerRelatedColumnNameGetValidateBeforeCall(columnName, q, _callback);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
