/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChartDataFilter;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartDataExtras
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartDataExtras {
  public static final String SERIALIZED_NAME_DRUID_TIME_ORIGIN = "druid_time_origin";
  @SerializedName(SERIALIZED_NAME_DRUID_TIME_ORIGIN)
  private String druidTimeOrigin;

  public static final String SERIALIZED_NAME_HAVING = "having";
  @SerializedName(SERIALIZED_NAME_HAVING)
  private String having;

  public static final String SERIALIZED_NAME_HAVING_DRUID = "having_druid";
  @SerializedName(SERIALIZED_NAME_HAVING_DRUID)
  private List<ChartDataFilter> havingDruid = new ArrayList<>();

  /**
   * End time for relative time deltas. Default: &#x60;config[\&quot;DEFAULT_RELATIVE_START_TIME\&quot;]&#x60;
   */
  @JsonAdapter(RelativeEndEnum.Adapter.class)
  public enum RelativeEndEnum {
    TODAY("today"),
    
    NOW("now");

    private String value;

    RelativeEndEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeEndEnum fromValue(String value) {
      for (RelativeEndEnum b : RelativeEndEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeEndEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeEndEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeEndEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeEndEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeEndEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_END = "relative_end";
  @SerializedName(SERIALIZED_NAME_RELATIVE_END)
  private RelativeEndEnum relativeEnd;

  /**
   * Start time for relative time deltas. Default: &#x60;config[\&quot;DEFAULT_RELATIVE_START_TIME\&quot;]&#x60;
   */
  @JsonAdapter(RelativeStartEnum.Adapter.class)
  public enum RelativeStartEnum {
    TODAY("today"),
    
    NOW("now");

    private String value;

    RelativeStartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeStartEnum fromValue(String value) {
      for (RelativeStartEnum b : RelativeStartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeStartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeStartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeStartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeStartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeStartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_START = "relative_start";
  @SerializedName(SERIALIZED_NAME_RELATIVE_START)
  private RelativeStartEnum relativeStart;

  /**
   * To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   */
  @JsonAdapter(TimeGrainSqlaEnum.Adapter.class)
  public enum TimeGrainSqlaEnum {
    PT1_S("PT1S"),
    
    PT5_S("PT5S"),
    
    PT30_S("PT30S"),
    
    PT1_M("PT1M"),
    
    PT5_M("PT5M"),
    
    PT10_M("PT10M"),
    
    PT15_M("PT15M"),
    
    PT0_5_H("PT0.5H"),
    
    PT1_H("PT1H"),
    
    PT6_H("PT6H"),
    
    P1_D("P1D"),
    
    P1_W("P1W"),
    
    P1_M("P1M"),
    
    P0_25_Y("P0.25Y"),
    
    P1_Y("P1Y"),
    
    _1969_12_28_T00_00_00_Z_P1_W("1969-12-28T00:00:00Z/P1W"),
    
    _1969_12_29_T00_00_00_Z_P1_W("1969-12-29T00:00:00Z/P1W"),
    
    P1_W_1970_01_03_T00_00_00_Z("P1W/1970-01-03T00:00:00Z"),
    
    P1_W_1970_01_04_T00_00_00_Z("P1W/1970-01-04T00:00:00Z");

    private String value;

    TimeGrainSqlaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeGrainSqlaEnum fromValue(String value) {
      for (TimeGrainSqlaEnum b : TimeGrainSqlaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TimeGrainSqlaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeGrainSqlaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeGrainSqlaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeGrainSqlaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeGrainSqlaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_GRAIN_SQLA = "time_grain_sqla";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN_SQLA)
  private TimeGrainSqlaEnum timeGrainSqla;

  public static final String SERIALIZED_NAME_TIME_RANGE_ENDPOINTS = "time_range_endpoints";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE_ENDPOINTS)
  private List<Object> timeRangeEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private String where;

  public ChartDataExtras() {
  }

  public ChartDataExtras druidTimeOrigin(String druidTimeOrigin) {
    this.druidTimeOrigin = druidTimeOrigin;
    return this;
  }

  /**
   * Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week.
   * @return druidTimeOrigin
   */
  @javax.annotation.Nullable
  public String getDruidTimeOrigin() {
    return druidTimeOrigin;
  }

  public void setDruidTimeOrigin(String druidTimeOrigin) {
    this.druidTimeOrigin = druidTimeOrigin;
  }


  public ChartDataExtras having(String having) {
    this.having = having;
    return this;
  }

  /**
   * HAVING clause to be added to aggregate queries using AND operator.
   * @return having
   */
  @javax.annotation.Nullable
  public String getHaving() {
    return having;
  }

  public void setHaving(String having) {
    this.having = having;
  }


  public ChartDataExtras havingDruid(List<ChartDataFilter> havingDruid) {
    this.havingDruid = havingDruid;
    return this;
  }

  public ChartDataExtras addHavingDruidItem(ChartDataFilter havingDruidItem) {
    if (this.havingDruid == null) {
      this.havingDruid = new ArrayList<>();
    }
    this.havingDruid.add(havingDruidItem);
    return this;
  }

  /**
   * HAVING filters to be added to legacy Druid datasource queries.
   * @return havingDruid
   */
  @javax.annotation.Nullable
  public List<ChartDataFilter> getHavingDruid() {
    return havingDruid;
  }

  public void setHavingDruid(List<ChartDataFilter> havingDruid) {
    this.havingDruid = havingDruid;
  }


  public ChartDataExtras relativeEnd(RelativeEndEnum relativeEnd) {
    this.relativeEnd = relativeEnd;
    return this;
  }

  /**
   * End time for relative time deltas. Default: &#x60;config[\&quot;DEFAULT_RELATIVE_START_TIME\&quot;]&#x60;
   * @return relativeEnd
   */
  @javax.annotation.Nullable
  public RelativeEndEnum getRelativeEnd() {
    return relativeEnd;
  }

  public void setRelativeEnd(RelativeEndEnum relativeEnd) {
    this.relativeEnd = relativeEnd;
  }


  public ChartDataExtras relativeStart(RelativeStartEnum relativeStart) {
    this.relativeStart = relativeStart;
    return this;
  }

  /**
   * Start time for relative time deltas. Default: &#x60;config[\&quot;DEFAULT_RELATIVE_START_TIME\&quot;]&#x60;
   * @return relativeStart
   */
  @javax.annotation.Nullable
  public RelativeStartEnum getRelativeStart() {
    return relativeStart;
  }

  public void setRelativeStart(RelativeStartEnum relativeStart) {
    this.relativeStart = relativeStart;
  }


  public ChartDataExtras timeGrainSqla(TimeGrainSqlaEnum timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
    return this;
  }

  /**
   * To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   * @return timeGrainSqla
   */
  @javax.annotation.Nullable
  public TimeGrainSqlaEnum getTimeGrainSqla() {
    return timeGrainSqla;
  }

  public void setTimeGrainSqla(TimeGrainSqlaEnum timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
  }


  public ChartDataExtras timeRangeEndpoints(List<Object> timeRangeEndpoints) {
    this.timeRangeEndpoints = timeRangeEndpoints;
    return this;
  }

  public ChartDataExtras addTimeRangeEndpointsItem(Object timeRangeEndpointsItem) {
    if (this.timeRangeEndpoints == null) {
      this.timeRangeEndpoints = new ArrayList<>();
    }
    this.timeRangeEndpoints.add(timeRangeEndpointsItem);
    return this;
  }

  /**
   * Get timeRangeEndpoints
   * @return timeRangeEndpoints
   */
  @javax.annotation.Nullable
  public List<Object> getTimeRangeEndpoints() {
    return timeRangeEndpoints;
  }

  public void setTimeRangeEndpoints(List<Object> timeRangeEndpoints) {
    this.timeRangeEndpoints = timeRangeEndpoints;
  }


  public ChartDataExtras where(String where) {
    this.where = where;
    return this;
  }

  /**
   * WHERE clause to be added to queries using AND operator.
   * @return where
   */
  @javax.annotation.Nullable
  public String getWhere() {
    return where;
  }

  public void setWhere(String where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataExtras chartDataExtras = (ChartDataExtras) o;
    return Objects.equals(this.druidTimeOrigin, chartDataExtras.druidTimeOrigin) &&
        Objects.equals(this.having, chartDataExtras.having) &&
        Objects.equals(this.havingDruid, chartDataExtras.havingDruid) &&
        Objects.equals(this.relativeEnd, chartDataExtras.relativeEnd) &&
        Objects.equals(this.relativeStart, chartDataExtras.relativeStart) &&
        Objects.equals(this.timeGrainSqla, chartDataExtras.timeGrainSqla) &&
        Objects.equals(this.timeRangeEndpoints, chartDataExtras.timeRangeEndpoints) &&
        Objects.equals(this.where, chartDataExtras.where);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(druidTimeOrigin, having, havingDruid, relativeEnd, relativeStart, timeGrainSqla, timeRangeEndpoints, where);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataExtras {\n");
    sb.append("    druidTimeOrigin: ").append(toIndentedString(druidTimeOrigin)).append("\n");
    sb.append("    having: ").append(toIndentedString(having)).append("\n");
    sb.append("    havingDruid: ").append(toIndentedString(havingDruid)).append("\n");
    sb.append("    relativeEnd: ").append(toIndentedString(relativeEnd)).append("\n");
    sb.append("    relativeStart: ").append(toIndentedString(relativeStart)).append("\n");
    sb.append("    timeGrainSqla: ").append(toIndentedString(timeGrainSqla)).append("\n");
    sb.append("    timeRangeEndpoints: ").append(toIndentedString(timeRangeEndpoints)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("druid_time_origin");
    openapiFields.add("having");
    openapiFields.add("having_druid");
    openapiFields.add("relative_end");
    openapiFields.add("relative_start");
    openapiFields.add("time_grain_sqla");
    openapiFields.add("time_range_endpoints");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartDataExtras
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartDataExtras.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartDataExtras is not found in the empty JSON string", ChartDataExtras.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartDataExtras.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartDataExtras` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("druid_time_origin") != null && !jsonObj.get("druid_time_origin").isJsonNull()) && !jsonObj.get("druid_time_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `druid_time_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("druid_time_origin").toString()));
      }
      if ((jsonObj.get("having") != null && !jsonObj.get("having").isJsonNull()) && !jsonObj.get("having").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `having` to be a primitive type in the JSON string but got `%s`", jsonObj.get("having").toString()));
      }
      if (jsonObj.get("having_druid") != null && !jsonObj.get("having_druid").isJsonNull()) {
        JsonArray jsonArrayhavingDruid = jsonObj.getAsJsonArray("having_druid");
        if (jsonArrayhavingDruid != null) {
          // ensure the json data is an array
          if (!jsonObj.get("having_druid").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `having_druid` to be an array in the JSON string but got `%s`", jsonObj.get("having_druid").toString()));
          }

          // validate the optional field `having_druid` (array)
          for (int i = 0; i < jsonArrayhavingDruid.size(); i++) {
            ChartDataFilter.validateJsonElement(jsonArrayhavingDruid.get(i));
          };
        }
      }
      if ((jsonObj.get("relative_end") != null && !jsonObj.get("relative_end").isJsonNull()) && !jsonObj.get("relative_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relative_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relative_end").toString()));
      }
      // validate the optional field `relative_end`
      if (jsonObj.get("relative_end") != null && !jsonObj.get("relative_end").isJsonNull()) {
        RelativeEndEnum.validateJsonElement(jsonObj.get("relative_end"));
      }
      if ((jsonObj.get("relative_start") != null && !jsonObj.get("relative_start").isJsonNull()) && !jsonObj.get("relative_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relative_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relative_start").toString()));
      }
      // validate the optional field `relative_start`
      if (jsonObj.get("relative_start") != null && !jsonObj.get("relative_start").isJsonNull()) {
        RelativeStartEnum.validateJsonElement(jsonObj.get("relative_start"));
      }
      if ((jsonObj.get("time_grain_sqla") != null && !jsonObj.get("time_grain_sqla").isJsonNull()) && !jsonObj.get("time_grain_sqla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_grain_sqla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_grain_sqla").toString()));
      }
      // validate the optional field `time_grain_sqla`
      if (jsonObj.get("time_grain_sqla") != null && !jsonObj.get("time_grain_sqla").isJsonNull()) {
        TimeGrainSqlaEnum.validateJsonElement(jsonObj.get("time_grain_sqla"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("time_range_endpoints") != null && !jsonObj.get("time_range_endpoints").isJsonNull() && !jsonObj.get("time_range_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_range_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("time_range_endpoints").toString()));
      }
      if ((jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull()) && !jsonObj.get("where").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `where` to be a primitive type in the JSON string but got `%s`", jsonObj.get("where").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartDataExtras.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartDataExtras' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartDataExtras> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartDataExtras.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartDataExtras>() {
           @Override
           public void write(JsonWriter out, ChartDataExtras value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartDataExtras read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartDataExtras given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartDataExtras
   * @throws IOException if the JSON string is invalid with respect to ChartDataExtras
   */
  public static ChartDataExtras fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartDataExtras.class);
  }

  /**
   * Convert an instance of ChartDataExtras to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

