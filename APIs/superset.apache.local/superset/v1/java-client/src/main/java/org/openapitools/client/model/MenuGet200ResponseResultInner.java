/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MenuGet200ResponseResultInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MenuGet200ResponseResultInner {
  public static final String SERIALIZED_NAME_CHILDS = "childs";
  @SerializedName(SERIALIZED_NAME_CHILDS)
  private List<Object> childs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public MenuGet200ResponseResultInner() {
  }

  public MenuGet200ResponseResultInner childs(List<Object> childs) {
    this.childs = childs;
    return this;
  }

  public MenuGet200ResponseResultInner addChildsItem(Object childsItem) {
    if (this.childs == null) {
      this.childs = new ArrayList<>();
    }
    this.childs.add(childsItem);
    return this;
  }

  /**
   * Get childs
   * @return childs
   */
  @javax.annotation.Nullable
  public List<Object> getChilds() {
    return childs;
  }

  public void setChilds(List<Object> childs) {
    this.childs = childs;
  }


  public MenuGet200ResponseResultInner icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Icon name to show for this menu item
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public MenuGet200ResponseResultInner label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Pretty name for the menu item
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public MenuGet200ResponseResultInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The internal menu item name, maps to permission_name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MenuGet200ResponseResultInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL for the menu item
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuGet200ResponseResultInner menuGet200ResponseResultInner = (MenuGet200ResponseResultInner) o;
    return Objects.equals(this.childs, menuGet200ResponseResultInner.childs) &&
        Objects.equals(this.icon, menuGet200ResponseResultInner.icon) &&
        Objects.equals(this.label, menuGet200ResponseResultInner.label) &&
        Objects.equals(this.name, menuGet200ResponseResultInner.name) &&
        Objects.equals(this.url, menuGet200ResponseResultInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childs, icon, label, name, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuGet200ResponseResultInner {\n");
    sb.append("    childs: ").append(toIndentedString(childs)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childs");
    openapiFields.add("icon");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MenuGet200ResponseResultInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MenuGet200ResponseResultInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MenuGet200ResponseResultInner is not found in the empty JSON string", MenuGet200ResponseResultInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MenuGet200ResponseResultInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MenuGet200ResponseResultInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childs") != null && !jsonObj.get("childs").isJsonNull() && !jsonObj.get("childs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childs` to be an array in the JSON string but got `%s`", jsonObj.get("childs").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MenuGet200ResponseResultInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MenuGet200ResponseResultInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MenuGet200ResponseResultInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MenuGet200ResponseResultInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MenuGet200ResponseResultInner>() {
           @Override
           public void write(JsonWriter out, MenuGet200ResponseResultInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MenuGet200ResponseResultInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MenuGet200ResponseResultInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MenuGet200ResponseResultInner
   * @throws IOException if the JSON string is invalid with respect to MenuGet200ResponseResultInner
   */
  public static MenuGet200ResponseResultInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MenuGet200ResponseResultInner.class);
  }

  /**
   * Convert an instance of MenuGet200ResponseResultInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

