/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseAvailableGet200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseAvailableGet200ResponseInner {
  public static final String SERIALIZED_NAME_AVAILABLE_DRIVERS = "available_drivers";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_DRIVERS)
  private List<String> availableDrivers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_DRIVER = "default_driver";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DRIVER)
  private String defaultDriver;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_SQLALCHEMY_URI_PLACEHOLDER = "sqlalchemy_uri_placeholder";
  @SerializedName(SERIALIZED_NAME_SQLALCHEMY_URI_PLACEHOLDER)
  private String sqlalchemyUriPlaceholder;

  public DatabaseAvailableGet200ResponseInner() {
  }

  public DatabaseAvailableGet200ResponseInner availableDrivers(List<String> availableDrivers) {
    this.availableDrivers = availableDrivers;
    return this;
  }

  public DatabaseAvailableGet200ResponseInner addAvailableDriversItem(String availableDriversItem) {
    if (this.availableDrivers == null) {
      this.availableDrivers = new ArrayList<>();
    }
    this.availableDrivers.add(availableDriversItem);
    return this;
  }

  /**
   * Installed drivers for the engine
   * @return availableDrivers
   */
  @javax.annotation.Nullable
  public List<String> getAvailableDrivers() {
    return availableDrivers;
  }

  public void setAvailableDrivers(List<String> availableDrivers) {
    this.availableDrivers = availableDrivers;
  }


  public DatabaseAvailableGet200ResponseInner defaultDriver(String defaultDriver) {
    this.defaultDriver = defaultDriver;
    return this;
  }

  /**
   * Default driver for the engine
   * @return defaultDriver
   */
  @javax.annotation.Nullable
  public String getDefaultDriver() {
    return defaultDriver;
  }

  public void setDefaultDriver(String defaultDriver) {
    this.defaultDriver = defaultDriver;
  }


  public DatabaseAvailableGet200ResponseInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Name of the SQLAlchemy engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DatabaseAvailableGet200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the database
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DatabaseAvailableGet200ResponseInner parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * JSON schema defining the needed parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public DatabaseAvailableGet200ResponseInner preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * Is the database preferred?
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public DatabaseAvailableGet200ResponseInner sqlalchemyUriPlaceholder(String sqlalchemyUriPlaceholder) {
    this.sqlalchemyUriPlaceholder = sqlalchemyUriPlaceholder;
    return this;
  }

  /**
   * Example placeholder for the SQLAlchemy URI
   * @return sqlalchemyUriPlaceholder
   */
  @javax.annotation.Nullable
  public String getSqlalchemyUriPlaceholder() {
    return sqlalchemyUriPlaceholder;
  }

  public void setSqlalchemyUriPlaceholder(String sqlalchemyUriPlaceholder) {
    this.sqlalchemyUriPlaceholder = sqlalchemyUriPlaceholder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseAvailableGet200ResponseInner databaseAvailableGet200ResponseInner = (DatabaseAvailableGet200ResponseInner) o;
    return Objects.equals(this.availableDrivers, databaseAvailableGet200ResponseInner.availableDrivers) &&
        Objects.equals(this.defaultDriver, databaseAvailableGet200ResponseInner.defaultDriver) &&
        Objects.equals(this.engine, databaseAvailableGet200ResponseInner.engine) &&
        Objects.equals(this.name, databaseAvailableGet200ResponseInner.name) &&
        Objects.equals(this.parameters, databaseAvailableGet200ResponseInner.parameters) &&
        Objects.equals(this.preferred, databaseAvailableGet200ResponseInner.preferred) &&
        Objects.equals(this.sqlalchemyUriPlaceholder, databaseAvailableGet200ResponseInner.sqlalchemyUriPlaceholder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableDrivers, defaultDriver, engine, name, parameters, preferred, sqlalchemyUriPlaceholder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseAvailableGet200ResponseInner {\n");
    sb.append("    availableDrivers: ").append(toIndentedString(availableDrivers)).append("\n");
    sb.append("    defaultDriver: ").append(toIndentedString(defaultDriver)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    sqlalchemyUriPlaceholder: ").append(toIndentedString(sqlalchemyUriPlaceholder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_drivers");
    openapiFields.add("default_driver");
    openapiFields.add("engine");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("preferred");
    openapiFields.add("sqlalchemy_uri_placeholder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseAvailableGet200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseAvailableGet200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseAvailableGet200ResponseInner is not found in the empty JSON string", DatabaseAvailableGet200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseAvailableGet200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseAvailableGet200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_drivers") != null && !jsonObj.get("available_drivers").isJsonNull() && !jsonObj.get("available_drivers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_drivers` to be an array in the JSON string but got `%s`", jsonObj.get("available_drivers").toString()));
      }
      if ((jsonObj.get("default_driver") != null && !jsonObj.get("default_driver").isJsonNull()) && !jsonObj.get("default_driver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_driver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_driver").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sqlalchemy_uri_placeholder") != null && !jsonObj.get("sqlalchemy_uri_placeholder").isJsonNull()) && !jsonObj.get("sqlalchemy_uri_placeholder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlalchemy_uri_placeholder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlalchemy_uri_placeholder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseAvailableGet200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseAvailableGet200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseAvailableGet200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseAvailableGet200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseAvailableGet200ResponseInner>() {
           @Override
           public void write(JsonWriter out, DatabaseAvailableGet200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseAvailableGet200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseAvailableGet200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseAvailableGet200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to DatabaseAvailableGet200ResponseInner
   */
  public static DatabaseAvailableGet200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseAvailableGet200ResponseInner.class);
  }

  /**
   * Convert an instance of DatabaseAvailableGet200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

