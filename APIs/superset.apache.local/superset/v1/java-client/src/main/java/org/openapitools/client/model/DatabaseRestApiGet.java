/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseRestApiGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseRestApiGet {
  public static final String SERIALIZED_NAME_ALLOW_CSV_UPLOAD = "allow_csv_upload";
  @SerializedName(SERIALIZED_NAME_ALLOW_CSV_UPLOAD)
  private Boolean allowCsvUpload;

  public static final String SERIALIZED_NAME_ALLOW_CTAS = "allow_ctas";
  @SerializedName(SERIALIZED_NAME_ALLOW_CTAS)
  private Boolean allowCtas;

  public static final String SERIALIZED_NAME_ALLOW_CVAS = "allow_cvas";
  @SerializedName(SERIALIZED_NAME_ALLOW_CVAS)
  private Boolean allowCvas;

  public static final String SERIALIZED_NAME_ALLOW_DML = "allow_dml";
  @SerializedName(SERIALIZED_NAME_ALLOW_DML)
  private Boolean allowDml;

  public static final String SERIALIZED_NAME_ALLOW_MULTI_SCHEMA_METADATA_FETCH = "allow_multi_schema_metadata_fetch";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTI_SCHEMA_METADATA_FETCH)
  private Boolean allowMultiSchemaMetadataFetch;

  public static final String SERIALIZED_NAME_ALLOW_RUN_ASYNC = "allow_run_async";
  @SerializedName(SERIALIZED_NAME_ALLOW_RUN_ASYNC)
  private Boolean allowRunAsync;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private Object backend = null;

  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_CONFIGURATION_METHOD = "configuration_method";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_METHOD)
  private String configurationMethod;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "database_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_ENCRYPTED_EXTRA = "encrypted_extra";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_EXTRA)
  private String encryptedExtra;

  public static final String SERIALIZED_NAME_EXPOSE_IN_SQLLAB = "expose_in_sqllab";
  @SerializedName(SERIALIZED_NAME_EXPOSE_IN_SQLLAB)
  private Boolean exposeInSqllab;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_FORCE_CTAS_SCHEMA = "force_ctas_schema";
  @SerializedName(SERIALIZED_NAME_FORCE_CTAS_SCHEMA)
  private String forceCtasSchema;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMPERSONATE_USER = "impersonate_user";
  @SerializedName(SERIALIZED_NAME_IMPERSONATE_USER)
  private Boolean impersonateUser;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters = null;

  public static final String SERIALIZED_NAME_SERVER_CERT = "server_cert";
  @SerializedName(SERIALIZED_NAME_SERVER_CERT)
  private String serverCert;

  public static final String SERIALIZED_NAME_SQLALCHEMY_URI = "sqlalchemy_uri";
  @SerializedName(SERIALIZED_NAME_SQLALCHEMY_URI)
  private String sqlalchemyUri;

  public DatabaseRestApiGet() {
  }

  public DatabaseRestApiGet(
     Object backend, 
     Object parameters
  ) {
    this();
    this.backend = backend;
    this.parameters = parameters;
  }

  public DatabaseRestApiGet allowCsvUpload(Boolean allowCsvUpload) {
    this.allowCsvUpload = allowCsvUpload;
    return this;
  }

  /**
   * Get allowCsvUpload
   * @return allowCsvUpload
   */
  @javax.annotation.Nullable
  public Boolean getAllowCsvUpload() {
    return allowCsvUpload;
  }

  public void setAllowCsvUpload(Boolean allowCsvUpload) {
    this.allowCsvUpload = allowCsvUpload;
  }


  public DatabaseRestApiGet allowCtas(Boolean allowCtas) {
    this.allowCtas = allowCtas;
    return this;
  }

  /**
   * Get allowCtas
   * @return allowCtas
   */
  @javax.annotation.Nullable
  public Boolean getAllowCtas() {
    return allowCtas;
  }

  public void setAllowCtas(Boolean allowCtas) {
    this.allowCtas = allowCtas;
  }


  public DatabaseRestApiGet allowCvas(Boolean allowCvas) {
    this.allowCvas = allowCvas;
    return this;
  }

  /**
   * Get allowCvas
   * @return allowCvas
   */
  @javax.annotation.Nullable
  public Boolean getAllowCvas() {
    return allowCvas;
  }

  public void setAllowCvas(Boolean allowCvas) {
    this.allowCvas = allowCvas;
  }


  public DatabaseRestApiGet allowDml(Boolean allowDml) {
    this.allowDml = allowDml;
    return this;
  }

  /**
   * Get allowDml
   * @return allowDml
   */
  @javax.annotation.Nullable
  public Boolean getAllowDml() {
    return allowDml;
  }

  public void setAllowDml(Boolean allowDml) {
    this.allowDml = allowDml;
  }


  public DatabaseRestApiGet allowMultiSchemaMetadataFetch(Boolean allowMultiSchemaMetadataFetch) {
    this.allowMultiSchemaMetadataFetch = allowMultiSchemaMetadataFetch;
    return this;
  }

  /**
   * Get allowMultiSchemaMetadataFetch
   * @return allowMultiSchemaMetadataFetch
   */
  @javax.annotation.Nullable
  public Boolean getAllowMultiSchemaMetadataFetch() {
    return allowMultiSchemaMetadataFetch;
  }

  public void setAllowMultiSchemaMetadataFetch(Boolean allowMultiSchemaMetadataFetch) {
    this.allowMultiSchemaMetadataFetch = allowMultiSchemaMetadataFetch;
  }


  public DatabaseRestApiGet allowRunAsync(Boolean allowRunAsync) {
    this.allowRunAsync = allowRunAsync;
    return this;
  }

  /**
   * Get allowRunAsync
   * @return allowRunAsync
   */
  @javax.annotation.Nullable
  public Boolean getAllowRunAsync() {
    return allowRunAsync;
  }

  public void setAllowRunAsync(Boolean allowRunAsync) {
    this.allowRunAsync = allowRunAsync;
  }


  /**
   * Get backend
   * @return backend
   */
  @javax.annotation.Nullable
  public Object getBackend() {
    return backend;
  }



  public DatabaseRestApiGet cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public DatabaseRestApiGet configurationMethod(String configurationMethod) {
    this.configurationMethod = configurationMethod;
    return this;
  }

  /**
   * Get configurationMethod
   * @return configurationMethod
   */
  @javax.annotation.Nullable
  public String getConfigurationMethod() {
    return configurationMethod;
  }

  public void setConfigurationMethod(String configurationMethod) {
    this.configurationMethod = configurationMethod;
  }


  public DatabaseRestApiGet databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public DatabaseRestApiGet encryptedExtra(String encryptedExtra) {
    this.encryptedExtra = encryptedExtra;
    return this;
  }

  /**
   * Get encryptedExtra
   * @return encryptedExtra
   */
  @javax.annotation.Nullable
  public String getEncryptedExtra() {
    return encryptedExtra;
  }

  public void setEncryptedExtra(String encryptedExtra) {
    this.encryptedExtra = encryptedExtra;
  }


  public DatabaseRestApiGet exposeInSqllab(Boolean exposeInSqllab) {
    this.exposeInSqllab = exposeInSqllab;
    return this;
  }

  /**
   * Get exposeInSqllab
   * @return exposeInSqllab
   */
  @javax.annotation.Nullable
  public Boolean getExposeInSqllab() {
    return exposeInSqllab;
  }

  public void setExposeInSqllab(Boolean exposeInSqllab) {
    this.exposeInSqllab = exposeInSqllab;
  }


  public DatabaseRestApiGet extra(String extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }


  public DatabaseRestApiGet forceCtasSchema(String forceCtasSchema) {
    this.forceCtasSchema = forceCtasSchema;
    return this;
  }

  /**
   * Get forceCtasSchema
   * @return forceCtasSchema
   */
  @javax.annotation.Nullable
  public String getForceCtasSchema() {
    return forceCtasSchema;
  }

  public void setForceCtasSchema(String forceCtasSchema) {
    this.forceCtasSchema = forceCtasSchema;
  }


  public DatabaseRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DatabaseRestApiGet impersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
    return this;
  }

  /**
   * Get impersonateUser
   * @return impersonateUser
   */
  @javax.annotation.Nullable
  public Boolean getImpersonateUser() {
    return impersonateUser;
  }

  public void setImpersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
  }


  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }



  public DatabaseRestApiGet serverCert(String serverCert) {
    this.serverCert = serverCert;
    return this;
  }

  /**
   * Get serverCert
   * @return serverCert
   */
  @javax.annotation.Nullable
  public String getServerCert() {
    return serverCert;
  }

  public void setServerCert(String serverCert) {
    this.serverCert = serverCert;
  }


  public DatabaseRestApiGet sqlalchemyUri(String sqlalchemyUri) {
    this.sqlalchemyUri = sqlalchemyUri;
    return this;
  }

  /**
   * Get sqlalchemyUri
   * @return sqlalchemyUri
   */
  @javax.annotation.Nonnull
  public String getSqlalchemyUri() {
    return sqlalchemyUri;
  }

  public void setSqlalchemyUri(String sqlalchemyUri) {
    this.sqlalchemyUri = sqlalchemyUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseRestApiGet databaseRestApiGet = (DatabaseRestApiGet) o;
    return Objects.equals(this.allowCsvUpload, databaseRestApiGet.allowCsvUpload) &&
        Objects.equals(this.allowCtas, databaseRestApiGet.allowCtas) &&
        Objects.equals(this.allowCvas, databaseRestApiGet.allowCvas) &&
        Objects.equals(this.allowDml, databaseRestApiGet.allowDml) &&
        Objects.equals(this.allowMultiSchemaMetadataFetch, databaseRestApiGet.allowMultiSchemaMetadataFetch) &&
        Objects.equals(this.allowRunAsync, databaseRestApiGet.allowRunAsync) &&
        Objects.equals(this.backend, databaseRestApiGet.backend) &&
        Objects.equals(this.cacheTimeout, databaseRestApiGet.cacheTimeout) &&
        Objects.equals(this.configurationMethod, databaseRestApiGet.configurationMethod) &&
        Objects.equals(this.databaseName, databaseRestApiGet.databaseName) &&
        Objects.equals(this.encryptedExtra, databaseRestApiGet.encryptedExtra) &&
        Objects.equals(this.exposeInSqllab, databaseRestApiGet.exposeInSqllab) &&
        Objects.equals(this.extra, databaseRestApiGet.extra) &&
        Objects.equals(this.forceCtasSchema, databaseRestApiGet.forceCtasSchema) &&
        Objects.equals(this.id, databaseRestApiGet.id) &&
        Objects.equals(this.impersonateUser, databaseRestApiGet.impersonateUser) &&
        Objects.equals(this.parameters, databaseRestApiGet.parameters) &&
        Objects.equals(this.serverCert, databaseRestApiGet.serverCert) &&
        Objects.equals(this.sqlalchemyUri, databaseRestApiGet.sqlalchemyUri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCsvUpload, allowCtas, allowCvas, allowDml, allowMultiSchemaMetadataFetch, allowRunAsync, backend, cacheTimeout, configurationMethod, databaseName, encryptedExtra, exposeInSqllab, extra, forceCtasSchema, id, impersonateUser, parameters, serverCert, sqlalchemyUri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseRestApiGet {\n");
    sb.append("    allowCsvUpload: ").append(toIndentedString(allowCsvUpload)).append("\n");
    sb.append("    allowCtas: ").append(toIndentedString(allowCtas)).append("\n");
    sb.append("    allowCvas: ").append(toIndentedString(allowCvas)).append("\n");
    sb.append("    allowDml: ").append(toIndentedString(allowDml)).append("\n");
    sb.append("    allowMultiSchemaMetadataFetch: ").append(toIndentedString(allowMultiSchemaMetadataFetch)).append("\n");
    sb.append("    allowRunAsync: ").append(toIndentedString(allowRunAsync)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    configurationMethod: ").append(toIndentedString(configurationMethod)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    encryptedExtra: ").append(toIndentedString(encryptedExtra)).append("\n");
    sb.append("    exposeInSqllab: ").append(toIndentedString(exposeInSqllab)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    forceCtasSchema: ").append(toIndentedString(forceCtasSchema)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    impersonateUser: ").append(toIndentedString(impersonateUser)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    serverCert: ").append(toIndentedString(serverCert)).append("\n");
    sb.append("    sqlalchemyUri: ").append(toIndentedString(sqlalchemyUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_csv_upload");
    openapiFields.add("allow_ctas");
    openapiFields.add("allow_cvas");
    openapiFields.add("allow_dml");
    openapiFields.add("allow_multi_schema_metadata_fetch");
    openapiFields.add("allow_run_async");
    openapiFields.add("backend");
    openapiFields.add("cache_timeout");
    openapiFields.add("configuration_method");
    openapiFields.add("database_name");
    openapiFields.add("encrypted_extra");
    openapiFields.add("expose_in_sqllab");
    openapiFields.add("extra");
    openapiFields.add("force_ctas_schema");
    openapiFields.add("id");
    openapiFields.add("impersonate_user");
    openapiFields.add("parameters");
    openapiFields.add("server_cert");
    openapiFields.add("sqlalchemy_uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("database_name");
    openapiRequiredFields.add("sqlalchemy_uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseRestApiGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseRestApiGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseRestApiGet is not found in the empty JSON string", DatabaseRestApiGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseRestApiGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseRestApiGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatabaseRestApiGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configuration_method") != null && !jsonObj.get("configuration_method").isJsonNull()) && !jsonObj.get("configuration_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration_method").toString()));
      }
      if (!jsonObj.get("database_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_name").toString()));
      }
      if ((jsonObj.get("encrypted_extra") != null && !jsonObj.get("encrypted_extra").isJsonNull()) && !jsonObj.get("encrypted_extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encrypted_extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encrypted_extra").toString()));
      }
      if ((jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) && !jsonObj.get("extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra").toString()));
      }
      if ((jsonObj.get("force_ctas_schema") != null && !jsonObj.get("force_ctas_schema").isJsonNull()) && !jsonObj.get("force_ctas_schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_ctas_schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_ctas_schema").toString()));
      }
      if ((jsonObj.get("server_cert") != null && !jsonObj.get("server_cert").isJsonNull()) && !jsonObj.get("server_cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_cert").toString()));
      }
      if (!jsonObj.get("sqlalchemy_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlalchemy_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlalchemy_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseRestApiGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseRestApiGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseRestApiGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseRestApiGet.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseRestApiGet>() {
           @Override
           public void write(JsonWriter out, DatabaseRestApiGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseRestApiGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseRestApiGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseRestApiGet
   * @throws IOException if the JSON string is invalid with respect to DatabaseRestApiGet
   */
  public static DatabaseRestApiGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseRestApiGet.class);
  }

  /**
   * Convert an instance of DatabaseRestApiGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

