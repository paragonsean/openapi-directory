/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartDataProphetOptionsSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartDataProphetOptionsSchema {
  public static final String SERIALIZED_NAME_CONFIDENCE_INTERVAL = "confidence_interval";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_INTERVAL)
  private Float confidenceInterval;

  public static final String SERIALIZED_NAME_MONTHLY_SEASONALITY = "monthly_seasonality";
  @SerializedName(SERIALIZED_NAME_MONTHLY_SEASONALITY)
  private Object monthlySeasonality = null;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private Integer periods;

  /**
   * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   */
  @JsonAdapter(TimeGrainEnum.Adapter.class)
  public enum TimeGrainEnum {
    PT1_S("PT1S"),
    
    PT5_S("PT5S"),
    
    PT30_S("PT30S"),
    
    PT1_M("PT1M"),
    
    PT5_M("PT5M"),
    
    PT10_M("PT10M"),
    
    PT15_M("PT15M"),
    
    PT0_5_H("PT0.5H"),
    
    PT1_H("PT1H"),
    
    PT6_H("PT6H"),
    
    P1_D("P1D"),
    
    P1_W("P1W"),
    
    P1_M("P1M"),
    
    P0_25_Y("P0.25Y"),
    
    P1_Y("P1Y"),
    
    _1969_12_28_T00_00_00_Z_P1_W("1969-12-28T00:00:00Z/P1W"),
    
    _1969_12_29_T00_00_00_Z_P1_W("1969-12-29T00:00:00Z/P1W"),
    
    P1_W_1970_01_03_T00_00_00_Z("P1W/1970-01-03T00:00:00Z"),
    
    P1_W_1970_01_04_T00_00_00_Z("P1W/1970-01-04T00:00:00Z");

    private String value;

    TimeGrainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeGrainEnum fromValue(String value) {
      for (TimeGrainEnum b : TimeGrainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeGrainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeGrainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeGrainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeGrainEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeGrainEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_GRAIN = "time_grain";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN)
  private TimeGrainEnum timeGrain;

  public static final String SERIALIZED_NAME_WEEKLY_SEASONALITY = "weekly_seasonality";
  @SerializedName(SERIALIZED_NAME_WEEKLY_SEASONALITY)
  private Object weeklySeasonality = null;

  public static final String SERIALIZED_NAME_YEARLY_SEASONALITY = "yearly_seasonality";
  @SerializedName(SERIALIZED_NAME_YEARLY_SEASONALITY)
  private Object yearlySeasonality = null;

  public ChartDataProphetOptionsSchema() {
  }

  public ChartDataProphetOptionsSchema confidenceInterval(Float confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
    return this;
  }

  /**
   * Width of predicted confidence interval
   * minimum: 0
   * maximum: 1
   * @return confidenceInterval
   */
  @javax.annotation.Nonnull
  public Float getConfidenceInterval() {
    return confidenceInterval;
  }

  public void setConfidenceInterval(Float confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
  }


  public ChartDataProphetOptionsSchema monthlySeasonality(Object monthlySeasonality) {
    this.monthlySeasonality = monthlySeasonality;
    return this;
  }

  /**
   * Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return monthlySeasonality
   */
  @javax.annotation.Nullable
  public Object getMonthlySeasonality() {
    return monthlySeasonality;
  }

  public void setMonthlySeasonality(Object monthlySeasonality) {
    this.monthlySeasonality = monthlySeasonality;
  }


  public ChartDataProphetOptionsSchema periods(Integer periods) {
    this.periods = periods;
    return this;
  }

  /**
   * Get periods
   * @return periods
   */
  @javax.annotation.Nonnull
  public Integer getPeriods() {
    return periods;
  }

  public void setPeriods(Integer periods) {
    this.periods = periods;
  }


  public ChartDataProphetOptionsSchema timeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
    return this;
  }

  /**
   * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   * @return timeGrain
   */
  @javax.annotation.Nonnull
  public TimeGrainEnum getTimeGrain() {
    return timeGrain;
  }

  public void setTimeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
  }


  public ChartDataProphetOptionsSchema weeklySeasonality(Object weeklySeasonality) {
    this.weeklySeasonality = weeklySeasonality;
    return this;
  }

  /**
   * Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return weeklySeasonality
   */
  @javax.annotation.Nullable
  public Object getWeeklySeasonality() {
    return weeklySeasonality;
  }

  public void setWeeklySeasonality(Object weeklySeasonality) {
    this.weeklySeasonality = weeklySeasonality;
  }


  public ChartDataProphetOptionsSchema yearlySeasonality(Object yearlySeasonality) {
    this.yearlySeasonality = yearlySeasonality;
    return this;
  }

  /**
   * Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, &#x60;None&#x60; will automatically detect seasonality.
   * @return yearlySeasonality
   */
  @javax.annotation.Nullable
  public Object getYearlySeasonality() {
    return yearlySeasonality;
  }

  public void setYearlySeasonality(Object yearlySeasonality) {
    this.yearlySeasonality = yearlySeasonality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataProphetOptionsSchema chartDataProphetOptionsSchema = (ChartDataProphetOptionsSchema) o;
    return Objects.equals(this.confidenceInterval, chartDataProphetOptionsSchema.confidenceInterval) &&
        Objects.equals(this.monthlySeasonality, chartDataProphetOptionsSchema.monthlySeasonality) &&
        Objects.equals(this.periods, chartDataProphetOptionsSchema.periods) &&
        Objects.equals(this.timeGrain, chartDataProphetOptionsSchema.timeGrain) &&
        Objects.equals(this.weeklySeasonality, chartDataProphetOptionsSchema.weeklySeasonality) &&
        Objects.equals(this.yearlySeasonality, chartDataProphetOptionsSchema.yearlySeasonality);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceInterval, monthlySeasonality, periods, timeGrain, weeklySeasonality, yearlySeasonality);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataProphetOptionsSchema {\n");
    sb.append("    confidenceInterval: ").append(toIndentedString(confidenceInterval)).append("\n");
    sb.append("    monthlySeasonality: ").append(toIndentedString(monthlySeasonality)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    timeGrain: ").append(toIndentedString(timeGrain)).append("\n");
    sb.append("    weeklySeasonality: ").append(toIndentedString(weeklySeasonality)).append("\n");
    sb.append("    yearlySeasonality: ").append(toIndentedString(yearlySeasonality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence_interval");
    openapiFields.add("monthly_seasonality");
    openapiFields.add("periods");
    openapiFields.add("time_grain");
    openapiFields.add("weekly_seasonality");
    openapiFields.add("yearly_seasonality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confidence_interval");
    openapiRequiredFields.add("periods");
    openapiRequiredFields.add("time_grain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartDataProphetOptionsSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartDataProphetOptionsSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartDataProphetOptionsSchema is not found in the empty JSON string", ChartDataProphetOptionsSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartDataProphetOptionsSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartDataProphetOptionsSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChartDataProphetOptionsSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("time_grain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_grain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_grain").toString()));
      }
      // validate the required field `time_grain`
      TimeGrainEnum.validateJsonElement(jsonObj.get("time_grain"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartDataProphetOptionsSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartDataProphetOptionsSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartDataProphetOptionsSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartDataProphetOptionsSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartDataProphetOptionsSchema>() {
           @Override
           public void write(JsonWriter out, ChartDataProphetOptionsSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartDataProphetOptionsSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartDataProphetOptionsSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartDataProphetOptionsSchema
   * @throws IOException if the JSON string is invalid with respect to ChartDataProphetOptionsSchema
   */
  public static ChartDataProphetOptionsSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartDataProphetOptionsSchema.class);
  }

  /**
   * Convert an instance of ChartDataProphetOptionsSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

