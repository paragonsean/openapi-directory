/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartDataBoxplotOptionsSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartDataBoxplotOptionsSchema {
  public static final String SERIALIZED_NAME_GROUPBY = "groupby";
  @SerializedName(SERIALIZED_NAME_GROUPBY)
  private List<String> groupby;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Object> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTILES = "percentiles";
  @SerializedName(SERIALIZED_NAME_PERCENTILES)
  private Object percentiles = null;

  /**
   * Whisker type. Any numpy function will work.
   */
  @JsonAdapter(WhiskerTypeEnum.Adapter.class)
  public enum WhiskerTypeEnum {
    TUKEY("tukey"),
    
    MIN_MAX("min/max"),
    
    PERCENTILE("percentile");

    private String value;

    WhiskerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WhiskerTypeEnum fromValue(String value) {
      for (WhiskerTypeEnum b : WhiskerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WhiskerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WhiskerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WhiskerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WhiskerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WhiskerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WHISKER_TYPE = "whisker_type";
  @SerializedName(SERIALIZED_NAME_WHISKER_TYPE)
  private WhiskerTypeEnum whiskerType;

  public ChartDataBoxplotOptionsSchema() {
  }

  public ChartDataBoxplotOptionsSchema groupby(List<String> groupby) {
    this.groupby = groupby;
    return this;
  }

  public ChartDataBoxplotOptionsSchema addGroupbyItem(String groupbyItem) {
    if (this.groupby == null) {
      this.groupby = new ArrayList<>();
    }
    this.groupby.add(groupbyItem);
    return this;
  }

  /**
   * Get groupby
   * @return groupby
   */
  @javax.annotation.Nullable
  public List<String> getGroupby() {
    return groupby;
  }

  public void setGroupby(List<String> groupby) {
    this.groupby = groupby;
  }


  public ChartDataBoxplotOptionsSchema metrics(List<Object> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ChartDataBoxplotOptionsSchema addMetricsItem(Object metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See &#x60;ChartDataAdhocMetricSchema&#x60; for the structure of ad-hoc metrics.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Object> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Object> metrics) {
    this.metrics = metrics;
  }


  public ChartDataBoxplotOptionsSchema percentiles(Object percentiles) {
    this.percentiles = percentiles;
    return this;
  }

  /**
   * Upper and lower percentiles for percentile whisker type.
   * @return percentiles
   */
  @javax.annotation.Nullable
  public Object getPercentiles() {
    return percentiles;
  }

  public void setPercentiles(Object percentiles) {
    this.percentiles = percentiles;
  }


  public ChartDataBoxplotOptionsSchema whiskerType(WhiskerTypeEnum whiskerType) {
    this.whiskerType = whiskerType;
    return this;
  }

  /**
   * Whisker type. Any numpy function will work.
   * @return whiskerType
   */
  @javax.annotation.Nonnull
  public WhiskerTypeEnum getWhiskerType() {
    return whiskerType;
  }

  public void setWhiskerType(WhiskerTypeEnum whiskerType) {
    this.whiskerType = whiskerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataBoxplotOptionsSchema chartDataBoxplotOptionsSchema = (ChartDataBoxplotOptionsSchema) o;
    return Objects.equals(this.groupby, chartDataBoxplotOptionsSchema.groupby) &&
        Objects.equals(this.metrics, chartDataBoxplotOptionsSchema.metrics) &&
        Objects.equals(this.percentiles, chartDataBoxplotOptionsSchema.percentiles) &&
        Objects.equals(this.whiskerType, chartDataBoxplotOptionsSchema.whiskerType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupby, metrics, percentiles, whiskerType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataBoxplotOptionsSchema {\n");
    sb.append("    groupby: ").append(toIndentedString(groupby)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    percentiles: ").append(toIndentedString(percentiles)).append("\n");
    sb.append("    whiskerType: ").append(toIndentedString(whiskerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupby");
    openapiFields.add("metrics");
    openapiFields.add("percentiles");
    openapiFields.add("whisker_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("whisker_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartDataBoxplotOptionsSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartDataBoxplotOptionsSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartDataBoxplotOptionsSchema is not found in the empty JSON string", ChartDataBoxplotOptionsSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartDataBoxplotOptionsSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartDataBoxplotOptionsSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChartDataBoxplotOptionsSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupby") != null && !jsonObj.get("groupby").isJsonNull() && !jsonObj.get("groupby").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupby` to be an array in the JSON string but got `%s`", jsonObj.get("groupby").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if (!jsonObj.get("whisker_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whisker_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whisker_type").toString()));
      }
      // validate the required field `whisker_type`
      WhiskerTypeEnum.validateJsonElement(jsonObj.get("whisker_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartDataBoxplotOptionsSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartDataBoxplotOptionsSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartDataBoxplotOptionsSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartDataBoxplotOptionsSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartDataBoxplotOptionsSchema>() {
           @Override
           public void write(JsonWriter out, ChartDataBoxplotOptionsSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartDataBoxplotOptionsSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartDataBoxplotOptionsSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartDataBoxplotOptionsSchema
   * @throws IOException if the JSON string is invalid with respect to ChartDataBoxplotOptionsSchema
   */
  public static ChartDataBoxplotOptionsSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartDataBoxplotOptionsSchema.class);
  }

  /**
   * Convert an instance of ChartDataBoxplotOptionsSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

