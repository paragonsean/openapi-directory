/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Meta19;
import org.openapitools.client.model.Meta20;
import org.openapitools.client.model.Meta21;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatasetRestApiGetList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetRestApiGetList {
  public static final String SERIALIZED_NAME_CHANGED_BY = "changed_by";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY)
  private Meta19 changedBy;

  public static final String SERIALIZED_NAME_CHANGED_BY_NAME = "changed_by_name";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_NAME)
  private Object changedByName = null;

  public static final String SERIALIZED_NAME_CHANGED_BY_URL = "changed_by_url";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_URL)
  private Object changedByUrl = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED = "changed_on_delta_humanized";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED)
  private Object changedOnDeltaHumanized = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_UTC = "changed_on_utc";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_UTC)
  private Object changedOnUtc = null;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Meta21 database;

  public static final String SERIALIZED_NAME_DEFAULT_ENDPOINT = "default_endpoint";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENDPOINT)
  private String defaultEndpoint;

  public static final String SERIALIZED_NAME_EXPLORE_URL = "explore_url";
  @SerializedName(SERIALIZED_NAME_EXPLORE_URL)
  private Object exploreUrl = null;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private Object kind = null;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private Meta20 owners;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public DatasetRestApiGetList() {
  }

  public DatasetRestApiGetList(
     Object changedByName, 
     Object changedByUrl, 
     Object changedOnDeltaHumanized, 
     Object changedOnUtc, 
     Object exploreUrl, 
     Object kind
  ) {
    this();
    this.changedByName = changedByName;
    this.changedByUrl = changedByUrl;
    this.changedOnDeltaHumanized = changedOnDeltaHumanized;
    this.changedOnUtc = changedOnUtc;
    this.exploreUrl = exploreUrl;
    this.kind = kind;
  }

  public DatasetRestApiGetList changedBy(Meta19 changedBy) {
    this.changedBy = changedBy;
    return this;
  }

  /**
   * Get changedBy
   * @return changedBy
   */
  @javax.annotation.Nullable
  public Meta19 getChangedBy() {
    return changedBy;
  }

  public void setChangedBy(Meta19 changedBy) {
    this.changedBy = changedBy;
  }


  /**
   * Get changedByName
   * @return changedByName
   */
  @javax.annotation.Nullable
  public Object getChangedByName() {
    return changedByName;
  }



  /**
   * Get changedByUrl
   * @return changedByUrl
   */
  @javax.annotation.Nullable
  public Object getChangedByUrl() {
    return changedByUrl;
  }



  /**
   * Get changedOnDeltaHumanized
   * @return changedOnDeltaHumanized
   */
  @javax.annotation.Nullable
  public Object getChangedOnDeltaHumanized() {
    return changedOnDeltaHumanized;
  }



  /**
   * Get changedOnUtc
   * @return changedOnUtc
   */
  @javax.annotation.Nullable
  public Object getChangedOnUtc() {
    return changedOnUtc;
  }



  public DatasetRestApiGetList database(Meta21 database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public Meta21 getDatabase() {
    return database;
  }

  public void setDatabase(Meta21 database) {
    this.database = database;
  }


  public DatasetRestApiGetList defaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
    return this;
  }

  /**
   * Get defaultEndpoint
   * @return defaultEndpoint
   */
  @javax.annotation.Nullable
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

  public void setDefaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
  }


  /**
   * Get exploreUrl
   * @return exploreUrl
   */
  @javax.annotation.Nullable
  public Object getExploreUrl() {
    return exploreUrl;
  }



  public DatasetRestApiGetList extra(String extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }


  public DatasetRestApiGetList id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public Object getKind() {
    return kind;
  }



  public DatasetRestApiGetList owners(Meta20 owners) {
    this.owners = owners;
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public Meta20 getOwners() {
    return owners;
  }

  public void setOwners(Meta20 owners) {
    this.owners = owners;
  }


  public DatasetRestApiGetList schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DatasetRestApiGetList sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public DatasetRestApiGetList tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetRestApiGetList datasetRestApiGetList = (DatasetRestApiGetList) o;
    return Objects.equals(this.changedBy, datasetRestApiGetList.changedBy) &&
        Objects.equals(this.changedByName, datasetRestApiGetList.changedByName) &&
        Objects.equals(this.changedByUrl, datasetRestApiGetList.changedByUrl) &&
        Objects.equals(this.changedOnDeltaHumanized, datasetRestApiGetList.changedOnDeltaHumanized) &&
        Objects.equals(this.changedOnUtc, datasetRestApiGetList.changedOnUtc) &&
        Objects.equals(this.database, datasetRestApiGetList.database) &&
        Objects.equals(this.defaultEndpoint, datasetRestApiGetList.defaultEndpoint) &&
        Objects.equals(this.exploreUrl, datasetRestApiGetList.exploreUrl) &&
        Objects.equals(this.extra, datasetRestApiGetList.extra) &&
        Objects.equals(this.id, datasetRestApiGetList.id) &&
        Objects.equals(this.kind, datasetRestApiGetList.kind) &&
        Objects.equals(this.owners, datasetRestApiGetList.owners) &&
        Objects.equals(this.schema, datasetRestApiGetList.schema) &&
        Objects.equals(this.sql, datasetRestApiGetList.sql) &&
        Objects.equals(this.tableName, datasetRestApiGetList.tableName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedBy, changedByName, changedByUrl, changedOnDeltaHumanized, changedOnUtc, database, defaultEndpoint, exploreUrl, extra, id, kind, owners, schema, sql, tableName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetRestApiGetList {\n");
    sb.append("    changedBy: ").append(toIndentedString(changedBy)).append("\n");
    sb.append("    changedByName: ").append(toIndentedString(changedByName)).append("\n");
    sb.append("    changedByUrl: ").append(toIndentedString(changedByUrl)).append("\n");
    sb.append("    changedOnDeltaHumanized: ").append(toIndentedString(changedOnDeltaHumanized)).append("\n");
    sb.append("    changedOnUtc: ").append(toIndentedString(changedOnUtc)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    exploreUrl: ").append(toIndentedString(exploreUrl)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_by");
    openapiFields.add("changed_by_name");
    openapiFields.add("changed_by_url");
    openapiFields.add("changed_on_delta_humanized");
    openapiFields.add("changed_on_utc");
    openapiFields.add("database");
    openapiFields.add("default_endpoint");
    openapiFields.add("explore_url");
    openapiFields.add("extra");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("owners");
    openapiFields.add("schema");
    openapiFields.add("sql");
    openapiFields.add("table_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("database");
    openapiRequiredFields.add("table_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetRestApiGetList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetRestApiGetList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetRestApiGetList is not found in the empty JSON string", DatasetRestApiGetList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetRestApiGetList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetRestApiGetList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatasetRestApiGetList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changed_by`
      if (jsonObj.get("changed_by") != null && !jsonObj.get("changed_by").isJsonNull()) {
        Meta19.validateJsonElement(jsonObj.get("changed_by"));
      }
      // validate the required field `database`
      Meta21.validateJsonElement(jsonObj.get("database"));
      if ((jsonObj.get("default_endpoint") != null && !jsonObj.get("default_endpoint").isJsonNull()) && !jsonObj.get("default_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_endpoint").toString()));
      }
      if ((jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) && !jsonObj.get("extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra").toString()));
      }
      // validate the optional field `owners`
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        Meta20.validateJsonElement(jsonObj.get("owners"));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if (!jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetRestApiGetList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetRestApiGetList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetRestApiGetList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetRestApiGetList.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetRestApiGetList>() {
           @Override
           public void write(JsonWriter out, DatasetRestApiGetList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetRestApiGetList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetRestApiGetList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetRestApiGetList
   * @throws IOException if the JSON string is invalid with respect to DatasetRestApiGetList
   */
  public static DatasetRestApiGetList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetRestApiGetList.class);
  }

  /**
   * Convert an instance of DatasetRestApiGetList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

