/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.DatabaseAvailableGet200ResponseInner;
import org.openapitools.client.model.DatabaseFunctionNamesResponse;
import org.openapitools.client.model.DatabaseGet200Response;
import org.openapitools.client.model.DatabasePkGet200Response;
import org.openapitools.client.model.DatabasePkPut200Response;
import org.openapitools.client.model.DatabasePost201Response;
import org.openapitools.client.model.DatabaseRelatedObjectsResponse;
import org.openapitools.client.model.DatabaseRestApiPost;
import org.openapitools.client.model.DatabaseRestApiPut;
import org.openapitools.client.model.DatabaseSchemasQuerySchema;
import org.openapitools.client.model.DatabaseTestConnectionSchema;
import org.openapitools.client.model.DatabaseValidateParametersSchema;
import java.io.File;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.SchemasResponseSchema;
import org.openapitools.client.model.SelectStarResponseSchema;
import org.openapitools.client.model.TableMetadataResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseAvailableGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAvailableGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/available/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAvailableGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return databaseAvailableGetCall(_callback);

    }

    /**
     * 
     * Get names of databases currently available
     * @return List&lt;DatabaseAvailableGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public List<DatabaseAvailableGet200ResponseInner> databaseAvailableGet() throws ApiException {
        ApiResponse<List<DatabaseAvailableGet200ResponseInner>> localVarResp = databaseAvailableGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get names of databases currently available
     * @return ApiResponse&lt;List&lt;DatabaseAvailableGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DatabaseAvailableGet200ResponseInner>> databaseAvailableGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = databaseAvailableGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DatabaseAvailableGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get names of databases currently available
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAvailableGetAsync(final ApiCallback<List<DatabaseAvailableGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAvailableGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DatabaseAvailableGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseExportGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file with database(s) and dataset(s) as YAML </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseExportGetCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/export/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "q", q));
        }

        final String[] localVarAccepts = {
            "application/zip",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseExportGetValidateBeforeCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        return databaseExportGetCall(q, _callback);

    }

    /**
     * 
     * Download database(s) and associated dataset(s) as a zip file
     * @param q  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file with database(s) and dataset(s) as YAML </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public File databaseExportGet(List<Integer> q) throws ApiException {
        ApiResponse<File> localVarResp = databaseExportGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Download database(s) and associated dataset(s) as a zip file
     * @param q  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file with database(s) and dataset(s) as YAML </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> databaseExportGetWithHttpInfo(List<Integer> q) throws ApiException {
        okhttp3.Call localVarCall = databaseExportGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download database(s) and associated dataset(s) as a zip file
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A zip file with database(s) and dataset(s) as YAML </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseExportGetAsync(List<Integer> q, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseExportGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseGetCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseGetValidateBeforeCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        return databaseGetCall(q, _callback);

    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return DatabaseGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseGet200Response databaseGet(GetListSchema q) throws ApiException {
        ApiResponse<DatabaseGet200Response> localVarResp = databaseGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return ApiResponse&lt;DatabaseGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseGet200Response> databaseGetWithHttpInfo(GetListSchema q) throws ApiException {
        okhttp3.Call localVarCall = databaseGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<DatabaseGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of models
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseGetAsync(GetListSchema q, final ApiCallback<DatabaseGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<DatabaseGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseImportPost
     * @param formData upload file (ZIP) (optional)
     * @param overwrite overwrite existing databases? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseImportPostCall(File formData, Boolean overwrite, String passwords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/import/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formData != null) {
            localVarFormParams.put("formData", formData);
        }

        if (overwrite != null) {
            localVarFormParams.put("overwrite", overwrite);
        }

        if (passwords != null) {
            localVarFormParams.put("passwords", passwords);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseImportPostValidateBeforeCall(File formData, Boolean overwrite, String passwords, final ApiCallback _callback) throws ApiException {
        return databaseImportPostCall(formData, overwrite, passwords, _callback);

    }

    /**
     * 
     * 
     * @param formData upload file (ZIP) (optional)
     * @param overwrite overwrite existing databases? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response databaseImportPost(File formData, Boolean overwrite, String passwords) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = databaseImportPostWithHttpInfo(formData, overwrite, passwords);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param formData upload file (ZIP) (optional)
     * @param overwrite overwrite existing databases? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> databaseImportPostWithHttpInfo(File formData, Boolean overwrite, String passwords) throws ApiException {
        okhttp3.Call localVarCall = databaseImportPostValidateBeforeCall(formData, overwrite, passwords, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param formData upload file (ZIP) (optional)
     * @param overwrite overwrite existing databases? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseImportPostAsync(File formData, Boolean overwrite, String passwords, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseImportPostValidateBeforeCall(formData, overwrite, passwords, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseInfoGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInfoGetCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseInfoGetValidateBeforeCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        return databaseInfoGetCall(q, _callback);

    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return AnnotationLayerInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerInfoGet200Response databaseInfoGet(GetInfoSchema q) throws ApiException {
        ApiResponse<AnnotationLayerInfoGet200Response> localVarResp = databaseInfoGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerInfoGet200Response> databaseInfoGetWithHttpInfo(GetInfoSchema q) throws ApiException {
        okhttp3.Call localVarCall = databaseInfoGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information about this API resource
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInfoGetAsync(GetInfoSchema q, final ApiCallback<AnnotationLayerInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseInfoGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkDelete
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkDeleteCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkDeleteValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkDelete(Async)");
        }

        return databasePkDeleteCall(pk, _callback);

    }

    /**
     * 
     * Deletes a Database.
     * @param pk  (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response databasePkDelete(Integer pk) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = databasePkDeleteWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a Database.
     * @param pk  (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> databasePkDeleteWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = databasePkDeleteValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a Database.
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkDeleteAsync(Integer pk, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkDeleteValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkFunctionNamesGet
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkFunctionNamesGetCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/function_names/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkFunctionNamesGetValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkFunctionNamesGet(Async)");
        }

        return databasePkFunctionNamesGetCall(pk, _callback);

    }

    /**
     * 
     * Get function names supported by a database
     * @param pk  (required)
     * @return DatabaseFunctionNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseFunctionNamesResponse databasePkFunctionNamesGet(Integer pk) throws ApiException {
        ApiResponse<DatabaseFunctionNamesResponse> localVarResp = databasePkFunctionNamesGetWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Get function names supported by a database
     * @param pk  (required)
     * @return ApiResponse&lt;DatabaseFunctionNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseFunctionNamesResponse> databasePkFunctionNamesGetWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = databasePkFunctionNamesGetValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<DatabaseFunctionNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get function names supported by a database
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkFunctionNamesGetAsync(Integer pk, final ApiCallback<DatabaseFunctionNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkFunctionNamesGetValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<DatabaseFunctionNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkGet
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkGetCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkGetValidateBeforeCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkGet(Async)");
        }

        return databasePkGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return DatabasePkGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabasePkGet200Response databasePkGet(Integer pk, GetItemSchema q) throws ApiException {
        ApiResponse<DatabasePkGet200Response> localVarResp = databasePkGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;DatabasePkGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabasePkGet200Response> databasePkGetWithHttpInfo(Integer pk, GetItemSchema q) throws ApiException {
        okhttp3.Call localVarCall = databasePkGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<DatabasePkGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkGetAsync(Integer pk, GetItemSchema q, final ApiCallback<DatabasePkGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<DatabasePkGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkPut
     * @param pk  (required)
     * @param databaseRestApiPut Database schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkPutCall(Integer pk, DatabaseRestApiPut databaseRestApiPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseRestApiPut;

        // create path and map variables
        String localVarPath = "/database/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkPutValidateBeforeCall(Integer pk, DatabaseRestApiPut databaseRestApiPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkPut(Async)");
        }

        // verify the required parameter 'databaseRestApiPut' is set
        if (databaseRestApiPut == null) {
            throw new ApiException("Missing the required parameter 'databaseRestApiPut' when calling databasePkPut(Async)");
        }

        return databasePkPutCall(pk, databaseRestApiPut, _callback);

    }

    /**
     * 
     * Changes a Database.
     * @param pk  (required)
     * @param databaseRestApiPut Database schema (required)
     * @return DatabasePkPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabasePkPut200Response databasePkPut(Integer pk, DatabaseRestApiPut databaseRestApiPut) throws ApiException {
        ApiResponse<DatabasePkPut200Response> localVarResp = databasePkPutWithHttpInfo(pk, databaseRestApiPut);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes a Database.
     * @param pk  (required)
     * @param databaseRestApiPut Database schema (required)
     * @return ApiResponse&lt;DatabasePkPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabasePkPut200Response> databasePkPutWithHttpInfo(Integer pk, DatabaseRestApiPut databaseRestApiPut) throws ApiException {
        okhttp3.Call localVarCall = databasePkPutValidateBeforeCall(pk, databaseRestApiPut, null);
        Type localVarReturnType = new TypeToken<DatabasePkPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes a Database.
     * @param pk  (required)
     * @param databaseRestApiPut Database schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkPutAsync(Integer pk, DatabaseRestApiPut databaseRestApiPut, final ApiCallback<DatabasePkPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkPutValidateBeforeCall(pk, databaseRestApiPut, _callback);
        Type localVarReturnType = new TypeToken<DatabasePkPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkRelatedObjectsGet
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkRelatedObjectsGetCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/related_objects/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkRelatedObjectsGetValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkRelatedObjectsGet(Async)");
        }

        return databasePkRelatedObjectsGetCall(pk, _callback);

    }

    /**
     * 
     * Get charts and dashboards count associated to a database
     * @param pk  (required)
     * @return DatabaseRelatedObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseRelatedObjectsResponse databasePkRelatedObjectsGet(Integer pk) throws ApiException {
        ApiResponse<DatabaseRelatedObjectsResponse> localVarResp = databasePkRelatedObjectsGetWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Get charts and dashboards count associated to a database
     * @param pk  (required)
     * @return ApiResponse&lt;DatabaseRelatedObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseRelatedObjectsResponse> databasePkRelatedObjectsGetWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = databasePkRelatedObjectsGetValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<DatabaseRelatedObjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get charts and dashboards count associated to a database
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkRelatedObjectsGetAsync(Integer pk, final ApiCallback<DatabaseRelatedObjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkRelatedObjectsGetValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<DatabaseRelatedObjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkSchemasGet
     * @param pk The database id (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of all schemas from the database </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSchemasGetCall(Integer pk, DatabaseSchemasQuerySchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/schemas/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkSchemasGetValidateBeforeCall(Integer pk, DatabaseSchemasQuerySchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkSchemasGet(Async)");
        }

        return databasePkSchemasGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get all schemas from a database
     * @param pk The database id (required)
     * @param q  (optional)
     * @return SchemasResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of all schemas from the database </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public SchemasResponseSchema databasePkSchemasGet(Integer pk, DatabaseSchemasQuerySchema q) throws ApiException {
        ApiResponse<SchemasResponseSchema> localVarResp = databasePkSchemasGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all schemas from a database
     * @param pk The database id (required)
     * @param q  (optional)
     * @return ApiResponse&lt;SchemasResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of all schemas from the database </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemasResponseSchema> databasePkSchemasGetWithHttpInfo(Integer pk, DatabaseSchemasQuerySchema q) throws ApiException {
        okhttp3.Call localVarCall = databasePkSchemasGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<SchemasResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all schemas from a database
     * @param pk The database id (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of all schemas from the database </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSchemasGetAsync(Integer pk, DatabaseSchemasQuerySchema q, final ApiCallback<SchemasResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkSchemasGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<SchemasResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkSelectStarTableNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSelectStarTableNameGetCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/select_star/{table_name}/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "table_name" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_name", schemaName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkSelectStarTableNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameGet(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameGet(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameGet(Async)");
        }

        return databasePkSelectStarTableNameGetCall(pk, tableName, schemaName, _callback);

    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return SelectStarResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public SelectStarResponseSchema databasePkSelectStarTableNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<SelectStarResponseSchema> localVarResp = databasePkSelectStarTableNameGetWithHttpInfo(pk, tableName, schemaName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;SelectStarResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectStarResponseSchema> databasePkSelectStarTableNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        okhttp3.Call localVarCall = databasePkSelectStarTableNameGetValidateBeforeCall(pk, tableName, schemaName, null);
        Type localVarReturnType = new TypeToken<SelectStarResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSelectStarTableNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<SelectStarResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkSelectStarTableNameGetValidateBeforeCall(pk, tableName, schemaName, _callback);
        Type localVarReturnType = new TypeToken<SelectStarResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkSelectStarTableNameSchemaNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSelectStarTableNameSchemaNameGetCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/select_star/{table_name}/{schema_name}/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "table_name" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "schema_name" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameSchemaNameGet(Async)");
        }

        return databasePkSelectStarTableNameSchemaNameGetCall(pk, tableName, schemaName, _callback);

    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return SelectStarResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public SelectStarResponseSchema databasePkSelectStarTableNameSchemaNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<SelectStarResponseSchema> localVarResp = databasePkSelectStarTableNameSchemaNameGetWithHttpInfo(pk, tableName, schemaName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;SelectStarResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectStarResponseSchema> databasePkSelectStarTableNameSchemaNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        okhttp3.Call localVarCall = databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, null);
        Type localVarReturnType = new TypeToken<SelectStarResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database select star for table
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SQL statement for a select star for table </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkSelectStarTableNameSchemaNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<SelectStarResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkSelectStarTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, _callback);
        Type localVarReturnType = new TypeToken<SelectStarResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePkTableTableNameSchemaNameGet
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table metadata information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkTableTableNameSchemaNameGetCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/database/{pk}/table/{table_name}/{schema_name}/"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "table_name" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "schema_name" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePkTableTableNameSchemaNameGetValidateBeforeCall(Integer pk, String tableName, String schemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databasePkTableTableNameSchemaNameGet(Async)");
        }

        return databasePkTableTableNameSchemaNameGetCall(pk, tableName, schemaName, _callback);

    }

    /**
     * 
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return TableMetadataResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table metadata information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public TableMetadataResponseSchema databasePkTableTableNameSchemaNameGet(Integer pk, String tableName, String schemaName) throws ApiException {
        ApiResponse<TableMetadataResponseSchema> localVarResp = databasePkTableTableNameSchemaNameGetWithHttpInfo(pk, tableName, schemaName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @return ApiResponse&lt;TableMetadataResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table metadata information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableMetadataResponseSchema> databasePkTableTableNameSchemaNameGetWithHttpInfo(Integer pk, String tableName, String schemaName) throws ApiException {
        okhttp3.Call localVarCall = databasePkTableTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, null);
        Type localVarReturnType = new TypeToken<TableMetadataResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database table metadata
     * @param pk The database id (required)
     * @param tableName Table name (required)
     * @param schemaName Table schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table metadata information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePkTableTableNameSchemaNameGetAsync(Integer pk, String tableName, String schemaName, final ApiCallback<TableMetadataResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePkTableTableNameSchemaNameGetValidateBeforeCall(pk, tableName, schemaName, _callback);
        Type localVarReturnType = new TypeToken<TableMetadataResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasePost
     * @param databaseRestApiPost Database schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database added </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Redirects to the current digest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePostCall(DatabaseRestApiPost databaseRestApiPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseRestApiPost;

        // create path and map variables
        String localVarPath = "/database/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasePostValidateBeforeCall(DatabaseRestApiPost databaseRestApiPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseRestApiPost' is set
        if (databaseRestApiPost == null) {
            throw new ApiException("Missing the required parameter 'databaseRestApiPost' when calling databasePost(Async)");
        }

        return databasePostCall(databaseRestApiPost, _callback);

    }

    /**
     * 
     * Create a new Database.
     * @param databaseRestApiPost Database schema (required)
     * @return DatabasePost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database added </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Redirects to the current digest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatabasePost201Response databasePost(DatabaseRestApiPost databaseRestApiPost) throws ApiException {
        ApiResponse<DatabasePost201Response> localVarResp = databasePostWithHttpInfo(databaseRestApiPost);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Database.
     * @param databaseRestApiPost Database schema (required)
     * @return ApiResponse&lt;DatabasePost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database added </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Redirects to the current digest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabasePost201Response> databasePostWithHttpInfo(DatabaseRestApiPost databaseRestApiPost) throws ApiException {
        okhttp3.Call localVarCall = databasePostValidateBeforeCall(databaseRestApiPost, null);
        Type localVarReturnType = new TypeToken<DatabasePost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Database.
     * @param databaseRestApiPost Database schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database added </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Redirects to the current digest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databasePostAsync(DatabaseRestApiPost databaseRestApiPost, final ApiCallback<DatabasePost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasePostValidateBeforeCall(databaseRestApiPost, _callback);
        Type localVarReturnType = new TypeToken<DatabasePost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseTestConnectionPost
     * @param databaseTestConnectionSchema Database schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseTestConnectionPostCall(DatabaseTestConnectionSchema databaseTestConnectionSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseTestConnectionSchema;

        // create path and map variables
        String localVarPath = "/database/test_connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseTestConnectionPostValidateBeforeCall(DatabaseTestConnectionSchema databaseTestConnectionSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseTestConnectionSchema' is set
        if (databaseTestConnectionSchema == null) {
            throw new ApiException("Missing the required parameter 'databaseTestConnectionSchema' when calling databaseTestConnectionPost(Async)");
        }

        return databaseTestConnectionPostCall(databaseTestConnectionSchema, _callback);

    }

    /**
     * 
     * Tests a database connection
     * @param databaseTestConnectionSchema Database schema (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response databaseTestConnectionPost(DatabaseTestConnectionSchema databaseTestConnectionSchema) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = databaseTestConnectionPostWithHttpInfo(databaseTestConnectionSchema);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests a database connection
     * @param databaseTestConnectionSchema Database schema (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> databaseTestConnectionPostWithHttpInfo(DatabaseTestConnectionSchema databaseTestConnectionSchema) throws ApiException {
        okhttp3.Call localVarCall = databaseTestConnectionPostValidateBeforeCall(databaseTestConnectionSchema, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests a database connection
     * @param databaseTestConnectionSchema Database schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseTestConnectionPostAsync(DatabaseTestConnectionSchema databaseTestConnectionSchema, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseTestConnectionPostValidateBeforeCall(databaseTestConnectionSchema, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseValidateParametersPost
     * @param databaseValidateParametersSchema DB-specific parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseValidateParametersPostCall(DatabaseValidateParametersSchema databaseValidateParametersSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseValidateParametersSchema;

        // create path and map variables
        String localVarPath = "/database/validate_parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseValidateParametersPostValidateBeforeCall(DatabaseValidateParametersSchema databaseValidateParametersSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseValidateParametersSchema' is set
        if (databaseValidateParametersSchema == null) {
            throw new ApiException("Missing the required parameter 'databaseValidateParametersSchema' when calling databaseValidateParametersPost(Async)");
        }

        return databaseValidateParametersPostCall(databaseValidateParametersSchema, _callback);

    }

    /**
     * 
     * Validates parameters used to connect to a database
     * @param databaseValidateParametersSchema DB-specific parameters (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response databaseValidateParametersPost(DatabaseValidateParametersSchema databaseValidateParametersSchema) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = databaseValidateParametersPostWithHttpInfo(databaseValidateParametersSchema);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates parameters used to connect to a database
     * @param databaseValidateParametersSchema DB-specific parameters (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> databaseValidateParametersPostWithHttpInfo(DatabaseValidateParametersSchema databaseValidateParametersSchema) throws ApiException {
        okhttp3.Call localVarCall = databaseValidateParametersPostValidateBeforeCall(databaseValidateParametersSchema, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates parameters used to connect to a database
     * @param databaseValidateParametersSchema DB-specific parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database Test Connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseValidateParametersPostAsync(DatabaseValidateParametersSchema databaseValidateParametersSchema, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseValidateParametersPostValidateBeforeCall(databaseValidateParametersSchema, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
