/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Roles;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DashboardGetResponseSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DashboardGetResponseSchema {
  public static final String SERIALIZED_NAME_CHANGED_BY = "changed_by";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY)
  private User changedBy;

  public static final String SERIALIZED_NAME_CHANGED_BY_NAME = "changed_by_name";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_NAME)
  private String changedByName;

  public static final String SERIALIZED_NAME_CHANGED_BY_URL = "changed_by_url";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_URL)
  private String changedByUrl;

  public static final String SERIALIZED_NAME_CHANGED_ON = "changed_on";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON)
  private OffsetDateTime changedOn;

  public static final String SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED = "changed_on_delta_humanized";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED)
  private String changedOnDeltaHumanized;

  public static final String SERIALIZED_NAME_CHARTS = "charts";
  @SerializedName(SERIALIZED_NAME_CHARTS)
  private List<String> charts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_DASHBOARD_TITLE = "dashboard_title";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_TITLE)
  private String dashboardTitle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JSON_METADATA = "json_metadata";
  @SerializedName(SERIALIZED_NAME_JSON_METADATA)
  private String jsonMetadata;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<User> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSITION_JSON = "position_json";
  @SerializedName(SERIALIZED_NAME_POSITION_JSON)
  private String positionJson;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Roles> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TABLE_NAMES = "table_names";
  @SerializedName(SERIALIZED_NAME_TABLE_NAMES)
  private String tableNames;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnail_url";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public DashboardGetResponseSchema() {
  }

  public DashboardGetResponseSchema changedBy(User changedBy) {
    this.changedBy = changedBy;
    return this;
  }

  /**
   * Get changedBy
   * @return changedBy
   */
  @javax.annotation.Nullable
  public User getChangedBy() {
    return changedBy;
  }

  public void setChangedBy(User changedBy) {
    this.changedBy = changedBy;
  }


  public DashboardGetResponseSchema changedByName(String changedByName) {
    this.changedByName = changedByName;
    return this;
  }

  /**
   * Get changedByName
   * @return changedByName
   */
  @javax.annotation.Nullable
  public String getChangedByName() {
    return changedByName;
  }

  public void setChangedByName(String changedByName) {
    this.changedByName = changedByName;
  }


  public DashboardGetResponseSchema changedByUrl(String changedByUrl) {
    this.changedByUrl = changedByUrl;
    return this;
  }

  /**
   * Get changedByUrl
   * @return changedByUrl
   */
  @javax.annotation.Nullable
  public String getChangedByUrl() {
    return changedByUrl;
  }

  public void setChangedByUrl(String changedByUrl) {
    this.changedByUrl = changedByUrl;
  }


  public DashboardGetResponseSchema changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

  /**
   * Get changedOn
   * @return changedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }


  public DashboardGetResponseSchema changedOnDeltaHumanized(String changedOnDeltaHumanized) {
    this.changedOnDeltaHumanized = changedOnDeltaHumanized;
    return this;
  }

  /**
   * Get changedOnDeltaHumanized
   * @return changedOnDeltaHumanized
   */
  @javax.annotation.Nullable
  public String getChangedOnDeltaHumanized() {
    return changedOnDeltaHumanized;
  }

  public void setChangedOnDeltaHumanized(String changedOnDeltaHumanized) {
    this.changedOnDeltaHumanized = changedOnDeltaHumanized;
  }


  public DashboardGetResponseSchema charts(List<String> charts) {
    this.charts = charts;
    return this;
  }

  public DashboardGetResponseSchema addChartsItem(String chartsItem) {
    if (this.charts == null) {
      this.charts = new ArrayList<>();
    }
    this.charts.add(chartsItem);
    return this;
  }

  /**
   * Get charts
   * @return charts
   */
  @javax.annotation.Nullable
  public List<String> getCharts() {
    return charts;
  }

  public void setCharts(List<String> charts) {
    this.charts = charts;
  }


  public DashboardGetResponseSchema css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Override CSS for the dashboard.
   * @return css
   */
  @javax.annotation.Nullable
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public DashboardGetResponseSchema dashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
    return this;
  }

  /**
   * A title for the dashboard.
   * @return dashboardTitle
   */
  @javax.annotation.Nullable
  public String getDashboardTitle() {
    return dashboardTitle;
  }

  public void setDashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
  }


  public DashboardGetResponseSchema id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DashboardGetResponseSchema jsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
    return this;
  }

  /**
   * This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
   * @return jsonMetadata
   */
  @javax.annotation.Nullable
  public String getJsonMetadata() {
    return jsonMetadata;
  }

  public void setJsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
  }


  public DashboardGetResponseSchema owners(List<User> owners) {
    this.owners = owners;
    return this;
  }

  public DashboardGetResponseSchema addOwnersItem(User ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public List<User> getOwners() {
    return owners;
  }

  public void setOwners(List<User> owners) {
    this.owners = owners;
  }


  public DashboardGetResponseSchema positionJson(String positionJson) {
    this.positionJson = positionJson;
    return this;
  }

  /**
   * This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag &amp; drop in the dashboard view
   * @return positionJson
   */
  @javax.annotation.Nullable
  public String getPositionJson() {
    return positionJson;
  }

  public void setPositionJson(String positionJson) {
    this.positionJson = positionJson;
  }


  public DashboardGetResponseSchema published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public DashboardGetResponseSchema roles(List<Roles> roles) {
    this.roles = roles;
    return this;
  }

  public DashboardGetResponseSchema addRolesItem(Roles rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Roles> getRoles() {
    return roles;
  }

  public void setRoles(List<Roles> roles) {
    this.roles = roles;
  }


  public DashboardGetResponseSchema slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public DashboardGetResponseSchema tableNames(String tableNames) {
    this.tableNames = tableNames;
    return this;
  }

  /**
   * Get tableNames
   * @return tableNames
   */
  @javax.annotation.Nullable
  public String getTableNames() {
    return tableNames;
  }

  public void setTableNames(String tableNames) {
    this.tableNames = tableNames;
  }


  public DashboardGetResponseSchema thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * Get thumbnailUrl
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  public DashboardGetResponseSchema url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardGetResponseSchema dashboardGetResponseSchema = (DashboardGetResponseSchema) o;
    return Objects.equals(this.changedBy, dashboardGetResponseSchema.changedBy) &&
        Objects.equals(this.changedByName, dashboardGetResponseSchema.changedByName) &&
        Objects.equals(this.changedByUrl, dashboardGetResponseSchema.changedByUrl) &&
        Objects.equals(this.changedOn, dashboardGetResponseSchema.changedOn) &&
        Objects.equals(this.changedOnDeltaHumanized, dashboardGetResponseSchema.changedOnDeltaHumanized) &&
        Objects.equals(this.charts, dashboardGetResponseSchema.charts) &&
        Objects.equals(this.css, dashboardGetResponseSchema.css) &&
        Objects.equals(this.dashboardTitle, dashboardGetResponseSchema.dashboardTitle) &&
        Objects.equals(this.id, dashboardGetResponseSchema.id) &&
        Objects.equals(this.jsonMetadata, dashboardGetResponseSchema.jsonMetadata) &&
        Objects.equals(this.owners, dashboardGetResponseSchema.owners) &&
        Objects.equals(this.positionJson, dashboardGetResponseSchema.positionJson) &&
        Objects.equals(this.published, dashboardGetResponseSchema.published) &&
        Objects.equals(this.roles, dashboardGetResponseSchema.roles) &&
        Objects.equals(this.slug, dashboardGetResponseSchema.slug) &&
        Objects.equals(this.tableNames, dashboardGetResponseSchema.tableNames) &&
        Objects.equals(this.thumbnailUrl, dashboardGetResponseSchema.thumbnailUrl) &&
        Objects.equals(this.url, dashboardGetResponseSchema.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedBy, changedByName, changedByUrl, changedOn, changedOnDeltaHumanized, charts, css, dashboardTitle, id, jsonMetadata, owners, positionJson, published, roles, slug, tableNames, thumbnailUrl, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardGetResponseSchema {\n");
    sb.append("    changedBy: ").append(toIndentedString(changedBy)).append("\n");
    sb.append("    changedByName: ").append(toIndentedString(changedByName)).append("\n");
    sb.append("    changedByUrl: ").append(toIndentedString(changedByUrl)).append("\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    changedOnDeltaHumanized: ").append(toIndentedString(changedOnDeltaHumanized)).append("\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    dashboardTitle: ").append(toIndentedString(dashboardTitle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsonMetadata: ").append(toIndentedString(jsonMetadata)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    positionJson: ").append(toIndentedString(positionJson)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    tableNames: ").append(toIndentedString(tableNames)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_by");
    openapiFields.add("changed_by_name");
    openapiFields.add("changed_by_url");
    openapiFields.add("changed_on");
    openapiFields.add("changed_on_delta_humanized");
    openapiFields.add("charts");
    openapiFields.add("css");
    openapiFields.add("dashboard_title");
    openapiFields.add("id");
    openapiFields.add("json_metadata");
    openapiFields.add("owners");
    openapiFields.add("position_json");
    openapiFields.add("published");
    openapiFields.add("roles");
    openapiFields.add("slug");
    openapiFields.add("table_names");
    openapiFields.add("thumbnail_url");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardGetResponseSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DashboardGetResponseSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardGetResponseSchema is not found in the empty JSON string", DashboardGetResponseSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DashboardGetResponseSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardGetResponseSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changed_by`
      if (jsonObj.get("changed_by") != null && !jsonObj.get("changed_by").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("changed_by"));
      }
      if ((jsonObj.get("changed_by_name") != null && !jsonObj.get("changed_by_name").isJsonNull()) && !jsonObj.get("changed_by_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_by_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_by_name").toString()));
      }
      if ((jsonObj.get("changed_by_url") != null && !jsonObj.get("changed_by_url").isJsonNull()) && !jsonObj.get("changed_by_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_by_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_by_url").toString()));
      }
      if ((jsonObj.get("changed_on_delta_humanized") != null && !jsonObj.get("changed_on_delta_humanized").isJsonNull()) && !jsonObj.get("changed_on_delta_humanized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_on_delta_humanized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_on_delta_humanized").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("charts") != null && !jsonObj.get("charts").isJsonNull() && !jsonObj.get("charts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `charts` to be an array in the JSON string but got `%s`", jsonObj.get("charts").toString()));
      }
      if ((jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) && !jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if ((jsonObj.get("dashboard_title") != null && !jsonObj.get("dashboard_title").isJsonNull()) && !jsonObj.get("dashboard_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard_title").toString()));
      }
      if ((jsonObj.get("json_metadata") != null && !jsonObj.get("json_metadata").isJsonNull()) && !jsonObj.get("json_metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `json_metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("json_metadata").toString()));
      }
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
        if (jsonArrayowners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
          }

          // validate the optional field `owners` (array)
          for (int i = 0; i < jsonArrayowners.size(); i++) {
            User.validateJsonElement(jsonArrayowners.get(i));
          };
        }
      }
      if ((jsonObj.get("position_json") != null && !jsonObj.get("position_json").isJsonNull()) && !jsonObj.get("position_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position_json").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            Roles.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("table_names") != null && !jsonObj.get("table_names").isJsonNull()) && !jsonObj.get("table_names").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_names` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_names").toString()));
      }
      if ((jsonObj.get("thumbnail_url") != null && !jsonObj.get("thumbnail_url").isJsonNull()) && !jsonObj.get("thumbnail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail_url").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DashboardGetResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DashboardGetResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DashboardGetResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DashboardGetResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<DashboardGetResponseSchema>() {
           @Override
           public void write(JsonWriter out, DashboardGetResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DashboardGetResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardGetResponseSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardGetResponseSchema
   * @throws IOException if the JSON string is invalid with respect to DashboardGetResponseSchema
   */
  public static DashboardGetResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardGetResponseSchema.class);
  }

  /**
   * Convert an instance of DashboardGetResponseSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

