/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Meta22
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Meta22 {
  public static final String SERIALIZED_NAME_CHANGED_ON = "changed_on";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON)
  private OffsetDateTime changedOn;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "column_name";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_FILTERABLE = "filterable";
  @SerializedName(SERIALIZED_NAME_FILTERABLE)
  private Boolean filterable;

  public static final String SERIALIZED_NAME_GROUPBY = "groupby";
  @SerializedName(SERIALIZED_NAME_GROUPBY)
  private Boolean groupby;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_DTTM = "is_dttm";
  @SerializedName(SERIALIZED_NAME_IS_DTTM)
  private Boolean isDttm;

  public static final String SERIALIZED_NAME_PYTHON_DATE_FORMAT = "python_date_format";
  @SerializedName(SERIALIZED_NAME_PYTHON_DATE_FORMAT)
  private String pythonDateFormat;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_GENERIC = "type_generic";
  @SerializedName(SERIALIZED_NAME_TYPE_GENERIC)
  private Object typeGeneric = null;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public Meta22() {
  }

  public Meta22(
     Object typeGeneric
  ) {
    this();
    this.typeGeneric = typeGeneric;
  }

  public Meta22 changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

  /**
   * Get changedOn
   * @return changedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }


  public Meta22 columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * Get columnName
   * @return columnName
   */
  @javax.annotation.Nonnull
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }


  public Meta22 createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public Meta22 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Meta22 expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Get expression
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public Meta22 filterable(Boolean filterable) {
    this.filterable = filterable;
    return this;
  }

  /**
   * Get filterable
   * @return filterable
   */
  @javax.annotation.Nullable
  public Boolean getFilterable() {
    return filterable;
  }

  public void setFilterable(Boolean filterable) {
    this.filterable = filterable;
  }


  public Meta22 groupby(Boolean groupby) {
    this.groupby = groupby;
    return this;
  }

  /**
   * Get groupby
   * @return groupby
   */
  @javax.annotation.Nullable
  public Boolean getGroupby() {
    return groupby;
  }

  public void setGroupby(Boolean groupby) {
    this.groupby = groupby;
  }


  public Meta22 id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Meta22 isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Meta22 isDttm(Boolean isDttm) {
    this.isDttm = isDttm;
    return this;
  }

  /**
   * Get isDttm
   * @return isDttm
   */
  @javax.annotation.Nullable
  public Boolean getIsDttm() {
    return isDttm;
  }

  public void setIsDttm(Boolean isDttm) {
    this.isDttm = isDttm;
  }


  public Meta22 pythonDateFormat(String pythonDateFormat) {
    this.pythonDateFormat = pythonDateFormat;
    return this;
  }

  /**
   * Get pythonDateFormat
   * @return pythonDateFormat
   */
  @javax.annotation.Nullable
  public String getPythonDateFormat() {
    return pythonDateFormat;
  }

  public void setPythonDateFormat(String pythonDateFormat) {
    this.pythonDateFormat = pythonDateFormat;
  }


  public Meta22 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  /**
   * Get typeGeneric
   * @return typeGeneric
   */
  @javax.annotation.Nullable
  public Object getTypeGeneric() {
    return typeGeneric;
  }



  public Meta22 uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public Meta22 verboseName(String verboseName) {
    this.verboseName = verboseName;
    return this;
  }

  /**
   * Get verboseName
   * @return verboseName
   */
  @javax.annotation.Nullable
  public String getVerboseName() {
    return verboseName;
  }

  public void setVerboseName(String verboseName) {
    this.verboseName = verboseName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Meta22 meta22 = (Meta22) o;
    return Objects.equals(this.changedOn, meta22.changedOn) &&
        Objects.equals(this.columnName, meta22.columnName) &&
        Objects.equals(this.createdOn, meta22.createdOn) &&
        Objects.equals(this.description, meta22.description) &&
        Objects.equals(this.expression, meta22.expression) &&
        Objects.equals(this.filterable, meta22.filterable) &&
        Objects.equals(this.groupby, meta22.groupby) &&
        Objects.equals(this.id, meta22.id) &&
        Objects.equals(this.isActive, meta22.isActive) &&
        Objects.equals(this.isDttm, meta22.isDttm) &&
        Objects.equals(this.pythonDateFormat, meta22.pythonDateFormat) &&
        Objects.equals(this.type, meta22.type) &&
        Objects.equals(this.typeGeneric, meta22.typeGeneric) &&
        Objects.equals(this.uuid, meta22.uuid) &&
        Objects.equals(this.verboseName, meta22.verboseName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedOn, columnName, createdOn, description, expression, filterable, groupby, id, isActive, isDttm, pythonDateFormat, type, typeGeneric, uuid, verboseName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Meta22 {\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    filterable: ").append(toIndentedString(filterable)).append("\n");
    sb.append("    groupby: ").append(toIndentedString(groupby)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isDttm: ").append(toIndentedString(isDttm)).append("\n");
    sb.append("    pythonDateFormat: ").append(toIndentedString(pythonDateFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeGeneric: ").append(toIndentedString(typeGeneric)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_on");
    openapiFields.add("column_name");
    openapiFields.add("created_on");
    openapiFields.add("description");
    openapiFields.add("expression");
    openapiFields.add("filterable");
    openapiFields.add("groupby");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("is_dttm");
    openapiFields.add("python_date_format");
    openapiFields.add("type");
    openapiFields.add("type_generic");
    openapiFields.add("uuid");
    openapiFields.add("verbose_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("column_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Meta22
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Meta22.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Meta22 is not found in the empty JSON string", Meta22.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Meta22.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Meta22` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Meta22.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("column_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("python_date_format") != null && !jsonObj.get("python_date_format").isJsonNull()) && !jsonObj.get("python_date_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `python_date_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("python_date_format").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("verbose_name") != null && !jsonObj.get("verbose_name").isJsonNull()) && !jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Meta22.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Meta22' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Meta22> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Meta22.class));

       return (TypeAdapter<T>) new TypeAdapter<Meta22>() {
           @Override
           public void write(JsonWriter out, Meta22 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Meta22 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Meta22 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Meta22
   * @throws IOException if the JSON string is invalid with respect to Meta22
   */
  public static Meta22 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Meta22.class);
  }

  /**
   * Convert an instance of Meta22 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

