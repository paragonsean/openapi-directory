/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartEntityResponseSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartEntityResponseSchema {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_CHANGED_ON = "changed_on";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON)
  private String changedOn;

  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private String datasource;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_MARKEDDOWN = "description_markeddown";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_MARKEDDOWN)
  private String descriptionMarkeddown;

  public static final String SERIALIZED_NAME_FORM_DATA = "form_data";
  @SerializedName(SERIALIZED_NAME_FORM_DATA)
  private Object formData;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public static final String SERIALIZED_NAME_SLICE_ID = "slice_id";
  @SerializedName(SERIALIZED_NAME_SLICE_ID)
  private Integer sliceId;

  public static final String SERIALIZED_NAME_SLICE_NAME = "slice_name";
  @SerializedName(SERIALIZED_NAME_SLICE_NAME)
  private String sliceName;

  public static final String SERIALIZED_NAME_SLICE_URL = "slice_url";
  @SerializedName(SERIALIZED_NAME_SLICE_URL)
  private String sliceUrl;

  public ChartEntityResponseSchema() {
  }

  public ChartEntityResponseSchema cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public ChartEntityResponseSchema changedOn(String changedOn) {
    this.changedOn = changedOn;
    return this;
  }

  /**
   * The ISO date that the chart was last changed.
   * @return changedOn
   */
  @javax.annotation.Nullable
  public String getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(String changedOn) {
    this.changedOn = changedOn;
  }


  public ChartEntityResponseSchema datasource(String datasource) {
    this.datasource = datasource;
    return this;
  }

  /**
   * The datasource name.
   * @return datasource
   */
  @javax.annotation.Nullable
  public String getDatasource() {
    return datasource;
  }

  public void setDatasource(String datasource) {
    this.datasource = datasource;
  }


  public ChartEntityResponseSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the chart propose.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ChartEntityResponseSchema descriptionMarkeddown(String descriptionMarkeddown) {
    this.descriptionMarkeddown = descriptionMarkeddown;
    return this;
  }

  /**
   * Sanitized HTML version of the chart description.
   * @return descriptionMarkeddown
   */
  @javax.annotation.Nullable
  public String getDescriptionMarkeddown() {
    return descriptionMarkeddown;
  }

  public void setDescriptionMarkeddown(String descriptionMarkeddown) {
    this.descriptionMarkeddown = descriptionMarkeddown;
  }


  public ChartEntityResponseSchema formData(Object formData) {
    this.formData = formData;
    return this;
  }

  /**
   * Form data from the Explore controls used to form the chart&#39;s data query.
   * @return formData
   */
  @javax.annotation.Nullable
  public Object getFormData() {
    return formData;
  }

  public void setFormData(Object formData) {
    this.formData = formData;
  }


  public ChartEntityResponseSchema modified(String modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Get modified
   * @return modified
   */
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }

  public void setModified(String modified) {
    this.modified = modified;
  }


  public ChartEntityResponseSchema sliceId(Integer sliceId) {
    this.sliceId = sliceId;
    return this;
  }

  /**
   * Get sliceId
   * @return sliceId
   */
  @javax.annotation.Nullable
  public Integer getSliceId() {
    return sliceId;
  }

  public void setSliceId(Integer sliceId) {
    this.sliceId = sliceId;
  }


  public ChartEntityResponseSchema sliceName(String sliceName) {
    this.sliceName = sliceName;
    return this;
  }

  /**
   * The name of the chart.
   * @return sliceName
   */
  @javax.annotation.Nullable
  public String getSliceName() {
    return sliceName;
  }

  public void setSliceName(String sliceName) {
    this.sliceName = sliceName;
  }


  public ChartEntityResponseSchema sliceUrl(String sliceUrl) {
    this.sliceUrl = sliceUrl;
    return this;
  }

  /**
   * The URL of the chart.
   * @return sliceUrl
   */
  @javax.annotation.Nullable
  public String getSliceUrl() {
    return sliceUrl;
  }

  public void setSliceUrl(String sliceUrl) {
    this.sliceUrl = sliceUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartEntityResponseSchema chartEntityResponseSchema = (ChartEntityResponseSchema) o;
    return Objects.equals(this.cacheTimeout, chartEntityResponseSchema.cacheTimeout) &&
        Objects.equals(this.changedOn, chartEntityResponseSchema.changedOn) &&
        Objects.equals(this.datasource, chartEntityResponseSchema.datasource) &&
        Objects.equals(this.description, chartEntityResponseSchema.description) &&
        Objects.equals(this.descriptionMarkeddown, chartEntityResponseSchema.descriptionMarkeddown) &&
        Objects.equals(this.formData, chartEntityResponseSchema.formData) &&
        Objects.equals(this.modified, chartEntityResponseSchema.modified) &&
        Objects.equals(this.sliceId, chartEntityResponseSchema.sliceId) &&
        Objects.equals(this.sliceName, chartEntityResponseSchema.sliceName) &&
        Objects.equals(this.sliceUrl, chartEntityResponseSchema.sliceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, changedOn, datasource, description, descriptionMarkeddown, formData, modified, sliceId, sliceName, sliceUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartEntityResponseSchema {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionMarkeddown: ").append(toIndentedString(descriptionMarkeddown)).append("\n");
    sb.append("    formData: ").append(toIndentedString(formData)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    sliceName: ").append(toIndentedString(sliceName)).append("\n");
    sb.append("    sliceUrl: ").append(toIndentedString(sliceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("changed_on");
    openapiFields.add("datasource");
    openapiFields.add("description");
    openapiFields.add("description_markeddown");
    openapiFields.add("form_data");
    openapiFields.add("modified");
    openapiFields.add("slice_id");
    openapiFields.add("slice_name");
    openapiFields.add("slice_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartEntityResponseSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartEntityResponseSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartEntityResponseSchema is not found in the empty JSON string", ChartEntityResponseSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartEntityResponseSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartEntityResponseSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changed_on") != null && !jsonObj.get("changed_on").isJsonNull()) && !jsonObj.get("changed_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_on").toString()));
      }
      if ((jsonObj.get("datasource") != null && !jsonObj.get("datasource").isJsonNull()) && !jsonObj.get("datasource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("description_markeddown") != null && !jsonObj.get("description_markeddown").isJsonNull()) && !jsonObj.get("description_markeddown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_markeddown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_markeddown").toString()));
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
      if ((jsonObj.get("slice_name") != null && !jsonObj.get("slice_name").isJsonNull()) && !jsonObj.get("slice_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_name").toString()));
      }
      if ((jsonObj.get("slice_url") != null && !jsonObj.get("slice_url").isJsonNull()) && !jsonObj.get("slice_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartEntityResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartEntityResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartEntityResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartEntityResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartEntityResponseSchema>() {
           @Override
           public void write(JsonWriter out, ChartEntityResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartEntityResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartEntityResponseSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartEntityResponseSchema
   * @throws IOException if the JSON string is invalid with respect to ChartEntityResponseSchema
   */
  public static ChartEntityResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartEntityResponseSchema.class);
  }

  /**
   * Convert an instance of ChartEntityResponseSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

