/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Meta14;
import org.openapitools.client.model.Meta15;
import org.openapitools.client.model.Meta16;
import org.openapitools.client.model.Meta17;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DashboardRestApiGetList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DashboardRestApiGetList {
  public static final String SERIALIZED_NAME_CHANGED_BY = "changed_by";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY)
  private Meta15 changedBy;

  public static final String SERIALIZED_NAME_CHANGED_BY_NAME = "changed_by_name";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_NAME)
  private Object changedByName = null;

  public static final String SERIALIZED_NAME_CHANGED_BY_URL = "changed_by_url";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_URL)
  private Object changedByUrl = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED = "changed_on_delta_humanized";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED)
  private Object changedOnDeltaHumanized = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_UTC = "changed_on_utc";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_UTC)
  private Object changedOnUtc = null;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private Meta14 createdBy;

  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_DASHBOARD_TITLE = "dashboard_title";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_TITLE)
  private String dashboardTitle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JSON_METADATA = "json_metadata";
  @SerializedName(SERIALIZED_NAME_JSON_METADATA)
  private String jsonMetadata;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private Meta17 owners;

  public static final String SERIALIZED_NAME_POSITION_JSON = "position_json";
  @SerializedName(SERIALIZED_NAME_POSITION_JSON)
  private String positionJson;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private Meta16 roles;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = null;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnail_url";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private Object thumbnailUrl = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private Object url = null;

  public DashboardRestApiGetList() {
  }

  public DashboardRestApiGetList(
     Object changedByName, 
     Object changedByUrl, 
     Object changedOnDeltaHumanized, 
     Object changedOnUtc, 
     Object status, 
     Object thumbnailUrl, 
     Object url
  ) {
    this();
    this.changedByName = changedByName;
    this.changedByUrl = changedByUrl;
    this.changedOnDeltaHumanized = changedOnDeltaHumanized;
    this.changedOnUtc = changedOnUtc;
    this.status = status;
    this.thumbnailUrl = thumbnailUrl;
    this.url = url;
  }

  public DashboardRestApiGetList changedBy(Meta15 changedBy) {
    this.changedBy = changedBy;
    return this;
  }

  /**
   * Get changedBy
   * @return changedBy
   */
  @javax.annotation.Nullable
  public Meta15 getChangedBy() {
    return changedBy;
  }

  public void setChangedBy(Meta15 changedBy) {
    this.changedBy = changedBy;
  }


  /**
   * Get changedByName
   * @return changedByName
   */
  @javax.annotation.Nullable
  public Object getChangedByName() {
    return changedByName;
  }



  /**
   * Get changedByUrl
   * @return changedByUrl
   */
  @javax.annotation.Nullable
  public Object getChangedByUrl() {
    return changedByUrl;
  }



  /**
   * Get changedOnDeltaHumanized
   * @return changedOnDeltaHumanized
   */
  @javax.annotation.Nullable
  public Object getChangedOnDeltaHumanized() {
    return changedOnDeltaHumanized;
  }



  /**
   * Get changedOnUtc
   * @return changedOnUtc
   */
  @javax.annotation.Nullable
  public Object getChangedOnUtc() {
    return changedOnUtc;
  }



  public DashboardRestApiGetList createdBy(Meta14 createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public Meta14 getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Meta14 createdBy) {
    this.createdBy = createdBy;
  }


  public DashboardRestApiGetList css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Get css
   * @return css
   */
  @javax.annotation.Nullable
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public DashboardRestApiGetList dashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
    return this;
  }

  /**
   * Get dashboardTitle
   * @return dashboardTitle
   */
  @javax.annotation.Nullable
  public String getDashboardTitle() {
    return dashboardTitle;
  }

  public void setDashboardTitle(String dashboardTitle) {
    this.dashboardTitle = dashboardTitle;
  }


  public DashboardRestApiGetList id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DashboardRestApiGetList jsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
    return this;
  }

  /**
   * Get jsonMetadata
   * @return jsonMetadata
   */
  @javax.annotation.Nullable
  public String getJsonMetadata() {
    return jsonMetadata;
  }

  public void setJsonMetadata(String jsonMetadata) {
    this.jsonMetadata = jsonMetadata;
  }


  public DashboardRestApiGetList owners(Meta17 owners) {
    this.owners = owners;
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public Meta17 getOwners() {
    return owners;
  }

  public void setOwners(Meta17 owners) {
    this.owners = owners;
  }


  public DashboardRestApiGetList positionJson(String positionJson) {
    this.positionJson = positionJson;
    return this;
  }

  /**
   * Get positionJson
   * @return positionJson
   */
  @javax.annotation.Nullable
  public String getPositionJson() {
    return positionJson;
  }

  public void setPositionJson(String positionJson) {
    this.positionJson = positionJson;
  }


  public DashboardRestApiGetList published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public DashboardRestApiGetList roles(Meta16 roles) {
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public Meta16 getRoles() {
    return roles;
  }

  public void setRoles(Meta16 roles) {
    this.roles = roles;
  }


  public DashboardRestApiGetList slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Object getStatus() {
    return status;
  }



  /**
   * Get thumbnailUrl
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public Object getThumbnailUrl() {
    return thumbnailUrl;
  }



  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public Object getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardRestApiGetList dashboardRestApiGetList = (DashboardRestApiGetList) o;
    return Objects.equals(this.changedBy, dashboardRestApiGetList.changedBy) &&
        Objects.equals(this.changedByName, dashboardRestApiGetList.changedByName) &&
        Objects.equals(this.changedByUrl, dashboardRestApiGetList.changedByUrl) &&
        Objects.equals(this.changedOnDeltaHumanized, dashboardRestApiGetList.changedOnDeltaHumanized) &&
        Objects.equals(this.changedOnUtc, dashboardRestApiGetList.changedOnUtc) &&
        Objects.equals(this.createdBy, dashboardRestApiGetList.createdBy) &&
        Objects.equals(this.css, dashboardRestApiGetList.css) &&
        Objects.equals(this.dashboardTitle, dashboardRestApiGetList.dashboardTitle) &&
        Objects.equals(this.id, dashboardRestApiGetList.id) &&
        Objects.equals(this.jsonMetadata, dashboardRestApiGetList.jsonMetadata) &&
        Objects.equals(this.owners, dashboardRestApiGetList.owners) &&
        Objects.equals(this.positionJson, dashboardRestApiGetList.positionJson) &&
        Objects.equals(this.published, dashboardRestApiGetList.published) &&
        Objects.equals(this.roles, dashboardRestApiGetList.roles) &&
        Objects.equals(this.slug, dashboardRestApiGetList.slug) &&
        Objects.equals(this.status, dashboardRestApiGetList.status) &&
        Objects.equals(this.thumbnailUrl, dashboardRestApiGetList.thumbnailUrl) &&
        Objects.equals(this.url, dashboardRestApiGetList.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedBy, changedByName, changedByUrl, changedOnDeltaHumanized, changedOnUtc, createdBy, css, dashboardTitle, id, jsonMetadata, owners, positionJson, published, roles, slug, status, thumbnailUrl, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardRestApiGetList {\n");
    sb.append("    changedBy: ").append(toIndentedString(changedBy)).append("\n");
    sb.append("    changedByName: ").append(toIndentedString(changedByName)).append("\n");
    sb.append("    changedByUrl: ").append(toIndentedString(changedByUrl)).append("\n");
    sb.append("    changedOnDeltaHumanized: ").append(toIndentedString(changedOnDeltaHumanized)).append("\n");
    sb.append("    changedOnUtc: ").append(toIndentedString(changedOnUtc)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    dashboardTitle: ").append(toIndentedString(dashboardTitle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsonMetadata: ").append(toIndentedString(jsonMetadata)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    positionJson: ").append(toIndentedString(positionJson)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_by");
    openapiFields.add("changed_by_name");
    openapiFields.add("changed_by_url");
    openapiFields.add("changed_on_delta_humanized");
    openapiFields.add("changed_on_utc");
    openapiFields.add("created_by");
    openapiFields.add("css");
    openapiFields.add("dashboard_title");
    openapiFields.add("id");
    openapiFields.add("json_metadata");
    openapiFields.add("owners");
    openapiFields.add("position_json");
    openapiFields.add("published");
    openapiFields.add("roles");
    openapiFields.add("slug");
    openapiFields.add("status");
    openapiFields.add("thumbnail_url");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardRestApiGetList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DashboardRestApiGetList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardRestApiGetList is not found in the empty JSON string", DashboardRestApiGetList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DashboardRestApiGetList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardRestApiGetList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changed_by`
      if (jsonObj.get("changed_by") != null && !jsonObj.get("changed_by").isJsonNull()) {
        Meta15.validateJsonElement(jsonObj.get("changed_by"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        Meta14.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) && !jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if ((jsonObj.get("dashboard_title") != null && !jsonObj.get("dashboard_title").isJsonNull()) && !jsonObj.get("dashboard_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard_title").toString()));
      }
      if ((jsonObj.get("json_metadata") != null && !jsonObj.get("json_metadata").isJsonNull()) && !jsonObj.get("json_metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `json_metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("json_metadata").toString()));
      }
      // validate the optional field `owners`
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        Meta17.validateJsonElement(jsonObj.get("owners"));
      }
      if ((jsonObj.get("position_json") != null && !jsonObj.get("position_json").isJsonNull()) && !jsonObj.get("position_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position_json").toString()));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        Meta16.validateJsonElement(jsonObj.get("roles"));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DashboardRestApiGetList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DashboardRestApiGetList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DashboardRestApiGetList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DashboardRestApiGetList.class));

       return (TypeAdapter<T>) new TypeAdapter<DashboardRestApiGetList>() {
           @Override
           public void write(JsonWriter out, DashboardRestApiGetList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DashboardRestApiGetList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardRestApiGetList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardRestApiGetList
   * @throws IOException if the JSON string is invalid with respect to DashboardRestApiGetList
   */
  public static DashboardRestApiGetList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardRestApiGetList.class);
  }

  /**
   * Convert an instance of DashboardRestApiGetList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

