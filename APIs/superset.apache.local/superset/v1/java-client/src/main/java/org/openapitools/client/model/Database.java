/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Database {
  public static final String SERIALIZED_NAME_ALLOW_MULTI_SCHEMA_METADATA_FETCH = "allow_multi_schema_metadata_fetch";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTI_SCHEMA_METADATA_FETCH)
  private Boolean allowMultiSchemaMetadataFetch;

  public static final String SERIALIZED_NAME_ALLOWS_COST_ESTIMATE = "allows_cost_estimate";
  @SerializedName(SERIALIZED_NAME_ALLOWS_COST_ESTIMATE)
  private Boolean allowsCostEstimate;

  public static final String SERIALIZED_NAME_ALLOWS_SUBQUERY = "allows_subquery";
  @SerializedName(SERIALIZED_NAME_ALLOWS_SUBQUERY)
  private Boolean allowsSubquery;

  public static final String SERIALIZED_NAME_ALLOWS_VIRTUAL_TABLE_EXPLORE = "allows_virtual_table_explore";
  @SerializedName(SERIALIZED_NAME_ALLOWS_VIRTUAL_TABLE_EXPLORE)
  private Boolean allowsVirtualTableExplore;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private String backend;

  public static final String SERIALIZED_NAME_EXPLORE_DATABASE_ID = "explore_database_id";
  @SerializedName(SERIALIZED_NAME_EXPLORE_DATABASE_ID)
  private Integer exploreDatabaseId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Database() {
  }

  public Database allowMultiSchemaMetadataFetch(Boolean allowMultiSchemaMetadataFetch) {
    this.allowMultiSchemaMetadataFetch = allowMultiSchemaMetadataFetch;
    return this;
  }

  /**
   * Get allowMultiSchemaMetadataFetch
   * @return allowMultiSchemaMetadataFetch
   */
  @javax.annotation.Nullable
  public Boolean getAllowMultiSchemaMetadataFetch() {
    return allowMultiSchemaMetadataFetch;
  }

  public void setAllowMultiSchemaMetadataFetch(Boolean allowMultiSchemaMetadataFetch) {
    this.allowMultiSchemaMetadataFetch = allowMultiSchemaMetadataFetch;
  }


  public Database allowsCostEstimate(Boolean allowsCostEstimate) {
    this.allowsCostEstimate = allowsCostEstimate;
    return this;
  }

  /**
   * Get allowsCostEstimate
   * @return allowsCostEstimate
   */
  @javax.annotation.Nullable
  public Boolean getAllowsCostEstimate() {
    return allowsCostEstimate;
  }

  public void setAllowsCostEstimate(Boolean allowsCostEstimate) {
    this.allowsCostEstimate = allowsCostEstimate;
  }


  public Database allowsSubquery(Boolean allowsSubquery) {
    this.allowsSubquery = allowsSubquery;
    return this;
  }

  /**
   * Get allowsSubquery
   * @return allowsSubquery
   */
  @javax.annotation.Nullable
  public Boolean getAllowsSubquery() {
    return allowsSubquery;
  }

  public void setAllowsSubquery(Boolean allowsSubquery) {
    this.allowsSubquery = allowsSubquery;
  }


  public Database allowsVirtualTableExplore(Boolean allowsVirtualTableExplore) {
    this.allowsVirtualTableExplore = allowsVirtualTableExplore;
    return this;
  }

  /**
   * Get allowsVirtualTableExplore
   * @return allowsVirtualTableExplore
   */
  @javax.annotation.Nullable
  public Boolean getAllowsVirtualTableExplore() {
    return allowsVirtualTableExplore;
  }

  public void setAllowsVirtualTableExplore(Boolean allowsVirtualTableExplore) {
    this.allowsVirtualTableExplore = allowsVirtualTableExplore;
  }


  public Database backend(String backend) {
    this.backend = backend;
    return this;
  }

  /**
   * Get backend
   * @return backend
   */
  @javax.annotation.Nullable
  public String getBackend() {
    return backend;
  }

  public void setBackend(String backend) {
    this.backend = backend;
  }


  public Database exploreDatabaseId(Integer exploreDatabaseId) {
    this.exploreDatabaseId = exploreDatabaseId;
    return this;
  }

  /**
   * Get exploreDatabaseId
   * @return exploreDatabaseId
   */
  @javax.annotation.Nullable
  public Integer getExploreDatabaseId() {
    return exploreDatabaseId;
  }

  public void setExploreDatabaseId(Integer exploreDatabaseId) {
    this.exploreDatabaseId = exploreDatabaseId;
  }


  public Database id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Database name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Database database = (Database) o;
    return Objects.equals(this.allowMultiSchemaMetadataFetch, database.allowMultiSchemaMetadataFetch) &&
        Objects.equals(this.allowsCostEstimate, database.allowsCostEstimate) &&
        Objects.equals(this.allowsSubquery, database.allowsSubquery) &&
        Objects.equals(this.allowsVirtualTableExplore, database.allowsVirtualTableExplore) &&
        Objects.equals(this.backend, database.backend) &&
        Objects.equals(this.exploreDatabaseId, database.exploreDatabaseId) &&
        Objects.equals(this.id, database.id) &&
        Objects.equals(this.name, database.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultiSchemaMetadataFetch, allowsCostEstimate, allowsSubquery, allowsVirtualTableExplore, backend, exploreDatabaseId, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Database {\n");
    sb.append("    allowMultiSchemaMetadataFetch: ").append(toIndentedString(allowMultiSchemaMetadataFetch)).append("\n");
    sb.append("    allowsCostEstimate: ").append(toIndentedString(allowsCostEstimate)).append("\n");
    sb.append("    allowsSubquery: ").append(toIndentedString(allowsSubquery)).append("\n");
    sb.append("    allowsVirtualTableExplore: ").append(toIndentedString(allowsVirtualTableExplore)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    exploreDatabaseId: ").append(toIndentedString(exploreDatabaseId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_multi_schema_metadata_fetch");
    openapiFields.add("allows_cost_estimate");
    openapiFields.add("allows_subquery");
    openapiFields.add("allows_virtual_table_explore");
    openapiFields.add("backend");
    openapiFields.add("explore_database_id");
    openapiFields.add("id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Database
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Database.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Database is not found in the empty JSON string", Database.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Database.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Database` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonNull()) && !jsonObj.get("backend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Database.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Database' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Database> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Database.class));

       return (TypeAdapter<T>) new TypeAdapter<Database>() {
           @Override
           public void write(JsonWriter out, Database value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Database read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Database given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Database
   * @throws IOException if the JSON string is invalid with respect to Database
   */
  public static Database fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Database.class);
  }

  /**
   * Convert an instance of Database to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

