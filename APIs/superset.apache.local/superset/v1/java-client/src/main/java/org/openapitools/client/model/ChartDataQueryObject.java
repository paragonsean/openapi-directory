/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnnotationLayer;
import org.openapitools.client.model.ChartDataDatasource;
import org.openapitools.client.model.ChartDataExtras;
import org.openapitools.client.model.ChartDataFilter;
import org.openapitools.client.model.ChartDataPostProcessingOperation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartDataQueryObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartDataQueryObject {
  public static final String SERIALIZED_NAME_ANNOTATION_LAYERS = "annotation_layers";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_LAYERS)
  private List<AnnotationLayer> annotationLayers;

  public static final String SERIALIZED_NAME_APPLIED_TIME_EXTRAS = "applied_time_extras";
  @SerializedName(SERIALIZED_NAME_APPLIED_TIME_EXTRAS)
  private Object appliedTimeExtras;

  public static final String SERIALIZED_NAME_APPLY_FETCH_VALUES_PREDICATE = "apply_fetch_values_predicate";
  @SerializedName(SERIALIZED_NAME_APPLY_FETCH_VALUES_PREDICATE)
  private Boolean applyFetchValuesPredicate;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns;

  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private ChartDataDatasource datasource;

  public static final String SERIALIZED_NAME_DRUID_TIME_ORIGIN = "druid_time_origin";
  @SerializedName(SERIALIZED_NAME_DRUID_TIME_ORIGIN)
  private String druidTimeOrigin;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private ChartDataExtras extras;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ChartDataFilter> filters;

  public static final String SERIALIZED_NAME_GRANULARITY = "granularity";
  @SerializedName(SERIALIZED_NAME_GRANULARITY)
  private String granularity;

  public static final String SERIALIZED_NAME_GRANULARITY_SQLA = "granularity_sqla";
  @SerializedName(SERIALIZED_NAME_GRANULARITY_SQLA)
  private String granularitySqla;

  public static final String SERIALIZED_NAME_GROUPBY = "groupby";
  @SerializedName(SERIALIZED_NAME_GROUPBY)
  private List<String> groupby;

  public static final String SERIALIZED_NAME_HAVING = "having";
  @SerializedName(SERIALIZED_NAME_HAVING)
  private String having;

  public static final String SERIALIZED_NAME_HAVING_FILTERS = "having_filters";
  @SerializedName(SERIALIZED_NAME_HAVING_FILTERS)
  private List<ChartDataFilter> havingFilters;

  public static final String SERIALIZED_NAME_IS_ROWCOUNT = "is_rowcount";
  @SerializedName(SERIALIZED_NAME_IS_ROWCOUNT)
  private Boolean isRowcount;

  public static final String SERIALIZED_NAME_IS_TIMESERIES = "is_timeseries";
  @SerializedName(SERIALIZED_NAME_IS_TIMESERIES)
  private Boolean isTimeseries;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Object> metrics;

  public static final String SERIALIZED_NAME_ORDER_DESC = "order_desc";
  @SerializedName(SERIALIZED_NAME_ORDER_DESC)
  private Boolean orderDesc;

  public static final String SERIALIZED_NAME_ORDERBY = "orderby";
  @SerializedName(SERIALIZED_NAME_ORDERBY)
  private List<Object> orderby;

  public static final String SERIALIZED_NAME_POST_PROCESSING = "post_processing";
  @SerializedName(SERIALIZED_NAME_POST_PROCESSING)
  private List<ChartDataPostProcessingOperation> postProcessing;

  public static final String SERIALIZED_NAME_RESULT_TYPE = "result_type";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  private Object resultType = null;

  public static final String SERIALIZED_NAME_ROW_LIMIT = "row_limit";
  @SerializedName(SERIALIZED_NAME_ROW_LIMIT)
  private Integer rowLimit;

  public static final String SERIALIZED_NAME_ROW_OFFSET = "row_offset";
  @SerializedName(SERIALIZED_NAME_ROW_OFFSET)
  private Integer rowOffset;

  public static final String SERIALIZED_NAME_TIME_OFFSETS = "time_offsets";
  @SerializedName(SERIALIZED_NAME_TIME_OFFSETS)
  private List<String> timeOffsets;

  public static final String SERIALIZED_NAME_TIME_RANGE = "time_range";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private String timeRange;

  public static final String SERIALIZED_NAME_TIME_SHIFT = "time_shift";
  @SerializedName(SERIALIZED_NAME_TIME_SHIFT)
  private String timeShift;

  public static final String SERIALIZED_NAME_TIMESERIES_LIMIT = "timeseries_limit";
  @SerializedName(SERIALIZED_NAME_TIMESERIES_LIMIT)
  private Integer timeseriesLimit;

  public static final String SERIALIZED_NAME_TIMESERIES_LIMIT_METRIC = "timeseries_limit_metric";
  @SerializedName(SERIALIZED_NAME_TIMESERIES_LIMIT_METRIC)
  private Object timeseriesLimitMetric = null;

  public static final String SERIALIZED_NAME_URL_PARAMS = "url_params";
  @SerializedName(SERIALIZED_NAME_URL_PARAMS)
  private Map<String, String> urlParams;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private String where;

  public ChartDataQueryObject() {
  }

  public ChartDataQueryObject annotationLayers(List<AnnotationLayer> annotationLayers) {
    this.annotationLayers = annotationLayers;
    return this;
  }

  public ChartDataQueryObject addAnnotationLayersItem(AnnotationLayer annotationLayersItem) {
    if (this.annotationLayers == null) {
      this.annotationLayers = new ArrayList<>();
    }
    this.annotationLayers.add(annotationLayersItem);
    return this;
  }

  /**
   * Annotation layers to apply to chart
   * @return annotationLayers
   */
  @javax.annotation.Nullable
  public List<AnnotationLayer> getAnnotationLayers() {
    return annotationLayers;
  }

  public void setAnnotationLayers(List<AnnotationLayer> annotationLayers) {
    this.annotationLayers = annotationLayers;
  }


  public ChartDataQueryObject appliedTimeExtras(Object appliedTimeExtras) {
    this.appliedTimeExtras = appliedTimeExtras;
    return this;
  }

  /**
   * A mapping of temporal extras that have been applied to the query
   * @return appliedTimeExtras
   */
  @javax.annotation.Nullable
  public Object getAppliedTimeExtras() {
    return appliedTimeExtras;
  }

  public void setAppliedTimeExtras(Object appliedTimeExtras) {
    this.appliedTimeExtras = appliedTimeExtras;
  }


  public ChartDataQueryObject applyFetchValuesPredicate(Boolean applyFetchValuesPredicate) {
    this.applyFetchValuesPredicate = applyFetchValuesPredicate;
    return this;
  }

  /**
   * Add fetch values predicate (where clause) to query if defined in datasource
   * @return applyFetchValuesPredicate
   */
  @javax.annotation.Nullable
  public Boolean getApplyFetchValuesPredicate() {
    return applyFetchValuesPredicate;
  }

  public void setApplyFetchValuesPredicate(Boolean applyFetchValuesPredicate) {
    this.applyFetchValuesPredicate = applyFetchValuesPredicate;
  }


  public ChartDataQueryObject columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public ChartDataQueryObject addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Columns which to select in the query.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public ChartDataQueryObject datasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
    return this;
  }

  /**
   * Get datasource
   * @return datasource
   */
  @javax.annotation.Nullable
  public ChartDataDatasource getDatasource() {
    return datasource;
  }

  public void setDatasource(ChartDataDatasource datasource) {
    this.datasource = datasource;
  }


  public ChartDataQueryObject druidTimeOrigin(String druidTimeOrigin) {
    this.druidTimeOrigin = druidTimeOrigin;
    return this;
  }

  /**
   * Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week. This field is deprecated and should be passed to &#x60;extras&#x60; as &#x60;druid_time_origin&#x60;.
   * @return druidTimeOrigin
   */
  @javax.annotation.Nullable
  public String getDruidTimeOrigin() {
    return druidTimeOrigin;
  }

  public void setDruidTimeOrigin(String druidTimeOrigin) {
    this.druidTimeOrigin = druidTimeOrigin;
  }


  public ChartDataQueryObject extras(ChartDataExtras extras) {
    this.extras = extras;
    return this;
  }

  /**
   * Extra parameters to add to the query.
   * @return extras
   */
  @javax.annotation.Nullable
  public ChartDataExtras getExtras() {
    return extras;
  }

  public void setExtras(ChartDataExtras extras) {
    this.extras = extras;
  }


  public ChartDataQueryObject filters(List<ChartDataFilter> filters) {
    this.filters = filters;
    return this;
  }

  public ChartDataQueryObject addFiltersItem(ChartDataFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<ChartDataFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<ChartDataFilter> filters) {
    this.filters = filters;
  }


  public ChartDataQueryObject granularity(String granularity) {
    this.granularity = granularity;
    return this;
  }

  /**
   * Name of temporal column used for time filtering. For legacy Druid datasources this defines the time grain.
   * @return granularity
   */
  @javax.annotation.Nullable
  public String getGranularity() {
    return granularity;
  }

  public void setGranularity(String granularity) {
    this.granularity = granularity;
  }


  public ChartDataQueryObject granularitySqla(String granularitySqla) {
    this.granularitySqla = granularitySqla;
    return this;
  }

  /**
   * Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use &#x60;granularity&#x60; instead.
   * @return granularitySqla
   */
  @javax.annotation.Nullable
  public String getGranularitySqla() {
    return granularitySqla;
  }

  public void setGranularitySqla(String granularitySqla) {
    this.granularitySqla = granularitySqla;
  }


  public ChartDataQueryObject groupby(List<String> groupby) {
    this.groupby = groupby;
    return this;
  }

  public ChartDataQueryObject addGroupbyItem(String groupbyItem) {
    if (this.groupby == null) {
      this.groupby = new ArrayList<>();
    }
    this.groupby.add(groupbyItem);
    return this;
  }

  /**
   * Get groupby
   * @return groupby
   */
  @javax.annotation.Nullable
  public List<String> getGroupby() {
    return groupby;
  }

  public void setGroupby(List<String> groupby) {
    this.groupby = groupby;
  }


  public ChartDataQueryObject having(String having) {
    this.having = having;
    return this;
  }

  /**
   * HAVING clause to be added to aggregate queries using AND operator. This field is deprecated and should be passed to &#x60;extras&#x60;.
   * @return having
   */
  @javax.annotation.Nullable
  public String getHaving() {
    return having;
  }

  public void setHaving(String having) {
    this.having = having;
  }


  public ChartDataQueryObject havingFilters(List<ChartDataFilter> havingFilters) {
    this.havingFilters = havingFilters;
    return this;
  }

  public ChartDataQueryObject addHavingFiltersItem(ChartDataFilter havingFiltersItem) {
    if (this.havingFilters == null) {
      this.havingFilters = new ArrayList<>();
    }
    this.havingFilters.add(havingFiltersItem);
    return this;
  }

  /**
   * HAVING filters to be added to legacy Druid datasource queries. This field is deprecated and should be passed to &#x60;extras&#x60; as &#x60;having_druid&#x60;.
   * @return havingFilters
   */
  @javax.annotation.Nullable
  public List<ChartDataFilter> getHavingFilters() {
    return havingFilters;
  }

  public void setHavingFilters(List<ChartDataFilter> havingFilters) {
    this.havingFilters = havingFilters;
  }


  public ChartDataQueryObject isRowcount(Boolean isRowcount) {
    this.isRowcount = isRowcount;
    return this;
  }

  /**
   * Should the rowcount of the actual query be returned
   * @return isRowcount
   */
  @javax.annotation.Nullable
  public Boolean getIsRowcount() {
    return isRowcount;
  }

  public void setIsRowcount(Boolean isRowcount) {
    this.isRowcount = isRowcount;
  }


  public ChartDataQueryObject isTimeseries(Boolean isTimeseries) {
    this.isTimeseries = isTimeseries;
    return this;
  }

  /**
   * Is the &#x60;query_object&#x60; a timeseries.
   * @return isTimeseries
   */
  @javax.annotation.Nullable
  public Boolean getIsTimeseries() {
    return isTimeseries;
  }

  public void setIsTimeseries(Boolean isTimeseries) {
    this.isTimeseries = isTimeseries;
  }


  public ChartDataQueryObject metrics(List<Object> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ChartDataQueryObject addMetricsItem(Object metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See &#x60;ChartDataAdhocMetricSchema&#x60; for the structure of ad-hoc metrics.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Object> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Object> metrics) {
    this.metrics = metrics;
  }


  public ChartDataQueryObject orderDesc(Boolean orderDesc) {
    this.orderDesc = orderDesc;
    return this;
  }

  /**
   * Reverse order. Default: &#x60;false&#x60;
   * @return orderDesc
   */
  @javax.annotation.Nullable
  public Boolean getOrderDesc() {
    return orderDesc;
  }

  public void setOrderDesc(Boolean orderDesc) {
    this.orderDesc = orderDesc;
  }


  public ChartDataQueryObject orderby(List<Object> orderby) {
    this.orderby = orderby;
    return this;
  }

  public ChartDataQueryObject addOrderbyItem(Object orderbyItem) {
    if (this.orderby == null) {
      this.orderby = new ArrayList<>();
    }
    this.orderby.add(orderbyItem);
    return this;
  }

  /**
   * Expects a list of lists where the first element is the column name which to sort by, and the second element is a boolean.
   * @return orderby
   */
  @javax.annotation.Nullable
  public List<Object> getOrderby() {
    return orderby;
  }

  public void setOrderby(List<Object> orderby) {
    this.orderby = orderby;
  }


  public ChartDataQueryObject postProcessing(List<ChartDataPostProcessingOperation> postProcessing) {
    this.postProcessing = postProcessing;
    return this;
  }

  public ChartDataQueryObject addPostProcessingItem(ChartDataPostProcessingOperation postProcessingItem) {
    if (this.postProcessing == null) {
      this.postProcessing = new ArrayList<>();
    }
    this.postProcessing.add(postProcessingItem);
    return this;
  }

  /**
   * Post processing operations to be applied to the result set. Operations are applied to the result set in sequential order.
   * @return postProcessing
   */
  @javax.annotation.Nullable
  public List<ChartDataPostProcessingOperation> getPostProcessing() {
    return postProcessing;
  }

  public void setPostProcessing(List<ChartDataPostProcessingOperation> postProcessing) {
    this.postProcessing = postProcessing;
  }


  public ChartDataQueryObject resultType(Object resultType) {
    this.resultType = resultType;
    return this;
  }

  /**
   * Get resultType
   * @return resultType
   */
  @javax.annotation.Nullable
  public Object getResultType() {
    return resultType;
  }

  public void setResultType(Object resultType) {
    this.resultType = resultType;
  }


  public ChartDataQueryObject rowLimit(Integer rowLimit) {
    this.rowLimit = rowLimit;
    return this;
  }

  /**
   * Maximum row count (0&#x3D;disabled). Default: &#x60;config[\&quot;ROW_LIMIT\&quot;]&#x60;
   * minimum: 0
   * @return rowLimit
   */
  @javax.annotation.Nullable
  public Integer getRowLimit() {
    return rowLimit;
  }

  public void setRowLimit(Integer rowLimit) {
    this.rowLimit = rowLimit;
  }


  public ChartDataQueryObject rowOffset(Integer rowOffset) {
    this.rowOffset = rowOffset;
    return this;
  }

  /**
   * Number of rows to skip. Default: &#x60;0&#x60;
   * minimum: 0
   * @return rowOffset
   */
  @javax.annotation.Nullable
  public Integer getRowOffset() {
    return rowOffset;
  }

  public void setRowOffset(Integer rowOffset) {
    this.rowOffset = rowOffset;
  }


  public ChartDataQueryObject timeOffsets(List<String> timeOffsets) {
    this.timeOffsets = timeOffsets;
    return this;
  }

  public ChartDataQueryObject addTimeOffsetsItem(String timeOffsetsItem) {
    if (this.timeOffsets == null) {
      this.timeOffsets = new ArrayList<>();
    }
    this.timeOffsets.add(timeOffsetsItem);
    return this;
  }

  /**
   * Get timeOffsets
   * @return timeOffsets
   */
  @javax.annotation.Nullable
  public List<String> getTimeOffsets() {
    return timeOffsets;
  }

  public void setTimeOffsets(List<String> timeOffsets) {
    this.timeOffsets = timeOffsets;
  }


  public ChartDataQueryObject timeRange(String timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * A time rage, either expressed as a colon separated string &#x60;since : until&#x60; or human readable freeform. Valid formats for &#x60;since&#x60; and &#x60;until&#x60; are:  - ISO 8601 - X days/years/hours/day/year/weeks - X days/years/hours/day/year/weeks ago - X days/years/hours/day/year/weeks from now  Additionally, the following freeform can be used:  - Last day - Last week - Last month - Last quarter - Last year - No filter - Last X seconds/minutes/hours/days/weeks/months/years - Next X seconds/minutes/hours/days/weeks/months/years 
   * @return timeRange
   */
  @javax.annotation.Nullable
  public String getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(String timeRange) {
    this.timeRange = timeRange;
  }


  public ChartDataQueryObject timeShift(String timeShift) {
    this.timeShift = timeShift;
    return this;
  }

  /**
   * A human-readable date/time string. Please refer to [parsdatetime](https://github.com/bear/parsedatetime) documentation for details on valid values.
   * @return timeShift
   */
  @javax.annotation.Nullable
  public String getTimeShift() {
    return timeShift;
  }

  public void setTimeShift(String timeShift) {
    this.timeShift = timeShift;
  }


  public ChartDataQueryObject timeseriesLimit(Integer timeseriesLimit) {
    this.timeseriesLimit = timeseriesLimit;
    return this;
  }

  /**
   * Maximum row count for timeseries queries. Default: &#x60;0&#x60;
   * @return timeseriesLimit
   */
  @javax.annotation.Nullable
  public Integer getTimeseriesLimit() {
    return timeseriesLimit;
  }

  public void setTimeseriesLimit(Integer timeseriesLimit) {
    this.timeseriesLimit = timeseriesLimit;
  }


  public ChartDataQueryObject timeseriesLimitMetric(Object timeseriesLimitMetric) {
    this.timeseriesLimitMetric = timeseriesLimitMetric;
    return this;
  }

  /**
   * Metric used to limit timeseries queries by.
   * @return timeseriesLimitMetric
   */
  @javax.annotation.Nullable
  public Object getTimeseriesLimitMetric() {
    return timeseriesLimitMetric;
  }

  public void setTimeseriesLimitMetric(Object timeseriesLimitMetric) {
    this.timeseriesLimitMetric = timeseriesLimitMetric;
  }


  public ChartDataQueryObject urlParams(Map<String, String> urlParams) {
    this.urlParams = urlParams;
    return this;
  }

  public ChartDataQueryObject putUrlParamsItem(String key, String urlParamsItem) {
    if (this.urlParams == null) {
      this.urlParams = new HashMap<>();
    }
    this.urlParams.put(key, urlParamsItem);
    return this;
  }

  /**
   * Optional query parameters passed to a dashboard or Explore view
   * @return urlParams
   */
  @javax.annotation.Nullable
  public Map<String, String> getUrlParams() {
    return urlParams;
  }

  public void setUrlParams(Map<String, String> urlParams) {
    this.urlParams = urlParams;
  }


  public ChartDataQueryObject where(String where) {
    this.where = where;
    return this;
  }

  /**
   * WHERE clause to be added to queries using AND operator.This field is deprecated and should be passed to &#x60;extras&#x60;.
   * @return where
   */
  @javax.annotation.Nullable
  public String getWhere() {
    return where;
  }

  public void setWhere(String where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartDataQueryObject chartDataQueryObject = (ChartDataQueryObject) o;
    return Objects.equals(this.annotationLayers, chartDataQueryObject.annotationLayers) &&
        Objects.equals(this.appliedTimeExtras, chartDataQueryObject.appliedTimeExtras) &&
        Objects.equals(this.applyFetchValuesPredicate, chartDataQueryObject.applyFetchValuesPredicate) &&
        Objects.equals(this.columns, chartDataQueryObject.columns) &&
        Objects.equals(this.datasource, chartDataQueryObject.datasource) &&
        Objects.equals(this.druidTimeOrigin, chartDataQueryObject.druidTimeOrigin) &&
        Objects.equals(this.extras, chartDataQueryObject.extras) &&
        Objects.equals(this.filters, chartDataQueryObject.filters) &&
        Objects.equals(this.granularity, chartDataQueryObject.granularity) &&
        Objects.equals(this.granularitySqla, chartDataQueryObject.granularitySqla) &&
        Objects.equals(this.groupby, chartDataQueryObject.groupby) &&
        Objects.equals(this.having, chartDataQueryObject.having) &&
        Objects.equals(this.havingFilters, chartDataQueryObject.havingFilters) &&
        Objects.equals(this.isRowcount, chartDataQueryObject.isRowcount) &&
        Objects.equals(this.isTimeseries, chartDataQueryObject.isTimeseries) &&
        Objects.equals(this.metrics, chartDataQueryObject.metrics) &&
        Objects.equals(this.orderDesc, chartDataQueryObject.orderDesc) &&
        Objects.equals(this.orderby, chartDataQueryObject.orderby) &&
        Objects.equals(this.postProcessing, chartDataQueryObject.postProcessing) &&
        Objects.equals(this.resultType, chartDataQueryObject.resultType) &&
        Objects.equals(this.rowLimit, chartDataQueryObject.rowLimit) &&
        Objects.equals(this.rowOffset, chartDataQueryObject.rowOffset) &&
        Objects.equals(this.timeOffsets, chartDataQueryObject.timeOffsets) &&
        Objects.equals(this.timeRange, chartDataQueryObject.timeRange) &&
        Objects.equals(this.timeShift, chartDataQueryObject.timeShift) &&
        Objects.equals(this.timeseriesLimit, chartDataQueryObject.timeseriesLimit) &&
        Objects.equals(this.timeseriesLimitMetric, chartDataQueryObject.timeseriesLimitMetric) &&
        Objects.equals(this.urlParams, chartDataQueryObject.urlParams) &&
        Objects.equals(this.where, chartDataQueryObject.where);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationLayers, appliedTimeExtras, applyFetchValuesPredicate, columns, datasource, druidTimeOrigin, extras, filters, granularity, granularitySqla, groupby, having, havingFilters, isRowcount, isTimeseries, metrics, orderDesc, orderby, postProcessing, resultType, rowLimit, rowOffset, timeOffsets, timeRange, timeShift, timeseriesLimit, timeseriesLimitMetric, urlParams, where);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartDataQueryObject {\n");
    sb.append("    annotationLayers: ").append(toIndentedString(annotationLayers)).append("\n");
    sb.append("    appliedTimeExtras: ").append(toIndentedString(appliedTimeExtras)).append("\n");
    sb.append("    applyFetchValuesPredicate: ").append(toIndentedString(applyFetchValuesPredicate)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    druidTimeOrigin: ").append(toIndentedString(druidTimeOrigin)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
    sb.append("    granularitySqla: ").append(toIndentedString(granularitySqla)).append("\n");
    sb.append("    groupby: ").append(toIndentedString(groupby)).append("\n");
    sb.append("    having: ").append(toIndentedString(having)).append("\n");
    sb.append("    havingFilters: ").append(toIndentedString(havingFilters)).append("\n");
    sb.append("    isRowcount: ").append(toIndentedString(isRowcount)).append("\n");
    sb.append("    isTimeseries: ").append(toIndentedString(isTimeseries)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    orderDesc: ").append(toIndentedString(orderDesc)).append("\n");
    sb.append("    orderby: ").append(toIndentedString(orderby)).append("\n");
    sb.append("    postProcessing: ").append(toIndentedString(postProcessing)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    rowLimit: ").append(toIndentedString(rowLimit)).append("\n");
    sb.append("    rowOffset: ").append(toIndentedString(rowOffset)).append("\n");
    sb.append("    timeOffsets: ").append(toIndentedString(timeOffsets)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    timeShift: ").append(toIndentedString(timeShift)).append("\n");
    sb.append("    timeseriesLimit: ").append(toIndentedString(timeseriesLimit)).append("\n");
    sb.append("    timeseriesLimitMetric: ").append(toIndentedString(timeseriesLimitMetric)).append("\n");
    sb.append("    urlParams: ").append(toIndentedString(urlParams)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotation_layers");
    openapiFields.add("applied_time_extras");
    openapiFields.add("apply_fetch_values_predicate");
    openapiFields.add("columns");
    openapiFields.add("datasource");
    openapiFields.add("druid_time_origin");
    openapiFields.add("extras");
    openapiFields.add("filters");
    openapiFields.add("granularity");
    openapiFields.add("granularity_sqla");
    openapiFields.add("groupby");
    openapiFields.add("having");
    openapiFields.add("having_filters");
    openapiFields.add("is_rowcount");
    openapiFields.add("is_timeseries");
    openapiFields.add("metrics");
    openapiFields.add("order_desc");
    openapiFields.add("orderby");
    openapiFields.add("post_processing");
    openapiFields.add("result_type");
    openapiFields.add("row_limit");
    openapiFields.add("row_offset");
    openapiFields.add("time_offsets");
    openapiFields.add("time_range");
    openapiFields.add("time_shift");
    openapiFields.add("timeseries_limit");
    openapiFields.add("timeseries_limit_metric");
    openapiFields.add("url_params");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartDataQueryObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartDataQueryObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartDataQueryObject is not found in the empty JSON string", ChartDataQueryObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartDataQueryObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartDataQueryObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("annotation_layers") != null && !jsonObj.get("annotation_layers").isJsonNull()) {
        JsonArray jsonArrayannotationLayers = jsonObj.getAsJsonArray("annotation_layers");
        if (jsonArrayannotationLayers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotation_layers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotation_layers` to be an array in the JSON string but got `%s`", jsonObj.get("annotation_layers").toString()));
          }

          // validate the optional field `annotation_layers` (array)
          for (int i = 0; i < jsonArrayannotationLayers.size(); i++) {
            AnnotationLayer.validateJsonElement(jsonArrayannotationLayers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      // validate the optional field `datasource`
      if (jsonObj.get("datasource") != null && !jsonObj.get("datasource").isJsonNull()) {
        ChartDataDatasource.validateJsonElement(jsonObj.get("datasource"));
      }
      if ((jsonObj.get("druid_time_origin") != null && !jsonObj.get("druid_time_origin").isJsonNull()) && !jsonObj.get("druid_time_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `druid_time_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("druid_time_origin").toString()));
      }
      // validate the optional field `extras`
      if (jsonObj.get("extras") != null && !jsonObj.get("extras").isJsonNull()) {
        ChartDataExtras.validateJsonElement(jsonObj.get("extras"));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ChartDataFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if ((jsonObj.get("granularity") != null && !jsonObj.get("granularity").isJsonNull()) && !jsonObj.get("granularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("granularity").toString()));
      }
      if ((jsonObj.get("granularity_sqla") != null && !jsonObj.get("granularity_sqla").isJsonNull()) && !jsonObj.get("granularity_sqla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity_sqla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("granularity_sqla").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupby") != null && !jsonObj.get("groupby").isJsonNull() && !jsonObj.get("groupby").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupby` to be an array in the JSON string but got `%s`", jsonObj.get("groupby").toString()));
      }
      if ((jsonObj.get("having") != null && !jsonObj.get("having").isJsonNull()) && !jsonObj.get("having").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `having` to be a primitive type in the JSON string but got `%s`", jsonObj.get("having").toString()));
      }
      if (jsonObj.get("having_filters") != null && !jsonObj.get("having_filters").isJsonNull()) {
        JsonArray jsonArrayhavingFilters = jsonObj.getAsJsonArray("having_filters");
        if (jsonArrayhavingFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("having_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `having_filters` to be an array in the JSON string but got `%s`", jsonObj.get("having_filters").toString()));
          }

          // validate the optional field `having_filters` (array)
          for (int i = 0; i < jsonArrayhavingFilters.size(); i++) {
            ChartDataFilter.validateJsonElement(jsonArrayhavingFilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orderby") != null && !jsonObj.get("orderby").isJsonNull() && !jsonObj.get("orderby").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderby` to be an array in the JSON string but got `%s`", jsonObj.get("orderby").toString()));
      }
      if (jsonObj.get("post_processing") != null && !jsonObj.get("post_processing").isJsonNull()) {
        JsonArray jsonArraypostProcessing = jsonObj.getAsJsonArray("post_processing");
        if (jsonArraypostProcessing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_processing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_processing` to be an array in the JSON string but got `%s`", jsonObj.get("post_processing").toString()));
          }

          // validate the optional field `post_processing` (array)
          for (int i = 0; i < jsonArraypostProcessing.size(); i++) {
            ChartDataPostProcessingOperation.validateJsonElement(jsonArraypostProcessing.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("time_offsets") != null && !jsonObj.get("time_offsets").isJsonNull() && !jsonObj.get("time_offsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_offsets` to be an array in the JSON string but got `%s`", jsonObj.get("time_offsets").toString()));
      }
      if ((jsonObj.get("time_range") != null && !jsonObj.get("time_range").isJsonNull()) && !jsonObj.get("time_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_range").toString()));
      }
      if ((jsonObj.get("time_shift") != null && !jsonObj.get("time_shift").isJsonNull()) && !jsonObj.get("time_shift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_shift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_shift").toString()));
      }
      if ((jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull()) && !jsonObj.get("where").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `where` to be a primitive type in the JSON string but got `%s`", jsonObj.get("where").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartDataQueryObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartDataQueryObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartDataQueryObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartDataQueryObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartDataQueryObject>() {
           @Override
           public void write(JsonWriter out, ChartDataQueryObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartDataQueryObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartDataQueryObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartDataQueryObject
   * @throws IOException if the JSON string is invalid with respect to ChartDataQueryObject
   */
  public static ChartDataQueryObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartDataQueryObject.class);
  }

  /**
   * Convert an instance of ChartDataQueryObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

