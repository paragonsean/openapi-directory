/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.LogGet200Response;
import org.openapitools.client.model.LogPkGet200Response;
import org.openapitools.client.model.LogPost201Response;
import org.openapitools.client.model.LogRestApiPost;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogRestApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogRestApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogRestApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for logGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logGetCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/log/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logGetValidateBeforeCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        return logGetCall(q, _callback);

    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return LogGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public LogGet200Response logGet(GetListSchema q) throws ApiException {
        ApiResponse<LogGet200Response> localVarResp = logGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return ApiResponse&lt;LogGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogGet200Response> logGetWithHttpInfo(GetListSchema q) throws ApiException {
        okhttp3.Call localVarCall = logGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<LogGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of models
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logGetAsync(GetListSchema q, final ApiCallback<LogGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<LogGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logPkGet
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logPkGetCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/log/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logPkGetValidateBeforeCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling logPkGet(Async)");
        }

        return logPkGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return LogPkGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public LogPkGet200Response logPkGet(Integer pk, GetItemSchema q) throws ApiException {
        ApiResponse<LogPkGet200Response> localVarResp = logPkGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;LogPkGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogPkGet200Response> logPkGetWithHttpInfo(Integer pk, GetItemSchema q) throws ApiException {
        okhttp3.Call localVarCall = logPkGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<LogPkGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logPkGetAsync(Integer pk, GetItemSchema q, final ApiCallback<LogPkGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logPkGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<LogPkGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logPost
     * @param logRestApiPost Model schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item inserted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logPostCall(LogRestApiPost logRestApiPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logRestApiPost;

        // create path and map variables
        String localVarPath = "/log/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logPostValidateBeforeCall(LogRestApiPost logRestApiPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logRestApiPost' is set
        if (logRestApiPost == null) {
            throw new ApiException("Missing the required parameter 'logRestApiPost' when calling logPost(Async)");
        }

        return logPostCall(logRestApiPost, _callback);

    }

    /**
     * 
     * 
     * @param logRestApiPost Model schema (required)
     * @return LogPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item inserted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public LogPost201Response logPost(LogRestApiPost logRestApiPost) throws ApiException {
        ApiResponse<LogPost201Response> localVarResp = logPostWithHttpInfo(logRestApiPost);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param logRestApiPost Model schema (required)
     * @return ApiResponse&lt;LogPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item inserted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogPost201Response> logPostWithHttpInfo(LogRestApiPost logRestApiPost) throws ApiException {
        okhttp3.Call localVarCall = logPostValidateBeforeCall(logRestApiPost, null);
        Type localVarReturnType = new TypeToken<LogPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param logRestApiPost Model schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item inserted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logPostAsync(LogRestApiPost logRestApiPost, final ApiCallback<LogPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logPostValidateBeforeCall(logRestApiPost, _callback);
        Type localVarReturnType = new TypeToken<LogPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
