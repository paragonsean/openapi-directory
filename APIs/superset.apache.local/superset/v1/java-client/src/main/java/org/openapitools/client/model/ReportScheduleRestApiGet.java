/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Meta37;
import org.openapitools.client.model.Meta38;
import org.openapitools.client.model.Meta39;
import org.openapitools.client.model.Meta40;
import org.openapitools.client.model.Meta41;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportScheduleRestApiGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportScheduleRestApiGet {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CHART = "chart";
  @SerializedName(SERIALIZED_NAME_CHART)
  private Meta40 chart;

  public static final String SERIALIZED_NAME_CONTEXT_MARKDOWN = "context_markdown";
  @SerializedName(SERIALIZED_NAME_CONTEXT_MARKDOWN)
  private String contextMarkdown;

  public static final String SERIALIZED_NAME_CREATION_METHOD = "creation_method";
  @SerializedName(SERIALIZED_NAME_CREATION_METHOD)
  private String creationMethod;

  public static final String SERIALIZED_NAME_CRONTAB = "crontab";
  @SerializedName(SERIALIZED_NAME_CRONTAB)
  private String crontab;

  public static final String SERIALIZED_NAME_DASHBOARD = "dashboard";
  @SerializedName(SERIALIZED_NAME_DASHBOARD)
  private Meta41 dashboard;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Meta37 database;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "grace_period";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_EVAL_DTTM = "last_eval_dttm";
  @SerializedName(SERIALIZED_NAME_LAST_EVAL_DTTM)
  private OffsetDateTime lastEvalDttm;

  public static final String SERIALIZED_NAME_LAST_STATE = "last_state";
  @SerializedName(SERIALIZED_NAME_LAST_STATE)
  private String lastState;

  public static final String SERIALIZED_NAME_LAST_VALUE = "last_value";
  @SerializedName(SERIALIZED_NAME_LAST_VALUE)
  private Float lastValue;

  public static final String SERIALIZED_NAME_LAST_VALUE_ROW_JSON = "last_value_row_json";
  @SerializedName(SERIALIZED_NAME_LAST_VALUE_ROW_JSON)
  private String lastValueRowJson;

  public static final String SERIALIZED_NAME_LOG_RETENTION = "log_retention";
  @SerializedName(SERIALIZED_NAME_LOG_RETENTION)
  private Integer logRetention;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private Meta39 owners;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private Meta38 recipients;

  public static final String SERIALIZED_NAME_REPORT_FORMAT = "report_format";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT)
  private String reportFormat;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALIDATOR_CONFIG_JSON = "validator_config_json";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_CONFIG_JSON)
  private String validatorConfigJson;

  public static final String SERIALIZED_NAME_VALIDATOR_TYPE = "validator_type";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_TYPE)
  private String validatorType;

  public static final String SERIALIZED_NAME_WORKING_TIMEOUT = "working_timeout";
  @SerializedName(SERIALIZED_NAME_WORKING_TIMEOUT)
  private Integer workingTimeout;

  public ReportScheduleRestApiGet() {
  }

  public ReportScheduleRestApiGet active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ReportScheduleRestApiGet chart(Meta40 chart) {
    this.chart = chart;
    return this;
  }

  /**
   * Get chart
   * @return chart
   */
  @javax.annotation.Nullable
  public Meta40 getChart() {
    return chart;
  }

  public void setChart(Meta40 chart) {
    this.chart = chart;
  }


  public ReportScheduleRestApiGet contextMarkdown(String contextMarkdown) {
    this.contextMarkdown = contextMarkdown;
    return this;
  }

  /**
   * Get contextMarkdown
   * @return contextMarkdown
   */
  @javax.annotation.Nullable
  public String getContextMarkdown() {
    return contextMarkdown;
  }

  public void setContextMarkdown(String contextMarkdown) {
    this.contextMarkdown = contextMarkdown;
  }


  public ReportScheduleRestApiGet creationMethod(String creationMethod) {
    this.creationMethod = creationMethod;
    return this;
  }

  /**
   * Get creationMethod
   * @return creationMethod
   */
  @javax.annotation.Nullable
  public String getCreationMethod() {
    return creationMethod;
  }

  public void setCreationMethod(String creationMethod) {
    this.creationMethod = creationMethod;
  }


  public ReportScheduleRestApiGet crontab(String crontab) {
    this.crontab = crontab;
    return this;
  }

  /**
   * Get crontab
   * @return crontab
   */
  @javax.annotation.Nonnull
  public String getCrontab() {
    return crontab;
  }

  public void setCrontab(String crontab) {
    this.crontab = crontab;
  }


  public ReportScheduleRestApiGet dashboard(Meta41 dashboard) {
    this.dashboard = dashboard;
    return this;
  }

  /**
   * Get dashboard
   * @return dashboard
   */
  @javax.annotation.Nullable
  public Meta41 getDashboard() {
    return dashboard;
  }

  public void setDashboard(Meta41 dashboard) {
    this.dashboard = dashboard;
  }


  public ReportScheduleRestApiGet database(Meta37 database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public Meta37 getDatabase() {
    return database;
  }

  public void setDatabase(Meta37 database) {
    this.database = database;
  }


  public ReportScheduleRestApiGet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReportScheduleRestApiGet gracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * Get gracePeriod
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public Integer getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ReportScheduleRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ReportScheduleRestApiGet lastEvalDttm(OffsetDateTime lastEvalDttm) {
    this.lastEvalDttm = lastEvalDttm;
    return this;
  }

  /**
   * Get lastEvalDttm
   * @return lastEvalDttm
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEvalDttm() {
    return lastEvalDttm;
  }

  public void setLastEvalDttm(OffsetDateTime lastEvalDttm) {
    this.lastEvalDttm = lastEvalDttm;
  }


  public ReportScheduleRestApiGet lastState(String lastState) {
    this.lastState = lastState;
    return this;
  }

  /**
   * Get lastState
   * @return lastState
   */
  @javax.annotation.Nullable
  public String getLastState() {
    return lastState;
  }

  public void setLastState(String lastState) {
    this.lastState = lastState;
  }


  public ReportScheduleRestApiGet lastValue(Float lastValue) {
    this.lastValue = lastValue;
    return this;
  }

  /**
   * Get lastValue
   * @return lastValue
   */
  @javax.annotation.Nullable
  public Float getLastValue() {
    return lastValue;
  }

  public void setLastValue(Float lastValue) {
    this.lastValue = lastValue;
  }


  public ReportScheduleRestApiGet lastValueRowJson(String lastValueRowJson) {
    this.lastValueRowJson = lastValueRowJson;
    return this;
  }

  /**
   * Get lastValueRowJson
   * @return lastValueRowJson
   */
  @javax.annotation.Nullable
  public String getLastValueRowJson() {
    return lastValueRowJson;
  }

  public void setLastValueRowJson(String lastValueRowJson) {
    this.lastValueRowJson = lastValueRowJson;
  }


  public ReportScheduleRestApiGet logRetention(Integer logRetention) {
    this.logRetention = logRetention;
    return this;
  }

  /**
   * Get logRetention
   * @return logRetention
   */
  @javax.annotation.Nullable
  public Integer getLogRetention() {
    return logRetention;
  }

  public void setLogRetention(Integer logRetention) {
    this.logRetention = logRetention;
  }


  public ReportScheduleRestApiGet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReportScheduleRestApiGet owners(Meta39 owners) {
    this.owners = owners;
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public Meta39 getOwners() {
    return owners;
  }

  public void setOwners(Meta39 owners) {
    this.owners = owners;
  }


  public ReportScheduleRestApiGet recipients(Meta38 recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nonnull
  public Meta38 getRecipients() {
    return recipients;
  }

  public void setRecipients(Meta38 recipients) {
    this.recipients = recipients;
  }


  public ReportScheduleRestApiGet reportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
    return this;
  }

  /**
   * Get reportFormat
   * @return reportFormat
   */
  @javax.annotation.Nullable
  public String getReportFormat() {
    return reportFormat;
  }

  public void setReportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
  }


  public ReportScheduleRestApiGet sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public ReportScheduleRestApiGet timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public ReportScheduleRestApiGet type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ReportScheduleRestApiGet validatorConfigJson(String validatorConfigJson) {
    this.validatorConfigJson = validatorConfigJson;
    return this;
  }

  /**
   * Get validatorConfigJson
   * @return validatorConfigJson
   */
  @javax.annotation.Nullable
  public String getValidatorConfigJson() {
    return validatorConfigJson;
  }

  public void setValidatorConfigJson(String validatorConfigJson) {
    this.validatorConfigJson = validatorConfigJson;
  }


  public ReportScheduleRestApiGet validatorType(String validatorType) {
    this.validatorType = validatorType;
    return this;
  }

  /**
   * Get validatorType
   * @return validatorType
   */
  @javax.annotation.Nullable
  public String getValidatorType() {
    return validatorType;
  }

  public void setValidatorType(String validatorType) {
    this.validatorType = validatorType;
  }


  public ReportScheduleRestApiGet workingTimeout(Integer workingTimeout) {
    this.workingTimeout = workingTimeout;
    return this;
  }

  /**
   * Get workingTimeout
   * @return workingTimeout
   */
  @javax.annotation.Nullable
  public Integer getWorkingTimeout() {
    return workingTimeout;
  }

  public void setWorkingTimeout(Integer workingTimeout) {
    this.workingTimeout = workingTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportScheduleRestApiGet reportScheduleRestApiGet = (ReportScheduleRestApiGet) o;
    return Objects.equals(this.active, reportScheduleRestApiGet.active) &&
        Objects.equals(this.chart, reportScheduleRestApiGet.chart) &&
        Objects.equals(this.contextMarkdown, reportScheduleRestApiGet.contextMarkdown) &&
        Objects.equals(this.creationMethod, reportScheduleRestApiGet.creationMethod) &&
        Objects.equals(this.crontab, reportScheduleRestApiGet.crontab) &&
        Objects.equals(this.dashboard, reportScheduleRestApiGet.dashboard) &&
        Objects.equals(this.database, reportScheduleRestApiGet.database) &&
        Objects.equals(this.description, reportScheduleRestApiGet.description) &&
        Objects.equals(this.gracePeriod, reportScheduleRestApiGet.gracePeriod) &&
        Objects.equals(this.id, reportScheduleRestApiGet.id) &&
        Objects.equals(this.lastEvalDttm, reportScheduleRestApiGet.lastEvalDttm) &&
        Objects.equals(this.lastState, reportScheduleRestApiGet.lastState) &&
        Objects.equals(this.lastValue, reportScheduleRestApiGet.lastValue) &&
        Objects.equals(this.lastValueRowJson, reportScheduleRestApiGet.lastValueRowJson) &&
        Objects.equals(this.logRetention, reportScheduleRestApiGet.logRetention) &&
        Objects.equals(this.name, reportScheduleRestApiGet.name) &&
        Objects.equals(this.owners, reportScheduleRestApiGet.owners) &&
        Objects.equals(this.recipients, reportScheduleRestApiGet.recipients) &&
        Objects.equals(this.reportFormat, reportScheduleRestApiGet.reportFormat) &&
        Objects.equals(this.sql, reportScheduleRestApiGet.sql) &&
        Objects.equals(this.timezone, reportScheduleRestApiGet.timezone) &&
        Objects.equals(this.type, reportScheduleRestApiGet.type) &&
        Objects.equals(this.validatorConfigJson, reportScheduleRestApiGet.validatorConfigJson) &&
        Objects.equals(this.validatorType, reportScheduleRestApiGet.validatorType) &&
        Objects.equals(this.workingTimeout, reportScheduleRestApiGet.workingTimeout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, chart, contextMarkdown, creationMethod, crontab, dashboard, database, description, gracePeriod, id, lastEvalDttm, lastState, lastValue, lastValueRowJson, logRetention, name, owners, recipients, reportFormat, sql, timezone, type, validatorConfigJson, validatorType, workingTimeout);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportScheduleRestApiGet {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("    contextMarkdown: ").append(toIndentedString(contextMarkdown)).append("\n");
    sb.append("    creationMethod: ").append(toIndentedString(creationMethod)).append("\n");
    sb.append("    crontab: ").append(toIndentedString(crontab)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastEvalDttm: ").append(toIndentedString(lastEvalDttm)).append("\n");
    sb.append("    lastState: ").append(toIndentedString(lastState)).append("\n");
    sb.append("    lastValue: ").append(toIndentedString(lastValue)).append("\n");
    sb.append("    lastValueRowJson: ").append(toIndentedString(lastValueRowJson)).append("\n");
    sb.append("    logRetention: ").append(toIndentedString(logRetention)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    reportFormat: ").append(toIndentedString(reportFormat)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validatorConfigJson: ").append(toIndentedString(validatorConfigJson)).append("\n");
    sb.append("    validatorType: ").append(toIndentedString(validatorType)).append("\n");
    sb.append("    workingTimeout: ").append(toIndentedString(workingTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("chart");
    openapiFields.add("context_markdown");
    openapiFields.add("creation_method");
    openapiFields.add("crontab");
    openapiFields.add("dashboard");
    openapiFields.add("database");
    openapiFields.add("description");
    openapiFields.add("grace_period");
    openapiFields.add("id");
    openapiFields.add("last_eval_dttm");
    openapiFields.add("last_state");
    openapiFields.add("last_value");
    openapiFields.add("last_value_row_json");
    openapiFields.add("log_retention");
    openapiFields.add("name");
    openapiFields.add("owners");
    openapiFields.add("recipients");
    openapiFields.add("report_format");
    openapiFields.add("sql");
    openapiFields.add("timezone");
    openapiFields.add("type");
    openapiFields.add("validator_config_json");
    openapiFields.add("validator_type");
    openapiFields.add("working_timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("crontab");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportScheduleRestApiGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportScheduleRestApiGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportScheduleRestApiGet is not found in the empty JSON string", ReportScheduleRestApiGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportScheduleRestApiGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportScheduleRestApiGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportScheduleRestApiGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chart`
      if (jsonObj.get("chart") != null && !jsonObj.get("chart").isJsonNull()) {
        Meta40.validateJsonElement(jsonObj.get("chart"));
      }
      if ((jsonObj.get("context_markdown") != null && !jsonObj.get("context_markdown").isJsonNull()) && !jsonObj.get("context_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context_markdown").toString()));
      }
      if ((jsonObj.get("creation_method") != null && !jsonObj.get("creation_method").isJsonNull()) && !jsonObj.get("creation_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_method").toString()));
      }
      if (!jsonObj.get("crontab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crontab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crontab").toString()));
      }
      // validate the optional field `dashboard`
      if (jsonObj.get("dashboard") != null && !jsonObj.get("dashboard").isJsonNull()) {
        Meta41.validateJsonElement(jsonObj.get("dashboard"));
      }
      // validate the optional field `database`
      if (jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) {
        Meta37.validateJsonElement(jsonObj.get("database"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("last_state") != null && !jsonObj.get("last_state").isJsonNull()) && !jsonObj.get("last_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_state").toString()));
      }
      if ((jsonObj.get("last_value_row_json") != null && !jsonObj.get("last_value_row_json").isJsonNull()) && !jsonObj.get("last_value_row_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_value_row_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_value_row_json").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `owners`
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        Meta39.validateJsonElement(jsonObj.get("owners"));
      }
      // validate the required field `recipients`
      Meta38.validateJsonElement(jsonObj.get("recipients"));
      if ((jsonObj.get("report_format") != null && !jsonObj.get("report_format").isJsonNull()) && !jsonObj.get("report_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_format").toString()));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("validator_config_json") != null && !jsonObj.get("validator_config_json").isJsonNull()) && !jsonObj.get("validator_config_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator_config_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator_config_json").toString()));
      }
      if ((jsonObj.get("validator_type") != null && !jsonObj.get("validator_type").isJsonNull()) && !jsonObj.get("validator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportScheduleRestApiGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportScheduleRestApiGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportScheduleRestApiGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportScheduleRestApiGet.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportScheduleRestApiGet>() {
           @Override
           public void write(JsonWriter out, ReportScheduleRestApiGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportScheduleRestApiGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportScheduleRestApiGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportScheduleRestApiGet
   * @throws IOException if the JSON string is invalid with respect to ReportScheduleRestApiGet
   */
  public static ReportScheduleRestApiGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportScheduleRestApiGet.class);
  }

  /**
   * Convert an instance of ReportScheduleRestApiGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

