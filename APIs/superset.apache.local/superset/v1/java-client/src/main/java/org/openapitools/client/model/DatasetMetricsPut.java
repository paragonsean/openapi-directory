/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatasetMetricsPut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetMetricsPut {
  public static final String SERIALIZED_NAME_D3FORMAT = "d3format";
  @SerializedName(SERIALIZED_NAME_D3FORMAT)
  private String d3format;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METRIC_NAME = "metric_name";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_TYPE = "metric_type";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private String metricType;

  public static final String SERIALIZED_NAME_WARNING_TEXT = "warning_text";
  @SerializedName(SERIALIZED_NAME_WARNING_TEXT)
  private String warningText;

  public DatasetMetricsPut() {
  }

  public DatasetMetricsPut d3format(String d3format) {
    this.d3format = d3format;
    return this;
  }

  /**
   * Get d3format
   * @return d3format
   */
  @javax.annotation.Nullable
  public String getD3format() {
    return d3format;
  }

  public void setD3format(String d3format) {
    this.d3format = d3format;
  }


  public DatasetMetricsPut description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DatasetMetricsPut expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Get expression
   * @return expression
   */
  @javax.annotation.Nonnull
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public DatasetMetricsPut id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DatasetMetricsPut metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public DatasetMetricsPut metricType(String metricType) {
    this.metricType = metricType;
    return this;
  }

  /**
   * Get metricType
   * @return metricType
   */
  @javax.annotation.Nullable
  public String getMetricType() {
    return metricType;
  }

  public void setMetricType(String metricType) {
    this.metricType = metricType;
  }


  public DatasetMetricsPut warningText(String warningText) {
    this.warningText = warningText;
    return this;
  }

  /**
   * Get warningText
   * @return warningText
   */
  @javax.annotation.Nullable
  public String getWarningText() {
    return warningText;
  }

  public void setWarningText(String warningText) {
    this.warningText = warningText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetMetricsPut datasetMetricsPut = (DatasetMetricsPut) o;
    return Objects.equals(this.d3format, datasetMetricsPut.d3format) &&
        Objects.equals(this.description, datasetMetricsPut.description) &&
        Objects.equals(this.expression, datasetMetricsPut.expression) &&
        Objects.equals(this.id, datasetMetricsPut.id) &&
        Objects.equals(this.metricName, datasetMetricsPut.metricName) &&
        Objects.equals(this.metricType, datasetMetricsPut.metricType) &&
        Objects.equals(this.warningText, datasetMetricsPut.warningText);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(d3format, description, expression, id, metricName, metricType, warningText);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetMetricsPut {\n");
    sb.append("    d3format: ").append(toIndentedString(d3format)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    warningText: ").append(toIndentedString(warningText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("d3format");
    openapiFields.add("description");
    openapiFields.add("expression");
    openapiFields.add("id");
    openapiFields.add("metric_name");
    openapiFields.add("metric_type");
    openapiFields.add("warning_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expression");
    openapiRequiredFields.add("metric_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetMetricsPut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetMetricsPut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetMetricsPut is not found in the empty JSON string", DatasetMetricsPut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetMetricsPut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetMetricsPut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatasetMetricsPut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("d3format") != null && !jsonObj.get("d3format").isJsonNull()) && !jsonObj.get("d3format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `d3format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("d3format").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if (!jsonObj.get("metric_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric_name").toString()));
      }
      if ((jsonObj.get("metric_type") != null && !jsonObj.get("metric_type").isJsonNull()) && !jsonObj.get("metric_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric_type").toString()));
      }
      if ((jsonObj.get("warning_text") != null && !jsonObj.get("warning_text").isJsonNull()) && !jsonObj.get("warning_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetMetricsPut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetMetricsPut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetMetricsPut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetMetricsPut.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetMetricsPut>() {
           @Override
           public void write(JsonWriter out, DatasetMetricsPut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetMetricsPut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetMetricsPut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetMetricsPut
   * @throws IOException if the JSON string is invalid with respect to DatasetMetricsPut
   */
  public static DatasetMetricsPut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetMetricsPut.class);
  }

  /**
   * Convert an instance of DatasetMetricsPut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

