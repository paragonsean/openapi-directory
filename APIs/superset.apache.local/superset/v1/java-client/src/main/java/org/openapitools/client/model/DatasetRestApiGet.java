/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Meta22;
import org.openapitools.client.model.Meta23;
import org.openapitools.client.model.Meta24;
import org.openapitools.client.model.Meta25;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatasetRestApiGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetRestApiGet {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Meta22 columns;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Meta23 database;

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE = "datasource_type";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE)
  private Object datasourceType = null;

  public static final String SERIALIZED_NAME_DEFAULT_ENDPOINT = "default_endpoint";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENDPOINT)
  private String defaultEndpoint;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_FETCH_VALUES_PREDICATE = "fetch_values_predicate";
  @SerializedName(SERIALIZED_NAME_FETCH_VALUES_PREDICATE)
  private String fetchValuesPredicate;

  public static final String SERIALIZED_NAME_FILTER_SELECT_ENABLED = "filter_select_enabled";
  @SerializedName(SERIALIZED_NAME_FILTER_SELECT_ENABLED)
  private Boolean filterSelectEnabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_SQLLAB_VIEW = "is_sqllab_view";
  @SerializedName(SERIALIZED_NAME_IS_SQLLAB_VIEW)
  private Boolean isSqllabView;

  public static final String SERIALIZED_NAME_MAIN_DTTM_COL = "main_dttm_col";
  @SerializedName(SERIALIZED_NAME_MAIN_DTTM_COL)
  private String mainDttmCol;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Meta25 metrics;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private Meta24 owners;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TEMPLATE_PARAMS = "template_params";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PARAMS)
  private String templateParams;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private Object url = null;

  public DatasetRestApiGet() {
  }

  public DatasetRestApiGet(
     Object datasourceType, 
     Object url
  ) {
    this();
    this.datasourceType = datasourceType;
    this.url = url;
  }

  public DatasetRestApiGet cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public DatasetRestApiGet columns(Meta22 columns) {
    this.columns = columns;
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nonnull
  public Meta22 getColumns() {
    return columns;
  }

  public void setColumns(Meta22 columns) {
    this.columns = columns;
  }


  public DatasetRestApiGet database(Meta23 database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public Meta23 getDatabase() {
    return database;
  }

  public void setDatabase(Meta23 database) {
    this.database = database;
  }


  /**
   * Get datasourceType
   * @return datasourceType
   */
  @javax.annotation.Nullable
  public Object getDatasourceType() {
    return datasourceType;
  }



  public DatasetRestApiGet defaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
    return this;
  }

  /**
   * Get defaultEndpoint
   * @return defaultEndpoint
   */
  @javax.annotation.Nullable
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

  public void setDefaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
  }


  public DatasetRestApiGet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DatasetRestApiGet extra(String extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  public String getExtra() {
    return extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }


  public DatasetRestApiGet fetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
    return this;
  }

  /**
   * Get fetchValuesPredicate
   * @return fetchValuesPredicate
   */
  @javax.annotation.Nullable
  public String getFetchValuesPredicate() {
    return fetchValuesPredicate;
  }

  public void setFetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
  }


  public DatasetRestApiGet filterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
    return this;
  }

  /**
   * Get filterSelectEnabled
   * @return filterSelectEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFilterSelectEnabled() {
    return filterSelectEnabled;
  }

  public void setFilterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
  }


  public DatasetRestApiGet id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DatasetRestApiGet isSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
    return this;
  }

  /**
   * Get isSqllabView
   * @return isSqllabView
   */
  @javax.annotation.Nullable
  public Boolean getIsSqllabView() {
    return isSqllabView;
  }

  public void setIsSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
  }


  public DatasetRestApiGet mainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
    return this;
  }

  /**
   * Get mainDttmCol
   * @return mainDttmCol
   */
  @javax.annotation.Nullable
  public String getMainDttmCol() {
    return mainDttmCol;
  }

  public void setMainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
  }


  public DatasetRestApiGet metrics(Meta25 metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nonnull
  public Meta25 getMetrics() {
    return metrics;
  }

  public void setMetrics(Meta25 metrics) {
    this.metrics = metrics;
  }


  public DatasetRestApiGet offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DatasetRestApiGet owners(Meta24 owners) {
    this.owners = owners;
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public Meta24 getOwners() {
    return owners;
  }

  public void setOwners(Meta24 owners) {
    this.owners = owners;
  }


  public DatasetRestApiGet schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DatasetRestApiGet sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public DatasetRestApiGet tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public DatasetRestApiGet templateParams(String templateParams) {
    this.templateParams = templateParams;
    return this;
  }

  /**
   * Get templateParams
   * @return templateParams
   */
  @javax.annotation.Nullable
  public String getTemplateParams() {
    return templateParams;
  }

  public void setTemplateParams(String templateParams) {
    this.templateParams = templateParams;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public Object getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetRestApiGet datasetRestApiGet = (DatasetRestApiGet) o;
    return Objects.equals(this.cacheTimeout, datasetRestApiGet.cacheTimeout) &&
        Objects.equals(this.columns, datasetRestApiGet.columns) &&
        Objects.equals(this.database, datasetRestApiGet.database) &&
        Objects.equals(this.datasourceType, datasetRestApiGet.datasourceType) &&
        Objects.equals(this.defaultEndpoint, datasetRestApiGet.defaultEndpoint) &&
        Objects.equals(this.description, datasetRestApiGet.description) &&
        Objects.equals(this.extra, datasetRestApiGet.extra) &&
        Objects.equals(this.fetchValuesPredicate, datasetRestApiGet.fetchValuesPredicate) &&
        Objects.equals(this.filterSelectEnabled, datasetRestApiGet.filterSelectEnabled) &&
        Objects.equals(this.id, datasetRestApiGet.id) &&
        Objects.equals(this.isSqllabView, datasetRestApiGet.isSqllabView) &&
        Objects.equals(this.mainDttmCol, datasetRestApiGet.mainDttmCol) &&
        Objects.equals(this.metrics, datasetRestApiGet.metrics) &&
        Objects.equals(this.offset, datasetRestApiGet.offset) &&
        Objects.equals(this.owners, datasetRestApiGet.owners) &&
        Objects.equals(this.schema, datasetRestApiGet.schema) &&
        Objects.equals(this.sql, datasetRestApiGet.sql) &&
        Objects.equals(this.tableName, datasetRestApiGet.tableName) &&
        Objects.equals(this.templateParams, datasetRestApiGet.templateParams) &&
        Objects.equals(this.url, datasetRestApiGet.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, columns, database, datasourceType, defaultEndpoint, description, extra, fetchValuesPredicate, filterSelectEnabled, id, isSqllabView, mainDttmCol, metrics, offset, owners, schema, sql, tableName, templateParams, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetRestApiGet {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    fetchValuesPredicate: ").append(toIndentedString(fetchValuesPredicate)).append("\n");
    sb.append("    filterSelectEnabled: ").append(toIndentedString(filterSelectEnabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSqllabView: ").append(toIndentedString(isSqllabView)).append("\n");
    sb.append("    mainDttmCol: ").append(toIndentedString(mainDttmCol)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    templateParams: ").append(toIndentedString(templateParams)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("columns");
    openapiFields.add("database");
    openapiFields.add("datasource_type");
    openapiFields.add("default_endpoint");
    openapiFields.add("description");
    openapiFields.add("extra");
    openapiFields.add("fetch_values_predicate");
    openapiFields.add("filter_select_enabled");
    openapiFields.add("id");
    openapiFields.add("is_sqllab_view");
    openapiFields.add("main_dttm_col");
    openapiFields.add("metrics");
    openapiFields.add("offset");
    openapiFields.add("owners");
    openapiFields.add("schema");
    openapiFields.add("sql");
    openapiFields.add("table_name");
    openapiFields.add("template_params");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("database");
    openapiRequiredFields.add("metrics");
    openapiRequiredFields.add("table_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetRestApiGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetRestApiGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetRestApiGet is not found in the empty JSON string", DatasetRestApiGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetRestApiGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetRestApiGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatasetRestApiGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `columns`
      Meta22.validateJsonElement(jsonObj.get("columns"));
      // validate the required field `database`
      Meta23.validateJsonElement(jsonObj.get("database"));
      if ((jsonObj.get("default_endpoint") != null && !jsonObj.get("default_endpoint").isJsonNull()) && !jsonObj.get("default_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_endpoint").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("extra") != null && !jsonObj.get("extra").isJsonNull()) && !jsonObj.get("extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra").toString()));
      }
      if ((jsonObj.get("fetch_values_predicate") != null && !jsonObj.get("fetch_values_predicate").isJsonNull()) && !jsonObj.get("fetch_values_predicate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetch_values_predicate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetch_values_predicate").toString()));
      }
      if ((jsonObj.get("main_dttm_col") != null && !jsonObj.get("main_dttm_col").isJsonNull()) && !jsonObj.get("main_dttm_col").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_dttm_col` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_dttm_col").toString()));
      }
      // validate the required field `metrics`
      Meta25.validateJsonElement(jsonObj.get("metrics"));
      // validate the optional field `owners`
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        Meta24.validateJsonElement(jsonObj.get("owners"));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if (!jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      if ((jsonObj.get("template_params") != null && !jsonObj.get("template_params").isJsonNull()) && !jsonObj.get("template_params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_params").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetRestApiGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetRestApiGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetRestApiGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetRestApiGet.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetRestApiGet>() {
           @Override
           public void write(JsonWriter out, DatasetRestApiGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetRestApiGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetRestApiGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetRestApiGet
   * @throws IOException if the JSON string is invalid with respect to DatasetRestApiGet
   */
  public static DatasetRestApiGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetRestApiGet.class);
  }

  /**
   * Convert an instance of DatasetRestApiGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

