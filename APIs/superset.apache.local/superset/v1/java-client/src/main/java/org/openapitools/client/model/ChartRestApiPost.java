/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartRestApiPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartRestApiPost {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private List<Integer> dashboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "datasource_id";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private Integer datasourceId;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "datasource_name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private String datasourceName;

  /**
   * The type of dataset/datasource identified on &#x60;datasource_id&#x60;.
   */
  @JsonAdapter(DatasourceTypeEnum.Adapter.class)
  public enum DatasourceTypeEnum {
    DRUID("druid"),
    
    TABLE("table"),
    
    VIEW("view");

    private String value;

    DatasourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatasourceTypeEnum fromValue(String value) {
      for (DatasourceTypeEnum b : DatasourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatasourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatasourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatasourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatasourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE = "datasource_type";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE)
  private DatasourceTypeEnum datasourceType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<Integer> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params;

  public static final String SERIALIZED_NAME_QUERY_CONTEXT = "query_context";
  @SerializedName(SERIALIZED_NAME_QUERY_CONTEXT)
  private String queryContext;

  public static final String SERIALIZED_NAME_SLICE_NAME = "slice_name";
  @SerializedName(SERIALIZED_NAME_SLICE_NAME)
  private String sliceName;

  public static final String SERIALIZED_NAME_VIZ_TYPE = "viz_type";
  @SerializedName(SERIALIZED_NAME_VIZ_TYPE)
  private String vizType;

  public ChartRestApiPost() {
  }

  public ChartRestApiPost cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public ChartRestApiPost dashboards(List<Integer> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public ChartRestApiPost addDashboardsItem(Integer dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

  /**
   * Get dashboards
   * @return dashboards
   */
  @javax.annotation.Nullable
  public List<Integer> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<Integer> dashboards) {
    this.dashboards = dashboards;
  }


  public ChartRestApiPost datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

  /**
   * The id of the dataset/datasource this new chart will use. A complete datasource identification needs &#x60;datasouce_id&#x60; and &#x60;datasource_type&#x60;.
   * @return datasourceId
   */
  @javax.annotation.Nonnull
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }


  public ChartRestApiPost datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

  /**
   * The datasource name.
   * @return datasourceName
   */
  @javax.annotation.Nullable
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }


  public ChartRestApiPost datasourceType(DatasourceTypeEnum datasourceType) {
    this.datasourceType = datasourceType;
    return this;
  }

  /**
   * The type of dataset/datasource identified on &#x60;datasource_id&#x60;.
   * @return datasourceType
   */
  @javax.annotation.Nonnull
  public DatasourceTypeEnum getDatasourceType() {
    return datasourceType;
  }

  public void setDatasourceType(DatasourceTypeEnum datasourceType) {
    this.datasourceType = datasourceType;
  }


  public ChartRestApiPost description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the chart propose.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ChartRestApiPost owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public ChartRestApiPost addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }


  public ChartRestApiPost params(String params) {
    this.params = params;
    return this;
  }

  /**
   * Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.
   * @return params
   */
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }


  public ChartRestApiPost queryContext(String queryContext) {
    this.queryContext = queryContext;
    return this;
  }

  /**
   * The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.
   * @return queryContext
   */
  @javax.annotation.Nullable
  public String getQueryContext() {
    return queryContext;
  }

  public void setQueryContext(String queryContext) {
    this.queryContext = queryContext;
  }


  public ChartRestApiPost sliceName(String sliceName) {
    this.sliceName = sliceName;
    return this;
  }

  /**
   * The name of the chart.
   * @return sliceName
   */
  @javax.annotation.Nonnull
  public String getSliceName() {
    return sliceName;
  }

  public void setSliceName(String sliceName) {
    this.sliceName = sliceName;
  }


  public ChartRestApiPost vizType(String vizType) {
    this.vizType = vizType;
    return this;
  }

  /**
   * The type of chart visualization used.
   * @return vizType
   */
  @javax.annotation.Nullable
  public String getVizType() {
    return vizType;
  }

  public void setVizType(String vizType) {
    this.vizType = vizType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartRestApiPost chartRestApiPost = (ChartRestApiPost) o;
    return Objects.equals(this.cacheTimeout, chartRestApiPost.cacheTimeout) &&
        Objects.equals(this.dashboards, chartRestApiPost.dashboards) &&
        Objects.equals(this.datasourceId, chartRestApiPost.datasourceId) &&
        Objects.equals(this.datasourceName, chartRestApiPost.datasourceName) &&
        Objects.equals(this.datasourceType, chartRestApiPost.datasourceType) &&
        Objects.equals(this.description, chartRestApiPost.description) &&
        Objects.equals(this.owners, chartRestApiPost.owners) &&
        Objects.equals(this.params, chartRestApiPost.params) &&
        Objects.equals(this.queryContext, chartRestApiPost.queryContext) &&
        Objects.equals(this.sliceName, chartRestApiPost.sliceName) &&
        Objects.equals(this.vizType, chartRestApiPost.vizType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, dashboards, datasourceId, datasourceName, datasourceType, description, owners, params, queryContext, sliceName, vizType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartRestApiPost {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    queryContext: ").append(toIndentedString(queryContext)).append("\n");
    sb.append("    sliceName: ").append(toIndentedString(sliceName)).append("\n");
    sb.append("    vizType: ").append(toIndentedString(vizType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("dashboards");
    openapiFields.add("datasource_id");
    openapiFields.add("datasource_name");
    openapiFields.add("datasource_type");
    openapiFields.add("description");
    openapiFields.add("owners");
    openapiFields.add("params");
    openapiFields.add("query_context");
    openapiFields.add("slice_name");
    openapiFields.add("viz_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("datasource_id");
    openapiRequiredFields.add("datasource_type");
    openapiRequiredFields.add("slice_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartRestApiPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartRestApiPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartRestApiPost is not found in the empty JSON string", ChartRestApiPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartRestApiPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartRestApiPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChartRestApiPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dashboards") != null && !jsonObj.get("dashboards").isJsonNull() && !jsonObj.get("dashboards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboards` to be an array in the JSON string but got `%s`", jsonObj.get("dashboards").toString()));
      }
      if ((jsonObj.get("datasource_name") != null && !jsonObj.get("datasource_name").isJsonNull()) && !jsonObj.get("datasource_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_name").toString()));
      }
      if (!jsonObj.get("datasource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_type").toString()));
      }
      // validate the required field `datasource_type`
      DatasourceTypeEnum.validateJsonElement(jsonObj.get("datasource_type"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull() && !jsonObj.get("owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      if ((jsonObj.get("query_context") != null && !jsonObj.get("query_context").isJsonNull()) && !jsonObj.get("query_context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_context").toString()));
      }
      if (!jsonObj.get("slice_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_name").toString()));
      }
      if ((jsonObj.get("viz_type") != null && !jsonObj.get("viz_type").isJsonNull()) && !jsonObj.get("viz_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viz_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viz_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartRestApiPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartRestApiPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartRestApiPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartRestApiPost.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartRestApiPost>() {
           @Override
           public void write(JsonWriter out, ChartRestApiPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartRestApiPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartRestApiPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartRestApiPost
   * @throws IOException if the JSON string is invalid with respect to ChartRestApiPost
   */
  public static ChartRestApiPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartRestApiPost.class);
  }

  /**
   * Convert an instance of ChartRestApiPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

