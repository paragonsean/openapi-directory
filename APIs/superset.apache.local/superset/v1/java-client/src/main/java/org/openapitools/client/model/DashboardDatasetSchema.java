/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Database;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DashboardDatasetSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DashboardDatasetSchema {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_COLUMN_FORMATS = "column_formats";
  @SerializedName(SERIALIZED_NAME_COLUMN_FORMATS)
  private Object columnFormats;

  public static final String SERIALIZED_NAME_COLUMN_TYPES = "column_types";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPES)
  private List<Integer> columnTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<Object> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Database database;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "datasource_name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private String datasourceName;

  public static final String SERIALIZED_NAME_DEFAULT_ENDPOINT = "default_endpoint";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENDPOINT)
  private String defaultEndpoint;

  public static final String SERIALIZED_NAME_EDIT_URL = "edit_url";
  @SerializedName(SERIALIZED_NAME_EDIT_URL)
  private String editUrl;

  public static final String SERIALIZED_NAME_FETCH_VALUES_PREDICATE = "fetch_values_predicate";
  @SerializedName(SERIALIZED_NAME_FETCH_VALUES_PREDICATE)
  private String fetchValuesPredicate;

  public static final String SERIALIZED_NAME_FILTER_SELECT = "filter_select";
  @SerializedName(SERIALIZED_NAME_FILTER_SELECT)
  private Boolean filterSelect;

  public static final String SERIALIZED_NAME_FILTER_SELECT_ENABLED = "filter_select_enabled";
  @SerializedName(SERIALIZED_NAME_FILTER_SELECT_ENABLED)
  private Boolean filterSelectEnabled;

  public static final String SERIALIZED_NAME_GRANULARITY_SQLA = "granularity_sqla";
  @SerializedName(SERIALIZED_NAME_GRANULARITY_SQLA)
  private List<List<String>> granularitySqla = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_CHECK_MESSAGE = "health_check_message";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_MESSAGE)
  private String healthCheckMessage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_SQLLAB_VIEW = "is_sqllab_view";
  @SerializedName(SERIALIZED_NAME_IS_SQLLAB_VIEW)
  private Boolean isSqllabView;

  public static final String SERIALIZED_NAME_MAIN_DTTM_COL = "main_dttm_col";
  @SerializedName(SERIALIZED_NAME_MAIN_DTTM_COL)
  private String mainDttmCol;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Object> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_ORDER_BY_CHOICES = "order_by_choices";
  @SerializedName(SERIALIZED_NAME_ORDER_BY_CHOICES)
  private List<List<String>> orderByChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<Integer> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params;

  public static final String SERIALIZED_NAME_PERM = "perm";
  @SerializedName(SERIALIZED_NAME_PERM)
  private String perm;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_SELECT_STAR = "select_star";
  @SerializedName(SERIALIZED_NAME_SELECT_STAR)
  private String selectStar;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TEMPLATE_PARAMS = "template_params";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PARAMS)
  private String templateParams;

  public static final String SERIALIZED_NAME_TIME_GRAIN_SQLA = "time_grain_sqla";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN_SQLA)
  private List<List<String>> timeGrainSqla = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_VERBOSE_MAP = "verbose_map";
  @SerializedName(SERIALIZED_NAME_VERBOSE_MAP)
  private Map<String, String> verboseMap = new HashMap<>();

  public DashboardDatasetSchema() {
  }

  public DashboardDatasetSchema cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public DashboardDatasetSchema columnFormats(Object columnFormats) {
    this.columnFormats = columnFormats;
    return this;
  }

  /**
   * Get columnFormats
   * @return columnFormats
   */
  @javax.annotation.Nullable
  public Object getColumnFormats() {
    return columnFormats;
  }

  public void setColumnFormats(Object columnFormats) {
    this.columnFormats = columnFormats;
  }


  public DashboardDatasetSchema columnTypes(List<Integer> columnTypes) {
    this.columnTypes = columnTypes;
    return this;
  }

  public DashboardDatasetSchema addColumnTypesItem(Integer columnTypesItem) {
    if (this.columnTypes == null) {
      this.columnTypes = new ArrayList<>();
    }
    this.columnTypes.add(columnTypesItem);
    return this;
  }

  /**
   * Get columnTypes
   * @return columnTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getColumnTypes() {
    return columnTypes;
  }

  public void setColumnTypes(List<Integer> columnTypes) {
    this.columnTypes = columnTypes;
  }


  public DashboardDatasetSchema columns(List<Object> columns) {
    this.columns = columns;
    return this;
  }

  public DashboardDatasetSchema addColumnsItem(Object columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List<Object> getColumns() {
    return columns;
  }

  public void setColumns(List<Object> columns) {
    this.columns = columns;
  }


  public DashboardDatasetSchema database(Database database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public Database getDatabase() {
    return database;
  }

  public void setDatabase(Database database) {
    this.database = database;
  }


  public DashboardDatasetSchema datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

  /**
   * Get datasourceName
   * @return datasourceName
   */
  @javax.annotation.Nullable
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }


  public DashboardDatasetSchema defaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
    return this;
  }

  /**
   * Get defaultEndpoint
   * @return defaultEndpoint
   */
  @javax.annotation.Nullable
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

  public void setDefaultEndpoint(String defaultEndpoint) {
    this.defaultEndpoint = defaultEndpoint;
  }


  public DashboardDatasetSchema editUrl(String editUrl) {
    this.editUrl = editUrl;
    return this;
  }

  /**
   * Get editUrl
   * @return editUrl
   */
  @javax.annotation.Nullable
  public String getEditUrl() {
    return editUrl;
  }

  public void setEditUrl(String editUrl) {
    this.editUrl = editUrl;
  }


  public DashboardDatasetSchema fetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
    return this;
  }

  /**
   * Get fetchValuesPredicate
   * @return fetchValuesPredicate
   */
  @javax.annotation.Nullable
  public String getFetchValuesPredicate() {
    return fetchValuesPredicate;
  }

  public void setFetchValuesPredicate(String fetchValuesPredicate) {
    this.fetchValuesPredicate = fetchValuesPredicate;
  }


  public DashboardDatasetSchema filterSelect(Boolean filterSelect) {
    this.filterSelect = filterSelect;
    return this;
  }

  /**
   * Get filterSelect
   * @return filterSelect
   */
  @javax.annotation.Nullable
  public Boolean getFilterSelect() {
    return filterSelect;
  }

  public void setFilterSelect(Boolean filterSelect) {
    this.filterSelect = filterSelect;
  }


  public DashboardDatasetSchema filterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
    return this;
  }

  /**
   * Get filterSelectEnabled
   * @return filterSelectEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFilterSelectEnabled() {
    return filterSelectEnabled;
  }

  public void setFilterSelectEnabled(Boolean filterSelectEnabled) {
    this.filterSelectEnabled = filterSelectEnabled;
  }


  public DashboardDatasetSchema granularitySqla(List<List<String>> granularitySqla) {
    this.granularitySqla = granularitySqla;
    return this;
  }

  public DashboardDatasetSchema addGranularitySqlaItem(List<String> granularitySqlaItem) {
    if (this.granularitySqla == null) {
      this.granularitySqla = new ArrayList<>();
    }
    this.granularitySqla.add(granularitySqlaItem);
    return this;
  }

  /**
   * Get granularitySqla
   * @return granularitySqla
   */
  @javax.annotation.Nullable
  public List<List<String>> getGranularitySqla() {
    return granularitySqla;
  }

  public void setGranularitySqla(List<List<String>> granularitySqla) {
    this.granularitySqla = granularitySqla;
  }


  public DashboardDatasetSchema healthCheckMessage(String healthCheckMessage) {
    this.healthCheckMessage = healthCheckMessage;
    return this;
  }

  /**
   * Get healthCheckMessage
   * @return healthCheckMessage
   */
  @javax.annotation.Nullable
  public String getHealthCheckMessage() {
    return healthCheckMessage;
  }

  public void setHealthCheckMessage(String healthCheckMessage) {
    this.healthCheckMessage = healthCheckMessage;
  }


  public DashboardDatasetSchema id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DashboardDatasetSchema isSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
    return this;
  }

  /**
   * Get isSqllabView
   * @return isSqllabView
   */
  @javax.annotation.Nullable
  public Boolean getIsSqllabView() {
    return isSqllabView;
  }

  public void setIsSqllabView(Boolean isSqllabView) {
    this.isSqllabView = isSqllabView;
  }


  public DashboardDatasetSchema mainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
    return this;
  }

  /**
   * Get mainDttmCol
   * @return mainDttmCol
   */
  @javax.annotation.Nullable
  public String getMainDttmCol() {
    return mainDttmCol;
  }

  public void setMainDttmCol(String mainDttmCol) {
    this.mainDttmCol = mainDttmCol;
  }


  public DashboardDatasetSchema metrics(List<Object> metrics) {
    this.metrics = metrics;
    return this;
  }

  public DashboardDatasetSchema addMetricsItem(Object metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Object> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Object> metrics) {
    this.metrics = metrics;
  }


  public DashboardDatasetSchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DashboardDatasetSchema offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DashboardDatasetSchema orderByChoices(List<List<String>> orderByChoices) {
    this.orderByChoices = orderByChoices;
    return this;
  }

  public DashboardDatasetSchema addOrderByChoicesItem(List<String> orderByChoicesItem) {
    if (this.orderByChoices == null) {
      this.orderByChoices = new ArrayList<>();
    }
    this.orderByChoices.add(orderByChoicesItem);
    return this;
  }

  /**
   * Get orderByChoices
   * @return orderByChoices
   */
  @javax.annotation.Nullable
  public List<List<String>> getOrderByChoices() {
    return orderByChoices;
  }

  public void setOrderByChoices(List<List<String>> orderByChoices) {
    this.orderByChoices = orderByChoices;
  }


  public DashboardDatasetSchema owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public DashboardDatasetSchema addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }


  public DashboardDatasetSchema params(String params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   */
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }


  public DashboardDatasetSchema perm(String perm) {
    this.perm = perm;
    return this;
  }

  /**
   * Get perm
   * @return perm
   */
  @javax.annotation.Nullable
  public String getPerm() {
    return perm;
  }

  public void setPerm(String perm) {
    this.perm = perm;
  }


  public DashboardDatasetSchema schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DashboardDatasetSchema selectStar(String selectStar) {
    this.selectStar = selectStar;
    return this;
  }

  /**
   * Get selectStar
   * @return selectStar
   */
  @javax.annotation.Nullable
  public String getSelectStar() {
    return selectStar;
  }

  public void setSelectStar(String selectStar) {
    this.selectStar = selectStar;
  }


  public DashboardDatasetSchema sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public DashboardDatasetSchema tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public DashboardDatasetSchema templateParams(String templateParams) {
    this.templateParams = templateParams;
    return this;
  }

  /**
   * Get templateParams
   * @return templateParams
   */
  @javax.annotation.Nullable
  public String getTemplateParams() {
    return templateParams;
  }

  public void setTemplateParams(String templateParams) {
    this.templateParams = templateParams;
  }


  public DashboardDatasetSchema timeGrainSqla(List<List<String>> timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
    return this;
  }

  public DashboardDatasetSchema addTimeGrainSqlaItem(List<String> timeGrainSqlaItem) {
    if (this.timeGrainSqla == null) {
      this.timeGrainSqla = new ArrayList<>();
    }
    this.timeGrainSqla.add(timeGrainSqlaItem);
    return this;
  }

  /**
   * Get timeGrainSqla
   * @return timeGrainSqla
   */
  @javax.annotation.Nullable
  public List<List<String>> getTimeGrainSqla() {
    return timeGrainSqla;
  }

  public void setTimeGrainSqla(List<List<String>> timeGrainSqla) {
    this.timeGrainSqla = timeGrainSqla;
  }


  public DashboardDatasetSchema type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DashboardDatasetSchema uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public DashboardDatasetSchema verboseMap(Map<String, String> verboseMap) {
    this.verboseMap = verboseMap;
    return this;
  }

  public DashboardDatasetSchema putVerboseMapItem(String key, String verboseMapItem) {
    if (this.verboseMap == null) {
      this.verboseMap = new HashMap<>();
    }
    this.verboseMap.put(key, verboseMapItem);
    return this;
  }

  /**
   * Get verboseMap
   * @return verboseMap
   */
  @javax.annotation.Nullable
  public Map<String, String> getVerboseMap() {
    return verboseMap;
  }

  public void setVerboseMap(Map<String, String> verboseMap) {
    this.verboseMap = verboseMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardDatasetSchema dashboardDatasetSchema = (DashboardDatasetSchema) o;
    return Objects.equals(this.cacheTimeout, dashboardDatasetSchema.cacheTimeout) &&
        Objects.equals(this.columnFormats, dashboardDatasetSchema.columnFormats) &&
        Objects.equals(this.columnTypes, dashboardDatasetSchema.columnTypes) &&
        Objects.equals(this.columns, dashboardDatasetSchema.columns) &&
        Objects.equals(this.database, dashboardDatasetSchema.database) &&
        Objects.equals(this.datasourceName, dashboardDatasetSchema.datasourceName) &&
        Objects.equals(this.defaultEndpoint, dashboardDatasetSchema.defaultEndpoint) &&
        Objects.equals(this.editUrl, dashboardDatasetSchema.editUrl) &&
        Objects.equals(this.fetchValuesPredicate, dashboardDatasetSchema.fetchValuesPredicate) &&
        Objects.equals(this.filterSelect, dashboardDatasetSchema.filterSelect) &&
        Objects.equals(this.filterSelectEnabled, dashboardDatasetSchema.filterSelectEnabled) &&
        Objects.equals(this.granularitySqla, dashboardDatasetSchema.granularitySqla) &&
        Objects.equals(this.healthCheckMessage, dashboardDatasetSchema.healthCheckMessage) &&
        Objects.equals(this.id, dashboardDatasetSchema.id) &&
        Objects.equals(this.isSqllabView, dashboardDatasetSchema.isSqllabView) &&
        Objects.equals(this.mainDttmCol, dashboardDatasetSchema.mainDttmCol) &&
        Objects.equals(this.metrics, dashboardDatasetSchema.metrics) &&
        Objects.equals(this.name, dashboardDatasetSchema.name) &&
        Objects.equals(this.offset, dashboardDatasetSchema.offset) &&
        Objects.equals(this.orderByChoices, dashboardDatasetSchema.orderByChoices) &&
        Objects.equals(this.owners, dashboardDatasetSchema.owners) &&
        Objects.equals(this.params, dashboardDatasetSchema.params) &&
        Objects.equals(this.perm, dashboardDatasetSchema.perm) &&
        Objects.equals(this.schema, dashboardDatasetSchema.schema) &&
        Objects.equals(this.selectStar, dashboardDatasetSchema.selectStar) &&
        Objects.equals(this.sql, dashboardDatasetSchema.sql) &&
        Objects.equals(this.tableName, dashboardDatasetSchema.tableName) &&
        Objects.equals(this.templateParams, dashboardDatasetSchema.templateParams) &&
        Objects.equals(this.timeGrainSqla, dashboardDatasetSchema.timeGrainSqla) &&
        Objects.equals(this.type, dashboardDatasetSchema.type) &&
        Objects.equals(this.uid, dashboardDatasetSchema.uid) &&
        Objects.equals(this.verboseMap, dashboardDatasetSchema.verboseMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, columnFormats, columnTypes, columns, database, datasourceName, defaultEndpoint, editUrl, fetchValuesPredicate, filterSelect, filterSelectEnabled, granularitySqla, healthCheckMessage, id, isSqllabView, mainDttmCol, metrics, name, offset, orderByChoices, owners, params, perm, schema, selectStar, sql, tableName, templateParams, timeGrainSqla, type, uid, verboseMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardDatasetSchema {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    columnFormats: ").append(toIndentedString(columnFormats)).append("\n");
    sb.append("    columnTypes: ").append(toIndentedString(columnTypes)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    editUrl: ").append(toIndentedString(editUrl)).append("\n");
    sb.append("    fetchValuesPredicate: ").append(toIndentedString(fetchValuesPredicate)).append("\n");
    sb.append("    filterSelect: ").append(toIndentedString(filterSelect)).append("\n");
    sb.append("    filterSelectEnabled: ").append(toIndentedString(filterSelectEnabled)).append("\n");
    sb.append("    granularitySqla: ").append(toIndentedString(granularitySqla)).append("\n");
    sb.append("    healthCheckMessage: ").append(toIndentedString(healthCheckMessage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSqllabView: ").append(toIndentedString(isSqllabView)).append("\n");
    sb.append("    mainDttmCol: ").append(toIndentedString(mainDttmCol)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderByChoices: ").append(toIndentedString(orderByChoices)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    perm: ").append(toIndentedString(perm)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    selectStar: ").append(toIndentedString(selectStar)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    templateParams: ").append(toIndentedString(templateParams)).append("\n");
    sb.append("    timeGrainSqla: ").append(toIndentedString(timeGrainSqla)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    verboseMap: ").append(toIndentedString(verboseMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("column_formats");
    openapiFields.add("column_types");
    openapiFields.add("columns");
    openapiFields.add("database");
    openapiFields.add("datasource_name");
    openapiFields.add("default_endpoint");
    openapiFields.add("edit_url");
    openapiFields.add("fetch_values_predicate");
    openapiFields.add("filter_select");
    openapiFields.add("filter_select_enabled");
    openapiFields.add("granularity_sqla");
    openapiFields.add("health_check_message");
    openapiFields.add("id");
    openapiFields.add("is_sqllab_view");
    openapiFields.add("main_dttm_col");
    openapiFields.add("metrics");
    openapiFields.add("name");
    openapiFields.add("offset");
    openapiFields.add("order_by_choices");
    openapiFields.add("owners");
    openapiFields.add("params");
    openapiFields.add("perm");
    openapiFields.add("schema");
    openapiFields.add("select_star");
    openapiFields.add("sql");
    openapiFields.add("table_name");
    openapiFields.add("template_params");
    openapiFields.add("time_grain_sqla");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("verbose_map");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardDatasetSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DashboardDatasetSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardDatasetSchema is not found in the empty JSON string", DashboardDatasetSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DashboardDatasetSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardDatasetSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("column_types") != null && !jsonObj.get("column_types").isJsonNull() && !jsonObj.get("column_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_types` to be an array in the JSON string but got `%s`", jsonObj.get("column_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      // validate the optional field `database`
      if (jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) {
        Database.validateJsonElement(jsonObj.get("database"));
      }
      if ((jsonObj.get("datasource_name") != null && !jsonObj.get("datasource_name").isJsonNull()) && !jsonObj.get("datasource_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_name").toString()));
      }
      if ((jsonObj.get("default_endpoint") != null && !jsonObj.get("default_endpoint").isJsonNull()) && !jsonObj.get("default_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_endpoint").toString()));
      }
      if ((jsonObj.get("edit_url") != null && !jsonObj.get("edit_url").isJsonNull()) && !jsonObj.get("edit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_url").toString()));
      }
      if ((jsonObj.get("fetch_values_predicate") != null && !jsonObj.get("fetch_values_predicate").isJsonNull()) && !jsonObj.get("fetch_values_predicate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetch_values_predicate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetch_values_predicate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("granularity_sqla") != null && !jsonObj.get("granularity_sqla").isJsonNull() && !jsonObj.get("granularity_sqla").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity_sqla` to be an array in the JSON string but got `%s`", jsonObj.get("granularity_sqla").toString()));
      }
      if ((jsonObj.get("health_check_message") != null && !jsonObj.get("health_check_message").isJsonNull()) && !jsonObj.get("health_check_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_check_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_check_message").toString()));
      }
      if ((jsonObj.get("main_dttm_col") != null && !jsonObj.get("main_dttm_col").isJsonNull()) && !jsonObj.get("main_dttm_col").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_dttm_col` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_dttm_col").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("order_by_choices") != null && !jsonObj.get("order_by_choices").isJsonNull() && !jsonObj.get("order_by_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_by_choices` to be an array in the JSON string but got `%s`", jsonObj.get("order_by_choices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull() && !jsonObj.get("owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      if ((jsonObj.get("perm") != null && !jsonObj.get("perm").isJsonNull()) && !jsonObj.get("perm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perm").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("select_star") != null && !jsonObj.get("select_star").isJsonNull()) && !jsonObj.get("select_star").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `select_star` to be a primitive type in the JSON string but got `%s`", jsonObj.get("select_star").toString()));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      if ((jsonObj.get("template_params") != null && !jsonObj.get("template_params").isJsonNull()) && !jsonObj.get("template_params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_params").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("time_grain_sqla") != null && !jsonObj.get("time_grain_sqla").isJsonNull() && !jsonObj.get("time_grain_sqla").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_grain_sqla` to be an array in the JSON string but got `%s`", jsonObj.get("time_grain_sqla").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DashboardDatasetSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DashboardDatasetSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DashboardDatasetSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DashboardDatasetSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<DashboardDatasetSchema>() {
           @Override
           public void write(JsonWriter out, DashboardDatasetSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DashboardDatasetSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardDatasetSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardDatasetSchema
   * @throws IOException if the JSON string is invalid with respect to DashboardDatasetSchema
   */
  public static DashboardDatasetSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardDatasetSchema.class);
  }

  /**
   * Convert an instance of DashboardDatasetSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

