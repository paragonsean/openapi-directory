/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Meta5;
import org.openapitools.client.model.Meta6;
import org.openapitools.client.model.Meta7;
import org.openapitools.client.model.Meta8;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartRestApiGetList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartRestApiGetList {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Integer cacheTimeout;

  public static final String SERIALIZED_NAME_CHANGED_BY = "changed_by";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY)
  private Meta8 changedBy;

  public static final String SERIALIZED_NAME_CHANGED_BY_NAME = "changed_by_name";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_NAME)
  private Object changedByName = null;

  public static final String SERIALIZED_NAME_CHANGED_BY_URL = "changed_by_url";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_URL)
  private Object changedByUrl = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED = "changed_on_delta_humanized";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_DELTA_HUMANIZED)
  private Object changedOnDeltaHumanized = null;

  public static final String SERIALIZED_NAME_CHANGED_ON_UTC = "changed_on_utc";
  @SerializedName(SERIALIZED_NAME_CHANGED_ON_UTC)
  private Object changedOnUtc = null;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private Meta5 createdBy;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "datasource_id";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private Integer datasourceId;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME_TEXT = "datasource_name_text";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME_TEXT)
  private Object datasourceNameText = null;

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE = "datasource_type";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE)
  private String datasourceType;

  public static final String SERIALIZED_NAME_DATASOURCE_URL = "datasource_url";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_URL)
  private Object datasourceUrl = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_MARKEDDOWN = "description_markeddown";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_MARKEDDOWN)
  private Object descriptionMarkeddown = null;

  public static final String SERIALIZED_NAME_EDIT_URL = "edit_url";
  @SerializedName(SERIALIZED_NAME_EDIT_URL)
  private Object editUrl = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private Meta7 owners;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params;

  public static final String SERIALIZED_NAME_SLICE_NAME = "slice_name";
  @SerializedName(SERIALIZED_NAME_SLICE_NAME)
  private String sliceName;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private Meta6 table;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnail_url";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private Object thumbnailUrl = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private Object url = null;

  public static final String SERIALIZED_NAME_VIZ_TYPE = "viz_type";
  @SerializedName(SERIALIZED_NAME_VIZ_TYPE)
  private String vizType;

  public ChartRestApiGetList() {
  }

  public ChartRestApiGetList(
     Object changedByName, 
     Object changedByUrl, 
     Object changedOnDeltaHumanized, 
     Object changedOnUtc, 
     Object datasourceNameText, 
     Object datasourceUrl, 
     Object descriptionMarkeddown, 
     Object editUrl, 
     Object thumbnailUrl, 
     Object url
  ) {
    this();
    this.changedByName = changedByName;
    this.changedByUrl = changedByUrl;
    this.changedOnDeltaHumanized = changedOnDeltaHumanized;
    this.changedOnUtc = changedOnUtc;
    this.datasourceNameText = datasourceNameText;
    this.datasourceUrl = datasourceUrl;
    this.descriptionMarkeddown = descriptionMarkeddown;
    this.editUrl = editUrl;
    this.thumbnailUrl = thumbnailUrl;
    this.url = url;
  }

  public ChartRestApiGetList cacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public ChartRestApiGetList changedBy(Meta8 changedBy) {
    this.changedBy = changedBy;
    return this;
  }

  /**
   * Get changedBy
   * @return changedBy
   */
  @javax.annotation.Nullable
  public Meta8 getChangedBy() {
    return changedBy;
  }

  public void setChangedBy(Meta8 changedBy) {
    this.changedBy = changedBy;
  }


  /**
   * Get changedByName
   * @return changedByName
   */
  @javax.annotation.Nullable
  public Object getChangedByName() {
    return changedByName;
  }



  /**
   * Get changedByUrl
   * @return changedByUrl
   */
  @javax.annotation.Nullable
  public Object getChangedByUrl() {
    return changedByUrl;
  }



  /**
   * Get changedOnDeltaHumanized
   * @return changedOnDeltaHumanized
   */
  @javax.annotation.Nullable
  public Object getChangedOnDeltaHumanized() {
    return changedOnDeltaHumanized;
  }



  /**
   * Get changedOnUtc
   * @return changedOnUtc
   */
  @javax.annotation.Nullable
  public Object getChangedOnUtc() {
    return changedOnUtc;
  }



  public ChartRestApiGetList createdBy(Meta5 createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public Meta5 getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Meta5 createdBy) {
    this.createdBy = createdBy;
  }


  public ChartRestApiGetList datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

  /**
   * Get datasourceId
   * @return datasourceId
   */
  @javax.annotation.Nullable
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }


  /**
   * Get datasourceNameText
   * @return datasourceNameText
   */
  @javax.annotation.Nullable
  public Object getDatasourceNameText() {
    return datasourceNameText;
  }



  public ChartRestApiGetList datasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
    return this;
  }

  /**
   * Get datasourceType
   * @return datasourceType
   */
  @javax.annotation.Nullable
  public String getDatasourceType() {
    return datasourceType;
  }

  public void setDatasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
  }


  /**
   * Get datasourceUrl
   * @return datasourceUrl
   */
  @javax.annotation.Nullable
  public Object getDatasourceUrl() {
    return datasourceUrl;
  }



  public ChartRestApiGetList description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get descriptionMarkeddown
   * @return descriptionMarkeddown
   */
  @javax.annotation.Nullable
  public Object getDescriptionMarkeddown() {
    return descriptionMarkeddown;
  }



  /**
   * Get editUrl
   * @return editUrl
   */
  @javax.annotation.Nullable
  public Object getEditUrl() {
    return editUrl;
  }



  public ChartRestApiGetList id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ChartRestApiGetList owners(Meta7 owners) {
    this.owners = owners;
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public Meta7 getOwners() {
    return owners;
  }

  public void setOwners(Meta7 owners) {
    this.owners = owners;
  }


  public ChartRestApiGetList params(String params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   */
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }


  public ChartRestApiGetList sliceName(String sliceName) {
    this.sliceName = sliceName;
    return this;
  }

  /**
   * Get sliceName
   * @return sliceName
   */
  @javax.annotation.Nullable
  public String getSliceName() {
    return sliceName;
  }

  public void setSliceName(String sliceName) {
    this.sliceName = sliceName;
  }


  public ChartRestApiGetList table(Meta6 table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public Meta6 getTable() {
    return table;
  }

  public void setTable(Meta6 table) {
    this.table = table;
  }


  /**
   * Get thumbnailUrl
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public Object getThumbnailUrl() {
    return thumbnailUrl;
  }



  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public Object getUrl() {
    return url;
  }



  public ChartRestApiGetList vizType(String vizType) {
    this.vizType = vizType;
    return this;
  }

  /**
   * Get vizType
   * @return vizType
   */
  @javax.annotation.Nullable
  public String getVizType() {
    return vizType;
  }

  public void setVizType(String vizType) {
    this.vizType = vizType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartRestApiGetList chartRestApiGetList = (ChartRestApiGetList) o;
    return Objects.equals(this.cacheTimeout, chartRestApiGetList.cacheTimeout) &&
        Objects.equals(this.changedBy, chartRestApiGetList.changedBy) &&
        Objects.equals(this.changedByName, chartRestApiGetList.changedByName) &&
        Objects.equals(this.changedByUrl, chartRestApiGetList.changedByUrl) &&
        Objects.equals(this.changedOnDeltaHumanized, chartRestApiGetList.changedOnDeltaHumanized) &&
        Objects.equals(this.changedOnUtc, chartRestApiGetList.changedOnUtc) &&
        Objects.equals(this.createdBy, chartRestApiGetList.createdBy) &&
        Objects.equals(this.datasourceId, chartRestApiGetList.datasourceId) &&
        Objects.equals(this.datasourceNameText, chartRestApiGetList.datasourceNameText) &&
        Objects.equals(this.datasourceType, chartRestApiGetList.datasourceType) &&
        Objects.equals(this.datasourceUrl, chartRestApiGetList.datasourceUrl) &&
        Objects.equals(this.description, chartRestApiGetList.description) &&
        Objects.equals(this.descriptionMarkeddown, chartRestApiGetList.descriptionMarkeddown) &&
        Objects.equals(this.editUrl, chartRestApiGetList.editUrl) &&
        Objects.equals(this.id, chartRestApiGetList.id) &&
        Objects.equals(this.owners, chartRestApiGetList.owners) &&
        Objects.equals(this.params, chartRestApiGetList.params) &&
        Objects.equals(this.sliceName, chartRestApiGetList.sliceName) &&
        Objects.equals(this.table, chartRestApiGetList.table) &&
        Objects.equals(this.thumbnailUrl, chartRestApiGetList.thumbnailUrl) &&
        Objects.equals(this.url, chartRestApiGetList.url) &&
        Objects.equals(this.vizType, chartRestApiGetList.vizType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, changedBy, changedByName, changedByUrl, changedOnDeltaHumanized, changedOnUtc, createdBy, datasourceId, datasourceNameText, datasourceType, datasourceUrl, description, descriptionMarkeddown, editUrl, id, owners, params, sliceName, table, thumbnailUrl, url, vizType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartRestApiGetList {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    changedBy: ").append(toIndentedString(changedBy)).append("\n");
    sb.append("    changedByName: ").append(toIndentedString(changedByName)).append("\n");
    sb.append("    changedByUrl: ").append(toIndentedString(changedByUrl)).append("\n");
    sb.append("    changedOnDeltaHumanized: ").append(toIndentedString(changedOnDeltaHumanized)).append("\n");
    sb.append("    changedOnUtc: ").append(toIndentedString(changedOnUtc)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    datasourceNameText: ").append(toIndentedString(datasourceNameText)).append("\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    datasourceUrl: ").append(toIndentedString(datasourceUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionMarkeddown: ").append(toIndentedString(descriptionMarkeddown)).append("\n");
    sb.append("    editUrl: ").append(toIndentedString(editUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    sliceName: ").append(toIndentedString(sliceName)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vizType: ").append(toIndentedString(vizType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("changed_by");
    openapiFields.add("changed_by_name");
    openapiFields.add("changed_by_url");
    openapiFields.add("changed_on_delta_humanized");
    openapiFields.add("changed_on_utc");
    openapiFields.add("created_by");
    openapiFields.add("datasource_id");
    openapiFields.add("datasource_name_text");
    openapiFields.add("datasource_type");
    openapiFields.add("datasource_url");
    openapiFields.add("description");
    openapiFields.add("description_markeddown");
    openapiFields.add("edit_url");
    openapiFields.add("id");
    openapiFields.add("owners");
    openapiFields.add("params");
    openapiFields.add("slice_name");
    openapiFields.add("table");
    openapiFields.add("thumbnail_url");
    openapiFields.add("url");
    openapiFields.add("viz_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartRestApiGetList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartRestApiGetList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartRestApiGetList is not found in the empty JSON string", ChartRestApiGetList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartRestApiGetList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartRestApiGetList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changed_by`
      if (jsonObj.get("changed_by") != null && !jsonObj.get("changed_by").isJsonNull()) {
        Meta8.validateJsonElement(jsonObj.get("changed_by"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        Meta5.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("datasource_type") != null && !jsonObj.get("datasource_type").isJsonNull()) && !jsonObj.get("datasource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `owners`
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) {
        Meta7.validateJsonElement(jsonObj.get("owners"));
      }
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      if ((jsonObj.get("slice_name") != null && !jsonObj.get("slice_name").isJsonNull()) && !jsonObj.get("slice_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slice_name").toString()));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        Meta6.validateJsonElement(jsonObj.get("table"));
      }
      if ((jsonObj.get("viz_type") != null && !jsonObj.get("viz_type").isJsonNull()) && !jsonObj.get("viz_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viz_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viz_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartRestApiGetList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartRestApiGetList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartRestApiGetList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartRestApiGetList.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartRestApiGetList>() {
           @Override
           public void write(JsonWriter out, ChartRestApiGetList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartRestApiGetList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartRestApiGetList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartRestApiGetList
   * @throws IOException if the JSON string is invalid with respect to ChartRestApiGetList
   */
  public static ChartRestApiGetList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartRestApiGetList.class);
  }

  /**
   * Convert an instance of ChartRestApiGetList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

