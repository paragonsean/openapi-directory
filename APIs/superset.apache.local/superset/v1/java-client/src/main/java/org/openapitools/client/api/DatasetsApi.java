/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotationLayerGet400Response;
import org.openapitools.client.model.AnnotationLayerInfoGet200Response;
import org.openapitools.client.model.DatasetGet200Response;
import org.openapitools.client.model.DatasetPkGet200Response;
import org.openapitools.client.model.DatasetPkPut200Response;
import org.openapitools.client.model.DatasetPost201Response;
import org.openapitools.client.model.DatasetRelatedObjectsResponse;
import org.openapitools.client.model.DatasetRestApiPost;
import org.openapitools.client.model.DatasetRestApiPut;
import org.openapitools.client.model.DistincResponseSchema;
import java.io.File;
import org.openapitools.client.model.GetInfoSchema;
import org.openapitools.client.model.GetItemSchema;
import org.openapitools.client.model.GetListSchema;
import org.openapitools.client.model.GetRelatedSchema;
import org.openapitools.client.model.RelatedResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for datasetDelete
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset bulk delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetDeleteCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetDeleteValidateBeforeCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        return datasetDeleteCall(q, _callback);

    }

    /**
     * 
     * Deletes multiple Datasets in a bulk operation.
     * @param q  (optional)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset bulk delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetDelete(List<Integer> q) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetDeleteWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes multiple Datasets in a bulk operation.
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset bulk delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetDeleteWithHttpInfo(List<Integer> q) throws ApiException {
        okhttp3.Call localVarCall = datasetDeleteValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes multiple Datasets in a bulk operation.
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset bulk delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetDeleteAsync(List<Integer> q, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetDeleteValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetDistinctColumnNameGet
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distinct field data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetDistinctColumnNameGetCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/distinct/{column_name}"
            .replace("{" + "column_name" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetDistinctColumnNameGetValidateBeforeCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling datasetDistinctColumnNameGet(Async)");
        }

        return datasetDistinctColumnNameGetCall(columnName, q, _callback);

    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return DistincResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distinct field data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DistincResponseSchema datasetDistinctColumnNameGet(String columnName, GetRelatedSchema q) throws ApiException {
        ApiResponse<DistincResponseSchema> localVarResp = datasetDistinctColumnNameGetWithHttpInfo(columnName, q);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;DistincResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distinct field data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistincResponseSchema> datasetDistinctColumnNameGetWithHttpInfo(String columnName, GetRelatedSchema q) throws ApiException {
        okhttp3.Call localVarCall = datasetDistinctColumnNameGetValidateBeforeCall(columnName, q, null);
        Type localVarReturnType = new TypeToken<DistincResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distinct field data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetDistinctColumnNameGetAsync(String columnName, GetRelatedSchema q, final ApiCallback<DistincResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetDistinctColumnNameGetValidateBeforeCall(columnName, q, _callback);
        Type localVarReturnType = new TypeToken<DistincResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetExportGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset export </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetExportGetCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/export/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "q", q));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetExportGetValidateBeforeCall(List<Integer> q, final ApiCallback _callback) throws ApiException {
        return datasetExportGetCall(q, _callback);

    }

    /**
     * 
     * Exports multiple datasets and downloads them as YAML files
     * @param q  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset export </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public String datasetExportGet(List<Integer> q) throws ApiException {
        ApiResponse<String> localVarResp = datasetExportGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Exports multiple datasets and downloads them as YAML files
     * @param q  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset export </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> datasetExportGetWithHttpInfo(List<Integer> q) throws ApiException {
        okhttp3.Call localVarCall = datasetExportGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exports multiple datasets and downloads them as YAML files
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset export </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetExportGetAsync(List<Integer> q, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetExportGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetGetCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetGetValidateBeforeCall(GetListSchema q, final ApiCallback _callback) throws ApiException {
        return datasetGetCall(q, _callback);

    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return DatasetGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatasetGet200Response datasetGet(GetListSchema q) throws ApiException {
        ApiResponse<DatasetGet200Response> localVarResp = datasetGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of models
     * @param q  (optional)
     * @return ApiResponse&lt;DatasetGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetGet200Response> datasetGetWithHttpInfo(GetListSchema q) throws ApiException {
        okhttp3.Call localVarCall = datasetGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<DatasetGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of models
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetGetAsync(GetListSchema q, final ApiCallback<DatasetGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<DatasetGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetImportPost
     * @param formData upload file (ZIP or YAML) (optional)
     * @param overwrite overwrite existing datasets? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetImportPostCall(File formData, Boolean overwrite, String passwords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/import/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formData != null) {
            localVarFormParams.put("formData", formData);
        }

        if (overwrite != null) {
            localVarFormParams.put("overwrite", overwrite);
        }

        if (passwords != null) {
            localVarFormParams.put("passwords", passwords);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetImportPostValidateBeforeCall(File formData, Boolean overwrite, String passwords, final ApiCallback _callback) throws ApiException {
        return datasetImportPostCall(formData, overwrite, passwords, _callback);

    }

    /**
     * 
     * 
     * @param formData upload file (ZIP or YAML) (optional)
     * @param overwrite overwrite existing datasets? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetImportPost(File formData, Boolean overwrite, String passwords) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetImportPostWithHttpInfo(formData, overwrite, passwords);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param formData upload file (ZIP or YAML) (optional)
     * @param overwrite overwrite existing datasets? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetImportPostWithHttpInfo(File formData, Boolean overwrite, String passwords) throws ApiException {
        okhttp3.Call localVarCall = datasetImportPostValidateBeforeCall(formData, overwrite, passwords, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param formData upload file (ZIP or YAML) (optional)
     * @param overwrite overwrite existing datasets? (optional)
     * @param passwords JSON map of passwords for each file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset import result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetImportPostAsync(File formData, Boolean overwrite, String passwords, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetImportPostValidateBeforeCall(formData, overwrite, passwords, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetInfoGet
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetInfoGetCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetInfoGetValidateBeforeCall(GetInfoSchema q, final ApiCallback _callback) throws ApiException {
        return datasetInfoGetCall(q, _callback);

    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return AnnotationLayerInfoGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerInfoGet200Response datasetInfoGet(GetInfoSchema q) throws ApiException {
        ApiResponse<AnnotationLayerInfoGet200Response> localVarResp = datasetInfoGetWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information about this API resource
     * @param q  (optional)
     * @return ApiResponse&lt;AnnotationLayerInfoGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerInfoGet200Response> datasetInfoGetWithHttpInfo(GetInfoSchema q) throws ApiException {
        okhttp3.Call localVarCall = datasetInfoGetValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information about this API resource
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetInfoGetAsync(GetInfoSchema q, final ApiCallback<AnnotationLayerInfoGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetInfoGetValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerInfoGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkColumnColumnIdDelete
     * @param pk The dataset pk for this column (required)
     * @param columnId The column id for this dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Column deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkColumnColumnIdDeleteCall(Integer pk, Integer columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}/column/{column_id}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "column_id" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkColumnColumnIdDeleteValidateBeforeCall(Integer pk, Integer columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkColumnColumnIdDelete(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling datasetPkColumnColumnIdDelete(Async)");
        }

        return datasetPkColumnColumnIdDeleteCall(pk, columnId, _callback);

    }

    /**
     * 
     * Delete a Dataset column
     * @param pk The dataset pk for this column (required)
     * @param columnId The column id for this dataset (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Column deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetPkColumnColumnIdDelete(Integer pk, Integer columnId) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetPkColumnColumnIdDeleteWithHttpInfo(pk, columnId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a Dataset column
     * @param pk The dataset pk for this column (required)
     * @param columnId The column id for this dataset (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Column deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetPkColumnColumnIdDeleteWithHttpInfo(Integer pk, Integer columnId) throws ApiException {
        okhttp3.Call localVarCall = datasetPkColumnColumnIdDeleteValidateBeforeCall(pk, columnId, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Dataset column
     * @param pk The dataset pk for this column (required)
     * @param columnId The column id for this dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Column deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkColumnColumnIdDeleteAsync(Integer pk, Integer columnId, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkColumnColumnIdDeleteValidateBeforeCall(pk, columnId, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkDelete
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkDeleteCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkDeleteValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkDelete(Async)");
        }

        return datasetPkDeleteCall(pk, _callback);

    }

    /**
     * 
     * Deletes a Dataset
     * @param pk  (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetPkDelete(Integer pk) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetPkDeleteWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a Dataset
     * @param pk  (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetPkDeleteWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = datasetPkDeleteValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a Dataset
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkDeleteAsync(Integer pk, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkDeleteValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkGet
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkGetCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkGetValidateBeforeCall(Integer pk, GetItemSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkGet(Async)");
        }

        return datasetPkGetCall(pk, q, _callback);

    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return DatasetPkGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatasetPkGet200Response datasetPkGet(Integer pk, GetItemSchema q) throws ApiException {
        ApiResponse<DatasetPkGet200Response> localVarResp = datasetPkGetWithHttpInfo(pk, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;DatasetPkGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetPkGet200Response> datasetPkGetWithHttpInfo(Integer pk, GetItemSchema q) throws ApiException {
        okhttp3.Call localVarCall = datasetPkGetValidateBeforeCall(pk, q, null);
        Type localVarReturnType = new TypeToken<DatasetPkGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an item model
     * @param pk  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item from Model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkGetAsync(Integer pk, GetItemSchema q, final ApiCallback<DatasetPkGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkGetValidateBeforeCall(pk, q, _callback);
        Type localVarReturnType = new TypeToken<DatasetPkGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkMetricMetricIdDelete
     * @param pk The dataset pk for this column (required)
     * @param metricId The metric id for this dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metric deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkMetricMetricIdDeleteCall(Integer pk, Integer metricId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}/metric/{metric_id}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()))
            .replace("{" + "metric_id" + "}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkMetricMetricIdDeleteValidateBeforeCall(Integer pk, Integer metricId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkMetricMetricIdDelete(Async)");
        }

        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling datasetPkMetricMetricIdDelete(Async)");
        }

        return datasetPkMetricMetricIdDeleteCall(pk, metricId, _callback);

    }

    /**
     * 
     * Delete a Dataset metric
     * @param pk The dataset pk for this column (required)
     * @param metricId The metric id for this dataset (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metric deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetPkMetricMetricIdDelete(Integer pk, Integer metricId) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetPkMetricMetricIdDeleteWithHttpInfo(pk, metricId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a Dataset metric
     * @param pk The dataset pk for this column (required)
     * @param metricId The metric id for this dataset (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metric deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetPkMetricMetricIdDeleteWithHttpInfo(Integer pk, Integer metricId) throws ApiException {
        okhttp3.Call localVarCall = datasetPkMetricMetricIdDeleteValidateBeforeCall(pk, metricId, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Dataset metric
     * @param pk The dataset pk for this column (required)
     * @param metricId The metric id for this dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metric deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkMetricMetricIdDeleteAsync(Integer pk, Integer metricId, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkMetricMetricIdDeleteValidateBeforeCall(pk, metricId, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkPut
     * @param pk  (required)
     * @param datasetRestApiPut Dataset schema (required)
     * @param overrideColumns  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkPutCall(Integer pk, DatasetRestApiPut datasetRestApiPut, Boolean overrideColumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetRestApiPut;

        // create path and map variables
        String localVarPath = "/dataset/{pk}"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overrideColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("override_columns", overrideColumns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkPutValidateBeforeCall(Integer pk, DatasetRestApiPut datasetRestApiPut, Boolean overrideColumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkPut(Async)");
        }

        // verify the required parameter 'datasetRestApiPut' is set
        if (datasetRestApiPut == null) {
            throw new ApiException("Missing the required parameter 'datasetRestApiPut' when calling datasetPkPut(Async)");
        }

        return datasetPkPutCall(pk, datasetRestApiPut, overrideColumns, _callback);

    }

    /**
     * 
     * Changes a Dataset
     * @param pk  (required)
     * @param datasetRestApiPut Dataset schema (required)
     * @param overrideColumns  (optional)
     * @return DatasetPkPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatasetPkPut200Response datasetPkPut(Integer pk, DatasetRestApiPut datasetRestApiPut, Boolean overrideColumns) throws ApiException {
        ApiResponse<DatasetPkPut200Response> localVarResp = datasetPkPutWithHttpInfo(pk, datasetRestApiPut, overrideColumns);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes a Dataset
     * @param pk  (required)
     * @param datasetRestApiPut Dataset schema (required)
     * @param overrideColumns  (optional)
     * @return ApiResponse&lt;DatasetPkPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetPkPut200Response> datasetPkPutWithHttpInfo(Integer pk, DatasetRestApiPut datasetRestApiPut, Boolean overrideColumns) throws ApiException {
        okhttp3.Call localVarCall = datasetPkPutValidateBeforeCall(pk, datasetRestApiPut, overrideColumns, null);
        Type localVarReturnType = new TypeToken<DatasetPkPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes a Dataset
     * @param pk  (required)
     * @param datasetRestApiPut Dataset schema (required)
     * @param overrideColumns  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkPutAsync(Integer pk, DatasetRestApiPut datasetRestApiPut, Boolean overrideColumns, final ApiCallback<DatasetPkPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkPutValidateBeforeCall(pk, datasetRestApiPut, overrideColumns, _callback);
        Type localVarReturnType = new TypeToken<DatasetPkPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkRefreshPut
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkRefreshPutCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}/refresh"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkRefreshPutValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkRefreshPut(Async)");
        }

        return datasetPkRefreshPutCall(pk, _callback);

    }

    /**
     * 
     * Refreshes and updates columns of a dataset
     * @param pk  (required)
     * @return AnnotationLayerGet400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationLayerGet400Response datasetPkRefreshPut(Integer pk) throws ApiException {
        ApiResponse<AnnotationLayerGet400Response> localVarResp = datasetPkRefreshPutWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Refreshes and updates columns of a dataset
     * @param pk  (required)
     * @return ApiResponse&lt;AnnotationLayerGet400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationLayerGet400Response> datasetPkRefreshPutWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = datasetPkRefreshPutValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Refreshes and updates columns of a dataset
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset delete </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkRefreshPutAsync(Integer pk, final ApiCallback<AnnotationLayerGet400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkRefreshPutValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<AnnotationLayerGet400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPkRelatedObjectsGet
     * @param pk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkRelatedObjectsGetCall(Integer pk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/{pk}/related_objects"
            .replace("{" + "pk" + "}", localVarApiClient.escapeString(pk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPkRelatedObjectsGetValidateBeforeCall(Integer pk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pk' is set
        if (pk == null) {
            throw new ApiException("Missing the required parameter 'pk' when calling datasetPkRelatedObjectsGet(Async)");
        }

        return datasetPkRelatedObjectsGetCall(pk, _callback);

    }

    /**
     * 
     * Get charts and dashboards count associated to a dataset
     * @param pk  (required)
     * @return DatasetRelatedObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatasetRelatedObjectsResponse datasetPkRelatedObjectsGet(Integer pk) throws ApiException {
        ApiResponse<DatasetRelatedObjectsResponse> localVarResp = datasetPkRelatedObjectsGetWithHttpInfo(pk);
        return localVarResp.getData();
    }

    /**
     * 
     * Get charts and dashboards count associated to a dataset
     * @param pk  (required)
     * @return ApiResponse&lt;DatasetRelatedObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetRelatedObjectsResponse> datasetPkRelatedObjectsGetWithHttpInfo(Integer pk) throws ApiException {
        okhttp3.Call localVarCall = datasetPkRelatedObjectsGetValidateBeforeCall(pk, null);
        Type localVarReturnType = new TypeToken<DatasetRelatedObjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get charts and dashboards count associated to a dataset
     * @param pk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPkRelatedObjectsGetAsync(Integer pk, final ApiCallback<DatasetRelatedObjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPkRelatedObjectsGetValidateBeforeCall(pk, _callback);
        Type localVarReturnType = new TypeToken<DatasetRelatedObjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetPost
     * @param datasetRestApiPost Dataset schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dataset added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPostCall(DatasetRestApiPost datasetRestApiPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetRestApiPost;

        // create path and map variables
        String localVarPath = "/dataset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetPostValidateBeforeCall(DatasetRestApiPost datasetRestApiPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetRestApiPost' is set
        if (datasetRestApiPost == null) {
            throw new ApiException("Missing the required parameter 'datasetRestApiPost' when calling datasetPost(Async)");
        }

        return datasetPostCall(datasetRestApiPost, _callback);

    }

    /**
     * 
     * Create a new Dataset
     * @param datasetRestApiPost Dataset schema (required)
     * @return DatasetPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dataset added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public DatasetPost201Response datasetPost(DatasetRestApiPost datasetRestApiPost) throws ApiException {
        ApiResponse<DatasetPost201Response> localVarResp = datasetPostWithHttpInfo(datasetRestApiPost);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Dataset
     * @param datasetRestApiPost Dataset schema (required)
     * @return ApiResponse&lt;DatasetPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dataset added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetPost201Response> datasetPostWithHttpInfo(DatasetRestApiPost datasetRestApiPost) throws ApiException {
        okhttp3.Call localVarCall = datasetPostValidateBeforeCall(datasetRestApiPost, null);
        Type localVarReturnType = new TypeToken<DatasetPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Dataset
     * @param datasetRestApiPost Dataset schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dataset added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Could not process entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetPostAsync(DatasetRestApiPost datasetRestApiPost, final ApiCallback<DatasetPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetPostValidateBeforeCall(datasetRestApiPost, _callback);
        Type localVarReturnType = new TypeToken<DatasetPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetRelatedColumnNameGet
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetRelatedColumnNameGetCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/related/{column_name}"
            .replace("{" + "column_name" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetRelatedColumnNameGetValidateBeforeCall(String columnName, GetRelatedSchema q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling datasetRelatedColumnNameGet(Async)");
        }

        return datasetRelatedColumnNameGetCall(columnName, q, _callback);

    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return RelatedResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public RelatedResponseSchema datasetRelatedColumnNameGet(String columnName, GetRelatedSchema q) throws ApiException {
        ApiResponse<RelatedResponseSchema> localVarResp = datasetRelatedColumnNameGetWithHttpInfo(columnName, q);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @return ApiResponse&lt;RelatedResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelatedResponseSchema> datasetRelatedColumnNameGetWithHttpInfo(String columnName, GetRelatedSchema q) throws ApiException {
        okhttp3.Call localVarCall = datasetRelatedColumnNameGetValidateBeforeCall(columnName, q, null);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param columnName  (required)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Related column data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Fatal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetRelatedColumnNameGetAsync(String columnName, GetRelatedSchema q, final ApiCallback<RelatedResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetRelatedColumnNameGetValidateBeforeCall(columnName, q, _callback);
        Type localVarReturnType = new TypeToken<RelatedResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
