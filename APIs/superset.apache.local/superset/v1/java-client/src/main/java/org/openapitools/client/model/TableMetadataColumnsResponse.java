/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableMetadataColumnsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableMetadataColumnsResponse {
  public static final String SERIALIZED_NAME_DUPLICATES_CONSTRAINT = "duplicates_constraint";
  @SerializedName(SERIALIZED_NAME_DUPLICATES_CONSTRAINT)
  private String duplicatesConstraint;

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<String> keys = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_TYPE = "longType";
  @SerializedName(SERIALIZED_NAME_LONG_TYPE)
  private String longType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TableMetadataColumnsResponse() {
  }

  public TableMetadataColumnsResponse duplicatesConstraint(String duplicatesConstraint) {
    this.duplicatesConstraint = duplicatesConstraint;
    return this;
  }

  /**
   * Get duplicatesConstraint
   * @return duplicatesConstraint
   */
  @javax.annotation.Nullable
  public String getDuplicatesConstraint() {
    return duplicatesConstraint;
  }

  public void setDuplicatesConstraint(String duplicatesConstraint) {
    this.duplicatesConstraint = duplicatesConstraint;
  }


  public TableMetadataColumnsResponse keys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public TableMetadataColumnsResponse addKeysItem(String keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

  /**
   * 
   * @return keys
   */
  @javax.annotation.Nullable
  public List<String> getKeys() {
    return keys;
  }

  public void setKeys(List<String> keys) {
    this.keys = keys;
  }


  public TableMetadataColumnsResponse longType(String longType) {
    this.longType = longType;
    return this;
  }

  /**
   * The actual backend long type for the column
   * @return longType
   */
  @javax.annotation.Nullable
  public String getLongType() {
    return longType;
  }

  public void setLongType(String longType) {
    this.longType = longType;
  }


  public TableMetadataColumnsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The column name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TableMetadataColumnsResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The column type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableMetadataColumnsResponse tableMetadataColumnsResponse = (TableMetadataColumnsResponse) o;
    return Objects.equals(this.duplicatesConstraint, tableMetadataColumnsResponse.duplicatesConstraint) &&
        Objects.equals(this.keys, tableMetadataColumnsResponse.keys) &&
        Objects.equals(this.longType, tableMetadataColumnsResponse.longType) &&
        Objects.equals(this.name, tableMetadataColumnsResponse.name) &&
        Objects.equals(this.type, tableMetadataColumnsResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duplicatesConstraint, keys, longType, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableMetadataColumnsResponse {\n");
    sb.append("    duplicatesConstraint: ").append(toIndentedString(duplicatesConstraint)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    longType: ").append(toIndentedString(longType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duplicates_constraint");
    openapiFields.add("keys");
    openapiFields.add("longType");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableMetadataColumnsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableMetadataColumnsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableMetadataColumnsResponse is not found in the empty JSON string", TableMetadataColumnsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableMetadataColumnsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableMetadataColumnsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duplicates_constraint") != null && !jsonObj.get("duplicates_constraint").isJsonNull()) && !jsonObj.get("duplicates_constraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicates_constraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplicates_constraint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull() && !jsonObj.get("keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be an array in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      if ((jsonObj.get("longType") != null && !jsonObj.get("longType").isJsonNull()) && !jsonObj.get("longType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableMetadataColumnsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableMetadataColumnsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableMetadataColumnsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableMetadataColumnsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TableMetadataColumnsResponse>() {
           @Override
           public void write(JsonWriter out, TableMetadataColumnsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableMetadataColumnsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableMetadataColumnsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableMetadataColumnsResponse
   * @throws IOException if the JSON string is invalid with respect to TableMetadataColumnsResponse
   */
  public static TableMetadataColumnsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableMetadataColumnsResponse.class);
  }

  /**
   * Convert an instance of TableMetadataColumnsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

