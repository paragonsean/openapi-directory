/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnnotationLayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnnotationLayer {
  /**
   * Type of annotation layer
   */
  @JsonAdapter(AnnotationTypeEnum.Adapter.class)
  public enum AnnotationTypeEnum {
    FORMULA("FORMULA"),
    
    INTERVAL("INTERVAL"),
    
    EVENT("EVENT"),
    
    TIME_SERIES("TIME_SERIES");

    private String value;

    AnnotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationTypeEnum fromValue(String value) {
      for (AnnotationTypeEnum b : AnnotationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  private AnnotationTypeEnum annotationType;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DESCRIPTION_COLUMNS = "descriptionColumns";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_COLUMNS)
  private List<String> descriptionColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE_LINE = "hideLine";
  @SerializedName(SERIALIZED_NAME_HIDE_LINE)
  private Boolean hideLine;

  public static final String SERIALIZED_NAME_INTERVAL_END_COLUMN = "intervalEndColumn";
  @SerializedName(SERIALIZED_NAME_INTERVAL_END_COLUMN)
  private String intervalEndColumn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Opacity of layer
   */
  @JsonAdapter(OpacityEnum.Adapter.class)
  public enum OpacityEnum {
    EMPTY(""),
    
    OPACITY_LOW("opacityLow"),
    
    OPACITY_MEDIUM("opacityMedium"),
    
    OPACITY_HIGH("opacityHigh");

    private String value;

    OpacityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpacityEnum fromValue(String value) {
      for (OpacityEnum b : OpacityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OpacityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpacityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpacityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpacityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpacityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPACITY = "opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private OpacityEnum opacity;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private Map<String, Object> overrides;

  public static final String SERIALIZED_NAME_SHOW = "show";
  @SerializedName(SERIALIZED_NAME_SHOW)
  private Boolean show;

  public static final String SERIALIZED_NAME_SHOW_MARKERS = "showMarkers";
  @SerializedName(SERIALIZED_NAME_SHOW_MARKERS)
  private Boolean showMarkers;

  /**
   * Type of source for annotation data
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    EMPTY(""),
    
    LINE("line"),
    
    NATIVE("NATIVE"),
    
    TABLE("table");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  /**
   * Line style. Only applies to time-series annotations
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    DASHED("dashed"),
    
    DOTTED("dotted"),
    
    SOLID("solid"),
    
    LONG_DASHED("longDashed");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StyleEnum fromValue(String value) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private StyleEnum style;

  public static final String SERIALIZED_NAME_TIME_COLUMN = "timeColumn";
  @SerializedName(SERIALIZED_NAME_TIME_COLUMN)
  private String timeColumn;

  public static final String SERIALIZED_NAME_TITLE_COLUMN = "titleColumn";
  @SerializedName(SERIALIZED_NAME_TITLE_COLUMN)
  private String titleColumn;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value = null;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Float width;

  public AnnotationLayer() {
  }

  public AnnotationLayer annotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * Type of annotation layer
   * @return annotationType
   */
  @javax.annotation.Nullable
  public AnnotationTypeEnum getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
  }


  public AnnotationLayer color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Layer color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public AnnotationLayer descriptionColumns(List<String> descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
    return this;
  }

  public AnnotationLayer addDescriptionColumnsItem(String descriptionColumnsItem) {
    if (this.descriptionColumns == null) {
      this.descriptionColumns = new ArrayList<>();
    }
    this.descriptionColumns.add(descriptionColumnsItem);
    return this;
  }

  /**
   * Columns to use as the description. If none are provided, all will be shown.
   * @return descriptionColumns
   */
  @javax.annotation.Nullable
  public List<String> getDescriptionColumns() {
    return descriptionColumns;
  }

  public void setDescriptionColumns(List<String> descriptionColumns) {
    this.descriptionColumns = descriptionColumns;
  }


  public AnnotationLayer hideLine(Boolean hideLine) {
    this.hideLine = hideLine;
    return this;
  }

  /**
   * Should line be hidden. Only applies to line annotations
   * @return hideLine
   */
  @javax.annotation.Nullable
  public Boolean getHideLine() {
    return hideLine;
  }

  public void setHideLine(Boolean hideLine) {
    this.hideLine = hideLine;
  }


  public AnnotationLayer intervalEndColumn(String intervalEndColumn) {
    this.intervalEndColumn = intervalEndColumn;
    return this;
  }

  /**
   * Column containing end of interval. Only applies to interval layers
   * @return intervalEndColumn
   */
  @javax.annotation.Nullable
  public String getIntervalEndColumn() {
    return intervalEndColumn;
  }

  public void setIntervalEndColumn(String intervalEndColumn) {
    this.intervalEndColumn = intervalEndColumn;
  }


  public AnnotationLayer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of layer
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AnnotationLayer opacity(OpacityEnum opacity) {
    this.opacity = opacity;
    return this;
  }

  /**
   * Opacity of layer
   * @return opacity
   */
  @javax.annotation.Nullable
  public OpacityEnum getOpacity() {
    return opacity;
  }

  public void setOpacity(OpacityEnum opacity) {
    this.opacity = opacity;
  }


  public AnnotationLayer overrides(Map<String, Object> overrides) {
    this.overrides = overrides;
    return this;
  }

  public AnnotationLayer putOverridesItem(String key, Object overridesItem) {
    if (this.overrides == null) {
      this.overrides = new HashMap<>();
    }
    this.overrides.put(key, overridesItem);
    return this;
  }

  /**
   * which properties should be overridable
   * @return overrides
   */
  @javax.annotation.Nullable
  public Map<String, Object> getOverrides() {
    return overrides;
  }

  public void setOverrides(Map<String, Object> overrides) {
    this.overrides = overrides;
  }


  public AnnotationLayer show(Boolean show) {
    this.show = show;
    return this;
  }

  /**
   * Should the layer be shown
   * @return show
   */
  @javax.annotation.Nonnull
  public Boolean getShow() {
    return show;
  }

  public void setShow(Boolean show) {
    this.show = show;
  }


  public AnnotationLayer showMarkers(Boolean showMarkers) {
    this.showMarkers = showMarkers;
    return this;
  }

  /**
   * Should markers be shown. Only applies to line annotations.
   * @return showMarkers
   */
  @javax.annotation.Nonnull
  public Boolean getShowMarkers() {
    return showMarkers;
  }

  public void setShowMarkers(Boolean showMarkers) {
    this.showMarkers = showMarkers;
  }


  public AnnotationLayer sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Type of source for annotation data
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public AnnotationLayer style(StyleEnum style) {
    this.style = style;
    return this;
  }

  /**
   * Line style. Only applies to time-series annotations
   * @return style
   */
  @javax.annotation.Nullable
  public StyleEnum getStyle() {
    return style;
  }

  public void setStyle(StyleEnum style) {
    this.style = style;
  }


  public AnnotationLayer timeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
    return this;
  }

  /**
   * Column with event date or interval start date
   * @return timeColumn
   */
  @javax.annotation.Nullable
  public String getTimeColumn() {
    return timeColumn;
  }

  public void setTimeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
  }


  public AnnotationLayer titleColumn(String titleColumn) {
    this.titleColumn = titleColumn;
    return this;
  }

  /**
   * Column with title
   * @return titleColumn
   */
  @javax.annotation.Nullable
  public String getTitleColumn() {
    return titleColumn;
  }

  public void setTitleColumn(String titleColumn) {
    this.titleColumn = titleColumn;
  }


  public AnnotationLayer value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  public AnnotationLayer width(Float width) {
    this.width = width;
    return this;
  }

  /**
   * Width of annotation line
   * minimum: 0
   * @return width
   */
  @javax.annotation.Nullable
  public Float getWidth() {
    return width;
  }

  public void setWidth(Float width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotationLayer annotationLayer = (AnnotationLayer) o;
    return Objects.equals(this.annotationType, annotationLayer.annotationType) &&
        Objects.equals(this.color, annotationLayer.color) &&
        Objects.equals(this.descriptionColumns, annotationLayer.descriptionColumns) &&
        Objects.equals(this.hideLine, annotationLayer.hideLine) &&
        Objects.equals(this.intervalEndColumn, annotationLayer.intervalEndColumn) &&
        Objects.equals(this.name, annotationLayer.name) &&
        Objects.equals(this.opacity, annotationLayer.opacity) &&
        Objects.equals(this.overrides, annotationLayer.overrides) &&
        Objects.equals(this.show, annotationLayer.show) &&
        Objects.equals(this.showMarkers, annotationLayer.showMarkers) &&
        Objects.equals(this.sourceType, annotationLayer.sourceType) &&
        Objects.equals(this.style, annotationLayer.style) &&
        Objects.equals(this.timeColumn, annotationLayer.timeColumn) &&
        Objects.equals(this.titleColumn, annotationLayer.titleColumn) &&
        Objects.equals(this.value, annotationLayer.value) &&
        Objects.equals(this.width, annotationLayer.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationType, color, descriptionColumns, hideLine, intervalEndColumn, name, opacity, overrides, show, showMarkers, sourceType, style, timeColumn, titleColumn, value, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotationLayer {\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    descriptionColumns: ").append(toIndentedString(descriptionColumns)).append("\n");
    sb.append("    hideLine: ").append(toIndentedString(hideLine)).append("\n");
    sb.append("    intervalEndColumn: ").append(toIndentedString(intervalEndColumn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("    showMarkers: ").append(toIndentedString(showMarkers)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    timeColumn: ").append(toIndentedString(timeColumn)).append("\n");
    sb.append("    titleColumn: ").append(toIndentedString(titleColumn)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationType");
    openapiFields.add("color");
    openapiFields.add("descriptionColumns");
    openapiFields.add("hideLine");
    openapiFields.add("intervalEndColumn");
    openapiFields.add("name");
    openapiFields.add("opacity");
    openapiFields.add("overrides");
    openapiFields.add("show");
    openapiFields.add("showMarkers");
    openapiFields.add("sourceType");
    openapiFields.add("style");
    openapiFields.add("timeColumn");
    openapiFields.add("titleColumn");
    openapiFields.add("value");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("show");
    openapiRequiredFields.add("showMarkers");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnnotationLayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnnotationLayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnnotationLayer is not found in the empty JSON string", AnnotationLayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnnotationLayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnnotationLayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnnotationLayer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      // validate the optional field `annotationType`
      if (jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) {
        AnnotationTypeEnum.validateJsonElement(jsonObj.get("annotationType"));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("descriptionColumns") != null && !jsonObj.get("descriptionColumns").isJsonNull() && !jsonObj.get("descriptionColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionColumns` to be an array in the JSON string but got `%s`", jsonObj.get("descriptionColumns").toString()));
      }
      if ((jsonObj.get("intervalEndColumn") != null && !jsonObj.get("intervalEndColumn").isJsonNull()) && !jsonObj.get("intervalEndColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalEndColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalEndColumn").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("opacity") != null && !jsonObj.get("opacity").isJsonNull()) && !jsonObj.get("opacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opacity").toString()));
      }
      // validate the optional field `opacity`
      if (jsonObj.get("opacity") != null && !jsonObj.get("opacity").isJsonNull()) {
        OpacityEnum.validateJsonElement(jsonObj.get("opacity"));
      }
      if ((jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) && !jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        StyleEnum.validateJsonElement(jsonObj.get("style"));
      }
      if ((jsonObj.get("timeColumn") != null && !jsonObj.get("timeColumn").isJsonNull()) && !jsonObj.get("timeColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeColumn").toString()));
      }
      if ((jsonObj.get("titleColumn") != null && !jsonObj.get("titleColumn").isJsonNull()) && !jsonObj.get("titleColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleColumn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnnotationLayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnnotationLayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnnotationLayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnnotationLayer.class));

       return (TypeAdapter<T>) new TypeAdapter<AnnotationLayer>() {
           @Override
           public void write(JsonWriter out, AnnotationLayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnnotationLayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnnotationLayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnnotationLayer
   * @throws IOException if the JSON string is invalid with respect to AnnotationLayer
   */
  public static AnnotationLayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnnotationLayer.class);
  }

  /**
   * Convert an instance of AnnotationLayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

