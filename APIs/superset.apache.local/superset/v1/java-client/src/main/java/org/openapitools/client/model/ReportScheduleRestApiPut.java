/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportRecipient;
import org.openapitools.client.model.ValidatorConfigJSON;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportScheduleRestApiPut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportScheduleRestApiPut {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CHART = "chart";
  @SerializedName(SERIALIZED_NAME_CHART)
  private Integer chart;

  public static final String SERIALIZED_NAME_CONTEXT_MARKDOWN = "context_markdown";
  @SerializedName(SERIALIZED_NAME_CONTEXT_MARKDOWN)
  private String contextMarkdown;

  public static final String SERIALIZED_NAME_CREATION_METHOD = "creation_method";
  @SerializedName(SERIALIZED_NAME_CREATION_METHOD)
  private Object creationMethod = null;

  public static final String SERIALIZED_NAME_CRONTAB = "crontab";
  @SerializedName(SERIALIZED_NAME_CRONTAB)
  private String crontab;

  public static final String SERIALIZED_NAME_DASHBOARD = "dashboard";
  @SerializedName(SERIALIZED_NAME_DASHBOARD)
  private Integer dashboard;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Integer database;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "grace_period";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_LOG_RETENTION = "log_retention";
  @SerializedName(SERIALIZED_NAME_LOG_RETENTION)
  private Integer logRetention;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<Integer> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<ReportRecipient> recipients = new ArrayList<>();

  /**
   * Gets or Sets reportFormat
   */
  @JsonAdapter(ReportFormatEnum.Adapter.class)
  public enum ReportFormatEnum {
    PNG("PNG"),
    
    CSV("CSV"),
    
    TEXT("TEXT");

    private String value;

    ReportFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportFormatEnum fromValue(String value) {
      for (ReportFormatEnum b : ReportFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_FORMAT = "report_format";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT)
  private ReportFormatEnum reportFormat;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  /**
   * The report schedule type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALERT("Alert"),
    
    REPORT("Report");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALIDATOR_CONFIG_JSON = "validator_config_json";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_CONFIG_JSON)
  private ValidatorConfigJSON validatorConfigJson;

  /**
   * Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types: - Not Null - When the return value is Not NULL, Empty, or 0 - Operator - When &#x60;sql_return_value comparison_operator threshold&#x60; is True e.g. &#x60;50 &lt;&#x3D; 75&#x60;&lt;br&gt;Supports the comparison operators &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;&#x3D;, and !&#x3D;
   */
  @JsonAdapter(ValidatorTypeEnum.Adapter.class)
  public enum ValidatorTypeEnum {
    NOT_NULL("not null"),
    
    OPERATOR("operator");

    private String value;

    ValidatorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidatorTypeEnum fromValue(String value) {
      for (ValidatorTypeEnum b : ValidatorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ValidatorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidatorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidatorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidatorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidatorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATOR_TYPE = "validator_type";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_TYPE)
  private ValidatorTypeEnum validatorType;

  public static final String SERIALIZED_NAME_WORKING_TIMEOUT = "working_timeout";
  @SerializedName(SERIALIZED_NAME_WORKING_TIMEOUT)
  private Integer workingTimeout;

  public ReportScheduleRestApiPut() {
  }

  public ReportScheduleRestApiPut active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ReportScheduleRestApiPut chart(Integer chart) {
    this.chart = chart;
    return this;
  }

  /**
   * Get chart
   * @return chart
   */
  @javax.annotation.Nullable
  public Integer getChart() {
    return chart;
  }

  public void setChart(Integer chart) {
    this.chart = chart;
  }


  public ReportScheduleRestApiPut contextMarkdown(String contextMarkdown) {
    this.contextMarkdown = contextMarkdown;
    return this;
  }

  /**
   * Markdown description
   * @return contextMarkdown
   */
  @javax.annotation.Nullable
  public String getContextMarkdown() {
    return contextMarkdown;
  }

  public void setContextMarkdown(String contextMarkdown) {
    this.contextMarkdown = contextMarkdown;
  }


  public ReportScheduleRestApiPut creationMethod(Object creationMethod) {
    this.creationMethod = creationMethod;
    return this;
  }

  /**
   * Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.
   * @return creationMethod
   */
  @javax.annotation.Nullable
  public Object getCreationMethod() {
    return creationMethod;
  }

  public void setCreationMethod(Object creationMethod) {
    this.creationMethod = creationMethod;
  }


  public ReportScheduleRestApiPut crontab(String crontab) {
    this.crontab = crontab;
    return this;
  }

  /**
   * A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.
   * @return crontab
   */
  @javax.annotation.Nullable
  public String getCrontab() {
    return crontab;
  }

  public void setCrontab(String crontab) {
    this.crontab = crontab;
  }


  public ReportScheduleRestApiPut dashboard(Integer dashboard) {
    this.dashboard = dashboard;
    return this;
  }

  /**
   * Get dashboard
   * @return dashboard
   */
  @javax.annotation.Nullable
  public Integer getDashboard() {
    return dashboard;
  }

  public void setDashboard(Integer dashboard) {
    this.dashboard = dashboard;
  }


  public ReportScheduleRestApiPut database(Integer database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public Integer getDatabase() {
    return database;
  }

  public void setDatabase(Integer database) {
    this.database = database;
  }


  public ReportScheduleRestApiPut description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Use a nice description to give context to this Alert/Report
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReportScheduleRestApiPut gracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)
   * minimum: 1
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public Integer getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ReportScheduleRestApiPut logRetention(Integer logRetention) {
    this.logRetention = logRetention;
    return this;
  }

  /**
   * How long to keep the logs around for this report (in days)
   * minimum: 1
   * @return logRetention
   */
  @javax.annotation.Nullable
  public Integer getLogRetention() {
    return logRetention;
  }

  public void setLogRetention(Integer logRetention) {
    this.logRetention = logRetention;
  }


  public ReportScheduleRestApiPut name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The report schedule name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReportScheduleRestApiPut owners(List<Integer> owners) {
    this.owners = owners;
    return this;
  }

  public ReportScheduleRestApiPut addOwnersItem(Integer ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

  /**
   * Get owners
   * @return owners
   */
  @javax.annotation.Nullable
  public List<Integer> getOwners() {
    return owners;
  }

  public void setOwners(List<Integer> owners) {
    this.owners = owners;
  }


  public ReportScheduleRestApiPut recipients(List<ReportRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ReportScheduleRestApiPut addRecipientsItem(ReportRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<ReportRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<ReportRecipient> recipients) {
    this.recipients = recipients;
  }


  public ReportScheduleRestApiPut reportFormat(ReportFormatEnum reportFormat) {
    this.reportFormat = reportFormat;
    return this;
  }

  /**
   * Get reportFormat
   * @return reportFormat
   */
  @javax.annotation.Nullable
  public ReportFormatEnum getReportFormat() {
    return reportFormat;
  }

  public void setReportFormat(ReportFormatEnum reportFormat) {
    this.reportFormat = reportFormat;
  }


  public ReportScheduleRestApiPut sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public ReportScheduleRestApiPut timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * A timezone string that represents the location of the timezone.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public ReportScheduleRestApiPut type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The report schedule type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ReportScheduleRestApiPut validatorConfigJson(ValidatorConfigJSON validatorConfigJson) {
    this.validatorConfigJson = validatorConfigJson;
    return this;
  }

  /**
   * Get validatorConfigJson
   * @return validatorConfigJson
   */
  @javax.annotation.Nullable
  public ValidatorConfigJSON getValidatorConfigJson() {
    return validatorConfigJson;
  }

  public void setValidatorConfigJson(ValidatorConfigJSON validatorConfigJson) {
    this.validatorConfigJson = validatorConfigJson;
  }


  public ReportScheduleRestApiPut validatorType(ValidatorTypeEnum validatorType) {
    this.validatorType = validatorType;
    return this;
  }

  /**
   * Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types: - Not Null - When the return value is Not NULL, Empty, or 0 - Operator - When &#x60;sql_return_value comparison_operator threshold&#x60; is True e.g. &#x60;50 &lt;&#x3D; 75&#x60;&lt;br&gt;Supports the comparison operators &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;&#x3D;, and !&#x3D;
   * @return validatorType
   */
  @javax.annotation.Nullable
  public ValidatorTypeEnum getValidatorType() {
    return validatorType;
  }

  public void setValidatorType(ValidatorTypeEnum validatorType) {
    this.validatorType = validatorType;
  }


  public ReportScheduleRestApiPut workingTimeout(Integer workingTimeout) {
    this.workingTimeout = workingTimeout;
    return this;
  }

  /**
   * If an alert is staled at a working state, how long until it&#39;s state is reseted to error
   * minimum: 1
   * @return workingTimeout
   */
  @javax.annotation.Nullable
  public Integer getWorkingTimeout() {
    return workingTimeout;
  }

  public void setWorkingTimeout(Integer workingTimeout) {
    this.workingTimeout = workingTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportScheduleRestApiPut reportScheduleRestApiPut = (ReportScheduleRestApiPut) o;
    return Objects.equals(this.active, reportScheduleRestApiPut.active) &&
        Objects.equals(this.chart, reportScheduleRestApiPut.chart) &&
        Objects.equals(this.contextMarkdown, reportScheduleRestApiPut.contextMarkdown) &&
        Objects.equals(this.creationMethod, reportScheduleRestApiPut.creationMethod) &&
        Objects.equals(this.crontab, reportScheduleRestApiPut.crontab) &&
        Objects.equals(this.dashboard, reportScheduleRestApiPut.dashboard) &&
        Objects.equals(this.database, reportScheduleRestApiPut.database) &&
        Objects.equals(this.description, reportScheduleRestApiPut.description) &&
        Objects.equals(this.gracePeriod, reportScheduleRestApiPut.gracePeriod) &&
        Objects.equals(this.logRetention, reportScheduleRestApiPut.logRetention) &&
        Objects.equals(this.name, reportScheduleRestApiPut.name) &&
        Objects.equals(this.owners, reportScheduleRestApiPut.owners) &&
        Objects.equals(this.recipients, reportScheduleRestApiPut.recipients) &&
        Objects.equals(this.reportFormat, reportScheduleRestApiPut.reportFormat) &&
        Objects.equals(this.sql, reportScheduleRestApiPut.sql) &&
        Objects.equals(this.timezone, reportScheduleRestApiPut.timezone) &&
        Objects.equals(this.type, reportScheduleRestApiPut.type) &&
        Objects.equals(this.validatorConfigJson, reportScheduleRestApiPut.validatorConfigJson) &&
        Objects.equals(this.validatorType, reportScheduleRestApiPut.validatorType) &&
        Objects.equals(this.workingTimeout, reportScheduleRestApiPut.workingTimeout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, chart, contextMarkdown, creationMethod, crontab, dashboard, database, description, gracePeriod, logRetention, name, owners, recipients, reportFormat, sql, timezone, type, validatorConfigJson, validatorType, workingTimeout);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportScheduleRestApiPut {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("    contextMarkdown: ").append(toIndentedString(contextMarkdown)).append("\n");
    sb.append("    creationMethod: ").append(toIndentedString(creationMethod)).append("\n");
    sb.append("    crontab: ").append(toIndentedString(crontab)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    logRetention: ").append(toIndentedString(logRetention)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    reportFormat: ").append(toIndentedString(reportFormat)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validatorConfigJson: ").append(toIndentedString(validatorConfigJson)).append("\n");
    sb.append("    validatorType: ").append(toIndentedString(validatorType)).append("\n");
    sb.append("    workingTimeout: ").append(toIndentedString(workingTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("chart");
    openapiFields.add("context_markdown");
    openapiFields.add("creation_method");
    openapiFields.add("crontab");
    openapiFields.add("dashboard");
    openapiFields.add("database");
    openapiFields.add("description");
    openapiFields.add("grace_period");
    openapiFields.add("log_retention");
    openapiFields.add("name");
    openapiFields.add("owners");
    openapiFields.add("recipients");
    openapiFields.add("report_format");
    openapiFields.add("sql");
    openapiFields.add("timezone");
    openapiFields.add("type");
    openapiFields.add("validator_config_json");
    openapiFields.add("validator_type");
    openapiFields.add("working_timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportScheduleRestApiPut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportScheduleRestApiPut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportScheduleRestApiPut is not found in the empty JSON string", ReportScheduleRestApiPut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportScheduleRestApiPut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportScheduleRestApiPut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("context_markdown") != null && !jsonObj.get("context_markdown").isJsonNull()) && !jsonObj.get("context_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context_markdown").toString()));
      }
      if ((jsonObj.get("crontab") != null && !jsonObj.get("crontab").isJsonNull()) && !jsonObj.get("crontab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crontab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crontab").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull() && !jsonObj.get("owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            ReportRecipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      if ((jsonObj.get("report_format") != null && !jsonObj.get("report_format").isJsonNull()) && !jsonObj.get("report_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_format").toString()));
      }
      // validate the optional field `report_format`
      if (jsonObj.get("report_format") != null && !jsonObj.get("report_format").isJsonNull()) {
        ReportFormatEnum.validateJsonElement(jsonObj.get("report_format"));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `validator_config_json`
      if (jsonObj.get("validator_config_json") != null && !jsonObj.get("validator_config_json").isJsonNull()) {
        ValidatorConfigJSON.validateJsonElement(jsonObj.get("validator_config_json"));
      }
      if ((jsonObj.get("validator_type") != null && !jsonObj.get("validator_type").isJsonNull()) && !jsonObj.get("validator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator_type").toString()));
      }
      // validate the optional field `validator_type`
      if (jsonObj.get("validator_type") != null && !jsonObj.get("validator_type").isJsonNull()) {
        ValidatorTypeEnum.validateJsonElement(jsonObj.get("validator_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportScheduleRestApiPut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportScheduleRestApiPut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportScheduleRestApiPut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportScheduleRestApiPut.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportScheduleRestApiPut>() {
           @Override
           public void write(JsonWriter out, ReportScheduleRestApiPut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportScheduleRestApiPut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportScheduleRestApiPut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportScheduleRestApiPut
   * @throws IOException if the JSON string is invalid with respect to ReportScheduleRestApiPut
   */
  public static ReportScheduleRestApiPut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportScheduleRestApiPut.class);
  }

  /**
   * Convert an instance of ReportScheduleRestApiPut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

