/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TableMetadataOptionsResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableMetadataForeignKeysIndexesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:21.510964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableMetadataForeignKeysIndexesResponse {
  public static final String SERIALIZED_NAME_COLUMN_NAMES = "column_names";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAMES)
  private List<String> columnNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private TableMetadataOptionsResponse options;

  public static final String SERIALIZED_NAME_REFERRED_COLUMNS = "referred_columns";
  @SerializedName(SERIALIZED_NAME_REFERRED_COLUMNS)
  private List<String> referredColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERRED_SCHEMA = "referred_schema";
  @SerializedName(SERIALIZED_NAME_REFERRED_SCHEMA)
  private String referredSchema;

  public static final String SERIALIZED_NAME_REFERRED_TABLE = "referred_table";
  @SerializedName(SERIALIZED_NAME_REFERRED_TABLE)
  private String referredTable;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TableMetadataForeignKeysIndexesResponse() {
  }

  public TableMetadataForeignKeysIndexesResponse columnNames(List<String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public TableMetadataForeignKeysIndexesResponse addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

  /**
   * Get columnNames
   * @return columnNames
   */
  @javax.annotation.Nullable
  public List<String> getColumnNames() {
    return columnNames;
  }

  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }


  public TableMetadataForeignKeysIndexesResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the foreign key or index
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TableMetadataForeignKeysIndexesResponse options(TableMetadataOptionsResponse options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public TableMetadataOptionsResponse getOptions() {
    return options;
  }

  public void setOptions(TableMetadataOptionsResponse options) {
    this.options = options;
  }


  public TableMetadataForeignKeysIndexesResponse referredColumns(List<String> referredColumns) {
    this.referredColumns = referredColumns;
    return this;
  }

  public TableMetadataForeignKeysIndexesResponse addReferredColumnsItem(String referredColumnsItem) {
    if (this.referredColumns == null) {
      this.referredColumns = new ArrayList<>();
    }
    this.referredColumns.add(referredColumnsItem);
    return this;
  }

  /**
   * Get referredColumns
   * @return referredColumns
   */
  @javax.annotation.Nullable
  public List<String> getReferredColumns() {
    return referredColumns;
  }

  public void setReferredColumns(List<String> referredColumns) {
    this.referredColumns = referredColumns;
  }


  public TableMetadataForeignKeysIndexesResponse referredSchema(String referredSchema) {
    this.referredSchema = referredSchema;
    return this;
  }

  /**
   * Get referredSchema
   * @return referredSchema
   */
  @javax.annotation.Nullable
  public String getReferredSchema() {
    return referredSchema;
  }

  public void setReferredSchema(String referredSchema) {
    this.referredSchema = referredSchema;
  }


  public TableMetadataForeignKeysIndexesResponse referredTable(String referredTable) {
    this.referredTable = referredTable;
    return this;
  }

  /**
   * Get referredTable
   * @return referredTable
   */
  @javax.annotation.Nullable
  public String getReferredTable() {
    return referredTable;
  }

  public void setReferredTable(String referredTable) {
    this.referredTable = referredTable;
  }


  public TableMetadataForeignKeysIndexesResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableMetadataForeignKeysIndexesResponse tableMetadataForeignKeysIndexesResponse = (TableMetadataForeignKeysIndexesResponse) o;
    return Objects.equals(this.columnNames, tableMetadataForeignKeysIndexesResponse.columnNames) &&
        Objects.equals(this.name, tableMetadataForeignKeysIndexesResponse.name) &&
        Objects.equals(this.options, tableMetadataForeignKeysIndexesResponse.options) &&
        Objects.equals(this.referredColumns, tableMetadataForeignKeysIndexesResponse.referredColumns) &&
        Objects.equals(this.referredSchema, tableMetadataForeignKeysIndexesResponse.referredSchema) &&
        Objects.equals(this.referredTable, tableMetadataForeignKeysIndexesResponse.referredTable) &&
        Objects.equals(this.type, tableMetadataForeignKeysIndexesResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnNames, name, options, referredColumns, referredSchema, referredTable, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableMetadataForeignKeysIndexesResponse {\n");
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    referredColumns: ").append(toIndentedString(referredColumns)).append("\n");
    sb.append("    referredSchema: ").append(toIndentedString(referredSchema)).append("\n");
    sb.append("    referredTable: ").append(toIndentedString(referredTable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column_names");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("referred_columns");
    openapiFields.add("referred_schema");
    openapiFields.add("referred_table");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableMetadataForeignKeysIndexesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableMetadataForeignKeysIndexesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableMetadataForeignKeysIndexesResponse is not found in the empty JSON string", TableMetadataForeignKeysIndexesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableMetadataForeignKeysIndexesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableMetadataForeignKeysIndexesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("column_names") != null && !jsonObj.get("column_names").isJsonNull() && !jsonObj.get("column_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_names` to be an array in the JSON string but got `%s`", jsonObj.get("column_names").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        TableMetadataOptionsResponse.validateJsonElement(jsonObj.get("options"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("referred_columns") != null && !jsonObj.get("referred_columns").isJsonNull() && !jsonObj.get("referred_columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `referred_columns` to be an array in the JSON string but got `%s`", jsonObj.get("referred_columns").toString()));
      }
      if ((jsonObj.get("referred_schema") != null && !jsonObj.get("referred_schema").isJsonNull()) && !jsonObj.get("referred_schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referred_schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referred_schema").toString()));
      }
      if ((jsonObj.get("referred_table") != null && !jsonObj.get("referred_table").isJsonNull()) && !jsonObj.get("referred_table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referred_table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referred_table").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableMetadataForeignKeysIndexesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableMetadataForeignKeysIndexesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableMetadataForeignKeysIndexesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableMetadataForeignKeysIndexesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TableMetadataForeignKeysIndexesResponse>() {
           @Override
           public void write(JsonWriter out, TableMetadataForeignKeysIndexesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableMetadataForeignKeysIndexesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableMetadataForeignKeysIndexesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableMetadataForeignKeysIndexesResponse
   * @throws IOException if the JSON string is invalid with respect to TableMetadataForeignKeysIndexesResponse
   */
  public static TableMetadataForeignKeysIndexesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableMetadataForeignKeysIndexesResponse.class);
  }

  /**
   * Convert an instance of TableMetadataForeignKeysIndexesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

