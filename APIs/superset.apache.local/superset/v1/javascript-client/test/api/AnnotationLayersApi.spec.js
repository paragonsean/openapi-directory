/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.AnnotationLayersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnnotationLayersApi', function() {
    describe('annotationLayerDelete', function() {
      it('should call annotationLayerDelete successfully', function(done) {
        //uncomment below and update the code to test annotationLayerDelete
        //instance.annotationLayerDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerGet', function() {
      it('should call annotationLayerGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerGet
        //instance.annotationLayerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerInfoGet', function() {
      it('should call annotationLayerInfoGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerInfoGet
        //instance.annotationLayerInfoGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationAnnotationIdDelete', function() {
      it('should call annotationLayerPkAnnotationAnnotationIdDelete successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationAnnotationIdDelete
        //instance.annotationLayerPkAnnotationAnnotationIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationAnnotationIdGet', function() {
      it('should call annotationLayerPkAnnotationAnnotationIdGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationAnnotationIdGet
        //instance.annotationLayerPkAnnotationAnnotationIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationAnnotationIdPut', function() {
      it('should call annotationLayerPkAnnotationAnnotationIdPut successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationAnnotationIdPut
        //instance.annotationLayerPkAnnotationAnnotationIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationDelete', function() {
      it('should call annotationLayerPkAnnotationDelete successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationDelete
        //instance.annotationLayerPkAnnotationDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationGet', function() {
      it('should call annotationLayerPkAnnotationGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationGet
        //instance.annotationLayerPkAnnotationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkAnnotationPost', function() {
      it('should call annotationLayerPkAnnotationPost successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkAnnotationPost
        //instance.annotationLayerPkAnnotationPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkDelete', function() {
      it('should call annotationLayerPkDelete successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkDelete
        //instance.annotationLayerPkDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkGet', function() {
      it('should call annotationLayerPkGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkGet
        //instance.annotationLayerPkGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPkPut', function() {
      it('should call annotationLayerPkPut successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPkPut
        //instance.annotationLayerPkPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerPost', function() {
      it('should call annotationLayerPost successfully', function(done) {
        //uncomment below and update the code to test annotationLayerPost
        //instance.annotationLayerPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLayerRelatedColumnNameGet', function() {
      it('should call annotationLayerRelatedColumnNameGet successfully', function(done) {
        //uncomment below and update the code to test annotationLayerRelatedColumnNameGet
        //instance.annotationLayerRelatedColumnNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
