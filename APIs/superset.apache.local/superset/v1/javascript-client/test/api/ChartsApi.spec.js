/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.ChartsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChartsApi', function() {
    describe('chartDataCacheKeyGet', function() {
      it('should call chartDataCacheKeyGet successfully', function(done) {
        //uncomment below and update the code to test chartDataCacheKeyGet
        //instance.chartDataCacheKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartDataPost', function() {
      it('should call chartDataPost successfully', function(done) {
        //uncomment below and update the code to test chartDataPost
        //instance.chartDataPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartDelete', function() {
      it('should call chartDelete successfully', function(done) {
        //uncomment below and update the code to test chartDelete
        //instance.chartDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartExportGet', function() {
      it('should call chartExportGet successfully', function(done) {
        //uncomment below and update the code to test chartExportGet
        //instance.chartExportGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartFavoriteStatusGet', function() {
      it('should call chartFavoriteStatusGet successfully', function(done) {
        //uncomment below and update the code to test chartFavoriteStatusGet
        //instance.chartFavoriteStatusGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartGet', function() {
      it('should call chartGet successfully', function(done) {
        //uncomment below and update the code to test chartGet
        //instance.chartGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartImportPost', function() {
      it('should call chartImportPost successfully', function(done) {
        //uncomment below and update the code to test chartImportPost
        //instance.chartImportPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartInfoGet', function() {
      it('should call chartInfoGet successfully', function(done) {
        //uncomment below and update the code to test chartInfoGet
        //instance.chartInfoGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkCacheScreenshotGet', function() {
      it('should call chartPkCacheScreenshotGet successfully', function(done) {
        //uncomment below and update the code to test chartPkCacheScreenshotGet
        //instance.chartPkCacheScreenshotGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkDataGet', function() {
      it('should call chartPkDataGet successfully', function(done) {
        //uncomment below and update the code to test chartPkDataGet
        //instance.chartPkDataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkDelete', function() {
      it('should call chartPkDelete successfully', function(done) {
        //uncomment below and update the code to test chartPkDelete
        //instance.chartPkDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkGet', function() {
      it('should call chartPkGet successfully', function(done) {
        //uncomment below and update the code to test chartPkGet
        //instance.chartPkGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkPut', function() {
      it('should call chartPkPut successfully', function(done) {
        //uncomment below and update the code to test chartPkPut
        //instance.chartPkPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkScreenshotDigestGet', function() {
      it('should call chartPkScreenshotDigestGet successfully', function(done) {
        //uncomment below and update the code to test chartPkScreenshotDigestGet
        //instance.chartPkScreenshotDigestGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPkThumbnailDigestGet', function() {
      it('should call chartPkThumbnailDigestGet successfully', function(done) {
        //uncomment below and update the code to test chartPkThumbnailDigestGet
        //instance.chartPkThumbnailDigestGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartPost', function() {
      it('should call chartPost successfully', function(done) {
        //uncomment below and update the code to test chartPost
        //instance.chartPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chartRelatedColumnNameGet', function() {
      it('should call chartRelatedColumnNameGet successfully', function(done) {
        //uncomment below and update the code to test chartRelatedColumnNameGet
        //instance.chartRelatedColumnNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
