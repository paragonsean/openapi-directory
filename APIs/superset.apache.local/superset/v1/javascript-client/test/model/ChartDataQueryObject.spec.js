/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.ChartDataQueryObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChartDataQueryObject', function() {
    it('should create an instance of ChartDataQueryObject', function() {
      // uncomment below and update the code to test ChartDataQueryObject
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be.a(Superset.ChartDataQueryObject);
    });

    it('should have the property annotationLayers (base name: "annotation_layers")', function() {
      // uncomment below and update the code to test the property annotationLayers
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property appliedTimeExtras (base name: "applied_time_extras")', function() {
      // uncomment below and update the code to test the property appliedTimeExtras
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property applyFetchValuesPredicate (base name: "apply_fetch_values_predicate")', function() {
      // uncomment below and update the code to test the property applyFetchValuesPredicate
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property columns (base name: "columns")', function() {
      // uncomment below and update the code to test the property columns
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property datasource (base name: "datasource")', function() {
      // uncomment below and update the code to test the property datasource
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property druidTimeOrigin (base name: "druid_time_origin")', function() {
      // uncomment below and update the code to test the property druidTimeOrigin
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property extras (base name: "extras")', function() {
      // uncomment below and update the code to test the property extras
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property filters (base name: "filters")', function() {
      // uncomment below and update the code to test the property filters
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property granularity (base name: "granularity")', function() {
      // uncomment below and update the code to test the property granularity
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property granularitySqla (base name: "granularity_sqla")', function() {
      // uncomment below and update the code to test the property granularitySqla
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property groupby (base name: "groupby")', function() {
      // uncomment below and update the code to test the property groupby
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property having (base name: "having")', function() {
      // uncomment below and update the code to test the property having
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property havingFilters (base name: "having_filters")', function() {
      // uncomment below and update the code to test the property havingFilters
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property isRowcount (base name: "is_rowcount")', function() {
      // uncomment below and update the code to test the property isRowcount
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property isTimeseries (base name: "is_timeseries")', function() {
      // uncomment below and update the code to test the property isTimeseries
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property orderDesc (base name: "order_desc")', function() {
      // uncomment below and update the code to test the property orderDesc
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property orderby (base name: "orderby")', function() {
      // uncomment below and update the code to test the property orderby
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property postProcessing (base name: "post_processing")', function() {
      // uncomment below and update the code to test the property postProcessing
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property resultType (base name: "result_type")', function() {
      // uncomment below and update the code to test the property resultType
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property rowLimit (base name: "row_limit")', function() {
      // uncomment below and update the code to test the property rowLimit
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property rowOffset (base name: "row_offset")', function() {
      // uncomment below and update the code to test the property rowOffset
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property timeOffsets (base name: "time_offsets")', function() {
      // uncomment below and update the code to test the property timeOffsets
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property timeRange (base name: "time_range")', function() {
      // uncomment below and update the code to test the property timeRange
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property timeShift (base name: "time_shift")', function() {
      // uncomment below and update the code to test the property timeShift
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property timeseriesLimit (base name: "timeseries_limit")', function() {
      // uncomment below and update the code to test the property timeseriesLimit
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property timeseriesLimitMetric (base name: "timeseries_limit_metric")', function() {
      // uncomment below and update the code to test the property timeseriesLimitMetric
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property urlParams (base name: "url_params")', function() {
      // uncomment below and update the code to test the property urlParams
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

    it('should have the property where (base name: "where")', function() {
      // uncomment below and update the code to test the property where
      //var instance = new Superset.ChartDataQueryObject();
      //expect(instance).to.be();
    });

  });

}));
