/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.AnnotationLayer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnnotationLayer', function() {
    it('should create an instance of AnnotationLayer', function() {
      // uncomment below and update the code to test AnnotationLayer
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be.a(Superset.AnnotationLayer);
    });

    it('should have the property annotationType (base name: "annotationType")', function() {
      // uncomment below and update the code to test the property annotationType
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property descriptionColumns (base name: "descriptionColumns")', function() {
      // uncomment below and update the code to test the property descriptionColumns
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property hideLine (base name: "hideLine")', function() {
      // uncomment below and update the code to test the property hideLine
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property intervalEndColumn (base name: "intervalEndColumn")', function() {
      // uncomment below and update the code to test the property intervalEndColumn
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property opacity (base name: "opacity")', function() {
      // uncomment below and update the code to test the property opacity
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property overrides (base name: "overrides")', function() {
      // uncomment below and update the code to test the property overrides
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property show (base name: "show")', function() {
      // uncomment below and update the code to test the property show
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property showMarkers (base name: "showMarkers")', function() {
      // uncomment below and update the code to test the property showMarkers
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property sourceType (base name: "sourceType")', function() {
      // uncomment below and update the code to test the property sourceType
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property style (base name: "style")', function() {
      // uncomment below and update the code to test the property style
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property timeColumn (base name: "timeColumn")', function() {
      // uncomment below and update the code to test the property timeColumn
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property titleColumn (base name: "titleColumn")', function() {
      // uncomment below and update the code to test the property titleColumn
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new Superset.AnnotationLayer();
      //expect(instance).to.be();
    });

  });

}));
