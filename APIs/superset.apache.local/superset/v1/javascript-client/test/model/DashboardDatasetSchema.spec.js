/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.DashboardDatasetSchema();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DashboardDatasetSchema', function() {
    it('should create an instance of DashboardDatasetSchema', function() {
      // uncomment below and update the code to test DashboardDatasetSchema
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be.a(Superset.DashboardDatasetSchema);
    });

    it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
      // uncomment below and update the code to test the property cacheTimeout
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property columnFormats (base name: "column_formats")', function() {
      // uncomment below and update the code to test the property columnFormats
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property columnTypes (base name: "column_types")', function() {
      // uncomment below and update the code to test the property columnTypes
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property columns (base name: "columns")', function() {
      // uncomment below and update the code to test the property columns
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property database (base name: "database")', function() {
      // uncomment below and update the code to test the property database
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property datasourceName (base name: "datasource_name")', function() {
      // uncomment below and update the code to test the property datasourceName
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property defaultEndpoint (base name: "default_endpoint")', function() {
      // uncomment below and update the code to test the property defaultEndpoint
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property editUrl (base name: "edit_url")', function() {
      // uncomment below and update the code to test the property editUrl
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property fetchValuesPredicate (base name: "fetch_values_predicate")', function() {
      // uncomment below and update the code to test the property fetchValuesPredicate
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property filterSelect (base name: "filter_select")', function() {
      // uncomment below and update the code to test the property filterSelect
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property filterSelectEnabled (base name: "filter_select_enabled")', function() {
      // uncomment below and update the code to test the property filterSelectEnabled
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property granularitySqla (base name: "granularity_sqla")', function() {
      // uncomment below and update the code to test the property granularitySqla
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckMessage (base name: "health_check_message")', function() {
      // uncomment below and update the code to test the property healthCheckMessage
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property isSqllabView (base name: "is_sqllab_view")', function() {
      // uncomment below and update the code to test the property isSqllabView
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property mainDttmCol (base name: "main_dttm_col")', function() {
      // uncomment below and update the code to test the property mainDttmCol
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property orderByChoices (base name: "order_by_choices")', function() {
      // uncomment below and update the code to test the property orderByChoices
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property owners (base name: "owners")', function() {
      // uncomment below and update the code to test the property owners
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property params (base name: "params")', function() {
      // uncomment below and update the code to test the property params
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property perm (base name: "perm")', function() {
      // uncomment below and update the code to test the property perm
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property selectStar (base name: "select_star")', function() {
      // uncomment below and update the code to test the property selectStar
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property sql (base name: "sql")', function() {
      // uncomment below and update the code to test the property sql
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property tableName (base name: "table_name")', function() {
      // uncomment below and update the code to test the property tableName
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property templateParams (base name: "template_params")', function() {
      // uncomment below and update the code to test the property templateParams
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property timeGrainSqla (base name: "time_grain_sqla")', function() {
      // uncomment below and update the code to test the property timeGrainSqla
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

    it('should have the property verboseMap (base name: "verbose_map")', function() {
      // uncomment below and update the code to test the property verboseMap
      //var instance = new Superset.DashboardDatasetSchema();
      //expect(instance).to.be();
    });

  });

}));
