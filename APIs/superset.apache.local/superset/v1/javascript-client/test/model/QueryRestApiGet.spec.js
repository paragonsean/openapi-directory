/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.QueryRestApiGet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QueryRestApiGet', function() {
    it('should create an instance of QueryRestApiGet', function() {
      // uncomment below and update the code to test QueryRestApiGet
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be.a(Superset.QueryRestApiGet);
    });

    it('should have the property changedOn (base name: "changed_on")', function() {
      // uncomment below and update the code to test the property changedOn
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "client_id")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property database (base name: "database")', function() {
      // uncomment below and update the code to test the property database
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property endResultBackendTime (base name: "end_result_backend_time")', function() {
      // uncomment below and update the code to test the property endResultBackendTime
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "end_time")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "error_message")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property executedSql (base name: "executed_sql")', function() {
      // uncomment below and update the code to test the property executedSql
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property progress (base name: "progress")', function() {
      // uncomment below and update the code to test the property progress
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property resultsKey (base name: "results_key")', function() {
      // uncomment below and update the code to test the property resultsKey
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property rows (base name: "rows")', function() {
      // uncomment below and update the code to test the property rows
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property selectAsCta (base name: "select_as_cta")', function() {
      // uncomment below and update the code to test the property selectAsCta
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property selectAsCtaUsed (base name: "select_as_cta_used")', function() {
      // uncomment below and update the code to test the property selectAsCtaUsed
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property selectSql (base name: "select_sql")', function() {
      // uncomment below and update the code to test the property selectSql
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property sql (base name: "sql")', function() {
      // uncomment below and update the code to test the property sql
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property sqlEditorId (base name: "sql_editor_id")', function() {
      // uncomment below and update the code to test the property sqlEditorId
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property startRunningTime (base name: "start_running_time")', function() {
      // uncomment below and update the code to test the property startRunningTime
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property tabName (base name: "tab_name")', function() {
      // uncomment below and update the code to test the property tabName
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property tmpSchemaName (base name: "tmp_schema_name")', function() {
      // uncomment below and update the code to test the property tmpSchemaName
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property tmpTableName (base name: "tmp_table_name")', function() {
      // uncomment below and update the code to test the property tmpTableName
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property trackingUrl (base name: "tracking_url")', function() {
      // uncomment below and update the code to test the property trackingUrl
      //var instance = new Superset.QueryRestApiGet();
      //expect(instance).to.be();
    });

  });

}));
