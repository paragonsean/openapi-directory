/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.DatabaseRestApiPost();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabaseRestApiPost', function() {
    it('should create an instance of DatabaseRestApiPost', function() {
      // uncomment below and update the code to test DatabaseRestApiPost
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be.a(Superset.DatabaseRestApiPost);
    });

    it('should have the property allowCsvUpload (base name: "allow_csv_upload")', function() {
      // uncomment below and update the code to test the property allowCsvUpload
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property allowCtas (base name: "allow_ctas")', function() {
      // uncomment below and update the code to test the property allowCtas
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property allowCvas (base name: "allow_cvas")', function() {
      // uncomment below and update the code to test the property allowCvas
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property allowDml (base name: "allow_dml")', function() {
      // uncomment below and update the code to test the property allowDml
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property allowMultiSchemaMetadataFetch (base name: "allow_multi_schema_metadata_fetch")', function() {
      // uncomment below and update the code to test the property allowMultiSchemaMetadataFetch
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property allowRunAsync (base name: "allow_run_async")', function() {
      // uncomment below and update the code to test the property allowRunAsync
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
      // uncomment below and update the code to test the property cacheTimeout
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property configurationMethod (base name: "configuration_method")', function() {
      // uncomment below and update the code to test the property configurationMethod
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property databaseName (base name: "database_name")', function() {
      // uncomment below and update the code to test the property databaseName
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property encryptedExtra (base name: "encrypted_extra")', function() {
      // uncomment below and update the code to test the property encryptedExtra
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property exposeInSqllab (base name: "expose_in_sqllab")', function() {
      // uncomment below and update the code to test the property exposeInSqllab
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property extra (base name: "extra")', function() {
      // uncomment below and update the code to test the property extra
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property forceCtasSchema (base name: "force_ctas_schema")', function() {
      // uncomment below and update the code to test the property forceCtasSchema
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property impersonateUser (base name: "impersonate_user")', function() {
      // uncomment below and update the code to test the property impersonateUser
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property serverCert (base name: "server_cert")', function() {
      // uncomment below and update the code to test the property serverCert
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

    it('should have the property sqlalchemyUri (base name: "sqlalchemy_uri")', function() {
      // uncomment below and update the code to test the property sqlalchemyUri
      //var instance = new Superset.DatabaseRestApiPost();
      //expect(instance).to.be();
    });

  });

}));
