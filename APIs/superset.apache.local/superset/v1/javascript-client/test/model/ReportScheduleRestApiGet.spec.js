/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.ReportScheduleRestApiGet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReportScheduleRestApiGet', function() {
    it('should create an instance of ReportScheduleRestApiGet', function() {
      // uncomment below and update the code to test ReportScheduleRestApiGet
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be.a(Superset.ReportScheduleRestApiGet);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property chart (base name: "chart")', function() {
      // uncomment below and update the code to test the property chart
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property contextMarkdown (base name: "context_markdown")', function() {
      // uncomment below and update the code to test the property contextMarkdown
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property creationMethod (base name: "creation_method")', function() {
      // uncomment below and update the code to test the property creationMethod
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property crontab (base name: "crontab")', function() {
      // uncomment below and update the code to test the property crontab
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property dashboard (base name: "dashboard")', function() {
      // uncomment below and update the code to test the property dashboard
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property database (base name: "database")', function() {
      // uncomment below and update the code to test the property database
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property gracePeriod (base name: "grace_period")', function() {
      // uncomment below and update the code to test the property gracePeriod
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property lastEvalDttm (base name: "last_eval_dttm")', function() {
      // uncomment below and update the code to test the property lastEvalDttm
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property lastState (base name: "last_state")', function() {
      // uncomment below and update the code to test the property lastState
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property lastValue (base name: "last_value")', function() {
      // uncomment below and update the code to test the property lastValue
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property lastValueRowJson (base name: "last_value_row_json")', function() {
      // uncomment below and update the code to test the property lastValueRowJson
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property logRetention (base name: "log_retention")', function() {
      // uncomment below and update the code to test the property logRetention
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property owners (base name: "owners")', function() {
      // uncomment below and update the code to test the property owners
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property recipients (base name: "recipients")', function() {
      // uncomment below and update the code to test the property recipients
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property reportFormat (base name: "report_format")', function() {
      // uncomment below and update the code to test the property reportFormat
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property sql (base name: "sql")', function() {
      // uncomment below and update the code to test the property sql
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property validatorConfigJson (base name: "validator_config_json")', function() {
      // uncomment below and update the code to test the property validatorConfigJson
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property validatorType (base name: "validator_type")', function() {
      // uncomment below and update the code to test the property validatorType
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

    it('should have the property workingTimeout (base name: "working_timeout")', function() {
      // uncomment below and update the code to test the property workingTimeout
      //var instance = new Superset.ReportScheduleRestApiGet();
      //expect(instance).to.be();
    });

  });

}));
