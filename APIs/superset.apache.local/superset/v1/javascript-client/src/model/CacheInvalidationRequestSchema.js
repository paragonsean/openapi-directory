/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Datasource from './Datasource';

/**
 * The CacheInvalidationRequestSchema model module.
 * @module model/CacheInvalidationRequestSchema
 * @version v1
 */
class CacheInvalidationRequestSchema {
    /**
     * Constructs a new <code>CacheInvalidationRequestSchema</code>.
     * @alias module:model/CacheInvalidationRequestSchema
     */
    constructor() { 
        
        CacheInvalidationRequestSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CacheInvalidationRequestSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CacheInvalidationRequestSchema} obj Optional instance to populate.
     * @return {module:model/CacheInvalidationRequestSchema} The populated <code>CacheInvalidationRequestSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CacheInvalidationRequestSchema();

            if (data.hasOwnProperty('datasource_uids')) {
                obj['datasource_uids'] = ApiClient.convertToType(data['datasource_uids'], ['String']);
            }
            if (data.hasOwnProperty('datasources')) {
                obj['datasources'] = ApiClient.convertToType(data['datasources'], [Datasource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CacheInvalidationRequestSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CacheInvalidationRequestSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['datasource_uids'])) {
            throw new Error("Expected the field `datasource_uids` to be an array in the JSON data but got " + data['datasource_uids']);
        }
        if (data['datasources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datasources'])) {
                throw new Error("Expected the field `datasources` to be an array in the JSON data but got " + data['datasources']);
            }
            // validate the optional field `datasources` (array)
            for (const item of data['datasources']) {
                Datasource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The uid of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_uid` 
 * @member {Array.<String>} datasource_uids
 */
CacheInvalidationRequestSchema.prototype['datasource_uids'] = undefined;

/**
 * A list of the data source and database names
 * @member {Array.<module:model/Datasource>} datasources
 */
CacheInvalidationRequestSchema.prototype['datasources'] = undefined;






export default CacheInvalidationRequestSchema;

