/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportRecipient from './ReportRecipient';
import ValidatorConfigJSON from './ValidatorConfigJSON';

/**
 * The ReportScheduleRestApiPost model module.
 * @module model/ReportScheduleRestApiPost
 * @version v1
 */
class ReportScheduleRestApiPost {
    /**
     * Constructs a new <code>ReportScheduleRestApiPost</code>.
     * @alias module:model/ReportScheduleRestApiPost
     * @param crontab {String} A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.
     * @param name {String} The report schedule name.
     * @param type {module:model/ReportScheduleRestApiPost.TypeEnum} The report schedule type
     */
    constructor(crontab, name, type) { 
        
        ReportScheduleRestApiPost.initialize(this, crontab, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, crontab, name, type) { 
        obj['crontab'] = crontab;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ReportScheduleRestApiPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportScheduleRestApiPost} obj Optional instance to populate.
     * @return {module:model/ReportScheduleRestApiPost} The populated <code>ReportScheduleRestApiPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportScheduleRestApiPost();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('chart')) {
                obj['chart'] = ApiClient.convertToType(data['chart'], 'Number');
            }
            if (data.hasOwnProperty('context_markdown')) {
                obj['context_markdown'] = ApiClient.convertToType(data['context_markdown'], 'String');
            }
            if (data.hasOwnProperty('creation_method')) {
                obj['creation_method'] = ApiClient.convertToType(data['creation_method'], Object);
            }
            if (data.hasOwnProperty('crontab')) {
                obj['crontab'] = ApiClient.convertToType(data['crontab'], 'String');
            }
            if (data.hasOwnProperty('dashboard')) {
                obj['dashboard'] = ApiClient.convertToType(data['dashboard'], 'Number');
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('grace_period')) {
                obj['grace_period'] = ApiClient.convertToType(data['grace_period'], 'Number');
            }
            if (data.hasOwnProperty('log_retention')) {
                obj['log_retention'] = ApiClient.convertToType(data['log_retention'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], ['Number']);
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [ReportRecipient]);
            }
            if (data.hasOwnProperty('report_format')) {
                obj['report_format'] = ApiClient.convertToType(data['report_format'], 'String');
            }
            if (data.hasOwnProperty('sql')) {
                obj['sql'] = ApiClient.convertToType(data['sql'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validator_config_json')) {
                obj['validator_config_json'] = ValidatorConfigJSON.constructFromObject(data['validator_config_json']);
            }
            if (data.hasOwnProperty('validator_type')) {
                obj['validator_type'] = ApiClient.convertToType(data['validator_type'], 'String');
            }
            if (data.hasOwnProperty('working_timeout')) {
                obj['working_timeout'] = ApiClient.convertToType(data['working_timeout'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportScheduleRestApiPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportScheduleRestApiPost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReportScheduleRestApiPost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['context_markdown'] && !(typeof data['context_markdown'] === 'string' || data['context_markdown'] instanceof String)) {
            throw new Error("Expected the field `context_markdown` to be a primitive type in the JSON string but got " + data['context_markdown']);
        }
        // ensure the json data is a string
        if (data['crontab'] && !(typeof data['crontab'] === 'string' || data['crontab'] instanceof String)) {
            throw new Error("Expected the field `crontab` to be a primitive type in the JSON string but got " + data['crontab']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['owners'])) {
            throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                ReportRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['report_format'] && !(typeof data['report_format'] === 'string' || data['report_format'] instanceof String)) {
            throw new Error("Expected the field `report_format` to be a primitive type in the JSON string but got " + data['report_format']);
        }
        // ensure the json data is a string
        if (data['sql'] && !(typeof data['sql'] === 'string' || data['sql'] instanceof String)) {
            throw new Error("Expected the field `sql` to be a primitive type in the JSON string but got " + data['sql']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `validator_config_json`
        if (data['validator_config_json']) { // data not null
          ValidatorConfigJSON.validateJSON(data['validator_config_json']);
        }
        // ensure the json data is a string
        if (data['validator_type'] && !(typeof data['validator_type'] === 'string' || data['validator_type'] instanceof String)) {
            throw new Error("Expected the field `validator_type` to be a primitive type in the JSON string but got " + data['validator_type']);
        }

        return true;
    }


}

ReportScheduleRestApiPost.RequiredProperties = ["crontab", "name", "type"];

/**
 * @member {Boolean} active
 */
ReportScheduleRestApiPost.prototype['active'] = undefined;

/**
 * @member {Number} chart
 */
ReportScheduleRestApiPost.prototype['chart'] = undefined;

/**
 * Markdown description
 * @member {String} context_markdown
 */
ReportScheduleRestApiPost.prototype['context_markdown'] = undefined;

/**
 * Creation method is used to inform the frontend whether the report/alert was created in the dashboard, chart, or alerts and reports UI.
 * @member {Object} creation_method
 */
ReportScheduleRestApiPost.prototype['creation_method'] = undefined;

/**
 * A CRON expression.[Crontab Guru](https://crontab.guru/) is a helpful resource that can help you craft a CRON expression.
 * @member {String} crontab
 */
ReportScheduleRestApiPost.prototype['crontab'] = undefined;

/**
 * @member {Number} dashboard
 */
ReportScheduleRestApiPost.prototype['dashboard'] = undefined;

/**
 * @member {Number} database
 */
ReportScheduleRestApiPost.prototype['database'] = undefined;

/**
 * Use a nice description to give context to this Alert/Report
 * @member {String} description
 */
ReportScheduleRestApiPost.prototype['description'] = undefined;

/**
 * Once an alert is triggered, how long, in seconds, before Superset nags you again. (in seconds)
 * @member {Number} grace_period
 */
ReportScheduleRestApiPost.prototype['grace_period'] = undefined;

/**
 * How long to keep the logs around for this report (in days)
 * @member {Number} log_retention
 */
ReportScheduleRestApiPost.prototype['log_retention'] = undefined;

/**
 * The report schedule name.
 * @member {String} name
 */
ReportScheduleRestApiPost.prototype['name'] = undefined;

/**
 * @member {Array.<Number>} owners
 */
ReportScheduleRestApiPost.prototype['owners'] = undefined;

/**
 * @member {Array.<module:model/ReportRecipient>} recipients
 */
ReportScheduleRestApiPost.prototype['recipients'] = undefined;

/**
 * @member {module:model/ReportScheduleRestApiPost.ReportFormatEnum} report_format
 */
ReportScheduleRestApiPost.prototype['report_format'] = undefined;

/**
 * A SQL statement that defines whether the alert should get triggered or not. The query is expected to return either NULL or a number value.
 * @member {String} sql
 */
ReportScheduleRestApiPost.prototype['sql'] = undefined;

/**
 * A timezone string that represents the location of the timezone.
 * @member {String} timezone
 */
ReportScheduleRestApiPost.prototype['timezone'] = undefined;

/**
 * The report schedule type
 * @member {module:model/ReportScheduleRestApiPost.TypeEnum} type
 */
ReportScheduleRestApiPost.prototype['type'] = undefined;

/**
 * @member {module:model/ValidatorConfigJSON} validator_config_json
 */
ReportScheduleRestApiPost.prototype['validator_config_json'] = undefined;

/**
 * Determines when to trigger alert based off value from alert query. Alerts will be triggered with these validator types: - Not Null - When the return value is Not NULL, Empty, or 0 - Operator - When `sql_return_value comparison_operator threshold` is True e.g. `50 <= 75`<br>Supports the comparison operators <, <=, >, >=, ==, and !=
 * @member {module:model/ReportScheduleRestApiPost.ValidatorTypeEnum} validator_type
 */
ReportScheduleRestApiPost.prototype['validator_type'] = undefined;

/**
 * If an alert is staled at a working state, how long until it's state is reseted to error
 * @member {Number} working_timeout
 */
ReportScheduleRestApiPost.prototype['working_timeout'] = undefined;





/**
 * Allowed values for the <code>report_format</code> property.
 * @enum {String}
 * @readonly
 */
ReportScheduleRestApiPost['ReportFormatEnum'] = {

    /**
     * value: "PNG"
     * @const
     */
    "PNG": "PNG",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReportScheduleRestApiPost['TypeEnum'] = {

    /**
     * value: "Alert"
     * @const
     */
    "Alert": "Alert",

    /**
     * value: "Report"
     * @const
     */
    "Report": "Report"
};


/**
 * Allowed values for the <code>validator_type</code> property.
 * @enum {String}
 * @readonly
 */
ReportScheduleRestApiPost['ValidatorTypeEnum'] = {

    /**
     * value: "not null"
     * @const
     */
    "not null": "not null",

    /**
     * value: "operator"
     * @const
     */
    "operator": "operator"
};



export default ReportScheduleRestApiPost;

