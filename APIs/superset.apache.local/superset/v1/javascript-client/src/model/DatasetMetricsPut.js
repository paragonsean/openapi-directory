/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatasetMetricsPut model module.
 * @module model/DatasetMetricsPut
 * @version v1
 */
class DatasetMetricsPut {
    /**
     * Constructs a new <code>DatasetMetricsPut</code>.
     * @alias module:model/DatasetMetricsPut
     * @param expression {String} 
     * @param metricName {String} 
     */
    constructor(expression, metricName) { 
        
        DatasetMetricsPut.initialize(this, expression, metricName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, metricName) { 
        obj['expression'] = expression;
        obj['metric_name'] = metricName;
    }

    /**
     * Constructs a <code>DatasetMetricsPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasetMetricsPut} obj Optional instance to populate.
     * @return {module:model/DatasetMetricsPut} The populated <code>DatasetMetricsPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasetMetricsPut();

            if (data.hasOwnProperty('d3format')) {
                obj['d3format'] = ApiClient.convertToType(data['d3format'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metric_name')) {
                obj['metric_name'] = ApiClient.convertToType(data['metric_name'], 'String');
            }
            if (data.hasOwnProperty('metric_type')) {
                obj['metric_type'] = ApiClient.convertToType(data['metric_type'], 'String');
            }
            if (data.hasOwnProperty('warning_text')) {
                obj['warning_text'] = ApiClient.convertToType(data['warning_text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasetMetricsPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasetMetricsPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatasetMetricsPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['d3format'] && !(typeof data['d3format'] === 'string' || data['d3format'] instanceof String)) {
            throw new Error("Expected the field `d3format` to be a primitive type in the JSON string but got " + data['d3format']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['metric_name'] && !(typeof data['metric_name'] === 'string' || data['metric_name'] instanceof String)) {
            throw new Error("Expected the field `metric_name` to be a primitive type in the JSON string but got " + data['metric_name']);
        }
        // ensure the json data is a string
        if (data['metric_type'] && !(typeof data['metric_type'] === 'string' || data['metric_type'] instanceof String)) {
            throw new Error("Expected the field `metric_type` to be a primitive type in the JSON string but got " + data['metric_type']);
        }
        // ensure the json data is a string
        if (data['warning_text'] && !(typeof data['warning_text'] === 'string' || data['warning_text'] instanceof String)) {
            throw new Error("Expected the field `warning_text` to be a primitive type in the JSON string but got " + data['warning_text']);
        }

        return true;
    }


}

DatasetMetricsPut.RequiredProperties = ["expression", "metric_name"];

/**
 * @member {String} d3format
 */
DatasetMetricsPut.prototype['d3format'] = undefined;

/**
 * @member {String} description
 */
DatasetMetricsPut.prototype['description'] = undefined;

/**
 * @member {String} expression
 */
DatasetMetricsPut.prototype['expression'] = undefined;

/**
 * @member {Number} id
 */
DatasetMetricsPut.prototype['id'] = undefined;

/**
 * @member {String} metric_name
 */
DatasetMetricsPut.prototype['metric_name'] = undefined;

/**
 * @member {String} metric_type
 */
DatasetMetricsPut.prototype['metric_type'] = undefined;

/**
 * @member {String} warning_text
 */
DatasetMetricsPut.prototype['warning_text'] = undefined;






export default DatasetMetricsPut;

