/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataBoxplotOptionsSchema model module.
 * @module model/ChartDataBoxplotOptionsSchema
 * @version v1
 */
class ChartDataBoxplotOptionsSchema {
    /**
     * Constructs a new <code>ChartDataBoxplotOptionsSchema</code>.
     * @alias module:model/ChartDataBoxplotOptionsSchema
     * @param whiskerType {module:model/ChartDataBoxplotOptionsSchema.WhiskerTypeEnum} Whisker type. Any numpy function will work.
     */
    constructor(whiskerType) { 
        
        ChartDataBoxplotOptionsSchema.initialize(this, whiskerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, whiskerType) { 
        obj['whisker_type'] = whiskerType;
    }

    /**
     * Constructs a <code>ChartDataBoxplotOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataBoxplotOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataBoxplotOptionsSchema} The populated <code>ChartDataBoxplotOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataBoxplotOptionsSchema();

            if (data.hasOwnProperty('groupby')) {
                obj['groupby'] = ApiClient.convertToType(data['groupby'], ['String']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Object]);
            }
            if (data.hasOwnProperty('percentiles')) {
                obj['percentiles'] = ApiClient.convertToType(data['percentiles'], Object);
            }
            if (data.hasOwnProperty('whisker_type')) {
                obj['whisker_type'] = ApiClient.convertToType(data['whisker_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataBoxplotOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataBoxplotOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataBoxplotOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groupby'])) {
            throw new Error("Expected the field `groupby` to be an array in the JSON data but got " + data['groupby']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        // ensure the json data is a string
        if (data['whisker_type'] && !(typeof data['whisker_type'] === 'string' || data['whisker_type'] instanceof String)) {
            throw new Error("Expected the field `whisker_type` to be a primitive type in the JSON string but got " + data['whisker_type']);
        }

        return true;
    }


}

ChartDataBoxplotOptionsSchema.RequiredProperties = ["whisker_type"];

/**
 * @member {Array.<String>} groupby
 */
ChartDataBoxplotOptionsSchema.prototype['groupby'] = undefined;

/**
 * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.
 * @member {Array.<Object>} metrics
 */
ChartDataBoxplotOptionsSchema.prototype['metrics'] = undefined;

/**
 * Upper and lower percentiles for percentile whisker type.
 * @member {Object} percentiles
 */
ChartDataBoxplotOptionsSchema.prototype['percentiles'] = undefined;

/**
 * Whisker type. Any numpy function will work.
 * @member {module:model/ChartDataBoxplotOptionsSchema.WhiskerTypeEnum} whisker_type
 */
ChartDataBoxplotOptionsSchema.prototype['whisker_type'] = undefined;





/**
 * Allowed values for the <code>whisker_type</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataBoxplotOptionsSchema['WhiskerTypeEnum'] = {

    /**
     * value: "tukey"
     * @const
     */
    "tukey": "tukey",

    /**
     * value: "min/max"
     * @const
     */
    "min/max": "min/max",

    /**
     * value: "percentile"
     * @const
     */
    "percentile": "percentile"
};



export default ChartDataBoxplotOptionsSchema;

