/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetInfoSchemaAddColumnsValue from './GetInfoSchemaAddColumnsValue';

/**
 * The GetInfoSchema model module.
 * @module model/GetInfoSchema
 * @version v1
 */
class GetInfoSchema {
    /**
     * Constructs a new <code>GetInfoSchema</code>.
     * @alias module:model/GetInfoSchema
     */
    constructor() { 
        
        GetInfoSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetInfoSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetInfoSchema} obj Optional instance to populate.
     * @return {module:model/GetInfoSchema} The populated <code>GetInfoSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetInfoSchema();

            if (data.hasOwnProperty('add_columns')) {
                obj['add_columns'] = ApiClient.convertToType(data['add_columns'], {'String': GetInfoSchemaAddColumnsValue});
            }
            if (data.hasOwnProperty('edit_columns')) {
                obj['edit_columns'] = ApiClient.convertToType(data['edit_columns'], {'String': GetInfoSchemaAddColumnsValue});
            }
            if (data.hasOwnProperty('keys')) {
                obj['keys'] = ApiClient.convertToType(data['keys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetInfoSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetInfoSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['keys'])) {
            throw new Error("Expected the field `keys` to be an array in the JSON data but got " + data['keys']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, module:model/GetInfoSchemaAddColumnsValue>} add_columns
 */
GetInfoSchema.prototype['add_columns'] = undefined;

/**
 * @member {Object.<String, module:model/GetInfoSchemaAddColumnsValue>} edit_columns
 */
GetInfoSchema.prototype['edit_columns'] = undefined;

/**
 * @member {Array.<module:model/GetInfoSchema.KeysEnum>} keys
 */
GetInfoSchema.prototype['keys'] = undefined;





/**
 * Allowed values for the <code>keys</code> property.
 * @enum {String}
 * @readonly
 */
GetInfoSchema['KeysEnum'] = {

    /**
     * value: "add_columns"
     * @const
     */
    "add_columns": "add_columns",

    /**
     * value: "edit_columns"
     * @const
     */
    "edit_columns": "edit_columns",

    /**
     * value: "filters"
     * @const
     */
    "filters": "filters",

    /**
     * value: "permissions"
     * @const
     */
    "permissions": "permissions",

    /**
     * value: "add_title"
     * @const
     */
    "add_title": "add_title",

    /**
     * value: "edit_title"
     * @const
     */
    "edit_title": "edit_title",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default GetInfoSchema;

