/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataPostProcessingOperation model module.
 * @module model/ChartDataPostProcessingOperation
 * @version v1
 */
class ChartDataPostProcessingOperation {
    /**
     * Constructs a new <code>ChartDataPostProcessingOperation</code>.
     * @alias module:model/ChartDataPostProcessingOperation
     * @param operation {module:model/ChartDataPostProcessingOperation.OperationEnum} Post processing operation type
     */
    constructor(operation) { 
        
        ChartDataPostProcessingOperation.initialize(this, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operation) { 
        obj['operation'] = operation;
    }

    /**
     * Constructs a <code>ChartDataPostProcessingOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataPostProcessingOperation} obj Optional instance to populate.
     * @return {module:model/ChartDataPostProcessingOperation} The populated <code>ChartDataPostProcessingOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataPostProcessingOperation();

            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataPostProcessingOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataPostProcessingOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataPostProcessingOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }

        return true;
    }


}

ChartDataPostProcessingOperation.RequiredProperties = ["operation"];

/**
 * Post processing operation type
 * @member {module:model/ChartDataPostProcessingOperation.OperationEnum} operation
 */
ChartDataPostProcessingOperation.prototype['operation'] = undefined;

/**
 * Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.
 * @member {Object} options
 */
ChartDataPostProcessingOperation.prototype['options'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataPostProcessingOperation['OperationEnum'] = {

    /**
     * value: "aggregate"
     * @const
     */
    "aggregate": "aggregate",

    /**
     * value: "boxplot"
     * @const
     */
    "boxplot": "boxplot",

    /**
     * value: "contribution"
     * @const
     */
    "contribution": "contribution",

    /**
     * value: "cum"
     * @const
     */
    "cum": "cum",

    /**
     * value: "geodetic_parse"
     * @const
     */
    "geodetic_parse": "geodetic_parse",

    /**
     * value: "geohash_decode"
     * @const
     */
    "geohash_decode": "geohash_decode",

    /**
     * value: "geohash_encode"
     * @const
     */
    "geohash_encode": "geohash_encode",

    /**
     * value: "pivot"
     * @const
     */
    "pivot": "pivot",

    /**
     * value: "prophet"
     * @const
     */
    "prophet": "prophet",

    /**
     * value: "rolling"
     * @const
     */
    "rolling": "rolling",

    /**
     * value: "select"
     * @const
     */
    "select": "select",

    /**
     * value: "sort"
     * @const
     */
    "sort": "sort",

    /**
     * value: "diff"
     * @const
     */
    "diff": "diff",

    /**
     * value: "compare"
     * @const
     */
    "compare": "compare"
};



export default ChartDataPostProcessingOperation;

