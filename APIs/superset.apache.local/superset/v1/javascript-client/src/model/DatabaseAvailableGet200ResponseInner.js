/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseAvailableGet200ResponseInner model module.
 * @module model/DatabaseAvailableGet200ResponseInner
 * @version v1
 */
class DatabaseAvailableGet200ResponseInner {
    /**
     * Constructs a new <code>DatabaseAvailableGet200ResponseInner</code>.
     * @alias module:model/DatabaseAvailableGet200ResponseInner
     */
    constructor() { 
        
        DatabaseAvailableGet200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseAvailableGet200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseAvailableGet200ResponseInner} obj Optional instance to populate.
     * @return {module:model/DatabaseAvailableGet200ResponseInner} The populated <code>DatabaseAvailableGet200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseAvailableGet200ResponseInner();

            if (data.hasOwnProperty('available_drivers')) {
                obj['available_drivers'] = ApiClient.convertToType(data['available_drivers'], ['String']);
            }
            if (data.hasOwnProperty('default_driver')) {
                obj['default_driver'] = ApiClient.convertToType(data['default_driver'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'Boolean');
            }
            if (data.hasOwnProperty('sqlalchemy_uri_placeholder')) {
                obj['sqlalchemy_uri_placeholder'] = ApiClient.convertToType(data['sqlalchemy_uri_placeholder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseAvailableGet200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseAvailableGet200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['available_drivers'])) {
            throw new Error("Expected the field `available_drivers` to be an array in the JSON data but got " + data['available_drivers']);
        }
        // ensure the json data is a string
        if (data['default_driver'] && !(typeof data['default_driver'] === 'string' || data['default_driver'] instanceof String)) {
            throw new Error("Expected the field `default_driver` to be a primitive type in the JSON string but got " + data['default_driver']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sqlalchemy_uri_placeholder'] && !(typeof data['sqlalchemy_uri_placeholder'] === 'string' || data['sqlalchemy_uri_placeholder'] instanceof String)) {
            throw new Error("Expected the field `sqlalchemy_uri_placeholder` to be a primitive type in the JSON string but got " + data['sqlalchemy_uri_placeholder']);
        }

        return true;
    }


}



/**
 * Installed drivers for the engine
 * @member {Array.<String>} available_drivers
 */
DatabaseAvailableGet200ResponseInner.prototype['available_drivers'] = undefined;

/**
 * Default driver for the engine
 * @member {String} default_driver
 */
DatabaseAvailableGet200ResponseInner.prototype['default_driver'] = undefined;

/**
 * Name of the SQLAlchemy engine
 * @member {String} engine
 */
DatabaseAvailableGet200ResponseInner.prototype['engine'] = undefined;

/**
 * Name of the database
 * @member {String} name
 */
DatabaseAvailableGet200ResponseInner.prototype['name'] = undefined;

/**
 * JSON schema defining the needed parameters
 * @member {Object} parameters
 */
DatabaseAvailableGet200ResponseInner.prototype['parameters'] = undefined;

/**
 * Is the database preferred?
 * @member {Boolean} preferred
 */
DatabaseAvailableGet200ResponseInner.prototype['preferred'] = undefined;

/**
 * Example placeholder for the SQLAlchemy URI
 * @member {String} sqlalchemy_uri_placeholder
 */
DatabaseAvailableGet200ResponseInner.prototype['sqlalchemy_uri_placeholder'] = undefined;






export default DatabaseAvailableGet200ResponseInner;

