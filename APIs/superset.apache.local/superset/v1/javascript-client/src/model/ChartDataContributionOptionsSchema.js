/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataContributionOptionsSchema model module.
 * @module model/ChartDataContributionOptionsSchema
 * @version v1
 */
class ChartDataContributionOptionsSchema {
    /**
     * Constructs a new <code>ChartDataContributionOptionsSchema</code>.
     * @alias module:model/ChartDataContributionOptionsSchema
     * @param orientation {module:model/ChartDataContributionOptionsSchema.OrientationEnum} Should cell values be calculated across the row or column.
     */
    constructor(orientation) { 
        
        ChartDataContributionOptionsSchema.initialize(this, orientation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orientation) { 
        obj['orientation'] = orientation;
    }

    /**
     * Constructs a <code>ChartDataContributionOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataContributionOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataContributionOptionsSchema} The populated <code>ChartDataContributionOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataContributionOptionsSchema();

            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataContributionOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataContributionOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataContributionOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
            throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
        }

        return true;
    }


}

ChartDataContributionOptionsSchema.RequiredProperties = ["orientation"];

/**
 * Should cell values be calculated across the row or column.
 * @member {module:model/ChartDataContributionOptionsSchema.OrientationEnum} orientation
 */
ChartDataContributionOptionsSchema.prototype['orientation'] = undefined;





/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataContributionOptionsSchema['OrientationEnum'] = {

    /**
     * value: "row"
     * @const
     */
    "row": "row",

    /**
     * value: "column"
     * @const
     */
    "column": "column"
};



export default ChartDataContributionOptionsSchema;

