/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartDataDatasource from './ChartDataDatasource';
import ChartDataQueryObject from './ChartDataQueryObject';

/**
 * The ChartDataQueryContextSchema model module.
 * @module model/ChartDataQueryContextSchema
 * @version v1
 */
class ChartDataQueryContextSchema {
    /**
     * Constructs a new <code>ChartDataQueryContextSchema</code>.
     * @alias module:model/ChartDataQueryContextSchema
     */
    constructor() { 
        
        ChartDataQueryContextSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartDataQueryContextSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataQueryContextSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataQueryContextSchema} The populated <code>ChartDataQueryContextSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataQueryContextSchema();

            if (data.hasOwnProperty('datasource')) {
                obj['datasource'] = ChartDataDatasource.constructFromObject(data['datasource']);
            }
            if (data.hasOwnProperty('force')) {
                obj['force'] = ApiClient.convertToType(data['force'], 'Boolean');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [ChartDataQueryObject]);
            }
            if (data.hasOwnProperty('result_format')) {
                obj['result_format'] = ApiClient.convertToType(data['result_format'], Object);
            }
            if (data.hasOwnProperty('result_type')) {
                obj['result_type'] = ApiClient.convertToType(data['result_type'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataQueryContextSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataQueryContextSchema</code>.
     */
    static validateJSON(data) {
        // validate the optional field `datasource`
        if (data['datasource']) { // data not null
          ChartDataDatasource.validateJSON(data['datasource']);
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                ChartDataQueryObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ChartDataDatasource} datasource
 */
ChartDataQueryContextSchema.prototype['datasource'] = undefined;

/**
 * Should the queries be forced to load from the source. Default: `false`
 * @member {Boolean} force
 */
ChartDataQueryContextSchema.prototype['force'] = undefined;

/**
 * @member {Array.<module:model/ChartDataQueryObject>} queries
 */
ChartDataQueryContextSchema.prototype['queries'] = undefined;

/**
 * @member {Object} result_format
 */
ChartDataQueryContextSchema.prototype['result_format'] = undefined;

/**
 * @member {Object} result_type
 */
ChartDataQueryContextSchema.prototype['result_type'] = undefined;






export default ChartDataQueryContextSchema;

