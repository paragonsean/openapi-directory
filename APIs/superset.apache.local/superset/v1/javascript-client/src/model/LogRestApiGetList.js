/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Meta42 from './Meta42';

/**
 * The LogRestApiGetList model module.
 * @module model/LogRestApiGetList
 * @version v1
 */
class LogRestApiGetList {
    /**
     * Constructs a new <code>LogRestApiGetList</code>.
     * @alias module:model/LogRestApiGetList
     */
    constructor() { 
        
        LogRestApiGetList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogRestApiGetList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogRestApiGetList} obj Optional instance to populate.
     * @return {module:model/LogRestApiGetList} The populated <code>LogRestApiGetList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogRestApiGetList();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('dashboard_id')) {
                obj['dashboard_id'] = ApiClient.convertToType(data['dashboard_id'], 'Number');
            }
            if (data.hasOwnProperty('dttm')) {
                obj['dttm'] = ApiClient.convertToType(data['dttm'], 'Date');
            }
            if (data.hasOwnProperty('duration_ms')) {
                obj['duration_ms'] = ApiClient.convertToType(data['duration_ms'], 'Number');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'String');
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = ApiClient.convertToType(data['referrer'], 'String');
            }
            if (data.hasOwnProperty('slice_id')) {
                obj['slice_id'] = ApiClient.convertToType(data['slice_id'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = Meta42.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogRestApiGetList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogRestApiGetList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['json'] && !(typeof data['json'] === 'string' || data['json'] instanceof String)) {
            throw new Error("Expected the field `json` to be a primitive type in the JSON string but got " + data['json']);
        }
        // ensure the json data is a string
        if (data['referrer'] && !(typeof data['referrer'] === 'string' || data['referrer'] instanceof String)) {
            throw new Error("Expected the field `referrer` to be a primitive type in the JSON string but got " + data['referrer']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          Meta42.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {String} action
 */
LogRestApiGetList.prototype['action'] = undefined;

/**
 * @member {Number} dashboard_id
 */
LogRestApiGetList.prototype['dashboard_id'] = undefined;

/**
 * @member {Date} dttm
 */
LogRestApiGetList.prototype['dttm'] = undefined;

/**
 * @member {Number} duration_ms
 */
LogRestApiGetList.prototype['duration_ms'] = undefined;

/**
 * @member {String} json
 */
LogRestApiGetList.prototype['json'] = undefined;

/**
 * @member {String} referrer
 */
LogRestApiGetList.prototype['referrer'] = undefined;

/**
 * @member {Number} slice_id
 */
LogRestApiGetList.prototype['slice_id'] = undefined;

/**
 * @member {module:model/Meta42} user
 */
LogRestApiGetList.prototype['user'] = undefined;

/**
 * @member {Number} user_id
 */
LogRestApiGetList.prototype['user_id'] = undefined;






export default LogRestApiGetList;

