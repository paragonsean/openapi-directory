/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataFilter model module.
 * @module model/ChartDataFilter
 * @version v1
 */
class ChartDataFilter {
    /**
     * Constructs a new <code>ChartDataFilter</code>.
     * @alias module:model/ChartDataFilter
     * @param col {String} The column to filter.
     * @param op {module:model/ChartDataFilter.OpEnum} The comparison operator.
     */
    constructor(col, op) { 
        
        ChartDataFilter.initialize(this, col, op);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, col, op) { 
        obj['col'] = col;
        obj['op'] = op;
    }

    /**
     * Constructs a <code>ChartDataFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataFilter} obj Optional instance to populate.
     * @return {module:model/ChartDataFilter} The populated <code>ChartDataFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataFilter();

            if (data.hasOwnProperty('col')) {
                obj['col'] = ApiClient.convertToType(data['col'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('val')) {
                obj['val'] = ApiClient.convertToType(data['val'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['col'] && !(typeof data['col'] === 'string' || data['col'] instanceof String)) {
            throw new Error("Expected the field `col` to be a primitive type in the JSON string but got " + data['col']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }

        return true;
    }


}

ChartDataFilter.RequiredProperties = ["col", "op"];

/**
 * The column to filter.
 * @member {String} col
 */
ChartDataFilter.prototype['col'] = undefined;

/**
 * The comparison operator.
 * @member {module:model/ChartDataFilter.OpEnum} op
 */
ChartDataFilter.prototype['op'] = undefined;

/**
 * The value or values to compare against. Can be a string, integer, decimal or list, depending on the operator.
 * @member {Object} val
 */
ChartDataFilter.prototype['val'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataFilter['OpEnum'] = {

    /**
     * value: "=="
     * @const
     */
    "DOUBLE_EQUAL": "==",

    /**
     * value: "!="
     * @const
     */
    "NOT_EQUAL": "!=",

    /**
     * value: ">"
     * @const
     */
    "GREATER_THAN": ">",

    /**
     * value: "<"
     * @const
     */
    "LESS_THAN": "<",

    /**
     * value: ">="
     * @const
     */
    "GREATER_THAN_OR_EQUAL_TO": ">=",

    /**
     * value: "<="
     * @const
     */
    "LESS_THAN_OR_EQUAL_TO": "<=",

    /**
     * value: "LIKE"
     * @const
     */
    "LIKE": "LIKE",

    /**
     * value: "ILIKE"
     * @const
     */
    "ILIKE": "ILIKE",

    /**
     * value: "IS NULL"
     * @const
     */
    "IS NULL": "IS NULL",

    /**
     * value: "IS NOT NULL"
     * @const
     */
    "IS NOT NULL": "IS NOT NULL",

    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",

    /**
     * value: "NOT IN"
     * @const
     */
    "NOT IN": "NOT IN",

    /**
     * value: "REGEX"
     * @const
     */
    "REGEX": "REGEX",

    /**
     * value: "IS TRUE"
     * @const
     */
    "IS TRUE": "IS TRUE",

    /**
     * value: "IS FALSE"
     * @const
     */
    "IS FALSE": "IS FALSE"
};



export default ChartDataFilter;

