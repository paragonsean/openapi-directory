/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableMetadataColumnsResponse from './TableMetadataColumnsResponse';
import TableMetadataForeignKeysIndexesResponse from './TableMetadataForeignKeysIndexesResponse';
import TableMetadataPrimaryKeyResponse from './TableMetadataPrimaryKeyResponse';

/**
 * The TableMetadataResponseSchema model module.
 * @module model/TableMetadataResponseSchema
 * @version v1
 */
class TableMetadataResponseSchema {
    /**
     * Constructs a new <code>TableMetadataResponseSchema</code>.
     * @alias module:model/TableMetadataResponseSchema
     */
    constructor() { 
        
        TableMetadataResponseSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableMetadataResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableMetadataResponseSchema} obj Optional instance to populate.
     * @return {module:model/TableMetadataResponseSchema} The populated <code>TableMetadataResponseSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableMetadataResponseSchema();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [TableMetadataColumnsResponse]);
            }
            if (data.hasOwnProperty('foreignKeys')) {
                obj['foreignKeys'] = ApiClient.convertToType(data['foreignKeys'], [TableMetadataForeignKeysIndexesResponse]);
            }
            if (data.hasOwnProperty('indexes')) {
                obj['indexes'] = ApiClient.convertToType(data['indexes'], [TableMetadataForeignKeysIndexesResponse]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], TableMetadataPrimaryKeyResponse);
            }
            if (data.hasOwnProperty('selectStar')) {
                obj['selectStar'] = ApiClient.convertToType(data['selectStar'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableMetadataResponseSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableMetadataResponseSchema</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                TableMetadataColumnsResponse.validateJSON(item);
            };
        }
        if (data['foreignKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['foreignKeys'])) {
                throw new Error("Expected the field `foreignKeys` to be an array in the JSON data but got " + data['foreignKeys']);
            }
            // validate the optional field `foreignKeys` (array)
            for (const item of data['foreignKeys']) {
                TableMetadataForeignKeysIndexesResponse.validateJSON(item);
            };
        }
        if (data['indexes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexes'])) {
                throw new Error("Expected the field `indexes` to be an array in the JSON data but got " + data['indexes']);
            }
            // validate the optional field `indexes` (array)
            for (const item of data['indexes']) {
                TableMetadataForeignKeysIndexesResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `primaryKey`
        if (data['primaryKey']) { // data not null
          TableMetadataPrimaryKeyResponse.validateJSON(data['primaryKey']);
        }
        // ensure the json data is a string
        if (data['selectStar'] && !(typeof data['selectStar'] === 'string' || data['selectStar'] instanceof String)) {
            throw new Error("Expected the field `selectStar` to be a primitive type in the JSON string but got " + data['selectStar']);
        }

        return true;
    }


}



/**
 * A list of columns and their metadata
 * @member {Array.<module:model/TableMetadataColumnsResponse>} columns
 */
TableMetadataResponseSchema.prototype['columns'] = undefined;

/**
 * A list of foreign keys and their metadata
 * @member {Array.<module:model/TableMetadataForeignKeysIndexesResponse>} foreignKeys
 */
TableMetadataResponseSchema.prototype['foreignKeys'] = undefined;

/**
 * A list of indexes and their metadata
 * @member {Array.<module:model/TableMetadataForeignKeysIndexesResponse>} indexes
 */
TableMetadataResponseSchema.prototype['indexes'] = undefined;

/**
 * The name of the table
 * @member {String} name
 */
TableMetadataResponseSchema.prototype['name'] = undefined;

/**
 * Primary keys metadata
 * @member {module:model/TableMetadataPrimaryKeyResponse} primaryKey
 */
TableMetadataResponseSchema.prototype['primaryKey'] = undefined;

/**
 * SQL select star
 * @member {String} selectStar
 */
TableMetadataResponseSchema.prototype['selectStar'] = undefined;






export default TableMetadataResponseSchema;

