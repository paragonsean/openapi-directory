/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Roles from './Roles';
import User from './User';

/**
 * The DashboardGetResponseSchema model module.
 * @module model/DashboardGetResponseSchema
 * @version v1
 */
class DashboardGetResponseSchema {
    /**
     * Constructs a new <code>DashboardGetResponseSchema</code>.
     * @alias module:model/DashboardGetResponseSchema
     */
    constructor() { 
        
        DashboardGetResponseSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardGetResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardGetResponseSchema} obj Optional instance to populate.
     * @return {module:model/DashboardGetResponseSchema} The populated <code>DashboardGetResponseSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardGetResponseSchema();

            if (data.hasOwnProperty('changed_by')) {
                obj['changed_by'] = User.constructFromObject(data['changed_by']);
            }
            if (data.hasOwnProperty('changed_by_name')) {
                obj['changed_by_name'] = ApiClient.convertToType(data['changed_by_name'], 'String');
            }
            if (data.hasOwnProperty('changed_by_url')) {
                obj['changed_by_url'] = ApiClient.convertToType(data['changed_by_url'], 'String');
            }
            if (data.hasOwnProperty('changed_on')) {
                obj['changed_on'] = ApiClient.convertToType(data['changed_on'], 'Date');
            }
            if (data.hasOwnProperty('changed_on_delta_humanized')) {
                obj['changed_on_delta_humanized'] = ApiClient.convertToType(data['changed_on_delta_humanized'], 'String');
            }
            if (data.hasOwnProperty('charts')) {
                obj['charts'] = ApiClient.convertToType(data['charts'], ['String']);
            }
            if (data.hasOwnProperty('css')) {
                obj['css'] = ApiClient.convertToType(data['css'], 'String');
            }
            if (data.hasOwnProperty('dashboard_title')) {
                obj['dashboard_title'] = ApiClient.convertToType(data['dashboard_title'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('json_metadata')) {
                obj['json_metadata'] = ApiClient.convertToType(data['json_metadata'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [User]);
            }
            if (data.hasOwnProperty('position_json')) {
                obj['position_json'] = ApiClient.convertToType(data['position_json'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [Roles]);
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('table_names')) {
                obj['table_names'] = ApiClient.convertToType(data['table_names'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_url')) {
                obj['thumbnail_url'] = ApiClient.convertToType(data['thumbnail_url'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardGetResponseSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardGetResponseSchema</code>.
     */
    static validateJSON(data) {
        // validate the optional field `changed_by`
        if (data['changed_by']) { // data not null
          User.validateJSON(data['changed_by']);
        }
        // ensure the json data is a string
        if (data['changed_by_name'] && !(typeof data['changed_by_name'] === 'string' || data['changed_by_name'] instanceof String)) {
            throw new Error("Expected the field `changed_by_name` to be a primitive type in the JSON string but got " + data['changed_by_name']);
        }
        // ensure the json data is a string
        if (data['changed_by_url'] && !(typeof data['changed_by_url'] === 'string' || data['changed_by_url'] instanceof String)) {
            throw new Error("Expected the field `changed_by_url` to be a primitive type in the JSON string but got " + data['changed_by_url']);
        }
        // ensure the json data is a string
        if (data['changed_on_delta_humanized'] && !(typeof data['changed_on_delta_humanized'] === 'string' || data['changed_on_delta_humanized'] instanceof String)) {
            throw new Error("Expected the field `changed_on_delta_humanized` to be a primitive type in the JSON string but got " + data['changed_on_delta_humanized']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['charts'])) {
            throw new Error("Expected the field `charts` to be an array in the JSON data but got " + data['charts']);
        }
        // ensure the json data is a string
        if (data['css'] && !(typeof data['css'] === 'string' || data['css'] instanceof String)) {
            throw new Error("Expected the field `css` to be a primitive type in the JSON string but got " + data['css']);
        }
        // ensure the json data is a string
        if (data['dashboard_title'] && !(typeof data['dashboard_title'] === 'string' || data['dashboard_title'] instanceof String)) {
            throw new Error("Expected the field `dashboard_title` to be a primitive type in the JSON string but got " + data['dashboard_title']);
        }
        // ensure the json data is a string
        if (data['json_metadata'] && !(typeof data['json_metadata'] === 'string' || data['json_metadata'] instanceof String)) {
            throw new Error("Expected the field `json_metadata` to be a primitive type in the JSON string but got " + data['json_metadata']);
        }
        if (data['owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['owners'])) {
                throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
            }
            // validate the optional field `owners` (array)
            for (const item of data['owners']) {
                User.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['position_json'] && !(typeof data['position_json'] === 'string' || data['position_json'] instanceof String)) {
            throw new Error("Expected the field `position_json` to be a primitive type in the JSON string but got " + data['position_json']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                Roles.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['table_names'] && !(typeof data['table_names'] === 'string' || data['table_names'] instanceof String)) {
            throw new Error("Expected the field `table_names` to be a primitive type in the JSON string but got " + data['table_names']);
        }
        // ensure the json data is a string
        if (data['thumbnail_url'] && !(typeof data['thumbnail_url'] === 'string' || data['thumbnail_url'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got " + data['thumbnail_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} changed_by
 */
DashboardGetResponseSchema.prototype['changed_by'] = undefined;

/**
 * @member {String} changed_by_name
 */
DashboardGetResponseSchema.prototype['changed_by_name'] = undefined;

/**
 * @member {String} changed_by_url
 */
DashboardGetResponseSchema.prototype['changed_by_url'] = undefined;

/**
 * @member {Date} changed_on
 */
DashboardGetResponseSchema.prototype['changed_on'] = undefined;

/**
 * @member {String} changed_on_delta_humanized
 */
DashboardGetResponseSchema.prototype['changed_on_delta_humanized'] = undefined;

/**
 * @member {Array.<String>} charts
 */
DashboardGetResponseSchema.prototype['charts'] = undefined;

/**
 * Override CSS for the dashboard.
 * @member {String} css
 */
DashboardGetResponseSchema.prototype['css'] = undefined;

/**
 * A title for the dashboard.
 * @member {String} dashboard_title
 */
DashboardGetResponseSchema.prototype['dashboard_title'] = undefined;

/**
 * @member {Number} id
 */
DashboardGetResponseSchema.prototype['id'] = undefined;

/**
 * This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter  specific parameters.
 * @member {String} json_metadata
 */
DashboardGetResponseSchema.prototype['json_metadata'] = undefined;

/**
 * @member {Array.<module:model/User>} owners
 */
DashboardGetResponseSchema.prototype['owners'] = undefined;

/**
 * This json object describes the positioning of the widgets in the dashboard. It is dynamically generated when adjusting the widgets size and positions by using drag & drop in the dashboard view
 * @member {String} position_json
 */
DashboardGetResponseSchema.prototype['position_json'] = undefined;

/**
 * @member {Boolean} published
 */
DashboardGetResponseSchema.prototype['published'] = undefined;

/**
 * @member {Array.<module:model/Roles>} roles
 */
DashboardGetResponseSchema.prototype['roles'] = undefined;

/**
 * @member {String} slug
 */
DashboardGetResponseSchema.prototype['slug'] = undefined;

/**
 * @member {String} table_names
 */
DashboardGetResponseSchema.prototype['table_names'] = undefined;

/**
 * @member {String} thumbnail_url
 */
DashboardGetResponseSchema.prototype['thumbnail_url'] = undefined;

/**
 * @member {String} url
 */
DashboardGetResponseSchema.prototype['url'] = undefined;






export default DashboardGetResponseSchema;

