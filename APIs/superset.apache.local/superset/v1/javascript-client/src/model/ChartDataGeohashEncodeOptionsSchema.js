/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataGeohashEncodeOptionsSchema model module.
 * @module model/ChartDataGeohashEncodeOptionsSchema
 * @version v1
 */
class ChartDataGeohashEncodeOptionsSchema {
    /**
     * Constructs a new <code>ChartDataGeohashEncodeOptionsSchema</code>.
     * @alias module:model/ChartDataGeohashEncodeOptionsSchema
     * @param geohash {String} Name of target column for encoded geohash string
     * @param latitude {String} Name of source latitude column
     * @param longitude {String} Name of source longitude column
     */
    constructor(geohash, latitude, longitude) { 
        
        ChartDataGeohashEncodeOptionsSchema.initialize(this, geohash, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, geohash, latitude, longitude) { 
        obj['geohash'] = geohash;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>ChartDataGeohashEncodeOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataGeohashEncodeOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataGeohashEncodeOptionsSchema} The populated <code>ChartDataGeohashEncodeOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataGeohashEncodeOptionsSchema();

            if (data.hasOwnProperty('geohash')) {
                obj['geohash'] = ApiClient.convertToType(data['geohash'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataGeohashEncodeOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataGeohashEncodeOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataGeohashEncodeOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['geohash'] && !(typeof data['geohash'] === 'string' || data['geohash'] instanceof String)) {
            throw new Error("Expected the field `geohash` to be a primitive type in the JSON string but got " + data['geohash']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }

        return true;
    }


}

ChartDataGeohashEncodeOptionsSchema.RequiredProperties = ["geohash", "latitude", "longitude"];

/**
 * Name of target column for encoded geohash string
 * @member {String} geohash
 */
ChartDataGeohashEncodeOptionsSchema.prototype['geohash'] = undefined;

/**
 * Name of source latitude column
 * @member {String} latitude
 */
ChartDataGeohashEncodeOptionsSchema.prototype['latitude'] = undefined;

/**
 * Name of source longitude column
 * @member {String} longitude
 */
ChartDataGeohashEncodeOptionsSchema.prototype['longitude'] = undefined;






export default ChartDataGeohashEncodeOptionsSchema;

