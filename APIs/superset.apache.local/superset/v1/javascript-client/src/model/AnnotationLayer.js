/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnotationLayer model module.
 * @module model/AnnotationLayer
 * @version v1
 */
class AnnotationLayer {
    /**
     * Constructs a new <code>AnnotationLayer</code>.
     * @alias module:model/AnnotationLayer
     * @param name {String} Name of layer
     * @param show {Boolean} Should the layer be shown
     * @param showMarkers {Boolean} Should markers be shown. Only applies to line annotations.
     * @param value {Object} For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
     */
    constructor(name, show, showMarkers, value) { 
        
        AnnotationLayer.initialize(this, name, show, showMarkers, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, show, showMarkers, value) { 
        obj['name'] = name;
        obj['show'] = show;
        obj['showMarkers'] = showMarkers;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>AnnotationLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationLayer} obj Optional instance to populate.
     * @return {module:model/AnnotationLayer} The populated <code>AnnotationLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationLayer();

            if (data.hasOwnProperty('annotationType')) {
                obj['annotationType'] = ApiClient.convertToType(data['annotationType'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('descriptionColumns')) {
                obj['descriptionColumns'] = ApiClient.convertToType(data['descriptionColumns'], ['String']);
            }
            if (data.hasOwnProperty('hideLine')) {
                obj['hideLine'] = ApiClient.convertToType(data['hideLine'], 'Boolean');
            }
            if (data.hasOwnProperty('intervalEndColumn')) {
                obj['intervalEndColumn'] = ApiClient.convertToType(data['intervalEndColumn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'String');
            }
            if (data.hasOwnProperty('overrides')) {
                obj['overrides'] = ApiClient.convertToType(data['overrides'], {'String': Object});
            }
            if (data.hasOwnProperty('show')) {
                obj['show'] = ApiClient.convertToType(data['show'], 'Boolean');
            }
            if (data.hasOwnProperty('showMarkers')) {
                obj['showMarkers'] = ApiClient.convertToType(data['showMarkers'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('timeColumn')) {
                obj['timeColumn'] = ApiClient.convertToType(data['timeColumn'], 'String');
            }
            if (data.hasOwnProperty('titleColumn')) {
                obj['titleColumn'] = ApiClient.convertToType(data['titleColumn'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotationLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotationLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnnotationLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['annotationType'] && !(typeof data['annotationType'] === 'string' || data['annotationType'] instanceof String)) {
            throw new Error("Expected the field `annotationType` to be a primitive type in the JSON string but got " + data['annotationType']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['descriptionColumns'])) {
            throw new Error("Expected the field `descriptionColumns` to be an array in the JSON data but got " + data['descriptionColumns']);
        }
        // ensure the json data is a string
        if (data['intervalEndColumn'] && !(typeof data['intervalEndColumn'] === 'string' || data['intervalEndColumn'] instanceof String)) {
            throw new Error("Expected the field `intervalEndColumn` to be a primitive type in the JSON string but got " + data['intervalEndColumn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['opacity'] && !(typeof data['opacity'] === 'string' || data['opacity'] instanceof String)) {
            throw new Error("Expected the field `opacity` to be a primitive type in the JSON string but got " + data['opacity']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // ensure the json data is a string
        if (data['timeColumn'] && !(typeof data['timeColumn'] === 'string' || data['timeColumn'] instanceof String)) {
            throw new Error("Expected the field `timeColumn` to be a primitive type in the JSON string but got " + data['timeColumn']);
        }
        // ensure the json data is a string
        if (data['titleColumn'] && !(typeof data['titleColumn'] === 'string' || data['titleColumn'] instanceof String)) {
            throw new Error("Expected the field `titleColumn` to be a primitive type in the JSON string but got " + data['titleColumn']);
        }

        return true;
    }


}

AnnotationLayer.RequiredProperties = ["name", "show", "showMarkers", "value"];

/**
 * Type of annotation layer
 * @member {module:model/AnnotationLayer.AnnotationTypeEnum} annotationType
 */
AnnotationLayer.prototype['annotationType'] = undefined;

/**
 * Layer color
 * @member {String} color
 */
AnnotationLayer.prototype['color'] = undefined;

/**
 * Columns to use as the description. If none are provided, all will be shown.
 * @member {Array.<String>} descriptionColumns
 */
AnnotationLayer.prototype['descriptionColumns'] = undefined;

/**
 * Should line be hidden. Only applies to line annotations
 * @member {Boolean} hideLine
 */
AnnotationLayer.prototype['hideLine'] = undefined;

/**
 * Column containing end of interval. Only applies to interval layers
 * @member {String} intervalEndColumn
 */
AnnotationLayer.prototype['intervalEndColumn'] = undefined;

/**
 * Name of layer
 * @member {String} name
 */
AnnotationLayer.prototype['name'] = undefined;

/**
 * Opacity of layer
 * @member {module:model/AnnotationLayer.OpacityEnum} opacity
 */
AnnotationLayer.prototype['opacity'] = undefined;

/**
 * which properties should be overridable
 * @member {Object.<String, Object>} overrides
 */
AnnotationLayer.prototype['overrides'] = undefined;

/**
 * Should the layer be shown
 * @member {Boolean} show
 */
AnnotationLayer.prototype['show'] = undefined;

/**
 * Should markers be shown. Only applies to line annotations.
 * @member {Boolean} showMarkers
 */
AnnotationLayer.prototype['showMarkers'] = undefined;

/**
 * Type of source for annotation data
 * @member {module:model/AnnotationLayer.SourceTypeEnum} sourceType
 */
AnnotationLayer.prototype['sourceType'] = undefined;

/**
 * Line style. Only applies to time-series annotations
 * @member {module:model/AnnotationLayer.StyleEnum} style
 */
AnnotationLayer.prototype['style'] = undefined;

/**
 * Column with event date or interval start date
 * @member {String} timeColumn
 */
AnnotationLayer.prototype['timeColumn'] = undefined;

/**
 * Column with title
 * @member {String} titleColumn
 */
AnnotationLayer.prototype['titleColumn'] = undefined;

/**
 * For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
 * @member {Object} value
 */
AnnotationLayer.prototype['value'] = undefined;

/**
 * Width of annotation line
 * @member {Number} width
 */
AnnotationLayer.prototype['width'] = undefined;





/**
 * Allowed values for the <code>annotationType</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationLayer['AnnotationTypeEnum'] = {

    /**
     * value: "FORMULA"
     * @const
     */
    "FORMULA": "FORMULA",

    /**
     * value: "INTERVAL"
     * @const
     */
    "INTERVAL": "INTERVAL",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT",

    /**
     * value: "TIME_SERIES"
     * @const
     */
    "TIME_SERIES": "TIME_SERIES"
};


/**
 * Allowed values for the <code>opacity</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationLayer['OpacityEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "opacityLow"
     * @const
     */
    "opacityLow": "opacityLow",

    /**
     * value: "opacityMedium"
     * @const
     */
    "opacityMedium": "opacityMedium",

    /**
     * value: "opacityHigh"
     * @const
     */
    "opacityHigh": "opacityHigh"
};


/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationLayer['SourceTypeEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "line"
     * @const
     */
    "line": "line",

    /**
     * value: "NATIVE"
     * @const
     */
    "NATIVE": "NATIVE",

    /**
     * value: "table"
     * @const
     */
    "table": "table"
};


/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationLayer['StyleEnum'] = {

    /**
     * value: "dashed"
     * @const
     */
    "dashed": "dashed",

    /**
     * value: "dotted"
     * @const
     */
    "dotted": "dotted",

    /**
     * value: "solid"
     * @const
     */
    "solid": "solid",

    /**
     * value: "longDashed"
     * @const
     */
    "longDashed": "longDashed"
};



export default AnnotationLayer;

