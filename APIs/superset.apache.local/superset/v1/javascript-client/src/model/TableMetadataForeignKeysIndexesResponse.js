/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableMetadataOptionsResponse from './TableMetadataOptionsResponse';

/**
 * The TableMetadataForeignKeysIndexesResponse model module.
 * @module model/TableMetadataForeignKeysIndexesResponse
 * @version v1
 */
class TableMetadataForeignKeysIndexesResponse {
    /**
     * Constructs a new <code>TableMetadataForeignKeysIndexesResponse</code>.
     * @alias module:model/TableMetadataForeignKeysIndexesResponse
     */
    constructor() { 
        
        TableMetadataForeignKeysIndexesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableMetadataForeignKeysIndexesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableMetadataForeignKeysIndexesResponse} obj Optional instance to populate.
     * @return {module:model/TableMetadataForeignKeysIndexesResponse} The populated <code>TableMetadataForeignKeysIndexesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableMetadataForeignKeysIndexesResponse();

            if (data.hasOwnProperty('column_names')) {
                obj['column_names'] = ApiClient.convertToType(data['column_names'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = TableMetadataOptionsResponse.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('referred_columns')) {
                obj['referred_columns'] = ApiClient.convertToType(data['referred_columns'], ['String']);
            }
            if (data.hasOwnProperty('referred_schema')) {
                obj['referred_schema'] = ApiClient.convertToType(data['referred_schema'], 'String');
            }
            if (data.hasOwnProperty('referred_table')) {
                obj['referred_table'] = ApiClient.convertToType(data['referred_table'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableMetadataForeignKeysIndexesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableMetadataForeignKeysIndexesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['column_names'])) {
            throw new Error("Expected the field `column_names` to be an array in the JSON data but got " + data['column_names']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          TableMetadataOptionsResponse.validateJSON(data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['referred_columns'])) {
            throw new Error("Expected the field `referred_columns` to be an array in the JSON data but got " + data['referred_columns']);
        }
        // ensure the json data is a string
        if (data['referred_schema'] && !(typeof data['referred_schema'] === 'string' || data['referred_schema'] instanceof String)) {
            throw new Error("Expected the field `referred_schema` to be a primitive type in the JSON string but got " + data['referred_schema']);
        }
        // ensure the json data is a string
        if (data['referred_table'] && !(typeof data['referred_table'] === 'string' || data['referred_table'] instanceof String)) {
            throw new Error("Expected the field `referred_table` to be a primitive type in the JSON string but got " + data['referred_table']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} column_names
 */
TableMetadataForeignKeysIndexesResponse.prototype['column_names'] = undefined;

/**
 * The name of the foreign key or index
 * @member {String} name
 */
TableMetadataForeignKeysIndexesResponse.prototype['name'] = undefined;

/**
 * @member {module:model/TableMetadataOptionsResponse} options
 */
TableMetadataForeignKeysIndexesResponse.prototype['options'] = undefined;

/**
 * @member {Array.<String>} referred_columns
 */
TableMetadataForeignKeysIndexesResponse.prototype['referred_columns'] = undefined;

/**
 * @member {String} referred_schema
 */
TableMetadataForeignKeysIndexesResponse.prototype['referred_schema'] = undefined;

/**
 * @member {String} referred_table
 */
TableMetadataForeignKeysIndexesResponse.prototype['referred_table'] = undefined;

/**
 * @member {String} type
 */
TableMetadataForeignKeysIndexesResponse.prototype['type'] = undefined;






export default TableMetadataForeignKeysIndexesResponse;

