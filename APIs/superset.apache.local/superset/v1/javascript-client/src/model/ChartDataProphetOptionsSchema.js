/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataProphetOptionsSchema model module.
 * @module model/ChartDataProphetOptionsSchema
 * @version v1
 */
class ChartDataProphetOptionsSchema {
    /**
     * Constructs a new <code>ChartDataProphetOptionsSchema</code>.
     * @alias module:model/ChartDataProphetOptionsSchema
     * @param confidenceInterval {Number} Width of predicted confidence interval
     * @param periods {Number} 
     * @param timeGrain {module:model/ChartDataProphetOptionsSchema.TimeGrainEnum} Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
     */
    constructor(confidenceInterval, periods, timeGrain) { 
        
        ChartDataProphetOptionsSchema.initialize(this, confidenceInterval, periods, timeGrain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confidenceInterval, periods, timeGrain) { 
        obj['confidence_interval'] = confidenceInterval;
        obj['periods'] = periods;
        obj['time_grain'] = timeGrain;
    }

    /**
     * Constructs a <code>ChartDataProphetOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataProphetOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataProphetOptionsSchema} The populated <code>ChartDataProphetOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataProphetOptionsSchema();

            if (data.hasOwnProperty('confidence_interval')) {
                obj['confidence_interval'] = ApiClient.convertToType(data['confidence_interval'], 'Number');
            }
            if (data.hasOwnProperty('monthly_seasonality')) {
                obj['monthly_seasonality'] = ApiClient.convertToType(data['monthly_seasonality'], Object);
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], 'Number');
            }
            if (data.hasOwnProperty('time_grain')) {
                obj['time_grain'] = ApiClient.convertToType(data['time_grain'], 'String');
            }
            if (data.hasOwnProperty('weekly_seasonality')) {
                obj['weekly_seasonality'] = ApiClient.convertToType(data['weekly_seasonality'], Object);
            }
            if (data.hasOwnProperty('yearly_seasonality')) {
                obj['yearly_seasonality'] = ApiClient.convertToType(data['yearly_seasonality'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataProphetOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataProphetOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataProphetOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['time_grain'] && !(typeof data['time_grain'] === 'string' || data['time_grain'] instanceof String)) {
            throw new Error("Expected the field `time_grain` to be a primitive type in the JSON string but got " + data['time_grain']);
        }

        return true;
    }


}

ChartDataProphetOptionsSchema.RequiredProperties = ["confidence_interval", "periods", "time_grain"];

/**
 * Width of predicted confidence interval
 * @member {Number} confidence_interval
 */
ChartDataProphetOptionsSchema.prototype['confidence_interval'] = undefined;

/**
 * Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} monthly_seasonality
 */
ChartDataProphetOptionsSchema.prototype['monthly_seasonality'] = undefined;

/**
 * @member {Number} periods
 */
ChartDataProphetOptionsSchema.prototype['periods'] = undefined;

/**
 * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
 * @member {module:model/ChartDataProphetOptionsSchema.TimeGrainEnum} time_grain
 */
ChartDataProphetOptionsSchema.prototype['time_grain'] = undefined;

/**
 * Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} weekly_seasonality
 */
ChartDataProphetOptionsSchema.prototype['weekly_seasonality'] = undefined;

/**
 * Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} yearly_seasonality
 */
ChartDataProphetOptionsSchema.prototype['yearly_seasonality'] = undefined;





/**
 * Allowed values for the <code>time_grain</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataProphetOptionsSchema['TimeGrainEnum'] = {

    /**
     * value: "PT1S"
     * @const
     */
    "PT1S": "PT1S",

    /**
     * value: "PT5S"
     * @const
     */
    "PT5S": "PT5S",

    /**
     * value: "PT30S"
     * @const
     */
    "PT30S": "PT30S",

    /**
     * value: "PT1M"
     * @const
     */
    "PT1M": "PT1M",

    /**
     * value: "PT5M"
     * @const
     */
    "PT5M": "PT5M",

    /**
     * value: "PT10M"
     * @const
     */
    "PT10M": "PT10M",

    /**
     * value: "PT15M"
     * @const
     */
    "PT15M": "PT15M",

    /**
     * value: "PT0.5H"
     * @const
     */
    "PT0.5H": "PT0.5H",

    /**
     * value: "PT1H"
     * @const
     */
    "PT1H": "PT1H",

    /**
     * value: "PT6H"
     * @const
     */
    "PT6H": "PT6H",

    /**
     * value: "P1D"
     * @const
     */
    "P1D": "P1D",

    /**
     * value: "P1W"
     * @const
     */
    "P1W": "P1W",

    /**
     * value: "P1M"
     * @const
     */
    "P1M": "P1M",

    /**
     * value: "P0.25Y"
     * @const
     */
    "P0.25Y": "P0.25Y",

    /**
     * value: "P1Y"
     * @const
     */
    "P1Y": "P1Y",

    /**
     * value: "1969-12-28T00:00:00Z/P1W"
     * @const
     */
    "1969-12-28T00:00:00Z/P1W": "1969-12-28T00:00:00Z/P1W",

    /**
     * value: "1969-12-29T00:00:00Z/P1W"
     * @const
     */
    "1969-12-29T00:00:00Z/P1W": "1969-12-29T00:00:00Z/P1W",

    /**
     * value: "P1W/1970-01-03T00:00:00Z"
     * @const
     */
    "P1W/1970-01-03T00:00:00Z": "P1W/1970-01-03T00:00:00Z",

    /**
     * value: "P1W/1970-01-04T00:00:00Z"
     * @const
     */
    "P1W/1970-01-04T00:00:00Z": "P1W/1970-01-04T00:00:00Z"
};



export default ChartDataProphetOptionsSchema;

