/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Database from './Database';

/**
 * The DashboardDatasetSchema model module.
 * @module model/DashboardDatasetSchema
 * @version v1
 */
class DashboardDatasetSchema {
    /**
     * Constructs a new <code>DashboardDatasetSchema</code>.
     * @alias module:model/DashboardDatasetSchema
     */
    constructor() { 
        
        DashboardDatasetSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardDatasetSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardDatasetSchema} obj Optional instance to populate.
     * @return {module:model/DashboardDatasetSchema} The populated <code>DashboardDatasetSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardDatasetSchema();

            if (data.hasOwnProperty('cache_timeout')) {
                obj['cache_timeout'] = ApiClient.convertToType(data['cache_timeout'], 'Number');
            }
            if (data.hasOwnProperty('column_formats')) {
                obj['column_formats'] = ApiClient.convertToType(data['column_formats'], Object);
            }
            if (data.hasOwnProperty('column_types')) {
                obj['column_types'] = ApiClient.convertToType(data['column_types'], ['Number']);
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [Object]);
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = Database.constructFromObject(data['database']);
            }
            if (data.hasOwnProperty('datasource_name')) {
                obj['datasource_name'] = ApiClient.convertToType(data['datasource_name'], 'String');
            }
            if (data.hasOwnProperty('default_endpoint')) {
                obj['default_endpoint'] = ApiClient.convertToType(data['default_endpoint'], 'String');
            }
            if (data.hasOwnProperty('edit_url')) {
                obj['edit_url'] = ApiClient.convertToType(data['edit_url'], 'String');
            }
            if (data.hasOwnProperty('fetch_values_predicate')) {
                obj['fetch_values_predicate'] = ApiClient.convertToType(data['fetch_values_predicate'], 'String');
            }
            if (data.hasOwnProperty('filter_select')) {
                obj['filter_select'] = ApiClient.convertToType(data['filter_select'], 'Boolean');
            }
            if (data.hasOwnProperty('filter_select_enabled')) {
                obj['filter_select_enabled'] = ApiClient.convertToType(data['filter_select_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('granularity_sqla')) {
                obj['granularity_sqla'] = ApiClient.convertToType(data['granularity_sqla'], [['String']]);
            }
            if (data.hasOwnProperty('health_check_message')) {
                obj['health_check_message'] = ApiClient.convertToType(data['health_check_message'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_sqllab_view')) {
                obj['is_sqllab_view'] = ApiClient.convertToType(data['is_sqllab_view'], 'Boolean');
            }
            if (data.hasOwnProperty('main_dttm_col')) {
                obj['main_dttm_col'] = ApiClient.convertToType(data['main_dttm_col'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Object]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('order_by_choices')) {
                obj['order_by_choices'] = ApiClient.convertToType(data['order_by_choices'], [['String']]);
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], ['Number']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], 'String');
            }
            if (data.hasOwnProperty('perm')) {
                obj['perm'] = ApiClient.convertToType(data['perm'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('select_star')) {
                obj['select_star'] = ApiClient.convertToType(data['select_star'], 'String');
            }
            if (data.hasOwnProperty('sql')) {
                obj['sql'] = ApiClient.convertToType(data['sql'], 'String');
            }
            if (data.hasOwnProperty('table_name')) {
                obj['table_name'] = ApiClient.convertToType(data['table_name'], 'String');
            }
            if (data.hasOwnProperty('template_params')) {
                obj['template_params'] = ApiClient.convertToType(data['template_params'], 'String');
            }
            if (data.hasOwnProperty('time_grain_sqla')) {
                obj['time_grain_sqla'] = ApiClient.convertToType(data['time_grain_sqla'], [['String']]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('verbose_map')) {
                obj['verbose_map'] = ApiClient.convertToType(data['verbose_map'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardDatasetSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardDatasetSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['column_types'])) {
            throw new Error("Expected the field `column_types` to be an array in the JSON data but got " + data['column_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // validate the optional field `database`
        if (data['database']) { // data not null
          Database.validateJSON(data['database']);
        }
        // ensure the json data is a string
        if (data['datasource_name'] && !(typeof data['datasource_name'] === 'string' || data['datasource_name'] instanceof String)) {
            throw new Error("Expected the field `datasource_name` to be a primitive type in the JSON string but got " + data['datasource_name']);
        }
        // ensure the json data is a string
        if (data['default_endpoint'] && !(typeof data['default_endpoint'] === 'string' || data['default_endpoint'] instanceof String)) {
            throw new Error("Expected the field `default_endpoint` to be a primitive type in the JSON string but got " + data['default_endpoint']);
        }
        // ensure the json data is a string
        if (data['edit_url'] && !(typeof data['edit_url'] === 'string' || data['edit_url'] instanceof String)) {
            throw new Error("Expected the field `edit_url` to be a primitive type in the JSON string but got " + data['edit_url']);
        }
        // ensure the json data is a string
        if (data['fetch_values_predicate'] && !(typeof data['fetch_values_predicate'] === 'string' || data['fetch_values_predicate'] instanceof String)) {
            throw new Error("Expected the field `fetch_values_predicate` to be a primitive type in the JSON string but got " + data['fetch_values_predicate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['granularity_sqla'])) {
            throw new Error("Expected the field `granularity_sqla` to be an array in the JSON data but got " + data['granularity_sqla']);
        }
        // ensure the json data is a string
        if (data['health_check_message'] && !(typeof data['health_check_message'] === 'string' || data['health_check_message'] instanceof String)) {
            throw new Error("Expected the field `health_check_message` to be a primitive type in the JSON string but got " + data['health_check_message']);
        }
        // ensure the json data is a string
        if (data['main_dttm_col'] && !(typeof data['main_dttm_col'] === 'string' || data['main_dttm_col'] instanceof String)) {
            throw new Error("Expected the field `main_dttm_col` to be a primitive type in the JSON string but got " + data['main_dttm_col']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['order_by_choices'])) {
            throw new Error("Expected the field `order_by_choices` to be an array in the JSON data but got " + data['order_by_choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['owners'])) {
            throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
        }
        // ensure the json data is a string
        if (data['params'] && !(typeof data['params'] === 'string' || data['params'] instanceof String)) {
            throw new Error("Expected the field `params` to be a primitive type in the JSON string but got " + data['params']);
        }
        // ensure the json data is a string
        if (data['perm'] && !(typeof data['perm'] === 'string' || data['perm'] instanceof String)) {
            throw new Error("Expected the field `perm` to be a primitive type in the JSON string but got " + data['perm']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }
        // ensure the json data is a string
        if (data['select_star'] && !(typeof data['select_star'] === 'string' || data['select_star'] instanceof String)) {
            throw new Error("Expected the field `select_star` to be a primitive type in the JSON string but got " + data['select_star']);
        }
        // ensure the json data is a string
        if (data['sql'] && !(typeof data['sql'] === 'string' || data['sql'] instanceof String)) {
            throw new Error("Expected the field `sql` to be a primitive type in the JSON string but got " + data['sql']);
        }
        // ensure the json data is a string
        if (data['table_name'] && !(typeof data['table_name'] === 'string' || data['table_name'] instanceof String)) {
            throw new Error("Expected the field `table_name` to be a primitive type in the JSON string but got " + data['table_name']);
        }
        // ensure the json data is a string
        if (data['template_params'] && !(typeof data['template_params'] === 'string' || data['template_params'] instanceof String)) {
            throw new Error("Expected the field `template_params` to be a primitive type in the JSON string but got " + data['template_params']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['time_grain_sqla'])) {
            throw new Error("Expected the field `time_grain_sqla` to be an array in the JSON data but got " + data['time_grain_sqla']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {Number} cache_timeout
 */
DashboardDatasetSchema.prototype['cache_timeout'] = undefined;

/**
 * @member {Object} column_formats
 */
DashboardDatasetSchema.prototype['column_formats'] = undefined;

/**
 * @member {Array.<Number>} column_types
 */
DashboardDatasetSchema.prototype['column_types'] = undefined;

/**
 * @member {Array.<Object>} columns
 */
DashboardDatasetSchema.prototype['columns'] = undefined;

/**
 * @member {module:model/Database} database
 */
DashboardDatasetSchema.prototype['database'] = undefined;

/**
 * @member {String} datasource_name
 */
DashboardDatasetSchema.prototype['datasource_name'] = undefined;

/**
 * @member {String} default_endpoint
 */
DashboardDatasetSchema.prototype['default_endpoint'] = undefined;

/**
 * @member {String} edit_url
 */
DashboardDatasetSchema.prototype['edit_url'] = undefined;

/**
 * @member {String} fetch_values_predicate
 */
DashboardDatasetSchema.prototype['fetch_values_predicate'] = undefined;

/**
 * @member {Boolean} filter_select
 */
DashboardDatasetSchema.prototype['filter_select'] = undefined;

/**
 * @member {Boolean} filter_select_enabled
 */
DashboardDatasetSchema.prototype['filter_select_enabled'] = undefined;

/**
 * @member {Array.<Array.<String>>} granularity_sqla
 */
DashboardDatasetSchema.prototype['granularity_sqla'] = undefined;

/**
 * @member {String} health_check_message
 */
DashboardDatasetSchema.prototype['health_check_message'] = undefined;

/**
 * @member {Number} id
 */
DashboardDatasetSchema.prototype['id'] = undefined;

/**
 * @member {Boolean} is_sqllab_view
 */
DashboardDatasetSchema.prototype['is_sqllab_view'] = undefined;

/**
 * @member {String} main_dttm_col
 */
DashboardDatasetSchema.prototype['main_dttm_col'] = undefined;

/**
 * @member {Array.<Object>} metrics
 */
DashboardDatasetSchema.prototype['metrics'] = undefined;

/**
 * @member {String} name
 */
DashboardDatasetSchema.prototype['name'] = undefined;

/**
 * @member {Number} offset
 */
DashboardDatasetSchema.prototype['offset'] = undefined;

/**
 * @member {Array.<Array.<String>>} order_by_choices
 */
DashboardDatasetSchema.prototype['order_by_choices'] = undefined;

/**
 * @member {Array.<Number>} owners
 */
DashboardDatasetSchema.prototype['owners'] = undefined;

/**
 * @member {String} params
 */
DashboardDatasetSchema.prototype['params'] = undefined;

/**
 * @member {String} perm
 */
DashboardDatasetSchema.prototype['perm'] = undefined;

/**
 * @member {String} schema
 */
DashboardDatasetSchema.prototype['schema'] = undefined;

/**
 * @member {String} select_star
 */
DashboardDatasetSchema.prototype['select_star'] = undefined;

/**
 * @member {String} sql
 */
DashboardDatasetSchema.prototype['sql'] = undefined;

/**
 * @member {String} table_name
 */
DashboardDatasetSchema.prototype['table_name'] = undefined;

/**
 * @member {String} template_params
 */
DashboardDatasetSchema.prototype['template_params'] = undefined;

/**
 * @member {Array.<Array.<String>>} time_grain_sqla
 */
DashboardDatasetSchema.prototype['time_grain_sqla'] = undefined;

/**
 * @member {String} type
 */
DashboardDatasetSchema.prototype['type'] = undefined;

/**
 * @member {String} uid
 */
DashboardDatasetSchema.prototype['uid'] = undefined;

/**
 * @member {Object.<String, String>} verbose_map
 */
DashboardDatasetSchema.prototype['verbose_map'] = undefined;






export default DashboardDatasetSchema;

