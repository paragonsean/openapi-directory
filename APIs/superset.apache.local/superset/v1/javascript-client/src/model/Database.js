/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Database model module.
 * @module model/Database
 * @version v1
 */
class Database {
    /**
     * Constructs a new <code>Database</code>.
     * @alias module:model/Database
     */
    constructor() { 
        
        Database.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Database</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Database} obj Optional instance to populate.
     * @return {module:model/Database} The populated <code>Database</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Database();

            if (data.hasOwnProperty('allow_multi_schema_metadata_fetch')) {
                obj['allow_multi_schema_metadata_fetch'] = ApiClient.convertToType(data['allow_multi_schema_metadata_fetch'], 'Boolean');
            }
            if (data.hasOwnProperty('allows_cost_estimate')) {
                obj['allows_cost_estimate'] = ApiClient.convertToType(data['allows_cost_estimate'], 'Boolean');
            }
            if (data.hasOwnProperty('allows_subquery')) {
                obj['allows_subquery'] = ApiClient.convertToType(data['allows_subquery'], 'Boolean');
            }
            if (data.hasOwnProperty('allows_virtual_table_explore')) {
                obj['allows_virtual_table_explore'] = ApiClient.convertToType(data['allows_virtual_table_explore'], 'Boolean');
            }
            if (data.hasOwnProperty('backend')) {
                obj['backend'] = ApiClient.convertToType(data['backend'], 'String');
            }
            if (data.hasOwnProperty('explore_database_id')) {
                obj['explore_database_id'] = ApiClient.convertToType(data['explore_database_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Database</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Database</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backend'] && !(typeof data['backend'] === 'string' || data['backend'] instanceof String)) {
            throw new Error("Expected the field `backend` to be a primitive type in the JSON string but got " + data['backend']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {Boolean} allow_multi_schema_metadata_fetch
 */
Database.prototype['allow_multi_schema_metadata_fetch'] = undefined;

/**
 * @member {Boolean} allows_cost_estimate
 */
Database.prototype['allows_cost_estimate'] = undefined;

/**
 * @member {Boolean} allows_subquery
 */
Database.prototype['allows_subquery'] = undefined;

/**
 * @member {Boolean} allows_virtual_table_explore
 */
Database.prototype['allows_virtual_table_explore'] = undefined;

/**
 * @member {String} backend
 */
Database.prototype['backend'] = undefined;

/**
 * @member {Number} explore_database_id
 */
Database.prototype['explore_database_id'] = undefined;

/**
 * @member {Number} id
 */
Database.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Database.prototype['name'] = undefined;






export default Database;

