/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Meta6 model module.
 * @module model/Meta6
 * @version v1
 */
class Meta6 {
    /**
     * Constructs a new <code>Meta6</code>.
     * @alias module:model/Meta6
     * @param tableName {String} 
     */
    constructor(tableName) { 
        
        Meta6.initialize(this, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tableName) { 
        obj['table_name'] = tableName;
    }

    /**
     * Constructs a <code>Meta6</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Meta6} obj Optional instance to populate.
     * @return {module:model/Meta6} The populated <code>Meta6</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Meta6();

            if (data.hasOwnProperty('default_endpoint')) {
                obj['default_endpoint'] = ApiClient.convertToType(data['default_endpoint'], 'String');
            }
            if (data.hasOwnProperty('table_name')) {
                obj['table_name'] = ApiClient.convertToType(data['table_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Meta6</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Meta6</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Meta6.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['default_endpoint'] && !(typeof data['default_endpoint'] === 'string' || data['default_endpoint'] instanceof String)) {
            throw new Error("Expected the field `default_endpoint` to be a primitive type in the JSON string but got " + data['default_endpoint']);
        }
        // ensure the json data is a string
        if (data['table_name'] && !(typeof data['table_name'] === 'string' || data['table_name'] instanceof String)) {
            throw new Error("Expected the field `table_name` to be a primitive type in the JSON string but got " + data['table_name']);
        }

        return true;
    }


}

Meta6.RequiredProperties = ["table_name"];

/**
 * @member {String} default_endpoint
 */
Meta6.prototype['default_endpoint'] = undefined;

/**
 * @member {String} table_name
 */
Meta6.prototype['table_name'] = undefined;






export default Meta6;

