/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseRestApiGet model module.
 * @module model/DatabaseRestApiGet
 * @version v1
 */
class DatabaseRestApiGet {
    /**
     * Constructs a new <code>DatabaseRestApiGet</code>.
     * @alias module:model/DatabaseRestApiGet
     * @param databaseName {String} 
     * @param sqlalchemyUri {String} 
     */
    constructor(databaseName, sqlalchemyUri) { 
        
        DatabaseRestApiGet.initialize(this, databaseName, sqlalchemyUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, sqlalchemyUri) { 
        obj['database_name'] = databaseName;
        obj['sqlalchemy_uri'] = sqlalchemyUri;
    }

    /**
     * Constructs a <code>DatabaseRestApiGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseRestApiGet} obj Optional instance to populate.
     * @return {module:model/DatabaseRestApiGet} The populated <code>DatabaseRestApiGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseRestApiGet();

            if (data.hasOwnProperty('allow_csv_upload')) {
                obj['allow_csv_upload'] = ApiClient.convertToType(data['allow_csv_upload'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_ctas')) {
                obj['allow_ctas'] = ApiClient.convertToType(data['allow_ctas'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_cvas')) {
                obj['allow_cvas'] = ApiClient.convertToType(data['allow_cvas'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_dml')) {
                obj['allow_dml'] = ApiClient.convertToType(data['allow_dml'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_multi_schema_metadata_fetch')) {
                obj['allow_multi_schema_metadata_fetch'] = ApiClient.convertToType(data['allow_multi_schema_metadata_fetch'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_run_async')) {
                obj['allow_run_async'] = ApiClient.convertToType(data['allow_run_async'], 'Boolean');
            }
            if (data.hasOwnProperty('backend')) {
                obj['backend'] = ApiClient.convertToType(data['backend'], Object);
            }
            if (data.hasOwnProperty('cache_timeout')) {
                obj['cache_timeout'] = ApiClient.convertToType(data['cache_timeout'], 'Number');
            }
            if (data.hasOwnProperty('configuration_method')) {
                obj['configuration_method'] = ApiClient.convertToType(data['configuration_method'], 'String');
            }
            if (data.hasOwnProperty('database_name')) {
                obj['database_name'] = ApiClient.convertToType(data['database_name'], 'String');
            }
            if (data.hasOwnProperty('encrypted_extra')) {
                obj['encrypted_extra'] = ApiClient.convertToType(data['encrypted_extra'], 'String');
            }
            if (data.hasOwnProperty('expose_in_sqllab')) {
                obj['expose_in_sqllab'] = ApiClient.convertToType(data['expose_in_sqllab'], 'Boolean');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
            if (data.hasOwnProperty('force_ctas_schema')) {
                obj['force_ctas_schema'] = ApiClient.convertToType(data['force_ctas_schema'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('impersonate_user')) {
                obj['impersonate_user'] = ApiClient.convertToType(data['impersonate_user'], 'Boolean');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('server_cert')) {
                obj['server_cert'] = ApiClient.convertToType(data['server_cert'], 'String');
            }
            if (data.hasOwnProperty('sqlalchemy_uri')) {
                obj['sqlalchemy_uri'] = ApiClient.convertToType(data['sqlalchemy_uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseRestApiGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseRestApiGet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabaseRestApiGet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['configuration_method'] && !(typeof data['configuration_method'] === 'string' || data['configuration_method'] instanceof String)) {
            throw new Error("Expected the field `configuration_method` to be a primitive type in the JSON string but got " + data['configuration_method']);
        }
        // ensure the json data is a string
        if (data['database_name'] && !(typeof data['database_name'] === 'string' || data['database_name'] instanceof String)) {
            throw new Error("Expected the field `database_name` to be a primitive type in the JSON string but got " + data['database_name']);
        }
        // ensure the json data is a string
        if (data['encrypted_extra'] && !(typeof data['encrypted_extra'] === 'string' || data['encrypted_extra'] instanceof String)) {
            throw new Error("Expected the field `encrypted_extra` to be a primitive type in the JSON string but got " + data['encrypted_extra']);
        }
        // ensure the json data is a string
        if (data['extra'] && !(typeof data['extra'] === 'string' || data['extra'] instanceof String)) {
            throw new Error("Expected the field `extra` to be a primitive type in the JSON string but got " + data['extra']);
        }
        // ensure the json data is a string
        if (data['force_ctas_schema'] && !(typeof data['force_ctas_schema'] === 'string' || data['force_ctas_schema'] instanceof String)) {
            throw new Error("Expected the field `force_ctas_schema` to be a primitive type in the JSON string but got " + data['force_ctas_schema']);
        }
        // ensure the json data is a string
        if (data['server_cert'] && !(typeof data['server_cert'] === 'string' || data['server_cert'] instanceof String)) {
            throw new Error("Expected the field `server_cert` to be a primitive type in the JSON string but got " + data['server_cert']);
        }
        // ensure the json data is a string
        if (data['sqlalchemy_uri'] && !(typeof data['sqlalchemy_uri'] === 'string' || data['sqlalchemy_uri'] instanceof String)) {
            throw new Error("Expected the field `sqlalchemy_uri` to be a primitive type in the JSON string but got " + data['sqlalchemy_uri']);
        }

        return true;
    }


}

DatabaseRestApiGet.RequiredProperties = ["database_name", "sqlalchemy_uri"];

/**
 * @member {Boolean} allow_csv_upload
 */
DatabaseRestApiGet.prototype['allow_csv_upload'] = undefined;

/**
 * @member {Boolean} allow_ctas
 */
DatabaseRestApiGet.prototype['allow_ctas'] = undefined;

/**
 * @member {Boolean} allow_cvas
 */
DatabaseRestApiGet.prototype['allow_cvas'] = undefined;

/**
 * @member {Boolean} allow_dml
 */
DatabaseRestApiGet.prototype['allow_dml'] = undefined;

/**
 * @member {Boolean} allow_multi_schema_metadata_fetch
 */
DatabaseRestApiGet.prototype['allow_multi_schema_metadata_fetch'] = undefined;

/**
 * @member {Boolean} allow_run_async
 */
DatabaseRestApiGet.prototype['allow_run_async'] = undefined;

/**
 * @member {Object} backend
 */
DatabaseRestApiGet.prototype['backend'] = undefined;

/**
 * @member {Number} cache_timeout
 */
DatabaseRestApiGet.prototype['cache_timeout'] = undefined;

/**
 * @member {String} configuration_method
 */
DatabaseRestApiGet.prototype['configuration_method'] = undefined;

/**
 * @member {String} database_name
 */
DatabaseRestApiGet.prototype['database_name'] = undefined;

/**
 * @member {String} encrypted_extra
 */
DatabaseRestApiGet.prototype['encrypted_extra'] = undefined;

/**
 * @member {Boolean} expose_in_sqllab
 */
DatabaseRestApiGet.prototype['expose_in_sqllab'] = undefined;

/**
 * @member {String} extra
 */
DatabaseRestApiGet.prototype['extra'] = undefined;

/**
 * @member {String} force_ctas_schema
 */
DatabaseRestApiGet.prototype['force_ctas_schema'] = undefined;

/**
 * @member {Number} id
 */
DatabaseRestApiGet.prototype['id'] = undefined;

/**
 * @member {Boolean} impersonate_user
 */
DatabaseRestApiGet.prototype['impersonate_user'] = undefined;

/**
 * @member {Object} parameters
 */
DatabaseRestApiGet.prototype['parameters'] = undefined;

/**
 * @member {String} server_cert
 */
DatabaseRestApiGet.prototype['server_cert'] = undefined;

/**
 * @member {String} sqlalchemy_uri
 */
DatabaseRestApiGet.prototype['sqlalchemy_uri'] = undefined;






export default DatabaseRestApiGet;

