/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartEntityResponseSchema model module.
 * @module model/ChartEntityResponseSchema
 * @version v1
 */
class ChartEntityResponseSchema {
    /**
     * Constructs a new <code>ChartEntityResponseSchema</code>.
     * @alias module:model/ChartEntityResponseSchema
     */
    constructor() { 
        
        ChartEntityResponseSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartEntityResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartEntityResponseSchema} obj Optional instance to populate.
     * @return {module:model/ChartEntityResponseSchema} The populated <code>ChartEntityResponseSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartEntityResponseSchema();

            if (data.hasOwnProperty('cache_timeout')) {
                obj['cache_timeout'] = ApiClient.convertToType(data['cache_timeout'], 'Number');
            }
            if (data.hasOwnProperty('changed_on')) {
                obj['changed_on'] = ApiClient.convertToType(data['changed_on'], 'String');
            }
            if (data.hasOwnProperty('datasource')) {
                obj['datasource'] = ApiClient.convertToType(data['datasource'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('description_markeddown')) {
                obj['description_markeddown'] = ApiClient.convertToType(data['description_markeddown'], 'String');
            }
            if (data.hasOwnProperty('form_data')) {
                obj['form_data'] = ApiClient.convertToType(data['form_data'], Object);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'String');
            }
            if (data.hasOwnProperty('slice_id')) {
                obj['slice_id'] = ApiClient.convertToType(data['slice_id'], 'Number');
            }
            if (data.hasOwnProperty('slice_name')) {
                obj['slice_name'] = ApiClient.convertToType(data['slice_name'], 'String');
            }
            if (data.hasOwnProperty('slice_url')) {
                obj['slice_url'] = ApiClient.convertToType(data['slice_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartEntityResponseSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartEntityResponseSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['changed_on'] && !(typeof data['changed_on'] === 'string' || data['changed_on'] instanceof String)) {
            throw new Error("Expected the field `changed_on` to be a primitive type in the JSON string but got " + data['changed_on']);
        }
        // ensure the json data is a string
        if (data['datasource'] && !(typeof data['datasource'] === 'string' || data['datasource'] instanceof String)) {
            throw new Error("Expected the field `datasource` to be a primitive type in the JSON string but got " + data['datasource']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['description_markeddown'] && !(typeof data['description_markeddown'] === 'string' || data['description_markeddown'] instanceof String)) {
            throw new Error("Expected the field `description_markeddown` to be a primitive type in the JSON string but got " + data['description_markeddown']);
        }
        // ensure the json data is a string
        if (data['modified'] && !(typeof data['modified'] === 'string' || data['modified'] instanceof String)) {
            throw new Error("Expected the field `modified` to be a primitive type in the JSON string but got " + data['modified']);
        }
        // ensure the json data is a string
        if (data['slice_name'] && !(typeof data['slice_name'] === 'string' || data['slice_name'] instanceof String)) {
            throw new Error("Expected the field `slice_name` to be a primitive type in the JSON string but got " + data['slice_name']);
        }
        // ensure the json data is a string
        if (data['slice_url'] && !(typeof data['slice_url'] === 'string' || data['slice_url'] instanceof String)) {
            throw new Error("Expected the field `slice_url` to be a primitive type in the JSON string but got " + data['slice_url']);
        }

        return true;
    }


}



/**
 * Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
 * @member {Number} cache_timeout
 */
ChartEntityResponseSchema.prototype['cache_timeout'] = undefined;

/**
 * The ISO date that the chart was last changed.
 * @member {String} changed_on
 */
ChartEntityResponseSchema.prototype['changed_on'] = undefined;

/**
 * The datasource name.
 * @member {String} datasource
 */
ChartEntityResponseSchema.prototype['datasource'] = undefined;

/**
 * A description of the chart propose.
 * @member {String} description
 */
ChartEntityResponseSchema.prototype['description'] = undefined;

/**
 * Sanitized HTML version of the chart description.
 * @member {String} description_markeddown
 */
ChartEntityResponseSchema.prototype['description_markeddown'] = undefined;

/**
 * Form data from the Explore controls used to form the chart's data query.
 * @member {Object} form_data
 */
ChartEntityResponseSchema.prototype['form_data'] = undefined;

/**
 * @member {String} modified
 */
ChartEntityResponseSchema.prototype['modified'] = undefined;

/**
 * @member {Number} slice_id
 */
ChartEntityResponseSchema.prototype['slice_id'] = undefined;

/**
 * The name of the chart.
 * @member {String} slice_name
 */
ChartEntityResponseSchema.prototype['slice_name'] = undefined;

/**
 * The URL of the chart.
 * @member {String} slice_url
 */
ChartEntityResponseSchema.prototype['slice_url'] = undefined;






export default ChartEntityResponseSchema;

