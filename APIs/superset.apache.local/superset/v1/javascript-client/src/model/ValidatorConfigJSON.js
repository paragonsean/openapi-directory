/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidatorConfigJSON model module.
 * @module model/ValidatorConfigJSON
 * @version v1
 */
class ValidatorConfigJSON {
    /**
     * Constructs a new <code>ValidatorConfigJSON</code>.
     * @alias module:model/ValidatorConfigJSON
     */
    constructor() { 
        
        ValidatorConfigJSON.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidatorConfigJSON</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidatorConfigJSON} obj Optional instance to populate.
     * @return {module:model/ValidatorConfigJSON} The populated <code>ValidatorConfigJSON</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidatorConfigJSON();

            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidatorConfigJSON</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidatorConfigJSON</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }

        return true;
    }


}



/**
 * The operation to compare with a threshold to apply to the SQL output 
 * @member {module:model/ValidatorConfigJSON.OpEnum} op
 */
ValidatorConfigJSON.prototype['op'] = undefined;

/**
 * @member {Number} threshold
 */
ValidatorConfigJSON.prototype['threshold'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
ValidatorConfigJSON['OpEnum'] = {

    /**
     * value: "<"
     * @const
     */
    "LESS_THAN": "<",

    /**
     * value: "<="
     * @const
     */
    "LESS_THAN_OR_EQUAL_TO": "<=",

    /**
     * value: ">"
     * @const
     */
    "GREATER_THAN": ">",

    /**
     * value: ">="
     * @const
     */
    "GREATER_THAN_OR_EQUAL_TO": ">=",

    /**
     * value: "=="
     * @const
     */
    "DOUBLE_EQUAL": "==",

    /**
     * value: "!="
     * @const
     */
    "NOT_EQUAL": "!="
};



export default ValidatorConfigJSON;

