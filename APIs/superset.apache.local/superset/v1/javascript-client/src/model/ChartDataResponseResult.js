/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataResponseResult model module.
 * @module model/ChartDataResponseResult
 * @version v1
 */
class ChartDataResponseResult {
    /**
     * Constructs a new <code>ChartDataResponseResult</code>.
     * @alias module:model/ChartDataResponseResult
     * @param cacheKey {String} Unique cache key for query object
     * @param cacheTimeout {Number} Cache timeout in following order: custom timeout, datasource timeout, default config timeout.
     * @param cachedDttm {String} Cache timestamp
     * @param isCached {Boolean} Is the result cached
     * @param query {String} The executed query statement
     */
    constructor(cacheKey, cacheTimeout, cachedDttm, isCached, query) { 
        
        ChartDataResponseResult.initialize(this, cacheKey, cacheTimeout, cachedDttm, isCached, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cacheKey, cacheTimeout, cachedDttm, isCached, query) { 
        obj['cache_key'] = cacheKey;
        obj['cache_timeout'] = cacheTimeout;
        obj['cached_dttm'] = cachedDttm;
        obj['is_cached'] = isCached;
        obj['query'] = query;
    }

    /**
     * Constructs a <code>ChartDataResponseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataResponseResult} obj Optional instance to populate.
     * @return {module:model/ChartDataResponseResult} The populated <code>ChartDataResponseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataResponseResult();

            if (data.hasOwnProperty('annotation_data')) {
                obj['annotation_data'] = ApiClient.convertToType(data['annotation_data'], [{'String': 'String'}]);
            }
            if (data.hasOwnProperty('applied_filters')) {
                obj['applied_filters'] = ApiClient.convertToType(data['applied_filters'], [Object]);
            }
            if (data.hasOwnProperty('cache_key')) {
                obj['cache_key'] = ApiClient.convertToType(data['cache_key'], 'String');
            }
            if (data.hasOwnProperty('cache_timeout')) {
                obj['cache_timeout'] = ApiClient.convertToType(data['cache_timeout'], 'Number');
            }
            if (data.hasOwnProperty('cached_dttm')) {
                obj['cached_dttm'] = ApiClient.convertToType(data['cached_dttm'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Object]);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('is_cached')) {
                obj['is_cached'] = ApiClient.convertToType(data['is_cached'], 'Boolean');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('rejected_filters')) {
                obj['rejected_filters'] = ApiClient.convertToType(data['rejected_filters'], [Object]);
            }
            if (data.hasOwnProperty('rowcount')) {
                obj['rowcount'] = ApiClient.convertToType(data['rowcount'], 'Number');
            }
            if (data.hasOwnProperty('stacktrace')) {
                obj['stacktrace'] = ApiClient.convertToType(data['stacktrace'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataResponseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataResponseResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataResponseResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['annotation_data'])) {
            throw new Error("Expected the field `annotation_data` to be an array in the JSON data but got " + data['annotation_data']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applied_filters'])) {
            throw new Error("Expected the field `applied_filters` to be an array in the JSON data but got " + data['applied_filters']);
        }
        // ensure the json data is a string
        if (data['cache_key'] && !(typeof data['cache_key'] === 'string' || data['cache_key'] instanceof String)) {
            throw new Error("Expected the field `cache_key` to be a primitive type in the JSON string but got " + data['cache_key']);
        }
        // ensure the json data is a string
        if (data['cached_dttm'] && !(typeof data['cached_dttm'] === 'string' || data['cached_dttm'] instanceof String)) {
            throw new Error("Expected the field `cached_dttm` to be a primitive type in the JSON string but got " + data['cached_dttm']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rejected_filters'])) {
            throw new Error("Expected the field `rejected_filters` to be an array in the JSON data but got " + data['rejected_filters']);
        }
        // ensure the json data is a string
        if (data['stacktrace'] && !(typeof data['stacktrace'] === 'string' || data['stacktrace'] instanceof String)) {
            throw new Error("Expected the field `stacktrace` to be a primitive type in the JSON string but got " + data['stacktrace']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ChartDataResponseResult.RequiredProperties = ["cache_key", "cache_timeout", "cached_dttm", "is_cached", "query"];

/**
 * All requested annotation data
 * @member {Array.<Object.<String, String>>} annotation_data
 */
ChartDataResponseResult.prototype['annotation_data'] = undefined;

/**
 * A list with applied filters
 * @member {Array.<Object>} applied_filters
 */
ChartDataResponseResult.prototype['applied_filters'] = undefined;

/**
 * Unique cache key for query object
 * @member {String} cache_key
 */
ChartDataResponseResult.prototype['cache_key'] = undefined;

/**
 * Cache timeout in following order: custom timeout, datasource timeout, default config timeout.
 * @member {Number} cache_timeout
 */
ChartDataResponseResult.prototype['cache_timeout'] = undefined;

/**
 * Cache timestamp
 * @member {String} cached_dttm
 */
ChartDataResponseResult.prototype['cached_dttm'] = undefined;

/**
 * A list with results
 * @member {Array.<Object>} data
 */
ChartDataResponseResult.prototype['data'] = undefined;

/**
 * Error
 * @member {String} error
 */
ChartDataResponseResult.prototype['error'] = undefined;

/**
 * Is the result cached
 * @member {Boolean} is_cached
 */
ChartDataResponseResult.prototype['is_cached'] = undefined;

/**
 * The executed query statement
 * @member {String} query
 */
ChartDataResponseResult.prototype['query'] = undefined;

/**
 * A list with rejected filters
 * @member {Array.<Object>} rejected_filters
 */
ChartDataResponseResult.prototype['rejected_filters'] = undefined;

/**
 * Amount of rows in result set
 * @member {Number} rowcount
 */
ChartDataResponseResult.prototype['rowcount'] = undefined;

/**
 * @member {String} stacktrace
 */
ChartDataResponseResult.prototype['stacktrace'] = undefined;

/**
 * Status of the query
 * @member {module:model/ChartDataResponseResult.StatusEnum} status
 */
ChartDataResponseResult.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataResponseResult['StatusEnum'] = {

    /**
     * value: "stopped"
     * @const
     */
    "stopped": "stopped",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "timed_out"
     * @const
     */
    "timed_out": "timed_out"
};



export default ChartDataResponseResult;

