/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatasetColumnsPut model module.
 * @module model/DatasetColumnsPut
 * @version v1
 */
class DatasetColumnsPut {
    /**
     * Constructs a new <code>DatasetColumnsPut</code>.
     * @alias module:model/DatasetColumnsPut
     * @param columnName {String} 
     */
    constructor(columnName) { 
        
        DatasetColumnsPut.initialize(this, columnName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, columnName) { 
        obj['column_name'] = columnName;
    }

    /**
     * Constructs a <code>DatasetColumnsPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasetColumnsPut} obj Optional instance to populate.
     * @return {module:model/DatasetColumnsPut} The populated <code>DatasetColumnsPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasetColumnsPut();

            if (data.hasOwnProperty('column_name')) {
                obj['column_name'] = ApiClient.convertToType(data['column_name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('filterable')) {
                obj['filterable'] = ApiClient.convertToType(data['filterable'], 'Boolean');
            }
            if (data.hasOwnProperty('groupby')) {
                obj['groupby'] = ApiClient.convertToType(data['groupby'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_dttm')) {
                obj['is_dttm'] = ApiClient.convertToType(data['is_dttm'], 'Boolean');
            }
            if (data.hasOwnProperty('python_date_format')) {
                obj['python_date_format'] = ApiClient.convertToType(data['python_date_format'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('verbose_name')) {
                obj['verbose_name'] = ApiClient.convertToType(data['verbose_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasetColumnsPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasetColumnsPut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatasetColumnsPut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['column_name'] && !(typeof data['column_name'] === 'string' || data['column_name'] instanceof String)) {
            throw new Error("Expected the field `column_name` to be a primitive type in the JSON string but got " + data['column_name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['python_date_format'] && !(typeof data['python_date_format'] === 'string' || data['python_date_format'] instanceof String)) {
            throw new Error("Expected the field `python_date_format` to be a primitive type in the JSON string but got " + data['python_date_format']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['verbose_name'] && !(typeof data['verbose_name'] === 'string' || data['verbose_name'] instanceof String)) {
            throw new Error("Expected the field `verbose_name` to be a primitive type in the JSON string but got " + data['verbose_name']);
        }

        return true;
    }


}

DatasetColumnsPut.RequiredProperties = ["column_name"];

/**
 * @member {String} column_name
 */
DatasetColumnsPut.prototype['column_name'] = undefined;

/**
 * @member {String} description
 */
DatasetColumnsPut.prototype['description'] = undefined;

/**
 * @member {String} expression
 */
DatasetColumnsPut.prototype['expression'] = undefined;

/**
 * @member {Boolean} filterable
 */
DatasetColumnsPut.prototype['filterable'] = undefined;

/**
 * @member {Boolean} groupby
 */
DatasetColumnsPut.prototype['groupby'] = undefined;

/**
 * @member {Number} id
 */
DatasetColumnsPut.prototype['id'] = undefined;

/**
 * @member {Boolean} is_active
 */
DatasetColumnsPut.prototype['is_active'] = undefined;

/**
 * @member {Boolean} is_dttm
 */
DatasetColumnsPut.prototype['is_dttm'] = undefined;

/**
 * @member {String} python_date_format
 */
DatasetColumnsPut.prototype['python_date_format'] = undefined;

/**
 * @member {String} type
 */
DatasetColumnsPut.prototype['type'] = undefined;

/**
 * @member {String} uuid
 */
DatasetColumnsPut.prototype['uuid'] = undefined;

/**
 * @member {String} verbose_name
 */
DatasetColumnsPut.prototype['verbose_name'] = undefined;






export default DatasetColumnsPut;

