/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataRollingOptionsSchema model module.
 * @module model/ChartDataRollingOptionsSchema
 * @version v1
 */
class ChartDataRollingOptionsSchema {
    /**
     * Constructs a new <code>ChartDataRollingOptionsSchema</code>.
     * @alias module:model/ChartDataRollingOptionsSchema
     * @param rollingType {module:model/ChartDataRollingOptionsSchema.RollingTypeEnum} Type of rolling window. Any numpy function will work.
     * @param window {Number} Size of the rolling window in days.
     */
    constructor(rollingType, window) { 
        
        ChartDataRollingOptionsSchema.initialize(this, rollingType, window);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rollingType, window) { 
        obj['rolling_type'] = rollingType;
        obj['window'] = window;
    }

    /**
     * Constructs a <code>ChartDataRollingOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataRollingOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataRollingOptionsSchema} The populated <code>ChartDataRollingOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataRollingOptionsSchema();

            if (data.hasOwnProperty('center')) {
                obj['center'] = ApiClient.convertToType(data['center'], 'Boolean');
            }
            if (data.hasOwnProperty('min_periods')) {
                obj['min_periods'] = ApiClient.convertToType(data['min_periods'], 'Number');
            }
            if (data.hasOwnProperty('rolling_type')) {
                obj['rolling_type'] = ApiClient.convertToType(data['rolling_type'], 'String');
            }
            if (data.hasOwnProperty('rolling_type_options')) {
                obj['rolling_type_options'] = ApiClient.convertToType(data['rolling_type_options'], Object);
            }
            if (data.hasOwnProperty('win_type')) {
                obj['win_type'] = ApiClient.convertToType(data['win_type'], 'String');
            }
            if (data.hasOwnProperty('window')) {
                obj['window'] = ApiClient.convertToType(data['window'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataRollingOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataRollingOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataRollingOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['rolling_type'] && !(typeof data['rolling_type'] === 'string' || data['rolling_type'] instanceof String)) {
            throw new Error("Expected the field `rolling_type` to be a primitive type in the JSON string but got " + data['rolling_type']);
        }
        // ensure the json data is a string
        if (data['win_type'] && !(typeof data['win_type'] === 'string' || data['win_type'] instanceof String)) {
            throw new Error("Expected the field `win_type` to be a primitive type in the JSON string but got " + data['win_type']);
        }

        return true;
    }


}

ChartDataRollingOptionsSchema.RequiredProperties = ["rolling_type", "window"];

/**
 * Should the label be at the center of the window. Default: `false`
 * @member {Boolean} center
 */
ChartDataRollingOptionsSchema.prototype['center'] = undefined;

/**
 * The minimum amount of periods required for a row to be included in the result set.
 * @member {Number} min_periods
 */
ChartDataRollingOptionsSchema.prototype['min_periods'] = undefined;

/**
 * Type of rolling window. Any numpy function will work.
 * @member {module:model/ChartDataRollingOptionsSchema.RollingTypeEnum} rolling_type
 */
ChartDataRollingOptionsSchema.prototype['rolling_type'] = undefined;

/**
 * @member {Object} rolling_type_options
 */
ChartDataRollingOptionsSchema.prototype['rolling_type_options'] = undefined;

/**
 * Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.
 * @member {module:model/ChartDataRollingOptionsSchema.WinTypeEnum} win_type
 */
ChartDataRollingOptionsSchema.prototype['win_type'] = undefined;

/**
 * Size of the rolling window in days.
 * @member {Number} window
 */
ChartDataRollingOptionsSchema.prototype['window'] = undefined;





/**
 * Allowed values for the <code>rolling_type</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataRollingOptionsSchema['RollingTypeEnum'] = {

    /**
     * value: "average"
     * @const
     */
    "average": "average",

    /**
     * value: "argmin"
     * @const
     */
    "argmin": "argmin",

    /**
     * value: "argmax"
     * @const
     */
    "argmax": "argmax",

    /**
     * value: "cumsum"
     * @const
     */
    "cumsum": "cumsum",

    /**
     * value: "cumprod"
     * @const
     */
    "cumprod": "cumprod",

    /**
     * value: "max"
     * @const
     */
    "max": "max",

    /**
     * value: "mean"
     * @const
     */
    "mean": "mean",

    /**
     * value: "median"
     * @const
     */
    "median": "median",

    /**
     * value: "nansum"
     * @const
     */
    "nansum": "nansum",

    /**
     * value: "nanmin"
     * @const
     */
    "nanmin": "nanmin",

    /**
     * value: "nanmax"
     * @const
     */
    "nanmax": "nanmax",

    /**
     * value: "nanmean"
     * @const
     */
    "nanmean": "nanmean",

    /**
     * value: "nanmedian"
     * @const
     */
    "nanmedian": "nanmedian",

    /**
     * value: "nanpercentile"
     * @const
     */
    "nanpercentile": "nanpercentile",

    /**
     * value: "min"
     * @const
     */
    "min": "min",

    /**
     * value: "percentile"
     * @const
     */
    "percentile": "percentile",

    /**
     * value: "prod"
     * @const
     */
    "prod": "prod",

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "std"
     * @const
     */
    "std": "std",

    /**
     * value: "sum"
     * @const
     */
    "sum": "sum",

    /**
     * value: "var"
     * @const
     */
    "var": "var"
};


/**
 * Allowed values for the <code>win_type</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataRollingOptionsSchema['WinTypeEnum'] = {

    /**
     * value: "boxcar"
     * @const
     */
    "boxcar": "boxcar",

    /**
     * value: "triang"
     * @const
     */
    "triang": "triang",

    /**
     * value: "blackman"
     * @const
     */
    "blackman": "blackman",

    /**
     * value: "hamming"
     * @const
     */
    "hamming": "hamming",

    /**
     * value: "bartlett"
     * @const
     */
    "bartlett": "bartlett",

    /**
     * value: "parzen"
     * @const
     */
    "parzen": "parzen",

    /**
     * value: "bohman"
     * @const
     */
    "bohman": "bohman",

    /**
     * value: "blackmanharris"
     * @const
     */
    "blackmanharris": "blackmanharris",

    /**
     * value: "nuttall"
     * @const
     */
    "nuttall": "nuttall",

    /**
     * value: "barthann"
     * @const
     */
    "barthann": "barthann",

    /**
     * value: "kaiser"
     * @const
     */
    "kaiser": "kaiser",

    /**
     * value: "gaussian"
     * @const
     */
    "gaussian": "gaussian",

    /**
     * value: "general_gaussian"
     * @const
     */
    "general_gaussian": "general_gaussian",

    /**
     * value: "slepian"
     * @const
     */
    "slepian": "slepian",

    /**
     * value: "exponential"
     * @const
     */
    "exponential": "exponential"
};



export default ChartDataRollingOptionsSchema;

