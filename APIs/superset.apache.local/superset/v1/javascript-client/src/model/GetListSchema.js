/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetListSchemaFiltersInner from './GetListSchemaFiltersInner';

/**
 * The GetListSchema model module.
 * @module model/GetListSchema
 * @version v1
 */
class GetListSchema {
    /**
     * Constructs a new <code>GetListSchema</code>.
     * @alias module:model/GetListSchema
     */
    constructor() { 
        
        GetListSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetListSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetListSchema} obj Optional instance to populate.
     * @return {module:model/GetListSchema} The populated <code>GetListSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetListSchema();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [GetListSchemaFiltersInner]);
            }
            if (data.hasOwnProperty('keys')) {
                obj['keys'] = ApiClient.convertToType(data['keys'], ['String']);
            }
            if (data.hasOwnProperty('order_column')) {
                obj['order_column'] = ApiClient.convertToType(data['order_column'], 'String');
            }
            if (data.hasOwnProperty('order_direction')) {
                obj['order_direction'] = ApiClient.convertToType(data['order_direction'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('page_size')) {
                obj['page_size'] = ApiClient.convertToType(data['page_size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetListSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetListSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                GetListSchemaFiltersInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keys'])) {
            throw new Error("Expected the field `keys` to be an array in the JSON data but got " + data['keys']);
        }
        // ensure the json data is a string
        if (data['order_column'] && !(typeof data['order_column'] === 'string' || data['order_column'] instanceof String)) {
            throw new Error("Expected the field `order_column` to be a primitive type in the JSON string but got " + data['order_column']);
        }
        // ensure the json data is a string
        if (data['order_direction'] && !(typeof data['order_direction'] === 'string' || data['order_direction'] instanceof String)) {
            throw new Error("Expected the field `order_direction` to be a primitive type in the JSON string but got " + data['order_direction']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} columns
 */
GetListSchema.prototype['columns'] = undefined;

/**
 * @member {Array.<module:model/GetListSchemaFiltersInner>} filters
 */
GetListSchema.prototype['filters'] = undefined;

/**
 * @member {Array.<module:model/GetListSchema.KeysEnum>} keys
 */
GetListSchema.prototype['keys'] = undefined;

/**
 * @member {String} order_column
 */
GetListSchema.prototype['order_column'] = undefined;

/**
 * @member {module:model/GetListSchema.OrderDirectionEnum} order_direction
 */
GetListSchema.prototype['order_direction'] = undefined;

/**
 * @member {Number} page
 */
GetListSchema.prototype['page'] = undefined;

/**
 * @member {Number} page_size
 */
GetListSchema.prototype['page_size'] = undefined;





/**
 * Allowed values for the <code>keys</code> property.
 * @enum {String}
 * @readonly
 */
GetListSchema['KeysEnum'] = {

    /**
     * value: "list_columns"
     * @const
     */
    "list_columns": "list_columns",

    /**
     * value: "order_columns"
     * @const
     */
    "order_columns": "order_columns",

    /**
     * value: "label_columns"
     * @const
     */
    "label_columns": "label_columns",

    /**
     * value: "description_columns"
     * @const
     */
    "description_columns": "description_columns",

    /**
     * value: "list_title"
     * @const
     */
    "list_title": "list_title",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>order_direction</code> property.
 * @enum {String}
 * @readonly
 */
GetListSchema['OrderDirectionEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default GetListSchema;

