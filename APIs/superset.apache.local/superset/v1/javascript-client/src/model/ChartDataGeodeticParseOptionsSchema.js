/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataGeodeticParseOptionsSchema model module.
 * @module model/ChartDataGeodeticParseOptionsSchema
 * @version v1
 */
class ChartDataGeodeticParseOptionsSchema {
    /**
     * Constructs a new <code>ChartDataGeodeticParseOptionsSchema</code>.
     * @alias module:model/ChartDataGeodeticParseOptionsSchema
     * @param geodetic {String} Name of source column containing geodetic point strings
     * @param latitude {String} Name of target column for decoded latitude
     * @param longitude {String} Name of target column for decoded longitude
     */
    constructor(geodetic, latitude, longitude) { 
        
        ChartDataGeodeticParseOptionsSchema.initialize(this, geodetic, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, geodetic, latitude, longitude) { 
        obj['geodetic'] = geodetic;
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>ChartDataGeodeticParseOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataGeodeticParseOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataGeodeticParseOptionsSchema} The populated <code>ChartDataGeodeticParseOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataGeodeticParseOptionsSchema();

            if (data.hasOwnProperty('altitude')) {
                obj['altitude'] = ApiClient.convertToType(data['altitude'], 'String');
            }
            if (data.hasOwnProperty('geodetic')) {
                obj['geodetic'] = ApiClient.convertToType(data['geodetic'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataGeodeticParseOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataGeodeticParseOptionsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChartDataGeodeticParseOptionsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['altitude'] && !(typeof data['altitude'] === 'string' || data['altitude'] instanceof String)) {
            throw new Error("Expected the field `altitude` to be a primitive type in the JSON string but got " + data['altitude']);
        }
        // ensure the json data is a string
        if (data['geodetic'] && !(typeof data['geodetic'] === 'string' || data['geodetic'] instanceof String)) {
            throw new Error("Expected the field `geodetic` to be a primitive type in the JSON string but got " + data['geodetic']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }

        return true;
    }


}

ChartDataGeodeticParseOptionsSchema.RequiredProperties = ["geodetic", "latitude", "longitude"];

/**
 * Name of target column for decoded altitude. If omitted, altitude information in geodetic string is ignored.
 * @member {String} altitude
 */
ChartDataGeodeticParseOptionsSchema.prototype['altitude'] = undefined;

/**
 * Name of source column containing geodetic point strings
 * @member {String} geodetic
 */
ChartDataGeodeticParseOptionsSchema.prototype['geodetic'] = undefined;

/**
 * Name of target column for decoded latitude
 * @member {String} latitude
 */
ChartDataGeodeticParseOptionsSchema.prototype['latitude'] = undefined;

/**
 * Name of target column for decoded longitude
 * @member {String} longitude
 */
ChartDataGeodeticParseOptionsSchema.prototype['longitude'] = undefined;






export default ChartDataGeodeticParseOptionsSchema;

