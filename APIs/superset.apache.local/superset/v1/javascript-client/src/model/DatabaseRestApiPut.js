/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseRestApiPut model module.
 * @module model/DatabaseRestApiPut
 * @version v1
 */
class DatabaseRestApiPut {
    /**
     * Constructs a new <code>DatabaseRestApiPut</code>.
     * @alias module:model/DatabaseRestApiPut
     */
    constructor() { 
        
        DatabaseRestApiPut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseRestApiPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseRestApiPut} obj Optional instance to populate.
     * @return {module:model/DatabaseRestApiPut} The populated <code>DatabaseRestApiPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseRestApiPut();

            if (data.hasOwnProperty('allow_csv_upload')) {
                obj['allow_csv_upload'] = ApiClient.convertToType(data['allow_csv_upload'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_ctas')) {
                obj['allow_ctas'] = ApiClient.convertToType(data['allow_ctas'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_cvas')) {
                obj['allow_cvas'] = ApiClient.convertToType(data['allow_cvas'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_dml')) {
                obj['allow_dml'] = ApiClient.convertToType(data['allow_dml'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_multi_schema_metadata_fetch')) {
                obj['allow_multi_schema_metadata_fetch'] = ApiClient.convertToType(data['allow_multi_schema_metadata_fetch'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_run_async')) {
                obj['allow_run_async'] = ApiClient.convertToType(data['allow_run_async'], 'Boolean');
            }
            if (data.hasOwnProperty('cache_timeout')) {
                obj['cache_timeout'] = ApiClient.convertToType(data['cache_timeout'], 'Number');
            }
            if (data.hasOwnProperty('configuration_method')) {
                obj['configuration_method'] = ApiClient.convertToType(data['configuration_method'], Object);
            }
            if (data.hasOwnProperty('database_name')) {
                obj['database_name'] = ApiClient.convertToType(data['database_name'], 'String');
            }
            if (data.hasOwnProperty('encrypted_extra')) {
                obj['encrypted_extra'] = ApiClient.convertToType(data['encrypted_extra'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('expose_in_sqllab')) {
                obj['expose_in_sqllab'] = ApiClient.convertToType(data['expose_in_sqllab'], 'Boolean');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
            if (data.hasOwnProperty('force_ctas_schema')) {
                obj['force_ctas_schema'] = ApiClient.convertToType(data['force_ctas_schema'], 'String');
            }
            if (data.hasOwnProperty('impersonate_user')) {
                obj['impersonate_user'] = ApiClient.convertToType(data['impersonate_user'], 'Boolean');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': Object});
            }
            if (data.hasOwnProperty('server_cert')) {
                obj['server_cert'] = ApiClient.convertToType(data['server_cert'], 'String');
            }
            if (data.hasOwnProperty('sqlalchemy_uri')) {
                obj['sqlalchemy_uri'] = ApiClient.convertToType(data['sqlalchemy_uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseRestApiPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseRestApiPut</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['database_name'] && !(typeof data['database_name'] === 'string' || data['database_name'] instanceof String)) {
            throw new Error("Expected the field `database_name` to be a primitive type in the JSON string but got " + data['database_name']);
        }
        // ensure the json data is a string
        if (data['encrypted_extra'] && !(typeof data['encrypted_extra'] === 'string' || data['encrypted_extra'] instanceof String)) {
            throw new Error("Expected the field `encrypted_extra` to be a primitive type in the JSON string but got " + data['encrypted_extra']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['extra'] && !(typeof data['extra'] === 'string' || data['extra'] instanceof String)) {
            throw new Error("Expected the field `extra` to be a primitive type in the JSON string but got " + data['extra']);
        }
        // ensure the json data is a string
        if (data['force_ctas_schema'] && !(typeof data['force_ctas_schema'] === 'string' || data['force_ctas_schema'] instanceof String)) {
            throw new Error("Expected the field `force_ctas_schema` to be a primitive type in the JSON string but got " + data['force_ctas_schema']);
        }
        // ensure the json data is a string
        if (data['server_cert'] && !(typeof data['server_cert'] === 'string' || data['server_cert'] instanceof String)) {
            throw new Error("Expected the field `server_cert` to be a primitive type in the JSON string but got " + data['server_cert']);
        }
        // ensure the json data is a string
        if (data['sqlalchemy_uri'] && !(typeof data['sqlalchemy_uri'] === 'string' || data['sqlalchemy_uri'] instanceof String)) {
            throw new Error("Expected the field `sqlalchemy_uri` to be a primitive type in the JSON string but got " + data['sqlalchemy_uri']);
        }

        return true;
    }


}



/**
 * Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.
 * @member {Boolean} allow_csv_upload
 */
DatabaseRestApiPut.prototype['allow_csv_upload'] = undefined;

/**
 * Allow CREATE TABLE AS option in SQL Lab
 * @member {Boolean} allow_ctas
 */
DatabaseRestApiPut.prototype['allow_ctas'] = undefined;

/**
 * Allow CREATE VIEW AS option in SQL Lab
 * @member {Boolean} allow_cvas
 */
DatabaseRestApiPut.prototype['allow_cvas'] = undefined;

/**
 * Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab
 * @member {Boolean} allow_dml
 */
DatabaseRestApiPut.prototype['allow_dml'] = undefined;

/**
 * Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.
 * @member {Boolean} allow_multi_schema_metadata_fetch
 */
DatabaseRestApiPut.prototype['allow_multi_schema_metadata_fetch'] = undefined;

/**
 * Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.
 * @member {Boolean} allow_run_async
 */
DatabaseRestApiPut.prototype['allow_run_async'] = undefined;

/**
 * Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.
 * @member {Number} cache_timeout
 */
DatabaseRestApiPut.prototype['cache_timeout'] = undefined;

/**
 * Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
 * @member {Object} configuration_method
 */
DatabaseRestApiPut.prototype['configuration_method'] = undefined;

/**
 * A database name to identify this connection.
 * @member {String} database_name
 */
DatabaseRestApiPut.prototype['database_name'] = undefined;

/**
 * <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
 * @member {String} encrypted_extra
 */
DatabaseRestApiPut.prototype['encrypted_extra'] = undefined;

/**
 * SQLAlchemy engine to use
 * @member {String} engine
 */
DatabaseRestApiPut.prototype['engine'] = undefined;

/**
 * Expose this database to SQLLab
 * @member {Boolean} expose_in_sqllab
 */
DatabaseRestApiPut.prototype['expose_in_sqllab'] = undefined;

/**
 * <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_csv_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. the <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.</p>
 * @member {String} extra
 */
DatabaseRestApiPut.prototype['extra'] = undefined;

/**
 * When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema
 * @member {String} force_ctas_schema
 */
DatabaseRestApiPut.prototype['force_ctas_schema'] = undefined;

/**
 * If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
 * @member {Boolean} impersonate_user
 */
DatabaseRestApiPut.prototype['impersonate_user'] = undefined;

/**
 * DB-specific parameters for configuration
 * @member {Object.<String, Object>} parameters
 */
DatabaseRestApiPut.prototype['parameters'] = undefined;

/**
 * <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
 * @member {String} server_cert
 */
DatabaseRestApiPut.prototype['server_cert'] = undefined;

/**
 * <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>
 * @member {String} sqlalchemy_uri
 */
DatabaseRestApiPut.prototype['sqlalchemy_uri'] = undefined;






export default DatabaseRestApiPut;

