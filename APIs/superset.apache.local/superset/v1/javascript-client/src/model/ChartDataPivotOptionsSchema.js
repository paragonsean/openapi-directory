/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDataPivotOptionsSchema model module.
 * @module model/ChartDataPivotOptionsSchema
 * @version v1
 */
class ChartDataPivotOptionsSchema {
    /**
     * Constructs a new <code>ChartDataPivotOptionsSchema</code>.
     * @alias module:model/ChartDataPivotOptionsSchema
     */
    constructor() { 
        
        ChartDataPivotOptionsSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartDataPivotOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataPivotOptionsSchema} obj Optional instance to populate.
     * @return {module:model/ChartDataPivotOptionsSchema} The populated <code>ChartDataPivotOptionsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataPivotOptionsSchema();

            if (data.hasOwnProperty('aggregates')) {
                obj['aggregates'] = ApiClient.convertToType(data['aggregates'], Object);
            }
            if (data.hasOwnProperty('column_fill_value')) {
                obj['column_fill_value'] = ApiClient.convertToType(data['column_fill_value'], 'String');
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('drop_missing_columns')) {
                obj['drop_missing_columns'] = ApiClient.convertToType(data['drop_missing_columns'], 'Boolean');
            }
            if (data.hasOwnProperty('marginal_distribution_name')) {
                obj['marginal_distribution_name'] = ApiClient.convertToType(data['marginal_distribution_name'], 'String');
            }
            if (data.hasOwnProperty('marginal_distributions')) {
                obj['marginal_distributions'] = ApiClient.convertToType(data['marginal_distributions'], 'Boolean');
            }
            if (data.hasOwnProperty('metric_fill_value')) {
                obj['metric_fill_value'] = ApiClient.convertToType(data['metric_fill_value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataPivotOptionsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataPivotOptionsSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column_fill_value'] && !(typeof data['column_fill_value'] === 'string' || data['column_fill_value'] instanceof String)) {
            throw new Error("Expected the field `column_fill_value` to be a primitive type in the JSON string but got " + data['column_fill_value']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // ensure the json data is a string
        if (data['marginal_distribution_name'] && !(typeof data['marginal_distribution_name'] === 'string' || data['marginal_distribution_name'] instanceof String)) {
            throw new Error("Expected the field `marginal_distribution_name` to be a primitive type in the JSON string but got " + data['marginal_distribution_name']);
        }

        return true;
    }


}



/**
 * The keys are the name of the aggregate column to be created, and the values specify the details of how to apply the aggregation. If an operator requires additional options, these can be passed here to be unpacked in the operator call. The following numpy operators are supported: average, argmin, argmax, cumsum, cumprod, max, mean, median, nansum, nanmin, nanmax, nanmean, nanmedian, min, percentile, prod, product, std, sum, var. Any options required by the operator can be passed to the `options` object.  In the example, a new column `first_quantile` is created based on values in the column `my_col` using the `percentile` operator with the `q=0.25` parameter.
 * @member {Object} aggregates
 */
ChartDataPivotOptionsSchema.prototype['aggregates'] = undefined;

/**
 * Value to replace missing pivot columns names with.
 * @member {String} column_fill_value
 */
ChartDataPivotOptionsSchema.prototype['column_fill_value'] = undefined;

/**
 * @member {Array.<String>} columns
 */
ChartDataPivotOptionsSchema.prototype['columns'] = undefined;

/**
 * Do not include columns whose entries are all missing (default: `true`).
 * @member {Boolean} drop_missing_columns
 */
ChartDataPivotOptionsSchema.prototype['drop_missing_columns'] = undefined;

/**
 * Name of marginal distribution row/column. (default: `All`)
 * @member {String} marginal_distribution_name
 */
ChartDataPivotOptionsSchema.prototype['marginal_distribution_name'] = undefined;

/**
 * Add totals for row/column. (default: `false`)
 * @member {Boolean} marginal_distributions
 */
ChartDataPivotOptionsSchema.prototype['marginal_distributions'] = undefined;

/**
 * Value to replace missing values with in aggregate calculations.
 * @member {Number} metric_fill_value
 */
ChartDataPivotOptionsSchema.prototype['metric_fill_value'] = undefined;






export default ChartDataPivotOptionsSchema;

