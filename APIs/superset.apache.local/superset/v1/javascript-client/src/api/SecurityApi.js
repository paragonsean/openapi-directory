/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import SecurityCsrfTokenGet200Response from '../model/SecurityCsrfTokenGet200Response';
import SecurityLoginPost200Response from '../model/SecurityLoginPost200Response';
import SecurityLoginPostRequest from '../model/SecurityLoginPostRequest';
import SecurityRefreshPost200Response from '../model/SecurityRefreshPost200Response';

/**
* Security service.
* @module api/SecurityApi
* @version v1
*/
export default class SecurityApi {

    /**
    * Constructs a new SecurityApi. 
    * @alias module:api/SecurityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityCsrfTokenGet operation.
     * @callback module:api/SecurityApi~securityCsrfTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityCsrfTokenGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the CSRF token
     * @param {module:api/SecurityApi~securityCsrfTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityCsrfTokenGet200Response}
     */
    securityCsrfTokenGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityCsrfTokenGet200Response;
      return this.apiClient.callApi(
        '/security/csrf_token/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityLoginPost operation.
     * @callback module:api/SecurityApi~securityLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityLoginPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate and get a JWT access and refresh token
     * @param {module:model/SecurityLoginPostRequest} securityLoginPostRequest 
     * @param {module:api/SecurityApi~securityLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityLoginPost200Response}
     */
    securityLoginPost(securityLoginPostRequest, callback) {
      let postBody = securityLoginPostRequest;
      // verify the required parameter 'securityLoginPostRequest' is set
      if (securityLoginPostRequest === undefined || securityLoginPostRequest === null) {
        throw new Error("Missing the required parameter 'securityLoginPostRequest' when calling securityLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecurityLoginPost200Response;
      return this.apiClient.callApi(
        '/security/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityRefreshPost operation.
     * @callback module:api/SecurityApi~securityRefreshPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRefreshPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the refresh token to get a new JWT access token
     * @param {module:api/SecurityApi~securityRefreshPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRefreshPost200Response}
     */
    securityRefreshPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt_refresh'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityRefreshPost200Response;
      return this.apiClient.callApi(
        '/security/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
