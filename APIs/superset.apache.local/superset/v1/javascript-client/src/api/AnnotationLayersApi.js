/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet200Response from '../model/AnnotationLayerGet200Response';
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import AnnotationLayerPkAnnotationAnnotationIdGet200Response from '../model/AnnotationLayerPkAnnotationAnnotationIdGet200Response';
import AnnotationLayerPkAnnotationAnnotationIdPut200Response from '../model/AnnotationLayerPkAnnotationAnnotationIdPut200Response';
import AnnotationLayerPkAnnotationGet200Response from '../model/AnnotationLayerPkAnnotationGet200Response';
import AnnotationLayerPkAnnotationPost201Response from '../model/AnnotationLayerPkAnnotationPost201Response';
import AnnotationLayerPkGet200Response from '../model/AnnotationLayerPkGet200Response';
import AnnotationLayerPkPut200Response from '../model/AnnotationLayerPkPut200Response';
import AnnotationLayerPost201Response from '../model/AnnotationLayerPost201Response';
import AnnotationLayerRestApiPost from '../model/AnnotationLayerRestApiPost';
import AnnotationLayerRestApiPut from '../model/AnnotationLayerRestApiPut';
import AnnotationRestApiPost from '../model/AnnotationRestApiPost';
import AnnotationRestApiPut from '../model/AnnotationRestApiPut';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';

/**
* AnnotationLayers service.
* @module api/AnnotationLayersApi
* @version v1
*/
export default class AnnotationLayersApi {

    /**
    * Constructs a new AnnotationLayersApi. 
    * @alias module:api/AnnotationLayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the annotationLayerDelete operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple annotation layers in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    annotationLayerDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/annotation_layer/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet200Response}
     */
    annotationLayerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet200Response;
      return this.apiClient.callApi(
        '/annotation_layer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerInfoGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    annotationLayerInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/annotation_layer/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationAnnotationIdDelete operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk for this annotation
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    annotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdDelete");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdDelete");
      }

      let pathParams = {
        'pk': pk,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/{annotation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationAnnotationIdGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkAnnotationAnnotationIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkAnnotationAnnotationIdGet200Response}
     */
    annotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdGet");
      }

      let pathParams = {
        'pk': pk,
        'annotation_id': annotationId
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkAnnotationAnnotationIdGet200Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/{annotation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationAnnotationIdPut operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkAnnotationAnnotationIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk for this annotation
     * @param {module:model/AnnotationRestApiPut} annotationRestApiPut Annotation schema
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationAnnotationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkAnnotationAnnotationIdPut200Response}
     */
    annotationLayerPkAnnotationAnnotationIdPut(pk, annotationId, annotationRestApiPut, callback) {
      let postBody = annotationRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationAnnotationIdPut");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling annotationLayerPkAnnotationAnnotationIdPut");
      }
      // verify the required parameter 'annotationRestApiPut' is set
      if (annotationRestApiPut === undefined || annotationRestApiPut === null) {
        throw new Error("Missing the required parameter 'annotationRestApiPut' when calling annotationLayerPkAnnotationAnnotationIdPut");
      }

      let pathParams = {
        'pk': pk,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkAnnotationAnnotationIdPut200Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/{annotation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationDelete operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple annotation in a bulk operation.
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    annotationLayerPkAnnotationDelete(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkAnnotationGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Number} pk The annotation layer id for this annotation
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkAnnotationGet200Response}
     */
    annotationLayerPkAnnotationGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkAnnotationGet200Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkAnnotationPost operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkAnnotationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkAnnotationPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:model/AnnotationRestApiPost} annotationRestApiPost Annotation schema
     * @param {module:api/AnnotationLayersApi~annotationLayerPkAnnotationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkAnnotationPost201Response}
     */
    annotationLayerPkAnnotationPost(pk, annotationRestApiPost, callback) {
      let postBody = annotationRestApiPost;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkAnnotationPost");
      }
      // verify the required parameter 'annotationRestApiPost' is set
      if (annotationRestApiPost === undefined || annotationRestApiPost === null) {
        throw new Error("Missing the required parameter 'annotationRestApiPost' when calling annotationLayerPkAnnotationPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkAnnotationPost201Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}/annotation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkDelete operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:api/AnnotationLayersApi~annotationLayerPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    annotationLayerPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Annotation layer
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkGet200Response}
     */
    annotationLayerPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkGet200Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPkPut operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:model/AnnotationLayerRestApiPut} annotationLayerRestApiPut Annotation schema
     * @param {module:api/AnnotationLayersApi~annotationLayerPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPkPut200Response}
     */
    annotationLayerPkPut(pk, annotationLayerRestApiPut, callback) {
      let postBody = annotationLayerRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling annotationLayerPkPut");
      }
      // verify the required parameter 'annotationLayerRestApiPut' is set
      if (annotationLayerRestApiPut === undefined || annotationLayerRestApiPut === null) {
        throw new Error("Missing the required parameter 'annotationLayerRestApiPut' when calling annotationLayerPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPkPut200Response;
      return this.apiClient.callApi(
        '/annotation_layer/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerPost operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Annotation layer
     * @param {module:model/AnnotationLayerRestApiPost} annotationLayerRestApiPost Annotation Layer schema
     * @param {module:api/AnnotationLayersApi~annotationLayerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerPost201Response}
     */
    annotationLayerPost(annotationLayerRestApiPost, callback) {
      let postBody = annotationLayerRestApiPost;
      // verify the required parameter 'annotationLayerRestApiPost' is set
      if (annotationLayerRestApiPost === undefined || annotationLayerRestApiPost === null) {
        throw new Error("Missing the required parameter 'annotationLayerRestApiPost' when calling annotationLayerPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerPost201Response;
      return this.apiClient.callApi(
        '/annotation_layer/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the annotationLayerRelatedColumnNameGet operation.
     * @callback module:api/AnnotationLayersApi~annotationLayerRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/AnnotationLayersApi~annotationLayerRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    annotationLayerRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling annotationLayerRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/annotation_layer/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
