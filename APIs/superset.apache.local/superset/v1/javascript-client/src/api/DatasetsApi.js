/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import DatasetGet200Response from '../model/DatasetGet200Response';
import DatasetPkGet200Response from '../model/DatasetPkGet200Response';
import DatasetPkPut200Response from '../model/DatasetPkPut200Response';
import DatasetPost201Response from '../model/DatasetPost201Response';
import DatasetRelatedObjectsResponse from '../model/DatasetRelatedObjectsResponse';
import DatasetRestApiPost from '../model/DatasetRestApiPost';
import DatasetRestApiPut from '../model/DatasetRestApiPut';
import DistincResponseSchema from '../model/DistincResponseSchema';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';

/**
* Datasets service.
* @module api/DatasetsApi
* @version v1
*/
export default class DatasetsApi {

    /**
    * Constructs a new DatasetsApi. 
    * @alias module:api/DatasetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the datasetDelete operation.
     * @callback module:api/DatasetsApi~datasetDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Datasets in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DatasetsApi~datasetDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetDistinctColumnNameGet operation.
     * @callback module:api/DatasetsApi~datasetDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/DatasetsApi~datasetDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistincResponseSchema}
     */
    datasetDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling datasetDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;
      return this.apiClient.callApi(
        '/dataset/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetExportGet operation.
     * @callback module:api/DatasetsApi~datasetExportGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple datasets and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DatasetsApi~datasetExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    datasetExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/dataset/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetGet operation.
     * @callback module:api/DatasetsApi~datasetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/DatasetsApi~datasetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetGet200Response}
     */
    datasetGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetGet200Response;
      return this.apiClient.callApi(
        '/dataset/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetImportPost operation.
     * @callback module:api/DatasetsApi~datasetImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [formData] upload file (ZIP or YAML)
     * @param {Boolean} [overwrite] overwrite existing datasets?
     * @param {String} [passwords] JSON map of passwords for each file
     * @param {module:api/DatasetsApi~datasetImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'overwrite': opts['overwrite'],
        'passwords': opts['passwords']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetInfoGet operation.
     * @callback module:api/DatasetsApi~datasetInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/DatasetsApi~datasetInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    datasetInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/dataset/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkColumnColumnIdDelete operation.
     * @callback module:api/DatasetsApi~datasetPkColumnColumnIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dataset column
     * @param {Number} pk The dataset pk for this column
     * @param {Number} columnId The column id for this dataset
     * @param {module:api/DatasetsApi~datasetPkColumnColumnIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetPkColumnColumnIdDelete(pk, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkColumnColumnIdDelete");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling datasetPkColumnColumnIdDelete");
      }

      let pathParams = {
        'pk': pk,
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/{pk}/column/{column_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkDelete operation.
     * @callback module:api/DatasetsApi~datasetPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~datasetPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkGet operation.
     * @callback module:api/DatasetsApi~datasetPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an item model
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/DatasetsApi~datasetPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetPkGet200Response}
     */
    datasetPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetPkGet200Response;
      return this.apiClient.callApi(
        '/dataset/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkMetricMetricIdDelete operation.
     * @callback module:api/DatasetsApi~datasetPkMetricMetricIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dataset metric
     * @param {Number} pk The dataset pk for this column
     * @param {Number} metricId The metric id for this dataset
     * @param {module:api/DatasetsApi~datasetPkMetricMetricIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetPkMetricMetricIdDelete(pk, metricId, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkMetricMetricIdDelete");
      }
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling datasetPkMetricMetricIdDelete");
      }

      let pathParams = {
        'pk': pk,
        'metric_id': metricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/{pk}/metric/{metric_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkPut operation.
     * @callback module:api/DatasetsApi~datasetPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Dataset
     * @param {Number} pk 
     * @param {module:model/DatasetRestApiPut} datasetRestApiPut Dataset schema
     * @param {Object} opts Optional parameters
     * @param {Boolean} [overrideColumns] 
     * @param {module:api/DatasetsApi~datasetPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetPkPut200Response}
     */
    datasetPkPut(pk, datasetRestApiPut, opts, callback) {
      opts = opts || {};
      let postBody = datasetRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkPut");
      }
      // verify the required parameter 'datasetRestApiPut' is set
      if (datasetRestApiPut === undefined || datasetRestApiPut === null) {
        throw new Error("Missing the required parameter 'datasetRestApiPut' when calling datasetPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'override_columns': opts['overrideColumns']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatasetPkPut200Response;
      return this.apiClient.callApi(
        '/dataset/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkRefreshPut operation.
     * @callback module:api/DatasetsApi~datasetPkRefreshPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes and updates columns of a dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~datasetPkRefreshPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    datasetPkRefreshPut(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkRefreshPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dataset/{pk}/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPkRelatedObjectsGet operation.
     * @callback module:api/DatasetsApi~datasetPkRelatedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetRelatedObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get charts and dashboards count associated to a dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~datasetPkRelatedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetRelatedObjectsResponse}
     */
    datasetPkRelatedObjectsGet(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling datasetPkRelatedObjectsGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetRelatedObjectsResponse;
      return this.apiClient.callApi(
        '/dataset/{pk}/related_objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetPost operation.
     * @callback module:api/DatasetsApi~datasetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Dataset
     * @param {module:model/DatasetRestApiPost} datasetRestApiPost Dataset schema
     * @param {module:api/DatasetsApi~datasetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetPost201Response}
     */
    datasetPost(datasetRestApiPost, callback) {
      let postBody = datasetRestApiPost;
      // verify the required parameter 'datasetRestApiPost' is set
      if (datasetRestApiPost === undefined || datasetRestApiPost === null) {
        throw new Error("Missing the required parameter 'datasetRestApiPost' when calling datasetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatasetPost201Response;
      return this.apiClient.callApi(
        '/dataset/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetRelatedColumnNameGet operation.
     * @callback module:api/DatasetsApi~datasetRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/DatasetsApi~datasetRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    datasetRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling datasetRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/dataset/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
