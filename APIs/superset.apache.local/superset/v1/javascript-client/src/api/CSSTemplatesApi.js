/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import CssTemplateGet200Response from '../model/CssTemplateGet200Response';
import CssTemplatePkGet200Response from '../model/CssTemplatePkGet200Response';
import CssTemplatePkPut200Response from '../model/CssTemplatePkPut200Response';
import CssTemplatePost201Response from '../model/CssTemplatePost201Response';
import CssTemplateRestApiPost from '../model/CssTemplateRestApiPost';
import CssTemplateRestApiPut from '../model/CssTemplateRestApiPut';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';

/**
* CSSTemplates service.
* @module api/CSSTemplatesApi
* @version v1
*/
export default class CSSTemplatesApi {

    /**
    * Constructs a new CSSTemplatesApi. 
    * @alias module:api/CSSTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cssTemplateDelete operation.
     * @callback module:api/CSSTemplatesApi~cssTemplateDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple css templates in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/CSSTemplatesApi~cssTemplateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    cssTemplateDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/css_template/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplateGet operation.
     * @callback module:api/CSSTemplatesApi~cssTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CssTemplateGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/CSSTemplatesApi~cssTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CssTemplateGet200Response}
     */
    cssTemplateGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CssTemplateGet200Response;
      return this.apiClient.callApi(
        '/css_template/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplateInfoGet operation.
     * @callback module:api/CSSTemplatesApi~cssTemplateInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/CSSTemplatesApi~cssTemplateInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    cssTemplateInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/css_template/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplatePkDelete operation.
     * @callback module:api/CSSTemplatesApi~cssTemplatePkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CSS template
     * @param {Number} pk 
     * @param {module:api/CSSTemplatesApi~cssTemplatePkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    cssTemplatePkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling cssTemplatePkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/css_template/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplatePkGet operation.
     * @callback module:api/CSSTemplatesApi~cssTemplatePkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CssTemplatePkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a CSS template
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/CSSTemplatesApi~cssTemplatePkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CssTemplatePkGet200Response}
     */
    cssTemplatePkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling cssTemplatePkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CssTemplatePkGet200Response;
      return this.apiClient.callApi(
        '/css_template/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplatePkPut operation.
     * @callback module:api/CSSTemplatesApi~cssTemplatePkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CssTemplatePkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a CSS template
     * @param {Number} pk 
     * @param {module:model/CssTemplateRestApiPut} cssTemplateRestApiPut Model schema
     * @param {module:api/CSSTemplatesApi~cssTemplatePkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CssTemplatePkPut200Response}
     */
    cssTemplatePkPut(pk, cssTemplateRestApiPut, callback) {
      let postBody = cssTemplateRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling cssTemplatePkPut");
      }
      // verify the required parameter 'cssTemplateRestApiPut' is set
      if (cssTemplateRestApiPut === undefined || cssTemplateRestApiPut === null) {
        throw new Error("Missing the required parameter 'cssTemplateRestApiPut' when calling cssTemplatePkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CssTemplatePkPut200Response;
      return this.apiClient.callApi(
        '/css_template/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplatePost operation.
     * @callback module:api/CSSTemplatesApi~cssTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CssTemplatePost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a CSS template
     * @param {module:model/CssTemplateRestApiPost} cssTemplateRestApiPost Model schema
     * @param {module:api/CSSTemplatesApi~cssTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CssTemplatePost201Response}
     */
    cssTemplatePost(cssTemplateRestApiPost, callback) {
      let postBody = cssTemplateRestApiPost;
      // verify the required parameter 'cssTemplateRestApiPost' is set
      if (cssTemplateRestApiPost === undefined || cssTemplateRestApiPost === null) {
        throw new Error("Missing the required parameter 'cssTemplateRestApiPost' when calling cssTemplatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CssTemplatePost201Response;
      return this.apiClient.callApi(
        '/css_template/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cssTemplateRelatedColumnNameGet operation.
     * @callback module:api/CSSTemplatesApi~cssTemplateRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/CSSTemplatesApi~cssTemplateRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    cssTemplateRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling cssTemplateRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/css_template/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
