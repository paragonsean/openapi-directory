/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import ChartCacheScreenshotResponseSchema from '../model/ChartCacheScreenshotResponseSchema';
import ChartDataAsyncResponseSchema from '../model/ChartDataAsyncResponseSchema';
import ChartDataQueryContextSchema from '../model/ChartDataQueryContextSchema';
import ChartDataResponseSchema from '../model/ChartDataResponseSchema';
import ChartGet200Response from '../model/ChartGet200Response';
import ChartPkGet200Response from '../model/ChartPkGet200Response';
import ChartPkPut200Response from '../model/ChartPkPut200Response';
import ChartPost201Response from '../model/ChartPost201Response';
import ChartRestApiPost from '../model/ChartRestApiPost';
import ChartRestApiPut from '../model/ChartRestApiPut';
import GetFavStarIdsSchema from '../model/GetFavStarIdsSchema';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';
import ScreenshotQuerySchema from '../model/ScreenshotQuerySchema';

/**
* Charts service.
* @module api/ChartsApi
* @version v1
*/
export default class ChartsApi {

    /**
    * Constructs a new ChartsApi. 
    * @alias module:api/ChartsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chartDataCacheKeyGet operation.
     * @callback module:api/ChartsApi~chartDataCacheKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {String} cacheKey 
     * @param {module:api/ChartsApi~chartDataCacheKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartDataResponseSchema}
     */
    chartDataCacheKeyGet(cacheKey, callback) {
      let postBody = null;
      // verify the required parameter 'cacheKey' is set
      if (cacheKey === undefined || cacheKey === null) {
        throw new Error("Missing the required parameter 'cacheKey' when calling chartDataCacheKeyGet");
      }

      let pathParams = {
        'cache_key': cacheKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;
      return this.apiClient.callApi(
        '/chart/data/{cache_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartDataPost operation.
     * @callback module:api/ChartsApi~chartDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {module:model/ChartDataQueryContextSchema} chartDataQueryContextSchema A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {module:api/ChartsApi~chartDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartDataResponseSchema}
     */
    chartDataPost(chartDataQueryContextSchema, callback) {
      let postBody = chartDataQueryContextSchema;
      // verify the required parameter 'chartDataQueryContextSchema' is set
      if (chartDataQueryContextSchema === undefined || chartDataQueryContextSchema === null) {
        throw new Error("Missing the required parameter 'chartDataQueryContextSchema' when calling chartDataPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;
      return this.apiClient.callApi(
        '/chart/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartDelete operation.
     * @callback module:api/ChartsApi~chartDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/ChartsApi~chartDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    chartDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/chart/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartExportGet operation.
     * @callback module:api/ChartsApi~chartExportGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/ChartsApi~chartExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    chartExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/chart/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartFavoriteStatusGet operation.
     * @callback module:api/ChartsApi~chartFavoriteStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavStarIdsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check favorited dashboards for current user
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/ChartsApi~chartFavoriteStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavStarIdsSchema}
     */
    chartFavoriteStatusGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavStarIdsSchema;
      return this.apiClient.callApi(
        '/chart/favorite_status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartGet operation.
     * @callback module:api/ChartsApi~chartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/ChartsApi~chartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartGet200Response}
     */
    chartGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartGet200Response;
      return this.apiClient.callApi(
        '/chart/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartImportPost operation.
     * @callback module:api/ChartsApi~chartImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [formData] upload file (ZIP)
     * @param {Boolean} [overwrite] overwrite existing databases?
     * @param {String} [passwords] JSON map of passwords for each file
     * @param {module:api/ChartsApi~chartImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    chartImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'overwrite': opts['overwrite'],
        'passwords': opts['passwords']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/chart/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartInfoGet operation.
     * @callback module:api/ChartsApi~chartInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Several metadata information about chart API endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/ChartsApi~chartInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    chartInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/chart/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkCacheScreenshotGet operation.
     * @callback module:api/ChartsApi~chartPkCacheScreenshotGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartCacheScreenshotResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute and cache a screenshot.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenshotQuerySchema} [q] 
     * @param {module:api/ChartsApi~chartPkCacheScreenshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartCacheScreenshotResponseSchema}
     */
    chartPkCacheScreenshotGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkCacheScreenshotGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartCacheScreenshotResponseSchema;
      return this.apiClient.callApi(
        '/chart/{pk}/cache_screenshot/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkDataGet operation.
     * @callback module:api/ChartsApi~chartPkDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {Number} pk The chart ID
     * @param {Object} opts Optional parameters
     * @param {String} [format] The format in which the data should be returned
     * @param {String} [type] The type in which the data should be returned
     * @param {module:api/ChartsApi~chartPkDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartDataResponseSchema}
     */
    chartPkDataGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkDataGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'format': opts['format'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;
      return this.apiClient.callApi(
        '/chart/{pk}/data/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkDelete operation.
     * @callback module:api/ChartsApi~chartPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Chart.
     * @param {Number} pk 
     * @param {module:api/ChartsApi~chartPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    chartPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/chart/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkGet operation.
     * @callback module:api/ChartsApi~chartPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a chart detail information.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/ChartsApi~chartPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartPkGet200Response}
     */
    chartPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartPkGet200Response;
      return this.apiClient.callApi(
        '/chart/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkPut operation.
     * @callback module:api/ChartsApi~chartPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Chart.
     * @param {Number} pk 
     * @param {module:model/ChartRestApiPut} chartRestApiPut Chart schema
     * @param {module:api/ChartsApi~chartPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartPkPut200Response}
     */
    chartPkPut(pk, chartRestApiPut, callback) {
      let postBody = chartRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkPut");
      }
      // verify the required parameter 'chartRestApiPut' is set
      if (chartRestApiPut === undefined || chartRestApiPut === null) {
        throw new Error("Missing the required parameter 'chartRestApiPut' when calling chartPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartPkPut200Response;
      return this.apiClient.callApi(
        '/chart/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkScreenshotDigestGet operation.
     * @callback module:api/ChartsApi~chartPkScreenshotDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a computed screenshot from cache.
     * @param {Number} pk 
     * @param {String} digest 
     * @param {module:api/ChartsApi~chartPkScreenshotDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    chartPkScreenshotDigestGet(pk, digest, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkScreenshotDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling chartPkScreenshotDigestGet");
      }

      let pathParams = {
        'pk': pk,
        'digest': digest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/chart/{pk}/screenshot/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPkThumbnailDigestGet operation.
     * @callback module:api/ChartsApi~chartPkThumbnailDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {Number} pk 
     * @param {String} digest 
     * @param {module:api/ChartsApi~chartPkThumbnailDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    chartPkThumbnailDigestGet(pk, digest, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling chartPkThumbnailDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling chartPkThumbnailDigestGet");
      }

      let pathParams = {
        'pk': pk,
        'digest': digest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/chart/{pk}/thumbnail/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartPost operation.
     * @callback module:api/ChartsApi~chartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Chart.
     * @param {module:model/ChartRestApiPost} chartRestApiPost Chart schema
     * @param {module:api/ChartsApi~chartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartPost201Response}
     */
    chartPost(chartRestApiPost, callback) {
      let postBody = chartRestApiPost;
      // verify the required parameter 'chartRestApiPost' is set
      if (chartRestApiPost === undefined || chartRestApiPost === null) {
        throw new Error("Missing the required parameter 'chartRestApiPost' when calling chartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartPost201Response;
      return this.apiClient.callApi(
        '/chart/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartRelatedColumnNameGet operation.
     * @callback module:api/ChartsApi~chartRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/ChartsApi~chartRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    chartRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling chartRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/chart/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
