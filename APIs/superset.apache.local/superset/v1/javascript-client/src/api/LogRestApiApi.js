/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import LogGet200Response from '../model/LogGet200Response';
import LogPkGet200Response from '../model/LogPkGet200Response';
import LogPost201Response from '../model/LogPost201Response';
import LogRestApiPost from '../model/LogRestApiPost';

/**
* LogRestApi service.
* @module api/LogRestApiApi
* @version v1
*/
export default class LogRestApiApi {

    /**
    * Constructs a new LogRestApiApi. 
    * @alias module:api/LogRestApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the logGet operation.
     * @callback module:api/LogRestApiApi~logGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/LogRestApiApi~logGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogGet200Response}
     */
    logGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogGet200Response;
      return this.apiClient.callApi(
        '/log/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logPkGet operation.
     * @callback module:api/LogRestApiApi~logPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an item model
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/LogRestApiApi~logPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogPkGet200Response}
     */
    logPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling logPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogPkGet200Response;
      return this.apiClient.callApi(
        '/log/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logPost operation.
     * @callback module:api/LogRestApiApi~logPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LogRestApiPost} logRestApiPost Model schema
     * @param {module:api/LogRestApiApi~logPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogPost201Response}
     */
    logPost(logRestApiPost, callback) {
      let postBody = logRestApiPost;
      // verify the required parameter 'logRestApiPost' is set
      if (logRestApiPost === undefined || logRestApiPost === null) {
        throw new Error("Missing the required parameter 'logRestApiPost' when calling logPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogPost201Response;
      return this.apiClient.callApi(
        '/log/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
