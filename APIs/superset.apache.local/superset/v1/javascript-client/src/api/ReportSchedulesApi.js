/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';
import ReportGet200Response from '../model/ReportGet200Response';
import ReportPkGet200Response from '../model/ReportPkGet200Response';
import ReportPkLogGet200Response from '../model/ReportPkLogGet200Response';
import ReportPkLogLogIdGet200Response from '../model/ReportPkLogLogIdGet200Response';
import ReportPkPut200Response from '../model/ReportPkPut200Response';
import ReportPost201Response from '../model/ReportPost201Response';
import ReportScheduleRestApiPost from '../model/ReportScheduleRestApiPost';
import ReportScheduleRestApiPut from '../model/ReportScheduleRestApiPut';

/**
* ReportSchedules service.
* @module api/ReportSchedulesApi
* @version v1
*/
export default class ReportSchedulesApi {

    /**
    * Constructs a new ReportSchedulesApi. 
    * @alias module:api/ReportSchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportDelete operation.
     * @callback module:api/ReportSchedulesApi~reportDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple report schedules in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/ReportSchedulesApi~reportDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    reportDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/report/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportGet operation.
     * @callback module:api/ReportSchedulesApi~reportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportGet200Response}
     */
    reportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportGet200Response;
      return this.apiClient.callApi(
        '/report/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportInfoGet operation.
     * @callback module:api/ReportSchedulesApi~reportInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    reportInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/report/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPkDelete operation.
     * @callback module:api/ReportSchedulesApi~reportPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a report schedule
     * @param {Number} pk The report schedule pk
     * @param {module:api/ReportSchedulesApi~reportPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    reportPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling reportPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/report/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPkGet operation.
     * @callback module:api/ReportSchedulesApi~reportPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report schedule
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportPkGet200Response}
     */
    reportPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling reportPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportPkGet200Response;
      return this.apiClient.callApi(
        '/report/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPkLogGet operation.
     * @callback module:api/ReportSchedulesApi~reportPkLogGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportPkLogGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Number} pk The report schedule id for these logs
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportPkLogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportPkLogGet200Response}
     */
    reportPkLogGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling reportPkLogGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportPkLogGet200Response;
      return this.apiClient.callApi(
        '/report/{pk}/log/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPkLogLogIdGet operation.
     * @callback module:api/ReportSchedulesApi~reportPkLogLogIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportPkLogLogIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report schedule log
     * @param {Number} pk The report schedule pk for log
     * @param {Number} logId The log pk
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportPkLogLogIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportPkLogLogIdGet200Response}
     */
    reportPkLogLogIdGet(pk, logId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling reportPkLogLogIdGet");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling reportPkLogLogIdGet");
      }

      let pathParams = {
        'pk': pk,
        'log_id': logId
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportPkLogLogIdGet200Response;
      return this.apiClient.callApi(
        '/report/{pk}/log/{log_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPkPut operation.
     * @callback module:api/ReportSchedulesApi~reportPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a report schedule
     * @param {Number} pk The Report Schedule pk
     * @param {module:model/ReportScheduleRestApiPut} reportScheduleRestApiPut Report Schedule schema
     * @param {module:api/ReportSchedulesApi~reportPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportPkPut200Response}
     */
    reportPkPut(pk, reportScheduleRestApiPut, callback) {
      let postBody = reportScheduleRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling reportPkPut");
      }
      // verify the required parameter 'reportScheduleRestApiPut' is set
      if (reportScheduleRestApiPut === undefined || reportScheduleRestApiPut === null) {
        throw new Error("Missing the required parameter 'reportScheduleRestApiPut' when calling reportPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportPkPut200Response;
      return this.apiClient.callApi(
        '/report/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPost operation.
     * @callback module:api/ReportSchedulesApi~reportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a report schedule
     * @param {module:model/ReportScheduleRestApiPost} reportScheduleRestApiPost Report Schedule schema
     * @param {module:api/ReportSchedulesApi~reportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportPost201Response}
     */
    reportPost(reportScheduleRestApiPost, callback) {
      let postBody = reportScheduleRestApiPost;
      // verify the required parameter 'reportScheduleRestApiPost' is set
      if (reportScheduleRestApiPost === undefined || reportScheduleRestApiPost === null) {
        throw new Error("Missing the required parameter 'reportScheduleRestApiPost' when calling reportPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportPost201Response;
      return this.apiClient.callApi(
        '/report/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportRelatedColumnNameGet operation.
     * @callback module:api/ReportSchedulesApi~reportRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/ReportSchedulesApi~reportRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    reportRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling reportRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/report/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
