/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import DatabaseAvailableGet200ResponseInner from '../model/DatabaseAvailableGet200ResponseInner';
import DatabaseFunctionNamesResponse from '../model/DatabaseFunctionNamesResponse';
import DatabaseGet200Response from '../model/DatabaseGet200Response';
import DatabasePkGet200Response from '../model/DatabasePkGet200Response';
import DatabasePkPut200Response from '../model/DatabasePkPut200Response';
import DatabasePost201Response from '../model/DatabasePost201Response';
import DatabaseRelatedObjectsResponse from '../model/DatabaseRelatedObjectsResponse';
import DatabaseRestApiPost from '../model/DatabaseRestApiPost';
import DatabaseRestApiPut from '../model/DatabaseRestApiPut';
import DatabaseSchemasQuerySchema from '../model/DatabaseSchemasQuerySchema';
import DatabaseTestConnectionSchema from '../model/DatabaseTestConnectionSchema';
import DatabaseValidateParametersSchema from '../model/DatabaseValidateParametersSchema';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import SchemasResponseSchema from '../model/SchemasResponseSchema';
import SelectStarResponseSchema from '../model/SelectStarResponseSchema';
import TableMetadataResponseSchema from '../model/TableMetadataResponseSchema';

/**
* Database service.
* @module api/DatabaseApi
* @version v1
*/
export default class DatabaseApi {

    /**
    * Constructs a new DatabaseApi. 
    * @alias module:api/DatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseAvailableGet operation.
     * @callback module:api/DatabaseApi~databaseAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DatabaseAvailableGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names of databases currently available
     * @param {module:api/DatabaseApi~databaseAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DatabaseAvailableGet200ResponseInner>}
     */
    databaseAvailableGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DatabaseAvailableGet200ResponseInner];
      return this.apiClient.callApi(
        '/database/available/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseExportGet operation.
     * @callback module:api/DatabaseApi~databaseExportGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DatabaseApi~databaseExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    databaseExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/database/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseGet operation.
     * @callback module:api/DatabaseApi~databaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/DatabaseApi~databaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseGet200Response}
     */
    databaseGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseGet200Response;
      return this.apiClient.callApi(
        '/database/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseImportPost operation.
     * @callback module:api/DatabaseApi~databaseImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [formData] upload file (ZIP)
     * @param {Boolean} [overwrite] overwrite existing databases?
     * @param {String} [passwords] JSON map of passwords for each file
     * @param {module:api/DatabaseApi~databaseImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    databaseImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'overwrite': opts['overwrite'],
        'passwords': opts['passwords']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/database/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseInfoGet operation.
     * @callback module:api/DatabaseApi~databaseInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/DatabaseApi~databaseInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    databaseInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/database/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkDelete operation.
     * @callback module:api/DatabaseApi~databasePkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Database.
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~databasePkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    databasePkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/database/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkFunctionNamesGet operation.
     * @callback module:api/DatabaseApi~databasePkFunctionNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseFunctionNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function names supported by a database
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~databasePkFunctionNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseFunctionNamesResponse}
     */
    databasePkFunctionNamesGet(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkFunctionNamesGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseFunctionNamesResponse;
      return this.apiClient.callApi(
        '/database/{pk}/function_names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkGet operation.
     * @callback module:api/DatabaseApi~databasePkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an item model
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/DatabaseApi~databasePkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePkGet200Response}
     */
    databasePkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabasePkGet200Response;
      return this.apiClient.callApi(
        '/database/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkPut operation.
     * @callback module:api/DatabaseApi~databasePkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Database.
     * @param {Number} pk 
     * @param {module:model/DatabaseRestApiPut} databaseRestApiPut Database schema
     * @param {module:api/DatabaseApi~databasePkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePkPut200Response}
     */
    databasePkPut(pk, databaseRestApiPut, callback) {
      let postBody = databaseRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkPut");
      }
      // verify the required parameter 'databaseRestApiPut' is set
      if (databaseRestApiPut === undefined || databaseRestApiPut === null) {
        throw new Error("Missing the required parameter 'databaseRestApiPut' when calling databasePkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabasePkPut200Response;
      return this.apiClient.callApi(
        '/database/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkRelatedObjectsGet operation.
     * @callback module:api/DatabaseApi~databasePkRelatedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseRelatedObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get charts and dashboards count associated to a database
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~databasePkRelatedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseRelatedObjectsResponse}
     */
    databasePkRelatedObjectsGet(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkRelatedObjectsGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseRelatedObjectsResponse;
      return this.apiClient.callApi(
        '/database/{pk}/related_objects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkSchemasGet operation.
     * @callback module:api/DatabaseApi~databasePkSchemasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all schemas from a database
     * @param {Number} pk The database id
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseSchemasQuerySchema} [q] 
     * @param {module:api/DatabaseApi~databasePkSchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemasResponseSchema}
     */
    databasePkSchemasGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkSchemasGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchemasResponseSchema;
      return this.apiClient.callApi(
        '/database/{pk}/schemas/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkSelectStarTableNameGet operation.
     * @callback module:api/DatabaseApi~databasePkSelectStarTableNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectStarResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database select star for table
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~databasePkSelectStarTableNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectStarResponseSchema}
     */
    databasePkSelectStarTableNameGet(pk, tableName, schemaName, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameGet");
      }

      let pathParams = {
        'pk': pk,
        'table_name': tableName
      };
      let queryParams = {
        'schema_name': schemaName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectStarResponseSchema;
      return this.apiClient.callApi(
        '/database/{pk}/select_star/{table_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkSelectStarTableNameSchemaNameGet operation.
     * @callback module:api/DatabaseApi~databasePkSelectStarTableNameSchemaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectStarResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database select star for table
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~databasePkSelectStarTableNameSchemaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectStarResponseSchema}
     */
    databasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkSelectStarTableNameSchemaNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databasePkSelectStarTableNameSchemaNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling databasePkSelectStarTableNameSchemaNameGet");
      }

      let pathParams = {
        'pk': pk,
        'table_name': tableName,
        'schema_name': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectStarResponseSchema;
      return this.apiClient.callApi(
        '/database/{pk}/select_star/{table_name}/{schema_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePkTableTableNameSchemaNameGet operation.
     * @callback module:api/DatabaseApi~databasePkTableTableNameSchemaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableMetadataResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database table metadata
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~databasePkTableTableNameSchemaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableMetadataResponseSchema}
     */
    databasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling databasePkTableTableNameSchemaNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databasePkTableTableNameSchemaNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling databasePkTableTableNameSchemaNameGet");
      }

      let pathParams = {
        'pk': pk,
        'table_name': tableName,
        'schema_name': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableMetadataResponseSchema;
      return this.apiClient.callApi(
        '/database/{pk}/table/{table_name}/{schema_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePost operation.
     * @callback module:api/DatabaseApi~databasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Database.
     * @param {module:model/DatabaseRestApiPost} databaseRestApiPost Database schema
     * @param {module:api/DatabaseApi~databasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePost201Response}
     */
    databasePost(databaseRestApiPost, callback) {
      let postBody = databaseRestApiPost;
      // verify the required parameter 'databaseRestApiPost' is set
      if (databaseRestApiPost === undefined || databaseRestApiPost === null) {
        throw new Error("Missing the required parameter 'databaseRestApiPost' when calling databasePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabasePost201Response;
      return this.apiClient.callApi(
        '/database/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseTestConnectionPost operation.
     * @callback module:api/DatabaseApi~databaseTestConnectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests a database connection
     * @param {module:model/DatabaseTestConnectionSchema} databaseTestConnectionSchema Database schema
     * @param {module:api/DatabaseApi~databaseTestConnectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    databaseTestConnectionPost(databaseTestConnectionSchema, callback) {
      let postBody = databaseTestConnectionSchema;
      // verify the required parameter 'databaseTestConnectionSchema' is set
      if (databaseTestConnectionSchema === undefined || databaseTestConnectionSchema === null) {
        throw new Error("Missing the required parameter 'databaseTestConnectionSchema' when calling databaseTestConnectionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/database/test_connection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseValidateParametersPost operation.
     * @callback module:api/DatabaseApi~databaseValidateParametersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates parameters used to connect to a database
     * @param {module:model/DatabaseValidateParametersSchema} databaseValidateParametersSchema DB-specific parameters
     * @param {module:api/DatabaseApi~databaseValidateParametersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    databaseValidateParametersPost(databaseValidateParametersSchema, callback) {
      let postBody = databaseValidateParametersSchema;
      // verify the required parameter 'databaseValidateParametersSchema' is set
      if (databaseValidateParametersSchema === undefined || databaseValidateParametersSchema === null) {
        throw new Error("Missing the required parameter 'databaseValidateParametersSchema' when calling databaseValidateParametersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/database/validate_parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
