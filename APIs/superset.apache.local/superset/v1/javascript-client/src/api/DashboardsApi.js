/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import DashboardGet200Response from '../model/DashboardGet200Response';
import DashboardIdOrSlugChartsGet200Response from '../model/DashboardIdOrSlugChartsGet200Response';
import DashboardIdOrSlugDatasetsGet200Response from '../model/DashboardIdOrSlugDatasetsGet200Response';
import DashboardIdOrSlugGet200Response from '../model/DashboardIdOrSlugGet200Response';
import DashboardPkPut200Response from '../model/DashboardPkPut200Response';
import DashboardPost201Response from '../model/DashboardPost201Response';
import DashboardRestApiPost from '../model/DashboardRestApiPost';
import DashboardRestApiPut from '../model/DashboardRestApiPut';
import GetFavStarIdsSchema from '../model/GetFavStarIdsSchema';
import GetInfoSchema from '../model/GetInfoSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import RelatedResponseSchema from '../model/RelatedResponseSchema';
import ThumbnailQuerySchema from '../model/ThumbnailQuerySchema';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version v1
*/
export default class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dashboardDelete operation.
     * @callback module:api/DashboardsApi~dashboardDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DashboardsApi~dashboardDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    dashboardDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dashboard/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardExportGet operation.
     * @callback module:api/DashboardsApi~dashboardExportGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DashboardsApi~dashboardExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    dashboardExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/dashboard/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardFavoriteStatusGet operation.
     * @callback module:api/DashboardsApi~dashboardFavoriteStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavStarIdsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check favorited dashboards for current user
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/DashboardsApi~dashboardFavoriteStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavStarIdsSchema}
     */
    dashboardFavoriteStatusGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavStarIdsSchema;
      return this.apiClient.callApi(
        '/dashboard/favorite_status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardGet operation.
     * @callback module:api/DashboardsApi~dashboardGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/DashboardsApi~dashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardGet200Response}
     */
    dashboardGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardGet200Response;
      return this.apiClient.callApi(
        '/dashboard/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardIdOrSlugChartsGet operation.
     * @callback module:api/DashboardsApi~dashboardIdOrSlugChartsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardIdOrSlugChartsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the chart definitions for a given dashboard
     * @param {String} idOrSlug 
     * @param {module:api/DashboardsApi~dashboardIdOrSlugChartsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardIdOrSlugChartsGet200Response}
     */
    dashboardIdOrSlugChartsGet(idOrSlug, callback) {
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling dashboardIdOrSlugChartsGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardIdOrSlugChartsGet200Response;
      return this.apiClient.callApi(
        '/dashboard/{id_or_slug}/charts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardIdOrSlugDatasetsGet operation.
     * @callback module:api/DashboardsApi~dashboardIdOrSlugDatasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardIdOrSlugDatasetsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {String} idOrSlug Either the id of the dashboard, or its slug
     * @param {module:api/DashboardsApi~dashboardIdOrSlugDatasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardIdOrSlugDatasetsGet200Response}
     */
    dashboardIdOrSlugDatasetsGet(idOrSlug, callback) {
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling dashboardIdOrSlugDatasetsGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardIdOrSlugDatasetsGet200Response;
      return this.apiClient.callApi(
        '/dashboard/{id_or_slug}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardIdOrSlugGet operation.
     * @callback module:api/DashboardsApi~dashboardIdOrSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardIdOrSlugGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard detail information.
     * @param {String} idOrSlug Either the id of the dashboard, or its slug
     * @param {module:api/DashboardsApi~dashboardIdOrSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardIdOrSlugGet200Response}
     */
    dashboardIdOrSlugGet(idOrSlug, callback) {
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling dashboardIdOrSlugGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardIdOrSlugGet200Response;
      return this.apiClient.callApi(
        '/dashboard/{id_or_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardImportPost operation.
     * @callback module:api/DashboardsApi~dashboardImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [formData] upload file (ZIP or JSON)
     * @param {Boolean} [overwrite] overwrite existing databases?
     * @param {String} [passwords] JSON map of passwords for each file
     * @param {module:api/DashboardsApi~dashboardImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    dashboardImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'overwrite': opts['overwrite'],
        'passwords': opts['passwords']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dashboard/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardInfoGet operation.
     * @callback module:api/DashboardsApi~dashboardInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Several metadata information about dashboard API endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/DashboardsApi~dashboardInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    dashboardInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/dashboard/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardPkDelete operation.
     * @callback module:api/DashboardsApi~dashboardPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Dashboard.
     * @param {Number} pk 
     * @param {module:api/DashboardsApi~dashboardPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    dashboardPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling dashboardPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/dashboard/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardPkPut operation.
     * @callback module:api/DashboardsApi~dashboardPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Dashboard.
     * @param {Number} pk 
     * @param {module:model/DashboardRestApiPut} dashboardRestApiPut Dashboard schema
     * @param {module:api/DashboardsApi~dashboardPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardPkPut200Response}
     */
    dashboardPkPut(pk, dashboardRestApiPut, callback) {
      let postBody = dashboardRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling dashboardPkPut");
      }
      // verify the required parameter 'dashboardRestApiPut' is set
      if (dashboardRestApiPut === undefined || dashboardRestApiPut === null) {
        throw new Error("Missing the required parameter 'dashboardRestApiPut' when calling dashboardPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardPkPut200Response;
      return this.apiClient.callApi(
        '/dashboard/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardPkThumbnailDigestGet operation.
     * @callback module:api/DashboardsApi~dashboardPkThumbnailDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {Number} pk 
     * @param {String} digest A hex digest that makes this dashboard unique
     * @param {Object} opts Optional parameters
     * @param {module:model/ThumbnailQuerySchema} [q] 
     * @param {module:api/DashboardsApi~dashboardPkThumbnailDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    dashboardPkThumbnailDigestGet(pk, digest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling dashboardPkThumbnailDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling dashboardPkThumbnailDigestGet");
      }

      let pathParams = {
        'pk': pk,
        'digest': digest
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/dashboard/{pk}/thumbnail/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardPost operation.
     * @callback module:api/DashboardsApi~dashboardPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Dashboard.
     * @param {module:model/DashboardRestApiPost} dashboardRestApiPost Dashboard schema
     * @param {module:api/DashboardsApi~dashboardPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardPost201Response}
     */
    dashboardPost(dashboardRestApiPost, callback) {
      let postBody = dashboardRestApiPost;
      // verify the required parameter 'dashboardRestApiPost' is set
      if (dashboardRestApiPost === undefined || dashboardRestApiPost === null) {
        throw new Error("Missing the required parameter 'dashboardRestApiPost' when calling dashboardPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardPost201Response;
      return this.apiClient.callApi(
        '/dashboard/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardRelatedColumnNameGet operation.
     * @callback module:api/DashboardsApi~dashboardRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all possible owners for a dashboard.
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/DashboardsApi~dashboardRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    dashboardRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling dashboardRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/dashboard/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
