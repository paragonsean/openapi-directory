/**
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationLayerGet400Response from '../model/AnnotationLayerGet400Response';
import AnnotationLayerInfoGet200Response from '../model/AnnotationLayerInfoGet200Response';
import DistincResponseSchema from '../model/DistincResponseSchema';
import GetInfoSchema from '../model/GetInfoSchema';
import GetItemSchema from '../model/GetItemSchema';
import GetListSchema from '../model/GetListSchema';
import GetRelatedSchema from '../model/GetRelatedSchema';
import QueryGet200Response from '../model/QueryGet200Response';
import QueryPkGet200Response from '../model/QueryPkGet200Response';
import RelatedResponseSchema from '../model/RelatedResponseSchema';
import SavedQueryGet200Response from '../model/SavedQueryGet200Response';
import SavedQueryPkGet200Response from '../model/SavedQueryPkGet200Response';
import SavedQueryPkPut200Response from '../model/SavedQueryPkPut200Response';
import SavedQueryPost201Response from '../model/SavedQueryPost201Response';
import SavedQueryRestApiPost from '../model/SavedQueryRestApiPost';
import SavedQueryRestApiPut from '../model/SavedQueryRestApiPut';

/**
* Queries service.
* @module api/QueriesApi
* @version v1
*/
export default class QueriesApi {

    /**
    * Constructs a new QueriesApi. 
    * @alias module:api/QueriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryDistinctColumnNameGet operation.
     * @callback module:api/QueriesApi~queryDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/QueriesApi~queryDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistincResponseSchema}
     */
    queryDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling queryDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;
      return this.apiClient.callApi(
        '/query/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryGet operation.
     * @callback module:api/QueriesApi~queryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/QueriesApi~queryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryGet200Response}
     */
    queryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryGet200Response;
      return this.apiClient.callApi(
        '/query/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPkGet operation.
     * @callback module:api/QueriesApi~queryPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get query detail information.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/QueriesApi~queryPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryPkGet200Response}
     */
    queryPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling queryPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryPkGet200Response;
      return this.apiClient.callApi(
        '/query/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryRelatedColumnNameGet operation.
     * @callback module:api/QueriesApi~queryRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/QueriesApi~queryRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    queryRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling queryRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/query/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryDelete operation.
     * @callback module:api/QueriesApi~savedQueryDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple saved queries in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/QueriesApi~savedQueryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    savedQueryDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/saved_query/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryDistinctColumnNameGet operation.
     * @callback module:api/QueriesApi~savedQueryDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/QueriesApi~savedQueryDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistincResponseSchema}
     */
    savedQueryDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling savedQueryDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;
      return this.apiClient.callApi(
        '/saved_query/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryExportGet operation.
     * @callback module:api/QueriesApi~savedQueryExportGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple saved queries and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [q] 
     * @param {module:api/QueriesApi~savedQueryExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    savedQueryExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': this.apiClient.buildCollectionParam(opts['q'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/saved_query/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryGet operation.
     * @callback module:api/QueriesApi~savedQueryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedQueryGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} [q] 
     * @param {module:api/QueriesApi~savedQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedQueryGet200Response}
     */
    savedQueryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SavedQueryGet200Response;
      return this.apiClient.callApi(
        '/saved_query/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryImportPost operation.
     * @callback module:api/QueriesApi~savedQueryImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [formData] upload file (ZIP)
     * @param {Boolean} [overwrite] overwrite existing saved queries?
     * @param {String} [passwords] JSON map of passwords for each file
     * @param {module:api/QueriesApi~savedQueryImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    savedQueryImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'overwrite': opts['overwrite'],
        'passwords': opts['passwords']
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/saved_query/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryInfoGet operation.
     * @callback module:api/QueriesApi~savedQueryInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerInfoGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} [q] 
     * @param {module:api/QueriesApi~savedQueryInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerInfoGet200Response}
     */
    savedQueryInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerInfoGet200Response;
      return this.apiClient.callApi(
        '/saved_query/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryPkDelete operation.
     * @callback module:api/QueriesApi~savedQueryPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationLayerGet400Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete saved query
     * @param {Number} pk 
     * @param {module:api/QueriesApi~savedQueryPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationLayerGet400Response}
     */
    savedQueryPkDelete(pk, callback) {
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling savedQueryPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationLayerGet400Response;
      return this.apiClient.callApi(
        '/saved_query/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryPkGet operation.
     * @callback module:api/QueriesApi~savedQueryPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedQueryPkGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a saved query
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} [q] 
     * @param {module:api/QueriesApi~savedQueryPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedQueryPkGet200Response}
     */
    savedQueryPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling savedQueryPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SavedQueryPkGet200Response;
      return this.apiClient.callApi(
        '/saved_query/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryPkPut operation.
     * @callback module:api/QueriesApi~savedQueryPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedQueryPkPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a saved query
     * @param {Number} pk 
     * @param {module:model/SavedQueryRestApiPut} savedQueryRestApiPut Model schema
     * @param {module:api/QueriesApi~savedQueryPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedQueryPkPut200Response}
     */
    savedQueryPkPut(pk, savedQueryRestApiPut, callback) {
      let postBody = savedQueryRestApiPut;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling savedQueryPkPut");
      }
      // verify the required parameter 'savedQueryRestApiPut' is set
      if (savedQueryRestApiPut === undefined || savedQueryRestApiPut === null) {
        throw new Error("Missing the required parameter 'savedQueryRestApiPut' when calling savedQueryPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SavedQueryPkPut200Response;
      return this.apiClient.callApi(
        '/saved_query/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryPost operation.
     * @callback module:api/QueriesApi~savedQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedQueryPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a saved query
     * @param {module:model/SavedQueryRestApiPost} savedQueryRestApiPost Model schema
     * @param {module:api/QueriesApi~savedQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedQueryPost201Response}
     */
    savedQueryPost(savedQueryRestApiPost, callback) {
      let postBody = savedQueryRestApiPost;
      // verify the required parameter 'savedQueryRestApiPost' is set
      if (savedQueryRestApiPost === undefined || savedQueryRestApiPost === null) {
        throw new Error("Missing the required parameter 'savedQueryRestApiPost' when calling savedQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SavedQueryPost201Response;
      return this.apiClient.callApi(
        '/saved_query/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedQueryRelatedColumnNameGet operation.
     * @callback module:api/QueriesApi~savedQueryRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} [q] 
     * @param {module:api/QueriesApi~savedQueryRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedResponseSchema}
     */
    savedQueryRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling savedQueryRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;
      return this.apiClient.callApi(
        '/saved_query/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
