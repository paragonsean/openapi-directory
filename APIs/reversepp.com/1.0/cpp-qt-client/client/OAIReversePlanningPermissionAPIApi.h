/**
 * Reverse Planning Permission API
 * Programmatic API access to the reversepp.com planning application database
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReversePlanningPermissionAPIApi_H
#define OAI_OAIReversePlanningPermissionAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPost_applicant_single__applicant_multi_request.h"
#include "OAIPost_free_end_point__free_request.h"
#include "OAIPost_partial_address_multi__partial_address_multi_request.h"
#include "OAIPost_postcode_multi__postcode_multi_request.h"
#include "OAIPost_proposal_multi__proposal_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReversePlanningPermissionAPIApi : public QObject {
    Q_OBJECT

public:
    OAIReversePlanningPermissionAPIApi(const int timeOut = 0);
    ~OAIReversePlanningPermissionAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payload OAIPost_applicant_single__applicant_multi_request [required]
    */
    virtual void postApplicantSingle_applicantMulti(const OAIPost_applicant_single__applicant_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_applicant_single__applicant_multi_request [required]
    */
    virtual void postApplicantSingle_applicantSingle(const OAIPost_applicant_single__applicant_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_free_end_point__free_request [required]
    */
    virtual void postFreeEndPoint_free(const OAIPost_free_end_point__free_request &payload);

    /**
    * @param[in]  payload OAIPost_partial_address_multi__partial_address_multi_request [required]
    */
    virtual void postPartialAddresSingle_partialAddressSingle(const OAIPost_partial_address_multi__partial_address_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_partial_address_multi__partial_address_multi_request [required]
    */
    virtual void postPartialAddressMulti_partialAddressMulti(const OAIPost_partial_address_multi__partial_address_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_postcode_multi__postcode_multi_request [required]
    */
    virtual void postPostcodeMulti_postcodeMulti(const OAIPost_postcode_multi__postcode_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_postcode_multi__postcode_multi_request [required]
    */
    virtual void postPostcodeSingle_postcodeSingle(const OAIPost_postcode_multi__postcode_multi_request &payload);

    /**
    * @param[in]  payload OAIPost_proposal_multi__proposal_request [required]
    */
    virtual void postProposalMulti_proposal(const OAIPost_proposal_multi__proposal_request &payload);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postApplicantSingle_applicantMultiCallback(OAIHttpRequestWorker *worker);
    void postApplicantSingle_applicantSingleCallback(OAIHttpRequestWorker *worker);
    void postFreeEndPoint_freeCallback(OAIHttpRequestWorker *worker);
    void postPartialAddresSingle_partialAddressSingleCallback(OAIHttpRequestWorker *worker);
    void postPartialAddressMulti_partialAddressMultiCallback(OAIHttpRequestWorker *worker);
    void postPostcodeMulti_postcodeMultiCallback(OAIHttpRequestWorker *worker);
    void postPostcodeSingle_postcodeSingleCallback(OAIHttpRequestWorker *worker);
    void postProposalMulti_proposalCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postApplicantSingle_applicantMultiSignal();
    void postApplicantSingle_applicantSingleSignal();
    void postFreeEndPoint_freeSignal();
    void postPartialAddresSingle_partialAddressSingleSignal();
    void postPartialAddressMulti_partialAddressMultiSignal();
    void postPostcodeMulti_postcodeMultiSignal();
    void postPostcodeSingle_postcodeSingleSignal();
    void postProposalMulti_proposalSignal();


    void postApplicantSingle_applicantMultiSignalFull(OAIHttpRequestWorker *worker);
    void postApplicantSingle_applicantSingleSignalFull(OAIHttpRequestWorker *worker);
    void postFreeEndPoint_freeSignalFull(OAIHttpRequestWorker *worker);
    void postPartialAddresSingle_partialAddressSingleSignalFull(OAIHttpRequestWorker *worker);
    void postPartialAddressMulti_partialAddressMultiSignalFull(OAIHttpRequestWorker *worker);
    void postPostcodeMulti_postcodeMultiSignalFull(OAIHttpRequestWorker *worker);
    void postPostcodeSingle_postcodeSingleSignalFull(OAIHttpRequestWorker *worker);
    void postProposalMulti_proposalSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use postApplicantSingle_applicantMultiSignalError() instead")
    void postApplicantSingle_applicantMultiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postApplicantSingle_applicantMultiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApplicantSingle_applicantSingleSignalError() instead")
    void postApplicantSingle_applicantSingleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postApplicantSingle_applicantSingleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFreeEndPoint_freeSignalError() instead")
    void postFreeEndPoint_freeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postFreeEndPoint_freeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPartialAddresSingle_partialAddressSingleSignalError() instead")
    void postPartialAddresSingle_partialAddressSingleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPartialAddresSingle_partialAddressSingleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPartialAddressMulti_partialAddressMultiSignalError() instead")
    void postPartialAddressMulti_partialAddressMultiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPartialAddressMulti_partialAddressMultiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPostcodeMulti_postcodeMultiSignalError() instead")
    void postPostcodeMulti_postcodeMultiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPostcodeMulti_postcodeMultiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPostcodeSingle_postcodeSingleSignalError() instead")
    void postPostcodeSingle_postcodeSingleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPostcodeSingle_postcodeSingleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalMulti_proposalSignalError() instead")
    void postProposalMulti_proposalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalMulti_proposalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postApplicantSingle_applicantMultiSignalErrorFull() instead")
    void postApplicantSingle_applicantMultiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApplicantSingle_applicantMultiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApplicantSingle_applicantSingleSignalErrorFull() instead")
    void postApplicantSingle_applicantSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApplicantSingle_applicantSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFreeEndPoint_freeSignalErrorFull() instead")
    void postFreeEndPoint_freeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFreeEndPoint_freeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPartialAddresSingle_partialAddressSingleSignalErrorFull() instead")
    void postPartialAddresSingle_partialAddressSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPartialAddresSingle_partialAddressSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPartialAddressMulti_partialAddressMultiSignalErrorFull() instead")
    void postPartialAddressMulti_partialAddressMultiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPartialAddressMulti_partialAddressMultiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPostcodeMulti_postcodeMultiSignalErrorFull() instead")
    void postPostcodeMulti_postcodeMultiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPostcodeMulti_postcodeMultiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPostcodeSingle_postcodeSingleSignalErrorFull() instead")
    void postPostcodeSingle_postcodeSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPostcodeSingle_postcodeSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalMulti_proposalSignalErrorFull() instead")
    void postProposalMulti_proposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalMulti_proposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
