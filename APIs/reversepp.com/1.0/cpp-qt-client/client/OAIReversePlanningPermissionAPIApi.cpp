/**
 * Reverse Planning Permission API
 * Programmatic API access to the reversepp.com planning application database
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReversePlanningPermissionAPIApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIReversePlanningPermissionAPIApi::OAIReversePlanningPermissionAPIApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIReversePlanningPermissionAPIApi::~OAIReversePlanningPermissionAPIApi() {
}

void OAIReversePlanningPermissionAPIApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("postApplicantSingle_applicantMulti", defaultConf);
    _serverIndices.insert("postApplicantSingle_applicantMulti", 0);
    _serverConfigs.insert("postApplicantSingle_applicantSingle", defaultConf);
    _serverIndices.insert("postApplicantSingle_applicantSingle", 0);
    _serverConfigs.insert("postFreeEndPoint_free", defaultConf);
    _serverIndices.insert("postFreeEndPoint_free", 0);
    _serverConfigs.insert("postPartialAddresSingle_partialAddressSingle", defaultConf);
    _serverIndices.insert("postPartialAddresSingle_partialAddressSingle", 0);
    _serverConfigs.insert("postPartialAddressMulti_partialAddressMulti", defaultConf);
    _serverIndices.insert("postPartialAddressMulti_partialAddressMulti", 0);
    _serverConfigs.insert("postPostcodeMulti_postcodeMulti", defaultConf);
    _serverIndices.insert("postPostcodeMulti_postcodeMulti", 0);
    _serverConfigs.insert("postPostcodeSingle_postcodeSingle", defaultConf);
    _serverIndices.insert("postPostcodeSingle_postcodeSingle", 0);
    _serverConfigs.insert("postProposalMulti_proposal", defaultConf);
    _serverIndices.insert("postProposalMulti_proposal", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIReversePlanningPermissionAPIApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIReversePlanningPermissionAPIApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIReversePlanningPermissionAPIApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIReversePlanningPermissionAPIApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIReversePlanningPermissionAPIApi::setUsername(const QString &username) {
    _username = username;
}

void OAIReversePlanningPermissionAPIApi::setPassword(const QString &password) {
    _password = password;
}


void OAIReversePlanningPermissionAPIApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIReversePlanningPermissionAPIApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIReversePlanningPermissionAPIApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIReversePlanningPermissionAPIApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReversePlanningPermissionAPIApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReversePlanningPermissionAPIApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIReversePlanningPermissionAPIApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIReversePlanningPermissionAPIApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIReversePlanningPermissionAPIApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIReversePlanningPermissionAPIApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIReversePlanningPermissionAPIApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIReversePlanningPermissionAPIApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIReversePlanningPermissionAPIApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantMulti(const OAIPost_applicant_single__applicant_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postApplicantSingle_applicantMulti"][_serverIndices.value("postApplicantSingle_applicantMulti")].URL()+"/applicant_multi");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantMultiCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantMultiCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postApplicantSingle_applicantMultiSignal();
        Q_EMIT postApplicantSingle_applicantMultiSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postApplicantSingle_applicantMultiSignalE(error_type, error_str);
        Q_EMIT postApplicantSingle_applicantMultiSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postApplicantSingle_applicantMultiSignalError(error_type, error_str);
        Q_EMIT postApplicantSingle_applicantMultiSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantSingle(const OAIPost_applicant_single__applicant_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postApplicantSingle_applicantSingle"][_serverIndices.value("postApplicantSingle_applicantSingle")].URL()+"/applicant_single");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantSingleCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postApplicantSingle_applicantSingleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postApplicantSingle_applicantSingleSignal();
        Q_EMIT postApplicantSingle_applicantSingleSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postApplicantSingle_applicantSingleSignalE(error_type, error_str);
        Q_EMIT postApplicantSingle_applicantSingleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postApplicantSingle_applicantSingleSignalError(error_type, error_str);
        Q_EMIT postApplicantSingle_applicantSingleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postFreeEndPoint_free(const OAIPost_free_end_point__free_request &payload) {
    QString fullPath = QString(_serverConfigs["postFreeEndPoint_free"][_serverIndices.value("postFreeEndPoint_free")].URL()+"/free");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postFreeEndPoint_freeCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postFreeEndPoint_freeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postFreeEndPoint_freeSignal();
        Q_EMIT postFreeEndPoint_freeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postFreeEndPoint_freeSignalE(error_type, error_str);
        Q_EMIT postFreeEndPoint_freeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postFreeEndPoint_freeSignalError(error_type, error_str);
        Q_EMIT postFreeEndPoint_freeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postPartialAddresSingle_partialAddressSingle(const OAIPost_partial_address_multi__partial_address_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postPartialAddresSingle_partialAddressSingle"][_serverIndices.value("postPartialAddresSingle_partialAddressSingle")].URL()+"/partial_address_single");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postPartialAddresSingle_partialAddressSingleCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postPartialAddresSingle_partialAddressSingleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postPartialAddresSingle_partialAddressSingleSignal();
        Q_EMIT postPartialAddresSingle_partialAddressSingleSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postPartialAddresSingle_partialAddressSingleSignalE(error_type, error_str);
        Q_EMIT postPartialAddresSingle_partialAddressSingleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postPartialAddresSingle_partialAddressSingleSignalError(error_type, error_str);
        Q_EMIT postPartialAddresSingle_partialAddressSingleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postPartialAddressMulti_partialAddressMulti(const OAIPost_partial_address_multi__partial_address_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postPartialAddressMulti_partialAddressMulti"][_serverIndices.value("postPartialAddressMulti_partialAddressMulti")].URL()+"/partial_address_multi");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postPartialAddressMulti_partialAddressMultiCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postPartialAddressMulti_partialAddressMultiCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postPartialAddressMulti_partialAddressMultiSignal();
        Q_EMIT postPartialAddressMulti_partialAddressMultiSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postPartialAddressMulti_partialAddressMultiSignalE(error_type, error_str);
        Q_EMIT postPartialAddressMulti_partialAddressMultiSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postPartialAddressMulti_partialAddressMultiSignalError(error_type, error_str);
        Q_EMIT postPartialAddressMulti_partialAddressMultiSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postPostcodeMulti_postcodeMulti(const OAIPost_postcode_multi__postcode_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postPostcodeMulti_postcodeMulti"][_serverIndices.value("postPostcodeMulti_postcodeMulti")].URL()+"/postcode_multi");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postPostcodeMulti_postcodeMultiCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postPostcodeMulti_postcodeMultiCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postPostcodeMulti_postcodeMultiSignal();
        Q_EMIT postPostcodeMulti_postcodeMultiSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postPostcodeMulti_postcodeMultiSignalE(error_type, error_str);
        Q_EMIT postPostcodeMulti_postcodeMultiSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postPostcodeMulti_postcodeMultiSignalError(error_type, error_str);
        Q_EMIT postPostcodeMulti_postcodeMultiSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postPostcodeSingle_postcodeSingle(const OAIPost_postcode_multi__postcode_multi_request &payload) {
    QString fullPath = QString(_serverConfigs["postPostcodeSingle_postcodeSingle"][_serverIndices.value("postPostcodeSingle_postcodeSingle")].URL()+"/postcode_single");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postPostcodeSingle_postcodeSingleCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postPostcodeSingle_postcodeSingleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postPostcodeSingle_postcodeSingleSignal();
        Q_EMIT postPostcodeSingle_postcodeSingleSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postPostcodeSingle_postcodeSingleSignalE(error_type, error_str);
        Q_EMIT postPostcodeSingle_postcodeSingleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postPostcodeSingle_postcodeSingleSignalError(error_type, error_str);
        Q_EMIT postPostcodeSingle_postcodeSingleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::postProposalMulti_proposal(const OAIPost_proposal_multi__proposal_request &payload) {
    QString fullPath = QString(_serverConfigs["postProposalMulti_proposal"][_serverIndices.value("postProposalMulti_proposal")].URL()+"/proposal");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = payload.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReversePlanningPermissionAPIApi::postProposalMulti_proposalCallback);
    connect(this, &OAIReversePlanningPermissionAPIApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReversePlanningPermissionAPIApi::postProposalMulti_proposalCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postProposalMulti_proposalSignal();
        Q_EMIT postProposalMulti_proposalSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postProposalMulti_proposalSignalE(error_type, error_str);
        Q_EMIT postProposalMulti_proposalSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postProposalMulti_proposalSignalError(error_type, error_str);
        Q_EMIT postProposalMulti_proposalSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReversePlanningPermissionAPIApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
