/**
 * Reverse Planning Permission API
 * Programmatic API access to the reversepp.com planning application database
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_applicant_single__applicant_multi_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_applicant_single__applicant_multi_request::OAIPost_applicant_single__applicant_multi_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_applicant_single__applicant_multi_request::OAIPost_applicant_single__applicant_multi_request() {
    this->initializeModel();
}

OAIPost_applicant_single__applicant_multi_request::~OAIPost_applicant_single__applicant_multi_request() {}

void OAIPost_applicant_single__applicant_multi_request::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_applicant_isSet = false;
    m_applicant_isValid = false;
}

void OAIPost_applicant_single__applicant_multi_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_applicant_single__applicant_multi_request::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api-key")]);
    m_api_key_isSet = !json[QString("api-key")].isNull() && m_api_key_isValid;

    m_applicant_isValid = ::OpenAPI::fromJsonValue(m_applicant, json[QString("applicant")]);
    m_applicant_isSet = !json[QString("applicant")].isNull() && m_applicant_isValid;
}

QString OAIPost_applicant_single__applicant_multi_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_applicant_single__applicant_multi_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api-key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_applicant_isSet) {
        obj.insert(QString("applicant"), ::OpenAPI::toJsonValue(m_applicant));
    }
    return obj;
}

QString OAIPost_applicant_single__applicant_multi_request::getApiKey() const {
    return m_api_key;
}
void OAIPost_applicant_single__applicant_multi_request::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIPost_applicant_single__applicant_multi_request::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIPost_applicant_single__applicant_multi_request::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIPost_applicant_single__applicant_multi_request::getApplicant() const {
    return m_applicant;
}
void OAIPost_applicant_single__applicant_multi_request::setApplicant(const QString &applicant) {
    m_applicant = applicant;
    m_applicant_isSet = true;
}

bool OAIPost_applicant_single__applicant_multi_request::is_applicant_Set() const{
    return m_applicant_isSet;
}

bool OAIPost_applicant_single__applicant_multi_request::is_applicant_Valid() const{
    return m_applicant_isValid;
}

bool OAIPost_applicant_single__applicant_multi_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_applicant_single__applicant_multi_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
