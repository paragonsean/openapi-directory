/**
 * Reverse Planning Permission API
 * Programmatic API access to the reversepp.com planning application database
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_proposal_multi__proposal_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_proposal_multi__proposal_request::OAIPost_proposal_multi__proposal_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_proposal_multi__proposal_request::OAIPost_proposal_multi__proposal_request() {
    this->initializeModel();
}

OAIPost_proposal_multi__proposal_request::~OAIPost_proposal_multi__proposal_request() {}

void OAIPost_proposal_multi__proposal_request::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_key_word_isSet = false;
    m_key_word_isValid = false;
}

void OAIPost_proposal_multi__proposal_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_proposal_multi__proposal_request::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api-key")]);
    m_api_key_isSet = !json[QString("api-key")].isNull() && m_api_key_isValid;

    m_key_word_isValid = ::OpenAPI::fromJsonValue(m_key_word, json[QString("key-word")]);
    m_key_word_isSet = !json[QString("key-word")].isNull() && m_key_word_isValid;
}

QString OAIPost_proposal_multi__proposal_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_proposal_multi__proposal_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api-key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_key_word_isSet) {
        obj.insert(QString("key-word"), ::OpenAPI::toJsonValue(m_key_word));
    }
    return obj;
}

QString OAIPost_proposal_multi__proposal_request::getApiKey() const {
    return m_api_key;
}
void OAIPost_proposal_multi__proposal_request::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIPost_proposal_multi__proposal_request::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIPost_proposal_multi__proposal_request::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIPost_proposal_multi__proposal_request::getKeyWord() const {
    return m_key_word;
}
void OAIPost_proposal_multi__proposal_request::setKeyWord(const QString &key_word) {
    m_key_word = key_word;
    m_key_word_isSet = true;
}

bool OAIPost_proposal_multi__proposal_request::is_key_word_Set() const{
    return m_key_word_isSet;
}

bool OAIPost_proposal_multi__proposal_request::is_key_word_Valid() const{
    return m_key_word_isValid;
}

bool OAIPost_proposal_multi__proposal_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_proposal_multi__proposal_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
