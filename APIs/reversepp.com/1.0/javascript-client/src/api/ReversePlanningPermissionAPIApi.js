/**
 * Reverse Planning Permission API
 * Programmatic API access to the reversepp.com planning application database
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PostApplicantSingleApplicantMultiRequest from '../model/PostApplicantSingleApplicantMultiRequest';
import PostFreeEndPointFreeRequest from '../model/PostFreeEndPointFreeRequest';
import PostPartialAddressMultiPartialAddressMultiRequest from '../model/PostPartialAddressMultiPartialAddressMultiRequest';
import PostPostcodeMultiPostcodeMultiRequest from '../model/PostPostcodeMultiPostcodeMultiRequest';
import PostProposalMultiProposalRequest from '../model/PostProposalMultiProposalRequest';

/**
* ReversePlanningPermissionAPI service.
* @module api/ReversePlanningPermissionAPIApi
* @version 1.0
*/
export default class ReversePlanningPermissionAPIApi {

    /**
    * Constructs a new ReversePlanningPermissionAPIApi. 
    * @alias module:api/ReversePlanningPermissionAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApplicantSingleApplicantMulti operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postApplicantSingleApplicantMultiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve 50 planning applications for an applicant name (example: John Smith). Rate limit is 100/day;10/minute
     * @param {module:model/PostApplicantSingleApplicantMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postApplicantSingleApplicantMultiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postApplicantSingleApplicantMulti(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postApplicantSingleApplicantMulti");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/applicant_multi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApplicantSingleApplicantSingle operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postApplicantSingleApplicantSingleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single planning application for an applicant (example: John Smith). Rate limit is 100/day;10/minute
     * @param {module:model/PostApplicantSingleApplicantMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postApplicantSingleApplicantSingleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postApplicantSingleApplicantSingle(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postApplicantSingleApplicantSingle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/applicant_single', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFreeEndPointFree operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postFreeEndPointFreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve 1 planning application for proposal key word (example: Swimming Pool). Rate limit is 100/day;10/minute
     * @param {module:model/PostFreeEndPointFreeRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postFreeEndPointFreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFreeEndPointFree(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postFreeEndPointFree");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/free', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPartialAddresSinglePartialAddressSingle operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postPartialAddresSinglePartialAddressSingleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single planning application for a partial address (example: Station Road). Rate limit is 100/day;10/minute
     * @param {module:model/PostPartialAddressMultiPartialAddressMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postPartialAddresSinglePartialAddressSingleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPartialAddresSinglePartialAddressSingle(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPartialAddresSinglePartialAddressSingle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/partial_address_single', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPartialAddressMultiPartialAddressMulti operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postPartialAddressMultiPartialAddressMultiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve 50 planning applications for a partial address (example: Station Road). Rate limit is 100/day;10/minute
     * @param {module:model/PostPartialAddressMultiPartialAddressMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postPartialAddressMultiPartialAddressMultiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPartialAddressMultiPartialAddressMulti(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPartialAddressMultiPartialAddressMulti");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/partial_address_multi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPostcodeMultiPostcodeMulti operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postPostcodeMultiPostcodeMultiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve 50 planning applications for a postcode. Rate limit is 100/day;10/minute
     * @param {module:model/PostPostcodeMultiPostcodeMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postPostcodeMultiPostcodeMultiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPostcodeMultiPostcodeMulti(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPostcodeMultiPostcodeMulti");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/postcode_multi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPostcodeSinglePostcodeSingle operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postPostcodeSinglePostcodeSingleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single planning application for a postcode. Rate limit is 100/day;10/minute
     * @param {module:model/PostPostcodeMultiPostcodeMultiRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postPostcodeSinglePostcodeSingleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPostcodeSinglePostcodeSingle(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPostcodeSinglePostcodeSingle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/postcode_single', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProposalMultiProposal operation.
     * @callback module:api/ReversePlanningPermissionAPIApi~postProposalMultiProposalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve 50 planning applications for proposal key word (example: Swimming Pool). Rate limit is 100/day;10/minute
     * @param {module:model/PostProposalMultiProposalRequest} payload 
     * @param {module:api/ReversePlanningPermissionAPIApi~postProposalMultiProposalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProposalMultiProposal(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postProposalMultiProposal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/proposal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
