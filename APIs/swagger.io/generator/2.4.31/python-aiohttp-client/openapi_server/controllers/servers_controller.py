from typing import List, Dict
from aiohttp import web

from openapi_server.models.cli_option import CliOption
from openapi_server.models.generator_input import GeneratorInput
from openapi_server.models.response_code import ResponseCode
from openapi_server import util


async def download_file_0(request: web.Request, file_id) -> web.Response:
    """Downloads a pre-generated file

    A valid &#x60;fileId&#x60; is generated by the &#x60;/clients/{language}&#x60; or &#x60;/servers/{language}&#x60; POST operations.  The fileId code can be used just once, after which a new &#x60;fileId&#x60; will need to be requested.

    :param file_id: 
    :type file_id: str

    """
    return web.Response(status=200)


async def generate_server_for_language(request: web.Request, framework, body) -> web.Response:
    """Generates a server library

    Accepts a &#x60;GeneratorInput&#x60; options map for spec location and generation options.

    :param framework: framework
    :type framework: str
    :param body: parameters
    :type body: dict | bytes

    """
    body = GeneratorInput.from_dict(body)
    return web.Response(status=200)


async def get_server_options(request: web.Request, framework) -> web.Response:
    """Returns options for a server framework

    

    :param framework: The target language for the server framework
    :type framework: str

    """
    return web.Response(status=200)


async def server_options(request: web.Request, ) -> web.Response:
    """Gets languages supported by the server generator

    


    """
    return web.Response(status=200)
