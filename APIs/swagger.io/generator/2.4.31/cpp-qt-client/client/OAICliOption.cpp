/**
 * Swagger Generator
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * The version of the OpenAPI document: 2.4.31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICliOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICliOption::OAICliOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICliOption::OAICliOption() {
    this->initializeModel();
}

OAICliOption::~OAICliOption() {}

void OAICliOption::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_enum_isSet = false;
    m_r_enum_isValid = false;

    m_option_name_isSet = false;
    m_option_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICliOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICliOption::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_enum_isValid = ::OpenAPI::fromJsonValue(m_r_enum, json[QString("enum")]);
    m_r_enum_isSet = !json[QString("enum")].isNull() && m_r_enum_isValid;

    m_option_name_isValid = ::OpenAPI::fromJsonValue(m_option_name, json[QString("optionName")]);
    m_option_name_isSet = !json[QString("optionName")].isNull() && m_option_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICliOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICliOption::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_enum.size() > 0) {
        obj.insert(QString("enum"), ::OpenAPI::toJsonValue(m_r_enum));
    }
    if (m_option_name_isSet) {
        obj.insert(QString("optionName"), ::OpenAPI::toJsonValue(m_option_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICliOption::getRDefault() const {
    return m_r_default;
}
void OAICliOption::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICliOption::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICliOption::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAICliOption::getDescription() const {
    return m_description;
}
void OAICliOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICliOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAICliOption::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAICliOption::getREnum() const {
    return m_r_enum;
}
void OAICliOption::setREnum(const QMap<QString, QString> &r_enum) {
    m_r_enum = r_enum;
    m_r_enum_isSet = true;
}

bool OAICliOption::is_r_enum_Set() const{
    return m_r_enum_isSet;
}

bool OAICliOption::is_r_enum_Valid() const{
    return m_r_enum_isValid;
}

QString OAICliOption::getOptionName() const {
    return m_option_name;
}
void OAICliOption::setOptionName(const QString &option_name) {
    m_option_name = option_name;
    m_option_name_isSet = true;
}

bool OAICliOption::is_option_name_Set() const{
    return m_option_name_isSet;
}

bool OAICliOption::is_option_name_Valid() const{
    return m_option_name_isValid;
}

QString OAICliOption::getType() const {
    return m_type;
}
void OAICliOption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICliOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAICliOption::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICliOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_enum.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICliOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
