/**
 * Swagger Generator
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * The version of the OpenAPI document: 2.4.31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationValue::OAIAuthorizationValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationValue::OAIAuthorizationValue() {
    this->initializeModel();
}

OAIAuthorizationValue::~OAIAuthorizationValue() {}

void OAIAuthorizationValue::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_matcher_isSet = false;
    m_url_matcher_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAuthorizationValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationValue::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_matcher_isValid = ::OpenAPI::fromJsonValue(m_url_matcher, json[QString("urlMatcher")]);
    m_url_matcher_isSet = !json[QString("urlMatcher")].isNull() && m_url_matcher_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAuthorizationValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationValue::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_matcher_isSet) {
        obj.insert(QString("urlMatcher"), ::OpenAPI::toJsonValue(m_url_matcher));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAuthorizationValue::getKeyName() const {
    return m_key_name;
}
void OAIAuthorizationValue::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIAuthorizationValue::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIAuthorizationValue::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIAuthorizationValue::getType() const {
    return m_type;
}
void OAIAuthorizationValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuthorizationValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuthorizationValue::is_type_Valid() const{
    return m_type_isValid;
}

OAIObject OAIAuthorizationValue::getUrlMatcher() const {
    return m_url_matcher;
}
void OAIAuthorizationValue::setUrlMatcher(const OAIObject &url_matcher) {
    m_url_matcher = url_matcher;
    m_url_matcher_isSet = true;
}

bool OAIAuthorizationValue::is_url_matcher_Set() const{
    return m_url_matcher_isSet;
}

bool OAIAuthorizationValue::is_url_matcher_Valid() const{
    return m_url_matcher_isValid;
}

QString OAIAuthorizationValue::getValue() const {
    return m_value;
}
void OAIAuthorizationValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAuthorizationValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAuthorizationValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAuthorizationValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
