/**
 * Swagger Generator
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * The version of the OpenAPI document: 2.4.31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientsApi_H
#define OAI_OAIClientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICliOption.h"
#include "OAIGeneratorInput.h"
#include "OAIResponseCode.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientsApi : public QObject {
    Q_OBJECT

public:
    OAIClientsApi(const int timeOut = 0);
    ~OAIClientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void clientOptions();

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void downloadFile(const QString &file_id);

    /**
    * @param[in]  language QString [required]
    * @param[in]  body OAIGeneratorInput [required]
    */
    virtual void generateClient(const QString &language, const OAIGeneratorInput &body);

    /**
    * @param[in]  language QString [required]
    */
    virtual void getClientOptions(const QString &language);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clientOptionsCallback(OAIHttpRequestWorker *worker);
    void downloadFileCallback(OAIHttpRequestWorker *worker);
    void generateClientCallback(OAIHttpRequestWorker *worker);
    void getClientOptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clientOptionsSignal(QList<QString> summary);
    void downloadFileSignal(QString summary);
    void generateClientSignal(OAIResponseCode summary);
    void getClientOptionsSignal(QMap<QString, OAICliOption> summary);


    void clientOptionsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void downloadFileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void generateClientSignalFull(OAIHttpRequestWorker *worker, OAIResponseCode summary);
    void getClientOptionsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAICliOption> summary);

    Q_DECL_DEPRECATED_X("Use clientOptionsSignalError() instead")
    void clientOptionsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientOptionsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileSignalError() instead")
    void downloadFileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateClientSignalError() instead")
    void generateClientSignalE(OAIResponseCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateClientSignalError(OAIResponseCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientOptionsSignalError() instead")
    void getClientOptionsSignalE(QMap<QString, OAICliOption> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientOptionsSignalError(QMap<QString, OAICliOption> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clientOptionsSignalErrorFull() instead")
    void clientOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileSignalErrorFull() instead")
    void downloadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateClientSignalErrorFull() instead")
    void generateClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientOptionsSignalErrorFull() instead")
    void getClientOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
