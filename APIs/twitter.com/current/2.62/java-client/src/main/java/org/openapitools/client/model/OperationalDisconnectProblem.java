/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Problem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * You have been disconnected for operational reasons.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:49.009664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationalDisconnectProblem extends Problem {
  /**
   * Gets or Sets disconnectType
   */
  @JsonAdapter(DisconnectTypeEnum.Adapter.class)
  public enum DisconnectTypeEnum {
    OPERATIONAL_DISCONNECT("OperationalDisconnect"),
    
    UPSTREAM_OPERATIONAL_DISCONNECT("UpstreamOperationalDisconnect"),
    
    FORCE_DISCONNECT("ForceDisconnect"),
    
    UPSTREAM_UNCLEAN_DISCONNECT("UpstreamUncleanDisconnect"),
    
    SLOW_READER("SlowReader"),
    
    INTERNAL_ERROR("InternalError"),
    
    CLIENT_APPLICATION_STATE_DEGRADED("ClientApplicationStateDegraded"),
    
    INVALID_RULES("InvalidRules");

    private String value;

    DisconnectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisconnectTypeEnum fromValue(String value) {
      for (DisconnectTypeEnum b : DisconnectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisconnectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisconnectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisconnectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisconnectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisconnectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISCONNECT_TYPE = "disconnect_type";
  @SerializedName(SERIALIZED_NAME_DISCONNECT_TYPE)
  private DisconnectTypeEnum disconnectType;

  public OperationalDisconnectProblem() {
    this.type = this.getClass().getSimpleName();
  }

  public OperationalDisconnectProblem disconnectType(DisconnectTypeEnum disconnectType) {
    this.disconnectType = disconnectType;
    return this;
  }

  /**
   * Get disconnectType
   * @return disconnectType
   */
  @javax.annotation.Nullable
  public DisconnectTypeEnum getDisconnectType() {
    return disconnectType;
  }

  public void setDisconnectType(DisconnectTypeEnum disconnectType) {
    this.disconnectType = disconnectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationalDisconnectProblem operationalDisconnectProblem = (OperationalDisconnectProblem) o;
    return Objects.equals(this.disconnectType, operationalDisconnectProblem.disconnectType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disconnectType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationalDisconnectProblem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    disconnectType: ").append(toIndentedString(disconnectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("disconnect_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationalDisconnectProblem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationalDisconnectProblem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationalDisconnectProblem is not found in the empty JSON string", OperationalDisconnectProblem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationalDisconnectProblem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationalDisconnectProblem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OperationalDisconnectProblem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationalDisconnectProblem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationalDisconnectProblem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationalDisconnectProblem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationalDisconnectProblem.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationalDisconnectProblem>() {
           @Override
           public void write(JsonWriter out, OperationalDisconnectProblem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationalDisconnectProblem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationalDisconnectProblem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationalDisconnectProblem
   * @throws IOException if the JSON string is invalid with respect to OperationalDisconnectProblem
   */
  public static OperationalDisconnectProblem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationalDisconnectProblem.class);
  }

  /**
   * Convert an instance of OperationalDisconnectProblem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

