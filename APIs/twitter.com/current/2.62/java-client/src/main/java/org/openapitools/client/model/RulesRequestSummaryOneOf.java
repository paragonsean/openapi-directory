/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the results of the addition of user-specified stream filtering rules.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:49.009664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulesRequestSummaryOneOf {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @SerializedName(SERIALIZED_NAME_INVALID)
  private Integer invalid;

  public static final String SERIALIZED_NAME_NOT_CREATED = "not_created";
  @SerializedName(SERIALIZED_NAME_NOT_CREATED)
  private Integer notCreated;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Integer valid;

  public RulesRequestSummaryOneOf() {
  }

  public RulesRequestSummaryOneOf created(Integer created) {
    this.created = created;
    return this;
  }

  /**
   * Number of user-specified stream filtering rules that were created.
   * @return created
   */
  @javax.annotation.Nonnull
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }


  public RulesRequestSummaryOneOf invalid(Integer invalid) {
    this.invalid = invalid;
    return this;
  }

  /**
   * Number of invalid user-specified stream filtering rules.
   * @return invalid
   */
  @javax.annotation.Nonnull
  public Integer getInvalid() {
    return invalid;
  }

  public void setInvalid(Integer invalid) {
    this.invalid = invalid;
  }


  public RulesRequestSummaryOneOf notCreated(Integer notCreated) {
    this.notCreated = notCreated;
    return this;
  }

  /**
   * Number of user-specified stream filtering rules that were not created.
   * @return notCreated
   */
  @javax.annotation.Nonnull
  public Integer getNotCreated() {
    return notCreated;
  }

  public void setNotCreated(Integer notCreated) {
    this.notCreated = notCreated;
  }


  public RulesRequestSummaryOneOf valid(Integer valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Number of valid user-specified stream filtering rules.
   * @return valid
   */
  @javax.annotation.Nonnull
  public Integer getValid() {
    return valid;
  }

  public void setValid(Integer valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesRequestSummaryOneOf rulesRequestSummaryOneOf = (RulesRequestSummaryOneOf) o;
    return Objects.equals(this.created, rulesRequestSummaryOneOf.created) &&
        Objects.equals(this.invalid, rulesRequestSummaryOneOf.invalid) &&
        Objects.equals(this.notCreated, rulesRequestSummaryOneOf.notCreated) &&
        Objects.equals(this.valid, rulesRequestSummaryOneOf.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, invalid, notCreated, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesRequestSummaryOneOf {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    notCreated: ").append(toIndentedString(notCreated)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("invalid");
    openapiFields.add("not_created");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("invalid");
    openapiRequiredFields.add("not_created");
    openapiRequiredFields.add("valid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RulesRequestSummaryOneOf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RulesRequestSummaryOneOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RulesRequestSummaryOneOf is not found in the empty JSON string", RulesRequestSummaryOneOf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RulesRequestSummaryOneOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RulesRequestSummaryOneOf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RulesRequestSummaryOneOf.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RulesRequestSummaryOneOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RulesRequestSummaryOneOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RulesRequestSummaryOneOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RulesRequestSummaryOneOf.class));

       return (TypeAdapter<T>) new TypeAdapter<RulesRequestSummaryOneOf>() {
           @Override
           public void write(JsonWriter out, RulesRequestSummaryOneOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RulesRequestSummaryOneOf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RulesRequestSummaryOneOf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RulesRequestSummaryOneOf
   * @throws IOException if the JSON string is invalid with respect to RulesRequestSummaryOneOf
   */
  public static RulesRequestSummaryOneOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RulesRequestSummaryOneOf.class);
  }

  /**
   * Convert an instance of RulesRequestSummaryOneOf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

