/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserComplianceSchema;
import org.openapitools.client.model.UserDeleteComplianceSchema;
import org.openapitools.client.model.UserProfileModificationComplianceSchema;
import org.openapitools.client.model.UserProfileModificationObjectSchema;
import org.openapitools.client.model.UserProtectComplianceSchema;
import org.openapitools.client.model.UserScrubGeoObjectSchema;
import org.openapitools.client.model.UserScrubGeoSchema;
import org.openapitools.client.model.UserSuspendComplianceSchema;
import org.openapitools.client.model.UserTakedownComplianceSchema;
import org.openapitools.client.model.UserUndeleteComplianceSchema;
import org.openapitools.client.model.UserUnprotectComplianceSchema;
import org.openapitools.client.model.UserUnsuspendComplianceSchema;
import org.openapitools.client.model.UserWithheldComplianceSchema;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:49.009664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserComplianceData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UserComplianceData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UserComplianceData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UserComplianceData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UserProtectComplianceSchema> adapterUserProtectComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserProtectComplianceSchema.class));
            final TypeAdapter<UserUnprotectComplianceSchema> adapterUserUnprotectComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserUnprotectComplianceSchema.class));
            final TypeAdapter<UserDeleteComplianceSchema> adapterUserDeleteComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserDeleteComplianceSchema.class));
            final TypeAdapter<UserUndeleteComplianceSchema> adapterUserUndeleteComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserUndeleteComplianceSchema.class));
            final TypeAdapter<UserSuspendComplianceSchema> adapterUserSuspendComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserSuspendComplianceSchema.class));
            final TypeAdapter<UserUnsuspendComplianceSchema> adapterUserUnsuspendComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserUnsuspendComplianceSchema.class));
            final TypeAdapter<UserWithheldComplianceSchema> adapterUserWithheldComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserWithheldComplianceSchema.class));
            final TypeAdapter<UserScrubGeoSchema> adapterUserScrubGeoSchema = gson.getDelegateAdapter(this, TypeToken.get(UserScrubGeoSchema.class));
            final TypeAdapter<UserProfileModificationComplianceSchema> adapterUserProfileModificationComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(UserProfileModificationComplianceSchema.class));

            return (TypeAdapter<T>) new TypeAdapter<UserComplianceData>() {
                @Override
                public void write(JsonWriter out, UserComplianceData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UserProtectComplianceSchema`
                    if (value.getActualInstance() instanceof UserProtectComplianceSchema) {
                        JsonElement element = adapterUserProtectComplianceSchema.toJsonTree((UserProtectComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUnprotectComplianceSchema`
                    if (value.getActualInstance() instanceof UserUnprotectComplianceSchema) {
                        JsonElement element = adapterUserUnprotectComplianceSchema.toJsonTree((UserUnprotectComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserDeleteComplianceSchema`
                    if (value.getActualInstance() instanceof UserDeleteComplianceSchema) {
                        JsonElement element = adapterUserDeleteComplianceSchema.toJsonTree((UserDeleteComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUndeleteComplianceSchema`
                    if (value.getActualInstance() instanceof UserUndeleteComplianceSchema) {
                        JsonElement element = adapterUserUndeleteComplianceSchema.toJsonTree((UserUndeleteComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserSuspendComplianceSchema`
                    if (value.getActualInstance() instanceof UserSuspendComplianceSchema) {
                        JsonElement element = adapterUserSuspendComplianceSchema.toJsonTree((UserSuspendComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUnsuspendComplianceSchema`
                    if (value.getActualInstance() instanceof UserUnsuspendComplianceSchema) {
                        JsonElement element = adapterUserUnsuspendComplianceSchema.toJsonTree((UserUnsuspendComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserWithheldComplianceSchema`
                    if (value.getActualInstance() instanceof UserWithheldComplianceSchema) {
                        JsonElement element = adapterUserWithheldComplianceSchema.toJsonTree((UserWithheldComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserScrubGeoSchema`
                    if (value.getActualInstance() instanceof UserScrubGeoSchema) {
                        JsonElement element = adapterUserScrubGeoSchema.toJsonTree((UserScrubGeoSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserProfileModificationComplianceSchema`
                    if (value.getActualInstance() instanceof UserProfileModificationComplianceSchema) {
                        JsonElement element = adapterUserProfileModificationComplianceSchema.toJsonTree((UserProfileModificationComplianceSchema)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema");
                }

                @Override
                public UserComplianceData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UserProtectComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserProtectComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserProtectComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserProtectComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserProtectComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserProtectComplianceSchema'", e);
                    }
                    // deserialize UserUnprotectComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUnprotectComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUnprotectComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUnprotectComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUnprotectComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUnprotectComplianceSchema'", e);
                    }
                    // deserialize UserDeleteComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserDeleteComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserDeleteComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserDeleteComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserDeleteComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserDeleteComplianceSchema'", e);
                    }
                    // deserialize UserUndeleteComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUndeleteComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUndeleteComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUndeleteComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUndeleteComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUndeleteComplianceSchema'", e);
                    }
                    // deserialize UserSuspendComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserSuspendComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserSuspendComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserSuspendComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserSuspendComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserSuspendComplianceSchema'", e);
                    }
                    // deserialize UserUnsuspendComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUnsuspendComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUnsuspendComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUnsuspendComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUnsuspendComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUnsuspendComplianceSchema'", e);
                    }
                    // deserialize UserWithheldComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserWithheldComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserWithheldComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserWithheldComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserWithheldComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserWithheldComplianceSchema'", e);
                    }
                    // deserialize UserScrubGeoSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserScrubGeoSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserScrubGeoSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserScrubGeoSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserScrubGeoSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserScrubGeoSchema'", e);
                    }
                    // deserialize UserProfileModificationComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserProfileModificationComplianceSchema.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserProfileModificationComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserProfileModificationComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserProfileModificationComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserProfileModificationComplianceSchema'", e);
                    }

                    if (match == 1) {
                        UserComplianceData ret = new UserComplianceData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UserComplianceData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UserComplianceData() {
        super("oneOf", Boolean.FALSE);
    }

    public UserComplianceData(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("UserProtectComplianceSchema", UserProtectComplianceSchema.class);
        schemas.put("UserUnprotectComplianceSchema", UserUnprotectComplianceSchema.class);
        schemas.put("UserDeleteComplianceSchema", UserDeleteComplianceSchema.class);
        schemas.put("UserUndeleteComplianceSchema", UserUndeleteComplianceSchema.class);
        schemas.put("UserSuspendComplianceSchema", UserSuspendComplianceSchema.class);
        schemas.put("UserUnsuspendComplianceSchema", UserUnsuspendComplianceSchema.class);
        schemas.put("UserWithheldComplianceSchema", UserWithheldComplianceSchema.class);
        schemas.put("UserScrubGeoSchema", UserScrubGeoSchema.class);
        schemas.put("UserProfileModificationComplianceSchema", UserProfileModificationComplianceSchema.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UserComplianceData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof UserProtectComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUnprotectComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserDeleteComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUndeleteComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserSuspendComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUnsuspendComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserWithheldComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserScrubGeoSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserProfileModificationComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema");
    }

    /**
     * Get the actual instance, which can be the following:
     * UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema
     *
     * @return The actual instance (UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserProtectComplianceSchema`. If the actual instance is not `UserProtectComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserProtectComplianceSchema`
     * @throws ClassCastException if the instance is not `UserProtectComplianceSchema`
     */
    public UserProtectComplianceSchema getUserProtectComplianceSchema() throws ClassCastException {
        return (UserProtectComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUnprotectComplianceSchema`. If the actual instance is not `UserUnprotectComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUnprotectComplianceSchema`
     * @throws ClassCastException if the instance is not `UserUnprotectComplianceSchema`
     */
    public UserUnprotectComplianceSchema getUserUnprotectComplianceSchema() throws ClassCastException {
        return (UserUnprotectComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserDeleteComplianceSchema`. If the actual instance is not `UserDeleteComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDeleteComplianceSchema`
     * @throws ClassCastException if the instance is not `UserDeleteComplianceSchema`
     */
    public UserDeleteComplianceSchema getUserDeleteComplianceSchema() throws ClassCastException {
        return (UserDeleteComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUndeleteComplianceSchema`. If the actual instance is not `UserUndeleteComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUndeleteComplianceSchema`
     * @throws ClassCastException if the instance is not `UserUndeleteComplianceSchema`
     */
    public UserUndeleteComplianceSchema getUserUndeleteComplianceSchema() throws ClassCastException {
        return (UserUndeleteComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserSuspendComplianceSchema`. If the actual instance is not `UserSuspendComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserSuspendComplianceSchema`
     * @throws ClassCastException if the instance is not `UserSuspendComplianceSchema`
     */
    public UserSuspendComplianceSchema getUserSuspendComplianceSchema() throws ClassCastException {
        return (UserSuspendComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUnsuspendComplianceSchema`. If the actual instance is not `UserUnsuspendComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUnsuspendComplianceSchema`
     * @throws ClassCastException if the instance is not `UserUnsuspendComplianceSchema`
     */
    public UserUnsuspendComplianceSchema getUserUnsuspendComplianceSchema() throws ClassCastException {
        return (UserUnsuspendComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserWithheldComplianceSchema`. If the actual instance is not `UserWithheldComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserWithheldComplianceSchema`
     * @throws ClassCastException if the instance is not `UserWithheldComplianceSchema`
     */
    public UserWithheldComplianceSchema getUserWithheldComplianceSchema() throws ClassCastException {
        return (UserWithheldComplianceSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserScrubGeoSchema`. If the actual instance is not `UserScrubGeoSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserScrubGeoSchema`
     * @throws ClassCastException if the instance is not `UserScrubGeoSchema`
     */
    public UserScrubGeoSchema getUserScrubGeoSchema() throws ClassCastException {
        return (UserScrubGeoSchema)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserProfileModificationComplianceSchema`. If the actual instance is not `UserProfileModificationComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserProfileModificationComplianceSchema`
     * @throws ClassCastException if the instance is not `UserProfileModificationComplianceSchema`
     */
    public UserProfileModificationComplianceSchema getUserProfileModificationComplianceSchema() throws ClassCastException {
        return (UserProfileModificationComplianceSchema)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UserComplianceData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with UserProtectComplianceSchema
        try {
            UserProtectComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserProtectComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUnprotectComplianceSchema
        try {
            UserUnprotectComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUnprotectComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserDeleteComplianceSchema
        try {
            UserDeleteComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserDeleteComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUndeleteComplianceSchema
        try {
            UserUndeleteComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUndeleteComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserSuspendComplianceSchema
        try {
            UserSuspendComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserSuspendComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUnsuspendComplianceSchema
        try {
            UserUnsuspendComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUnsuspendComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserWithheldComplianceSchema
        try {
            UserWithheldComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserWithheldComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserScrubGeoSchema
        try {
            UserScrubGeoSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserScrubGeoSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserProfileModificationComplianceSchema
        try {
            UserProfileModificationComplianceSchema.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserProfileModificationComplianceSchema failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UserComplianceData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UserComplianceData
     * @throws IOException if the JSON string is invalid with respect to UserComplianceData
     */
    public static UserComplianceData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UserComplianceData.class);
    }

    /**
     * Convert an instance of UserComplianceData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

