/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Engagement metrics for the Tweet at the time of the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:49.009664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TweetPublicMetrics {
  public static final String SERIALIZED_NAME_IMPRESSION_COUNT = "impression_count";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_COUNT)
  private Integer impressionCount;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "like_count";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  public static final String SERIALIZED_NAME_QUOTE_COUNT = "quote_count";
  @SerializedName(SERIALIZED_NAME_QUOTE_COUNT)
  private Integer quoteCount;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_RETWEET_COUNT = "retweet_count";
  @SerializedName(SERIALIZED_NAME_RETWEET_COUNT)
  private Integer retweetCount;

  public TweetPublicMetrics() {
  }

  public TweetPublicMetrics impressionCount(Integer impressionCount) {
    this.impressionCount = impressionCount;
    return this;
  }

  /**
   * Number of times this Tweet has been viewed.
   * @return impressionCount
   */
  @javax.annotation.Nonnull
  public Integer getImpressionCount() {
    return impressionCount;
  }

  public void setImpressionCount(Integer impressionCount) {
    this.impressionCount = impressionCount;
  }


  public TweetPublicMetrics likeCount(Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * Number of times this Tweet has been liked.
   * @return likeCount
   */
  @javax.annotation.Nonnull
  public Integer getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(Integer likeCount) {
    this.likeCount = likeCount;
  }


  public TweetPublicMetrics quoteCount(Integer quoteCount) {
    this.quoteCount = quoteCount;
    return this;
  }

  /**
   * Number of times this Tweet has been quoted.
   * @return quoteCount
   */
  @javax.annotation.Nullable
  public Integer getQuoteCount() {
    return quoteCount;
  }

  public void setQuoteCount(Integer quoteCount) {
    this.quoteCount = quoteCount;
  }


  public TweetPublicMetrics replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Number of times this Tweet has been replied to.
   * @return replyCount
   */
  @javax.annotation.Nonnull
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public TweetPublicMetrics retweetCount(Integer retweetCount) {
    this.retweetCount = retweetCount;
    return this;
  }

  /**
   * Number of times this Tweet has been Retweeted.
   * @return retweetCount
   */
  @javax.annotation.Nonnull
  public Integer getRetweetCount() {
    return retweetCount;
  }

  public void setRetweetCount(Integer retweetCount) {
    this.retweetCount = retweetCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TweetPublicMetrics tweetPublicMetrics = (TweetPublicMetrics) o;
    return Objects.equals(this.impressionCount, tweetPublicMetrics.impressionCount) &&
        Objects.equals(this.likeCount, tweetPublicMetrics.likeCount) &&
        Objects.equals(this.quoteCount, tweetPublicMetrics.quoteCount) &&
        Objects.equals(this.replyCount, tweetPublicMetrics.replyCount) &&
        Objects.equals(this.retweetCount, tweetPublicMetrics.retweetCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(impressionCount, likeCount, quoteCount, replyCount, retweetCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TweetPublicMetrics {\n");
    sb.append("    impressionCount: ").append(toIndentedString(impressionCount)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    quoteCount: ").append(toIndentedString(quoteCount)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    retweetCount: ").append(toIndentedString(retweetCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("impression_count");
    openapiFields.add("like_count");
    openapiFields.add("quote_count");
    openapiFields.add("reply_count");
    openapiFields.add("retweet_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("impression_count");
    openapiRequiredFields.add("like_count");
    openapiRequiredFields.add("reply_count");
    openapiRequiredFields.add("retweet_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TweetPublicMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TweetPublicMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TweetPublicMetrics is not found in the empty JSON string", TweetPublicMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TweetPublicMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TweetPublicMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TweetPublicMetrics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TweetPublicMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TweetPublicMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TweetPublicMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TweetPublicMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<TweetPublicMetrics>() {
           @Override
           public void write(JsonWriter out, TweetPublicMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TweetPublicMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TweetPublicMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TweetPublicMetrics
   * @throws IOException if the JSON string is invalid with respect to TweetPublicMetrics
   */
  public static TweetPublicMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TweetPublicMetrics.class);
  }

  /**
   * Convert an instance of TweetPublicMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

