/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserEntities;
import org.openapitools.client.model.UserPublicMetrics;
import org.openapitools.client.model.UserWithheld;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Twitter User object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:49.009664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private UserEntities entities;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PINNED_TWEET_ID = "pinned_tweet_id";
  @SerializedName(SERIALIZED_NAME_PINNED_TWEET_ID)
  private String pinnedTweetId;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_URL = "profile_image_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_URL)
  private URI profileImageUrl;

  public static final String SERIALIZED_NAME_PROTECTED = "protected";
  @SerializedName(SERIALIZED_NAME_PROTECTED)
  private Boolean _protected;

  public static final String SERIALIZED_NAME_PUBLIC_METRICS = "public_metrics";
  @SerializedName(SERIALIZED_NAME_PUBLIC_METRICS)
  private UserPublicMetrics publicMetrics;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_VERIFIED_TYPE = "verified_type";
  @SerializedName(SERIALIZED_NAME_VERIFIED_TYPE)
  private String verifiedType;

  public static final String SERIALIZED_NAME_WITHHELD = "withheld";
  @SerializedName(SERIALIZED_NAME_WITHHELD)
  private UserWithheld withheld;

  public User() {
  }

  public User createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation time of this User.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public User description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The text of this User&#39;s profile description (also known as bio), if the User provided one.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public User entities(UserEntities entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Get entities
   * @return entities
   */
  @javax.annotation.Nullable
  public UserEntities getEntities() {
    return entities;
  }

  public void setEntities(UserEntities entities) {
    this.entities = entities;
  }


  public User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public User location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location specified in the User&#39;s profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The friendly name of this User, as shown on their profile.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User pinnedTweetId(String pinnedTweetId) {
    this.pinnedTweetId = pinnedTweetId;
    return this;
  }

  /**
   * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
   * @return pinnedTweetId
   */
  @javax.annotation.Nullable
  public String getPinnedTweetId() {
    return pinnedTweetId;
  }

  public void setPinnedTweetId(String pinnedTweetId) {
    this.pinnedTweetId = pinnedTweetId;
  }


  public User profileImageUrl(URI profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
    return this;
  }

  /**
   * The URL to the profile image for this User.
   * @return profileImageUrl
   */
  @javax.annotation.Nullable
  public URI getProfileImageUrl() {
    return profileImageUrl;
  }

  public void setProfileImageUrl(URI profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
  }


  public User _protected(Boolean _protected) {
    this._protected = _protected;
    return this;
  }

  /**
   * Indicates if this User has chosen to protect their Tweets (in other words, if this User&#39;s Tweets are private).
   * @return _protected
   */
  @javax.annotation.Nullable
  public Boolean getProtected() {
    return _protected;
  }

  public void setProtected(Boolean _protected) {
    this._protected = _protected;
  }


  public User publicMetrics(UserPublicMetrics publicMetrics) {
    this.publicMetrics = publicMetrics;
    return this;
  }

  /**
   * Get publicMetrics
   * @return publicMetrics
   */
  @javax.annotation.Nullable
  public UserPublicMetrics getPublicMetrics() {
    return publicMetrics;
  }

  public void setPublicMetrics(UserPublicMetrics publicMetrics) {
    this.publicMetrics = publicMetrics;
  }


  public User url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL specified in the User&#39;s profile.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public User username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The Twitter handle (screen name) of this user.
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public User verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Indicate if this User is a verified Twitter User.
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public User verifiedType(String verifiedType) {
    this.verifiedType = verifiedType;
    return this;
  }

  /**
   * The Twitter Blue verified type of the user, eg: blue, government, business or none.
   * @return verifiedType
   */
  @javax.annotation.Nullable
  public String getVerifiedType() {
    return verifiedType;
  }

  public void setVerifiedType(String verifiedType) {
    this.verifiedType = verifiedType;
  }


  public User withheld(UserWithheld withheld) {
    this.withheld = withheld;
    return this;
  }

  /**
   * Get withheld
   * @return withheld
   */
  @javax.annotation.Nullable
  public UserWithheld getWithheld() {
    return withheld;
  }

  public void setWithheld(UserWithheld withheld) {
    this.withheld = withheld;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.description, user.description) &&
        Objects.equals(this.entities, user.entities) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.location, user.location) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.pinnedTweetId, user.pinnedTweetId) &&
        Objects.equals(this.profileImageUrl, user.profileImageUrl) &&
        Objects.equals(this._protected, user._protected) &&
        Objects.equals(this.publicMetrics, user.publicMetrics) &&
        Objects.equals(this.url, user.url) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.verified, user.verified) &&
        Objects.equals(this.verifiedType, user.verifiedType) &&
        Objects.equals(this.withheld, user.withheld);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, entities, id, location, name, pinnedTweetId, profileImageUrl, _protected, publicMetrics, url, username, verified, verifiedType, withheld);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pinnedTweetId: ").append(toIndentedString(pinnedTweetId)).append("\n");
    sb.append("    profileImageUrl: ").append(toIndentedString(profileImageUrl)).append("\n");
    sb.append("    _protected: ").append(toIndentedString(_protected)).append("\n");
    sb.append("    publicMetrics: ").append(toIndentedString(publicMetrics)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    verifiedType: ").append(toIndentedString(verifiedType)).append("\n");
    sb.append("    withheld: ").append(toIndentedString(withheld)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("entities");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("pinned_tweet_id");
    openapiFields.add("profile_image_url");
    openapiFields.add("protected");
    openapiFields.add("public_metrics");
    openapiFields.add("url");
    openapiFields.add("username");
    openapiFields.add("verified");
    openapiFields.add("verified_type");
    openapiFields.add("withheld");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `entities`
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        UserEntities.validateJsonElement(jsonObj.get("entities"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pinned_tweet_id") != null && !jsonObj.get("pinned_tweet_id").isJsonNull()) && !jsonObj.get("pinned_tweet_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_tweet_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinned_tweet_id").toString()));
      }
      if ((jsonObj.get("profile_image_url") != null && !jsonObj.get("profile_image_url").isJsonNull()) && !jsonObj.get("profile_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image_url").toString()));
      }
      // validate the optional field `public_metrics`
      if (jsonObj.get("public_metrics") != null && !jsonObj.get("public_metrics").isJsonNull()) {
        UserPublicMetrics.validateJsonElement(jsonObj.get("public_metrics"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("verified_type") != null && !jsonObj.get("verified_type").isJsonNull()) && !jsonObj.get("verified_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verified_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verified_type").toString()));
      }
      // validate the optional field `withheld`
      if (jsonObj.get("withheld") != null && !jsonObj.get("withheld").isJsonNull()) {
        UserWithheld.validateJsonElement(jsonObj.get("withheld"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

