# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_takedown_compliance_schema import TweetTakedownComplianceSchema
from openapi_server import util


class TweetWithheldComplianceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, withheld: TweetTakedownComplianceSchema=None):
        """TweetWithheldComplianceSchema - a model defined in OpenAPI

        :param withheld: The withheld of this TweetWithheldComplianceSchema.
        """
        self.openapi_types = {
            'withheld': TweetTakedownComplianceSchema
        }

        self.attribute_map = {
            'withheld': 'withheld'
        }

        self._withheld = withheld

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetWithheldComplianceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetWithheldComplianceSchema of this TweetWithheldComplianceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def withheld(self):
        """Gets the withheld of this TweetWithheldComplianceSchema.


        :return: The withheld of this TweetWithheldComplianceSchema.
        :rtype: TweetTakedownComplianceSchema
        """
        return self._withheld

    @withheld.setter
    def withheld(self, withheld):
        """Sets the withheld of this TweetWithheldComplianceSchema.


        :param withheld: The withheld of this TweetWithheldComplianceSchema.
        :type withheld: TweetTakedownComplianceSchema
        """
        if withheld is None:
            raise ValueError("Invalid value for `withheld`, must not be `None`")

        self._withheld = withheld
