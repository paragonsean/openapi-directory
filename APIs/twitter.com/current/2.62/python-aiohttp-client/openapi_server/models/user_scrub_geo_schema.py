# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_scrub_geo_object_schema import UserScrubGeoObjectSchema
from openapi_server import util


class UserScrubGeoSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scrub_geo: UserScrubGeoObjectSchema=None):
        """UserScrubGeoSchema - a model defined in OpenAPI

        :param scrub_geo: The scrub_geo of this UserScrubGeoSchema.
        """
        self.openapi_types = {
            'scrub_geo': UserScrubGeoObjectSchema
        }

        self.attribute_map = {
            'scrub_geo': 'scrub_geo'
        }

        self._scrub_geo = scrub_geo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserScrubGeoSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserScrubGeoSchema of this UserScrubGeoSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scrub_geo(self):
        """Gets the scrub_geo of this UserScrubGeoSchema.


        :return: The scrub_geo of this UserScrubGeoSchema.
        :rtype: UserScrubGeoObjectSchema
        """
        return self._scrub_geo

    @scrub_geo.setter
    def scrub_geo(self, scrub_geo):
        """Sets the scrub_geo of this UserScrubGeoSchema.


        :param scrub_geo: The scrub_geo of this UserScrubGeoSchema.
        :type scrub_geo: UserScrubGeoObjectSchema
        """
        if scrub_geo is None:
            raise ValueError("Invalid value for `scrub_geo`, must not be `None`")

        self._scrub_geo = scrub_geo
