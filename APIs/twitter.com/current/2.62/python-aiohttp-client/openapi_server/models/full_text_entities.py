# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cashtag_entity import CashtagEntity
from openapi_server.models.full_text_entities_annotations_inner import FullTextEntitiesAnnotationsInner
from openapi_server.models.hashtag_entity import HashtagEntity
from openapi_server.models.mention_entity import MentionEntity
from openapi_server.models.url_entity import UrlEntity
from openapi_server import util


class FullTextEntities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: List[FullTextEntitiesAnnotationsInner]=None, cashtags: List[CashtagEntity]=None, hashtags: List[HashtagEntity]=None, mentions: List[MentionEntity]=None, urls: List[UrlEntity]=None):
        """FullTextEntities - a model defined in OpenAPI

        :param annotations: The annotations of this FullTextEntities.
        :param cashtags: The cashtags of this FullTextEntities.
        :param hashtags: The hashtags of this FullTextEntities.
        :param mentions: The mentions of this FullTextEntities.
        :param urls: The urls of this FullTextEntities.
        """
        self.openapi_types = {
            'annotations': List[FullTextEntitiesAnnotationsInner],
            'cashtags': List[CashtagEntity],
            'hashtags': List[HashtagEntity],
            'mentions': List[MentionEntity],
            'urls': List[UrlEntity]
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'cashtags': 'cashtags',
            'hashtags': 'hashtags',
            'mentions': 'mentions',
            'urls': 'urls'
        }

        self._annotations = annotations
        self._cashtags = cashtags
        self._hashtags = hashtags
        self._mentions = mentions
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullTextEntities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullTextEntities of this FullTextEntities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this FullTextEntities.


        :return: The annotations of this FullTextEntities.
        :rtype: List[FullTextEntitiesAnnotationsInner]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this FullTextEntities.


        :param annotations: The annotations of this FullTextEntities.
        :type annotations: List[FullTextEntitiesAnnotationsInner]
        """
        if annotations is not None and len(annotations) < 1:
            raise ValueError("Invalid value for `annotations`, number of items must be greater than or equal to `1`")

        self._annotations = annotations

    @property
    def cashtags(self):
        """Gets the cashtags of this FullTextEntities.


        :return: The cashtags of this FullTextEntities.
        :rtype: List[CashtagEntity]
        """
        return self._cashtags

    @cashtags.setter
    def cashtags(self, cashtags):
        """Sets the cashtags of this FullTextEntities.


        :param cashtags: The cashtags of this FullTextEntities.
        :type cashtags: List[CashtagEntity]
        """
        if cashtags is not None and len(cashtags) < 1:
            raise ValueError("Invalid value for `cashtags`, number of items must be greater than or equal to `1`")

        self._cashtags = cashtags

    @property
    def hashtags(self):
        """Gets the hashtags of this FullTextEntities.


        :return: The hashtags of this FullTextEntities.
        :rtype: List[HashtagEntity]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags):
        """Sets the hashtags of this FullTextEntities.


        :param hashtags: The hashtags of this FullTextEntities.
        :type hashtags: List[HashtagEntity]
        """
        if hashtags is not None and len(hashtags) < 1:
            raise ValueError("Invalid value for `hashtags`, number of items must be greater than or equal to `1`")

        self._hashtags = hashtags

    @property
    def mentions(self):
        """Gets the mentions of this FullTextEntities.


        :return: The mentions of this FullTextEntities.
        :rtype: List[MentionEntity]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this FullTextEntities.


        :param mentions: The mentions of this FullTextEntities.
        :type mentions: List[MentionEntity]
        """
        if mentions is not None and len(mentions) < 1:
            raise ValueError("Invalid value for `mentions`, number of items must be greater than or equal to `1`")

        self._mentions = mentions

    @property
    def urls(self):
        """Gets the urls of this FullTextEntities.


        :return: The urls of this FullTextEntities.
        :rtype: List[UrlEntity]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this FullTextEntities.


        :param urls: The urls of this FullTextEntities.
        :type urls: List[UrlEntity]
        """
        if urls is not None and len(urls) < 1:
            raise ValueError("Invalid value for `urls`, number of items must be greater than or equal to `1`")

        self._urls = urls
