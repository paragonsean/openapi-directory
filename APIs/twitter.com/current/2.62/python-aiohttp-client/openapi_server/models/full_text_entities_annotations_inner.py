# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FullTextEntitiesAnnotationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: int=None, start: int=None, normalized_text: str=None, probability: float=None, type: str=None):
        """FullTextEntitiesAnnotationsInner - a model defined in OpenAPI

        :param end: The end of this FullTextEntitiesAnnotationsInner.
        :param start: The start of this FullTextEntitiesAnnotationsInner.
        :param normalized_text: The normalized_text of this FullTextEntitiesAnnotationsInner.
        :param probability: The probability of this FullTextEntitiesAnnotationsInner.
        :param type: The type of this FullTextEntitiesAnnotationsInner.
        """
        self.openapi_types = {
            'end': int,
            'start': int,
            'normalized_text': str,
            'probability': float,
            'type': str
        }

        self.attribute_map = {
            'end': 'end',
            'start': 'start',
            'normalized_text': 'normalized_text',
            'probability': 'probability',
            'type': 'type'
        }

        self._end = end
        self._start = start
        self._normalized_text = normalized_text
        self._probability = probability
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullTextEntitiesAnnotationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullTextEntities_annotations_inner of this FullTextEntitiesAnnotationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this FullTextEntitiesAnnotationsInner.

        Index (zero-based) at which position this entity ends.  The index is inclusive.

        :return: The end of this FullTextEntitiesAnnotationsInner.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this FullTextEntitiesAnnotationsInner.

        Index (zero-based) at which position this entity ends.  The index is inclusive.

        :param end: The end of this FullTextEntitiesAnnotationsInner.
        :type end: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")
        if end is not None and end < 0:
            raise ValueError("Invalid value for `end`, must be a value greater than or equal to `0`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this FullTextEntitiesAnnotationsInner.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :return: The start of this FullTextEntitiesAnnotationsInner.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this FullTextEntitiesAnnotationsInner.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :param start: The start of this FullTextEntitiesAnnotationsInner.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")
        if start is not None and start < 0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")

        self._start = start

    @property
    def normalized_text(self):
        """Gets the normalized_text of this FullTextEntitiesAnnotationsInner.

        Text used to determine annotation.

        :return: The normalized_text of this FullTextEntitiesAnnotationsInner.
        :rtype: str
        """
        return self._normalized_text

    @normalized_text.setter
    def normalized_text(self, normalized_text):
        """Sets the normalized_text of this FullTextEntitiesAnnotationsInner.

        Text used to determine annotation.

        :param normalized_text: The normalized_text of this FullTextEntitiesAnnotationsInner.
        :type normalized_text: str
        """

        self._normalized_text = normalized_text

    @property
    def probability(self):
        """Gets the probability of this FullTextEntitiesAnnotationsInner.

        Confidence factor for annotation type.

        :return: The probability of this FullTextEntitiesAnnotationsInner.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this FullTextEntitiesAnnotationsInner.

        Confidence factor for annotation type.

        :param probability: The probability of this FullTextEntitiesAnnotationsInner.
        :type probability: float
        """
        if probability is not None and probability > 1:
            raise ValueError("Invalid value for `probability`, must be a value less than or equal to `1`")
        if probability is not None and probability < 0:
            raise ValueError("Invalid value for `probability`, must be a value greater than or equal to `0`")

        self._probability = probability

    @property
    def type(self):
        """Gets the type of this FullTextEntitiesAnnotationsInner.

        Annotation type.

        :return: The type of this FullTextEntitiesAnnotationsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FullTextEntitiesAnnotationsInner.

        Annotation type.

        :param type: The type of this FullTextEntitiesAnnotationsInner.
        :type type: str
        """

        self._type = type
