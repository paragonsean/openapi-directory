# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_compliance_schema import TweetComplianceSchema
from openapi_server import util


class TweetDropComplianceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drop: TweetComplianceSchema=None):
        """TweetDropComplianceSchema - a model defined in OpenAPI

        :param drop: The drop of this TweetDropComplianceSchema.
        """
        self.openapi_types = {
            'drop': TweetComplianceSchema
        }

        self.attribute_map = {
            'drop': 'drop'
        }

        self._drop = drop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetDropComplianceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetDropComplianceSchema of this TweetDropComplianceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drop(self):
        """Gets the drop of this TweetDropComplianceSchema.


        :return: The drop of this TweetDropComplianceSchema.
        :rtype: TweetComplianceSchema
        """
        return self._drop

    @drop.setter
    def drop(self, drop):
        """Sets the drop of this TweetDropComplianceSchema.


        :param drop: The drop of this TweetDropComplianceSchema.
        :type drop: TweetComplianceSchema
        """
        if drop is None:
            raise ValueError("Invalid value for `drop`, must not be `None`")

        self._drop = drop
