# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HashtagEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: int=None, start: int=None, tag: str=None):
        """HashtagEntity - a model defined in OpenAPI

        :param end: The end of this HashtagEntity.
        :param start: The start of this HashtagEntity.
        :param tag: The tag of this HashtagEntity.
        """
        self.openapi_types = {
            'end': int,
            'start': int,
            'tag': str
        }

        self.attribute_map = {
            'end': 'end',
            'start': 'start',
            'tag': 'tag'
        }

        self._end = end
        self._start = start
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HashtagEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HashtagEntity of this HashtagEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this HashtagEntity.

        Index (zero-based) at which position this entity ends.  The index is exclusive.

        :return: The end of this HashtagEntity.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this HashtagEntity.

        Index (zero-based) at which position this entity ends.  The index is exclusive.

        :param end: The end of this HashtagEntity.
        :type end: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")
        if end is not None and end < 0:
            raise ValueError("Invalid value for `end`, must be a value greater than or equal to `0`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this HashtagEntity.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :return: The start of this HashtagEntity.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this HashtagEntity.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :param start: The start of this HashtagEntity.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")
        if start is not None and start < 0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")

        self._start = start

    @property
    def tag(self):
        """Gets the tag of this HashtagEntity.

        The text of the Hashtag.

        :return: The tag of this HashtagEntity.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this HashtagEntity.

        The text of the Hashtag.

        :param tag: The tag of this HashtagEntity.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag
