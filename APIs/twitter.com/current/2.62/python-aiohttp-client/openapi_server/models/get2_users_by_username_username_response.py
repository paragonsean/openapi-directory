# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expansions import Expansions
from openapi_server.models.problem import Problem
from openapi_server.models.user import User
from openapi_server import util


class Get2UsersByUsernameUsernameResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: User=None, errors: List[Problem]=None, includes: Expansions=None):
        """Get2UsersByUsernameUsernameResponse - a model defined in OpenAPI

        :param data: The data of this Get2UsersByUsernameUsernameResponse.
        :param errors: The errors of this Get2UsersByUsernameUsernameResponse.
        :param includes: The includes of this Get2UsersByUsernameUsernameResponse.
        """
        self.openapi_types = {
            'data': User,
            'errors': List[Problem],
            'includes': Expansions
        }

        self.attribute_map = {
            'data': 'data',
            'errors': 'errors',
            'includes': 'includes'
        }

        self._data = data
        self._errors = errors
        self._includes = includes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Get2UsersByUsernameUsernameResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get2UsersByUsernameUsernameResponse of this Get2UsersByUsernameUsernameResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Get2UsersByUsernameUsernameResponse.


        :return: The data of this Get2UsersByUsernameUsernameResponse.
        :rtype: User
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Get2UsersByUsernameUsernameResponse.


        :param data: The data of this Get2UsersByUsernameUsernameResponse.
        :type data: User
        """

        self._data = data

    @property
    def errors(self):
        """Gets the errors of this Get2UsersByUsernameUsernameResponse.


        :return: The errors of this Get2UsersByUsernameUsernameResponse.
        :rtype: List[Problem]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Get2UsersByUsernameUsernameResponse.


        :param errors: The errors of this Get2UsersByUsernameUsernameResponse.
        :type errors: List[Problem]
        """
        if errors is not None and len(errors) < 1:
            raise ValueError("Invalid value for `errors`, number of items must be greater than or equal to `1`")

        self._errors = errors

    @property
    def includes(self):
        """Gets the includes of this Get2UsersByUsernameUsernameResponse.


        :return: The includes of this Get2UsersByUsernameUsernameResponse.
        :rtype: Expansions
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this Get2UsersByUsernameUsernameResponse.


        :param includes: The includes of this Get2UsersByUsernameUsernameResponse.
        :type includes: Expansions
        """

        self._includes = includes
