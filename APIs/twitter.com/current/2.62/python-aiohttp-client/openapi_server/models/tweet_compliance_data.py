# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_compliance_schema import TweetComplianceSchema
from openapi_server.models.tweet_delete_compliance_schema import TweetDeleteComplianceSchema
from openapi_server.models.tweet_drop_compliance_schema import TweetDropComplianceSchema
from openapi_server.models.tweet_edit_compliance_object_schema import TweetEditComplianceObjectSchema
from openapi_server.models.tweet_edit_compliance_schema import TweetEditComplianceSchema
from openapi_server.models.tweet_takedown_compliance_schema import TweetTakedownComplianceSchema
from openapi_server.models.tweet_undrop_compliance_schema import TweetUndropComplianceSchema
from openapi_server.models.tweet_withheld_compliance_schema import TweetWithheldComplianceSchema
from openapi_server import util


class TweetComplianceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: TweetComplianceSchema=None, withheld: TweetTakedownComplianceSchema=None, drop: TweetComplianceSchema=None, undrop: TweetComplianceSchema=None, tweet_edit: TweetEditComplianceObjectSchema=None):
        """TweetComplianceData - a model defined in OpenAPI

        :param delete: The delete of this TweetComplianceData.
        :param withheld: The withheld of this TweetComplianceData.
        :param drop: The drop of this TweetComplianceData.
        :param undrop: The undrop of this TweetComplianceData.
        :param tweet_edit: The tweet_edit of this TweetComplianceData.
        """
        self.openapi_types = {
            'delete': TweetComplianceSchema,
            'withheld': TweetTakedownComplianceSchema,
            'drop': TweetComplianceSchema,
            'undrop': TweetComplianceSchema,
            'tweet_edit': TweetEditComplianceObjectSchema
        }

        self.attribute_map = {
            'delete': 'delete',
            'withheld': 'withheld',
            'drop': 'drop',
            'undrop': 'undrop',
            'tweet_edit': 'tweet_edit'
        }

        self._delete = delete
        self._withheld = withheld
        self._drop = drop
        self._undrop = undrop
        self._tweet_edit = tweet_edit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetComplianceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetComplianceData of this TweetComplianceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this TweetComplianceData.


        :return: The delete of this TweetComplianceData.
        :rtype: TweetComplianceSchema
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this TweetComplianceData.


        :param delete: The delete of this TweetComplianceData.
        :type delete: TweetComplianceSchema
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")

        self._delete = delete

    @property
    def withheld(self):
        """Gets the withheld of this TweetComplianceData.


        :return: The withheld of this TweetComplianceData.
        :rtype: TweetTakedownComplianceSchema
        """
        return self._withheld

    @withheld.setter
    def withheld(self, withheld):
        """Sets the withheld of this TweetComplianceData.


        :param withheld: The withheld of this TweetComplianceData.
        :type withheld: TweetTakedownComplianceSchema
        """
        if withheld is None:
            raise ValueError("Invalid value for `withheld`, must not be `None`")

        self._withheld = withheld

    @property
    def drop(self):
        """Gets the drop of this TweetComplianceData.


        :return: The drop of this TweetComplianceData.
        :rtype: TweetComplianceSchema
        """
        return self._drop

    @drop.setter
    def drop(self, drop):
        """Sets the drop of this TweetComplianceData.


        :param drop: The drop of this TweetComplianceData.
        :type drop: TweetComplianceSchema
        """
        if drop is None:
            raise ValueError("Invalid value for `drop`, must not be `None`")

        self._drop = drop

    @property
    def undrop(self):
        """Gets the undrop of this TweetComplianceData.


        :return: The undrop of this TweetComplianceData.
        :rtype: TweetComplianceSchema
        """
        return self._undrop

    @undrop.setter
    def undrop(self, undrop):
        """Sets the undrop of this TweetComplianceData.


        :param undrop: The undrop of this TweetComplianceData.
        :type undrop: TweetComplianceSchema
        """
        if undrop is None:
            raise ValueError("Invalid value for `undrop`, must not be `None`")

        self._undrop = undrop

    @property
    def tweet_edit(self):
        """Gets the tweet_edit of this TweetComplianceData.


        :return: The tweet_edit of this TweetComplianceData.
        :rtype: TweetEditComplianceObjectSchema
        """
        return self._tweet_edit

    @tweet_edit.setter
    def tweet_edit(self, tweet_edit):
        """Sets the tweet_edit of this TweetComplianceData.


        :param tweet_edit: The tweet_edit of this TweetComplianceData.
        :type tweet_edit: TweetEditComplianceObjectSchema
        """
        if tweet_edit is None:
            raise ValueError("Invalid value for `tweet_edit`, must not be `None`")

        self._tweet_edit = tweet_edit
