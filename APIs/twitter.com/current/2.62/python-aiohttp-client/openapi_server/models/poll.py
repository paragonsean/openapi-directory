# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poll_option import PollOption
import re
from openapi_server import util


class Poll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_minutes: int=None, end_datetime: datetime=None, id: str=None, options: List[PollOption]=None, voting_status: str=None):
        """Poll - a model defined in OpenAPI

        :param duration_minutes: The duration_minutes of this Poll.
        :param end_datetime: The end_datetime of this Poll.
        :param id: The id of this Poll.
        :param options: The options of this Poll.
        :param voting_status: The voting_status of this Poll.
        """
        self.openapi_types = {
            'duration_minutes': int,
            'end_datetime': datetime,
            'id': str,
            'options': List[PollOption],
            'voting_status': str
        }

        self.attribute_map = {
            'duration_minutes': 'duration_minutes',
            'end_datetime': 'end_datetime',
            'id': 'id',
            'options': 'options',
            'voting_status': 'voting_status'
        }

        self._duration_minutes = duration_minutes
        self._end_datetime = end_datetime
        self._id = id
        self._options = options
        self._voting_status = voting_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Poll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Poll of this Poll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this Poll.


        :return: The duration_minutes of this Poll.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this Poll.


        :param duration_minutes: The duration_minutes of this Poll.
        :type duration_minutes: int
        """
        if duration_minutes is not None and duration_minutes > 10080:
            raise ValueError("Invalid value for `duration_minutes`, must be a value less than or equal to `10080`")
        if duration_minutes is not None and duration_minutes < 5:
            raise ValueError("Invalid value for `duration_minutes`, must be a value greater than or equal to `5`")

        self._duration_minutes = duration_minutes

    @property
    def end_datetime(self):
        """Gets the end_datetime of this Poll.


        :return: The end_datetime of this Poll.
        :rtype: datetime
        """
        return self._end_datetime

    @end_datetime.setter
    def end_datetime(self, end_datetime):
        """Sets the end_datetime of this Poll.


        :param end_datetime: The end_datetime of this Poll.
        :type end_datetime: datetime
        """

        self._end_datetime = end_datetime

    @property
    def id(self):
        """Gets the id of this Poll.

        Unique identifier of this poll.

        :return: The id of this Poll.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Poll.

        Unique identifier of this poll.

        :param id: The id of this Poll.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def options(self):
        """Gets the options of this Poll.


        :return: The options of this Poll.
        :rtype: List[PollOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Poll.


        :param options: The options of this Poll.
        :type options: List[PollOption]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")
        if options is not None and len(options) > 4:
            raise ValueError("Invalid value for `options`, number of items must be less than or equal to `4`")
        if options is not None and len(options) < 2:
            raise ValueError("Invalid value for `options`, number of items must be greater than or equal to `2`")

        self._options = options

    @property
    def voting_status(self):
        """Gets the voting_status of this Poll.


        :return: The voting_status of this Poll.
        :rtype: str
        """
        return self._voting_status

    @voting_status.setter
    def voting_status(self, voting_status):
        """Sets the voting_status of this Poll.


        :param voting_status: The voting_status of this Poll.
        :type voting_status: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if voting_status not in allowed_values:
            raise ValueError(
                "Invalid value for `voting_status` ({0}), must be one of {1}"
                .format(voting_status, allowed_values)
            )

        self._voting_status = voting_status
