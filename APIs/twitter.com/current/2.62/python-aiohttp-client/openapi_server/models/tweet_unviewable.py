# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_compliance_schema_tweet import TweetComplianceSchemaTweet
from openapi_server import util


class TweetUnviewable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, event_at: datetime=None, tweet: TweetComplianceSchemaTweet=None):
        """TweetUnviewable - a model defined in OpenAPI

        :param application: The application of this TweetUnviewable.
        :param event_at: The event_at of this TweetUnviewable.
        :param tweet: The tweet of this TweetUnviewable.
        """
        self.openapi_types = {
            'application': str,
            'event_at': datetime,
            'tweet': TweetComplianceSchemaTweet
        }

        self.attribute_map = {
            'application': 'application',
            'event_at': 'event_at',
            'tweet': 'tweet'
        }

        self._application = application
        self._event_at = event_at
        self._tweet = tweet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetUnviewable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetUnviewable of this TweetUnviewable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this TweetUnviewable.

        If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.

        :return: The application of this TweetUnviewable.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this TweetUnviewable.

        If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.

        :param application: The application of this TweetUnviewable.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")

        self._application = application

    @property
    def event_at(self):
        """Gets the event_at of this TweetUnviewable.

        Event time.

        :return: The event_at of this TweetUnviewable.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this TweetUnviewable.

        Event time.

        :param event_at: The event_at of this TweetUnviewable.
        :type event_at: datetime
        """
        if event_at is None:
            raise ValueError("Invalid value for `event_at`, must not be `None`")

        self._event_at = event_at

    @property
    def tweet(self):
        """Gets the tweet of this TweetUnviewable.


        :return: The tweet of this TweetUnviewable.
        :rtype: TweetComplianceSchemaTweet
        """
        return self._tweet

    @tweet.setter
    def tweet(self, tweet):
        """Sets the tweet of this TweetUnviewable.


        :param tweet: The tweet of this TweetUnviewable.
        :type tweet: TweetComplianceSchemaTweet
        """
        if tweet is None:
            raise ValueError("Invalid value for `tweet`, must not be `None`")

        self._tweet = tweet
