# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DmEventAttachments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_ids: List[str]=None, media_keys: List[str]=None):
        """DmEventAttachments - a model defined in OpenAPI

        :param card_ids: The card_ids of this DmEventAttachments.
        :param media_keys: The media_keys of this DmEventAttachments.
        """
        self.openapi_types = {
            'card_ids': List[str],
            'media_keys': List[str]
        }

        self.attribute_map = {
            'card_ids': 'card_ids',
            'media_keys': 'media_keys'
        }

        self._card_ids = card_ids
        self._media_keys = media_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DmEventAttachments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DmEvent_attachments of this DmEventAttachments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_ids(self):
        """Gets the card_ids of this DmEventAttachments.

        A list of card IDs (if cards are attached).

        :return: The card_ids of this DmEventAttachments.
        :rtype: List[str]
        """
        return self._card_ids

    @card_ids.setter
    def card_ids(self, card_ids):
        """Sets the card_ids of this DmEventAttachments.

        A list of card IDs (if cards are attached).

        :param card_ids: The card_ids of this DmEventAttachments.
        :type card_ids: List[str]
        """
        if card_ids is not None and len(card_ids) < 1:
            raise ValueError("Invalid value for `card_ids`, number of items must be greater than or equal to `1`")

        self._card_ids = card_ids

    @property
    def media_keys(self):
        """Gets the media_keys of this DmEventAttachments.

        A list of Media Keys for each one of the media attachments (if media are attached).

        :return: The media_keys of this DmEventAttachments.
        :rtype: List[str]
        """
        return self._media_keys

    @media_keys.setter
    def media_keys(self, media_keys):
        """Sets the media_keys of this DmEventAttachments.

        A list of Media Keys for each one of the media attachments (if media are attached).

        :param media_keys: The media_keys of this DmEventAttachments.
        :type media_keys: List[str]
        """
        if media_keys is not None and len(media_keys) < 1:
            raise ValueError("Invalid value for `media_keys`, number of items must be greater than or equal to `1`")

        self._media_keys = media_keys
