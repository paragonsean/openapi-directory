# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, follower_count: int=None, id: str=None, member_count: int=None, name: str=None, owner_id: str=None, private: bool=None):
        """List - a model defined in OpenAPI

        :param created_at: The created_at of this List.
        :param description: The description of this List.
        :param follower_count: The follower_count of this List.
        :param id: The id of this List.
        :param member_count: The member_count of this List.
        :param name: The name of this List.
        :param owner_id: The owner_id of this List.
        :param private: The private of this List.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'follower_count': int,
            'id': str,
            'member_count': int,
            'name': str,
            'owner_id': str,
            'private': bool
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'follower_count': 'follower_count',
            'id': 'id',
            'member_count': 'member_count',
            'name': 'name',
            'owner_id': 'owner_id',
            'private': 'private'
        }

        self._created_at = created_at
        self._description = description
        self._follower_count = follower_count
        self._id = id
        self._member_count = member_count
        self._name = name
        self._owner_id = owner_id
        self._private = private

    @classmethod
    def from_dict(cls, dikt: dict) -> 'List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List of this List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this List.


        :return: The created_at of this List.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this List.


        :param created_at: The created_at of this List.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this List.


        :return: The description of this List.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this List.


        :param description: The description of this List.
        :type description: str
        """

        self._description = description

    @property
    def follower_count(self):
        """Gets the follower_count of this List.


        :return: The follower_count of this List.
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this List.


        :param follower_count: The follower_count of this List.
        :type follower_count: int
        """

        self._follower_count = follower_count

    @property
    def id(self):
        """Gets the id of this List.

        The unique identifier of this List.

        :return: The id of this List.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this List.

        The unique identifier of this List.

        :param id: The id of this List.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def member_count(self):
        """Gets the member_count of this List.


        :return: The member_count of this List.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this List.


        :param member_count: The member_count of this List.
        :type member_count: int
        """

        self._member_count = member_count

    @property
    def name(self):
        """Gets the name of this List.

        The name of this List.

        :return: The name of this List.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this List.

        The name of this List.

        :param name: The name of this List.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this List.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The owner_id of this List.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this List.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param owner_id: The owner_id of this List.
        :type owner_id: str
        """
        if owner_id is not None and not re.search(r'^[0-9]{1,19}$', owner_id):
            raise ValueError("Invalid value for `owner_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._owner_id = owner_id

    @property
    def private(self):
        """Gets the private of this List.


        :return: The private of this List.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this List.


        :param private: The private of this List.
        :type private: bool
        """

        self._private = private
