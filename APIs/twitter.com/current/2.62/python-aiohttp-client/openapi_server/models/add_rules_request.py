# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_no_id import RuleNoId
from openapi_server import util


class AddRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add: List[RuleNoId]=None):
        """AddRulesRequest - a model defined in OpenAPI

        :param add: The add of this AddRulesRequest.
        """
        self.openapi_types = {
            'add': List[RuleNoId]
        }

        self.attribute_map = {
            'add': 'add'
        }

        self._add = add

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddRulesRequest of this AddRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add(self):
        """Gets the add of this AddRulesRequest.


        :return: The add of this AddRulesRequest.
        :rtype: List[RuleNoId]
        """
        return self._add

    @add.setter
    def add(self, add):
        """Sets the add of this AddRulesRequest.


        :param add: The add of this AddRulesRequest.
        :type add: List[RuleNoId]
        """
        if add is None:
            raise ValueError("Invalid value for `add`, must not be `None`")

        self._add = add
