# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserWithheld(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_codes: list[str]=None, scope: str=None):
        """UserWithheld - a model defined in OpenAPI

        :param country_codes: The country_codes of this UserWithheld.
        :param scope: The scope of this UserWithheld.
        """
        self.openapi_types = {
            'country_codes': list[str],
            'scope': str
        }

        self.attribute_map = {
            'country_codes': 'country_codes',
            'scope': 'scope'
        }

        self._country_codes = country_codes
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserWithheld':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserWithheld of this UserWithheld.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_codes(self):
        """Gets the country_codes of this UserWithheld.

        Provides a list of countries where this content is not available.

        :return: The country_codes of this UserWithheld.
        :rtype: list[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this UserWithheld.

        Provides a list of countries where this content is not available.

        :param country_codes: The country_codes of this UserWithheld.
        :type country_codes: list[str]
        """
        if country_codes is None:
            raise ValueError("Invalid value for `country_codes`, must not be `None`")
        if country_codes is not None and len(country_codes) < 1:
            raise ValueError("Invalid value for `country_codes`, number of items must be greater than or equal to `1`")

        self._country_codes = country_codes

    @property
    def scope(self):
        """Gets the scope of this UserWithheld.

        Indicates that the content being withheld is a `user`.

        :return: The scope of this UserWithheld.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UserWithheld.

        Indicates that the content being withheld is a `user`.

        :param scope: The scope of this UserWithheld.
        :type scope: str
        """
        allowed_values = ["user"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
