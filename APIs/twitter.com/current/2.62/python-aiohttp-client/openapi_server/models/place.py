# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo import Geo
from openapi_server.models.place_type import PlaceType
import re
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contained_within: List[str]=None, country: str=None, country_code: str=None, full_name: str=None, geo: Geo=None, id: str=None, name: str=None, place_type: PlaceType=None):
        """Place - a model defined in OpenAPI

        :param contained_within: The contained_within of this Place.
        :param country: The country of this Place.
        :param country_code: The country_code of this Place.
        :param full_name: The full_name of this Place.
        :param geo: The geo of this Place.
        :param id: The id of this Place.
        :param name: The name of this Place.
        :param place_type: The place_type of this Place.
        """
        self.openapi_types = {
            'contained_within': List[str],
            'country': str,
            'country_code': str,
            'full_name': str,
            'geo': Geo,
            'id': str,
            'name': str,
            'place_type': PlaceType
        }

        self.attribute_map = {
            'contained_within': 'contained_within',
            'country': 'country',
            'country_code': 'country_code',
            'full_name': 'full_name',
            'geo': 'geo',
            'id': 'id',
            'name': 'name',
            'place_type': 'place_type'
        }

        self._contained_within = contained_within
        self._country = country
        self._country_code = country_code
        self._full_name = full_name
        self._geo = geo
        self._id = id
        self._name = name
        self._place_type = place_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contained_within(self):
        """Gets the contained_within of this Place.


        :return: The contained_within of this Place.
        :rtype: List[str]
        """
        return self._contained_within

    @contained_within.setter
    def contained_within(self, contained_within):
        """Sets the contained_within of this Place.


        :param contained_within: The contained_within of this Place.
        :type contained_within: List[str]
        """
        if contained_within is not None and len(contained_within) < 1:
            raise ValueError("Invalid value for `contained_within`, number of items must be greater than or equal to `1`")

        self._contained_within = contained_within

    @property
    def country(self):
        """Gets the country of this Place.

        The full name of the county in which this place exists.

        :return: The country of this Place.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Place.

        The full name of the county in which this place exists.

        :param country: The country of this Place.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Place.

        A two-letter ISO 3166-1 alpha-2 country code.

        :return: The country_code of this Place.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Place.

        A two-letter ISO 3166-1 alpha-2 country code.

        :param country_code: The country_code of this Place.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'^[A-Z]{2}$', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country_code = country_code

    @property
    def full_name(self):
        """Gets the full_name of this Place.

        The full name of this place.

        :return: The full_name of this Place.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Place.

        The full name of this place.

        :param full_name: The full_name of this Place.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def geo(self):
        """Gets the geo of this Place.


        :return: The geo of this Place.
        :rtype: Geo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this Place.


        :param geo: The geo of this Place.
        :type geo: Geo
        """

        self._geo = geo

    @property
    def id(self):
        """Gets the id of this Place.

        The identifier for this place.

        :return: The id of this Place.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Place.

        The identifier for this place.

        :param id: The id of this Place.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Place.

        The human readable name of this place.

        :return: The name of this Place.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Place.

        The human readable name of this place.

        :param name: The name of this Place.
        :type name: str
        """

        self._name = name

    @property
    def place_type(self):
        """Gets the place_type of this Place.


        :return: The place_type of this Place.
        :rtype: PlaceType
        """
        return self._place_type

    @place_type.setter
    def place_type(self, place_type):
        """Sets the place_type of this Place.


        :param place_type: The place_type of this Place.
        :type place_type: PlaceType
        """

        self._place_type = place_type
