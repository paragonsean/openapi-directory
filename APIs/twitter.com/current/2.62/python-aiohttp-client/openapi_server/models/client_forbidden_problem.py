# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.problem import Problem
from openapi_server import util


class ClientForbiddenProblem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, status: int=None, title: str=None, type: str=None, reason: str=None, registration_url: str=None):
        """ClientForbiddenProblem - a model defined in OpenAPI

        :param detail: The detail of this ClientForbiddenProblem.
        :param status: The status of this ClientForbiddenProblem.
        :param title: The title of this ClientForbiddenProblem.
        :param type: The type of this ClientForbiddenProblem.
        :param reason: The reason of this ClientForbiddenProblem.
        :param registration_url: The registration_url of this ClientForbiddenProblem.
        """
        self.openapi_types = {
            'detail': str,
            'status': int,
            'title': str,
            'type': str,
            'reason': str,
            'registration_url': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'status': 'status',
            'title': 'title',
            'type': 'type',
            'reason': 'reason',
            'registration_url': 'registration_url'
        }

        self._detail = detail
        self._status = status
        self._title = title
        self._type = type
        self._reason = reason
        self._registration_url = registration_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientForbiddenProblem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientForbiddenProblem of this ClientForbiddenProblem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ClientForbiddenProblem.


        :return: The detail of this ClientForbiddenProblem.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ClientForbiddenProblem.


        :param detail: The detail of this ClientForbiddenProblem.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this ClientForbiddenProblem.


        :return: The status of this ClientForbiddenProblem.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientForbiddenProblem.


        :param status: The status of this ClientForbiddenProblem.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ClientForbiddenProblem.


        :return: The title of this ClientForbiddenProblem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ClientForbiddenProblem.


        :param title: The title of this ClientForbiddenProblem.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ClientForbiddenProblem.


        :return: The type of this ClientForbiddenProblem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientForbiddenProblem.


        :param type: The type of this ClientForbiddenProblem.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def reason(self):
        """Gets the reason of this ClientForbiddenProblem.


        :return: The reason of this ClientForbiddenProblem.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ClientForbiddenProblem.


        :param reason: The reason of this ClientForbiddenProblem.
        :type reason: str
        """
        allowed_values = ["official-client-forbidden", "client-not-enrolled"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def registration_url(self):
        """Gets the registration_url of this ClientForbiddenProblem.


        :return: The registration_url of this ClientForbiddenProblem.
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this ClientForbiddenProblem.


        :param registration_url: The registration_url of this ClientForbiddenProblem.
        :type registration_url: str
        """

        self._registration_url = registration_url
