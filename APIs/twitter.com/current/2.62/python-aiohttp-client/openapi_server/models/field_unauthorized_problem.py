# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.problem import Problem
from openapi_server import util


class FieldUnauthorizedProblem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, status: int=None, title: str=None, type: str=None, _field: str=None, resource_type: str=None, section: str=None):
        """FieldUnauthorizedProblem - a model defined in OpenAPI

        :param detail: The detail of this FieldUnauthorizedProblem.
        :param status: The status of this FieldUnauthorizedProblem.
        :param title: The title of this FieldUnauthorizedProblem.
        :param type: The type of this FieldUnauthorizedProblem.
        :param _field: The _field of this FieldUnauthorizedProblem.
        :param resource_type: The resource_type of this FieldUnauthorizedProblem.
        :param section: The section of this FieldUnauthorizedProblem.
        """
        self.openapi_types = {
            'detail': str,
            'status': int,
            'title': str,
            'type': str,
            '_field': str,
            'resource_type': str,
            'section': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'status': 'status',
            'title': 'title',
            'type': 'type',
            '_field': 'field',
            'resource_type': 'resource_type',
            'section': 'section'
        }

        self._detail = detail
        self._status = status
        self._title = title
        self._type = type
        self.__field = _field
        self._resource_type = resource_type
        self._section = section

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldUnauthorizedProblem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldUnauthorizedProblem of this FieldUnauthorizedProblem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this FieldUnauthorizedProblem.


        :return: The detail of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this FieldUnauthorizedProblem.


        :param detail: The detail of this FieldUnauthorizedProblem.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this FieldUnauthorizedProblem.


        :return: The status of this FieldUnauthorizedProblem.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FieldUnauthorizedProblem.


        :param status: The status of this FieldUnauthorizedProblem.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this FieldUnauthorizedProblem.


        :return: The title of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FieldUnauthorizedProblem.


        :param title: The title of this FieldUnauthorizedProblem.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this FieldUnauthorizedProblem.


        :return: The type of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldUnauthorizedProblem.


        :param type: The type of this FieldUnauthorizedProblem.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def _field(self):
        """Gets the _field of this FieldUnauthorizedProblem.


        :return: The _field of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldUnauthorizedProblem.


        :param _field: The _field of this FieldUnauthorizedProblem.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def resource_type(self):
        """Gets the resource_type of this FieldUnauthorizedProblem.


        :return: The resource_type of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this FieldUnauthorizedProblem.


        :param resource_type: The resource_type of this FieldUnauthorizedProblem.
        :type resource_type: str
        """
        allowed_values = ["user", "tweet", "media", "list", "space"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def section(self):
        """Gets the section of this FieldUnauthorizedProblem.


        :return: The section of this FieldUnauthorizedProblem.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this FieldUnauthorizedProblem.


        :param section: The section of this FieldUnauthorizedProblem.
        :type section: str
        """
        allowed_values = ["data", "includes"]  # noqa: E501
        if section not in allowed_values:
            raise ValueError(
                "Invalid value for `section` ({0}), must be one of {1}"
                .format(section, allowed_values)
            )

        self._section = section
