# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListFollowedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list_id: str=None):
        """ListFollowedRequest - a model defined in OpenAPI

        :param list_id: The list_id of this ListFollowedRequest.
        """
        self.openapi_types = {
            'list_id': str
        }

        self.attribute_map = {
            'list_id': 'list_id'
        }

        self._list_id = list_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListFollowedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListFollowedRequest of this ListFollowedRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list_id(self):
        """Gets the list_id of this ListFollowedRequest.

        The unique identifier of this List.

        :return: The list_id of this ListFollowedRequest.
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this ListFollowedRequest.

        The unique identifier of this List.

        :param list_id: The list_id of this ListFollowedRequest.
        :type list_id: str
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")
        if list_id is not None and not re.search(r'^[0-9]{1,19}$', list_id):
            raise ValueError("Invalid value for `list_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._list_id = list_id
