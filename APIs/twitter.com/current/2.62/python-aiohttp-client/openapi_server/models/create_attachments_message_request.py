# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dm_media_attachment import DmMediaAttachment
from openapi_server import util


class CreateAttachmentsMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[DmMediaAttachment]=None, text: str=None):
        """CreateAttachmentsMessageRequest - a model defined in OpenAPI

        :param attachments: The attachments of this CreateAttachmentsMessageRequest.
        :param text: The text of this CreateAttachmentsMessageRequest.
        """
        self.openapi_types = {
            'attachments': List[DmMediaAttachment],
            'text': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'text': 'text'
        }

        self._attachments = attachments
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAttachmentsMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAttachmentsMessageRequest of this CreateAttachmentsMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this CreateAttachmentsMessageRequest.

        Attachments to a DM Event.

        :return: The attachments of this CreateAttachmentsMessageRequest.
        :rtype: List[DmMediaAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CreateAttachmentsMessageRequest.

        Attachments to a DM Event.

        :param attachments: The attachments of this CreateAttachmentsMessageRequest.
        :type attachments: List[DmMediaAttachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def text(self):
        """Gets the text of this CreateAttachmentsMessageRequest.

        Text of the message.

        :return: The text of this CreateAttachmentsMessageRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreateAttachmentsMessageRequest.

        Text of the message.

        :param text: The text of this CreateAttachmentsMessageRequest.
        :type text: str
        """
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text
