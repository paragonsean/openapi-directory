# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TweetCreateRequestPoll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_minutes: int=None, options: List[str]=None, reply_settings: str=None):
        """TweetCreateRequestPoll - a model defined in OpenAPI

        :param duration_minutes: The duration_minutes of this TweetCreateRequestPoll.
        :param options: The options of this TweetCreateRequestPoll.
        :param reply_settings: The reply_settings of this TweetCreateRequestPoll.
        """
        self.openapi_types = {
            'duration_minutes': int,
            'options': List[str],
            'reply_settings': str
        }

        self.attribute_map = {
            'duration_minutes': 'duration_minutes',
            'options': 'options',
            'reply_settings': 'reply_settings'
        }

        self._duration_minutes = duration_minutes
        self._options = options
        self._reply_settings = reply_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetCreateRequestPoll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetCreateRequest_poll of this TweetCreateRequestPoll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this TweetCreateRequestPoll.

        Duration of the poll in minutes.

        :return: The duration_minutes of this TweetCreateRequestPoll.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this TweetCreateRequestPoll.

        Duration of the poll in minutes.

        :param duration_minutes: The duration_minutes of this TweetCreateRequestPoll.
        :type duration_minutes: int
        """
        if duration_minutes is None:
            raise ValueError("Invalid value for `duration_minutes`, must not be `None`")
        if duration_minutes is not None and duration_minutes > 10080:
            raise ValueError("Invalid value for `duration_minutes`, must be a value less than or equal to `10080`")
        if duration_minutes is not None and duration_minutes < 5:
            raise ValueError("Invalid value for `duration_minutes`, must be a value greater than or equal to `5`")

        self._duration_minutes = duration_minutes

    @property
    def options(self):
        """Gets the options of this TweetCreateRequestPoll.


        :return: The options of this TweetCreateRequestPoll.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this TweetCreateRequestPoll.


        :param options: The options of this TweetCreateRequestPoll.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")
        if options is not None and len(options) > 4:
            raise ValueError("Invalid value for `options`, number of items must be less than or equal to `4`")
        if options is not None and len(options) < 2:
            raise ValueError("Invalid value for `options`, number of items must be greater than or equal to `2`")

        self._options = options

    @property
    def reply_settings(self):
        """Gets the reply_settings of this TweetCreateRequestPoll.

        Settings to indicate who can reply to the Tweet.

        :return: The reply_settings of this TweetCreateRequestPoll.
        :rtype: str
        """
        return self._reply_settings

    @reply_settings.setter
    def reply_settings(self, reply_settings):
        """Sets the reply_settings of this TweetCreateRequestPoll.

        Settings to indicate who can reply to the Tweet.

        :param reply_settings: The reply_settings of this TweetCreateRequestPoll.
        :type reply_settings: str
        """
        allowed_values = ["following", "mentionedUsers"]  # noqa: E501
        if reply_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `reply_settings` ({0}), must be one of {1}"
                .format(reply_settings, allowed_values)
            )

        self._reply_settings = reply_settings
