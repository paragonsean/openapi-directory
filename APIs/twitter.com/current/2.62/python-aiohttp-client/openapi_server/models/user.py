# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_entities import UserEntities
from openapi_server.models.user_public_metrics import UserPublicMetrics
from openapi_server.models.user_withheld import UserWithheld
import re
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, entities: UserEntities=None, id: str=None, location: str=None, name: str=None, pinned_tweet_id: str=None, profile_image_url: str=None, protected: bool=None, public_metrics: UserPublicMetrics=None, url: str=None, username: str=None, verified: bool=None, verified_type: str=None, withheld: UserWithheld=None):
        """User - a model defined in OpenAPI

        :param created_at: The created_at of this User.
        :param description: The description of this User.
        :param entities: The entities of this User.
        :param id: The id of this User.
        :param location: The location of this User.
        :param name: The name of this User.
        :param pinned_tweet_id: The pinned_tweet_id of this User.
        :param profile_image_url: The profile_image_url of this User.
        :param protected: The protected of this User.
        :param public_metrics: The public_metrics of this User.
        :param url: The url of this User.
        :param username: The username of this User.
        :param verified: The verified of this User.
        :param verified_type: The verified_type of this User.
        :param withheld: The withheld of this User.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'entities': UserEntities,
            'id': str,
            'location': str,
            'name': str,
            'pinned_tweet_id': str,
            'profile_image_url': str,
            'protected': bool,
            'public_metrics': UserPublicMetrics,
            'url': str,
            'username': str,
            'verified': bool,
            'verified_type': str,
            'withheld': UserWithheld
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'entities': 'entities',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'pinned_tweet_id': 'pinned_tweet_id',
            'profile_image_url': 'profile_image_url',
            'protected': 'protected',
            'public_metrics': 'public_metrics',
            'url': 'url',
            'username': 'username',
            'verified': 'verified',
            'verified_type': 'verified_type',
            'withheld': 'withheld'
        }

        self._created_at = created_at
        self._description = description
        self._entities = entities
        self._id = id
        self._location = location
        self._name = name
        self._pinned_tweet_id = pinned_tweet_id
        self._profile_image_url = profile_image_url
        self._protected = protected
        self._public_metrics = public_metrics
        self._url = url
        self._username = username
        self._verified = verified
        self._verified_type = verified_type
        self._withheld = withheld

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this User.

        Creation time of this User.

        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        Creation time of this User.

        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this User.

        The text of this User's profile description (also known as bio), if the User provided one.

        :return: The description of this User.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this User.

        The text of this User's profile description (also known as bio), if the User provided one.

        :param description: The description of this User.
        :type description: str
        """

        self._description = description

    @property
    def entities(self):
        """Gets the entities of this User.


        :return: The entities of this User.
        :rtype: UserEntities
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this User.


        :param entities: The entities of this User.
        :type entities: UserEntities
        """

        self._entities = entities

    @property
    def id(self):
        """Gets the id of this User.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this User.

        The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.

        :return: The location of this User.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this User.

        The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.

        :param location: The location of this User.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this User.

        The friendly name of this User, as shown on their profile.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The friendly name of this User, as shown on their profile.

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pinned_tweet_id(self):
        """Gets the pinned_tweet_id of this User.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The pinned_tweet_id of this User.
        :rtype: str
        """
        return self._pinned_tweet_id

    @pinned_tweet_id.setter
    def pinned_tweet_id(self, pinned_tweet_id):
        """Sets the pinned_tweet_id of this User.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param pinned_tweet_id: The pinned_tweet_id of this User.
        :type pinned_tweet_id: str
        """
        if pinned_tweet_id is not None and not re.search(r'^[0-9]{1,19}$', pinned_tweet_id):
            raise ValueError("Invalid value for `pinned_tweet_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._pinned_tweet_id = pinned_tweet_id

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this User.

        The URL to the profile image for this User.

        :return: The profile_image_url of this User.
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this User.

        The URL to the profile image for this User.

        :param profile_image_url: The profile_image_url of this User.
        :type profile_image_url: str
        """

        self._profile_image_url = profile_image_url

    @property
    def protected(self):
        """Gets the protected of this User.

        Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).

        :return: The protected of this User.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this User.

        Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).

        :param protected: The protected of this User.
        :type protected: bool
        """

        self._protected = protected

    @property
    def public_metrics(self):
        """Gets the public_metrics of this User.


        :return: The public_metrics of this User.
        :rtype: UserPublicMetrics
        """
        return self._public_metrics

    @public_metrics.setter
    def public_metrics(self, public_metrics):
        """Sets the public_metrics of this User.


        :param public_metrics: The public_metrics of this User.
        :type public_metrics: UserPublicMetrics
        """

        self._public_metrics = public_metrics

    @property
    def url(self):
        """Gets the url of this User.

        The URL specified in the User's profile.

        :return: The url of this User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this User.

        The URL specified in the User's profile.

        :param url: The url of this User.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this User.

        The Twitter handle (screen name) of this user.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The Twitter handle (screen name) of this user.

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and not re.search(r'^[A-Za-z0-9_]{1,15}$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[A-Za-z0-9_]{1,15}$/`")

        self._username = username

    @property
    def verified(self):
        """Gets the verified of this User.

        Indicate if this User is a verified Twitter User.

        :return: The verified of this User.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this User.

        Indicate if this User is a verified Twitter User.

        :param verified: The verified of this User.
        :type verified: bool
        """

        self._verified = verified

    @property
    def verified_type(self):
        """Gets the verified_type of this User.

        The Twitter Blue verified type of the user, eg: blue, government, business or none.

        :return: The verified_type of this User.
        :rtype: str
        """
        return self._verified_type

    @verified_type.setter
    def verified_type(self, verified_type):
        """Sets the verified_type of this User.

        The Twitter Blue verified type of the user, eg: blue, government, business or none.

        :param verified_type: The verified_type of this User.
        :type verified_type: str
        """

        self._verified_type = verified_type

    @property
    def withheld(self):
        """Gets the withheld of this User.


        :return: The withheld of this User.
        :rtype: UserWithheld
        """
        return self._withheld

    @withheld.setter
    def withheld(self, withheld):
        """Sets the withheld of this User.


        :param withheld: The withheld of this User.
        :type withheld: UserWithheld
        """

        self._withheld = withheld
