# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: datetime=None, start: datetime=None, tweet_count: int=None):
        """SearchCount - a model defined in OpenAPI

        :param end: The end of this SearchCount.
        :param start: The start of this SearchCount.
        :param tweet_count: The tweet_count of this SearchCount.
        """
        self.openapi_types = {
            'end': datetime,
            'start': datetime,
            'tweet_count': int
        }

        self.attribute_map = {
            'end': 'end',
            'start': 'start',
            'tweet_count': 'tweet_count'
        }

        self._end = end
        self._start = start
        self._tweet_count = tweet_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchCount of this SearchCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this SearchCount.

        The end time of the bucket.

        :return: The end of this SearchCount.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SearchCount.

        The end time of the bucket.

        :param end: The end of this SearchCount.
        :type end: datetime
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this SearchCount.

        The start time of the bucket.

        :return: The start of this SearchCount.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchCount.

        The start time of the bucket.

        :param start: The start of this SearchCount.
        :type start: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def tweet_count(self):
        """Gets the tweet_count of this SearchCount.

        The count for the bucket.

        :return: The tweet_count of this SearchCount.
        :rtype: int
        """
        return self._tweet_count

    @tweet_count.setter
    def tweet_count(self, tweet_count):
        """Sets the tweet_count of this SearchCount.

        The count for the bucket.

        :param tweet_count: The tweet_count of this SearchCount.
        :type tweet_count: int
        """
        if tweet_count is None:
            raise ValueError("Invalid value for `tweet_count`, must not be `None`")

        self._tweet_count = tweet_count
