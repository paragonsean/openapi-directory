# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TweetAttachments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_keys: List[str]=None, poll_ids: List[str]=None):
        """TweetAttachments - a model defined in OpenAPI

        :param media_keys: The media_keys of this TweetAttachments.
        :param poll_ids: The poll_ids of this TweetAttachments.
        """
        self.openapi_types = {
            'media_keys': List[str],
            'poll_ids': List[str]
        }

        self.attribute_map = {
            'media_keys': 'media_keys',
            'poll_ids': 'poll_ids'
        }

        self._media_keys = media_keys
        self._poll_ids = poll_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetAttachments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tweet_attachments of this TweetAttachments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_keys(self):
        """Gets the media_keys of this TweetAttachments.

        A list of Media Keys for each one of the media attachments (if media are attached).

        :return: The media_keys of this TweetAttachments.
        :rtype: List[str]
        """
        return self._media_keys

    @media_keys.setter
    def media_keys(self, media_keys):
        """Sets the media_keys of this TweetAttachments.

        A list of Media Keys for each one of the media attachments (if media are attached).

        :param media_keys: The media_keys of this TweetAttachments.
        :type media_keys: List[str]
        """
        if media_keys is not None and len(media_keys) < 1:
            raise ValueError("Invalid value for `media_keys`, number of items must be greater than or equal to `1`")

        self._media_keys = media_keys

    @property
    def poll_ids(self):
        """Gets the poll_ids of this TweetAttachments.

        A list of poll IDs (if polls are attached).

        :return: The poll_ids of this TweetAttachments.
        :rtype: List[str]
        """
        return self._poll_ids

    @poll_ids.setter
    def poll_ids(self, poll_ids):
        """Sets the poll_ids of this TweetAttachments.

        A list of poll IDs (if polls are attached).

        :param poll_ids: The poll_ids of this TweetAttachments.
        :type poll_ids: List[str]
        """
        if poll_ids is not None and len(poll_ids) < 1:
            raise ValueError("Invalid value for `poll_ids`, number of items must be greater than or equal to `1`")

        self._poll_ids = poll_ids
