# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TweetCreateRequestMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_ids: List[str]=None, tagged_user_ids: List[str]=None):
        """TweetCreateRequestMedia - a model defined in OpenAPI

        :param media_ids: The media_ids of this TweetCreateRequestMedia.
        :param tagged_user_ids: The tagged_user_ids of this TweetCreateRequestMedia.
        """
        self.openapi_types = {
            'media_ids': List[str],
            'tagged_user_ids': List[str]
        }

        self.attribute_map = {
            'media_ids': 'media_ids',
            'tagged_user_ids': 'tagged_user_ids'
        }

        self._media_ids = media_ids
        self._tagged_user_ids = tagged_user_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetCreateRequestMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetCreateRequest_media of this TweetCreateRequestMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_ids(self):
        """Gets the media_ids of this TweetCreateRequestMedia.

        A list of Media Ids to be attached to a created Tweet.

        :return: The media_ids of this TweetCreateRequestMedia.
        :rtype: List[str]
        """
        return self._media_ids

    @media_ids.setter
    def media_ids(self, media_ids):
        """Sets the media_ids of this TweetCreateRequestMedia.

        A list of Media Ids to be attached to a created Tweet.

        :param media_ids: The media_ids of this TweetCreateRequestMedia.
        :type media_ids: List[str]
        """
        if media_ids is None:
            raise ValueError("Invalid value for `media_ids`, must not be `None`")
        if media_ids is not None and len(media_ids) > 4:
            raise ValueError("Invalid value for `media_ids`, number of items must be less than or equal to `4`")
        if media_ids is not None and len(media_ids) < 1:
            raise ValueError("Invalid value for `media_ids`, number of items must be greater than or equal to `1`")

        self._media_ids = media_ids

    @property
    def tagged_user_ids(self):
        """Gets the tagged_user_ids of this TweetCreateRequestMedia.

        A list of User Ids to be tagged in the media for created Tweet.

        :return: The tagged_user_ids of this TweetCreateRequestMedia.
        :rtype: List[str]
        """
        return self._tagged_user_ids

    @tagged_user_ids.setter
    def tagged_user_ids(self, tagged_user_ids):
        """Sets the tagged_user_ids of this TweetCreateRequestMedia.

        A list of User Ids to be tagged in the media for created Tweet.

        :param tagged_user_ids: The tagged_user_ids of this TweetCreateRequestMedia.
        :type tagged_user_ids: List[str]
        """
        if tagged_user_ids is not None and len(tagged_user_ids) > 10:
            raise ValueError("Invalid value for `tagged_user_ids`, number of items must be less than or equal to `10`")
        if tagged_user_ids is not None and len(tagged_user_ids) < 0:
            raise ValueError("Invalid value for `tagged_user_ids`, number of items must be greater than or equal to `0`")

        self._tagged_user_ids = tagged_user_ids
