# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RulesRequestSummaryOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, invalid: int=None, not_created: int=None, valid: int=None):
        """RulesRequestSummaryOneOf - a model defined in OpenAPI

        :param created: The created of this RulesRequestSummaryOneOf.
        :param invalid: The invalid of this RulesRequestSummaryOneOf.
        :param not_created: The not_created of this RulesRequestSummaryOneOf.
        :param valid: The valid of this RulesRequestSummaryOneOf.
        """
        self.openapi_types = {
            'created': int,
            'invalid': int,
            'not_created': int,
            'valid': int
        }

        self.attribute_map = {
            'created': 'created',
            'invalid': 'invalid',
            'not_created': 'not_created',
            'valid': 'valid'
        }

        self._created = created
        self._invalid = invalid
        self._not_created = not_created
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesRequestSummaryOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RulesRequestSummary_oneOf of this RulesRequestSummaryOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this RulesRequestSummaryOneOf.

        Number of user-specified stream filtering rules that were created.

        :return: The created of this RulesRequestSummaryOneOf.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RulesRequestSummaryOneOf.

        Number of user-specified stream filtering rules that were created.

        :param created: The created of this RulesRequestSummaryOneOf.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def invalid(self):
        """Gets the invalid of this RulesRequestSummaryOneOf.

        Number of invalid user-specified stream filtering rules.

        :return: The invalid of this RulesRequestSummaryOneOf.
        :rtype: int
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this RulesRequestSummaryOneOf.

        Number of invalid user-specified stream filtering rules.

        :param invalid: The invalid of this RulesRequestSummaryOneOf.
        :type invalid: int
        """
        if invalid is None:
            raise ValueError("Invalid value for `invalid`, must not be `None`")

        self._invalid = invalid

    @property
    def not_created(self):
        """Gets the not_created of this RulesRequestSummaryOneOf.

        Number of user-specified stream filtering rules that were not created.

        :return: The not_created of this RulesRequestSummaryOneOf.
        :rtype: int
        """
        return self._not_created

    @not_created.setter
    def not_created(self, not_created):
        """Sets the not_created of this RulesRequestSummaryOneOf.

        Number of user-specified stream filtering rules that were not created.

        :param not_created: The not_created of this RulesRequestSummaryOneOf.
        :type not_created: int
        """
        if not_created is None:
            raise ValueError("Invalid value for `not_created`, must not be `None`")

        self._not_created = not_created

    @property
    def valid(self):
        """Gets the valid of this RulesRequestSummaryOneOf.

        Number of valid user-specified stream filtering rules.

        :return: The valid of this RulesRequestSummaryOneOf.
        :rtype: int
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this RulesRequestSummaryOneOf.

        Number of valid user-specified stream filtering rules.

        :param valid: The valid of this RulesRequestSummaryOneOf.
        :type valid: int
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
