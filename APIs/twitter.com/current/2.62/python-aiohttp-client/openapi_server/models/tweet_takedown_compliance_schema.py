# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_compliance_schema_tweet import TweetComplianceSchemaTweet
import re
from openapi_server import util


class TweetTakedownComplianceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_at: datetime=None, quote_tweet_id: str=None, tweet: TweetComplianceSchemaTweet=None, withheld_in_countries: List[str]=None):
        """TweetTakedownComplianceSchema - a model defined in OpenAPI

        :param event_at: The event_at of this TweetTakedownComplianceSchema.
        :param quote_tweet_id: The quote_tweet_id of this TweetTakedownComplianceSchema.
        :param tweet: The tweet of this TweetTakedownComplianceSchema.
        :param withheld_in_countries: The withheld_in_countries of this TweetTakedownComplianceSchema.
        """
        self.openapi_types = {
            'event_at': datetime,
            'quote_tweet_id': str,
            'tweet': TweetComplianceSchemaTweet,
            'withheld_in_countries': List[str]
        }

        self.attribute_map = {
            'event_at': 'event_at',
            'quote_tweet_id': 'quote_tweet_id',
            'tweet': 'tweet',
            'withheld_in_countries': 'withheld_in_countries'
        }

        self._event_at = event_at
        self._quote_tweet_id = quote_tweet_id
        self._tweet = tweet
        self._withheld_in_countries = withheld_in_countries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetTakedownComplianceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetTakedownComplianceSchema of this TweetTakedownComplianceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_at(self):
        """Gets the event_at of this TweetTakedownComplianceSchema.

        Event time.

        :return: The event_at of this TweetTakedownComplianceSchema.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this TweetTakedownComplianceSchema.

        Event time.

        :param event_at: The event_at of this TweetTakedownComplianceSchema.
        :type event_at: datetime
        """
        if event_at is None:
            raise ValueError("Invalid value for `event_at`, must not be `None`")

        self._event_at = event_at

    @property
    def quote_tweet_id(self):
        """Gets the quote_tweet_id of this TweetTakedownComplianceSchema.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The quote_tweet_id of this TweetTakedownComplianceSchema.
        :rtype: str
        """
        return self._quote_tweet_id

    @quote_tweet_id.setter
    def quote_tweet_id(self, quote_tweet_id):
        """Sets the quote_tweet_id of this TweetTakedownComplianceSchema.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param quote_tweet_id: The quote_tweet_id of this TweetTakedownComplianceSchema.
        :type quote_tweet_id: str
        """
        if quote_tweet_id is not None and not re.search(r'^[0-9]{1,19}$', quote_tweet_id):
            raise ValueError("Invalid value for `quote_tweet_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._quote_tweet_id = quote_tweet_id

    @property
    def tweet(self):
        """Gets the tweet of this TweetTakedownComplianceSchema.


        :return: The tweet of this TweetTakedownComplianceSchema.
        :rtype: TweetComplianceSchemaTweet
        """
        return self._tweet

    @tweet.setter
    def tweet(self, tweet):
        """Sets the tweet of this TweetTakedownComplianceSchema.


        :param tweet: The tweet of this TweetTakedownComplianceSchema.
        :type tweet: TweetComplianceSchemaTweet
        """
        if tweet is None:
            raise ValueError("Invalid value for `tweet`, must not be `None`")

        self._tweet = tweet

    @property
    def withheld_in_countries(self):
        """Gets the withheld_in_countries of this TweetTakedownComplianceSchema.


        :return: The withheld_in_countries of this TweetTakedownComplianceSchema.
        :rtype: List[str]
        """
        return self._withheld_in_countries

    @withheld_in_countries.setter
    def withheld_in_countries(self, withheld_in_countries):
        """Sets the withheld_in_countries of this TweetTakedownComplianceSchema.


        :param withheld_in_countries: The withheld_in_countries of this TweetTakedownComplianceSchema.
        :type withheld_in_countries: List[str]
        """
        if withheld_in_countries is None:
            raise ValueError("Invalid value for `withheld_in_countries`, must not be `None`")
        if withheld_in_countries is not None and len(withheld_in_countries) < 1:
            raise ValueError("Invalid value for `withheld_in_countries`, number of items must be greater than or equal to `1`")

        self._withheld_in_countries = withheld_in_countries
