# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DmMediaAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_id: str=None):
        """DmMediaAttachment - a model defined in OpenAPI

        :param media_id: The media_id of this DmMediaAttachment.
        """
        self.openapi_types = {
            'media_id': str
        }

        self.attribute_map = {
            'media_id': 'media_id'
        }

        self._media_id = media_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DmMediaAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DmMediaAttachment of this DmMediaAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_id(self):
        """Gets the media_id of this DmMediaAttachment.

        The unique identifier of this Media.

        :return: The media_id of this DmMediaAttachment.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this DmMediaAttachment.

        The unique identifier of this Media.

        :param media_id: The media_id of this DmMediaAttachment.
        :type media_id: str
        """
        if media_id is None:
            raise ValueError("Invalid value for `media_id`, must not be `None`")
        if media_id is not None and not re.search(r'^[0-9]{1,19}$', media_id):
            raise ValueError("Invalid value for `media_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._media_id = media_id
