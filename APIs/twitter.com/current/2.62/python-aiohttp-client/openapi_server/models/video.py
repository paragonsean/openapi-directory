# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media import Media
from openapi_server.models.variant import Variant
from openapi_server.models.video_all_of_non_public_metrics import VideoAllOfNonPublicMetrics
from openapi_server.models.video_all_of_organic_metrics import VideoAllOfOrganicMetrics
from openapi_server.models.video_all_of_promoted_metrics import VideoAllOfPromotedMetrics
from openapi_server.models.video_all_of_public_metrics import VideoAllOfPublicMetrics
import re
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, media_key: str=None, type: str=None, width: int=None, duration_ms: int=None, non_public_metrics: VideoAllOfNonPublicMetrics=None, organic_metrics: VideoAllOfOrganicMetrics=None, preview_image_url: str=None, promoted_metrics: VideoAllOfPromotedMetrics=None, public_metrics: VideoAllOfPublicMetrics=None, variants: List[Variant]=None):
        """Video - a model defined in OpenAPI

        :param height: The height of this Video.
        :param media_key: The media_key of this Video.
        :param type: The type of this Video.
        :param width: The width of this Video.
        :param duration_ms: The duration_ms of this Video.
        :param non_public_metrics: The non_public_metrics of this Video.
        :param organic_metrics: The organic_metrics of this Video.
        :param preview_image_url: The preview_image_url of this Video.
        :param promoted_metrics: The promoted_metrics of this Video.
        :param public_metrics: The public_metrics of this Video.
        :param variants: The variants of this Video.
        """
        self.openapi_types = {
            'height': int,
            'media_key': str,
            'type': str,
            'width': int,
            'duration_ms': int,
            'non_public_metrics': VideoAllOfNonPublicMetrics,
            'organic_metrics': VideoAllOfOrganicMetrics,
            'preview_image_url': str,
            'promoted_metrics': VideoAllOfPromotedMetrics,
            'public_metrics': VideoAllOfPublicMetrics,
            'variants': List[Variant]
        }

        self.attribute_map = {
            'height': 'height',
            'media_key': 'media_key',
            'type': 'type',
            'width': 'width',
            'duration_ms': 'duration_ms',
            'non_public_metrics': 'non_public_metrics',
            'organic_metrics': 'organic_metrics',
            'preview_image_url': 'preview_image_url',
            'promoted_metrics': 'promoted_metrics',
            'public_metrics': 'public_metrics',
            'variants': 'variants'
        }

        self._height = height
        self._media_key = media_key
        self._type = type
        self._width = width
        self._duration_ms = duration_ms
        self._non_public_metrics = non_public_metrics
        self._organic_metrics = organic_metrics
        self._preview_image_url = preview_image_url
        self._promoted_metrics = promoted_metrics
        self._public_metrics = public_metrics
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Video.

        The height of the media in pixels.

        :return: The height of this Video.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Video.

        The height of the media in pixels.

        :param height: The height of this Video.
        :type height: int
        """
        if height is not None and height < 0:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")

        self._height = height

    @property
    def media_key(self):
        """Gets the media_key of this Video.

        The Media Key identifier for this attachment.

        :return: The media_key of this Video.
        :rtype: str
        """
        return self._media_key

    @media_key.setter
    def media_key(self, media_key):
        """Sets the media_key of this Video.

        The Media Key identifier for this attachment.

        :param media_key: The media_key of this Video.
        :type media_key: str
        """
        if media_key is not None and not re.search(r'^([0-9]+)_([0-9]+)$', media_key):
            raise ValueError("Invalid value for `media_key`, must be a follow pattern or equal to `/^([0-9]+)_([0-9]+)$/`")

        self._media_key = media_key

    @property
    def type(self):
        """Gets the type of this Video.


        :return: The type of this Video.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Video.


        :param type: The type of this Video.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def width(self):
        """Gets the width of this Video.

        The width of the media in pixels.

        :return: The width of this Video.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Video.

        The width of the media in pixels.

        :param width: The width of this Video.
        :type width: int
        """
        if width is not None and width < 0:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")

        self._width = width

    @property
    def duration_ms(self):
        """Gets the duration_ms of this Video.


        :return: The duration_ms of this Video.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this Video.


        :param duration_ms: The duration_ms of this Video.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def non_public_metrics(self):
        """Gets the non_public_metrics of this Video.


        :return: The non_public_metrics of this Video.
        :rtype: VideoAllOfNonPublicMetrics
        """
        return self._non_public_metrics

    @non_public_metrics.setter
    def non_public_metrics(self, non_public_metrics):
        """Sets the non_public_metrics of this Video.


        :param non_public_metrics: The non_public_metrics of this Video.
        :type non_public_metrics: VideoAllOfNonPublicMetrics
        """

        self._non_public_metrics = non_public_metrics

    @property
    def organic_metrics(self):
        """Gets the organic_metrics of this Video.


        :return: The organic_metrics of this Video.
        :rtype: VideoAllOfOrganicMetrics
        """
        return self._organic_metrics

    @organic_metrics.setter
    def organic_metrics(self, organic_metrics):
        """Sets the organic_metrics of this Video.


        :param organic_metrics: The organic_metrics of this Video.
        :type organic_metrics: VideoAllOfOrganicMetrics
        """

        self._organic_metrics = organic_metrics

    @property
    def preview_image_url(self):
        """Gets the preview_image_url of this Video.


        :return: The preview_image_url of this Video.
        :rtype: str
        """
        return self._preview_image_url

    @preview_image_url.setter
    def preview_image_url(self, preview_image_url):
        """Sets the preview_image_url of this Video.


        :param preview_image_url: The preview_image_url of this Video.
        :type preview_image_url: str
        """

        self._preview_image_url = preview_image_url

    @property
    def promoted_metrics(self):
        """Gets the promoted_metrics of this Video.


        :return: The promoted_metrics of this Video.
        :rtype: VideoAllOfPromotedMetrics
        """
        return self._promoted_metrics

    @promoted_metrics.setter
    def promoted_metrics(self, promoted_metrics):
        """Sets the promoted_metrics of this Video.


        :param promoted_metrics: The promoted_metrics of this Video.
        :type promoted_metrics: VideoAllOfPromotedMetrics
        """

        self._promoted_metrics = promoted_metrics

    @property
    def public_metrics(self):
        """Gets the public_metrics of this Video.


        :return: The public_metrics of this Video.
        :rtype: VideoAllOfPublicMetrics
        """
        return self._public_metrics

    @public_metrics.setter
    def public_metrics(self, public_metrics):
        """Sets the public_metrics of this Video.


        :param public_metrics: The public_metrics of this Video.
        :type public_metrics: VideoAllOfPublicMetrics
        """

        self._public_metrics = public_metrics

    @property
    def variants(self):
        """Gets the variants of this Video.

        An array of all available variants of the media.

        :return: The variants of this Video.
        :rtype: List[Variant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Video.

        An array of all available variants of the media.

        :param variants: The variants of this Video.
        :type variants: List[Variant]
        """

        self._variants = variants
