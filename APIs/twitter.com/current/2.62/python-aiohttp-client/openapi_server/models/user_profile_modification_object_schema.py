# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_compliance_schema_user import UserComplianceSchemaUser
from openapi_server import util


class UserProfileModificationObjectSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_at: datetime=None, new_value: str=None, profile_field: str=None, user: UserComplianceSchemaUser=None):
        """UserProfileModificationObjectSchema - a model defined in OpenAPI

        :param event_at: The event_at of this UserProfileModificationObjectSchema.
        :param new_value: The new_value of this UserProfileModificationObjectSchema.
        :param profile_field: The profile_field of this UserProfileModificationObjectSchema.
        :param user: The user of this UserProfileModificationObjectSchema.
        """
        self.openapi_types = {
            'event_at': datetime,
            'new_value': str,
            'profile_field': str,
            'user': UserComplianceSchemaUser
        }

        self.attribute_map = {
            'event_at': 'event_at',
            'new_value': 'new_value',
            'profile_field': 'profile_field',
            'user': 'user'
        }

        self._event_at = event_at
        self._new_value = new_value
        self._profile_field = profile_field
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfileModificationObjectSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfileModificationObjectSchema of this UserProfileModificationObjectSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_at(self):
        """Gets the event_at of this UserProfileModificationObjectSchema.

        Event time.

        :return: The event_at of this UserProfileModificationObjectSchema.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this UserProfileModificationObjectSchema.

        Event time.

        :param event_at: The event_at of this UserProfileModificationObjectSchema.
        :type event_at: datetime
        """
        if event_at is None:
            raise ValueError("Invalid value for `event_at`, must not be `None`")

        self._event_at = event_at

    @property
    def new_value(self):
        """Gets the new_value of this UserProfileModificationObjectSchema.


        :return: The new_value of this UserProfileModificationObjectSchema.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this UserProfileModificationObjectSchema.


        :param new_value: The new_value of this UserProfileModificationObjectSchema.
        :type new_value: str
        """
        if new_value is None:
            raise ValueError("Invalid value for `new_value`, must not be `None`")

        self._new_value = new_value

    @property
    def profile_field(self):
        """Gets the profile_field of this UserProfileModificationObjectSchema.


        :return: The profile_field of this UserProfileModificationObjectSchema.
        :rtype: str
        """
        return self._profile_field

    @profile_field.setter
    def profile_field(self, profile_field):
        """Sets the profile_field of this UserProfileModificationObjectSchema.


        :param profile_field: The profile_field of this UserProfileModificationObjectSchema.
        :type profile_field: str
        """
        if profile_field is None:
            raise ValueError("Invalid value for `profile_field`, must not be `None`")

        self._profile_field = profile_field

    @property
    def user(self):
        """Gets the user of this UserProfileModificationObjectSchema.


        :return: The user of this UserProfileModificationObjectSchema.
        :rtype: UserComplianceSchemaUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserProfileModificationObjectSchema.


        :param user: The user of this UserProfileModificationObjectSchema.
        :type user: UserComplianceSchemaUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
