# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_annotation_domain_fields import ContextAnnotationDomainFields
from openapi_server.models.context_annotation_entity_fields import ContextAnnotationEntityFields
from openapi_server import util


class ContextAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: ContextAnnotationDomainFields=None, entity: ContextAnnotationEntityFields=None):
        """ContextAnnotation - a model defined in OpenAPI

        :param domain: The domain of this ContextAnnotation.
        :param entity: The entity of this ContextAnnotation.
        """
        self.openapi_types = {
            'domain': ContextAnnotationDomainFields,
            'entity': ContextAnnotationEntityFields
        }

        self.attribute_map = {
            'domain': 'domain',
            'entity': 'entity'
        }

        self._domain = domain
        self._entity = entity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextAnnotation of this ContextAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this ContextAnnotation.


        :return: The domain of this ContextAnnotation.
        :rtype: ContextAnnotationDomainFields
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ContextAnnotation.


        :param domain: The domain of this ContextAnnotation.
        :type domain: ContextAnnotationDomainFields
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def entity(self):
        """Gets the entity of this ContextAnnotation.


        :return: The entity of this ContextAnnotation.
        :rtype: ContextAnnotationEntityFields
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ContextAnnotation.


        :param entity: The entity of this ContextAnnotation.
        :type entity: ContextAnnotationEntityFields
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity
