# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dm_event_attachments import DmEventAttachments
from openapi_server.models.dm_event_referenced_tweets_inner import DmEventReferencedTweetsInner
import re
from openapi_server import util


class DmEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: DmEventAttachments=None, created_at: datetime=None, dm_conversation_id: str=None, event_type: str=None, id: str=None, participant_ids: List[str]=None, referenced_tweets: List[DmEventReferencedTweetsInner]=None, sender_id: str=None, text: str=None):
        """DmEvent - a model defined in OpenAPI

        :param attachments: The attachments of this DmEvent.
        :param created_at: The created_at of this DmEvent.
        :param dm_conversation_id: The dm_conversation_id of this DmEvent.
        :param event_type: The event_type of this DmEvent.
        :param id: The id of this DmEvent.
        :param participant_ids: The participant_ids of this DmEvent.
        :param referenced_tweets: The referenced_tweets of this DmEvent.
        :param sender_id: The sender_id of this DmEvent.
        :param text: The text of this DmEvent.
        """
        self.openapi_types = {
            'attachments': DmEventAttachments,
            'created_at': datetime,
            'dm_conversation_id': str,
            'event_type': str,
            'id': str,
            'participant_ids': List[str],
            'referenced_tweets': List[DmEventReferencedTweetsInner],
            'sender_id': str,
            'text': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'created_at': 'created_at',
            'dm_conversation_id': 'dm_conversation_id',
            'event_type': 'event_type',
            'id': 'id',
            'participant_ids': 'participant_ids',
            'referenced_tweets': 'referenced_tweets',
            'sender_id': 'sender_id',
            'text': 'text'
        }

        self._attachments = attachments
        self._created_at = created_at
        self._dm_conversation_id = dm_conversation_id
        self._event_type = event_type
        self._id = id
        self._participant_ids = participant_ids
        self._referenced_tweets = referenced_tweets
        self._sender_id = sender_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DmEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DmEvent of this DmEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this DmEvent.


        :return: The attachments of this DmEvent.
        :rtype: DmEventAttachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DmEvent.


        :param attachments: The attachments of this DmEvent.
        :type attachments: DmEventAttachments
        """

        self._attachments = attachments

    @property
    def created_at(self):
        """Gets the created_at of this DmEvent.


        :return: The created_at of this DmEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DmEvent.


        :param created_at: The created_at of this DmEvent.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dm_conversation_id(self):
        """Gets the dm_conversation_id of this DmEvent.

        Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.

        :return: The dm_conversation_id of this DmEvent.
        :rtype: str
        """
        return self._dm_conversation_id

    @dm_conversation_id.setter
    def dm_conversation_id(self, dm_conversation_id):
        """Sets the dm_conversation_id of this DmEvent.

        Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.

        :param dm_conversation_id: The dm_conversation_id of this DmEvent.
        :type dm_conversation_id: str
        """
        if dm_conversation_id is not None and not re.search(r'^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$', dm_conversation_id):
            raise ValueError("Invalid value for `dm_conversation_id`, must be a follow pattern or equal to `/^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$/`")

        self._dm_conversation_id = dm_conversation_id

    @property
    def event_type(self):
        """Gets the event_type of this DmEvent.


        :return: The event_type of this DmEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DmEvent.


        :param event_type: The event_type of this DmEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this DmEvent.

        Unique identifier of a DM Event.

        :return: The id of this DmEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DmEvent.

        Unique identifier of a DM Event.

        :param id: The id of this DmEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def participant_ids(self):
        """Gets the participant_ids of this DmEvent.

        A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.

        :return: The participant_ids of this DmEvent.
        :rtype: List[str]
        """
        return self._participant_ids

    @participant_ids.setter
    def participant_ids(self, participant_ids):
        """Sets the participant_ids of this DmEvent.

        A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.

        :param participant_ids: The participant_ids of this DmEvent.
        :type participant_ids: List[str]
        """
        if participant_ids is not None and len(participant_ids) < 1:
            raise ValueError("Invalid value for `participant_ids`, number of items must be greater than or equal to `1`")

        self._participant_ids = participant_ids

    @property
    def referenced_tweets(self):
        """Gets the referenced_tweets of this DmEvent.

        A list of Tweets this DM refers to.

        :return: The referenced_tweets of this DmEvent.
        :rtype: List[DmEventReferencedTweetsInner]
        """
        return self._referenced_tweets

    @referenced_tweets.setter
    def referenced_tweets(self, referenced_tweets):
        """Sets the referenced_tweets of this DmEvent.

        A list of Tweets this DM refers to.

        :param referenced_tweets: The referenced_tweets of this DmEvent.
        :type referenced_tweets: List[DmEventReferencedTweetsInner]
        """
        if referenced_tweets is not None and len(referenced_tweets) < 1:
            raise ValueError("Invalid value for `referenced_tweets`, number of items must be greater than or equal to `1`")

        self._referenced_tweets = referenced_tweets

    @property
    def sender_id(self):
        """Gets the sender_id of this DmEvent.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The sender_id of this DmEvent.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this DmEvent.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param sender_id: The sender_id of this DmEvent.
        :type sender_id: str
        """
        if sender_id is not None and not re.search(r'^[0-9]{1,19}$', sender_id):
            raise ValueError("Invalid value for `sender_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._sender_id = sender_id

    @property
    def text(self):
        """Gets the text of this DmEvent.


        :return: The text of this DmEvent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DmEvent.


        :param text: The text of this DmEvent.
        :type text: str
        """

        self._text = text
