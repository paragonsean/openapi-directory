# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.space_topics_inner import SpaceTopicsInner
import re
from openapi_server import util


class Space(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, creator_id: str=None, ended_at: datetime=None, host_ids: List[str]=None, id: str=None, invited_user_ids: List[str]=None, is_ticketed: bool=None, lang: str=None, participant_count: int=None, scheduled_start: datetime=None, speaker_ids: List[str]=None, started_at: datetime=None, state: str=None, subscriber_count: int=None, title: str=None, topics: List[SpaceTopicsInner]=None, updated_at: datetime=None):
        """Space - a model defined in OpenAPI

        :param created_at: The created_at of this Space.
        :param creator_id: The creator_id of this Space.
        :param ended_at: The ended_at of this Space.
        :param host_ids: The host_ids of this Space.
        :param id: The id of this Space.
        :param invited_user_ids: The invited_user_ids of this Space.
        :param is_ticketed: The is_ticketed of this Space.
        :param lang: The lang of this Space.
        :param participant_count: The participant_count of this Space.
        :param scheduled_start: The scheduled_start of this Space.
        :param speaker_ids: The speaker_ids of this Space.
        :param started_at: The started_at of this Space.
        :param state: The state of this Space.
        :param subscriber_count: The subscriber_count of this Space.
        :param title: The title of this Space.
        :param topics: The topics of this Space.
        :param updated_at: The updated_at of this Space.
        """
        self.openapi_types = {
            'created_at': datetime,
            'creator_id': str,
            'ended_at': datetime,
            'host_ids': List[str],
            'id': str,
            'invited_user_ids': List[str],
            'is_ticketed': bool,
            'lang': str,
            'participant_count': int,
            'scheduled_start': datetime,
            'speaker_ids': List[str],
            'started_at': datetime,
            'state': str,
            'subscriber_count': int,
            'title': str,
            'topics': List[SpaceTopicsInner],
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'creator_id': 'creator_id',
            'ended_at': 'ended_at',
            'host_ids': 'host_ids',
            'id': 'id',
            'invited_user_ids': 'invited_user_ids',
            'is_ticketed': 'is_ticketed',
            'lang': 'lang',
            'participant_count': 'participant_count',
            'scheduled_start': 'scheduled_start',
            'speaker_ids': 'speaker_ids',
            'started_at': 'started_at',
            'state': 'state',
            'subscriber_count': 'subscriber_count',
            'title': 'title',
            'topics': 'topics',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._creator_id = creator_id
        self._ended_at = ended_at
        self._host_ids = host_ids
        self._id = id
        self._invited_user_ids = invited_user_ids
        self._is_ticketed = is_ticketed
        self._lang = lang
        self._participant_count = participant_count
        self._scheduled_start = scheduled_start
        self._speaker_ids = speaker_ids
        self._started_at = started_at
        self._state = state
        self._subscriber_count = subscriber_count
        self._title = title
        self._topics = topics
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Space':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Space of this Space.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Space.

        Creation time of the Space.

        :return: The created_at of this Space.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Space.

        Creation time of the Space.

        :param created_at: The created_at of this Space.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this Space.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The creator_id of this Space.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Space.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param creator_id: The creator_id of this Space.
        :type creator_id: str
        """
        if creator_id is not None and not re.search(r'^[0-9]{1,19}$', creator_id):
            raise ValueError("Invalid value for `creator_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._creator_id = creator_id

    @property
    def ended_at(self):
        """Gets the ended_at of this Space.

        End time of the Space.

        :return: The ended_at of this Space.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Space.

        End time of the Space.

        :param ended_at: The ended_at of this Space.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def host_ids(self):
        """Gets the host_ids of this Space.

        The user ids for the hosts of the Space.

        :return: The host_ids of this Space.
        :rtype: List[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this Space.

        The user ids for the hosts of the Space.

        :param host_ids: The host_ids of this Space.
        :type host_ids: List[str]
        """

        self._host_ids = host_ids

    @property
    def id(self):
        """Gets the id of this Space.

        The unique identifier of this Space.

        :return: The id of this Space.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Space.

        The unique identifier of this Space.

        :param id: The id of this Space.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[a-zA-Z0-9]{1,13}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-zA-Z0-9]{1,13}$/`")

        self._id = id

    @property
    def invited_user_ids(self):
        """Gets the invited_user_ids of this Space.

        An array of user ids for people who were invited to a Space.

        :return: The invited_user_ids of this Space.
        :rtype: List[str]
        """
        return self._invited_user_ids

    @invited_user_ids.setter
    def invited_user_ids(self, invited_user_ids):
        """Sets the invited_user_ids of this Space.

        An array of user ids for people who were invited to a Space.

        :param invited_user_ids: The invited_user_ids of this Space.
        :type invited_user_ids: List[str]
        """

        self._invited_user_ids = invited_user_ids

    @property
    def is_ticketed(self):
        """Gets the is_ticketed of this Space.

        Denotes if the Space is a ticketed Space.

        :return: The is_ticketed of this Space.
        :rtype: bool
        """
        return self._is_ticketed

    @is_ticketed.setter
    def is_ticketed(self, is_ticketed):
        """Sets the is_ticketed of this Space.

        Denotes if the Space is a ticketed Space.

        :param is_ticketed: The is_ticketed of this Space.
        :type is_ticketed: bool
        """

        self._is_ticketed = is_ticketed

    @property
    def lang(self):
        """Gets the lang of this Space.

        The language of the Space.

        :return: The lang of this Space.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Space.

        The language of the Space.

        :param lang: The lang of this Space.
        :type lang: str
        """

        self._lang = lang

    @property
    def participant_count(self):
        """Gets the participant_count of this Space.

        The number of participants in a Space.

        :return: The participant_count of this Space.
        :rtype: int
        """
        return self._participant_count

    @participant_count.setter
    def participant_count(self, participant_count):
        """Sets the participant_count of this Space.

        The number of participants in a Space.

        :param participant_count: The participant_count of this Space.
        :type participant_count: int
        """

        self._participant_count = participant_count

    @property
    def scheduled_start(self):
        """Gets the scheduled_start of this Space.

        A date time stamp for when a Space is scheduled to begin.

        :return: The scheduled_start of this Space.
        :rtype: datetime
        """
        return self._scheduled_start

    @scheduled_start.setter
    def scheduled_start(self, scheduled_start):
        """Sets the scheduled_start of this Space.

        A date time stamp for when a Space is scheduled to begin.

        :param scheduled_start: The scheduled_start of this Space.
        :type scheduled_start: datetime
        """

        self._scheduled_start = scheduled_start

    @property
    def speaker_ids(self):
        """Gets the speaker_ids of this Space.

        An array of user ids for people who were speakers in a Space.

        :return: The speaker_ids of this Space.
        :rtype: List[str]
        """
        return self._speaker_ids

    @speaker_ids.setter
    def speaker_ids(self, speaker_ids):
        """Sets the speaker_ids of this Space.

        An array of user ids for people who were speakers in a Space.

        :param speaker_ids: The speaker_ids of this Space.
        :type speaker_ids: List[str]
        """

        self._speaker_ids = speaker_ids

    @property
    def started_at(self):
        """Gets the started_at of this Space.

        When the Space was started as a date string.

        :return: The started_at of this Space.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Space.

        When the Space was started as a date string.

        :param started_at: The started_at of this Space.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def state(self):
        """Gets the state of this Space.

        The current state of the Space.

        :return: The state of this Space.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Space.

        The current state of the Space.

        :param state: The state of this Space.
        :type state: str
        """
        allowed_values = ["live", "scheduled", "ended"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscriber_count(self):
        """Gets the subscriber_count of this Space.

        The number of people who have either purchased a ticket or set a reminder for this Space.

        :return: The subscriber_count of this Space.
        :rtype: int
        """
        return self._subscriber_count

    @subscriber_count.setter
    def subscriber_count(self, subscriber_count):
        """Sets the subscriber_count of this Space.

        The number of people who have either purchased a ticket or set a reminder for this Space.

        :param subscriber_count: The subscriber_count of this Space.
        :type subscriber_count: int
        """

        self._subscriber_count = subscriber_count

    @property
    def title(self):
        """Gets the title of this Space.

        The title of the Space.

        :return: The title of this Space.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Space.

        The title of the Space.

        :param title: The title of this Space.
        :type title: str
        """

        self._title = title

    @property
    def topics(self):
        """Gets the topics of this Space.

        The topics of a Space, as selected by its creator.

        :return: The topics of this Space.
        :rtype: List[SpaceTopicsInner]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Space.

        The topics of a Space, as selected by its creator.

        :param topics: The topics of this Space.
        :type topics: List[SpaceTopicsInner]
        """

        self._topics = topics

    @property
    def updated_at(self):
        """Gets the updated_at of this Space.

        When the Space was last updated.

        :return: The updated_at of this Space.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Space.

        When the Space was last updated.

        :param updated_at: The updated_at of this Space.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
