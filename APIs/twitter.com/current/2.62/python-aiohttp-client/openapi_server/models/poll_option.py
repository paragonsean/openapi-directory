# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PollOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, position: int=None, votes: int=None):
        """PollOption - a model defined in OpenAPI

        :param label: The label of this PollOption.
        :param position: The position of this PollOption.
        :param votes: The votes of this PollOption.
        """
        self.openapi_types = {
            'label': str,
            'position': int,
            'votes': int
        }

        self.attribute_map = {
            'label': 'label',
            'position': 'position',
            'votes': 'votes'
        }

        self._label = label
        self._position = position
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollOption of this PollOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this PollOption.

        The text of a poll choice.

        :return: The label of this PollOption.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PollOption.

        The text of a poll choice.

        :param label: The label of this PollOption.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")
        if label is not None and len(label) > 25:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `25`")
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")

        self._label = label

    @property
    def position(self):
        """Gets the position of this PollOption.

        Position of this choice in the poll.

        :return: The position of this PollOption.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PollOption.

        Position of this choice in the poll.

        :param position: The position of this PollOption.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def votes(self):
        """Gets the votes of this PollOption.

        Number of users who voted for this choice.

        :return: The votes of this PollOption.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this PollOption.

        Number of users who voted for this choice.

        :param votes: The votes of this PollOption.
        :type votes: int
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")

        self._votes = votes
