# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateDmEventResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dm_conversation_id: str=None, dm_event_id: str=None):
        """CreateDmEventResponseData - a model defined in OpenAPI

        :param dm_conversation_id: The dm_conversation_id of this CreateDmEventResponseData.
        :param dm_event_id: The dm_event_id of this CreateDmEventResponseData.
        """
        self.openapi_types = {
            'dm_conversation_id': str,
            'dm_event_id': str
        }

        self.attribute_map = {
            'dm_conversation_id': 'dm_conversation_id',
            'dm_event_id': 'dm_event_id'
        }

        self._dm_conversation_id = dm_conversation_id
        self._dm_event_id = dm_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDmEventResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDmEventResponse_data of this CreateDmEventResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dm_conversation_id(self):
        """Gets the dm_conversation_id of this CreateDmEventResponseData.

        Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.

        :return: The dm_conversation_id of this CreateDmEventResponseData.
        :rtype: str
        """
        return self._dm_conversation_id

    @dm_conversation_id.setter
    def dm_conversation_id(self, dm_conversation_id):
        """Sets the dm_conversation_id of this CreateDmEventResponseData.

        Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.

        :param dm_conversation_id: The dm_conversation_id of this CreateDmEventResponseData.
        :type dm_conversation_id: str
        """
        if dm_conversation_id is None:
            raise ValueError("Invalid value for `dm_conversation_id`, must not be `None`")
        if dm_conversation_id is not None and not re.search(r'^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$', dm_conversation_id):
            raise ValueError("Invalid value for `dm_conversation_id`, must be a follow pattern or equal to `/^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$/`")

        self._dm_conversation_id = dm_conversation_id

    @property
    def dm_event_id(self):
        """Gets the dm_event_id of this CreateDmEventResponseData.

        Unique identifier of a DM Event.

        :return: The dm_event_id of this CreateDmEventResponseData.
        :rtype: str
        """
        return self._dm_event_id

    @dm_event_id.setter
    def dm_event_id(self, dm_event_id):
        """Sets the dm_event_id of this CreateDmEventResponseData.

        Unique identifier of a DM Event.

        :param dm_event_id: The dm_event_id of this CreateDmEventResponseData.
        :type dm_event_id: str
        """
        if dm_event_id is None:
            raise ValueError("Invalid value for `dm_event_id`, must not be `None`")
        if dm_event_id is not None and not re.search(r'^[0-9]{1,19}$', dm_event_id):
            raise ValueError("Invalid value for `dm_event_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._dm_event_id = dm_event_id
