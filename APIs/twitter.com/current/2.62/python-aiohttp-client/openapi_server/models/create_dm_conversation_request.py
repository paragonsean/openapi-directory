# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_message_request import CreateMessageRequest
from openapi_server import util


class CreateDmConversationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_type: str=None, message: CreateMessageRequest=None, participant_ids: List[str]=None):
        """CreateDmConversationRequest - a model defined in OpenAPI

        :param conversation_type: The conversation_type of this CreateDmConversationRequest.
        :param message: The message of this CreateDmConversationRequest.
        :param participant_ids: The participant_ids of this CreateDmConversationRequest.
        """
        self.openapi_types = {
            'conversation_type': str,
            'message': CreateMessageRequest,
            'participant_ids': List[str]
        }

        self.attribute_map = {
            'conversation_type': 'conversation_type',
            'message': 'message',
            'participant_ids': 'participant_ids'
        }

        self._conversation_type = conversation_type
        self._message = message
        self._participant_ids = participant_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDmConversationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDmConversationRequest of this CreateDmConversationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_type(self):
        """Gets the conversation_type of this CreateDmConversationRequest.

        The conversation type that is being created.

        :return: The conversation_type of this CreateDmConversationRequest.
        :rtype: str
        """
        return self._conversation_type

    @conversation_type.setter
    def conversation_type(self, conversation_type):
        """Sets the conversation_type of this CreateDmConversationRequest.

        The conversation type that is being created.

        :param conversation_type: The conversation_type of this CreateDmConversationRequest.
        :type conversation_type: str
        """
        allowed_values = ["Group"]  # noqa: E501
        if conversation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `conversation_type` ({0}), must be one of {1}"
                .format(conversation_type, allowed_values)
            )

        self._conversation_type = conversation_type

    @property
    def message(self):
        """Gets the message of this CreateDmConversationRequest.


        :return: The message of this CreateDmConversationRequest.
        :rtype: CreateMessageRequest
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateDmConversationRequest.


        :param message: The message of this CreateDmConversationRequest.
        :type message: CreateMessageRequest
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def participant_ids(self):
        """Gets the participant_ids of this CreateDmConversationRequest.

        Participants for the DM Conversation.

        :return: The participant_ids of this CreateDmConversationRequest.
        :rtype: List[str]
        """
        return self._participant_ids

    @participant_ids.setter
    def participant_ids(self, participant_ids):
        """Sets the participant_ids of this CreateDmConversationRequest.

        Participants for the DM Conversation.

        :param participant_ids: The participant_ids of this CreateDmConversationRequest.
        :type participant_ids: List[str]
        """
        if participant_ids is None:
            raise ValueError("Invalid value for `participant_ids`, must not be `None`")
        if participant_ids is not None and len(participant_ids) > 49:
            raise ValueError("Invalid value for `participant_ids`, number of items must be less than or equal to `49`")
        if participant_ids is not None and len(participant_ids) < 2:
            raise ValueError("Invalid value for `participant_ids`, number of items must be greater than or equal to `2`")

        self._participant_ids = participant_ids
