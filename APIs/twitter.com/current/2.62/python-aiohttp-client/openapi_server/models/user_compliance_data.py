# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_compliance_schema import UserComplianceSchema
from openapi_server.models.user_delete_compliance_schema import UserDeleteComplianceSchema
from openapi_server.models.user_profile_modification_compliance_schema import UserProfileModificationComplianceSchema
from openapi_server.models.user_profile_modification_object_schema import UserProfileModificationObjectSchema
from openapi_server.models.user_protect_compliance_schema import UserProtectComplianceSchema
from openapi_server.models.user_scrub_geo_object_schema import UserScrubGeoObjectSchema
from openapi_server.models.user_scrub_geo_schema import UserScrubGeoSchema
from openapi_server.models.user_suspend_compliance_schema import UserSuspendComplianceSchema
from openapi_server.models.user_takedown_compliance_schema import UserTakedownComplianceSchema
from openapi_server.models.user_undelete_compliance_schema import UserUndeleteComplianceSchema
from openapi_server.models.user_unprotect_compliance_schema import UserUnprotectComplianceSchema
from openapi_server.models.user_unsuspend_compliance_schema import UserUnsuspendComplianceSchema
from openapi_server.models.user_withheld_compliance_schema import UserWithheldComplianceSchema
from openapi_server import util


class UserComplianceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_protect: UserComplianceSchema=None, user_unprotect: UserComplianceSchema=None, user_delete: UserComplianceSchema=None, user_undelete: UserComplianceSchema=None, user_suspend: UserComplianceSchema=None, user_unsuspend: UserComplianceSchema=None, user_withheld: UserTakedownComplianceSchema=None, scrub_geo: UserScrubGeoObjectSchema=None, user_profile_modification: UserProfileModificationObjectSchema=None):
        """UserComplianceData - a model defined in OpenAPI

        :param user_protect: The user_protect of this UserComplianceData.
        :param user_unprotect: The user_unprotect of this UserComplianceData.
        :param user_delete: The user_delete of this UserComplianceData.
        :param user_undelete: The user_undelete of this UserComplianceData.
        :param user_suspend: The user_suspend of this UserComplianceData.
        :param user_unsuspend: The user_unsuspend of this UserComplianceData.
        :param user_withheld: The user_withheld of this UserComplianceData.
        :param scrub_geo: The scrub_geo of this UserComplianceData.
        :param user_profile_modification: The user_profile_modification of this UserComplianceData.
        """
        self.openapi_types = {
            'user_protect': UserComplianceSchema,
            'user_unprotect': UserComplianceSchema,
            'user_delete': UserComplianceSchema,
            'user_undelete': UserComplianceSchema,
            'user_suspend': UserComplianceSchema,
            'user_unsuspend': UserComplianceSchema,
            'user_withheld': UserTakedownComplianceSchema,
            'scrub_geo': UserScrubGeoObjectSchema,
            'user_profile_modification': UserProfileModificationObjectSchema
        }

        self.attribute_map = {
            'user_protect': 'user_protect',
            'user_unprotect': 'user_unprotect',
            'user_delete': 'user_delete',
            'user_undelete': 'user_undelete',
            'user_suspend': 'user_suspend',
            'user_unsuspend': 'user_unsuspend',
            'user_withheld': 'user_withheld',
            'scrub_geo': 'scrub_geo',
            'user_profile_modification': 'user_profile_modification'
        }

        self._user_protect = user_protect
        self._user_unprotect = user_unprotect
        self._user_delete = user_delete
        self._user_undelete = user_undelete
        self._user_suspend = user_suspend
        self._user_unsuspend = user_unsuspend
        self._user_withheld = user_withheld
        self._scrub_geo = scrub_geo
        self._user_profile_modification = user_profile_modification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserComplianceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserComplianceData of this UserComplianceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_protect(self):
        """Gets the user_protect of this UserComplianceData.


        :return: The user_protect of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_protect

    @user_protect.setter
    def user_protect(self, user_protect):
        """Sets the user_protect of this UserComplianceData.


        :param user_protect: The user_protect of this UserComplianceData.
        :type user_protect: UserComplianceSchema
        """
        if user_protect is None:
            raise ValueError("Invalid value for `user_protect`, must not be `None`")

        self._user_protect = user_protect

    @property
    def user_unprotect(self):
        """Gets the user_unprotect of this UserComplianceData.


        :return: The user_unprotect of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_unprotect

    @user_unprotect.setter
    def user_unprotect(self, user_unprotect):
        """Sets the user_unprotect of this UserComplianceData.


        :param user_unprotect: The user_unprotect of this UserComplianceData.
        :type user_unprotect: UserComplianceSchema
        """
        if user_unprotect is None:
            raise ValueError("Invalid value for `user_unprotect`, must not be `None`")

        self._user_unprotect = user_unprotect

    @property
    def user_delete(self):
        """Gets the user_delete of this UserComplianceData.


        :return: The user_delete of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_delete

    @user_delete.setter
    def user_delete(self, user_delete):
        """Sets the user_delete of this UserComplianceData.


        :param user_delete: The user_delete of this UserComplianceData.
        :type user_delete: UserComplianceSchema
        """
        if user_delete is None:
            raise ValueError("Invalid value for `user_delete`, must not be `None`")

        self._user_delete = user_delete

    @property
    def user_undelete(self):
        """Gets the user_undelete of this UserComplianceData.


        :return: The user_undelete of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_undelete

    @user_undelete.setter
    def user_undelete(self, user_undelete):
        """Sets the user_undelete of this UserComplianceData.


        :param user_undelete: The user_undelete of this UserComplianceData.
        :type user_undelete: UserComplianceSchema
        """
        if user_undelete is None:
            raise ValueError("Invalid value for `user_undelete`, must not be `None`")

        self._user_undelete = user_undelete

    @property
    def user_suspend(self):
        """Gets the user_suspend of this UserComplianceData.


        :return: The user_suspend of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_suspend

    @user_suspend.setter
    def user_suspend(self, user_suspend):
        """Sets the user_suspend of this UserComplianceData.


        :param user_suspend: The user_suspend of this UserComplianceData.
        :type user_suspend: UserComplianceSchema
        """
        if user_suspend is None:
            raise ValueError("Invalid value for `user_suspend`, must not be `None`")

        self._user_suspend = user_suspend

    @property
    def user_unsuspend(self):
        """Gets the user_unsuspend of this UserComplianceData.


        :return: The user_unsuspend of this UserComplianceData.
        :rtype: UserComplianceSchema
        """
        return self._user_unsuspend

    @user_unsuspend.setter
    def user_unsuspend(self, user_unsuspend):
        """Sets the user_unsuspend of this UserComplianceData.


        :param user_unsuspend: The user_unsuspend of this UserComplianceData.
        :type user_unsuspend: UserComplianceSchema
        """
        if user_unsuspend is None:
            raise ValueError("Invalid value for `user_unsuspend`, must not be `None`")

        self._user_unsuspend = user_unsuspend

    @property
    def user_withheld(self):
        """Gets the user_withheld of this UserComplianceData.


        :return: The user_withheld of this UserComplianceData.
        :rtype: UserTakedownComplianceSchema
        """
        return self._user_withheld

    @user_withheld.setter
    def user_withheld(self, user_withheld):
        """Sets the user_withheld of this UserComplianceData.


        :param user_withheld: The user_withheld of this UserComplianceData.
        :type user_withheld: UserTakedownComplianceSchema
        """
        if user_withheld is None:
            raise ValueError("Invalid value for `user_withheld`, must not be `None`")

        self._user_withheld = user_withheld

    @property
    def scrub_geo(self):
        """Gets the scrub_geo of this UserComplianceData.


        :return: The scrub_geo of this UserComplianceData.
        :rtype: UserScrubGeoObjectSchema
        """
        return self._scrub_geo

    @scrub_geo.setter
    def scrub_geo(self, scrub_geo):
        """Sets the scrub_geo of this UserComplianceData.


        :param scrub_geo: The scrub_geo of this UserComplianceData.
        :type scrub_geo: UserScrubGeoObjectSchema
        """
        if scrub_geo is None:
            raise ValueError("Invalid value for `scrub_geo`, must not be `None`")

        self._scrub_geo = scrub_geo

    @property
    def user_profile_modification(self):
        """Gets the user_profile_modification of this UserComplianceData.


        :return: The user_profile_modification of this UserComplianceData.
        :rtype: UserProfileModificationObjectSchema
        """
        return self._user_profile_modification

    @user_profile_modification.setter
    def user_profile_modification(self, user_profile_modification):
        """Sets the user_profile_modification of this UserComplianceData.


        :param user_profile_modification: The user_profile_modification of this UserComplianceData.
        :type user_profile_modification: UserProfileModificationObjectSchema
        """
        if user_profile_modification is None:
            raise ValueError("Invalid value for `user_profile_modification`, must not be `None`")

        self._user_profile_modification = user_profile_modification
