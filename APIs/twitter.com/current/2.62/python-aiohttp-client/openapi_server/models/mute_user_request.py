# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MuteUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_user_id: str=None):
        """MuteUserRequest - a model defined in OpenAPI

        :param target_user_id: The target_user_id of this MuteUserRequest.
        """
        self.openapi_types = {
            'target_user_id': str
        }

        self.attribute_map = {
            'target_user_id': 'target_user_id'
        }

        self._target_user_id = target_user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MuteUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MuteUserRequest of this MuteUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_user_id(self):
        """Gets the target_user_id of this MuteUserRequest.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The target_user_id of this MuteUserRequest.
        :rtype: str
        """
        return self._target_user_id

    @target_user_id.setter
    def target_user_id(self, target_user_id):
        """Sets the target_user_id of this MuteUserRequest.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param target_user_id: The target_user_id of this MuteUserRequest.
        :type target_user_id: str
        """
        if target_user_id is None:
            raise ValueError("Invalid value for `target_user_id`, must not be `None`")
        if target_user_id is not None and not re.search(r'^[0-9]{1,19}$', target_user_id):
            raise ValueError("Invalid value for `target_user_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._target_user_id = target_user_id
