# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compliance_job_status import ComplianceJobStatus
from openapi_server.models.compliance_job_type import ComplianceJobType
import re
from openapi_server import util


class ComplianceJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, download_expires_at: datetime=None, download_url: str=None, id: str=None, name: str=None, status: ComplianceJobStatus=None, type: ComplianceJobType=None, upload_expires_at: datetime=None, upload_url: str=None):
        """ComplianceJob - a model defined in OpenAPI

        :param created_at: The created_at of this ComplianceJob.
        :param download_expires_at: The download_expires_at of this ComplianceJob.
        :param download_url: The download_url of this ComplianceJob.
        :param id: The id of this ComplianceJob.
        :param name: The name of this ComplianceJob.
        :param status: The status of this ComplianceJob.
        :param type: The type of this ComplianceJob.
        :param upload_expires_at: The upload_expires_at of this ComplianceJob.
        :param upload_url: The upload_url of this ComplianceJob.
        """
        self.openapi_types = {
            'created_at': datetime,
            'download_expires_at': datetime,
            'download_url': str,
            'id': str,
            'name': str,
            'status': ComplianceJobStatus,
            'type': ComplianceJobType,
            'upload_expires_at': datetime,
            'upload_url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'download_expires_at': 'download_expires_at',
            'download_url': 'download_url',
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'type': 'type',
            'upload_expires_at': 'upload_expires_at',
            'upload_url': 'upload_url'
        }

        self._created_at = created_at
        self._download_expires_at = download_expires_at
        self._download_url = download_url
        self._id = id
        self._name = name
        self._status = status
        self._type = type
        self._upload_expires_at = upload_expires_at
        self._upload_url = upload_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceJob of this ComplianceJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ComplianceJob.

        Creation time of the compliance job.

        :return: The created_at of this ComplianceJob.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ComplianceJob.

        Creation time of the compliance job.

        :param created_at: The created_at of this ComplianceJob.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def download_expires_at(self):
        """Gets the download_expires_at of this ComplianceJob.

        Expiration time of the download URL.

        :return: The download_expires_at of this ComplianceJob.
        :rtype: datetime
        """
        return self._download_expires_at

    @download_expires_at.setter
    def download_expires_at(self, download_expires_at):
        """Sets the download_expires_at of this ComplianceJob.

        Expiration time of the download URL.

        :param download_expires_at: The download_expires_at of this ComplianceJob.
        :type download_expires_at: datetime
        """
        if download_expires_at is None:
            raise ValueError("Invalid value for `download_expires_at`, must not be `None`")

        self._download_expires_at = download_expires_at

    @property
    def download_url(self):
        """Gets the download_url of this ComplianceJob.

        URL from which the user will retrieve their compliance results.

        :return: The download_url of this ComplianceJob.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ComplianceJob.

        URL from which the user will retrieve their compliance results.

        :param download_url: The download_url of this ComplianceJob.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def id(self):
        """Gets the id of this ComplianceJob.

        Compliance Job ID.

        :return: The id of this ComplianceJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplianceJob.

        Compliance Job ID.

        :param id: The id of this ComplianceJob.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ComplianceJob.

        User-provided name for a compliance job.

        :return: The name of this ComplianceJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComplianceJob.

        User-provided name for a compliance job.

        :param name: The name of this ComplianceJob.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this ComplianceJob.


        :return: The status of this ComplianceJob.
        :rtype: ComplianceJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComplianceJob.


        :param status: The status of this ComplianceJob.
        :type status: ComplianceJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this ComplianceJob.


        :return: The type of this ComplianceJob.
        :rtype: ComplianceJobType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComplianceJob.


        :param type: The type of this ComplianceJob.
        :type type: ComplianceJobType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def upload_expires_at(self):
        """Gets the upload_expires_at of this ComplianceJob.

        Expiration time of the upload URL.

        :return: The upload_expires_at of this ComplianceJob.
        :rtype: datetime
        """
        return self._upload_expires_at

    @upload_expires_at.setter
    def upload_expires_at(self, upload_expires_at):
        """Sets the upload_expires_at of this ComplianceJob.

        Expiration time of the upload URL.

        :param upload_expires_at: The upload_expires_at of this ComplianceJob.
        :type upload_expires_at: datetime
        """
        if upload_expires_at is None:
            raise ValueError("Invalid value for `upload_expires_at`, must not be `None`")

        self._upload_expires_at = upload_expires_at

    @property
    def upload_url(self):
        """Gets the upload_url of this ComplianceJob.

        URL to which the user will upload their Tweet or user IDs.

        :return: The upload_url of this ComplianceJob.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this ComplianceJob.

        URL to which the user will upload their Tweet or user IDs.

        :param upload_url: The upload_url of this ComplianceJob.
        :type upload_url: str
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")

        self._upload_url = upload_url
