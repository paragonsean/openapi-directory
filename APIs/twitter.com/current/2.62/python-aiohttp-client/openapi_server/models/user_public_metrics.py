# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserPublicMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, followers_count: int=None, following_count: int=None, listed_count: int=None, tweet_count: int=None):
        """UserPublicMetrics - a model defined in OpenAPI

        :param followers_count: The followers_count of this UserPublicMetrics.
        :param following_count: The following_count of this UserPublicMetrics.
        :param listed_count: The listed_count of this UserPublicMetrics.
        :param tweet_count: The tweet_count of this UserPublicMetrics.
        """
        self.openapi_types = {
            'followers_count': int,
            'following_count': int,
            'listed_count': int,
            'tweet_count': int
        }

        self.attribute_map = {
            'followers_count': 'followers_count',
            'following_count': 'following_count',
            'listed_count': 'listed_count',
            'tweet_count': 'tweet_count'
        }

        self._followers_count = followers_count
        self._following_count = following_count
        self._listed_count = listed_count
        self._tweet_count = tweet_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPublicMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_public_metrics of this UserPublicMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def followers_count(self):
        """Gets the followers_count of this UserPublicMetrics.

        Number of Users who are following this User.

        :return: The followers_count of this UserPublicMetrics.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this UserPublicMetrics.

        Number of Users who are following this User.

        :param followers_count: The followers_count of this UserPublicMetrics.
        :type followers_count: int
        """
        if followers_count is None:
            raise ValueError("Invalid value for `followers_count`, must not be `None`")

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this UserPublicMetrics.

        Number of Users this User is following.

        :return: The following_count of this UserPublicMetrics.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this UserPublicMetrics.

        Number of Users this User is following.

        :param following_count: The following_count of this UserPublicMetrics.
        :type following_count: int
        """
        if following_count is None:
            raise ValueError("Invalid value for `following_count`, must not be `None`")

        self._following_count = following_count

    @property
    def listed_count(self):
        """Gets the listed_count of this UserPublicMetrics.

        The number of lists that include this User.

        :return: The listed_count of this UserPublicMetrics.
        :rtype: int
        """
        return self._listed_count

    @listed_count.setter
    def listed_count(self, listed_count):
        """Sets the listed_count of this UserPublicMetrics.

        The number of lists that include this User.

        :param listed_count: The listed_count of this UserPublicMetrics.
        :type listed_count: int
        """
        if listed_count is None:
            raise ValueError("Invalid value for `listed_count`, must not be `None`")

        self._listed_count = listed_count

    @property
    def tweet_count(self):
        """Gets the tweet_count of this UserPublicMetrics.

        The number of Tweets (including Retweets) posted by this User.

        :return: The tweet_count of this UserPublicMetrics.
        :rtype: int
        """
        return self._tweet_count

    @tweet_count.setter
    def tweet_count(self, tweet_count):
        """Sets the tweet_count of this UserPublicMetrics.

        The number of Tweets (including Retweets) posted by this User.

        :param tweet_count: The tweet_count of this UserPublicMetrics.
        :type tweet_count: int
        """
        if tweet_count is None:
            raise ValueError("Invalid value for `tweet_count`, must not be `None`")

        self._tweet_count = tweet_count
