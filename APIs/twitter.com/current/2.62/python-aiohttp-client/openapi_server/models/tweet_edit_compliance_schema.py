# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_edit_compliance_object_schema import TweetEditComplianceObjectSchema
from openapi_server import util


class TweetEditComplianceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tweet_edit: TweetEditComplianceObjectSchema=None):
        """TweetEditComplianceSchema - a model defined in OpenAPI

        :param tweet_edit: The tweet_edit of this TweetEditComplianceSchema.
        """
        self.openapi_types = {
            'tweet_edit': TweetEditComplianceObjectSchema
        }

        self.attribute_map = {
            'tweet_edit': 'tweet_edit'
        }

        self._tweet_edit = tweet_edit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetEditComplianceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetEditComplianceSchema of this TweetEditComplianceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tweet_edit(self):
        """Gets the tweet_edit of this TweetEditComplianceSchema.


        :return: The tweet_edit of this TweetEditComplianceSchema.
        :rtype: TweetEditComplianceObjectSchema
        """
        return self._tweet_edit

    @tweet_edit.setter
    def tweet_edit(self, tweet_edit):
        """Sets the tweet_edit of this TweetEditComplianceSchema.


        :param tweet_edit: The tweet_edit of this TweetEditComplianceSchema.
        :type tweet_edit: TweetEditComplianceObjectSchema
        """
        if tweet_edit is None:
            raise ValueError("Invalid value for `tweet_edit`, must not be `None`")

        self._tweet_edit = tweet_edit
