# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TweetNonPublicMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, impression_count: int=None):
        """TweetNonPublicMetrics - a model defined in OpenAPI

        :param impression_count: The impression_count of this TweetNonPublicMetrics.
        """
        self.openapi_types = {
            'impression_count': int
        }

        self.attribute_map = {
            'impression_count': 'impression_count'
        }

        self._impression_count = impression_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetNonPublicMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tweet_non_public_metrics of this TweetNonPublicMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def impression_count(self):
        """Gets the impression_count of this TweetNonPublicMetrics.

        Number of times this Tweet has been viewed.

        :return: The impression_count of this TweetNonPublicMetrics.
        :rtype: int
        """
        return self._impression_count

    @impression_count.setter
    def impression_count(self, impression_count):
        """Sets the impression_count of this TweetNonPublicMetrics.

        Number of times this Tweet has been viewed.

        :param impression_count: The impression_count of this TweetNonPublicMetrics.
        :type impression_count: int
        """

        self._impression_count = impression_count
