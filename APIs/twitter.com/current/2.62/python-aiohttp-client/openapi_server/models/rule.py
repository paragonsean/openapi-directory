# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, tag: str=None, value: str=None):
        """Rule - a model defined in OpenAPI

        :param id: The id of this Rule.
        :param tag: The tag of this Rule.
        :param value: The value of this Rule.
        """
        self.openapi_types = {
            'id': str,
            'tag': str,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'tag': 'tag',
            'value': 'value'
        }

        self._id = id
        self._tag = tag
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Rule.

        Unique identifier of this rule.

        :return: The id of this Rule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rule.

        Unique identifier of this rule.

        :param id: The id of this Rule.
        :type id: str
        """
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def tag(self):
        """Gets the tag of this Rule.

        A tag meant for the labeling of user provided rules.

        :return: The tag of this Rule.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Rule.

        A tag meant for the labeling of user provided rules.

        :param tag: The tag of this Rule.
        :type tag: str
        """

        self._tag = tag

    @property
    def value(self):
        """Gets the value of this Rule.

        The filterlang value of the rule.

        :return: The value of this Rule.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Rule.

        The filterlang value of the rule.

        :param value: The value of this Rule.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
