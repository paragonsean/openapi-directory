# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media import Media
from openapi_server.models.place import Place
from openapi_server.models.poll import Poll
from openapi_server.models.topic import Topic
from openapi_server.models.tweet import Tweet
from openapi_server.models.user import User
from openapi_server import util


class Expansions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media: List[Media]=None, places: List[Place]=None, polls: List[Poll]=None, topics: List[Topic]=None, tweets: List[Tweet]=None, users: List[User]=None):
        """Expansions - a model defined in OpenAPI

        :param media: The media of this Expansions.
        :param places: The places of this Expansions.
        :param polls: The polls of this Expansions.
        :param topics: The topics of this Expansions.
        :param tweets: The tweets of this Expansions.
        :param users: The users of this Expansions.
        """
        self.openapi_types = {
            'media': List[Media],
            'places': List[Place],
            'polls': List[Poll],
            'topics': List[Topic],
            'tweets': List[Tweet],
            'users': List[User]
        }

        self.attribute_map = {
            'media': 'media',
            'places': 'places',
            'polls': 'polls',
            'topics': 'topics',
            'tweets': 'tweets',
            'users': 'users'
        }

        self._media = media
        self._places = places
        self._polls = polls
        self._topics = topics
        self._tweets = tweets
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Expansions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Expansions of this Expansions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media(self):
        """Gets the media of this Expansions.


        :return: The media of this Expansions.
        :rtype: List[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Expansions.


        :param media: The media of this Expansions.
        :type media: List[Media]
        """
        if media is not None and len(media) < 1:
            raise ValueError("Invalid value for `media`, number of items must be greater than or equal to `1`")

        self._media = media

    @property
    def places(self):
        """Gets the places of this Expansions.


        :return: The places of this Expansions.
        :rtype: List[Place]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this Expansions.


        :param places: The places of this Expansions.
        :type places: List[Place]
        """
        if places is not None and len(places) < 1:
            raise ValueError("Invalid value for `places`, number of items must be greater than or equal to `1`")

        self._places = places

    @property
    def polls(self):
        """Gets the polls of this Expansions.


        :return: The polls of this Expansions.
        :rtype: List[Poll]
        """
        return self._polls

    @polls.setter
    def polls(self, polls):
        """Sets the polls of this Expansions.


        :param polls: The polls of this Expansions.
        :type polls: List[Poll]
        """
        if polls is not None and len(polls) < 1:
            raise ValueError("Invalid value for `polls`, number of items must be greater than or equal to `1`")

        self._polls = polls

    @property
    def topics(self):
        """Gets the topics of this Expansions.


        :return: The topics of this Expansions.
        :rtype: List[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Expansions.


        :param topics: The topics of this Expansions.
        :type topics: List[Topic]
        """
        if topics is not None and len(topics) < 1:
            raise ValueError("Invalid value for `topics`, number of items must be greater than or equal to `1`")

        self._topics = topics

    @property
    def tweets(self):
        """Gets the tweets of this Expansions.


        :return: The tweets of this Expansions.
        :rtype: List[Tweet]
        """
        return self._tweets

    @tweets.setter
    def tweets(self, tweets):
        """Sets the tweets of this Expansions.


        :param tweets: The tweets of this Expansions.
        :type tweets: List[Tweet]
        """
        if tweets is not None and len(tweets) < 1:
            raise ValueError("Invalid value for `tweets`, number of items must be greater than or equal to `1`")

        self._tweets = tweets

    @property
    def users(self):
        """Gets the users of this Expansions.


        :return: The users of this Expansions.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Expansions.


        :param users: The users of this Expansions.
        :type users: List[User]
        """
        if users is not None and len(users) < 1:
            raise ValueError("Invalid value for `users`, number of items must be greater than or equal to `1`")

        self._users = users
