# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url_image import UrlImage
import re
from openapi_server import util


class UrlFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_url: str=None, expanded_url: str=None, images: List[UrlImage]=None, media_key: str=None, status: int=None, title: str=None, unwound_url: str=None, url: str=None):
        """UrlFields - a model defined in OpenAPI

        :param description: The description of this UrlFields.
        :param display_url: The display_url of this UrlFields.
        :param expanded_url: The expanded_url of this UrlFields.
        :param images: The images of this UrlFields.
        :param media_key: The media_key of this UrlFields.
        :param status: The status of this UrlFields.
        :param title: The title of this UrlFields.
        :param unwound_url: The unwound_url of this UrlFields.
        :param url: The url of this UrlFields.
        """
        self.openapi_types = {
            'description': str,
            'display_url': str,
            'expanded_url': str,
            'images': List[UrlImage],
            'media_key': str,
            'status': int,
            'title': str,
            'unwound_url': str,
            'url': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_url': 'display_url',
            'expanded_url': 'expanded_url',
            'images': 'images',
            'media_key': 'media_key',
            'status': 'status',
            'title': 'title',
            'unwound_url': 'unwound_url',
            'url': 'url'
        }

        self._description = description
        self._display_url = display_url
        self._expanded_url = expanded_url
        self._images = images
        self._media_key = media_key
        self._status = status
        self._title = title
        self._unwound_url = unwound_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlFields of this UrlFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UrlFields.

        Description of the URL landing page.

        :return: The description of this UrlFields.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UrlFields.

        Description of the URL landing page.

        :param description: The description of this UrlFields.
        :type description: str
        """

        self._description = description

    @property
    def display_url(self):
        """Gets the display_url of this UrlFields.

        The URL as displayed in the Twitter client.

        :return: The display_url of this UrlFields.
        :rtype: str
        """
        return self._display_url

    @display_url.setter
    def display_url(self, display_url):
        """Sets the display_url of this UrlFields.

        The URL as displayed in the Twitter client.

        :param display_url: The display_url of this UrlFields.
        :type display_url: str
        """

        self._display_url = display_url

    @property
    def expanded_url(self):
        """Gets the expanded_url of this UrlFields.

        A validly formatted URL.

        :return: The expanded_url of this UrlFields.
        :rtype: str
        """
        return self._expanded_url

    @expanded_url.setter
    def expanded_url(self, expanded_url):
        """Sets the expanded_url of this UrlFields.

        A validly formatted URL.

        :param expanded_url: The expanded_url of this UrlFields.
        :type expanded_url: str
        """

        self._expanded_url = expanded_url

    @property
    def images(self):
        """Gets the images of this UrlFields.


        :return: The images of this UrlFields.
        :rtype: List[UrlImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this UrlFields.


        :param images: The images of this UrlFields.
        :type images: List[UrlImage]
        """
        if images is not None and len(images) < 1:
            raise ValueError("Invalid value for `images`, number of items must be greater than or equal to `1`")

        self._images = images

    @property
    def media_key(self):
        """Gets the media_key of this UrlFields.

        The Media Key identifier for this attachment.

        :return: The media_key of this UrlFields.
        :rtype: str
        """
        return self._media_key

    @media_key.setter
    def media_key(self, media_key):
        """Sets the media_key of this UrlFields.

        The Media Key identifier for this attachment.

        :param media_key: The media_key of this UrlFields.
        :type media_key: str
        """
        if media_key is not None and not re.search(r'^([0-9]+)_([0-9]+)$', media_key):
            raise ValueError("Invalid value for `media_key`, must be a follow pattern or equal to `/^([0-9]+)_([0-9]+)$/`")

        self._media_key = media_key

    @property
    def status(self):
        """Gets the status of this UrlFields.

        HTTP Status Code.

        :return: The status of this UrlFields.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UrlFields.

        HTTP Status Code.

        :param status: The status of this UrlFields.
        :type status: int
        """
        if status is not None and status > 599:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `599`")
        if status is not None and status < 100:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `100`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this UrlFields.

        Title of the page the URL points to.

        :return: The title of this UrlFields.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UrlFields.

        Title of the page the URL points to.

        :param title: The title of this UrlFields.
        :type title: str
        """

        self._title = title

    @property
    def unwound_url(self):
        """Gets the unwound_url of this UrlFields.

        Fully resolved url.

        :return: The unwound_url of this UrlFields.
        :rtype: str
        """
        return self._unwound_url

    @unwound_url.setter
    def unwound_url(self, unwound_url):
        """Sets the unwound_url of this UrlFields.

        Fully resolved url.

        :param unwound_url: The unwound_url of this UrlFields.
        :type unwound_url: str
        """

        self._unwound_url = unwound_url

    @property
    def url(self):
        """Gets the url of this UrlFields.

        A validly formatted URL.

        :return: The url of this UrlFields.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UrlFields.

        A validly formatted URL.

        :param url: The url of this UrlFields.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
