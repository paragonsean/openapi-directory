# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.problem import Problem
from openapi_server import util


class ResourceUnauthorizedProblem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, status: int=None, title: str=None, type: str=None, parameter: str=None, resource_id: str=None, resource_type: str=None, section: str=None, value: str=None):
        """ResourceUnauthorizedProblem - a model defined in OpenAPI

        :param detail: The detail of this ResourceUnauthorizedProblem.
        :param status: The status of this ResourceUnauthorizedProblem.
        :param title: The title of this ResourceUnauthorizedProblem.
        :param type: The type of this ResourceUnauthorizedProblem.
        :param parameter: The parameter of this ResourceUnauthorizedProblem.
        :param resource_id: The resource_id of this ResourceUnauthorizedProblem.
        :param resource_type: The resource_type of this ResourceUnauthorizedProblem.
        :param section: The section of this ResourceUnauthorizedProblem.
        :param value: The value of this ResourceUnauthorizedProblem.
        """
        self.openapi_types = {
            'detail': str,
            'status': int,
            'title': str,
            'type': str,
            'parameter': str,
            'resource_id': str,
            'resource_type': str,
            'section': str,
            'value': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'status': 'status',
            'title': 'title',
            'type': 'type',
            'parameter': 'parameter',
            'resource_id': 'resource_id',
            'resource_type': 'resource_type',
            'section': 'section',
            'value': 'value'
        }

        self._detail = detail
        self._status = status
        self._title = title
        self._type = type
        self._parameter = parameter
        self._resource_id = resource_id
        self._resource_type = resource_type
        self._section = section
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceUnauthorizedProblem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceUnauthorizedProblem of this ResourceUnauthorizedProblem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ResourceUnauthorizedProblem.


        :return: The detail of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ResourceUnauthorizedProblem.


        :param detail: The detail of this ResourceUnauthorizedProblem.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this ResourceUnauthorizedProblem.


        :return: The status of this ResourceUnauthorizedProblem.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResourceUnauthorizedProblem.


        :param status: The status of this ResourceUnauthorizedProblem.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ResourceUnauthorizedProblem.


        :return: The title of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResourceUnauthorizedProblem.


        :param title: The title of this ResourceUnauthorizedProblem.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ResourceUnauthorizedProblem.


        :return: The type of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceUnauthorizedProblem.


        :param type: The type of this ResourceUnauthorizedProblem.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def parameter(self):
        """Gets the parameter of this ResourceUnauthorizedProblem.


        :return: The parameter of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ResourceUnauthorizedProblem.


        :param parameter: The parameter of this ResourceUnauthorizedProblem.
        :type parameter: str
        """
        if parameter is None:
            raise ValueError("Invalid value for `parameter`, must not be `None`")

        self._parameter = parameter

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceUnauthorizedProblem.


        :return: The resource_id of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceUnauthorizedProblem.


        :param resource_id: The resource_id of this ResourceUnauthorizedProblem.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceUnauthorizedProblem.


        :return: The resource_type of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceUnauthorizedProblem.


        :param resource_type: The resource_type of this ResourceUnauthorizedProblem.
        :type resource_type: str
        """
        allowed_values = ["user", "tweet", "media", "list", "space"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def section(self):
        """Gets the section of this ResourceUnauthorizedProblem.


        :return: The section of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this ResourceUnauthorizedProblem.


        :param section: The section of this ResourceUnauthorizedProblem.
        :type section: str
        """
        allowed_values = ["data", "includes"]  # noqa: E501
        if section not in allowed_values:
            raise ValueError(
                "Invalid value for `section` ({0}), must be one of {1}"
                .format(section, allowed_values)
            )

        self._section = section

    @property
    def value(self):
        """Gets the value of this ResourceUnauthorizedProblem.


        :return: The value of this ResourceUnauthorizedProblem.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ResourceUnauthorizedProblem.


        :param value: The value of this ResourceUnauthorizedProblem.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
