# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MentionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: int=None, start: int=None, id: str=None, username: str=None):
        """MentionEntity - a model defined in OpenAPI

        :param end: The end of this MentionEntity.
        :param start: The start of this MentionEntity.
        :param id: The id of this MentionEntity.
        :param username: The username of this MentionEntity.
        """
        self.openapi_types = {
            'end': int,
            'start': int,
            'id': str,
            'username': str
        }

        self.attribute_map = {
            'end': 'end',
            'start': 'start',
            'id': 'id',
            'username': 'username'
        }

        self._end = end
        self._start = start
        self._id = id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MentionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MentionEntity of this MentionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this MentionEntity.

        Index (zero-based) at which position this entity ends.  The index is exclusive.

        :return: The end of this MentionEntity.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this MentionEntity.

        Index (zero-based) at which position this entity ends.  The index is exclusive.

        :param end: The end of this MentionEntity.
        :type end: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")
        if end is not None and end < 0:
            raise ValueError("Invalid value for `end`, must be a value greater than or equal to `0`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this MentionEntity.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :return: The start of this MentionEntity.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this MentionEntity.

        Index (zero-based) at which position this entity starts.  The index is inclusive.

        :param start: The start of this MentionEntity.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")
        if start is not None and start < 0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")

        self._start = start

    @property
    def id(self):
        """Gets the id of this MentionEntity.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The id of this MentionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MentionEntity.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param id: The id of this MentionEntity.
        :type id: str
        """
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def username(self):
        """Gets the username of this MentionEntity.

        The Twitter handle (screen name) of this user.

        :return: The username of this MentionEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MentionEntity.

        The Twitter handle (screen name) of this user.

        :param username: The username of this MentionEntity.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and not re.search(r'^[A-Za-z0-9_]{1,15}$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[A-Za-z0-9_]{1,15}$/`")

        self._username = username
