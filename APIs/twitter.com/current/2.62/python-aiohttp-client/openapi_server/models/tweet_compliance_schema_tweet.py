# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TweetComplianceSchemaTweet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_id: str=None, id: str=None):
        """TweetComplianceSchemaTweet - a model defined in OpenAPI

        :param author_id: The author_id of this TweetComplianceSchemaTweet.
        :param id: The id of this TweetComplianceSchemaTweet.
        """
        self.openapi_types = {
            'author_id': str,
            'id': str
        }

        self.attribute_map = {
            'author_id': 'author_id',
            'id': 'id'
        }

        self._author_id = author_id
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetComplianceSchemaTweet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetComplianceSchema_tweet of this TweetComplianceSchemaTweet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_id(self):
        """Gets the author_id of this TweetComplianceSchemaTweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The author_id of this TweetComplianceSchemaTweet.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this TweetComplianceSchemaTweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param author_id: The author_id of this TweetComplianceSchemaTweet.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")
        if author_id is not None and not re.search(r'^[0-9]{1,19}$', author_id):
            raise ValueError("Invalid value for `author_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._author_id = author_id

    @property
    def id(self):
        """Gets the id of this TweetComplianceSchemaTweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The id of this TweetComplianceSchemaTweet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TweetComplianceSchemaTweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param id: The id of this TweetComplianceSchemaTweet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id
