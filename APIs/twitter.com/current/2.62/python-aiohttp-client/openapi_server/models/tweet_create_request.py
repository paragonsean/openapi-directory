# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tweet_create_request_geo import TweetCreateRequestGeo
from openapi_server.models.tweet_create_request_media import TweetCreateRequestMedia
from openapi_server.models.tweet_create_request_poll import TweetCreateRequestPoll
from openapi_server.models.tweet_create_request_reply import TweetCreateRequestReply
import re
from openapi_server import util


class TweetCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_uri: str=None, direct_message_deep_link: str=None, for_super_followers_only: bool=False, geo: TweetCreateRequestGeo=None, media: TweetCreateRequestMedia=None, nullcast: bool=False, poll: TweetCreateRequestPoll=None, quote_tweet_id: str=None, reply: TweetCreateRequestReply=None, reply_settings: str=None, text: str=None):
        """TweetCreateRequest - a model defined in OpenAPI

        :param card_uri: The card_uri of this TweetCreateRequest.
        :param direct_message_deep_link: The direct_message_deep_link of this TweetCreateRequest.
        :param for_super_followers_only: The for_super_followers_only of this TweetCreateRequest.
        :param geo: The geo of this TweetCreateRequest.
        :param media: The media of this TweetCreateRequest.
        :param nullcast: The nullcast of this TweetCreateRequest.
        :param poll: The poll of this TweetCreateRequest.
        :param quote_tweet_id: The quote_tweet_id of this TweetCreateRequest.
        :param reply: The reply of this TweetCreateRequest.
        :param reply_settings: The reply_settings of this TweetCreateRequest.
        :param text: The text of this TweetCreateRequest.
        """
        self.openapi_types = {
            'card_uri': str,
            'direct_message_deep_link': str,
            'for_super_followers_only': bool,
            'geo': TweetCreateRequestGeo,
            'media': TweetCreateRequestMedia,
            'nullcast': bool,
            'poll': TweetCreateRequestPoll,
            'quote_tweet_id': str,
            'reply': TweetCreateRequestReply,
            'reply_settings': str,
            'text': str
        }

        self.attribute_map = {
            'card_uri': 'card_uri',
            'direct_message_deep_link': 'direct_message_deep_link',
            'for_super_followers_only': 'for_super_followers_only',
            'geo': 'geo',
            'media': 'media',
            'nullcast': 'nullcast',
            'poll': 'poll',
            'quote_tweet_id': 'quote_tweet_id',
            'reply': 'reply',
            'reply_settings': 'reply_settings',
            'text': 'text'
        }

        self._card_uri = card_uri
        self._direct_message_deep_link = direct_message_deep_link
        self._for_super_followers_only = for_super_followers_only
        self._geo = geo
        self._media = media
        self._nullcast = nullcast
        self._poll = poll
        self._quote_tweet_id = quote_tweet_id
        self._reply = reply
        self._reply_settings = reply_settings
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetCreateRequest of this TweetCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_uri(self):
        """Gets the card_uri of this TweetCreateRequest.

        Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.

        :return: The card_uri of this TweetCreateRequest.
        :rtype: str
        """
        return self._card_uri

    @card_uri.setter
    def card_uri(self, card_uri):
        """Sets the card_uri of this TweetCreateRequest.

        Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.

        :param card_uri: The card_uri of this TweetCreateRequest.
        :type card_uri: str
        """

        self._card_uri = card_uri

    @property
    def direct_message_deep_link(self):
        """Gets the direct_message_deep_link of this TweetCreateRequest.

        Link to take the conversation from the public timeline to a private Direct Message.

        :return: The direct_message_deep_link of this TweetCreateRequest.
        :rtype: str
        """
        return self._direct_message_deep_link

    @direct_message_deep_link.setter
    def direct_message_deep_link(self, direct_message_deep_link):
        """Sets the direct_message_deep_link of this TweetCreateRequest.

        Link to take the conversation from the public timeline to a private Direct Message.

        :param direct_message_deep_link: The direct_message_deep_link of this TweetCreateRequest.
        :type direct_message_deep_link: str
        """

        self._direct_message_deep_link = direct_message_deep_link

    @property
    def for_super_followers_only(self):
        """Gets the for_super_followers_only of this TweetCreateRequest.

        Exclusive Tweet for super followers.

        :return: The for_super_followers_only of this TweetCreateRequest.
        :rtype: bool
        """
        return self._for_super_followers_only

    @for_super_followers_only.setter
    def for_super_followers_only(self, for_super_followers_only):
        """Sets the for_super_followers_only of this TweetCreateRequest.

        Exclusive Tweet for super followers.

        :param for_super_followers_only: The for_super_followers_only of this TweetCreateRequest.
        :type for_super_followers_only: bool
        """

        self._for_super_followers_only = for_super_followers_only

    @property
    def geo(self):
        """Gets the geo of this TweetCreateRequest.


        :return: The geo of this TweetCreateRequest.
        :rtype: TweetCreateRequestGeo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this TweetCreateRequest.


        :param geo: The geo of this TweetCreateRequest.
        :type geo: TweetCreateRequestGeo
        """

        self._geo = geo

    @property
    def media(self):
        """Gets the media of this TweetCreateRequest.


        :return: The media of this TweetCreateRequest.
        :rtype: TweetCreateRequestMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this TweetCreateRequest.


        :param media: The media of this TweetCreateRequest.
        :type media: TweetCreateRequestMedia
        """

        self._media = media

    @property
    def nullcast(self):
        """Gets the nullcast of this TweetCreateRequest.

        Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.

        :return: The nullcast of this TweetCreateRequest.
        :rtype: bool
        """
        return self._nullcast

    @nullcast.setter
    def nullcast(self, nullcast):
        """Sets the nullcast of this TweetCreateRequest.

        Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.

        :param nullcast: The nullcast of this TweetCreateRequest.
        :type nullcast: bool
        """

        self._nullcast = nullcast

    @property
    def poll(self):
        """Gets the poll of this TweetCreateRequest.


        :return: The poll of this TweetCreateRequest.
        :rtype: TweetCreateRequestPoll
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this TweetCreateRequest.


        :param poll: The poll of this TweetCreateRequest.
        :type poll: TweetCreateRequestPoll
        """

        self._poll = poll

    @property
    def quote_tweet_id(self):
        """Gets the quote_tweet_id of this TweetCreateRequest.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The quote_tweet_id of this TweetCreateRequest.
        :rtype: str
        """
        return self._quote_tweet_id

    @quote_tweet_id.setter
    def quote_tweet_id(self, quote_tweet_id):
        """Sets the quote_tweet_id of this TweetCreateRequest.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param quote_tweet_id: The quote_tweet_id of this TweetCreateRequest.
        :type quote_tweet_id: str
        """
        if quote_tweet_id is not None and not re.search(r'^[0-9]{1,19}$', quote_tweet_id):
            raise ValueError("Invalid value for `quote_tweet_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._quote_tweet_id = quote_tweet_id

    @property
    def reply(self):
        """Gets the reply of this TweetCreateRequest.


        :return: The reply of this TweetCreateRequest.
        :rtype: TweetCreateRequestReply
        """
        return self._reply

    @reply.setter
    def reply(self, reply):
        """Sets the reply of this TweetCreateRequest.


        :param reply: The reply of this TweetCreateRequest.
        :type reply: TweetCreateRequestReply
        """

        self._reply = reply

    @property
    def reply_settings(self):
        """Gets the reply_settings of this TweetCreateRequest.

        Settings to indicate who can reply to the Tweet.

        :return: The reply_settings of this TweetCreateRequest.
        :rtype: str
        """
        return self._reply_settings

    @reply_settings.setter
    def reply_settings(self, reply_settings):
        """Sets the reply_settings of this TweetCreateRequest.

        Settings to indicate who can reply to the Tweet.

        :param reply_settings: The reply_settings of this TweetCreateRequest.
        :type reply_settings: str
        """
        allowed_values = ["following", "mentionedUsers"]  # noqa: E501
        if reply_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `reply_settings` ({0}), must be one of {1}"
                .format(reply_settings, allowed_values)
            )

        self._reply_settings = reply_settings

    @property
    def text(self):
        """Gets the text of this TweetCreateRequest.

        The content of the Tweet.

        :return: The text of this TweetCreateRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TweetCreateRequest.

        The content of the Tweet.

        :param text: The text of this TweetCreateRequest.
        :type text: str
        """

        self._text = text
