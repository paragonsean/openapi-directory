# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dm_event_referenced_tweets_inner import DmEventReferencedTweetsInner
import re
from openapi_server import util


class TweetEditComplianceObjectSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edit_tweet_ids: List[str]=None, event_at: datetime=None, initial_tweet_id: str=None, tweet: DmEventReferencedTweetsInner=None):
        """TweetEditComplianceObjectSchema - a model defined in OpenAPI

        :param edit_tweet_ids: The edit_tweet_ids of this TweetEditComplianceObjectSchema.
        :param event_at: The event_at of this TweetEditComplianceObjectSchema.
        :param initial_tweet_id: The initial_tweet_id of this TweetEditComplianceObjectSchema.
        :param tweet: The tweet of this TweetEditComplianceObjectSchema.
        """
        self.openapi_types = {
            'edit_tweet_ids': List[str],
            'event_at': datetime,
            'initial_tweet_id': str,
            'tweet': DmEventReferencedTweetsInner
        }

        self.attribute_map = {
            'edit_tweet_ids': 'edit_tweet_ids',
            'event_at': 'event_at',
            'initial_tweet_id': 'initial_tweet_id',
            'tweet': 'tweet'
        }

        self._edit_tweet_ids = edit_tweet_ids
        self._event_at = event_at
        self._initial_tweet_id = initial_tweet_id
        self._tweet = tweet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetEditComplianceObjectSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TweetEditComplianceObjectSchema of this TweetEditComplianceObjectSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edit_tweet_ids(self):
        """Gets the edit_tweet_ids of this TweetEditComplianceObjectSchema.


        :return: The edit_tweet_ids of this TweetEditComplianceObjectSchema.
        :rtype: List[str]
        """
        return self._edit_tweet_ids

    @edit_tweet_ids.setter
    def edit_tweet_ids(self, edit_tweet_ids):
        """Sets the edit_tweet_ids of this TweetEditComplianceObjectSchema.


        :param edit_tweet_ids: The edit_tweet_ids of this TweetEditComplianceObjectSchema.
        :type edit_tweet_ids: List[str]
        """
        if edit_tweet_ids is None:
            raise ValueError("Invalid value for `edit_tweet_ids`, must not be `None`")
        if edit_tweet_ids is not None and len(edit_tweet_ids) < 1:
            raise ValueError("Invalid value for `edit_tweet_ids`, number of items must be greater than or equal to `1`")

        self._edit_tweet_ids = edit_tweet_ids

    @property
    def event_at(self):
        """Gets the event_at of this TweetEditComplianceObjectSchema.

        Event time.

        :return: The event_at of this TweetEditComplianceObjectSchema.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this TweetEditComplianceObjectSchema.

        Event time.

        :param event_at: The event_at of this TweetEditComplianceObjectSchema.
        :type event_at: datetime
        """
        if event_at is None:
            raise ValueError("Invalid value for `event_at`, must not be `None`")

        self._event_at = event_at

    @property
    def initial_tweet_id(self):
        """Gets the initial_tweet_id of this TweetEditComplianceObjectSchema.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The initial_tweet_id of this TweetEditComplianceObjectSchema.
        :rtype: str
        """
        return self._initial_tweet_id

    @initial_tweet_id.setter
    def initial_tweet_id(self, initial_tweet_id):
        """Sets the initial_tweet_id of this TweetEditComplianceObjectSchema.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param initial_tweet_id: The initial_tweet_id of this TweetEditComplianceObjectSchema.
        :type initial_tweet_id: str
        """
        if initial_tweet_id is None:
            raise ValueError("Invalid value for `initial_tweet_id`, must not be `None`")
        if initial_tweet_id is not None and not re.search(r'^[0-9]{1,19}$', initial_tweet_id):
            raise ValueError("Invalid value for `initial_tweet_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._initial_tweet_id = initial_tweet_id

    @property
    def tweet(self):
        """Gets the tweet of this TweetEditComplianceObjectSchema.


        :return: The tweet of this TweetEditComplianceObjectSchema.
        :rtype: DmEventReferencedTweetsInner
        """
        return self._tweet

    @tweet.setter
    def tweet(self, tweet):
        """Sets the tweet of this TweetEditComplianceObjectSchema.


        :param tweet: The tweet of this TweetEditComplianceObjectSchema.
        :type tweet: DmEventReferencedTweetsInner
        """
        if tweet is None:
            raise ValueError("Invalid value for `tweet`, must not be `None`")

        self._tweet = tweet
