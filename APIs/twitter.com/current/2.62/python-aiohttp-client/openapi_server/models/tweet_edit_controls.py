# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TweetEditControls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, editable_until: datetime=None, edits_remaining: int=None, is_edit_eligible: bool=None):
        """TweetEditControls - a model defined in OpenAPI

        :param editable_until: The editable_until of this TweetEditControls.
        :param edits_remaining: The edits_remaining of this TweetEditControls.
        :param is_edit_eligible: The is_edit_eligible of this TweetEditControls.
        """
        self.openapi_types = {
            'editable_until': datetime,
            'edits_remaining': int,
            'is_edit_eligible': bool
        }

        self.attribute_map = {
            'editable_until': 'editable_until',
            'edits_remaining': 'edits_remaining',
            'is_edit_eligible': 'is_edit_eligible'
        }

        self._editable_until = editable_until
        self._edits_remaining = edits_remaining
        self._is_edit_eligible = is_edit_eligible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TweetEditControls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tweet_edit_controls of this TweetEditControls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def editable_until(self):
        """Gets the editable_until of this TweetEditControls.

        Time when Tweet is no longer editable.

        :return: The editable_until of this TweetEditControls.
        :rtype: datetime
        """
        return self._editable_until

    @editable_until.setter
    def editable_until(self, editable_until):
        """Sets the editable_until of this TweetEditControls.

        Time when Tweet is no longer editable.

        :param editable_until: The editable_until of this TweetEditControls.
        :type editable_until: datetime
        """
        if editable_until is None:
            raise ValueError("Invalid value for `editable_until`, must not be `None`")

        self._editable_until = editable_until

    @property
    def edits_remaining(self):
        """Gets the edits_remaining of this TweetEditControls.

        Number of times this Tweet can be edited.

        :return: The edits_remaining of this TweetEditControls.
        :rtype: int
        """
        return self._edits_remaining

    @edits_remaining.setter
    def edits_remaining(self, edits_remaining):
        """Sets the edits_remaining of this TweetEditControls.

        Number of times this Tweet can be edited.

        :param edits_remaining: The edits_remaining of this TweetEditControls.
        :type edits_remaining: int
        """
        if edits_remaining is None:
            raise ValueError("Invalid value for `edits_remaining`, must not be `None`")

        self._edits_remaining = edits_remaining

    @property
    def is_edit_eligible(self):
        """Gets the is_edit_eligible of this TweetEditControls.

        Indicates if this Tweet is eligible to be edited.

        :return: The is_edit_eligible of this TweetEditControls.
        :rtype: bool
        """
        return self._is_edit_eligible

    @is_edit_eligible.setter
    def is_edit_eligible(self, is_edit_eligible):
        """Sets the is_edit_eligible of this TweetEditControls.

        Indicates if this Tweet is eligible to be edited.

        :param is_edit_eligible: The is_edit_eligible of this TweetEditControls.
        :type is_edit_eligible: bool
        """
        if is_edit_eligible is None:
            raise ValueError("Invalid value for `is_edit_eligible`, must not be `None`")

        self._is_edit_eligible = is_edit_eligible
