# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media import Media
import re
from openapi_server import util


class Photo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, media_key: str=None, type: str=None, width: int=None, alt_text: str=None, url: str=None):
        """Photo - a model defined in OpenAPI

        :param height: The height of this Photo.
        :param media_key: The media_key of this Photo.
        :param type: The type of this Photo.
        :param width: The width of this Photo.
        :param alt_text: The alt_text of this Photo.
        :param url: The url of this Photo.
        """
        self.openapi_types = {
            'height': int,
            'media_key': str,
            'type': str,
            'width': int,
            'alt_text': str,
            'url': str
        }

        self.attribute_map = {
            'height': 'height',
            'media_key': 'media_key',
            'type': 'type',
            'width': 'width',
            'alt_text': 'alt_text',
            'url': 'url'
        }

        self._height = height
        self._media_key = media_key
        self._type = type
        self._width = width
        self._alt_text = alt_text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Photo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Photo of this Photo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Photo.

        The height of the media in pixels.

        :return: The height of this Photo.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Photo.

        The height of the media in pixels.

        :param height: The height of this Photo.
        :type height: int
        """
        if height is not None and height < 0:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")

        self._height = height

    @property
    def media_key(self):
        """Gets the media_key of this Photo.

        The Media Key identifier for this attachment.

        :return: The media_key of this Photo.
        :rtype: str
        """
        return self._media_key

    @media_key.setter
    def media_key(self, media_key):
        """Sets the media_key of this Photo.

        The Media Key identifier for this attachment.

        :param media_key: The media_key of this Photo.
        :type media_key: str
        """
        if media_key is not None and not re.search(r'^([0-9]+)_([0-9]+)$', media_key):
            raise ValueError("Invalid value for `media_key`, must be a follow pattern or equal to `/^([0-9]+)_([0-9]+)$/`")

        self._media_key = media_key

    @property
    def type(self):
        """Gets the type of this Photo.


        :return: The type of this Photo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Photo.


        :param type: The type of this Photo.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def width(self):
        """Gets the width of this Photo.

        The width of the media in pixels.

        :return: The width of this Photo.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Photo.

        The width of the media in pixels.

        :param width: The width of this Photo.
        :type width: int
        """
        if width is not None and width < 0:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")

        self._width = width

    @property
    def alt_text(self):
        """Gets the alt_text of this Photo.


        :return: The alt_text of this Photo.
        :rtype: str
        """
        return self._alt_text

    @alt_text.setter
    def alt_text(self, alt_text):
        """Sets the alt_text of this Photo.


        :param alt_text: The alt_text of this Photo.
        :type alt_text: str
        """

        self._alt_text = alt_text

    @property
    def url(self):
        """Gets the url of this Photo.


        :return: The url of this Photo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Photo.


        :param url: The url of this Photo.
        :type url: str
        """

        self._url = url
