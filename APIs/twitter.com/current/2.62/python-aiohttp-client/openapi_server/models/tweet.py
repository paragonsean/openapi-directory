# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_annotation import ContextAnnotation
from openapi_server.models.full_text_entities import FullTextEntities
from openapi_server.models.reply_settings import ReplySettings
from openapi_server.models.tweet_attachments import TweetAttachments
from openapi_server.models.tweet_edit_controls import TweetEditControls
from openapi_server.models.tweet_geo import TweetGeo
from openapi_server.models.tweet_non_public_metrics import TweetNonPublicMetrics
from openapi_server.models.tweet_organic_metrics import TweetOrganicMetrics
from openapi_server.models.tweet_promoted_metrics import TweetPromotedMetrics
from openapi_server.models.tweet_public_metrics import TweetPublicMetrics
from openapi_server.models.tweet_referenced_tweets_inner import TweetReferencedTweetsInner
from openapi_server.models.tweet_withheld import TweetWithheld
import re
from openapi_server import util


class Tweet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: TweetAttachments=None, author_id: str=None, context_annotations: List[ContextAnnotation]=None, conversation_id: str=None, created_at: datetime=None, edit_controls: TweetEditControls=None, edit_history_tweet_ids: List[str]=None, entities: FullTextEntities=None, geo: TweetGeo=None, id: str=None, in_reply_to_user_id: str=None, lang: str=None, non_public_metrics: TweetNonPublicMetrics=None, organic_metrics: TweetOrganicMetrics=None, possibly_sensitive: bool=None, promoted_metrics: TweetPromotedMetrics=None, public_metrics: TweetPublicMetrics=None, referenced_tweets: List[TweetReferencedTweetsInner]=None, reply_settings: ReplySettings=None, source: str=None, text: str=None, withheld: TweetWithheld=None):
        """Tweet - a model defined in OpenAPI

        :param attachments: The attachments of this Tweet.
        :param author_id: The author_id of this Tweet.
        :param context_annotations: The context_annotations of this Tweet.
        :param conversation_id: The conversation_id of this Tweet.
        :param created_at: The created_at of this Tweet.
        :param edit_controls: The edit_controls of this Tweet.
        :param edit_history_tweet_ids: The edit_history_tweet_ids of this Tweet.
        :param entities: The entities of this Tweet.
        :param geo: The geo of this Tweet.
        :param id: The id of this Tweet.
        :param in_reply_to_user_id: The in_reply_to_user_id of this Tweet.
        :param lang: The lang of this Tweet.
        :param non_public_metrics: The non_public_metrics of this Tweet.
        :param organic_metrics: The organic_metrics of this Tweet.
        :param possibly_sensitive: The possibly_sensitive of this Tweet.
        :param promoted_metrics: The promoted_metrics of this Tweet.
        :param public_metrics: The public_metrics of this Tweet.
        :param referenced_tweets: The referenced_tweets of this Tweet.
        :param reply_settings: The reply_settings of this Tweet.
        :param source: The source of this Tweet.
        :param text: The text of this Tweet.
        :param withheld: The withheld of this Tweet.
        """
        self.openapi_types = {
            'attachments': TweetAttachments,
            'author_id': str,
            'context_annotations': List[ContextAnnotation],
            'conversation_id': str,
            'created_at': datetime,
            'edit_controls': TweetEditControls,
            'edit_history_tweet_ids': List[str],
            'entities': FullTextEntities,
            'geo': TweetGeo,
            'id': str,
            'in_reply_to_user_id': str,
            'lang': str,
            'non_public_metrics': TweetNonPublicMetrics,
            'organic_metrics': TweetOrganicMetrics,
            'possibly_sensitive': bool,
            'promoted_metrics': TweetPromotedMetrics,
            'public_metrics': TweetPublicMetrics,
            'referenced_tweets': List[TweetReferencedTweetsInner],
            'reply_settings': ReplySettings,
            'source': str,
            'text': str,
            'withheld': TweetWithheld
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'author_id': 'author_id',
            'context_annotations': 'context_annotations',
            'conversation_id': 'conversation_id',
            'created_at': 'created_at',
            'edit_controls': 'edit_controls',
            'edit_history_tweet_ids': 'edit_history_tweet_ids',
            'entities': 'entities',
            'geo': 'geo',
            'id': 'id',
            'in_reply_to_user_id': 'in_reply_to_user_id',
            'lang': 'lang',
            'non_public_metrics': 'non_public_metrics',
            'organic_metrics': 'organic_metrics',
            'possibly_sensitive': 'possibly_sensitive',
            'promoted_metrics': 'promoted_metrics',
            'public_metrics': 'public_metrics',
            'referenced_tweets': 'referenced_tweets',
            'reply_settings': 'reply_settings',
            'source': 'source',
            'text': 'text',
            'withheld': 'withheld'
        }

        self._attachments = attachments
        self._author_id = author_id
        self._context_annotations = context_annotations
        self._conversation_id = conversation_id
        self._created_at = created_at
        self._edit_controls = edit_controls
        self._edit_history_tweet_ids = edit_history_tweet_ids
        self._entities = entities
        self._geo = geo
        self._id = id
        self._in_reply_to_user_id = in_reply_to_user_id
        self._lang = lang
        self._non_public_metrics = non_public_metrics
        self._organic_metrics = organic_metrics
        self._possibly_sensitive = possibly_sensitive
        self._promoted_metrics = promoted_metrics
        self._public_metrics = public_metrics
        self._referenced_tweets = referenced_tweets
        self._reply_settings = reply_settings
        self._source = source
        self._text = text
        self._withheld = withheld

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tweet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tweet of this Tweet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Tweet.


        :return: The attachments of this Tweet.
        :rtype: TweetAttachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Tweet.


        :param attachments: The attachments of this Tweet.
        :type attachments: TweetAttachments
        """

        self._attachments = attachments

    @property
    def author_id(self):
        """Gets the author_id of this Tweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The author_id of this Tweet.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Tweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param author_id: The author_id of this Tweet.
        :type author_id: str
        """
        if author_id is not None and not re.search(r'^[0-9]{1,19}$', author_id):
            raise ValueError("Invalid value for `author_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._author_id = author_id

    @property
    def context_annotations(self):
        """Gets the context_annotations of this Tweet.


        :return: The context_annotations of this Tweet.
        :rtype: List[ContextAnnotation]
        """
        return self._context_annotations

    @context_annotations.setter
    def context_annotations(self, context_annotations):
        """Sets the context_annotations of this Tweet.


        :param context_annotations: The context_annotations of this Tweet.
        :type context_annotations: List[ContextAnnotation]
        """
        if context_annotations is not None and len(context_annotations) < 1:
            raise ValueError("Invalid value for `context_annotations`, number of items must be greater than or equal to `1`")

        self._context_annotations = context_annotations

    @property
    def conversation_id(self):
        """Gets the conversation_id of this Tweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The conversation_id of this Tweet.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this Tweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param conversation_id: The conversation_id of this Tweet.
        :type conversation_id: str
        """
        if conversation_id is not None and not re.search(r'^[0-9]{1,19}$', conversation_id):
            raise ValueError("Invalid value for `conversation_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._conversation_id = conversation_id

    @property
    def created_at(self):
        """Gets the created_at of this Tweet.

        Creation time of the Tweet.

        :return: The created_at of this Tweet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tweet.

        Creation time of the Tweet.

        :param created_at: The created_at of this Tweet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def edit_controls(self):
        """Gets the edit_controls of this Tweet.


        :return: The edit_controls of this Tweet.
        :rtype: TweetEditControls
        """
        return self._edit_controls

    @edit_controls.setter
    def edit_controls(self, edit_controls):
        """Sets the edit_controls of this Tweet.


        :param edit_controls: The edit_controls of this Tweet.
        :type edit_controls: TweetEditControls
        """

        self._edit_controls = edit_controls

    @property
    def edit_history_tweet_ids(self):
        """Gets the edit_history_tweet_ids of this Tweet.

        A list of Tweet Ids in this Tweet chain.

        :return: The edit_history_tweet_ids of this Tweet.
        :rtype: List[str]
        """
        return self._edit_history_tweet_ids

    @edit_history_tweet_ids.setter
    def edit_history_tweet_ids(self, edit_history_tweet_ids):
        """Sets the edit_history_tweet_ids of this Tweet.

        A list of Tweet Ids in this Tweet chain.

        :param edit_history_tweet_ids: The edit_history_tweet_ids of this Tweet.
        :type edit_history_tweet_ids: List[str]
        """
        if edit_history_tweet_ids is None:
            raise ValueError("Invalid value for `edit_history_tweet_ids`, must not be `None`")
        if edit_history_tweet_ids is not None and len(edit_history_tweet_ids) < 1:
            raise ValueError("Invalid value for `edit_history_tweet_ids`, number of items must be greater than or equal to `1`")

        self._edit_history_tweet_ids = edit_history_tweet_ids

    @property
    def entities(self):
        """Gets the entities of this Tweet.


        :return: The entities of this Tweet.
        :rtype: FullTextEntities
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this Tweet.


        :param entities: The entities of this Tweet.
        :type entities: FullTextEntities
        """

        self._entities = entities

    @property
    def geo(self):
        """Gets the geo of this Tweet.


        :return: The geo of this Tweet.
        :rtype: TweetGeo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this Tweet.


        :param geo: The geo of this Tweet.
        :type geo: TweetGeo
        """

        self._geo = geo

    @property
    def id(self):
        """Gets the id of this Tweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The id of this Tweet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tweet.

        Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param id: The id of this Tweet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[0-9]{1,19}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._id = id

    @property
    def in_reply_to_user_id(self):
        """Gets the in_reply_to_user_id of this Tweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :return: The in_reply_to_user_id of this Tweet.
        :rtype: str
        """
        return self._in_reply_to_user_id

    @in_reply_to_user_id.setter
    def in_reply_to_user_id(self, in_reply_to_user_id):
        """Sets the in_reply_to_user_id of this Tweet.

        Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.

        :param in_reply_to_user_id: The in_reply_to_user_id of this Tweet.
        :type in_reply_to_user_id: str
        """
        if in_reply_to_user_id is not None and not re.search(r'^[0-9]{1,19}$', in_reply_to_user_id):
            raise ValueError("Invalid value for `in_reply_to_user_id`, must be a follow pattern or equal to `/^[0-9]{1,19}$/`")

        self._in_reply_to_user_id = in_reply_to_user_id

    @property
    def lang(self):
        """Gets the lang of this Tweet.

        Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.

        :return: The lang of this Tweet.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Tweet.

        Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.

        :param lang: The lang of this Tweet.
        :type lang: str
        """

        self._lang = lang

    @property
    def non_public_metrics(self):
        """Gets the non_public_metrics of this Tweet.


        :return: The non_public_metrics of this Tweet.
        :rtype: TweetNonPublicMetrics
        """
        return self._non_public_metrics

    @non_public_metrics.setter
    def non_public_metrics(self, non_public_metrics):
        """Sets the non_public_metrics of this Tweet.


        :param non_public_metrics: The non_public_metrics of this Tweet.
        :type non_public_metrics: TweetNonPublicMetrics
        """

        self._non_public_metrics = non_public_metrics

    @property
    def organic_metrics(self):
        """Gets the organic_metrics of this Tweet.


        :return: The organic_metrics of this Tweet.
        :rtype: TweetOrganicMetrics
        """
        return self._organic_metrics

    @organic_metrics.setter
    def organic_metrics(self, organic_metrics):
        """Sets the organic_metrics of this Tweet.


        :param organic_metrics: The organic_metrics of this Tweet.
        :type organic_metrics: TweetOrganicMetrics
        """

        self._organic_metrics = organic_metrics

    @property
    def possibly_sensitive(self):
        """Gets the possibly_sensitive of this Tweet.

        Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.

        :return: The possibly_sensitive of this Tweet.
        :rtype: bool
        """
        return self._possibly_sensitive

    @possibly_sensitive.setter
    def possibly_sensitive(self, possibly_sensitive):
        """Sets the possibly_sensitive of this Tweet.

        Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.

        :param possibly_sensitive: The possibly_sensitive of this Tweet.
        :type possibly_sensitive: bool
        """

        self._possibly_sensitive = possibly_sensitive

    @property
    def promoted_metrics(self):
        """Gets the promoted_metrics of this Tweet.


        :return: The promoted_metrics of this Tweet.
        :rtype: TweetPromotedMetrics
        """
        return self._promoted_metrics

    @promoted_metrics.setter
    def promoted_metrics(self, promoted_metrics):
        """Sets the promoted_metrics of this Tweet.


        :param promoted_metrics: The promoted_metrics of this Tweet.
        :type promoted_metrics: TweetPromotedMetrics
        """

        self._promoted_metrics = promoted_metrics

    @property
    def public_metrics(self):
        """Gets the public_metrics of this Tweet.


        :return: The public_metrics of this Tweet.
        :rtype: TweetPublicMetrics
        """
        return self._public_metrics

    @public_metrics.setter
    def public_metrics(self, public_metrics):
        """Sets the public_metrics of this Tweet.


        :param public_metrics: The public_metrics of this Tweet.
        :type public_metrics: TweetPublicMetrics
        """

        self._public_metrics = public_metrics

    @property
    def referenced_tweets(self):
        """Gets the referenced_tweets of this Tweet.

        A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.

        :return: The referenced_tweets of this Tweet.
        :rtype: List[TweetReferencedTweetsInner]
        """
        return self._referenced_tweets

    @referenced_tweets.setter
    def referenced_tweets(self, referenced_tweets):
        """Sets the referenced_tweets of this Tweet.

        A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.

        :param referenced_tweets: The referenced_tweets of this Tweet.
        :type referenced_tweets: List[TweetReferencedTweetsInner]
        """
        if referenced_tweets is not None and len(referenced_tweets) < 1:
            raise ValueError("Invalid value for `referenced_tweets`, number of items must be greater than or equal to `1`")

        self._referenced_tweets = referenced_tweets

    @property
    def reply_settings(self):
        """Gets the reply_settings of this Tweet.


        :return: The reply_settings of this Tweet.
        :rtype: ReplySettings
        """
        return self._reply_settings

    @reply_settings.setter
    def reply_settings(self, reply_settings):
        """Sets the reply_settings of this Tweet.


        :param reply_settings: The reply_settings of this Tweet.
        :type reply_settings: ReplySettings
        """

        self._reply_settings = reply_settings

    @property
    def source(self):
        """Gets the source of this Tweet.

        This is deprecated.

        :return: The source of this Tweet.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Tweet.

        This is deprecated.

        :param source: The source of this Tweet.
        :type source: str
        """

        self._source = source

    @property
    def text(self):
        """Gets the text of this Tweet.

        The content of the Tweet.

        :return: The text of this Tweet.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Tweet.

        The content of the Tweet.

        :param text: The text of this Tweet.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def withheld(self):
        """Gets the withheld of this Tweet.


        :return: The withheld of this Tweet.
        :rtype: TweetWithheld
        """
        return self._withheld

    @withheld.setter
    def withheld(self, withheld):
        """Sets the withheld of this Tweet.


        :param withheld: The withheld of this Tweet.
        :type withheld: TweetWithheld
        """

        self._withheld = withheld
