/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetUnviewable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetUnviewable::OAITweetUnviewable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetUnviewable::OAITweetUnviewable() {
    this->initializeModel();
}

OAITweetUnviewable::~OAITweetUnviewable() {}

void OAITweetUnviewable::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_event_at_isSet = false;
    m_event_at_isValid = false;

    m_tweet_isSet = false;
    m_tweet_isValid = false;
}

void OAITweetUnviewable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetUnviewable::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_event_at_isValid = ::OpenAPI::fromJsonValue(m_event_at, json[QString("event_at")]);
    m_event_at_isSet = !json[QString("event_at")].isNull() && m_event_at_isValid;

    m_tweet_isValid = ::OpenAPI::fromJsonValue(m_tweet, json[QString("tweet")]);
    m_tweet_isSet = !json[QString("tweet")].isNull() && m_tweet_isValid;
}

QString OAITweetUnviewable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetUnviewable::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_event_at_isSet) {
        obj.insert(QString("event_at"), ::OpenAPI::toJsonValue(m_event_at));
    }
    if (m_tweet.isSet()) {
        obj.insert(QString("tweet"), ::OpenAPI::toJsonValue(m_tweet));
    }
    return obj;
}

QString OAITweetUnviewable::getApplication() const {
    return m_application;
}
void OAITweetUnviewable::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAITweetUnviewable::is_application_Set() const{
    return m_application_isSet;
}

bool OAITweetUnviewable::is_application_Valid() const{
    return m_application_isValid;
}

QDateTime OAITweetUnviewable::getEventAt() const {
    return m_event_at;
}
void OAITweetUnviewable::setEventAt(const QDateTime &event_at) {
    m_event_at = event_at;
    m_event_at_isSet = true;
}

bool OAITweetUnviewable::is_event_at_Set() const{
    return m_event_at_isSet;
}

bool OAITweetUnviewable::is_event_at_Valid() const{
    return m_event_at_isValid;
}

OAITweetComplianceSchema_tweet OAITweetUnviewable::getTweet() const {
    return m_tweet;
}
void OAITweetUnviewable::setTweet(const OAITweetComplianceSchema_tweet &tweet) {
    m_tweet = tweet;
    m_tweet_isSet = true;
}

bool OAITweetUnviewable::is_tweet_Set() const{
    return m_tweet_isSet;
}

bool OAITweetUnviewable::is_tweet_Valid() const{
    return m_tweet_isValid;
}

bool OAITweetUnviewable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tweet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetUnviewable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_isValid && m_event_at_isValid && m_tweet_isValid && true;
}

} // namespace OpenAPI
