/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDmConversationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDmConversationRequest::OAICreateDmConversationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDmConversationRequest::OAICreateDmConversationRequest() {
    this->initializeModel();
}

OAICreateDmConversationRequest::~OAICreateDmConversationRequest() {}

void OAICreateDmConversationRequest::initializeModel() {

    m_conversation_type_isSet = false;
    m_conversation_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_participant_ids_isSet = false;
    m_participant_ids_isValid = false;
}

void OAICreateDmConversationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDmConversationRequest::fromJsonObject(QJsonObject json) {

    m_conversation_type_isValid = ::OpenAPI::fromJsonValue(m_conversation_type, json[QString("conversation_type")]);
    m_conversation_type_isSet = !json[QString("conversation_type")].isNull() && m_conversation_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_participant_ids_isValid = ::OpenAPI::fromJsonValue(m_participant_ids, json[QString("participant_ids")]);
    m_participant_ids_isSet = !json[QString("participant_ids")].isNull() && m_participant_ids_isValid;
}

QString OAICreateDmConversationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDmConversationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_type_isSet) {
        obj.insert(QString("conversation_type"), ::OpenAPI::toJsonValue(m_conversation_type));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_participant_ids.size() > 0) {
        obj.insert(QString("participant_ids"), ::OpenAPI::toJsonValue(m_participant_ids));
    }
    return obj;
}

QString OAICreateDmConversationRequest::getConversationType() const {
    return m_conversation_type;
}
void OAICreateDmConversationRequest::setConversationType(const QString &conversation_type) {
    m_conversation_type = conversation_type;
    m_conversation_type_isSet = true;
}

bool OAICreateDmConversationRequest::is_conversation_type_Set() const{
    return m_conversation_type_isSet;
}

bool OAICreateDmConversationRequest::is_conversation_type_Valid() const{
    return m_conversation_type_isValid;
}

OAICreateMessageRequest OAICreateDmConversationRequest::getMessage() const {
    return m_message;
}
void OAICreateDmConversationRequest::setMessage(const OAICreateMessageRequest &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateDmConversationRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateDmConversationRequest::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAICreateDmConversationRequest::getParticipantIds() const {
    return m_participant_ids;
}
void OAICreateDmConversationRequest::setParticipantIds(const QList<QString> &participant_ids) {
    m_participant_ids = participant_ids;
    m_participant_ids_isSet = true;
}

bool OAICreateDmConversationRequest::is_participant_ids_Set() const{
    return m_participant_ids_isSet;
}

bool OAICreateDmConversationRequest::is_participant_ids_Valid() const{
    return m_participant_ids_isValid;
}

bool OAICreateDmConversationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDmConversationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conversation_type_isValid && m_message_isValid && m_participant_ids_isValid && true;
}

} // namespace OpenAPI
