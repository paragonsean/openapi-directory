/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListsApi_H
#define OAI_OAIListsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGet2ListsIdResponse.h"
#include "OAIGet2UsersIdFollowedListsResponse.h"
#include "OAIGet2UsersIdListMembershipsResponse.h"
#include "OAIGet2UsersIdOwnedListsResponse.h"
#include "OAIGet2UsersIdPinnedListsResponse.h"
#include "OAIListAddUserRequest.h"
#include "OAIListCreateRequest.h"
#include "OAIListCreateResponse.h"
#include "OAIListDeleteResponse.h"
#include "OAIListFollowedRequest.h"
#include "OAIListFollowedResponse.h"
#include "OAIListMutateResponse.h"
#include "OAIListPinnedRequest.h"
#include "OAIListPinnedResponse.h"
#include "OAIListUnpinResponse.h"
#include "OAIListUpdateRequest.h"
#include "OAIListUpdateResponse.h"
#include "OAIProblem.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListsApi : public QObject {
    Q_OBJECT

public:
    OAIListsApi(const int timeOut = 0);
    ~OAIListsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  list_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    */
    virtual void getUserListMemberships(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &list_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_list_add_user_request OAIListAddUserRequest [optional]
    */
    virtual void listAddMember(const QString &id, const ::OpenAPI::OptionalParam<OAIListAddUserRequest> &oai_list_add_user_request = ::OpenAPI::OptionalParam<OAIListAddUserRequest>());

    /**
    * @param[in]  oai_list_create_request OAIListCreateRequest [optional]
    */
    virtual void listIdCreate(const ::OpenAPI::OptionalParam<OAIListCreateRequest> &oai_list_create_request = ::OpenAPI::OptionalParam<OAIListCreateRequest>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void listIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  list_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    */
    virtual void listIdGet(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &list_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_list_update_request OAIListUpdateRequest [optional]
    */
    virtual void listIdUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAIListUpdateRequest> &oai_list_update_request = ::OpenAPI::OptionalParam<OAIListUpdateRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void listRemoveMember(const QString &id, const QString &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_list_followed_request OAIListFollowedRequest [optional]
    */
    virtual void listUserFollow(const QString &id, const ::OpenAPI::OptionalParam<OAIListFollowedRequest> &oai_list_followed_request = ::OpenAPI::OptionalParam<OAIListFollowedRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  list_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    */
    virtual void listUserOwnedLists(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &list_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_list_pinned_request OAIListPinnedRequest [required]
    */
    virtual void listUserPin(const QString &id, const OAIListPinnedRequest &oai_list_pinned_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  list_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    */
    virtual void listUserPinnedLists(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &list_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  list_id QString [required]
    */
    virtual void listUserUnfollow(const QString &id, const QString &list_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  list_id QString [required]
    */
    virtual void listUserUnpin(const QString &id, const QString &list_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  list_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    */
    virtual void userFollowedLists(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &list_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getUserListMembershipsCallback(OAIHttpRequestWorker *worker);
    void listAddMemberCallback(OAIHttpRequestWorker *worker);
    void listIdCreateCallback(OAIHttpRequestWorker *worker);
    void listIdDeleteCallback(OAIHttpRequestWorker *worker);
    void listIdGetCallback(OAIHttpRequestWorker *worker);
    void listIdUpdateCallback(OAIHttpRequestWorker *worker);
    void listRemoveMemberCallback(OAIHttpRequestWorker *worker);
    void listUserFollowCallback(OAIHttpRequestWorker *worker);
    void listUserOwnedListsCallback(OAIHttpRequestWorker *worker);
    void listUserPinCallback(OAIHttpRequestWorker *worker);
    void listUserPinnedListsCallback(OAIHttpRequestWorker *worker);
    void listUserUnfollowCallback(OAIHttpRequestWorker *worker);
    void listUserUnpinCallback(OAIHttpRequestWorker *worker);
    void userFollowedListsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getUserListMembershipsSignal(OAIGet2UsersIdListMembershipsResponse summary);
    void listAddMemberSignal(OAIListMutateResponse summary);
    void listIdCreateSignal(OAIListCreateResponse summary);
    void listIdDeleteSignal(OAIListDeleteResponse summary);
    void listIdGetSignal(OAIGet2ListsIdResponse summary);
    void listIdUpdateSignal(OAIListUpdateResponse summary);
    void listRemoveMemberSignal(OAIListMutateResponse summary);
    void listUserFollowSignal(OAIListFollowedResponse summary);
    void listUserOwnedListsSignal(OAIGet2UsersIdOwnedListsResponse summary);
    void listUserPinSignal(OAIListPinnedResponse summary);
    void listUserPinnedListsSignal(OAIGet2UsersIdPinnedListsResponse summary);
    void listUserUnfollowSignal(OAIListFollowedResponse summary);
    void listUserUnpinSignal(OAIListUnpinResponse summary);
    void userFollowedListsSignal(OAIGet2UsersIdFollowedListsResponse summary);


    void getUserListMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdListMembershipsResponse summary);
    void listAddMemberSignalFull(OAIHttpRequestWorker *worker, OAIListMutateResponse summary);
    void listIdCreateSignalFull(OAIHttpRequestWorker *worker, OAIListCreateResponse summary);
    void listIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIListDeleteResponse summary);
    void listIdGetSignalFull(OAIHttpRequestWorker *worker, OAIGet2ListsIdResponse summary);
    void listIdUpdateSignalFull(OAIHttpRequestWorker *worker, OAIListUpdateResponse summary);
    void listRemoveMemberSignalFull(OAIHttpRequestWorker *worker, OAIListMutateResponse summary);
    void listUserFollowSignalFull(OAIHttpRequestWorker *worker, OAIListFollowedResponse summary);
    void listUserOwnedListsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdOwnedListsResponse summary);
    void listUserPinSignalFull(OAIHttpRequestWorker *worker, OAIListPinnedResponse summary);
    void listUserPinnedListsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdPinnedListsResponse summary);
    void listUserUnfollowSignalFull(OAIHttpRequestWorker *worker, OAIListFollowedResponse summary);
    void listUserUnpinSignalFull(OAIHttpRequestWorker *worker, OAIListUnpinResponse summary);
    void userFollowedListsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdFollowedListsResponse summary);

    Q_DECL_DEPRECATED_X("Use getUserListMembershipsSignalError() instead")
    void getUserListMembershipsSignalE(OAIGet2UsersIdListMembershipsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserListMembershipsSignalError(OAIGet2UsersIdListMembershipsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddMemberSignalError() instead")
    void listAddMemberSignalE(OAIListMutateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddMemberSignalError(OAIListMutateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdCreateSignalError() instead")
    void listIdCreateSignalE(OAIListCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdCreateSignalError(OAIListCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdDeleteSignalError() instead")
    void listIdDeleteSignalE(OAIListDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdDeleteSignalError(OAIListDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdGetSignalError() instead")
    void listIdGetSignalE(OAIGet2ListsIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdGetSignalError(OAIGet2ListsIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdUpdateSignalError() instead")
    void listIdUpdateSignalE(OAIListUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdUpdateSignalError(OAIListUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRemoveMemberSignalError() instead")
    void listRemoveMemberSignalE(OAIListMutateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRemoveMemberSignalError(OAIListMutateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserFollowSignalError() instead")
    void listUserFollowSignalE(OAIListFollowedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserFollowSignalError(OAIListFollowedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserOwnedListsSignalError() instead")
    void listUserOwnedListsSignalE(OAIGet2UsersIdOwnedListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserOwnedListsSignalError(OAIGet2UsersIdOwnedListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPinSignalError() instead")
    void listUserPinSignalE(OAIListPinnedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPinSignalError(OAIListPinnedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPinnedListsSignalError() instead")
    void listUserPinnedListsSignalE(OAIGet2UsersIdPinnedListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPinnedListsSignalError(OAIGet2UsersIdPinnedListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserUnfollowSignalError() instead")
    void listUserUnfollowSignalE(OAIListFollowedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserUnfollowSignalError(OAIListFollowedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserUnpinSignalError() instead")
    void listUserUnpinSignalE(OAIListUnpinResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserUnpinSignalError(OAIListUnpinResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userFollowedListsSignalError() instead")
    void userFollowedListsSignalE(OAIGet2UsersIdFollowedListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userFollowedListsSignalError(OAIGet2UsersIdFollowedListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getUserListMembershipsSignalErrorFull() instead")
    void getUserListMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserListMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddMemberSignalErrorFull() instead")
    void listAddMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdCreateSignalErrorFull() instead")
    void listIdCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdDeleteSignalErrorFull() instead")
    void listIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdGetSignalErrorFull() instead")
    void listIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIdUpdateSignalErrorFull() instead")
    void listIdUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIdUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRemoveMemberSignalErrorFull() instead")
    void listRemoveMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRemoveMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserFollowSignalErrorFull() instead")
    void listUserFollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserFollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserOwnedListsSignalErrorFull() instead")
    void listUserOwnedListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserOwnedListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPinSignalErrorFull() instead")
    void listUserPinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPinnedListsSignalErrorFull() instead")
    void listUserPinnedListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPinnedListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserUnfollowSignalErrorFull() instead")
    void listUserUnfollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserUnfollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserUnpinSignalErrorFull() instead")
    void listUserUnpinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserUnpinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userFollowedListsSignalErrorFull() instead")
    void userFollowedListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userFollowedListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
