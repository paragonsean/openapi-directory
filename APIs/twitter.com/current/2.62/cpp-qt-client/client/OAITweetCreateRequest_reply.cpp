/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetCreateRequest_reply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetCreateRequest_reply::OAITweetCreateRequest_reply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetCreateRequest_reply::OAITweetCreateRequest_reply() {
    this->initializeModel();
}

OAITweetCreateRequest_reply::~OAITweetCreateRequest_reply() {}

void OAITweetCreateRequest_reply::initializeModel() {

    m_exclude_reply_user_ids_isSet = false;
    m_exclude_reply_user_ids_isValid = false;

    m_in_reply_to_tweet_id_isSet = false;
    m_in_reply_to_tweet_id_isValid = false;
}

void OAITweetCreateRequest_reply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetCreateRequest_reply::fromJsonObject(QJsonObject json) {

    m_exclude_reply_user_ids_isValid = ::OpenAPI::fromJsonValue(m_exclude_reply_user_ids, json[QString("exclude_reply_user_ids")]);
    m_exclude_reply_user_ids_isSet = !json[QString("exclude_reply_user_ids")].isNull() && m_exclude_reply_user_ids_isValid;

    m_in_reply_to_tweet_id_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to_tweet_id, json[QString("in_reply_to_tweet_id")]);
    m_in_reply_to_tweet_id_isSet = !json[QString("in_reply_to_tweet_id")].isNull() && m_in_reply_to_tweet_id_isValid;
}

QString OAITweetCreateRequest_reply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetCreateRequest_reply::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_reply_user_ids.size() > 0) {
        obj.insert(QString("exclude_reply_user_ids"), ::OpenAPI::toJsonValue(m_exclude_reply_user_ids));
    }
    if (m_in_reply_to_tweet_id_isSet) {
        obj.insert(QString("in_reply_to_tweet_id"), ::OpenAPI::toJsonValue(m_in_reply_to_tweet_id));
    }
    return obj;
}

QList<QString> OAITweetCreateRequest_reply::getExcludeReplyUserIds() const {
    return m_exclude_reply_user_ids;
}
void OAITweetCreateRequest_reply::setExcludeReplyUserIds(const QList<QString> &exclude_reply_user_ids) {
    m_exclude_reply_user_ids = exclude_reply_user_ids;
    m_exclude_reply_user_ids_isSet = true;
}

bool OAITweetCreateRequest_reply::is_exclude_reply_user_ids_Set() const{
    return m_exclude_reply_user_ids_isSet;
}

bool OAITweetCreateRequest_reply::is_exclude_reply_user_ids_Valid() const{
    return m_exclude_reply_user_ids_isValid;
}

QString OAITweetCreateRequest_reply::getInReplyToTweetId() const {
    return m_in_reply_to_tweet_id;
}
void OAITweetCreateRequest_reply::setInReplyToTweetId(const QString &in_reply_to_tweet_id) {
    m_in_reply_to_tweet_id = in_reply_to_tweet_id;
    m_in_reply_to_tweet_id_isSet = true;
}

bool OAITweetCreateRequest_reply::is_in_reply_to_tweet_id_Set() const{
    return m_in_reply_to_tweet_id_isSet;
}

bool OAITweetCreateRequest_reply::is_in_reply_to_tweet_id_Valid() const{
    return m_in_reply_to_tweet_id_isValid;
}

bool OAITweetCreateRequest_reply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_reply_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to_tweet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetCreateRequest_reply::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_in_reply_to_tweet_id_isValid && true;
}

} // namespace OpenAPI
