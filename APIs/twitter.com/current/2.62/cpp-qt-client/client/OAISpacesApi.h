/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpacesApi_H
#define OAI_OAISpacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGet2SpacesByCreatorIdsResponse.h"
#include "OAIGet2SpacesIdBuyersResponse.h"
#include "OAIGet2SpacesIdResponse.h"
#include "OAIGet2SpacesIdTweetsResponse.h"
#include "OAIGet2SpacesResponse.h"
#include "OAIGet2SpacesSearchResponse.h"
#include "OAIProblem.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpacesApi : public QObject {
    Q_OBJECT

public:
    OAISpacesApi(const int timeOut = 0);
    ~OAISpacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  space_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  topic_fields QSet<QString> [optional]
    */
    virtual void findSpaceById(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &space_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &topic_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  user_ids QList<QString> [required]
    * @param[in]  space_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  topic_fields QSet<QString> [optional]
    */
    virtual void findSpacesByCreatorIds(const QList<QString> &user_ids, const ::OpenAPI::OptionalParam<QSet<QString>> &space_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &topic_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  space_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  topic_fields QSet<QString> [optional]
    */
    virtual void findSpacesByIds(const QList<QString> &ids, const ::OpenAPI::OptionalParam<QSet<QString>> &space_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &topic_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  space_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  topic_fields QSet<QString> [optional]
    */
    virtual void searchSpaces(const QString &query, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &space_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &topic_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void spaceBuyers(const QString &id, const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void spaceTweets(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findSpaceByIdCallback(OAIHttpRequestWorker *worker);
    void findSpacesByCreatorIdsCallback(OAIHttpRequestWorker *worker);
    void findSpacesByIdsCallback(OAIHttpRequestWorker *worker);
    void searchSpacesCallback(OAIHttpRequestWorker *worker);
    void spaceBuyersCallback(OAIHttpRequestWorker *worker);
    void spaceTweetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findSpaceByIdSignal(OAIGet2SpacesIdResponse summary);
    void findSpacesByCreatorIdsSignal(OAIGet2SpacesByCreatorIdsResponse summary);
    void findSpacesByIdsSignal(OAIGet2SpacesResponse summary);
    void searchSpacesSignal(OAIGet2SpacesSearchResponse summary);
    void spaceBuyersSignal(OAIGet2SpacesIdBuyersResponse summary);
    void spaceTweetsSignal(OAIGet2SpacesIdTweetsResponse summary);


    void findSpaceByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesIdResponse summary);
    void findSpacesByCreatorIdsSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesByCreatorIdsResponse summary);
    void findSpacesByIdsSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesResponse summary);
    void searchSpacesSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesSearchResponse summary);
    void spaceBuyersSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesIdBuyersResponse summary);
    void spaceTweetsSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesIdTweetsResponse summary);

    Q_DECL_DEPRECATED_X("Use findSpaceByIdSignalError() instead")
    void findSpaceByIdSignalE(OAIGet2SpacesIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpaceByIdSignalError(OAIGet2SpacesIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSpacesByCreatorIdsSignalError() instead")
    void findSpacesByCreatorIdsSignalE(OAIGet2SpacesByCreatorIdsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpacesByCreatorIdsSignalError(OAIGet2SpacesByCreatorIdsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSpacesByIdsSignalError() instead")
    void findSpacesByIdsSignalE(OAIGet2SpacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpacesByIdsSignalError(OAIGet2SpacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSpacesSignalError() instead")
    void searchSpacesSignalE(OAIGet2SpacesSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSpacesSignalError(OAIGet2SpacesSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceBuyersSignalError() instead")
    void spaceBuyersSignalE(OAIGet2SpacesIdBuyersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceBuyersSignalError(OAIGet2SpacesIdBuyersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceTweetsSignalError() instead")
    void spaceTweetsSignalE(OAIGet2SpacesIdTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceTweetsSignalError(OAIGet2SpacesIdTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findSpaceByIdSignalErrorFull() instead")
    void findSpaceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpaceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSpacesByCreatorIdsSignalErrorFull() instead")
    void findSpacesByCreatorIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpacesByCreatorIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSpacesByIdsSignalErrorFull() instead")
    void findSpacesByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSpacesByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSpacesSignalErrorFull() instead")
    void searchSpacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSpacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceBuyersSignalErrorFull() instead")
    void spaceBuyersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceBuyersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceTweetsSignalErrorFull() instead")
    void spaceTweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceTweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
