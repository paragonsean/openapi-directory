/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplySettings::OAIReplySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplySettings::OAIReplySettings() {
    this->initializeModel();
}

OAIReplySettings::~OAIReplySettings() {}

void OAIReplySettings::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReplySettings::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReplySettings::fromJson(QString jsonString) {
    
    if ( jsonString.compare("everyone", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplySettings::EVERYONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mentionedUsers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplySettings::MENTIONEDUSERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("following", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplySettings::FOLLOWING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplySettings::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReplySettings::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReplySettings::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReplySettings::EVERYONE:
            val = "everyone";
            break;
        case eOAIReplySettings::MENTIONEDUSERS:
            val = "mentionedUsers";
            break;
        case eOAIReplySettings::FOLLOWING:
            val = "following";
            break;
        case eOAIReplySettings::OTHER:
            val = "other";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReplySettings::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReplySettings::eOAIReplySettings OAIReplySettings::getValue() const {
    return m_value;
}

void OAIReplySettings::setValue(const OAIReplySettings::eOAIReplySettings& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReplySettings::isSet() const {
    
    return m_value_isSet;
}

bool OAIReplySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
