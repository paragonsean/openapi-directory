/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetCreateRequest_media.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetCreateRequest_media::OAITweetCreateRequest_media(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetCreateRequest_media::OAITweetCreateRequest_media() {
    this->initializeModel();
}

OAITweetCreateRequest_media::~OAITweetCreateRequest_media() {}

void OAITweetCreateRequest_media::initializeModel() {

    m_media_ids_isSet = false;
    m_media_ids_isValid = false;

    m_tagged_user_ids_isSet = false;
    m_tagged_user_ids_isValid = false;
}

void OAITweetCreateRequest_media::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetCreateRequest_media::fromJsonObject(QJsonObject json) {

    m_media_ids_isValid = ::OpenAPI::fromJsonValue(m_media_ids, json[QString("media_ids")]);
    m_media_ids_isSet = !json[QString("media_ids")].isNull() && m_media_ids_isValid;

    m_tagged_user_ids_isValid = ::OpenAPI::fromJsonValue(m_tagged_user_ids, json[QString("tagged_user_ids")]);
    m_tagged_user_ids_isSet = !json[QString("tagged_user_ids")].isNull() && m_tagged_user_ids_isValid;
}

QString OAITweetCreateRequest_media::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetCreateRequest_media::asJsonObject() const {
    QJsonObject obj;
    if (m_media_ids.size() > 0) {
        obj.insert(QString("media_ids"), ::OpenAPI::toJsonValue(m_media_ids));
    }
    if (m_tagged_user_ids.size() > 0) {
        obj.insert(QString("tagged_user_ids"), ::OpenAPI::toJsonValue(m_tagged_user_ids));
    }
    return obj;
}

QList<QString> OAITweetCreateRequest_media::getMediaIds() const {
    return m_media_ids;
}
void OAITweetCreateRequest_media::setMediaIds(const QList<QString> &media_ids) {
    m_media_ids = media_ids;
    m_media_ids_isSet = true;
}

bool OAITweetCreateRequest_media::is_media_ids_Set() const{
    return m_media_ids_isSet;
}

bool OAITweetCreateRequest_media::is_media_ids_Valid() const{
    return m_media_ids_isValid;
}

QList<QString> OAITweetCreateRequest_media::getTaggedUserIds() const {
    return m_tagged_user_ids;
}
void OAITweetCreateRequest_media::setTaggedUserIds(const QList<QString> &tagged_user_ids) {
    m_tagged_user_ids = tagged_user_ids;
    m_tagged_user_ids_isSet = true;
}

bool OAITweetCreateRequest_media::is_tagged_user_ids_Set() const{
    return m_tagged_user_ids_isSet;
}

bool OAITweetCreateRequest_media::is_tagged_user_ids_Valid() const{
    return m_tagged_user_ids_isValid;
}

bool OAITweetCreateRequest_media::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetCreateRequest_media::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_ids_isValid && true;
}

} // namespace OpenAPI
