/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpace::OAISpace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpace::OAISpace() {
    this->initializeModel();
}

OAISpace::~OAISpace() {}

void OAISpace::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_host_ids_isSet = false;
    m_host_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invited_user_ids_isSet = false;
    m_invited_user_ids_isValid = false;

    m_is_ticketed_isSet = false;
    m_is_ticketed_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_participant_count_isSet = false;
    m_participant_count_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;

    m_speaker_ids_isSet = false;
    m_speaker_ids_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscriber_count_isSet = false;
    m_subscriber_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISpace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpace::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("ended_at")]);
    m_ended_at_isSet = !json[QString("ended_at")].isNull() && m_ended_at_isValid;

    m_host_ids_isValid = ::OpenAPI::fromJsonValue(m_host_ids, json[QString("host_ids")]);
    m_host_ids_isSet = !json[QString("host_ids")].isNull() && m_host_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invited_user_ids_isValid = ::OpenAPI::fromJsonValue(m_invited_user_ids, json[QString("invited_user_ids")]);
    m_invited_user_ids_isSet = !json[QString("invited_user_ids")].isNull() && m_invited_user_ids_isValid;

    m_is_ticketed_isValid = ::OpenAPI::fromJsonValue(m_is_ticketed, json[QString("is_ticketed")]);
    m_is_ticketed_isSet = !json[QString("is_ticketed")].isNull() && m_is_ticketed_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_participant_count_isValid = ::OpenAPI::fromJsonValue(m_participant_count, json[QString("participant_count")]);
    m_participant_count_isSet = !json[QString("participant_count")].isNull() && m_participant_count_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("scheduled_start")]);
    m_scheduled_start_isSet = !json[QString("scheduled_start")].isNull() && m_scheduled_start_isValid;

    m_speaker_ids_isValid = ::OpenAPI::fromJsonValue(m_speaker_ids, json[QString("speaker_ids")]);
    m_speaker_ids_isSet = !json[QString("speaker_ids")].isNull() && m_speaker_ids_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscriber_count_isValid = ::OpenAPI::fromJsonValue(m_subscriber_count, json[QString("subscriber_count")]);
    m_subscriber_count_isSet = !json[QString("subscriber_count")].isNull() && m_subscriber_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISpace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpace::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("ended_at"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_host_ids.size() > 0) {
        obj.insert(QString("host_ids"), ::OpenAPI::toJsonValue(m_host_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invited_user_ids.size() > 0) {
        obj.insert(QString("invited_user_ids"), ::OpenAPI::toJsonValue(m_invited_user_ids));
    }
    if (m_is_ticketed_isSet) {
        obj.insert(QString("is_ticketed"), ::OpenAPI::toJsonValue(m_is_ticketed));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_participant_count_isSet) {
        obj.insert(QString("participant_count"), ::OpenAPI::toJsonValue(m_participant_count));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("scheduled_start"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    if (m_speaker_ids.size() > 0) {
        obj.insert(QString("speaker_ids"), ::OpenAPI::toJsonValue(m_speaker_ids));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscriber_count_isSet) {
        obj.insert(QString("subscriber_count"), ::OpenAPI::toJsonValue(m_subscriber_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISpace::getCreatedAt() const {
    return m_created_at;
}
void OAISpace::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISpace::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISpace::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISpace::getCreatorId() const {
    return m_creator_id;
}
void OAISpace::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAISpace::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAISpace::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QDateTime OAISpace::getEndedAt() const {
    return m_ended_at;
}
void OAISpace::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAISpace::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAISpace::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QList<QString> OAISpace::getHostIds() const {
    return m_host_ids;
}
void OAISpace::setHostIds(const QList<QString> &host_ids) {
    m_host_ids = host_ids;
    m_host_ids_isSet = true;
}

bool OAISpace::is_host_ids_Set() const{
    return m_host_ids_isSet;
}

bool OAISpace::is_host_ids_Valid() const{
    return m_host_ids_isValid;
}

QString OAISpace::getId() const {
    return m_id;
}
void OAISpace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISpace::is_id_Set() const{
    return m_id_isSet;
}

bool OAISpace::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAISpace::getInvitedUserIds() const {
    return m_invited_user_ids;
}
void OAISpace::setInvitedUserIds(const QList<QString> &invited_user_ids) {
    m_invited_user_ids = invited_user_ids;
    m_invited_user_ids_isSet = true;
}

bool OAISpace::is_invited_user_ids_Set() const{
    return m_invited_user_ids_isSet;
}

bool OAISpace::is_invited_user_ids_Valid() const{
    return m_invited_user_ids_isValid;
}

bool OAISpace::isIsTicketed() const {
    return m_is_ticketed;
}
void OAISpace::setIsTicketed(const bool &is_ticketed) {
    m_is_ticketed = is_ticketed;
    m_is_ticketed_isSet = true;
}

bool OAISpace::is_is_ticketed_Set() const{
    return m_is_ticketed_isSet;
}

bool OAISpace::is_is_ticketed_Valid() const{
    return m_is_ticketed_isValid;
}

QString OAISpace::getLang() const {
    return m_lang;
}
void OAISpace::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAISpace::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAISpace::is_lang_Valid() const{
    return m_lang_isValid;
}

qint32 OAISpace::getParticipantCount() const {
    return m_participant_count;
}
void OAISpace::setParticipantCount(const qint32 &participant_count) {
    m_participant_count = participant_count;
    m_participant_count_isSet = true;
}

bool OAISpace::is_participant_count_Set() const{
    return m_participant_count_isSet;
}

bool OAISpace::is_participant_count_Valid() const{
    return m_participant_count_isValid;
}

QDateTime OAISpace::getScheduledStart() const {
    return m_scheduled_start;
}
void OAISpace::setScheduledStart(const QDateTime &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAISpace::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAISpace::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

QList<QString> OAISpace::getSpeakerIds() const {
    return m_speaker_ids;
}
void OAISpace::setSpeakerIds(const QList<QString> &speaker_ids) {
    m_speaker_ids = speaker_ids;
    m_speaker_ids_isSet = true;
}

bool OAISpace::is_speaker_ids_Set() const{
    return m_speaker_ids_isSet;
}

bool OAISpace::is_speaker_ids_Valid() const{
    return m_speaker_ids_isValid;
}

QDateTime OAISpace::getStartedAt() const {
    return m_started_at;
}
void OAISpace::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAISpace::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAISpace::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAISpace::getState() const {
    return m_state;
}
void OAISpace::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISpace::is_state_Set() const{
    return m_state_isSet;
}

bool OAISpace::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAISpace::getSubscriberCount() const {
    return m_subscriber_count;
}
void OAISpace::setSubscriberCount(const qint32 &subscriber_count) {
    m_subscriber_count = subscriber_count;
    m_subscriber_count_isSet = true;
}

bool OAISpace::is_subscriber_count_Set() const{
    return m_subscriber_count_isSet;
}

bool OAISpace::is_subscriber_count_Valid() const{
    return m_subscriber_count_isValid;
}

QString OAISpace::getTitle() const {
    return m_title;
}
void OAISpace::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISpace::is_title_Set() const{
    return m_title_isSet;
}

bool OAISpace::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAISpace_topics_inner> OAISpace::getTopics() const {
    return m_topics;
}
void OAISpace::setTopics(const QList<OAISpace_topics_inner> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAISpace::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAISpace::is_topics_Valid() const{
    return m_topics_isValid;
}

QDateTime OAISpace::getUpdatedAt() const {
    return m_updated_at;
}
void OAISpace::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISpace::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISpace::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISpace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ticketed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
