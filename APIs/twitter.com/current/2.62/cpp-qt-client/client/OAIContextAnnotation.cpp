/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextAnnotation::OAIContextAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextAnnotation::OAIContextAnnotation() {
    this->initializeModel();
}

OAIContextAnnotation::~OAIContextAnnotation() {}

void OAIContextAnnotation::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;
}

void OAIContextAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextAnnotation::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;
}

QString OAIContextAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    return obj;
}

OAIContextAnnotationDomainFields OAIContextAnnotation::getDomain() const {
    return m_domain;
}
void OAIContextAnnotation::setDomain(const OAIContextAnnotationDomainFields &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIContextAnnotation::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIContextAnnotation::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIContextAnnotationEntityFields OAIContextAnnotation::getEntity() const {
    return m_entity;
}
void OAIContextAnnotation::setEntity(const OAIContextAnnotationEntityFields &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIContextAnnotation::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIContextAnnotation::is_entity_Valid() const{
    return m_entity_isValid;
}

bool OAIContextAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_entity_isValid && true;
}

} // namespace OpenAPI
