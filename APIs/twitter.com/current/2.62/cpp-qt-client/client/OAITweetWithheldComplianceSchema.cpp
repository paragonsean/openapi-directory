/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetWithheldComplianceSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetWithheldComplianceSchema::OAITweetWithheldComplianceSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetWithheldComplianceSchema::OAITweetWithheldComplianceSchema() {
    this->initializeModel();
}

OAITweetWithheldComplianceSchema::~OAITweetWithheldComplianceSchema() {}

void OAITweetWithheldComplianceSchema::initializeModel() {

    m_withheld_isSet = false;
    m_withheld_isValid = false;
}

void OAITweetWithheldComplianceSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetWithheldComplianceSchema::fromJsonObject(QJsonObject json) {

    m_withheld_isValid = ::OpenAPI::fromJsonValue(m_withheld, json[QString("withheld")]);
    m_withheld_isSet = !json[QString("withheld")].isNull() && m_withheld_isValid;
}

QString OAITweetWithheldComplianceSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetWithheldComplianceSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_withheld.isSet()) {
        obj.insert(QString("withheld"), ::OpenAPI::toJsonValue(m_withheld));
    }
    return obj;
}

OAITweetTakedownComplianceSchema OAITweetWithheldComplianceSchema::getWithheld() const {
    return m_withheld;
}
void OAITweetWithheldComplianceSchema::setWithheld(const OAITweetTakedownComplianceSchema &withheld) {
    m_withheld = withheld;
    m_withheld_isSet = true;
}

bool OAITweetWithheldComplianceSchema::is_withheld_Set() const{
    return m_withheld_isSet;
}

bool OAITweetWithheldComplianceSchema::is_withheld_Valid() const{
    return m_withheld_isValid;
}

bool OAITweetWithheldComplianceSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_withheld.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetWithheldComplianceSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_withheld_isValid && true;
}

} // namespace OpenAPI
