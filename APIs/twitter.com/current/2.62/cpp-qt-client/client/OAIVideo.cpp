/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_media_key_isSet = false;
    m_media_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_non_public_metrics_isSet = false;
    m_non_public_metrics_isValid = false;

    m_organic_metrics_isSet = false;
    m_organic_metrics_isValid = false;

    m_preview_image_url_isSet = false;
    m_preview_image_url_isValid = false;

    m_promoted_metrics_isSet = false;
    m_promoted_metrics_isValid = false;

    m_public_metrics_isSet = false;
    m_public_metrics_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_media_key_isValid = ::OpenAPI::fromJsonValue(m_media_key, json[QString("media_key")]);
    m_media_key_isSet = !json[QString("media_key")].isNull() && m_media_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("duration_ms")]);
    m_duration_ms_isSet = !json[QString("duration_ms")].isNull() && m_duration_ms_isValid;

    m_non_public_metrics_isValid = ::OpenAPI::fromJsonValue(m_non_public_metrics, json[QString("non_public_metrics")]);
    m_non_public_metrics_isSet = !json[QString("non_public_metrics")].isNull() && m_non_public_metrics_isValid;

    m_organic_metrics_isValid = ::OpenAPI::fromJsonValue(m_organic_metrics, json[QString("organic_metrics")]);
    m_organic_metrics_isSet = !json[QString("organic_metrics")].isNull() && m_organic_metrics_isValid;

    m_preview_image_url_isValid = ::OpenAPI::fromJsonValue(m_preview_image_url, json[QString("preview_image_url")]);
    m_preview_image_url_isSet = !json[QString("preview_image_url")].isNull() && m_preview_image_url_isValid;

    m_promoted_metrics_isValid = ::OpenAPI::fromJsonValue(m_promoted_metrics, json[QString("promoted_metrics")]);
    m_promoted_metrics_isSet = !json[QString("promoted_metrics")].isNull() && m_promoted_metrics_isValid;

    m_public_metrics_isValid = ::OpenAPI::fromJsonValue(m_public_metrics, json[QString("public_metrics")]);
    m_public_metrics_isSet = !json[QString("public_metrics")].isNull() && m_public_metrics_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_media_key_isSet) {
        obj.insert(QString("media_key"), ::OpenAPI::toJsonValue(m_media_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("duration_ms"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_non_public_metrics.isSet()) {
        obj.insert(QString("non_public_metrics"), ::OpenAPI::toJsonValue(m_non_public_metrics));
    }
    if (m_organic_metrics.isSet()) {
        obj.insert(QString("organic_metrics"), ::OpenAPI::toJsonValue(m_organic_metrics));
    }
    if (m_preview_image_url_isSet) {
        obj.insert(QString("preview_image_url"), ::OpenAPI::toJsonValue(m_preview_image_url));
    }
    if (m_promoted_metrics.isSet()) {
        obj.insert(QString("promoted_metrics"), ::OpenAPI::toJsonValue(m_promoted_metrics));
    }
    if (m_public_metrics.isSet()) {
        obj.insert(QString("public_metrics"), ::OpenAPI::toJsonValue(m_public_metrics));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

qint32 OAIVideo::getHeight() const {
    return m_height;
}
void OAIVideo::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideo::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideo::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIVideo::getMediaKey() const {
    return m_media_key;
}
void OAIVideo::setMediaKey(const QString &media_key) {
    m_media_key = media_key;
    m_media_key_isSet = true;
}

bool OAIVideo::is_media_key_Set() const{
    return m_media_key_isSet;
}

bool OAIVideo::is_media_key_Valid() const{
    return m_media_key_isValid;
}

QString OAIVideo::getType() const {
    return m_type;
}
void OAIVideo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVideo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVideo::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIVideo::getWidth() const {
    return m_width;
}
void OAIVideo::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideo::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideo::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAIVideo::getDurationMs() const {
    return m_duration_ms;
}
void OAIVideo::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAIVideo::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAIVideo::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

OAIVideo_allOf_non_public_metrics OAIVideo::getNonPublicMetrics() const {
    return m_non_public_metrics;
}
void OAIVideo::setNonPublicMetrics(const OAIVideo_allOf_non_public_metrics &non_public_metrics) {
    m_non_public_metrics = non_public_metrics;
    m_non_public_metrics_isSet = true;
}

bool OAIVideo::is_non_public_metrics_Set() const{
    return m_non_public_metrics_isSet;
}

bool OAIVideo::is_non_public_metrics_Valid() const{
    return m_non_public_metrics_isValid;
}

OAIVideo_allOf_organic_metrics OAIVideo::getOrganicMetrics() const {
    return m_organic_metrics;
}
void OAIVideo::setOrganicMetrics(const OAIVideo_allOf_organic_metrics &organic_metrics) {
    m_organic_metrics = organic_metrics;
    m_organic_metrics_isSet = true;
}

bool OAIVideo::is_organic_metrics_Set() const{
    return m_organic_metrics_isSet;
}

bool OAIVideo::is_organic_metrics_Valid() const{
    return m_organic_metrics_isValid;
}

QString OAIVideo::getPreviewImageUrl() const {
    return m_preview_image_url;
}
void OAIVideo::setPreviewImageUrl(const QString &preview_image_url) {
    m_preview_image_url = preview_image_url;
    m_preview_image_url_isSet = true;
}

bool OAIVideo::is_preview_image_url_Set() const{
    return m_preview_image_url_isSet;
}

bool OAIVideo::is_preview_image_url_Valid() const{
    return m_preview_image_url_isValid;
}

OAIVideo_allOf_promoted_metrics OAIVideo::getPromotedMetrics() const {
    return m_promoted_metrics;
}
void OAIVideo::setPromotedMetrics(const OAIVideo_allOf_promoted_metrics &promoted_metrics) {
    m_promoted_metrics = promoted_metrics;
    m_promoted_metrics_isSet = true;
}

bool OAIVideo::is_promoted_metrics_Set() const{
    return m_promoted_metrics_isSet;
}

bool OAIVideo::is_promoted_metrics_Valid() const{
    return m_promoted_metrics_isValid;
}

OAIVideo_allOf_public_metrics OAIVideo::getPublicMetrics() const {
    return m_public_metrics;
}
void OAIVideo::setPublicMetrics(const OAIVideo_allOf_public_metrics &public_metrics) {
    m_public_metrics = public_metrics;
    m_public_metrics_isSet = true;
}

bool OAIVideo::is_public_metrics_Set() const{
    return m_public_metrics_isSet;
}

bool OAIVideo::is_public_metrics_Valid() const{
    return m_public_metrics_isValid;
}

QList<OAIVariant> OAIVideo::getVariants() const {
    return m_variants;
}
void OAIVideo::setVariants(const QList<OAIVariant> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIVideo::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIVideo::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_public_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
