/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariant::OAIVariant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariant::OAIVariant() {
    this->initializeModel();
}

OAIVariant::~OAIVariant() {}

void OAIVariant::initializeModel() {

    m_bit_rate_isSet = false;
    m_bit_rate_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVariant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariant::fromJsonObject(QJsonObject json) {

    m_bit_rate_isValid = ::OpenAPI::fromJsonValue(m_bit_rate, json[QString("bit_rate")]);
    m_bit_rate_isSet = !json[QString("bit_rate")].isNull() && m_bit_rate_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVariant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariant::asJsonObject() const {
    QJsonObject obj;
    if (m_bit_rate_isSet) {
        obj.insert(QString("bit_rate"), ::OpenAPI::toJsonValue(m_bit_rate));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIVariant::getBitRate() const {
    return m_bit_rate;
}
void OAIVariant::setBitRate(const qint32 &bit_rate) {
    m_bit_rate = bit_rate;
    m_bit_rate_isSet = true;
}

bool OAIVariant::is_bit_rate_Set() const{
    return m_bit_rate_isSet;
}

bool OAIVariant::is_bit_rate_Valid() const{
    return m_bit_rate_isValid;
}

QString OAIVariant::getContentType() const {
    return m_content_type;
}
void OAIVariant::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIVariant::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIVariant::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIVariant::getUrl() const {
    return m_url;
}
void OAIVariant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVariant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVariant::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVariant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
