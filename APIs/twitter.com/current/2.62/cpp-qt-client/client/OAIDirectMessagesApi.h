/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDirectMessagesApi_H
#define OAI_OAIDirectMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDmConversationRequest.h"
#include "OAICreateDmEventResponse.h"
#include "OAICreateMessageRequest.h"
#include "OAIError.h"
#include "OAIGet2DmConversationsIdDmEventsResponse.h"
#include "OAIGet2DmConversationsWithParticipantIdDmEventsResponse.h"
#include "OAIGet2DmEventsResponse.h"
#include "OAIProblem.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDirectMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIDirectMessagesApi(const int timeOut = 0);
    ~OAIDirectMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dm_conversation_id QString [required]
    * @param[in]  oai_create_message_request OAICreateMessageRequest [optional]
    */
    virtual void dmConversationByIdEventIdCreate(const QString &dm_conversation_id, const ::OpenAPI::OptionalParam<OAICreateMessageRequest> &oai_create_message_request = ::OpenAPI::OptionalParam<OAICreateMessageRequest>());

    /**
    * @param[in]  oai_create_dm_conversation_request OAICreateDmConversationRequest [optional]
    */
    virtual void dmConversationIdCreate(const ::OpenAPI::OptionalParam<OAICreateDmConversationRequest> &oai_create_dm_conversation_request = ::OpenAPI::OptionalParam<OAICreateDmConversationRequest>());

    /**
    * @param[in]  participant_id QString [required]
    * @param[in]  oai_create_message_request OAICreateMessageRequest [optional]
    */
    virtual void dmConversationWithUserEventIdCreate(const QString &participant_id, const ::OpenAPI::OptionalParam<OAICreateMessageRequest> &oai_create_message_request = ::OpenAPI::OptionalParam<OAICreateMessageRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  event_types QSet<QString> [optional]
    * @param[in]  dm_event_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void getDmConversationsIdDmEvents(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &event_types = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &dm_event_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  participant_id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  event_types QSet<QString> [optional]
    * @param[in]  dm_event_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void getDmConversationsWithParticipantIdDmEvents(const QString &participant_id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &event_types = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &dm_event_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  event_types QSet<QString> [optional]
    * @param[in]  dm_event_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void getDmEvents(const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &event_types = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &dm_event_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dmConversationByIdEventIdCreateCallback(OAIHttpRequestWorker *worker);
    void dmConversationIdCreateCallback(OAIHttpRequestWorker *worker);
    void dmConversationWithUserEventIdCreateCallback(OAIHttpRequestWorker *worker);
    void getDmConversationsIdDmEventsCallback(OAIHttpRequestWorker *worker);
    void getDmConversationsWithParticipantIdDmEventsCallback(OAIHttpRequestWorker *worker);
    void getDmEventsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dmConversationByIdEventIdCreateSignal(OAICreateDmEventResponse summary);
    void dmConversationIdCreateSignal(OAICreateDmEventResponse summary);
    void dmConversationWithUserEventIdCreateSignal(OAICreateDmEventResponse summary);
    void getDmConversationsIdDmEventsSignal(OAIGet2DmConversationsIdDmEventsResponse summary);
    void getDmConversationsWithParticipantIdDmEventsSignal(OAIGet2DmConversationsWithParticipantIdDmEventsResponse summary);
    void getDmEventsSignal(OAIGet2DmEventsResponse summary);


    void dmConversationByIdEventIdCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateDmEventResponse summary);
    void dmConversationIdCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateDmEventResponse summary);
    void dmConversationWithUserEventIdCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateDmEventResponse summary);
    void getDmConversationsIdDmEventsSignalFull(OAIHttpRequestWorker *worker, OAIGet2DmConversationsIdDmEventsResponse summary);
    void getDmConversationsWithParticipantIdDmEventsSignalFull(OAIHttpRequestWorker *worker, OAIGet2DmConversationsWithParticipantIdDmEventsResponse summary);
    void getDmEventsSignalFull(OAIHttpRequestWorker *worker, OAIGet2DmEventsResponse summary);

    Q_DECL_DEPRECATED_X("Use dmConversationByIdEventIdCreateSignalError() instead")
    void dmConversationByIdEventIdCreateSignalE(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationByIdEventIdCreateSignalError(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmConversationIdCreateSignalError() instead")
    void dmConversationIdCreateSignalE(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationIdCreateSignalError(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmConversationWithUserEventIdCreateSignalError() instead")
    void dmConversationWithUserEventIdCreateSignalE(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationWithUserEventIdCreateSignalError(OAICreateDmEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmConversationsIdDmEventsSignalError() instead")
    void getDmConversationsIdDmEventsSignalE(OAIGet2DmConversationsIdDmEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmConversationsIdDmEventsSignalError(OAIGet2DmConversationsIdDmEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmConversationsWithParticipantIdDmEventsSignalError() instead")
    void getDmConversationsWithParticipantIdDmEventsSignalE(OAIGet2DmConversationsWithParticipantIdDmEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmConversationsWithParticipantIdDmEventsSignalError(OAIGet2DmConversationsWithParticipantIdDmEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmEventsSignalError() instead")
    void getDmEventsSignalE(OAIGet2DmEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmEventsSignalError(OAIGet2DmEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dmConversationByIdEventIdCreateSignalErrorFull() instead")
    void dmConversationByIdEventIdCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationByIdEventIdCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmConversationIdCreateSignalErrorFull() instead")
    void dmConversationIdCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationIdCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmConversationWithUserEventIdCreateSignalErrorFull() instead")
    void dmConversationWithUserEventIdCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmConversationWithUserEventIdCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmConversationsIdDmEventsSignalErrorFull() instead")
    void getDmConversationsIdDmEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmConversationsIdDmEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmConversationsWithParticipantIdDmEventsSignalErrorFull() instead")
    void getDmConversationsWithParticipantIdDmEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmConversationsWithParticipantIdDmEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDmEventsSignalErrorFull() instead")
    void getDmEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDmEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
