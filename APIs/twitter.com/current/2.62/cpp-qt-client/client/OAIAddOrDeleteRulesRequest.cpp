/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddOrDeleteRulesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddOrDeleteRulesRequest::OAIAddOrDeleteRulesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddOrDeleteRulesRequest::OAIAddOrDeleteRulesRequest() {
    this->initializeModel();
}

OAIAddOrDeleteRulesRequest::~OAIAddOrDeleteRulesRequest() {}

void OAIAddOrDeleteRulesRequest::initializeModel() {

    m_add_isSet = false;
    m_add_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;
}

void OAIAddOrDeleteRulesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddOrDeleteRulesRequest::fromJsonObject(QJsonObject json) {

    m_add_isValid = ::OpenAPI::fromJsonValue(m_add, json[QString("add")]);
    m_add_isSet = !json[QString("add")].isNull() && m_add_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;
}

QString OAIAddOrDeleteRulesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddOrDeleteRulesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add.size() > 0) {
        obj.insert(QString("add"), ::OpenAPI::toJsonValue(m_add));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    return obj;
}

QList<OAIRuleNoId> OAIAddOrDeleteRulesRequest::getAdd() const {
    return m_add;
}
void OAIAddOrDeleteRulesRequest::setAdd(const QList<OAIRuleNoId> &add) {
    m_add = add;
    m_add_isSet = true;
}

bool OAIAddOrDeleteRulesRequest::is_add_Set() const{
    return m_add_isSet;
}

bool OAIAddOrDeleteRulesRequest::is_add_Valid() const{
    return m_add_isValid;
}

OAIDeleteRulesRequest_delete OAIAddOrDeleteRulesRequest::getRDelete() const {
    return m_r_delete;
}
void OAIAddOrDeleteRulesRequest::setRDelete(const OAIDeleteRulesRequest_delete &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIAddOrDeleteRulesRequest::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIAddOrDeleteRulesRequest::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAIAddOrDeleteRulesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddOrDeleteRulesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_add_isValid && m_r_delete_isValid && true;
}

} // namespace OpenAPI
