/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBookmarksApi_H
#define OAI_OAIBookmarksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBookmarkAddRequest.h"
#include "OAIBookmarkMutationResponse.h"
#include "OAIError.h"
#include "OAIGet2UsersIdBookmarksResponse.h"
#include "OAIProblem.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBookmarksApi : public QObject {
    Q_OBJECT

public:
    OAIBookmarksApi(const int timeOut = 0);
    ~OAIBookmarksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void getUsersIdBookmarks(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_bookmark_add_request OAIBookmarkAddRequest [required]
    */
    virtual void postUsersIdBookmarks(const QString &id, const OAIBookmarkAddRequest &oai_bookmark_add_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tweet_id QString [required]
    */
    virtual void usersIdBookmarksDelete(const QString &id, const QString &tweet_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getUsersIdBookmarksCallback(OAIHttpRequestWorker *worker);
    void postUsersIdBookmarksCallback(OAIHttpRequestWorker *worker);
    void usersIdBookmarksDeleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getUsersIdBookmarksSignal(OAIGet2UsersIdBookmarksResponse summary);
    void postUsersIdBookmarksSignal(OAIBookmarkMutationResponse summary);
    void usersIdBookmarksDeleteSignal(OAIBookmarkMutationResponse summary);


    void getUsersIdBookmarksSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdBookmarksResponse summary);
    void postUsersIdBookmarksSignalFull(OAIHttpRequestWorker *worker, OAIBookmarkMutationResponse summary);
    void usersIdBookmarksDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBookmarkMutationResponse summary);

    Q_DECL_DEPRECATED_X("Use getUsersIdBookmarksSignalError() instead")
    void getUsersIdBookmarksSignalE(OAIGet2UsersIdBookmarksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdBookmarksSignalError(OAIGet2UsersIdBookmarksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdBookmarksSignalError() instead")
    void postUsersIdBookmarksSignalE(OAIBookmarkMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdBookmarksSignalError(OAIBookmarkMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBookmarksDeleteSignalError() instead")
    void usersIdBookmarksDeleteSignalE(OAIBookmarkMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBookmarksDeleteSignalError(OAIBookmarkMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getUsersIdBookmarksSignalErrorFull() instead")
    void getUsersIdBookmarksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdBookmarksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdBookmarksSignalErrorFull() instead")
    void postUsersIdBookmarksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdBookmarksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBookmarksDeleteSignalErrorFull() instead")
    void usersIdBookmarksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBookmarksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
