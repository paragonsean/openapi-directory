/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFullTextEntities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFullTextEntities::OAIFullTextEntities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFullTextEntities::OAIFullTextEntities() {
    this->initializeModel();
}

OAIFullTextEntities::~OAIFullTextEntities() {}

void OAIFullTextEntities::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_cashtags_isSet = false;
    m_cashtags_isValid = false;

    m_hashtags_isSet = false;
    m_hashtags_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIFullTextEntities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFullTextEntities::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_cashtags_isValid = ::OpenAPI::fromJsonValue(m_cashtags, json[QString("cashtags")]);
    m_cashtags_isSet = !json[QString("cashtags")].isNull() && m_cashtags_isValid;

    m_hashtags_isValid = ::OpenAPI::fromJsonValue(m_hashtags, json[QString("hashtags")]);
    m_hashtags_isSet = !json[QString("hashtags")].isNull() && m_hashtags_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIFullTextEntities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFullTextEntities::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_cashtags.size() > 0) {
        obj.insert(QString("cashtags"), ::OpenAPI::toJsonValue(m_cashtags));
    }
    if (m_hashtags.size() > 0) {
        obj.insert(QString("hashtags"), ::OpenAPI::toJsonValue(m_hashtags));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAIFullTextEntities_annotations_inner> OAIFullTextEntities::getAnnotations() const {
    return m_annotations;
}
void OAIFullTextEntities::setAnnotations(const QList<OAIFullTextEntities_annotations_inner> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIFullTextEntities::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIFullTextEntities::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAICashtagEntity> OAIFullTextEntities::getCashtags() const {
    return m_cashtags;
}
void OAIFullTextEntities::setCashtags(const QList<OAICashtagEntity> &cashtags) {
    m_cashtags = cashtags;
    m_cashtags_isSet = true;
}

bool OAIFullTextEntities::is_cashtags_Set() const{
    return m_cashtags_isSet;
}

bool OAIFullTextEntities::is_cashtags_Valid() const{
    return m_cashtags_isValid;
}

QList<OAIHashtagEntity> OAIFullTextEntities::getHashtags() const {
    return m_hashtags;
}
void OAIFullTextEntities::setHashtags(const QList<OAIHashtagEntity> &hashtags) {
    m_hashtags = hashtags;
    m_hashtags_isSet = true;
}

bool OAIFullTextEntities::is_hashtags_Set() const{
    return m_hashtags_isSet;
}

bool OAIFullTextEntities::is_hashtags_Valid() const{
    return m_hashtags_isValid;
}

QList<OAIMentionEntity> OAIFullTextEntities::getMentions() const {
    return m_mentions;
}
void OAIFullTextEntities::setMentions(const QList<OAIMentionEntity> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIFullTextEntities::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIFullTextEntities::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QList<OAIUrlEntity> OAIFullTextEntities::getUrls() const {
    return m_urls;
}
void OAIFullTextEntities::setUrls(const QList<OAIUrlEntity> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIFullTextEntities::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIFullTextEntities::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIFullTextEntities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cashtags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashtags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFullTextEntities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
