/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetWithheld.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetWithheld::OAITweetWithheld(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetWithheld::OAITweetWithheld() {
    this->initializeModel();
}

OAITweetWithheld::~OAITweetWithheld() {}

void OAITweetWithheld::initializeModel() {

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAITweetWithheld::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetWithheld::fromJsonObject(QJsonObject json) {

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("country_codes")]);
    m_country_codes_isSet = !json[QString("country_codes")].isNull() && m_country_codes_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAITweetWithheld::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetWithheld::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("country_codes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

bool OAITweetWithheld::isCopyright() const {
    return m_copyright;
}
void OAITweetWithheld::setCopyright(const bool &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAITweetWithheld::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAITweetWithheld::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QSet<QString> OAITweetWithheld::getCountryCodes() const {
    return m_country_codes;
}
void OAITweetWithheld::setCountryCodes(const QSet<QString> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAITweetWithheld::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAITweetWithheld::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

QString OAITweetWithheld::getScope() const {
    return m_scope;
}
void OAITweetWithheld::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAITweetWithheld::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAITweetWithheld::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAITweetWithheld::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetWithheld::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_copyright_isValid && m_country_codes_isValid && true;
}

} // namespace OpenAPI
