/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweet::OAITweet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweet::OAITweet() {
    this->initializeModel();
}

OAITweet::~OAITweet() {}

void OAITweet::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_author_id_isSet = false;
    m_author_id_isValid = false;

    m_context_annotations_isSet = false;
    m_context_annotations_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_edit_controls_isSet = false;
    m_edit_controls_isValid = false;

    m_edit_history_tweet_ids_isSet = false;
    m_edit_history_tweet_ids_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_reply_to_user_id_isSet = false;
    m_in_reply_to_user_id_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_non_public_metrics_isSet = false;
    m_non_public_metrics_isValid = false;

    m_organic_metrics_isSet = false;
    m_organic_metrics_isValid = false;

    m_possibly_sensitive_isSet = false;
    m_possibly_sensitive_isValid = false;

    m_promoted_metrics_isSet = false;
    m_promoted_metrics_isValid = false;

    m_public_metrics_isSet = false;
    m_public_metrics_isValid = false;

    m_referenced_tweets_isSet = false;
    m_referenced_tweets_isValid = false;

    m_reply_settings_isSet = false;
    m_reply_settings_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_withheld_isSet = false;
    m_withheld_isValid = false;
}

void OAITweet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweet::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_author_id_isValid = ::OpenAPI::fromJsonValue(m_author_id, json[QString("author_id")]);
    m_author_id_isSet = !json[QString("author_id")].isNull() && m_author_id_isValid;

    m_context_annotations_isValid = ::OpenAPI::fromJsonValue(m_context_annotations, json[QString("context_annotations")]);
    m_context_annotations_isSet = !json[QString("context_annotations")].isNull() && m_context_annotations_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_edit_controls_isValid = ::OpenAPI::fromJsonValue(m_edit_controls, json[QString("edit_controls")]);
    m_edit_controls_isSet = !json[QString("edit_controls")].isNull() && m_edit_controls_isValid;

    m_edit_history_tweet_ids_isValid = ::OpenAPI::fromJsonValue(m_edit_history_tweet_ids, json[QString("edit_history_tweet_ids")]);
    m_edit_history_tweet_ids_isSet = !json[QString("edit_history_tweet_ids")].isNull() && m_edit_history_tweet_ids_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_reply_to_user_id_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to_user_id, json[QString("in_reply_to_user_id")]);
    m_in_reply_to_user_id_isSet = !json[QString("in_reply_to_user_id")].isNull() && m_in_reply_to_user_id_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_non_public_metrics_isValid = ::OpenAPI::fromJsonValue(m_non_public_metrics, json[QString("non_public_metrics")]);
    m_non_public_metrics_isSet = !json[QString("non_public_metrics")].isNull() && m_non_public_metrics_isValid;

    m_organic_metrics_isValid = ::OpenAPI::fromJsonValue(m_organic_metrics, json[QString("organic_metrics")]);
    m_organic_metrics_isSet = !json[QString("organic_metrics")].isNull() && m_organic_metrics_isValid;

    m_possibly_sensitive_isValid = ::OpenAPI::fromJsonValue(m_possibly_sensitive, json[QString("possibly_sensitive")]);
    m_possibly_sensitive_isSet = !json[QString("possibly_sensitive")].isNull() && m_possibly_sensitive_isValid;

    m_promoted_metrics_isValid = ::OpenAPI::fromJsonValue(m_promoted_metrics, json[QString("promoted_metrics")]);
    m_promoted_metrics_isSet = !json[QString("promoted_metrics")].isNull() && m_promoted_metrics_isValid;

    m_public_metrics_isValid = ::OpenAPI::fromJsonValue(m_public_metrics, json[QString("public_metrics")]);
    m_public_metrics_isSet = !json[QString("public_metrics")].isNull() && m_public_metrics_isValid;

    m_referenced_tweets_isValid = ::OpenAPI::fromJsonValue(m_referenced_tweets, json[QString("referenced_tweets")]);
    m_referenced_tweets_isSet = !json[QString("referenced_tweets")].isNull() && m_referenced_tweets_isValid;

    m_reply_settings_isValid = ::OpenAPI::fromJsonValue(m_reply_settings, json[QString("reply_settings")]);
    m_reply_settings_isSet = !json[QString("reply_settings")].isNull() && m_reply_settings_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_withheld_isValid = ::OpenAPI::fromJsonValue(m_withheld, json[QString("withheld")]);
    m_withheld_isSet = !json[QString("withheld")].isNull() && m_withheld_isValid;
}

QString OAITweet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweet::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_author_id_isSet) {
        obj.insert(QString("author_id"), ::OpenAPI::toJsonValue(m_author_id));
    }
    if (m_context_annotations.size() > 0) {
        obj.insert(QString("context_annotations"), ::OpenAPI::toJsonValue(m_context_annotations));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_edit_controls.isSet()) {
        obj.insert(QString("edit_controls"), ::OpenAPI::toJsonValue(m_edit_controls));
    }
    if (m_edit_history_tweet_ids.size() > 0) {
        obj.insert(QString("edit_history_tweet_ids"), ::OpenAPI::toJsonValue(m_edit_history_tweet_ids));
    }
    if (m_entities.isSet()) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_reply_to_user_id_isSet) {
        obj.insert(QString("in_reply_to_user_id"), ::OpenAPI::toJsonValue(m_in_reply_to_user_id));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_non_public_metrics.isSet()) {
        obj.insert(QString("non_public_metrics"), ::OpenAPI::toJsonValue(m_non_public_metrics));
    }
    if (m_organic_metrics.isSet()) {
        obj.insert(QString("organic_metrics"), ::OpenAPI::toJsonValue(m_organic_metrics));
    }
    if (m_possibly_sensitive_isSet) {
        obj.insert(QString("possibly_sensitive"), ::OpenAPI::toJsonValue(m_possibly_sensitive));
    }
    if (m_promoted_metrics.isSet()) {
        obj.insert(QString("promoted_metrics"), ::OpenAPI::toJsonValue(m_promoted_metrics));
    }
    if (m_public_metrics.isSet()) {
        obj.insert(QString("public_metrics"), ::OpenAPI::toJsonValue(m_public_metrics));
    }
    if (m_referenced_tweets.size() > 0) {
        obj.insert(QString("referenced_tweets"), ::OpenAPI::toJsonValue(m_referenced_tweets));
    }
    if (m_reply_settings.isSet()) {
        obj.insert(QString("reply_settings"), ::OpenAPI::toJsonValue(m_reply_settings));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_withheld.isSet()) {
        obj.insert(QString("withheld"), ::OpenAPI::toJsonValue(m_withheld));
    }
    return obj;
}

OAITweet_attachments OAITweet::getAttachments() const {
    return m_attachments;
}
void OAITweet::setAttachments(const OAITweet_attachments &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAITweet::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAITweet::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAITweet::getAuthorId() const {
    return m_author_id;
}
void OAITweet::setAuthorId(const QString &author_id) {
    m_author_id = author_id;
    m_author_id_isSet = true;
}

bool OAITweet::is_author_id_Set() const{
    return m_author_id_isSet;
}

bool OAITweet::is_author_id_Valid() const{
    return m_author_id_isValid;
}

QList<OAIContextAnnotation> OAITweet::getContextAnnotations() const {
    return m_context_annotations;
}
void OAITweet::setContextAnnotations(const QList<OAIContextAnnotation> &context_annotations) {
    m_context_annotations = context_annotations;
    m_context_annotations_isSet = true;
}

bool OAITweet::is_context_annotations_Set() const{
    return m_context_annotations_isSet;
}

bool OAITweet::is_context_annotations_Valid() const{
    return m_context_annotations_isValid;
}

QString OAITweet::getConversationId() const {
    return m_conversation_id;
}
void OAITweet::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAITweet::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAITweet::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QDateTime OAITweet::getCreatedAt() const {
    return m_created_at;
}
void OAITweet::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITweet::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITweet::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAITweet_edit_controls OAITweet::getEditControls() const {
    return m_edit_controls;
}
void OAITweet::setEditControls(const OAITweet_edit_controls &edit_controls) {
    m_edit_controls = edit_controls;
    m_edit_controls_isSet = true;
}

bool OAITweet::is_edit_controls_Set() const{
    return m_edit_controls_isSet;
}

bool OAITweet::is_edit_controls_Valid() const{
    return m_edit_controls_isValid;
}

QList<QString> OAITweet::getEditHistoryTweetIds() const {
    return m_edit_history_tweet_ids;
}
void OAITweet::setEditHistoryTweetIds(const QList<QString> &edit_history_tweet_ids) {
    m_edit_history_tweet_ids = edit_history_tweet_ids;
    m_edit_history_tweet_ids_isSet = true;
}

bool OAITweet::is_edit_history_tweet_ids_Set() const{
    return m_edit_history_tweet_ids_isSet;
}

bool OAITweet::is_edit_history_tweet_ids_Valid() const{
    return m_edit_history_tweet_ids_isValid;
}

OAIFullTextEntities OAITweet::getEntities() const {
    return m_entities;
}
void OAITweet::setEntities(const OAIFullTextEntities &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAITweet::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAITweet::is_entities_Valid() const{
    return m_entities_isValid;
}

OAITweet_geo OAITweet::getGeo() const {
    return m_geo;
}
void OAITweet::setGeo(const OAITweet_geo &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAITweet::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAITweet::is_geo_Valid() const{
    return m_geo_isValid;
}

QString OAITweet::getId() const {
    return m_id;
}
void OAITweet::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITweet::is_id_Set() const{
    return m_id_isSet;
}

bool OAITweet::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITweet::getInReplyToUserId() const {
    return m_in_reply_to_user_id;
}
void OAITweet::setInReplyToUserId(const QString &in_reply_to_user_id) {
    m_in_reply_to_user_id = in_reply_to_user_id;
    m_in_reply_to_user_id_isSet = true;
}

bool OAITweet::is_in_reply_to_user_id_Set() const{
    return m_in_reply_to_user_id_isSet;
}

bool OAITweet::is_in_reply_to_user_id_Valid() const{
    return m_in_reply_to_user_id_isValid;
}

QString OAITweet::getLang() const {
    return m_lang;
}
void OAITweet::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAITweet::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAITweet::is_lang_Valid() const{
    return m_lang_isValid;
}

OAITweet_non_public_metrics OAITweet::getNonPublicMetrics() const {
    return m_non_public_metrics;
}
void OAITweet::setNonPublicMetrics(const OAITweet_non_public_metrics &non_public_metrics) {
    m_non_public_metrics = non_public_metrics;
    m_non_public_metrics_isSet = true;
}

bool OAITweet::is_non_public_metrics_Set() const{
    return m_non_public_metrics_isSet;
}

bool OAITweet::is_non_public_metrics_Valid() const{
    return m_non_public_metrics_isValid;
}

OAITweet_organic_metrics OAITweet::getOrganicMetrics() const {
    return m_organic_metrics;
}
void OAITweet::setOrganicMetrics(const OAITweet_organic_metrics &organic_metrics) {
    m_organic_metrics = organic_metrics;
    m_organic_metrics_isSet = true;
}

bool OAITweet::is_organic_metrics_Set() const{
    return m_organic_metrics_isSet;
}

bool OAITweet::is_organic_metrics_Valid() const{
    return m_organic_metrics_isValid;
}

bool OAITweet::isPossiblySensitive() const {
    return m_possibly_sensitive;
}
void OAITweet::setPossiblySensitive(const bool &possibly_sensitive) {
    m_possibly_sensitive = possibly_sensitive;
    m_possibly_sensitive_isSet = true;
}

bool OAITweet::is_possibly_sensitive_Set() const{
    return m_possibly_sensitive_isSet;
}

bool OAITweet::is_possibly_sensitive_Valid() const{
    return m_possibly_sensitive_isValid;
}

OAITweet_promoted_metrics OAITweet::getPromotedMetrics() const {
    return m_promoted_metrics;
}
void OAITweet::setPromotedMetrics(const OAITweet_promoted_metrics &promoted_metrics) {
    m_promoted_metrics = promoted_metrics;
    m_promoted_metrics_isSet = true;
}

bool OAITweet::is_promoted_metrics_Set() const{
    return m_promoted_metrics_isSet;
}

bool OAITweet::is_promoted_metrics_Valid() const{
    return m_promoted_metrics_isValid;
}

OAITweet_public_metrics OAITweet::getPublicMetrics() const {
    return m_public_metrics;
}
void OAITweet::setPublicMetrics(const OAITweet_public_metrics &public_metrics) {
    m_public_metrics = public_metrics;
    m_public_metrics_isSet = true;
}

bool OAITweet::is_public_metrics_Set() const{
    return m_public_metrics_isSet;
}

bool OAITweet::is_public_metrics_Valid() const{
    return m_public_metrics_isValid;
}

QList<OAITweet_referenced_tweets_inner> OAITweet::getReferencedTweets() const {
    return m_referenced_tweets;
}
void OAITweet::setReferencedTweets(const QList<OAITweet_referenced_tweets_inner> &referenced_tweets) {
    m_referenced_tweets = referenced_tweets;
    m_referenced_tweets_isSet = true;
}

bool OAITweet::is_referenced_tweets_Set() const{
    return m_referenced_tweets_isSet;
}

bool OAITweet::is_referenced_tweets_Valid() const{
    return m_referenced_tweets_isValid;
}

OAIReplySettings OAITweet::getReplySettings() const {
    return m_reply_settings;
}
void OAITweet::setReplySettings(const OAIReplySettings &reply_settings) {
    m_reply_settings = reply_settings;
    m_reply_settings_isSet = true;
}

bool OAITweet::is_reply_settings_Set() const{
    return m_reply_settings_isSet;
}

bool OAITweet::is_reply_settings_Valid() const{
    return m_reply_settings_isValid;
}

QString OAITweet::getSource() const {
    return m_source;
}
void OAITweet::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITweet::is_source_Set() const{
    return m_source_isSet;
}

bool OAITweet::is_source_Valid() const{
    return m_source_isValid;
}

QString OAITweet::getText() const {
    return m_text;
}
void OAITweet::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITweet::is_text_Set() const{
    return m_text_isSet;
}

bool OAITweet::is_text_Valid() const{
    return m_text_isValid;
}

OAITweetWithheld OAITweet::getWithheld() const {
    return m_withheld;
}
void OAITweet::setWithheld(const OAITweetWithheld &withheld) {
    m_withheld = withheld;
    m_withheld_isSet = true;
}

bool OAITweet::is_withheld_Set() const{
    return m_withheld_isSet;
}

bool OAITweet::is_withheld_Valid() const{
    return m_withheld_isValid;
}

bool OAITweet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_history_tweet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_public_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_possibly_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_tweets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withheld.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_edit_history_tweet_ids_isValid && m_id_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
