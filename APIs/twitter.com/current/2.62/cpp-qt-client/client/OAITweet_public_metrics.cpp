/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweet_public_metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweet_public_metrics::OAITweet_public_metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweet_public_metrics::OAITweet_public_metrics() {
    this->initializeModel();
}

OAITweet_public_metrics::~OAITweet_public_metrics() {}

void OAITweet_public_metrics::initializeModel() {

    m_impression_count_isSet = false;
    m_impression_count_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_quote_count_isSet = false;
    m_quote_count_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_retweet_count_isSet = false;
    m_retweet_count_isValid = false;
}

void OAITweet_public_metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweet_public_metrics::fromJsonObject(QJsonObject json) {

    m_impression_count_isValid = ::OpenAPI::fromJsonValue(m_impression_count, json[QString("impression_count")]);
    m_impression_count_isSet = !json[QString("impression_count")].isNull() && m_impression_count_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("like_count")]);
    m_like_count_isSet = !json[QString("like_count")].isNull() && m_like_count_isValid;

    m_quote_count_isValid = ::OpenAPI::fromJsonValue(m_quote_count, json[QString("quote_count")]);
    m_quote_count_isSet = !json[QString("quote_count")].isNull() && m_quote_count_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("reply_count")]);
    m_reply_count_isSet = !json[QString("reply_count")].isNull() && m_reply_count_isValid;

    m_retweet_count_isValid = ::OpenAPI::fromJsonValue(m_retweet_count, json[QString("retweet_count")]);
    m_retweet_count_isSet = !json[QString("retweet_count")].isNull() && m_retweet_count_isValid;
}

QString OAITweet_public_metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweet_public_metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_impression_count_isSet) {
        obj.insert(QString("impression_count"), ::OpenAPI::toJsonValue(m_impression_count));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("like_count"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_quote_count_isSet) {
        obj.insert(QString("quote_count"), ::OpenAPI::toJsonValue(m_quote_count));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("reply_count"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_retweet_count_isSet) {
        obj.insert(QString("retweet_count"), ::OpenAPI::toJsonValue(m_retweet_count));
    }
    return obj;
}

qint32 OAITweet_public_metrics::getImpressionCount() const {
    return m_impression_count;
}
void OAITweet_public_metrics::setImpressionCount(const qint32 &impression_count) {
    m_impression_count = impression_count;
    m_impression_count_isSet = true;
}

bool OAITweet_public_metrics::is_impression_count_Set() const{
    return m_impression_count_isSet;
}

bool OAITweet_public_metrics::is_impression_count_Valid() const{
    return m_impression_count_isValid;
}

qint32 OAITweet_public_metrics::getLikeCount() const {
    return m_like_count;
}
void OAITweet_public_metrics::setLikeCount(const qint32 &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAITweet_public_metrics::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAITweet_public_metrics::is_like_count_Valid() const{
    return m_like_count_isValid;
}

qint32 OAITweet_public_metrics::getQuoteCount() const {
    return m_quote_count;
}
void OAITweet_public_metrics::setQuoteCount(const qint32 &quote_count) {
    m_quote_count = quote_count;
    m_quote_count_isSet = true;
}

bool OAITweet_public_metrics::is_quote_count_Set() const{
    return m_quote_count_isSet;
}

bool OAITweet_public_metrics::is_quote_count_Valid() const{
    return m_quote_count_isValid;
}

qint32 OAITweet_public_metrics::getReplyCount() const {
    return m_reply_count;
}
void OAITweet_public_metrics::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAITweet_public_metrics::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAITweet_public_metrics::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

qint32 OAITweet_public_metrics::getRetweetCount() const {
    return m_retweet_count;
}
void OAITweet_public_metrics::setRetweetCount(const qint32 &retweet_count) {
    m_retweet_count = retweet_count;
    m_retweet_count_isSet = true;
}

bool OAITweet_public_metrics::is_retweet_count_Set() const{
    return m_retweet_count_isSet;
}

bool OAITweet_public_metrics::is_retweet_count_Valid() const{
    return m_retweet_count_isValid;
}

bool OAITweet_public_metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_impression_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retweet_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweet_public_metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_impression_count_isValid && m_like_count_isValid && m_reply_count_isValid && m_retweet_count_isValid && true;
}

} // namespace OpenAPI
