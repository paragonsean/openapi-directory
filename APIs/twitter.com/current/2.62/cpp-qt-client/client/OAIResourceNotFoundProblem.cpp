/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceNotFoundProblem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceNotFoundProblem::OAIResourceNotFoundProblem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceNotFoundProblem::OAIResourceNotFoundProblem() {
    this->initializeModel();
}

OAIResourceNotFoundProblem::~OAIResourceNotFoundProblem() {}

void OAIResourceNotFoundProblem::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIResourceNotFoundProblem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceNotFoundProblem::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIResourceNotFoundProblem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceNotFoundProblem::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIResourceNotFoundProblem::getDetail() const {
    return m_detail;
}
void OAIResourceNotFoundProblem::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIResourceNotFoundProblem::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIResourceNotFoundProblem::is_detail_Valid() const{
    return m_detail_isValid;
}

qint32 OAIResourceNotFoundProblem::getStatus() const {
    return m_status;
}
void OAIResourceNotFoundProblem::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResourceNotFoundProblem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResourceNotFoundProblem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResourceNotFoundProblem::getTitle() const {
    return m_title;
}
void OAIResourceNotFoundProblem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIResourceNotFoundProblem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIResourceNotFoundProblem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIResourceNotFoundProblem::getType() const {
    return m_type;
}
void OAIResourceNotFoundProblem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceNotFoundProblem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceNotFoundProblem::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIResourceNotFoundProblem::getParameter() const {
    return m_parameter;
}
void OAIResourceNotFoundProblem::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIResourceNotFoundProblem::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIResourceNotFoundProblem::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAIResourceNotFoundProblem::getResourceId() const {
    return m_resource_id;
}
void OAIResourceNotFoundProblem::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceNotFoundProblem::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceNotFoundProblem::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceNotFoundProblem::getResourceType() const {
    return m_resource_type;
}
void OAIResourceNotFoundProblem::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceNotFoundProblem::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceNotFoundProblem::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIResourceNotFoundProblem::getValue() const {
    return m_value;
}
void OAIResourceNotFoundProblem::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIResourceNotFoundProblem::is_value_Set() const{
    return m_value_isSet;
}

bool OAIResourceNotFoundProblem::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIResourceNotFoundProblem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceNotFoundProblem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_type_isValid && m_parameter_isValid && m_resource_id_isValid && m_resource_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
