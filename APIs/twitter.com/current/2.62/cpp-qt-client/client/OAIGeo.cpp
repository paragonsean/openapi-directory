/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeo::OAIGeo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeo::OAIGeo() {
    this->initializeModel();
}

OAIGeo::~OAIGeo() {}

void OAIGeo::initializeModel() {

    m_bbox_isSet = false;
    m_bbox_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGeo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeo::fromJsonObject(QJsonObject json) {

    m_bbox_isValid = ::OpenAPI::fromJsonValue(m_bbox, json[QString("bbox")]);
    m_bbox_isSet = !json[QString("bbox")].isNull() && m_bbox_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGeo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeo::asJsonObject() const {
    QJsonObject obj;
    if (m_bbox.size() > 0) {
        obj.insert(QString("bbox"), ::OpenAPI::toJsonValue(m_bbox));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<double> OAIGeo::getBbox() const {
    return m_bbox;
}
void OAIGeo::setBbox(const QList<double> &bbox) {
    m_bbox = bbox;
    m_bbox_isSet = true;
}

bool OAIGeo::is_bbox_Set() const{
    return m_bbox_isSet;
}

bool OAIGeo::is_bbox_Valid() const{
    return m_bbox_isValid;
}

OAIPoint OAIGeo::getGeometry() const {
    return m_geometry;
}
void OAIGeo::setGeometry(const OAIPoint &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIGeo::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIGeo::is_geometry_Valid() const{
    return m_geometry_isValid;
}

OAIObject OAIGeo::getProperties() const {
    return m_properties;
}
void OAIGeo::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGeo::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGeo::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIGeo::getType() const {
    return m_type;
}
void OAIGeo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGeo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bbox.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bbox_isValid && m_properties_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
