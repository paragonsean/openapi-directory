/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweet_attachments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweet_attachments::OAITweet_attachments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweet_attachments::OAITweet_attachments() {
    this->initializeModel();
}

OAITweet_attachments::~OAITweet_attachments() {}

void OAITweet_attachments::initializeModel() {

    m_media_keys_isSet = false;
    m_media_keys_isValid = false;

    m_poll_ids_isSet = false;
    m_poll_ids_isValid = false;
}

void OAITweet_attachments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweet_attachments::fromJsonObject(QJsonObject json) {

    m_media_keys_isValid = ::OpenAPI::fromJsonValue(m_media_keys, json[QString("media_keys")]);
    m_media_keys_isSet = !json[QString("media_keys")].isNull() && m_media_keys_isValid;

    m_poll_ids_isValid = ::OpenAPI::fromJsonValue(m_poll_ids, json[QString("poll_ids")]);
    m_poll_ids_isSet = !json[QString("poll_ids")].isNull() && m_poll_ids_isValid;
}

QString OAITweet_attachments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweet_attachments::asJsonObject() const {
    QJsonObject obj;
    if (m_media_keys.size() > 0) {
        obj.insert(QString("media_keys"), ::OpenAPI::toJsonValue(m_media_keys));
    }
    if (m_poll_ids.size() > 0) {
        obj.insert(QString("poll_ids"), ::OpenAPI::toJsonValue(m_poll_ids));
    }
    return obj;
}

QList<QString> OAITweet_attachments::getMediaKeys() const {
    return m_media_keys;
}
void OAITweet_attachments::setMediaKeys(const QList<QString> &media_keys) {
    m_media_keys = media_keys;
    m_media_keys_isSet = true;
}

bool OAITweet_attachments::is_media_keys_Set() const{
    return m_media_keys_isSet;
}

bool OAITweet_attachments::is_media_keys_Valid() const{
    return m_media_keys_isValid;
}

QList<QString> OAITweet_attachments::getPollIds() const {
    return m_poll_ids;
}
void OAITweet_attachments::setPollIds(const QList<QString> &poll_ids) {
    m_poll_ids = poll_ids;
    m_poll_ids_isSet = true;
}

bool OAITweet_attachments::is_poll_ids_Set() const{
    return m_poll_ids_isSet;
}

bool OAITweet_attachments::is_poll_ids_Valid() const{
    return m_poll_ids_isValid;
}

bool OAITweet_attachments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweet_attachments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
