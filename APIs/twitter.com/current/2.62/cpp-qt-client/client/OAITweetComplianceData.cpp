/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetComplianceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetComplianceData::OAITweetComplianceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetComplianceData::OAITweetComplianceData() {
    this->initializeModel();
}

OAITweetComplianceData::~OAITweetComplianceData() {}

void OAITweetComplianceData::initializeModel() {

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_withheld_isSet = false;
    m_withheld_isValid = false;

    m_drop_isSet = false;
    m_drop_isValid = false;

    m_undrop_isSet = false;
    m_undrop_isValid = false;

    m_tweet_edit_isSet = false;
    m_tweet_edit_isValid = false;
}

void OAITweetComplianceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetComplianceData::fromJsonObject(QJsonObject json) {

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_withheld_isValid = ::OpenAPI::fromJsonValue(m_withheld, json[QString("withheld")]);
    m_withheld_isSet = !json[QString("withheld")].isNull() && m_withheld_isValid;

    m_drop_isValid = ::OpenAPI::fromJsonValue(m_drop, json[QString("drop")]);
    m_drop_isSet = !json[QString("drop")].isNull() && m_drop_isValid;

    m_undrop_isValid = ::OpenAPI::fromJsonValue(m_undrop, json[QString("undrop")]);
    m_undrop_isSet = !json[QString("undrop")].isNull() && m_undrop_isValid;

    m_tweet_edit_isValid = ::OpenAPI::fromJsonValue(m_tweet_edit, json[QString("tweet_edit")]);
    m_tweet_edit_isSet = !json[QString("tweet_edit")].isNull() && m_tweet_edit_isValid;
}

QString OAITweetComplianceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetComplianceData::asJsonObject() const {
    QJsonObject obj;
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_withheld.isSet()) {
        obj.insert(QString("withheld"), ::OpenAPI::toJsonValue(m_withheld));
    }
    if (m_drop.isSet()) {
        obj.insert(QString("drop"), ::OpenAPI::toJsonValue(m_drop));
    }
    if (m_undrop.isSet()) {
        obj.insert(QString("undrop"), ::OpenAPI::toJsonValue(m_undrop));
    }
    if (m_tweet_edit.isSet()) {
        obj.insert(QString("tweet_edit"), ::OpenAPI::toJsonValue(m_tweet_edit));
    }
    return obj;
}

OAITweetComplianceSchema OAITweetComplianceData::getRDelete() const {
    return m_r_delete;
}
void OAITweetComplianceData::setRDelete(const OAITweetComplianceSchema &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAITweetComplianceData::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAITweetComplianceData::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAITweetTakedownComplianceSchema OAITweetComplianceData::getWithheld() const {
    return m_withheld;
}
void OAITweetComplianceData::setWithheld(const OAITweetTakedownComplianceSchema &withheld) {
    m_withheld = withheld;
    m_withheld_isSet = true;
}

bool OAITweetComplianceData::is_withheld_Set() const{
    return m_withheld_isSet;
}

bool OAITweetComplianceData::is_withheld_Valid() const{
    return m_withheld_isValid;
}

OAITweetComplianceSchema OAITweetComplianceData::getDrop() const {
    return m_drop;
}
void OAITweetComplianceData::setDrop(const OAITweetComplianceSchema &drop) {
    m_drop = drop;
    m_drop_isSet = true;
}

bool OAITweetComplianceData::is_drop_Set() const{
    return m_drop_isSet;
}

bool OAITweetComplianceData::is_drop_Valid() const{
    return m_drop_isValid;
}

OAITweetComplianceSchema OAITweetComplianceData::getUndrop() const {
    return m_undrop;
}
void OAITweetComplianceData::setUndrop(const OAITweetComplianceSchema &undrop) {
    m_undrop = undrop;
    m_undrop_isSet = true;
}

bool OAITweetComplianceData::is_undrop_Set() const{
    return m_undrop_isSet;
}

bool OAITweetComplianceData::is_undrop_Valid() const{
    return m_undrop_isValid;
}

OAITweetEditComplianceObjectSchema OAITweetComplianceData::getTweetEdit() const {
    return m_tweet_edit;
}
void OAITweetComplianceData::setTweetEdit(const OAITweetEditComplianceObjectSchema &tweet_edit) {
    m_tweet_edit = tweet_edit;
    m_tweet_edit_isSet = true;
}

bool OAITweetComplianceData::is_tweet_edit_Set() const{
    return m_tweet_edit_isSet;
}

bool OAITweetComplianceData::is_tweet_edit_Valid() const{
    return m_tweet_edit_isValid;
}

bool OAITweetComplianceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_withheld.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undrop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tweet_edit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetComplianceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_delete_isValid && m_withheld_isValid && m_drop_isValid && m_undrop_isValid && m_tweet_edit_isValid && true;
}

} // namespace OpenAPI
