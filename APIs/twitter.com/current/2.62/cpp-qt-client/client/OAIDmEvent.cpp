/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDmEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDmEvent::OAIDmEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDmEvent::OAIDmEvent() {
    this->initializeModel();
}

OAIDmEvent::~OAIDmEvent() {}

void OAIDmEvent::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dm_conversation_id_isSet = false;
    m_dm_conversation_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_participant_ids_isSet = false;
    m_participant_ids_isValid = false;

    m_referenced_tweets_isSet = false;
    m_referenced_tweets_isValid = false;

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDmEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDmEvent::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dm_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_dm_conversation_id, json[QString("dm_conversation_id")]);
    m_dm_conversation_id_isSet = !json[QString("dm_conversation_id")].isNull() && m_dm_conversation_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_participant_ids_isValid = ::OpenAPI::fromJsonValue(m_participant_ids, json[QString("participant_ids")]);
    m_participant_ids_isSet = !json[QString("participant_ids")].isNull() && m_participant_ids_isValid;

    m_referenced_tweets_isValid = ::OpenAPI::fromJsonValue(m_referenced_tweets, json[QString("referenced_tweets")]);
    m_referenced_tweets_isSet = !json[QString("referenced_tweets")].isNull() && m_referenced_tweets_isValid;

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("sender_id")]);
    m_sender_id_isSet = !json[QString("sender_id")].isNull() && m_sender_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDmEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDmEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dm_conversation_id_isSet) {
        obj.insert(QString("dm_conversation_id"), ::OpenAPI::toJsonValue(m_dm_conversation_id));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_participant_ids.size() > 0) {
        obj.insert(QString("participant_ids"), ::OpenAPI::toJsonValue(m_participant_ids));
    }
    if (m_referenced_tweets.size() > 0) {
        obj.insert(QString("referenced_tweets"), ::OpenAPI::toJsonValue(m_referenced_tweets));
    }
    if (m_sender_id_isSet) {
        obj.insert(QString("sender_id"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIDmEvent_attachments OAIDmEvent::getAttachments() const {
    return m_attachments;
}
void OAIDmEvent::setAttachments(const OAIDmEvent_attachments &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIDmEvent::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIDmEvent::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QDateTime OAIDmEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIDmEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDmEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDmEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDmEvent::getDmConversationId() const {
    return m_dm_conversation_id;
}
void OAIDmEvent::setDmConversationId(const QString &dm_conversation_id) {
    m_dm_conversation_id = dm_conversation_id;
    m_dm_conversation_id_isSet = true;
}

bool OAIDmEvent::is_dm_conversation_id_Set() const{
    return m_dm_conversation_id_isSet;
}

bool OAIDmEvent::is_dm_conversation_id_Valid() const{
    return m_dm_conversation_id_isValid;
}

QString OAIDmEvent::getEventType() const {
    return m_event_type;
}
void OAIDmEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIDmEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIDmEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIDmEvent::getId() const {
    return m_id;
}
void OAIDmEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDmEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDmEvent::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIDmEvent::getParticipantIds() const {
    return m_participant_ids;
}
void OAIDmEvent::setParticipantIds(const QList<QString> &participant_ids) {
    m_participant_ids = participant_ids;
    m_participant_ids_isSet = true;
}

bool OAIDmEvent::is_participant_ids_Set() const{
    return m_participant_ids_isSet;
}

bool OAIDmEvent::is_participant_ids_Valid() const{
    return m_participant_ids_isValid;
}

QList<OAIDmEvent_referenced_tweets_inner> OAIDmEvent::getReferencedTweets() const {
    return m_referenced_tweets;
}
void OAIDmEvent::setReferencedTweets(const QList<OAIDmEvent_referenced_tweets_inner> &referenced_tweets) {
    m_referenced_tweets = referenced_tweets;
    m_referenced_tweets_isSet = true;
}

bool OAIDmEvent::is_referenced_tweets_Set() const{
    return m_referenced_tweets_isSet;
}

bool OAIDmEvent::is_referenced_tweets_Valid() const{
    return m_referenced_tweets_isValid;
}

QString OAIDmEvent::getSenderId() const {
    return m_sender_id;
}
void OAIDmEvent::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAIDmEvent::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAIDmEvent::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAIDmEvent::getText() const {
    return m_text;
}
void OAIDmEvent::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDmEvent::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDmEvent::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDmEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dm_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_tweets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDmEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
