/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoll.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoll::OAIPoll(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoll::OAIPoll() {
    this->initializeModel();
}

OAIPoll::~OAIPoll() {}

void OAIPoll::initializeModel() {

    m_duration_minutes_isSet = false;
    m_duration_minutes_isValid = false;

    m_end_datetime_isSet = false;
    m_end_datetime_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_voting_status_isSet = false;
    m_voting_status_isValid = false;
}

void OAIPoll::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoll::fromJsonObject(QJsonObject json) {

    m_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_duration_minutes, json[QString("duration_minutes")]);
    m_duration_minutes_isSet = !json[QString("duration_minutes")].isNull() && m_duration_minutes_isValid;

    m_end_datetime_isValid = ::OpenAPI::fromJsonValue(m_end_datetime, json[QString("end_datetime")]);
    m_end_datetime_isSet = !json[QString("end_datetime")].isNull() && m_end_datetime_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_voting_status_isValid = ::OpenAPI::fromJsonValue(m_voting_status, json[QString("voting_status")]);
    m_voting_status_isSet = !json[QString("voting_status")].isNull() && m_voting_status_isValid;
}

QString OAIPoll::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoll::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_minutes_isSet) {
        obj.insert(QString("duration_minutes"), ::OpenAPI::toJsonValue(m_duration_minutes));
    }
    if (m_end_datetime_isSet) {
        obj.insert(QString("end_datetime"), ::OpenAPI::toJsonValue(m_end_datetime));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_voting_status_isSet) {
        obj.insert(QString("voting_status"), ::OpenAPI::toJsonValue(m_voting_status));
    }
    return obj;
}

qint32 OAIPoll::getDurationMinutes() const {
    return m_duration_minutes;
}
void OAIPoll::setDurationMinutes(const qint32 &duration_minutes) {
    m_duration_minutes = duration_minutes;
    m_duration_minutes_isSet = true;
}

bool OAIPoll::is_duration_minutes_Set() const{
    return m_duration_minutes_isSet;
}

bool OAIPoll::is_duration_minutes_Valid() const{
    return m_duration_minutes_isValid;
}

QDateTime OAIPoll::getEndDatetime() const {
    return m_end_datetime;
}
void OAIPoll::setEndDatetime(const QDateTime &end_datetime) {
    m_end_datetime = end_datetime;
    m_end_datetime_isSet = true;
}

bool OAIPoll::is_end_datetime_Set() const{
    return m_end_datetime_isSet;
}

bool OAIPoll::is_end_datetime_Valid() const{
    return m_end_datetime_isValid;
}

QString OAIPoll::getId() const {
    return m_id;
}
void OAIPoll::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPoll::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPoll::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPollOption> OAIPoll::getOptions() const {
    return m_options;
}
void OAIPoll::setOptions(const QList<OAIPollOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPoll::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPoll::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIPoll::getVotingStatus() const {
    return m_voting_status;
}
void OAIPoll::setVotingStatus(const QString &voting_status) {
    m_voting_status = voting_status;
    m_voting_status_isSet = true;
}

bool OAIPoll::is_voting_status_Set() const{
    return m_voting_status_isSet;
}

bool OAIPoll::is_voting_status_Valid() const{
    return m_voting_status_isValid;
}

bool OAIPoll::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voting_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoll::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_options_isValid && true;
}

} // namespace OpenAPI
