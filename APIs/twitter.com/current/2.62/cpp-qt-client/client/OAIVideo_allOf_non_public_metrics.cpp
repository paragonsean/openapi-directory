/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_allOf_non_public_metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_allOf_non_public_metrics::OAIVideo_allOf_non_public_metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_allOf_non_public_metrics::OAIVideo_allOf_non_public_metrics() {
    this->initializeModel();
}

OAIVideo_allOf_non_public_metrics::~OAIVideo_allOf_non_public_metrics() {}

void OAIVideo_allOf_non_public_metrics::initializeModel() {

    m_playback_0_count_isSet = false;
    m_playback_0_count_isValid = false;

    m_playback_100_count_isSet = false;
    m_playback_100_count_isValid = false;

    m_playback_25_count_isSet = false;
    m_playback_25_count_isValid = false;

    m_playback_50_count_isSet = false;
    m_playback_50_count_isValid = false;

    m_playback_75_count_isSet = false;
    m_playback_75_count_isValid = false;
}

void OAIVideo_allOf_non_public_metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_allOf_non_public_metrics::fromJsonObject(QJsonObject json) {

    m_playback_0_count_isValid = ::OpenAPI::fromJsonValue(m_playback_0_count, json[QString("playback_0_count")]);
    m_playback_0_count_isSet = !json[QString("playback_0_count")].isNull() && m_playback_0_count_isValid;

    m_playback_100_count_isValid = ::OpenAPI::fromJsonValue(m_playback_100_count, json[QString("playback_100_count")]);
    m_playback_100_count_isSet = !json[QString("playback_100_count")].isNull() && m_playback_100_count_isValid;

    m_playback_25_count_isValid = ::OpenAPI::fromJsonValue(m_playback_25_count, json[QString("playback_25_count")]);
    m_playback_25_count_isSet = !json[QString("playback_25_count")].isNull() && m_playback_25_count_isValid;

    m_playback_50_count_isValid = ::OpenAPI::fromJsonValue(m_playback_50_count, json[QString("playback_50_count")]);
    m_playback_50_count_isSet = !json[QString("playback_50_count")].isNull() && m_playback_50_count_isValid;

    m_playback_75_count_isValid = ::OpenAPI::fromJsonValue(m_playback_75_count, json[QString("playback_75_count")]);
    m_playback_75_count_isSet = !json[QString("playback_75_count")].isNull() && m_playback_75_count_isValid;
}

QString OAIVideo_allOf_non_public_metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_allOf_non_public_metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_playback_0_count_isSet) {
        obj.insert(QString("playback_0_count"), ::OpenAPI::toJsonValue(m_playback_0_count));
    }
    if (m_playback_100_count_isSet) {
        obj.insert(QString("playback_100_count"), ::OpenAPI::toJsonValue(m_playback_100_count));
    }
    if (m_playback_25_count_isSet) {
        obj.insert(QString("playback_25_count"), ::OpenAPI::toJsonValue(m_playback_25_count));
    }
    if (m_playback_50_count_isSet) {
        obj.insert(QString("playback_50_count"), ::OpenAPI::toJsonValue(m_playback_50_count));
    }
    if (m_playback_75_count_isSet) {
        obj.insert(QString("playback_75_count"), ::OpenAPI::toJsonValue(m_playback_75_count));
    }
    return obj;
}

qint32 OAIVideo_allOf_non_public_metrics::getPlayback0Count() const {
    return m_playback_0_count;
}
void OAIVideo_allOf_non_public_metrics::setPlayback0Count(const qint32 &playback_0_count) {
    m_playback_0_count = playback_0_count;
    m_playback_0_count_isSet = true;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_0_count_Set() const{
    return m_playback_0_count_isSet;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_0_count_Valid() const{
    return m_playback_0_count_isValid;
}

qint32 OAIVideo_allOf_non_public_metrics::getPlayback100Count() const {
    return m_playback_100_count;
}
void OAIVideo_allOf_non_public_metrics::setPlayback100Count(const qint32 &playback_100_count) {
    m_playback_100_count = playback_100_count;
    m_playback_100_count_isSet = true;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_100_count_Set() const{
    return m_playback_100_count_isSet;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_100_count_Valid() const{
    return m_playback_100_count_isValid;
}

qint32 OAIVideo_allOf_non_public_metrics::getPlayback25Count() const {
    return m_playback_25_count;
}
void OAIVideo_allOf_non_public_metrics::setPlayback25Count(const qint32 &playback_25_count) {
    m_playback_25_count = playback_25_count;
    m_playback_25_count_isSet = true;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_25_count_Set() const{
    return m_playback_25_count_isSet;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_25_count_Valid() const{
    return m_playback_25_count_isValid;
}

qint32 OAIVideo_allOf_non_public_metrics::getPlayback50Count() const {
    return m_playback_50_count;
}
void OAIVideo_allOf_non_public_metrics::setPlayback50Count(const qint32 &playback_50_count) {
    m_playback_50_count = playback_50_count;
    m_playback_50_count_isSet = true;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_50_count_Set() const{
    return m_playback_50_count_isSet;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_50_count_Valid() const{
    return m_playback_50_count_isValid;
}

qint32 OAIVideo_allOf_non_public_metrics::getPlayback75Count() const {
    return m_playback_75_count;
}
void OAIVideo_allOf_non_public_metrics::setPlayback75Count(const qint32 &playback_75_count) {
    m_playback_75_count = playback_75_count;
    m_playback_75_count_isSet = true;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_75_count_Set() const{
    return m_playback_75_count_isSet;
}

bool OAIVideo_allOf_non_public_metrics::is_playback_75_count_Valid() const{
    return m_playback_75_count_isValid;
}

bool OAIVideo_allOf_non_public_metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_playback_0_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_100_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_25_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_50_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_75_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_allOf_non_public_metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
