/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnimatedGif.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnimatedGif::OAIAnimatedGif(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnimatedGif::OAIAnimatedGif() {
    this->initializeModel();
}

OAIAnimatedGif::~OAIAnimatedGif() {}

void OAIAnimatedGif::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_media_key_isSet = false;
    m_media_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_preview_image_url_isSet = false;
    m_preview_image_url_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIAnimatedGif::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnimatedGif::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_media_key_isValid = ::OpenAPI::fromJsonValue(m_media_key, json[QString("media_key")]);
    m_media_key_isSet = !json[QString("media_key")].isNull() && m_media_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_preview_image_url_isValid = ::OpenAPI::fromJsonValue(m_preview_image_url, json[QString("preview_image_url")]);
    m_preview_image_url_isSet = !json[QString("preview_image_url")].isNull() && m_preview_image_url_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIAnimatedGif::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnimatedGif::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_media_key_isSet) {
        obj.insert(QString("media_key"), ::OpenAPI::toJsonValue(m_media_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_preview_image_url_isSet) {
        obj.insert(QString("preview_image_url"), ::OpenAPI::toJsonValue(m_preview_image_url));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

qint32 OAIAnimatedGif::getHeight() const {
    return m_height;
}
void OAIAnimatedGif::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIAnimatedGif::is_height_Set() const{
    return m_height_isSet;
}

bool OAIAnimatedGif::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIAnimatedGif::getMediaKey() const {
    return m_media_key;
}
void OAIAnimatedGif::setMediaKey(const QString &media_key) {
    m_media_key = media_key;
    m_media_key_isSet = true;
}

bool OAIAnimatedGif::is_media_key_Set() const{
    return m_media_key_isSet;
}

bool OAIAnimatedGif::is_media_key_Valid() const{
    return m_media_key_isValid;
}

QString OAIAnimatedGif::getType() const {
    return m_type;
}
void OAIAnimatedGif::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnimatedGif::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnimatedGif::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIAnimatedGif::getWidth() const {
    return m_width;
}
void OAIAnimatedGif::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAnimatedGif::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAnimatedGif::is_width_Valid() const{
    return m_width_isValid;
}

QString OAIAnimatedGif::getPreviewImageUrl() const {
    return m_preview_image_url;
}
void OAIAnimatedGif::setPreviewImageUrl(const QString &preview_image_url) {
    m_preview_image_url = preview_image_url;
    m_preview_image_url_isSet = true;
}

bool OAIAnimatedGif::is_preview_image_url_Set() const{
    return m_preview_image_url_isSet;
}

bool OAIAnimatedGif::is_preview_image_url_Valid() const{
    return m_preview_image_url_isValid;
}

QList<OAIVariant> OAIAnimatedGif::getVariants() const {
    return m_variants;
}
void OAIAnimatedGif::setVariants(const QList<OAIVariant> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIAnimatedGif::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIAnimatedGif::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIAnimatedGif::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnimatedGif::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
