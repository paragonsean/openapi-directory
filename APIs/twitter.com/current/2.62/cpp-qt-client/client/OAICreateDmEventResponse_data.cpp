/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDmEventResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDmEventResponse_data::OAICreateDmEventResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDmEventResponse_data::OAICreateDmEventResponse_data() {
    this->initializeModel();
}

OAICreateDmEventResponse_data::~OAICreateDmEventResponse_data() {}

void OAICreateDmEventResponse_data::initializeModel() {

    m_dm_conversation_id_isSet = false;
    m_dm_conversation_id_isValid = false;

    m_dm_event_id_isSet = false;
    m_dm_event_id_isValid = false;
}

void OAICreateDmEventResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDmEventResponse_data::fromJsonObject(QJsonObject json) {

    m_dm_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_dm_conversation_id, json[QString("dm_conversation_id")]);
    m_dm_conversation_id_isSet = !json[QString("dm_conversation_id")].isNull() && m_dm_conversation_id_isValid;

    m_dm_event_id_isValid = ::OpenAPI::fromJsonValue(m_dm_event_id, json[QString("dm_event_id")]);
    m_dm_event_id_isSet = !json[QString("dm_event_id")].isNull() && m_dm_event_id_isValid;
}

QString OAICreateDmEventResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDmEventResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_dm_conversation_id_isSet) {
        obj.insert(QString("dm_conversation_id"), ::OpenAPI::toJsonValue(m_dm_conversation_id));
    }
    if (m_dm_event_id_isSet) {
        obj.insert(QString("dm_event_id"), ::OpenAPI::toJsonValue(m_dm_event_id));
    }
    return obj;
}

QString OAICreateDmEventResponse_data::getDmConversationId() const {
    return m_dm_conversation_id;
}
void OAICreateDmEventResponse_data::setDmConversationId(const QString &dm_conversation_id) {
    m_dm_conversation_id = dm_conversation_id;
    m_dm_conversation_id_isSet = true;
}

bool OAICreateDmEventResponse_data::is_dm_conversation_id_Set() const{
    return m_dm_conversation_id_isSet;
}

bool OAICreateDmEventResponse_data::is_dm_conversation_id_Valid() const{
    return m_dm_conversation_id_isValid;
}

QString OAICreateDmEventResponse_data::getDmEventId() const {
    return m_dm_event_id;
}
void OAICreateDmEventResponse_data::setDmEventId(const QString &dm_event_id) {
    m_dm_event_id = dm_event_id;
    m_dm_event_id_isSet = true;
}

bool OAICreateDmEventResponse_data::is_dm_event_id_Set() const{
    return m_dm_event_id_isSet;
}

bool OAICreateDmEventResponse_data::is_dm_event_id_Valid() const{
    return m_dm_event_id_isValid;
}

bool OAICreateDmEventResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dm_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dm_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDmEventResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dm_conversation_id_isValid && m_dm_event_id_isValid && true;
}

} // namespace OpenAPI
