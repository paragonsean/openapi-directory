/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITweetsApi_H
#define OAI_OAITweetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddOrDeleteRulesRequest.h"
#include "OAIAddOrDeleteRulesResponse.h"
#include "OAIError.h"
#include "OAIFilteredStreamingTweetResponse.h"
#include "OAIGet2ListsIdTweetsResponse.h"
#include "OAIGet2SpacesIdBuyersResponse.h"
#include "OAIGet2SpacesIdTweetsResponse.h"
#include "OAIGet2TweetsCountsAllResponse.h"
#include "OAIGet2TweetsCountsRecentResponse.h"
#include "OAIGet2TweetsIdQuoteTweetsResponse.h"
#include "OAIGet2TweetsIdResponse.h"
#include "OAIGet2TweetsResponse.h"
#include "OAIGet2TweetsSample10StreamResponse.h"
#include "OAIGet2TweetsSearchAllResponse.h"
#include "OAIGet2TweetsSearchRecentResponse.h"
#include "OAIGet2UsersIdLikedTweetsResponse.h"
#include "OAIGet2UsersIdMentionsResponse.h"
#include "OAIGet2UsersIdTimelinesReverseChronologicalResponse.h"
#include "OAIGet2UsersIdTweetsResponse.h"
#include "OAIProblem.h"
#include "OAIRulesLookupResponse.h"
#include "OAIStreamingTweetResponse.h"
#include "OAITweetCreateRequest.h"
#include "OAITweetCreateResponse.h"
#include "OAITweetDeleteResponse.h"
#include "OAITweetHideRequest.h"
#include "OAITweetHideResponse.h"
#include "OAIUsersLikesCreateRequest.h"
#include "OAIUsersLikesCreateResponse.h"
#include "OAIUsersLikesDeleteResponse.h"
#include "OAIUsersRetweetsCreateRequest.h"
#include "OAIUsersRetweetsCreateResponse.h"
#include "OAIUsersRetweetsDeleteResponse.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITweetsApi : public QObject {
    Q_OBJECT

public:
    OAITweetsApi(const int timeOut = 0);
    ~OAITweetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_or_delete_rules_request OAIAddOrDeleteRulesRequest [required]
    * @param[in]  dry_run bool [optional]
    */
    virtual void addOrDeleteRules(const OAIAddOrDeleteRulesRequest &oai_add_or_delete_rules_request, const ::OpenAPI::OptionalParam<bool> &dry_run = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_tweet_create_request OAITweetCreateRequest [required]
    */
    virtual void createTweet(const OAITweetCreateRequest &oai_tweet_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteTweetById(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void findTweetById(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void findTweetsById(const QList<QString> &ids, const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  exclude QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void findTweetsThatQuoteATweet(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &exclude = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    */
    virtual void getRules(const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  partition qint32 [required]
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void getTweetsFirehoseStream(const qint32 &partition, const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  partition qint32 [required]
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void getTweetsSample10Stream(const qint32 &partition, const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  tweet_id QString [required]
    * @param[in]  oai_tweet_hide_request OAITweetHideRequest [optional]
    */
    virtual void hideReplyById(const QString &tweet_id, const ::OpenAPI::OptionalParam<OAITweetHideRequest> &oai_tweet_hide_request = ::OpenAPI::OptionalParam<OAITweetHideRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void listsIdTweets(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void sampleStream(const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void searchStream(const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void spaceBuyers(const QString &id, const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void spaceTweets(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  granularity QString [optional]
    * @param[in]  search_count_fields QSet<QString> [optional]
    */
    virtual void tweetCountsFullArchiveSearch(const QString &query, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &granularity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &search_count_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  granularity QString [optional]
    * @param[in]  search_count_fields QSet<QString> [optional]
    */
    virtual void tweetCountsRecentSearch(const QString &query, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &granularity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &search_count_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void tweetsFullarchiveSearch(const QString &query, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void tweetsRecentSearch(const QString &query, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_users_likes_create_request OAIUsersLikesCreateRequest [optional]
    */
    virtual void usersIdLike(const QString &id, const ::OpenAPI::OptionalParam<OAIUsersLikesCreateRequest> &oai_users_likes_create_request = ::OpenAPI::OptionalParam<OAIUsersLikesCreateRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void usersIdLikedTweets(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void usersIdMentions(const QString &id, const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_users_retweets_create_request OAIUsersRetweetsCreateRequest [optional]
    */
    virtual void usersIdRetweets(const QString &id, const ::OpenAPI::OptionalParam<OAIUsersRetweetsCreateRequest> &oai_users_retweets_create_request = ::OpenAPI::OptionalParam<OAIUsersRetweetsCreateRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  exclude QSet<QString> [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void usersIdTimeline(const QString &id, const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &exclude = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  since_id QString [optional]
    * @param[in]  until_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  exclude QSet<QString> [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  media_fields QSet<QString> [optional]
    * @param[in]  poll_fields QSet<QString> [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  place_fields QSet<QString> [optional]
    */
    virtual void usersIdTweets(const QString &id, const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &exclude = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &media_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &poll_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &place_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  tweet_id QString [required]
    */
    virtual void usersIdUnlike(const QString &id, const QString &tweet_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  source_tweet_id QString [required]
    */
    virtual void usersIdUnretweets(const QString &id, const QString &source_tweet_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addOrDeleteRulesCallback(OAIHttpRequestWorker *worker);
    void createTweetCallback(OAIHttpRequestWorker *worker);
    void deleteTweetByIdCallback(OAIHttpRequestWorker *worker);
    void findTweetByIdCallback(OAIHttpRequestWorker *worker);
    void findTweetsByIdCallback(OAIHttpRequestWorker *worker);
    void findTweetsThatQuoteATweetCallback(OAIHttpRequestWorker *worker);
    void getRulesCallback(OAIHttpRequestWorker *worker);
    void getTweetsFirehoseStreamCallback(OAIHttpRequestWorker *worker);
    void getTweetsSample10StreamCallback(OAIHttpRequestWorker *worker);
    void hideReplyByIdCallback(OAIHttpRequestWorker *worker);
    void listsIdTweetsCallback(OAIHttpRequestWorker *worker);
    void sampleStreamCallback(OAIHttpRequestWorker *worker);
    void searchStreamCallback(OAIHttpRequestWorker *worker);
    void spaceBuyersCallback(OAIHttpRequestWorker *worker);
    void spaceTweetsCallback(OAIHttpRequestWorker *worker);
    void tweetCountsFullArchiveSearchCallback(OAIHttpRequestWorker *worker);
    void tweetCountsRecentSearchCallback(OAIHttpRequestWorker *worker);
    void tweetsFullarchiveSearchCallback(OAIHttpRequestWorker *worker);
    void tweetsRecentSearchCallback(OAIHttpRequestWorker *worker);
    void usersIdLikeCallback(OAIHttpRequestWorker *worker);
    void usersIdLikedTweetsCallback(OAIHttpRequestWorker *worker);
    void usersIdMentionsCallback(OAIHttpRequestWorker *worker);
    void usersIdRetweetsCallback(OAIHttpRequestWorker *worker);
    void usersIdTimelineCallback(OAIHttpRequestWorker *worker);
    void usersIdTweetsCallback(OAIHttpRequestWorker *worker);
    void usersIdUnlikeCallback(OAIHttpRequestWorker *worker);
    void usersIdUnretweetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addOrDeleteRulesSignal(OAIAddOrDeleteRulesResponse summary);
    void createTweetSignal(OAITweetCreateResponse summary);
    void deleteTweetByIdSignal(OAITweetDeleteResponse summary);
    void findTweetByIdSignal(OAIGet2TweetsIdResponse summary);
    void findTweetsByIdSignal(OAIGet2TweetsResponse summary);
    void findTweetsThatQuoteATweetSignal(OAIGet2TweetsIdQuoteTweetsResponse summary);
    void getRulesSignal(OAIRulesLookupResponse summary);
    void getTweetsFirehoseStreamSignal(OAIStreamingTweetResponse summary);
    void getTweetsSample10StreamSignal(OAIGet2TweetsSample10StreamResponse summary);
    void hideReplyByIdSignal(OAITweetHideResponse summary);
    void listsIdTweetsSignal(OAIGet2ListsIdTweetsResponse summary);
    void sampleStreamSignal(OAIStreamingTweetResponse summary);
    void searchStreamSignal(OAIFilteredStreamingTweetResponse summary);
    void spaceBuyersSignal(OAIGet2SpacesIdBuyersResponse summary);
    void spaceTweetsSignal(OAIGet2SpacesIdTweetsResponse summary);
    void tweetCountsFullArchiveSearchSignal(OAIGet2TweetsCountsAllResponse summary);
    void tweetCountsRecentSearchSignal(OAIGet2TweetsCountsRecentResponse summary);
    void tweetsFullarchiveSearchSignal(OAIGet2TweetsSearchAllResponse summary);
    void tweetsRecentSearchSignal(OAIGet2TweetsSearchRecentResponse summary);
    void usersIdLikeSignal(OAIUsersLikesCreateResponse summary);
    void usersIdLikedTweetsSignal(OAIGet2UsersIdLikedTweetsResponse summary);
    void usersIdMentionsSignal(OAIGet2UsersIdMentionsResponse summary);
    void usersIdRetweetsSignal(OAIUsersRetweetsCreateResponse summary);
    void usersIdTimelineSignal(OAIGet2UsersIdTimelinesReverseChronologicalResponse summary);
    void usersIdTweetsSignal(OAIGet2UsersIdTweetsResponse summary);
    void usersIdUnlikeSignal(OAIUsersLikesDeleteResponse summary);
    void usersIdUnretweetsSignal(OAIUsersRetweetsDeleteResponse summary);


    void addOrDeleteRulesSignalFull(OAIHttpRequestWorker *worker, OAIAddOrDeleteRulesResponse summary);
    void createTweetSignalFull(OAIHttpRequestWorker *worker, OAITweetCreateResponse summary);
    void deleteTweetByIdSignalFull(OAIHttpRequestWorker *worker, OAITweetDeleteResponse summary);
    void findTweetByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsIdResponse summary);
    void findTweetsByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsResponse summary);
    void findTweetsThatQuoteATweetSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsIdQuoteTweetsResponse summary);
    void getRulesSignalFull(OAIHttpRequestWorker *worker, OAIRulesLookupResponse summary);
    void getTweetsFirehoseStreamSignalFull(OAIHttpRequestWorker *worker, OAIStreamingTweetResponse summary);
    void getTweetsSample10StreamSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsSample10StreamResponse summary);
    void hideReplyByIdSignalFull(OAIHttpRequestWorker *worker, OAITweetHideResponse summary);
    void listsIdTweetsSignalFull(OAIHttpRequestWorker *worker, OAIGet2ListsIdTweetsResponse summary);
    void sampleStreamSignalFull(OAIHttpRequestWorker *worker, OAIStreamingTweetResponse summary);
    void searchStreamSignalFull(OAIHttpRequestWorker *worker, OAIFilteredStreamingTweetResponse summary);
    void spaceBuyersSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesIdBuyersResponse summary);
    void spaceTweetsSignalFull(OAIHttpRequestWorker *worker, OAIGet2SpacesIdTweetsResponse summary);
    void tweetCountsFullArchiveSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsCountsAllResponse summary);
    void tweetCountsRecentSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsCountsRecentResponse summary);
    void tweetsFullarchiveSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsSearchAllResponse summary);
    void tweetsRecentSearchSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsSearchRecentResponse summary);
    void usersIdLikeSignalFull(OAIHttpRequestWorker *worker, OAIUsersLikesCreateResponse summary);
    void usersIdLikedTweetsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdLikedTweetsResponse summary);
    void usersIdMentionsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdMentionsResponse summary);
    void usersIdRetweetsSignalFull(OAIHttpRequestWorker *worker, OAIUsersRetweetsCreateResponse summary);
    void usersIdTimelineSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdTimelinesReverseChronologicalResponse summary);
    void usersIdTweetsSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdTweetsResponse summary);
    void usersIdUnlikeSignalFull(OAIHttpRequestWorker *worker, OAIUsersLikesDeleteResponse summary);
    void usersIdUnretweetsSignalFull(OAIHttpRequestWorker *worker, OAIUsersRetweetsDeleteResponse summary);

    Q_DECL_DEPRECATED_X("Use addOrDeleteRulesSignalError() instead")
    void addOrDeleteRulesSignalE(OAIAddOrDeleteRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addOrDeleteRulesSignalError(OAIAddOrDeleteRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTweetSignalError() instead")
    void createTweetSignalE(OAITweetCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTweetSignalError(OAITweetCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTweetByIdSignalError() instead")
    void deleteTweetByIdSignalE(OAITweetDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTweetByIdSignalError(OAITweetDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetByIdSignalError() instead")
    void findTweetByIdSignalE(OAIGet2TweetsIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetByIdSignalError(OAIGet2TweetsIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetsByIdSignalError() instead")
    void findTweetsByIdSignalE(OAIGet2TweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetsByIdSignalError(OAIGet2TweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetsThatQuoteATweetSignalError() instead")
    void findTweetsThatQuoteATweetSignalE(OAIGet2TweetsIdQuoteTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetsThatQuoteATweetSignalError(OAIGet2TweetsIdQuoteTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalError() instead")
    void getRulesSignalE(OAIRulesLookupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalError(OAIRulesLookupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsFirehoseStreamSignalError() instead")
    void getTweetsFirehoseStreamSignalE(OAIStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsFirehoseStreamSignalError(OAIStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsSample10StreamSignalError() instead")
    void getTweetsSample10StreamSignalE(OAIGet2TweetsSample10StreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsSample10StreamSignalError(OAIGet2TweetsSample10StreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hideReplyByIdSignalError() instead")
    void hideReplyByIdSignalE(OAITweetHideResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hideReplyByIdSignalError(OAITweetHideResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listsIdTweetsSignalError() instead")
    void listsIdTweetsSignalE(OAIGet2ListsIdTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listsIdTweetsSignalError(OAIGet2ListsIdTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sampleStreamSignalError() instead")
    void sampleStreamSignalE(OAIStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sampleStreamSignalError(OAIStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchStreamSignalError() instead")
    void searchStreamSignalE(OAIFilteredStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchStreamSignalError(OAIFilteredStreamingTweetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceBuyersSignalError() instead")
    void spaceBuyersSignalE(OAIGet2SpacesIdBuyersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceBuyersSignalError(OAIGet2SpacesIdBuyersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceTweetsSignalError() instead")
    void spaceTweetsSignalE(OAIGet2SpacesIdTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceTweetsSignalError(OAIGet2SpacesIdTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetCountsFullArchiveSearchSignalError() instead")
    void tweetCountsFullArchiveSearchSignalE(OAIGet2TweetsCountsAllResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetCountsFullArchiveSearchSignalError(OAIGet2TweetsCountsAllResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetCountsRecentSearchSignalError() instead")
    void tweetCountsRecentSearchSignalE(OAIGet2TweetsCountsRecentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetCountsRecentSearchSignalError(OAIGet2TweetsCountsRecentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsFullarchiveSearchSignalError() instead")
    void tweetsFullarchiveSearchSignalE(OAIGet2TweetsSearchAllResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsFullarchiveSearchSignalError(OAIGet2TweetsSearchAllResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsRecentSearchSignalError() instead")
    void tweetsRecentSearchSignalE(OAIGet2TweetsSearchRecentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsRecentSearchSignalError(OAIGet2TweetsSearchRecentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdLikeSignalError() instead")
    void usersIdLikeSignalE(OAIUsersLikesCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdLikeSignalError(OAIUsersLikesCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdLikedTweetsSignalError() instead")
    void usersIdLikedTweetsSignalE(OAIGet2UsersIdLikedTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdLikedTweetsSignalError(OAIGet2UsersIdLikedTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMentionsSignalError() instead")
    void usersIdMentionsSignalE(OAIGet2UsersIdMentionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMentionsSignalError(OAIGet2UsersIdMentionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdRetweetsSignalError() instead")
    void usersIdRetweetsSignalE(OAIUsersRetweetsCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdRetweetsSignalError(OAIUsersRetweetsCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTimelineSignalError() instead")
    void usersIdTimelineSignalE(OAIGet2UsersIdTimelinesReverseChronologicalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTimelineSignalError(OAIGet2UsersIdTimelinesReverseChronologicalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTweetsSignalError() instead")
    void usersIdTweetsSignalE(OAIGet2UsersIdTweetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTweetsSignalError(OAIGet2UsersIdTweetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnlikeSignalError() instead")
    void usersIdUnlikeSignalE(OAIUsersLikesDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnlikeSignalError(OAIUsersLikesDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnretweetsSignalError() instead")
    void usersIdUnretweetsSignalE(OAIUsersRetweetsDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnretweetsSignalError(OAIUsersRetweetsDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addOrDeleteRulesSignalErrorFull() instead")
    void addOrDeleteRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addOrDeleteRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTweetSignalErrorFull() instead")
    void createTweetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTweetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTweetByIdSignalErrorFull() instead")
    void deleteTweetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTweetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetByIdSignalErrorFull() instead")
    void findTweetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetsByIdSignalErrorFull() instead")
    void findTweetsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findTweetsThatQuoteATweetSignalErrorFull() instead")
    void findTweetsThatQuoteATweetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTweetsThatQuoteATweetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalErrorFull() instead")
    void getRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsFirehoseStreamSignalErrorFull() instead")
    void getTweetsFirehoseStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsFirehoseStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsSample10StreamSignalErrorFull() instead")
    void getTweetsSample10StreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsSample10StreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hideReplyByIdSignalErrorFull() instead")
    void hideReplyByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hideReplyByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listsIdTweetsSignalErrorFull() instead")
    void listsIdTweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listsIdTweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sampleStreamSignalErrorFull() instead")
    void sampleStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sampleStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchStreamSignalErrorFull() instead")
    void searchStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceBuyersSignalErrorFull() instead")
    void spaceBuyersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceBuyersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spaceTweetsSignalErrorFull() instead")
    void spaceTweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spaceTweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetCountsFullArchiveSearchSignalErrorFull() instead")
    void tweetCountsFullArchiveSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetCountsFullArchiveSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetCountsRecentSearchSignalErrorFull() instead")
    void tweetCountsRecentSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetCountsRecentSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsFullarchiveSearchSignalErrorFull() instead")
    void tweetsFullarchiveSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsFullarchiveSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsRecentSearchSignalErrorFull() instead")
    void tweetsRecentSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsRecentSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdLikeSignalErrorFull() instead")
    void usersIdLikeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdLikeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdLikedTweetsSignalErrorFull() instead")
    void usersIdLikedTweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdLikedTweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMentionsSignalErrorFull() instead")
    void usersIdMentionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMentionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdRetweetsSignalErrorFull() instead")
    void usersIdRetweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdRetweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTimelineSignalErrorFull() instead")
    void usersIdTimelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTimelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTweetsSignalErrorFull() instead")
    void usersIdTweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnlikeSignalErrorFull() instead")
    void usersIdUnlikeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnlikeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnretweetsSignalErrorFull() instead")
    void usersIdUnretweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnretweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
