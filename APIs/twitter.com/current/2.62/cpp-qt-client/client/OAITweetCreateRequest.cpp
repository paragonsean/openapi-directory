/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweetCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweetCreateRequest::OAITweetCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweetCreateRequest::OAITweetCreateRequest() {
    this->initializeModel();
}

OAITweetCreateRequest::~OAITweetCreateRequest() {}

void OAITweetCreateRequest::initializeModel() {

    m_card_uri_isSet = false;
    m_card_uri_isValid = false;

    m_direct_message_deep_link_isSet = false;
    m_direct_message_deep_link_isValid = false;

    m_for_super_followers_only_isSet = false;
    m_for_super_followers_only_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_nullcast_isSet = false;
    m_nullcast_isValid = false;

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_quote_tweet_id_isSet = false;
    m_quote_tweet_id_isValid = false;

    m_reply_isSet = false;
    m_reply_isValid = false;

    m_reply_settings_isSet = false;
    m_reply_settings_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAITweetCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweetCreateRequest::fromJsonObject(QJsonObject json) {

    m_card_uri_isValid = ::OpenAPI::fromJsonValue(m_card_uri, json[QString("card_uri")]);
    m_card_uri_isSet = !json[QString("card_uri")].isNull() && m_card_uri_isValid;

    m_direct_message_deep_link_isValid = ::OpenAPI::fromJsonValue(m_direct_message_deep_link, json[QString("direct_message_deep_link")]);
    m_direct_message_deep_link_isSet = !json[QString("direct_message_deep_link")].isNull() && m_direct_message_deep_link_isValid;

    m_for_super_followers_only_isValid = ::OpenAPI::fromJsonValue(m_for_super_followers_only, json[QString("for_super_followers_only")]);
    m_for_super_followers_only_isSet = !json[QString("for_super_followers_only")].isNull() && m_for_super_followers_only_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_nullcast_isValid = ::OpenAPI::fromJsonValue(m_nullcast, json[QString("nullcast")]);
    m_nullcast_isSet = !json[QString("nullcast")].isNull() && m_nullcast_isValid;

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_quote_tweet_id_isValid = ::OpenAPI::fromJsonValue(m_quote_tweet_id, json[QString("quote_tweet_id")]);
    m_quote_tweet_id_isSet = !json[QString("quote_tweet_id")].isNull() && m_quote_tweet_id_isValid;

    m_reply_isValid = ::OpenAPI::fromJsonValue(m_reply, json[QString("reply")]);
    m_reply_isSet = !json[QString("reply")].isNull() && m_reply_isValid;

    m_reply_settings_isValid = ::OpenAPI::fromJsonValue(m_reply_settings, json[QString("reply_settings")]);
    m_reply_settings_isSet = !json[QString("reply_settings")].isNull() && m_reply_settings_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAITweetCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweetCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_card_uri_isSet) {
        obj.insert(QString("card_uri"), ::OpenAPI::toJsonValue(m_card_uri));
    }
    if (m_direct_message_deep_link_isSet) {
        obj.insert(QString("direct_message_deep_link"), ::OpenAPI::toJsonValue(m_direct_message_deep_link));
    }
    if (m_for_super_followers_only_isSet) {
        obj.insert(QString("for_super_followers_only"), ::OpenAPI::toJsonValue(m_for_super_followers_only));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_nullcast_isSet) {
        obj.insert(QString("nullcast"), ::OpenAPI::toJsonValue(m_nullcast));
    }
    if (m_poll.isSet()) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_quote_tweet_id_isSet) {
        obj.insert(QString("quote_tweet_id"), ::OpenAPI::toJsonValue(m_quote_tweet_id));
    }
    if (m_reply.isSet()) {
        obj.insert(QString("reply"), ::OpenAPI::toJsonValue(m_reply));
    }
    if (m_reply_settings_isSet) {
        obj.insert(QString("reply_settings"), ::OpenAPI::toJsonValue(m_reply_settings));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAITweetCreateRequest::getCardUri() const {
    return m_card_uri;
}
void OAITweetCreateRequest::setCardUri(const QString &card_uri) {
    m_card_uri = card_uri;
    m_card_uri_isSet = true;
}

bool OAITweetCreateRequest::is_card_uri_Set() const{
    return m_card_uri_isSet;
}

bool OAITweetCreateRequest::is_card_uri_Valid() const{
    return m_card_uri_isValid;
}

QString OAITweetCreateRequest::getDirectMessageDeepLink() const {
    return m_direct_message_deep_link;
}
void OAITweetCreateRequest::setDirectMessageDeepLink(const QString &direct_message_deep_link) {
    m_direct_message_deep_link = direct_message_deep_link;
    m_direct_message_deep_link_isSet = true;
}

bool OAITweetCreateRequest::is_direct_message_deep_link_Set() const{
    return m_direct_message_deep_link_isSet;
}

bool OAITweetCreateRequest::is_direct_message_deep_link_Valid() const{
    return m_direct_message_deep_link_isValid;
}

bool OAITweetCreateRequest::isForSuperFollowersOnly() const {
    return m_for_super_followers_only;
}
void OAITweetCreateRequest::setForSuperFollowersOnly(const bool &for_super_followers_only) {
    m_for_super_followers_only = for_super_followers_only;
    m_for_super_followers_only_isSet = true;
}

bool OAITweetCreateRequest::is_for_super_followers_only_Set() const{
    return m_for_super_followers_only_isSet;
}

bool OAITweetCreateRequest::is_for_super_followers_only_Valid() const{
    return m_for_super_followers_only_isValid;
}

OAITweetCreateRequest_geo OAITweetCreateRequest::getGeo() const {
    return m_geo;
}
void OAITweetCreateRequest::setGeo(const OAITweetCreateRequest_geo &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAITweetCreateRequest::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAITweetCreateRequest::is_geo_Valid() const{
    return m_geo_isValid;
}

OAITweetCreateRequest_media OAITweetCreateRequest::getMedia() const {
    return m_media;
}
void OAITweetCreateRequest::setMedia(const OAITweetCreateRequest_media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAITweetCreateRequest::is_media_Set() const{
    return m_media_isSet;
}

bool OAITweetCreateRequest::is_media_Valid() const{
    return m_media_isValid;
}

bool OAITweetCreateRequest::isNullcast() const {
    return m_nullcast;
}
void OAITweetCreateRequest::setNullcast(const bool &nullcast) {
    m_nullcast = nullcast;
    m_nullcast_isSet = true;
}

bool OAITweetCreateRequest::is_nullcast_Set() const{
    return m_nullcast_isSet;
}

bool OAITweetCreateRequest::is_nullcast_Valid() const{
    return m_nullcast_isValid;
}

OAITweetCreateRequest_poll OAITweetCreateRequest::getPoll() const {
    return m_poll;
}
void OAITweetCreateRequest::setPoll(const OAITweetCreateRequest_poll &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAITweetCreateRequest::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAITweetCreateRequest::is_poll_Valid() const{
    return m_poll_isValid;
}

QString OAITweetCreateRequest::getQuoteTweetId() const {
    return m_quote_tweet_id;
}
void OAITweetCreateRequest::setQuoteTweetId(const QString &quote_tweet_id) {
    m_quote_tweet_id = quote_tweet_id;
    m_quote_tweet_id_isSet = true;
}

bool OAITweetCreateRequest::is_quote_tweet_id_Set() const{
    return m_quote_tweet_id_isSet;
}

bool OAITweetCreateRequest::is_quote_tweet_id_Valid() const{
    return m_quote_tweet_id_isValid;
}

OAITweetCreateRequest_reply OAITweetCreateRequest::getReply() const {
    return m_reply;
}
void OAITweetCreateRequest::setReply(const OAITweetCreateRequest_reply &reply) {
    m_reply = reply;
    m_reply_isSet = true;
}

bool OAITweetCreateRequest::is_reply_Set() const{
    return m_reply_isSet;
}

bool OAITweetCreateRequest::is_reply_Valid() const{
    return m_reply_isValid;
}

QString OAITweetCreateRequest::getReplySettings() const {
    return m_reply_settings;
}
void OAITweetCreateRequest::setReplySettings(const QString &reply_settings) {
    m_reply_settings = reply_settings;
    m_reply_settings_isSet = true;
}

bool OAITweetCreateRequest::is_reply_settings_Set() const{
    return m_reply_settings_isSet;
}

bool OAITweetCreateRequest::is_reply_settings_Valid() const{
    return m_reply_settings_isValid;
}

QString OAITweetCreateRequest::getText() const {
    return m_text;
}
void OAITweetCreateRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITweetCreateRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAITweetCreateRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAITweetCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_message_deep_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_super_followers_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_tweet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweetCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
