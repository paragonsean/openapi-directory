/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet2TweetsFirehoseStreamResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet2TweetsFirehoseStreamResponse::OAIGet2TweetsFirehoseStreamResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet2TweetsFirehoseStreamResponse::OAIGet2TweetsFirehoseStreamResponse() {
    this->initializeModel();
}

OAIGet2TweetsFirehoseStreamResponse::~OAIGet2TweetsFirehoseStreamResponse() {}

void OAIGet2TweetsFirehoseStreamResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;
}

void OAIGet2TweetsFirehoseStreamResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet2TweetsFirehoseStreamResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("includes")]);
    m_includes_isSet = !json[QString("includes")].isNull() && m_includes_isValid;
}

QString OAIGet2TweetsFirehoseStreamResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet2TweetsFirehoseStreamResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    return obj;
}

OAITweet OAIGet2TweetsFirehoseStreamResponse::getData() const {
    return m_data;
}
void OAIGet2TweetsFirehoseStreamResponse::setData(const OAITweet &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIProblem> OAIGet2TweetsFirehoseStreamResponse::getErrors() const {
    return m_errors;
}
void OAIGet2TweetsFirehoseStreamResponse::setErrors(const QList<OAIProblem> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIExpansions OAIGet2TweetsFirehoseStreamResponse::getIncludes() const {
    return m_includes;
}
void OAIGet2TweetsFirehoseStreamResponse::setIncludes(const OAIExpansions &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIGet2TweetsFirehoseStreamResponse::is_includes_Valid() const{
    return m_includes_isValid;
}

bool OAIGet2TweetsFirehoseStreamResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet2TweetsFirehoseStreamResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
