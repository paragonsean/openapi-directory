/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesResponseMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesResponseMetadata::OAIRulesResponseMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesResponseMetadata::OAIRulesResponseMetadata() {
    this->initializeModel();
}

OAIRulesResponseMetadata::~OAIRulesResponseMetadata() {}

void OAIRulesResponseMetadata::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_result_count_isSet = false;
    m_result_count_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIRulesResponseMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesResponseMetadata::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("next_token")]);
    m_next_token_isSet = !json[QString("next_token")].isNull() && m_next_token_isValid;

    m_result_count_isValid = ::OpenAPI::fromJsonValue(m_result_count, json[QString("result_count")]);
    m_result_count_isSet = !json[QString("result_count")].isNull() && m_result_count_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIRulesResponseMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesResponseMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("next_token"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_result_count_isSet) {
        obj.insert(QString("result_count"), ::OpenAPI::toJsonValue(m_result_count));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIRulesResponseMetadata::getNextToken() const {
    return m_next_token;
}
void OAIRulesResponseMetadata::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIRulesResponseMetadata::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIRulesResponseMetadata::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIRulesResponseMetadata::getResultCount() const {
    return m_result_count;
}
void OAIRulesResponseMetadata::setResultCount(const qint32 &result_count) {
    m_result_count = result_count;
    m_result_count_isSet = true;
}

bool OAIRulesResponseMetadata::is_result_count_Set() const{
    return m_result_count_isSet;
}

bool OAIRulesResponseMetadata::is_result_count_Valid() const{
    return m_result_count_isValid;
}

QString OAIRulesResponseMetadata::getSent() const {
    return m_sent;
}
void OAIRulesResponseMetadata::setSent(const QString &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIRulesResponseMetadata::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIRulesResponseMetadata::is_sent_Valid() const{
    return m_sent_isValid;
}

OAIRulesRequestSummary OAIRulesResponseMetadata::getSummary() const {
    return m_summary;
}
void OAIRulesResponseMetadata::setSummary(const OAIRulesRequestSummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIRulesResponseMetadata::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIRulesResponseMetadata::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIRulesResponseMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesResponseMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sent_isValid && true;
}

} // namespace OpenAPI
