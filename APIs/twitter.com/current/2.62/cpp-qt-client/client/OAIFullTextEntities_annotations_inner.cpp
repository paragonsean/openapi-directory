/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFullTextEntities_annotations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFullTextEntities_annotations_inner::OAIFullTextEntities_annotations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFullTextEntities_annotations_inner::OAIFullTextEntities_annotations_inner() {
    this->initializeModel();
}

OAIFullTextEntities_annotations_inner::~OAIFullTextEntities_annotations_inner() {}

void OAIFullTextEntities_annotations_inner::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_normalized_text_isSet = false;
    m_normalized_text_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFullTextEntities_annotations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFullTextEntities_annotations_inner::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_normalized_text_isValid = ::OpenAPI::fromJsonValue(m_normalized_text, json[QString("normalized_text")]);
    m_normalized_text_isSet = !json[QString("normalized_text")].isNull() && m_normalized_text_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFullTextEntities_annotations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFullTextEntities_annotations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_normalized_text_isSet) {
        obj.insert(QString("normalized_text"), ::OpenAPI::toJsonValue(m_normalized_text));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIFullTextEntities_annotations_inner::getEnd() const {
    return m_end;
}
void OAIFullTextEntities_annotations_inner::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIFullTextEntities_annotations_inner::is_end_Set() const{
    return m_end_isSet;
}

bool OAIFullTextEntities_annotations_inner::is_end_Valid() const{
    return m_end_isValid;
}

qint32 OAIFullTextEntities_annotations_inner::getStart() const {
    return m_start;
}
void OAIFullTextEntities_annotations_inner::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIFullTextEntities_annotations_inner::is_start_Set() const{
    return m_start_isSet;
}

bool OAIFullTextEntities_annotations_inner::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIFullTextEntities_annotations_inner::getNormalizedText() const {
    return m_normalized_text;
}
void OAIFullTextEntities_annotations_inner::setNormalizedText(const QString &normalized_text) {
    m_normalized_text = normalized_text;
    m_normalized_text_isSet = true;
}

bool OAIFullTextEntities_annotations_inner::is_normalized_text_Set() const{
    return m_normalized_text_isSet;
}

bool OAIFullTextEntities_annotations_inner::is_normalized_text_Valid() const{
    return m_normalized_text_isValid;
}

double OAIFullTextEntities_annotations_inner::getProbability() const {
    return m_probability;
}
void OAIFullTextEntities_annotations_inner::setProbability(const double &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIFullTextEntities_annotations_inner::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIFullTextEntities_annotations_inner::is_probability_Valid() const{
    return m_probability_isValid;
}

QString OAIFullTextEntities_annotations_inner::getType() const {
    return m_type;
}
void OAIFullTextEntities_annotations_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFullTextEntities_annotations_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFullTextEntities_annotations_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFullTextEntities_annotations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFullTextEntities_annotations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
