/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet2TweetsIdQuoteTweetsResponse_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet2TweetsIdQuoteTweetsResponse_meta::OAIGet2TweetsIdQuoteTweetsResponse_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet2TweetsIdQuoteTweetsResponse_meta::OAIGet2TweetsIdQuoteTweetsResponse_meta() {
    this->initializeModel();
}

OAIGet2TweetsIdQuoteTweetsResponse_meta::~OAIGet2TweetsIdQuoteTweetsResponse_meta() {}

void OAIGet2TweetsIdQuoteTweetsResponse_meta::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_result_count_isSet = false;
    m_result_count_isValid = false;
}

void OAIGet2TweetsIdQuoteTweetsResponse_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet2TweetsIdQuoteTweetsResponse_meta::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("next_token")]);
    m_next_token_isSet = !json[QString("next_token")].isNull() && m_next_token_isValid;

    m_result_count_isValid = ::OpenAPI::fromJsonValue(m_result_count, json[QString("result_count")]);
    m_result_count_isSet = !json[QString("result_count")].isNull() && m_result_count_isValid;
}

QString OAIGet2TweetsIdQuoteTweetsResponse_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet2TweetsIdQuoteTweetsResponse_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("next_token"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_result_count_isSet) {
        obj.insert(QString("result_count"), ::OpenAPI::toJsonValue(m_result_count));
    }
    return obj;
}

QString OAIGet2TweetsIdQuoteTweetsResponse_meta::getNextToken() const {
    return m_next_token;
}
void OAIGet2TweetsIdQuoteTweetsResponse_meta::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGet2TweetsIdQuoteTweetsResponse_meta::getResultCount() const {
    return m_result_count;
}
void OAIGet2TweetsIdQuoteTweetsResponse_meta::setResultCount(const qint32 &result_count) {
    m_result_count = result_count;
    m_result_count_isSet = true;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::is_result_count_Set() const{
    return m_result_count_isSet;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::is_result_count_Valid() const{
    return m_result_count_isValid;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet2TweetsIdQuoteTweetsResponse_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
