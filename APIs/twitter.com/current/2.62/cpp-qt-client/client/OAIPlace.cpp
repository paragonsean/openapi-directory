/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace::OAIPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace::OAIPlace() {
    this->initializeModel();
}

OAIPlace::~OAIPlace() {}

void OAIPlace::initializeModel() {

    m_contained_within_isSet = false;
    m_contained_within_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_type_isSet = false;
    m_place_type_isValid = false;
}

void OAIPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace::fromJsonObject(QJsonObject json) {

    m_contained_within_isValid = ::OpenAPI::fromJsonValue(m_contained_within, json[QString("contained_within")]);
    m_contained_within_isSet = !json[QString("contained_within")].isNull() && m_contained_within_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_type_isValid = ::OpenAPI::fromJsonValue(m_place_type, json[QString("place_type")]);
    m_place_type_isSet = !json[QString("place_type")].isNull() && m_place_type_isValid;
}

QString OAIPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_contained_within.size() > 0) {
        obj.insert(QString("contained_within"), ::OpenAPI::toJsonValue(m_contained_within));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_type.isSet()) {
        obj.insert(QString("place_type"), ::OpenAPI::toJsonValue(m_place_type));
    }
    return obj;
}

QList<QString> OAIPlace::getContainedWithin() const {
    return m_contained_within;
}
void OAIPlace::setContainedWithin(const QList<QString> &contained_within) {
    m_contained_within = contained_within;
    m_contained_within_isSet = true;
}

bool OAIPlace::is_contained_within_Set() const{
    return m_contained_within_isSet;
}

bool OAIPlace::is_contained_within_Valid() const{
    return m_contained_within_isValid;
}

QString OAIPlace::getCountry() const {
    return m_country;
}
void OAIPlace::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlace::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPlace::getCountryCode() const {
    return m_country_code;
}
void OAIPlace::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPlace::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPlace::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPlace::getFullName() const {
    return m_full_name;
}
void OAIPlace::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPlace::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPlace::is_full_name_Valid() const{
    return m_full_name_isValid;
}

OAIGeo OAIPlace::getGeo() const {
    return m_geo;
}
void OAIPlace::setGeo(const OAIGeo &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIPlace::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIPlace::is_geo_Valid() const{
    return m_geo_isValid;
}

QString OAIPlace::getId() const {
    return m_id;
}
void OAIPlace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlace::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlace::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlace::getName() const {
    return m_name;
}
void OAIPlace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlace::is_name_Valid() const{
    return m_name_isValid;
}

OAIPlaceType OAIPlace::getPlaceType() const {
    return m_place_type;
}
void OAIPlace::setPlaceType(const OAIPlaceType &place_type) {
    m_place_type = place_type;
    m_place_type_isSet = true;
}

bool OAIPlace::is_place_type_Set() const{
    return m_place_type_isSet;
}

bool OAIPlace::is_place_type_Valid() const{
    return m_place_type_isValid;
}

bool OAIPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contained_within.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
