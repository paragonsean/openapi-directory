/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProtectComplianceSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProtectComplianceSchema::OAIUserProtectComplianceSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProtectComplianceSchema::OAIUserProtectComplianceSchema() {
    this->initializeModel();
}

OAIUserProtectComplianceSchema::~OAIUserProtectComplianceSchema() {}

void OAIUserProtectComplianceSchema::initializeModel() {

    m_user_protect_isSet = false;
    m_user_protect_isValid = false;
}

void OAIUserProtectComplianceSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProtectComplianceSchema::fromJsonObject(QJsonObject json) {

    m_user_protect_isValid = ::OpenAPI::fromJsonValue(m_user_protect, json[QString("user_protect")]);
    m_user_protect_isSet = !json[QString("user_protect")].isNull() && m_user_protect_isValid;
}

QString OAIUserProtectComplianceSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProtectComplianceSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_user_protect.isSet()) {
        obj.insert(QString("user_protect"), ::OpenAPI::toJsonValue(m_user_protect));
    }
    return obj;
}

OAIUserComplianceSchema OAIUserProtectComplianceSchema::getUserProtect() const {
    return m_user_protect;
}
void OAIUserProtectComplianceSchema::setUserProtect(const OAIUserComplianceSchema &user_protect) {
    m_user_protect = user_protect;
    m_user_protect_isSet = true;
}

bool OAIUserProtectComplianceSchema::is_user_protect_Set() const{
    return m_user_protect_isSet;
}

bool OAIUserProtectComplianceSchema::is_user_protect_Valid() const{
    return m_user_protect_isValid;
}

bool OAIUserProtectComplianceSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_protect.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProtectComplianceSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_protect_isValid && true;
}

} // namespace OpenAPI
