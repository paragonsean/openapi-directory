/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBlockUserMutationResponse.h"
#include "OAIBlockUserRequest.h"
#include "OAIError.h"
#include "OAIGet2ListsIdFollowersResponse.h"
#include "OAIGet2ListsIdMembersResponse.h"
#include "OAIGet2TweetsIdLikingUsersResponse.h"
#include "OAIGet2TweetsIdRetweetedByResponse.h"
#include "OAIGet2UsersByResponse.h"
#include "OAIGet2UsersByUsernameUsernameResponse.h"
#include "OAIGet2UsersIdBlockingResponse.h"
#include "OAIGet2UsersIdFollowersResponse.h"
#include "OAIGet2UsersIdFollowingResponse.h"
#include "OAIGet2UsersIdMutingResponse.h"
#include "OAIGet2UsersIdResponse.h"
#include "OAIGet2UsersMeResponse.h"
#include "OAIGet2UsersResponse.h"
#include "OAIMuteUserMutationResponse.h"
#include "OAIMuteUserRequest.h"
#include "OAIProblem.h"
#include "OAIUsersFollowingCreateRequest.h"
#include "OAIUsersFollowingCreateResponse.h"
#include "OAIUsersFollowingDeleteResponse.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void findMyUser(const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void findUserById(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void findUserByUsername(const QString &username, const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void findUsersById(const QList<QString> &ids, const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  usernames QList<QString> [required]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void findUsersByUsername(const QList<QString> &usernames, const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void listGetFollowers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void listGetMembers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void tweetsIdLikingUsers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void tweetsIdRetweetingUsers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_block_user_request OAIBlockUserRequest [required]
    */
    virtual void usersIdBlock(const QString &id, const OAIBlockUserRequest &oai_block_user_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void usersIdBlocking(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_users_following_create_request OAIUsersFollowingCreateRequest [optional]
    */
    virtual void usersIdFollow(const QString &id, const ::OpenAPI::OptionalParam<OAIUsersFollowingCreateRequest> &oai_users_following_create_request = ::OpenAPI::OptionalParam<OAIUsersFollowingCreateRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void usersIdFollowers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void usersIdFollowing(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_mute_user_request OAIMuteUserRequest [optional]
    */
    virtual void usersIdMute(const QString &id, const ::OpenAPI::OptionalParam<OAIMuteUserRequest> &oai_mute_user_request = ::OpenAPI::OptionalParam<OAIMuteUserRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  pagination_token QString [optional]
    * @param[in]  user_fields QSet<QString> [optional]
    * @param[in]  expansions QSet<QString> [optional]
    * @param[in]  tweet_fields QSet<QString> [optional]
    */
    virtual void usersIdMuting(const QString &id, const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pagination_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &user_fields = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &expansions = ::OpenAPI::OptionalParam<QSet<QString>>(), const ::OpenAPI::OptionalParam<QSet<QString>> &tweet_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  source_user_id QString [required]
    * @param[in]  target_user_id QString [required]
    */
    virtual void usersIdUnblock(const QString &source_user_id, const QString &target_user_id);

    /**
    * @param[in]  source_user_id QString [required]
    * @param[in]  target_user_id QString [required]
    */
    virtual void usersIdUnfollow(const QString &source_user_id, const QString &target_user_id);

    /**
    * @param[in]  source_user_id QString [required]
    * @param[in]  target_user_id QString [required]
    */
    virtual void usersIdUnmute(const QString &source_user_id, const QString &target_user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findMyUserCallback(OAIHttpRequestWorker *worker);
    void findUserByIdCallback(OAIHttpRequestWorker *worker);
    void findUserByUsernameCallback(OAIHttpRequestWorker *worker);
    void findUsersByIdCallback(OAIHttpRequestWorker *worker);
    void findUsersByUsernameCallback(OAIHttpRequestWorker *worker);
    void listGetFollowersCallback(OAIHttpRequestWorker *worker);
    void listGetMembersCallback(OAIHttpRequestWorker *worker);
    void tweetsIdLikingUsersCallback(OAIHttpRequestWorker *worker);
    void tweetsIdRetweetingUsersCallback(OAIHttpRequestWorker *worker);
    void usersIdBlockCallback(OAIHttpRequestWorker *worker);
    void usersIdBlockingCallback(OAIHttpRequestWorker *worker);
    void usersIdFollowCallback(OAIHttpRequestWorker *worker);
    void usersIdFollowersCallback(OAIHttpRequestWorker *worker);
    void usersIdFollowingCallback(OAIHttpRequestWorker *worker);
    void usersIdMuteCallback(OAIHttpRequestWorker *worker);
    void usersIdMutingCallback(OAIHttpRequestWorker *worker);
    void usersIdUnblockCallback(OAIHttpRequestWorker *worker);
    void usersIdUnfollowCallback(OAIHttpRequestWorker *worker);
    void usersIdUnmuteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findMyUserSignal(OAIGet2UsersMeResponse summary);
    void findUserByIdSignal(OAIGet2UsersIdResponse summary);
    void findUserByUsernameSignal(OAIGet2UsersByUsernameUsernameResponse summary);
    void findUsersByIdSignal(OAIGet2UsersResponse summary);
    void findUsersByUsernameSignal(OAIGet2UsersByResponse summary);
    void listGetFollowersSignal(OAIGet2ListsIdFollowersResponse summary);
    void listGetMembersSignal(OAIGet2ListsIdMembersResponse summary);
    void tweetsIdLikingUsersSignal(OAIGet2TweetsIdLikingUsersResponse summary);
    void tweetsIdRetweetingUsersSignal(OAIGet2TweetsIdRetweetedByResponse summary);
    void usersIdBlockSignal(OAIBlockUserMutationResponse summary);
    void usersIdBlockingSignal(OAIGet2UsersIdBlockingResponse summary);
    void usersIdFollowSignal(OAIUsersFollowingCreateResponse summary);
    void usersIdFollowersSignal(OAIGet2UsersIdFollowersResponse summary);
    void usersIdFollowingSignal(OAIGet2UsersIdFollowingResponse summary);
    void usersIdMuteSignal(OAIMuteUserMutationResponse summary);
    void usersIdMutingSignal(OAIGet2UsersIdMutingResponse summary);
    void usersIdUnblockSignal(OAIBlockUserMutationResponse summary);
    void usersIdUnfollowSignal(OAIUsersFollowingDeleteResponse summary);
    void usersIdUnmuteSignal(OAIMuteUserMutationResponse summary);


    void findMyUserSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersMeResponse summary);
    void findUserByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdResponse summary);
    void findUserByUsernameSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersByUsernameUsernameResponse summary);
    void findUsersByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersResponse summary);
    void findUsersByUsernameSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersByResponse summary);
    void listGetFollowersSignalFull(OAIHttpRequestWorker *worker, OAIGet2ListsIdFollowersResponse summary);
    void listGetMembersSignalFull(OAIHttpRequestWorker *worker, OAIGet2ListsIdMembersResponse summary);
    void tweetsIdLikingUsersSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsIdLikingUsersResponse summary);
    void tweetsIdRetweetingUsersSignalFull(OAIHttpRequestWorker *worker, OAIGet2TweetsIdRetweetedByResponse summary);
    void usersIdBlockSignalFull(OAIHttpRequestWorker *worker, OAIBlockUserMutationResponse summary);
    void usersIdBlockingSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdBlockingResponse summary);
    void usersIdFollowSignalFull(OAIHttpRequestWorker *worker, OAIUsersFollowingCreateResponse summary);
    void usersIdFollowersSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdFollowersResponse summary);
    void usersIdFollowingSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdFollowingResponse summary);
    void usersIdMuteSignalFull(OAIHttpRequestWorker *worker, OAIMuteUserMutationResponse summary);
    void usersIdMutingSignalFull(OAIHttpRequestWorker *worker, OAIGet2UsersIdMutingResponse summary);
    void usersIdUnblockSignalFull(OAIHttpRequestWorker *worker, OAIBlockUserMutationResponse summary);
    void usersIdUnfollowSignalFull(OAIHttpRequestWorker *worker, OAIUsersFollowingDeleteResponse summary);
    void usersIdUnmuteSignalFull(OAIHttpRequestWorker *worker, OAIMuteUserMutationResponse summary);

    Q_DECL_DEPRECATED_X("Use findMyUserSignalError() instead")
    void findMyUserSignalE(OAIGet2UsersMeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findMyUserSignalError(OAIGet2UsersMeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByIdSignalError() instead")
    void findUserByIdSignalE(OAIGet2UsersIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByIdSignalError(OAIGet2UsersIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByUsernameSignalError() instead")
    void findUserByUsernameSignalE(OAIGet2UsersByUsernameUsernameResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByUsernameSignalError(OAIGet2UsersByUsernameUsernameResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByIdSignalError() instead")
    void findUsersByIdSignalE(OAIGet2UsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByIdSignalError(OAIGet2UsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByUsernameSignalError() instead")
    void findUsersByUsernameSignalE(OAIGet2UsersByResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByUsernameSignalError(OAIGet2UsersByResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGetFollowersSignalError() instead")
    void listGetFollowersSignalE(OAIGet2ListsIdFollowersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGetFollowersSignalError(OAIGet2ListsIdFollowersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGetMembersSignalError() instead")
    void listGetMembersSignalE(OAIGet2ListsIdMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGetMembersSignalError(OAIGet2ListsIdMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsIdLikingUsersSignalError() instead")
    void tweetsIdLikingUsersSignalE(OAIGet2TweetsIdLikingUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsIdLikingUsersSignalError(OAIGet2TweetsIdLikingUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsIdRetweetingUsersSignalError() instead")
    void tweetsIdRetweetingUsersSignalE(OAIGet2TweetsIdRetweetedByResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsIdRetweetingUsersSignalError(OAIGet2TweetsIdRetweetedByResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBlockSignalError() instead")
    void usersIdBlockSignalE(OAIBlockUserMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBlockSignalError(OAIBlockUserMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBlockingSignalError() instead")
    void usersIdBlockingSignalE(OAIGet2UsersIdBlockingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBlockingSignalError(OAIGet2UsersIdBlockingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowSignalError() instead")
    void usersIdFollowSignalE(OAIUsersFollowingCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowSignalError(OAIUsersFollowingCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowersSignalError() instead")
    void usersIdFollowersSignalE(OAIGet2UsersIdFollowersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowersSignalError(OAIGet2UsersIdFollowersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowingSignalError() instead")
    void usersIdFollowingSignalE(OAIGet2UsersIdFollowingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowingSignalError(OAIGet2UsersIdFollowingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMuteSignalError() instead")
    void usersIdMuteSignalE(OAIMuteUserMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMuteSignalError(OAIMuteUserMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMutingSignalError() instead")
    void usersIdMutingSignalE(OAIGet2UsersIdMutingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMutingSignalError(OAIGet2UsersIdMutingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnblockSignalError() instead")
    void usersIdUnblockSignalE(OAIBlockUserMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnblockSignalError(OAIBlockUserMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnfollowSignalError() instead")
    void usersIdUnfollowSignalE(OAIUsersFollowingDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnfollowSignalError(OAIUsersFollowingDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnmuteSignalError() instead")
    void usersIdUnmuteSignalE(OAIMuteUserMutationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnmuteSignalError(OAIMuteUserMutationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findMyUserSignalErrorFull() instead")
    void findMyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findMyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByIdSignalErrorFull() instead")
    void findUserByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByUsernameSignalErrorFull() instead")
    void findUserByUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByIdSignalErrorFull() instead")
    void findUsersByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersByUsernameSignalErrorFull() instead")
    void findUsersByUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersByUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGetFollowersSignalErrorFull() instead")
    void listGetFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGetFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGetMembersSignalErrorFull() instead")
    void listGetMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGetMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsIdLikingUsersSignalErrorFull() instead")
    void tweetsIdLikingUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsIdLikingUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tweetsIdRetweetingUsersSignalErrorFull() instead")
    void tweetsIdRetweetingUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tweetsIdRetweetingUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBlockSignalErrorFull() instead")
    void usersIdBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBlockingSignalErrorFull() instead")
    void usersIdBlockingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBlockingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowSignalErrorFull() instead")
    void usersIdFollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowersSignalErrorFull() instead")
    void usersIdFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdFollowingSignalErrorFull() instead")
    void usersIdFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMuteSignalErrorFull() instead")
    void usersIdMuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdMutingSignalErrorFull() instead")
    void usersIdMutingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdMutingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnblockSignalErrorFull() instead")
    void usersIdUnblockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnblockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnfollowSignalErrorFull() instead")
    void usersIdUnfollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnfollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdUnmuteSignalErrorFull() instead")
    void usersIdUnmuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdUnmuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
