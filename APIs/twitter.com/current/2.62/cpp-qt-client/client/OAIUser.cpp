/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pinned_tweet_id_isSet = false;
    m_pinned_tweet_id_isValid = false;

    m_profile_image_url_isSet = false;
    m_profile_image_url_isValid = false;

    m_r_protected_isSet = false;
    m_r_protected_isValid = false;

    m_public_metrics_isSet = false;
    m_public_metrics_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;

    m_verified_type_isSet = false;
    m_verified_type_isValid = false;

    m_withheld_isSet = false;
    m_withheld_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pinned_tweet_id_isValid = ::OpenAPI::fromJsonValue(m_pinned_tweet_id, json[QString("pinned_tweet_id")]);
    m_pinned_tweet_id_isSet = !json[QString("pinned_tweet_id")].isNull() && m_pinned_tweet_id_isValid;

    m_profile_image_url_isValid = ::OpenAPI::fromJsonValue(m_profile_image_url, json[QString("profile_image_url")]);
    m_profile_image_url_isSet = !json[QString("profile_image_url")].isNull() && m_profile_image_url_isValid;

    m_r_protected_isValid = ::OpenAPI::fromJsonValue(m_r_protected, json[QString("protected")]);
    m_r_protected_isSet = !json[QString("protected")].isNull() && m_r_protected_isValid;

    m_public_metrics_isValid = ::OpenAPI::fromJsonValue(m_public_metrics, json[QString("public_metrics")]);
    m_public_metrics_isSet = !json[QString("public_metrics")].isNull() && m_public_metrics_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;

    m_verified_type_isValid = ::OpenAPI::fromJsonValue(m_verified_type, json[QString("verified_type")]);
    m_verified_type_isSet = !json[QString("verified_type")].isNull() && m_verified_type_isValid;

    m_withheld_isValid = ::OpenAPI::fromJsonValue(m_withheld, json[QString("withheld")]);
    m_withheld_isSet = !json[QString("withheld")].isNull() && m_withheld_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entities.isSet()) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pinned_tweet_id_isSet) {
        obj.insert(QString("pinned_tweet_id"), ::OpenAPI::toJsonValue(m_pinned_tweet_id));
    }
    if (m_profile_image_url_isSet) {
        obj.insert(QString("profile_image_url"), ::OpenAPI::toJsonValue(m_profile_image_url));
    }
    if (m_r_protected_isSet) {
        obj.insert(QString("protected"), ::OpenAPI::toJsonValue(m_r_protected));
    }
    if (m_public_metrics.isSet()) {
        obj.insert(QString("public_metrics"), ::OpenAPI::toJsonValue(m_public_metrics));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    if (m_verified_type_isSet) {
        obj.insert(QString("verified_type"), ::OpenAPI::toJsonValue(m_verified_type));
    }
    if (m_withheld.isSet()) {
        obj.insert(QString("withheld"), ::OpenAPI::toJsonValue(m_withheld));
    }
    return obj;
}

QDateTime OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser::getDescription() const {
    return m_description;
}
void OAIUser::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUser::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUser::is_description_Valid() const{
    return m_description_isValid;
}

OAIUser_entities OAIUser::getEntities() const {
    return m_entities;
}
void OAIUser::setEntities(const OAIUser_entities &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIUser::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIUser::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPinnedTweetId() const {
    return m_pinned_tweet_id;
}
void OAIUser::setPinnedTweetId(const QString &pinned_tweet_id) {
    m_pinned_tweet_id = pinned_tweet_id;
    m_pinned_tweet_id_isSet = true;
}

bool OAIUser::is_pinned_tweet_id_Set() const{
    return m_pinned_tweet_id_isSet;
}

bool OAIUser::is_pinned_tweet_id_Valid() const{
    return m_pinned_tweet_id_isValid;
}

QString OAIUser::getProfileImageUrl() const {
    return m_profile_image_url;
}
void OAIUser::setProfileImageUrl(const QString &profile_image_url) {
    m_profile_image_url = profile_image_url;
    m_profile_image_url_isSet = true;
}

bool OAIUser::is_profile_image_url_Set() const{
    return m_profile_image_url_isSet;
}

bool OAIUser::is_profile_image_url_Valid() const{
    return m_profile_image_url_isValid;
}

bool OAIUser::isRProtected() const {
    return m_r_protected;
}
void OAIUser::setRProtected(const bool &r_protected) {
    m_r_protected = r_protected;
    m_r_protected_isSet = true;
}

bool OAIUser::is_r_protected_Set() const{
    return m_r_protected_isSet;
}

bool OAIUser::is_r_protected_Valid() const{
    return m_r_protected_isValid;
}

OAIUser_public_metrics OAIUser::getPublicMetrics() const {
    return m_public_metrics;
}
void OAIUser::setPublicMetrics(const OAIUser_public_metrics &public_metrics) {
    m_public_metrics = public_metrics;
    m_public_metrics_isSet = true;
}

bool OAIUser::is_public_metrics_Set() const{
    return m_public_metrics_isSet;
}

bool OAIUser::is_public_metrics_Valid() const{
    return m_public_metrics_isValid;
}

QString OAIUser::getUrl() const {
    return m_url;
}
void OAIUser::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUser::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUser::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isVerified() const {
    return m_verified;
}
void OAIUser::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIUser::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIUser::is_verified_Valid() const{
    return m_verified_isValid;
}

QString OAIUser::getVerifiedType() const {
    return m_verified_type;
}
void OAIUser::setVerifiedType(const QString &verified_type) {
    m_verified_type = verified_type;
    m_verified_type_isSet = true;
}

bool OAIUser::is_verified_type_Set() const{
    return m_verified_type_isSet;
}

bool OAIUser::is_verified_type_Valid() const{
    return m_verified_type_isValid;
}

OAIUserWithheld OAIUser::getWithheld() const {
    return m_withheld;
}
void OAIUser::setWithheld(const OAIUserWithheld &withheld) {
    m_withheld = withheld;
    m_withheld_isSet = true;
}

bool OAIUser::is_withheld_Set() const{
    return m_withheld_isSet;
}

bool OAIUser::is_withheld_Valid() const{
    return m_withheld_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_tweet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withheld.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
