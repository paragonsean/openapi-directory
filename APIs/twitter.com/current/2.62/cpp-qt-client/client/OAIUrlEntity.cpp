/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlEntity::OAIUrlEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlEntity::OAIUrlEntity() {
    this->initializeModel();
}

OAIUrlEntity::~OAIUrlEntity() {}

void OAIUrlEntity::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_url_isSet = false;
    m_display_url_isValid = false;

    m_expanded_url_isSet = false;
    m_expanded_url_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_media_key_isSet = false;
    m_media_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_unwound_url_isSet = false;
    m_unwound_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUrlEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlEntity::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_url_isValid = ::OpenAPI::fromJsonValue(m_display_url, json[QString("display_url")]);
    m_display_url_isSet = !json[QString("display_url")].isNull() && m_display_url_isValid;

    m_expanded_url_isValid = ::OpenAPI::fromJsonValue(m_expanded_url, json[QString("expanded_url")]);
    m_expanded_url_isSet = !json[QString("expanded_url")].isNull() && m_expanded_url_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_media_key_isValid = ::OpenAPI::fromJsonValue(m_media_key, json[QString("media_key")]);
    m_media_key_isSet = !json[QString("media_key")].isNull() && m_media_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_unwound_url_isValid = ::OpenAPI::fromJsonValue(m_unwound_url, json[QString("unwound_url")]);
    m_unwound_url_isSet = !json[QString("unwound_url")].isNull() && m_unwound_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUrlEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_url_isSet) {
        obj.insert(QString("display_url"), ::OpenAPI::toJsonValue(m_display_url));
    }
    if (m_expanded_url_isSet) {
        obj.insert(QString("expanded_url"), ::OpenAPI::toJsonValue(m_expanded_url));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_media_key_isSet) {
        obj.insert(QString("media_key"), ::OpenAPI::toJsonValue(m_media_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_unwound_url_isSet) {
        obj.insert(QString("unwound_url"), ::OpenAPI::toJsonValue(m_unwound_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIUrlEntity::getEnd() const {
    return m_end;
}
void OAIUrlEntity::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIUrlEntity::is_end_Set() const{
    return m_end_isSet;
}

bool OAIUrlEntity::is_end_Valid() const{
    return m_end_isValid;
}

qint32 OAIUrlEntity::getStart() const {
    return m_start;
}
void OAIUrlEntity::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIUrlEntity::is_start_Set() const{
    return m_start_isSet;
}

bool OAIUrlEntity::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIUrlEntity::getDescription() const {
    return m_description;
}
void OAIUrlEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUrlEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUrlEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUrlEntity::getDisplayUrl() const {
    return m_display_url;
}
void OAIUrlEntity::setDisplayUrl(const QString &display_url) {
    m_display_url = display_url;
    m_display_url_isSet = true;
}

bool OAIUrlEntity::is_display_url_Set() const{
    return m_display_url_isSet;
}

bool OAIUrlEntity::is_display_url_Valid() const{
    return m_display_url_isValid;
}

QString OAIUrlEntity::getExpandedUrl() const {
    return m_expanded_url;
}
void OAIUrlEntity::setExpandedUrl(const QString &expanded_url) {
    m_expanded_url = expanded_url;
    m_expanded_url_isSet = true;
}

bool OAIUrlEntity::is_expanded_url_Set() const{
    return m_expanded_url_isSet;
}

bool OAIUrlEntity::is_expanded_url_Valid() const{
    return m_expanded_url_isValid;
}

QList<OAIUrlImage> OAIUrlEntity::getImages() const {
    return m_images;
}
void OAIUrlEntity::setImages(const QList<OAIUrlImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIUrlEntity::is_images_Set() const{
    return m_images_isSet;
}

bool OAIUrlEntity::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIUrlEntity::getMediaKey() const {
    return m_media_key;
}
void OAIUrlEntity::setMediaKey(const QString &media_key) {
    m_media_key = media_key;
    m_media_key_isSet = true;
}

bool OAIUrlEntity::is_media_key_Set() const{
    return m_media_key_isSet;
}

bool OAIUrlEntity::is_media_key_Valid() const{
    return m_media_key_isValid;
}

qint32 OAIUrlEntity::getStatus() const {
    return m_status;
}
void OAIUrlEntity::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUrlEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUrlEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUrlEntity::getTitle() const {
    return m_title;
}
void OAIUrlEntity::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUrlEntity::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUrlEntity::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUrlEntity::getUnwoundUrl() const {
    return m_unwound_url;
}
void OAIUrlEntity::setUnwoundUrl(const QString &unwound_url) {
    m_unwound_url = unwound_url;
    m_unwound_url_isSet = true;
}

bool OAIUrlEntity::is_unwound_url_Set() const{
    return m_unwound_url_isSet;
}

bool OAIUrlEntity::is_unwound_url_Valid() const{
    return m_unwound_url_isValid;
}

QString OAIUrlEntity::getUrl() const {
    return m_url;
}
void OAIUrlEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUrlEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUrlEntity::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUrlEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unwound_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_isValid && m_start_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
