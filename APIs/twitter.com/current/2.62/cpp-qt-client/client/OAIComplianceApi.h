/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIComplianceApi_H
#define OAI_OAIComplianceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateComplianceJobRequest.h"
#include "OAICreateComplianceJobResponse.h"
#include "OAIError.h"
#include "OAIGet2ComplianceJobsIdResponse.h"
#include "OAIGet2ComplianceJobsResponse.h"
#include "OAIProblem.h"
#include "OAITweetComplianceStreamResponse.h"
#include "OAITweetLabelStreamResponse.h"
#include "OAIUserComplianceStreamResponse.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIComplianceApi : public QObject {
    Q_OBJECT

public:
    OAIComplianceApi(const int timeOut = 0);
    ~OAIComplianceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_compliance_job_request OAICreateComplianceJobRequest [required]
    */
    virtual void createBatchComplianceJob(const OAICreateComplianceJobRequest &oai_create_compliance_job_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  compliance_job_fields QSet<QString> [optional]
    */
    virtual void getBatchComplianceJob(const QString &id, const ::OpenAPI::OptionalParam<QSet<QString>> &compliance_job_fields = ::OpenAPI::OptionalParam<QSet<QString>>());

    /**
    * @param[in]  partition qint32 [required]
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    */
    virtual void getTweetsComplianceStream(const qint32 &partition, const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    */
    virtual void getTweetsLabelStream(const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  partition qint32 [required]
    * @param[in]  backfill_minutes qint32 [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    */
    virtual void getUsersComplianceStream(const qint32 &partition, const ::OpenAPI::OptionalParam<qint32> &backfill_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  compliance_job_fields QSet<QString> [optional]
    */
    virtual void listBatchComplianceJobs(const QString &type, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QSet<QString>> &compliance_job_fields = ::OpenAPI::OptionalParam<QSet<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBatchComplianceJobCallback(OAIHttpRequestWorker *worker);
    void getBatchComplianceJobCallback(OAIHttpRequestWorker *worker);
    void getTweetsComplianceStreamCallback(OAIHttpRequestWorker *worker);
    void getTweetsLabelStreamCallback(OAIHttpRequestWorker *worker);
    void getUsersComplianceStreamCallback(OAIHttpRequestWorker *worker);
    void listBatchComplianceJobsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBatchComplianceJobSignal(OAICreateComplianceJobResponse summary);
    void getBatchComplianceJobSignal(OAIGet2ComplianceJobsIdResponse summary);
    void getTweetsComplianceStreamSignal(OAITweetComplianceStreamResponse summary);
    void getTweetsLabelStreamSignal(OAITweetLabelStreamResponse summary);
    void getUsersComplianceStreamSignal(OAIUserComplianceStreamResponse summary);
    void listBatchComplianceJobsSignal(OAIGet2ComplianceJobsResponse summary);


    void createBatchComplianceJobSignalFull(OAIHttpRequestWorker *worker, OAICreateComplianceJobResponse summary);
    void getBatchComplianceJobSignalFull(OAIHttpRequestWorker *worker, OAIGet2ComplianceJobsIdResponse summary);
    void getTweetsComplianceStreamSignalFull(OAIHttpRequestWorker *worker, OAITweetComplianceStreamResponse summary);
    void getTweetsLabelStreamSignalFull(OAIHttpRequestWorker *worker, OAITweetLabelStreamResponse summary);
    void getUsersComplianceStreamSignalFull(OAIHttpRequestWorker *worker, OAIUserComplianceStreamResponse summary);
    void listBatchComplianceJobsSignalFull(OAIHttpRequestWorker *worker, OAIGet2ComplianceJobsResponse summary);

    Q_DECL_DEPRECATED_X("Use createBatchComplianceJobSignalError() instead")
    void createBatchComplianceJobSignalE(OAICreateComplianceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchComplianceJobSignalError(OAICreateComplianceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchComplianceJobSignalError() instead")
    void getBatchComplianceJobSignalE(OAIGet2ComplianceJobsIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchComplianceJobSignalError(OAIGet2ComplianceJobsIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsComplianceStreamSignalError() instead")
    void getTweetsComplianceStreamSignalE(OAITweetComplianceStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsComplianceStreamSignalError(OAITweetComplianceStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsLabelStreamSignalError() instead")
    void getTweetsLabelStreamSignalE(OAITweetLabelStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsLabelStreamSignalError(OAITweetLabelStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersComplianceStreamSignalError() instead")
    void getUsersComplianceStreamSignalE(OAIUserComplianceStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersComplianceStreamSignalError(OAIUserComplianceStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchComplianceJobsSignalError() instead")
    void listBatchComplianceJobsSignalE(OAIGet2ComplianceJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchComplianceJobsSignalError(OAIGet2ComplianceJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBatchComplianceJobSignalErrorFull() instead")
    void createBatchComplianceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchComplianceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchComplianceJobSignalErrorFull() instead")
    void getBatchComplianceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchComplianceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsComplianceStreamSignalErrorFull() instead")
    void getTweetsComplianceStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsComplianceStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTweetsLabelStreamSignalErrorFull() instead")
    void getTweetsLabelStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTweetsLabelStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersComplianceStreamSignalErrorFull() instead")
    void getUsersComplianceStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersComplianceStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchComplianceJobsSignalErrorFull() instead")
    void listBatchComplianceJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchComplianceJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
