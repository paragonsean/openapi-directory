/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpansions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpansions::OAIExpansions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpansions::OAIExpansions() {
    this->initializeModel();
}

OAIExpansions::~OAIExpansions() {}

void OAIExpansions::initializeModel() {

    m_media_isSet = false;
    m_media_isValid = false;

    m_places_isSet = false;
    m_places_isValid = false;

    m_polls_isSet = false;
    m_polls_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_tweets_isSet = false;
    m_tweets_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIExpansions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpansions::fromJsonObject(QJsonObject json) {

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_places_isValid = ::OpenAPI::fromJsonValue(m_places, json[QString("places")]);
    m_places_isSet = !json[QString("places")].isNull() && m_places_isValid;

    m_polls_isValid = ::OpenAPI::fromJsonValue(m_polls, json[QString("polls")]);
    m_polls_isSet = !json[QString("polls")].isNull() && m_polls_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_tweets_isValid = ::OpenAPI::fromJsonValue(m_tweets, json[QString("tweets")]);
    m_tweets_isSet = !json[QString("tweets")].isNull() && m_tweets_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIExpansions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpansions::asJsonObject() const {
    QJsonObject obj;
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_places.size() > 0) {
        obj.insert(QString("places"), ::OpenAPI::toJsonValue(m_places));
    }
    if (m_polls.size() > 0) {
        obj.insert(QString("polls"), ::OpenAPI::toJsonValue(m_polls));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_tweets.size() > 0) {
        obj.insert(QString("tweets"), ::OpenAPI::toJsonValue(m_tweets));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QList<OAIMedia> OAIExpansions::getMedia() const {
    return m_media;
}
void OAIExpansions::setMedia(const QList<OAIMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIExpansions::is_media_Set() const{
    return m_media_isSet;
}

bool OAIExpansions::is_media_Valid() const{
    return m_media_isValid;
}

QList<OAIPlace> OAIExpansions::getPlaces() const {
    return m_places;
}
void OAIExpansions::setPlaces(const QList<OAIPlace> &places) {
    m_places = places;
    m_places_isSet = true;
}

bool OAIExpansions::is_places_Set() const{
    return m_places_isSet;
}

bool OAIExpansions::is_places_Valid() const{
    return m_places_isValid;
}

QList<OAIPoll> OAIExpansions::getPolls() const {
    return m_polls;
}
void OAIExpansions::setPolls(const QList<OAIPoll> &polls) {
    m_polls = polls;
    m_polls_isSet = true;
}

bool OAIExpansions::is_polls_Set() const{
    return m_polls_isSet;
}

bool OAIExpansions::is_polls_Valid() const{
    return m_polls_isValid;
}

QList<OAITopic> OAIExpansions::getTopics() const {
    return m_topics;
}
void OAIExpansions::setTopics(const QList<OAITopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIExpansions::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIExpansions::is_topics_Valid() const{
    return m_topics_isValid;
}

QList<OAITweet> OAIExpansions::getTweets() const {
    return m_tweets;
}
void OAIExpansions::setTweets(const QList<OAITweet> &tweets) {
    m_tweets = tweets;
    m_tweets_isSet = true;
}

bool OAIExpansions::is_tweets_Set() const{
    return m_tweets_isSet;
}

bool OAIExpansions::is_tweets_Valid() const{
    return m_tweets_isValid;
}

QList<OAIUser> OAIExpansions::getUsers() const {
    return m_users;
}
void OAIExpansions::setUsers(const QList<OAIUser> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIExpansions::is_users_Set() const{
    return m_users_isSet;
}

bool OAIExpansions::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIExpansions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_places.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_polls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tweets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpansions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
