/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDeleteComplianceSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDeleteComplianceSchema::OAIUserDeleteComplianceSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDeleteComplianceSchema::OAIUserDeleteComplianceSchema() {
    this->initializeModel();
}

OAIUserDeleteComplianceSchema::~OAIUserDeleteComplianceSchema() {}

void OAIUserDeleteComplianceSchema::initializeModel() {

    m_user_delete_isSet = false;
    m_user_delete_isValid = false;
}

void OAIUserDeleteComplianceSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDeleteComplianceSchema::fromJsonObject(QJsonObject json) {

    m_user_delete_isValid = ::OpenAPI::fromJsonValue(m_user_delete, json[QString("user_delete")]);
    m_user_delete_isSet = !json[QString("user_delete")].isNull() && m_user_delete_isValid;
}

QString OAIUserDeleteComplianceSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDeleteComplianceSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_user_delete.isSet()) {
        obj.insert(QString("user_delete"), ::OpenAPI::toJsonValue(m_user_delete));
    }
    return obj;
}

OAIUserComplianceSchema OAIUserDeleteComplianceSchema::getUserDelete() const {
    return m_user_delete;
}
void OAIUserDeleteComplianceSchema::setUserDelete(const OAIUserComplianceSchema &user_delete) {
    m_user_delete = user_delete;
    m_user_delete_isSet = true;
}

bool OAIUserDeleteComplianceSchema::is_user_delete_Set() const{
    return m_user_delete_isSet;
}

bool OAIUserDeleteComplianceSchema::is_user_delete_Valid() const{
    return m_user_delete_isValid;
}

bool OAIUserDeleteComplianceSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDeleteComplianceSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_delete_isValid && true;
}

} // namespace OpenAPI
